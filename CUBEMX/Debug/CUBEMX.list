
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008b84  08008b84  00018b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd4  08008bd4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bdc  08008bdc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000010  08008bf4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08008bf4  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fcc7  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004180  00000000  00000000  0003fd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a50  00000000  00000000  00043ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001440  00000000  00000000  00045920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023abb  00000000  00000000  00046d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023130  00000000  00000000  0006a81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5d03  00000000  00000000  0008d94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f90  00000000  00000000  00173650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0017a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008b6c 	.word	0x08008b6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008b6c 	.word	0x08008b6c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Current_IRQ>:
//PID
//CAN_PID PID_Current;
//CAN_PID PID_Velocity;
//CAN_PID PID_Angle;
//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d008      	beq.n	8000534 <Current_IRQ+0x20>
 8000522:	2210      	movs	r2, #16
 8000524:	6879      	ldr	r1, [r7, #4]
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <Current_IRQ+0x28>)
 8000528:	f008 fb12 	bl	8008b50 <memcpy>
    else return;
    Current_Callback_flag = 1;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <Current_IRQ+0x2c>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e000      	b.n	8000536 <Current_IRQ+0x22>
    else return;
 8000534:	bf00      	nop
}
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000030 	.word	0x20000030
 8000540:	2000002c 	.word	0x2000002c

08000544 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 800054c:	2208      	movs	r2, #8
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <Voltage_Temp_IRQ+0x1c>)
 8000552:	f008 fafd 	bl	8008b50 <memcpy>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000040 	.word	0x20000040

08000564 <BLDC_main>:
//	//memcpy(&Status, ptr, sizeof(CAN_Status));
//}


//------------------------MAIN-------------------------
void BLDC_main(void){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8000568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056c:	f001 fcaa 	bl	8001ec4 <HAL_Delay>

	//setup current
	current_init((void*)&Current_IRQ);
 8000570:	4817      	ldr	r0, [pc, #92]	; (80005d0 <BLDC_main+0x6c>)
 8000572:	f000 fa39 	bl	80009e8 <current_init>
	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 8000576:	4817      	ldr	r0, [pc, #92]	; (80005d4 <BLDC_main+0x70>)
 8000578:	f000 fa50 	bl	8000a1c <voltage_temperature_init>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 800057c:	4816      	ldr	r0, [pc, #88]	; (80005d8 <BLDC_main+0x74>)
 800057e:	f000 fc6d 	bl	8000e5c <FDCAN_Start>

	//--------------setup PWM------------------

	while(1){
		HAL_Delay(10);
 8000582:	200a      	movs	r0, #10
 8000584:	f001 fc9e 	bl	8001ec4 <HAL_Delay>

		Status_send.setpoint = IRQ_Voltage_Temp.V_Bat*20-3600000;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <BLDC_main+0x78>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4613      	mov	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	f5a3 135b 	sub.w	r3, r3, #3588096	; 0x36c000
 8000598:	f5a3 533a 	sub.w	r3, r3, #11904	; 0x2e80
 800059c:	461a      	mov	r2, r3
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <BLDC_main+0x7c>)
 80005a0:	609a      	str	r2, [r3, #8]
		if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin))Status_send.status = INPUT_STOP_WITH_BREAK;
 80005a2:	2101      	movs	r1, #1
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <BLDC_main+0x80>)
 80005a6:	f005 fb95 	bl	8005cd4 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d003      	beq.n	80005b8 <BLDC_main+0x54>
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <BLDC_main+0x7c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	e002      	b.n	80005be <BLDC_main+0x5a>
		else Status_send.status = INPUT_START;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <BLDC_main+0x7c>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	601a      	str	r2, [r3, #0]
		Status_send.reset_faults = 0;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <BLDC_main+0x7c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]

		FDCAN_sendData(&hfdcan1, (CAN_STATUS_ID << 8) | (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Status_send);
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <BLDC_main+0x7c>)
 80005c6:	2136      	movs	r1, #54	; 0x36
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <BLDC_main+0x74>)
 80005ca:	f000 fc62 	bl	8000e92 <FDCAN_sendData>
		HAL_Delay(10);
 80005ce:	e7d8      	b.n	8000582 <BLDC_main+0x1e>
 80005d0:	08000515 	.word	0x08000515
 80005d4:	08000545 	.word	0x08000545
 80005d8:	200002fc 	.word	0x200002fc
 80005dc:	20000040 	.word	0x20000040
 80005e0:	20000048 	.word	0x20000048
 80005e4:	48000400 	.word	0x48000400

080005e8 <ADC_CAL_init>:
VT_Callback VT_IRQ_callback;
Voltage_Temp VT_data;

#define Vref 3000

int32_t ADC_CAL_init(ADC_HandleTypeDef *hadc){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef HAL_status;
	ADC_HandleTypeDef *adc_handle_CAL;

	//check if pointer is NULL
	if(hadc == NULL)return -1; //null pointer error
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d102      	bne.n	80005fc <ADC_CAL_init+0x14>
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	e1dc      	b.n	80009b6 <ADC_CAL_init+0x3ce>

	//copy pointer
	adc_handle_CAL = hadc;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48

	//do a calibration
	HAL_status = HAL_ADCEx_Calibration_Start(adc_handle_CAL, ADC_SINGLE_ENDED);
 8000600:	217f      	movs	r1, #127	; 0x7f
 8000602:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000604:	f003 fba8 	bl	8003d58 <HAL_ADCEx_Calibration_Start>
 8000608:	4603      	mov	r3, r0
 800060a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (HAL_status != HAL_OK)return -2; //ADC calibration failed
 800060e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <ADC_CAL_init+0x34>
 8000616:	f06f 0301 	mvn.w	r3, #1
 800061a:	e1cc      	b.n	80009b6 <ADC_CAL_init+0x3ce>

	//start ADC
	uint16_t calibrating = number_of_calibration_points;
 800061c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000620:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	volatile uint32_t Voltage_offset_temp[3] = {0};
 8000624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2220      	movs	r2, #32
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f008 fa5d 	bl	8008af8 <memset>

	calibrating = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	while(calibrating){
 8000644:	e19c      	b.n	8000980 <ADC_CAL_init+0x398>
		sConfig.Channel = ADC_CHANNEL_0;
 8000646:	2301      	movs	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	4619      	mov	r1, r3
 8000650:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000652:	f002 fd2d 	bl	80030b0 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 800065c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <ADC_CAL_init+0x82>
 8000664:	f06f 0302 	mvn.w	r3, #2
 8000668:	e1a5      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 800066a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800066c:	f002 f868 	bl	8002740 <HAL_ADC_Start>
 8000670:	4603      	mov	r3, r0
 8000672:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8000676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <ADC_CAL_init+0x9c>
 800067e:	f06f 0302 	mvn.w	r3, #2
 8000682:	e198      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8000684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000688:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800068a:	f002 f949 	bl	8002920 <HAL_ADC_PollForConversion>
 800068e:	4603      	mov	r3, r0
 8000690:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8000694:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000698:	2b03      	cmp	r3, #3
 800069a:	d102      	bne.n	80006a2 <ADC_CAL_init+0xba>
 800069c:	f06f 0303 	mvn.w	r3, #3
 80006a0:	e189      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 80006a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <ADC_CAL_init+0xc8>
 80006aa:	f06f 0304 	mvn.w	r3, #4
 80006ae:	e182      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		uint32_t M3_raw = HAL_ADC_GetValue(adc_handle_CAL);
 80006b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80006b2:	f002 fac1 	bl	8002c38 <HAL_ADC_GetValue>
 80006b6:	6438      	str	r0, [r7, #64]	; 0x40
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 80006b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80006ba:	f002 f8fd 	bl	80028b8 <HAL_ADC_Stop>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 80006c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <ADC_CAL_init+0xea>
 80006cc:	f06f 0305 	mvn.w	r3, #5
 80006d0:	e171      	b.n	80009b6 <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_1;
 80006d2:	4bbb      	ldr	r3, [pc, #748]	; (80009c0 <ADC_CAL_init+0x3d8>)
 80006d4:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4619      	mov	r1, r3
 80006dc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80006de:	f002 fce7 	bl	80030b0 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 80006e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <ADC_CAL_init+0x10e>
 80006f0:	f06f 0302 	mvn.w	r3, #2
 80006f4:	e15f      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 80006f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80006f8:	f002 f822 	bl	8002740 <HAL_ADC_Start>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8000702:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <ADC_CAL_init+0x128>
 800070a:	f06f 0302 	mvn.w	r3, #2
 800070e:	e152      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8000710:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000714:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000716:	f002 f903 	bl	8002920 <HAL_ADC_PollForConversion>
 800071a:	4603      	mov	r3, r0
 800071c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8000720:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000724:	2b03      	cmp	r3, #3
 8000726:	d102      	bne.n	800072e <ADC_CAL_init+0x146>
 8000728:	f06f 0303 	mvn.w	r3, #3
 800072c:	e143      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 800072e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000732:	2b00      	cmp	r3, #0
 8000734:	d002      	beq.n	800073c <ADC_CAL_init+0x154>
 8000736:	f06f 0304 	mvn.w	r3, #4
 800073a:	e13c      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		uint32_t M2_raw = HAL_ADC_GetValue(adc_handle_CAL);
 800073c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800073e:	f002 fa7b 	bl	8002c38 <HAL_ADC_GetValue>
 8000742:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8000744:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000746:	f002 f8b7 	bl	80028b8 <HAL_ADC_Stop>
 800074a:	4603      	mov	r3, r0
 800074c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8000750:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <ADC_CAL_init+0x176>
 8000758:	f06f 0305 	mvn.w	r3, #5
 800075c:	e12b      	b.n	80009b6 <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_2;
 800075e:	4b99      	ldr	r3, [pc, #612]	; (80009c4 <ADC_CAL_init+0x3dc>)
 8000760:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	4619      	mov	r1, r3
 8000768:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800076a:	f002 fca1 	bl	80030b0 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8000774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <ADC_CAL_init+0x19a>
 800077c:	f06f 0302 	mvn.w	r3, #2
 8000780:	e119      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8000782:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000784:	f001 ffdc 	bl	8002740 <HAL_ADC_Start>
 8000788:	4603      	mov	r3, r0
 800078a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 800078e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <ADC_CAL_init+0x1b4>
 8000796:	f06f 0302 	mvn.w	r3, #2
 800079a:	e10c      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 800079c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007a2:	f002 f8bd 	bl	8002920 <HAL_ADC_PollForConversion>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 80007ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d102      	bne.n	80007ba <ADC_CAL_init+0x1d2>
 80007b4:	f06f 0303 	mvn.w	r3, #3
 80007b8:	e0fd      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 80007ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <ADC_CAL_init+0x1e0>
 80007c2:	f06f 0304 	mvn.w	r3, #4
 80007c6:	e0f6      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		uint32_t M1_raw = HAL_ADC_GetValue(adc_handle_CAL);
 80007c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007ca:	f002 fa35 	bl	8002c38 <HAL_ADC_GetValue>
 80007ce:	63b8      	str	r0, [r7, #56]	; 0x38
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 80007d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007d2:	f002 f871 	bl	80028b8 <HAL_ADC_Stop>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 80007dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <ADC_CAL_init+0x202>
 80007e4:	f06f 0305 	mvn.w	r3, #5
 80007e8:	e0e5      	b.n	80009b6 <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_3;
 80007ea:	4b77      	ldr	r3, [pc, #476]	; (80009c8 <ADC_CAL_init+0x3e0>)
 80007ec:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007f6:	f002 fc5b 	bl	80030b0 <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8000800:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <ADC_CAL_init+0x226>
 8000808:	f06f 0302 	mvn.w	r3, #2
 800080c:	e0d3      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 800080e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000810:	f001 ff96 	bl	8002740 <HAL_ADC_Start>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 800081a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <ADC_CAL_init+0x240>
 8000822:	f06f 0302 	mvn.w	r3, #2
 8000826:	e0c6      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8000828:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800082c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800082e:	f002 f877 	bl	8002920 <HAL_ADC_PollForConversion>
 8000832:	4603      	mov	r3, r0
 8000834:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8000838:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800083c:	2b03      	cmp	r3, #3
 800083e:	d102      	bne.n	8000846 <ADC_CAL_init+0x25e>
 8000840:	f06f 0303 	mvn.w	r3, #3
 8000844:	e0b7      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8000846:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <ADC_CAL_init+0x26c>
 800084e:	f06f 0304 	mvn.w	r3, #4
 8000852:	e0b0      	b.n	80009b6 <ADC_CAL_init+0x3ce>
		uint32_t vdda_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8000854:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000856:	f002 f9ef 	bl	8002c38 <HAL_ADC_GetValue>
 800085a:	6378      	str	r0, [r7, #52]	; 0x34
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 800085c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800085e:	f002 f82b 	bl	80028b8 <HAL_ADC_Stop>
 8000862:	4603      	mov	r3, r0
 8000864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8000868:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <ADC_CAL_init+0x28e>
 8000870:	f06f 0305 	mvn.w	r3, #5
 8000874:	e09f      	b.n	80009b6 <ADC_CAL_init+0x3ce>


		//get current samples;
		VDDA = (int16_t)3000*(*vrefint)/(vdda_raw/number_of_oversample);
 8000876:	4b55      	ldr	r3, [pc, #340]	; (80009cc <ADC_CAL_init+0x3e4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	461a      	mov	r2, r3
 8000888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088a:	091b      	lsrs	r3, r3, #4
 800088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000890:	b21a      	sxth	r2, r3
 8000892:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <ADC_CAL_init+0x3e8>)
 8000894:	801a      	strh	r2, [r3, #0]
		Voltage_offset_temp[0] += (int32_t)((M1_raw/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8000896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000898:	091b      	lsrs	r3, r3, #4
 800089a:	4a4d      	ldr	r2, [pc, #308]	; (80009d0 <ADC_CAL_init+0x3e8>)
 800089c:	8812      	ldrh	r2, [r2, #0]
 800089e:	b212      	sxth	r2, r2
 80008a0:	fb03 f202 	mul.w	r2, r3, r2
 80008a4:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <ADC_CAL_init+0x3ec>)
 80008a6:	fba3 1302 	umull	r1, r3, r3, r2
 80008aa:	1ad2      	subs	r2, r2, r3
 80008ac:	0852      	lsrs	r2, r2, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	0adb      	lsrs	r3, r3, #11
 80008b2:	461a      	mov	r2, r3
 80008b4:	4613      	mov	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	4413      	add	r3, r2
 80008ba:	011a      	lsls	r2, r3, #4
 80008bc:	4413      	add	r3, r2
 80008be:	4a46      	ldr	r2, [pc, #280]	; (80009d8 <ADC_CAL_init+0x3f0>)
 80008c0:	fb82 1203 	smull	r1, r2, r2, r3
 80008c4:	1152      	asrs	r2, r2, #5
 80008c6:	17db      	asrs	r3, r3, #31
 80008c8:	1ad2      	subs	r2, r2, r3
 80008ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008cc:	4413      	add	r3, r2
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
		Voltage_offset_temp[1] += (int32_t)((M2_raw/number_of_oversample*VDDA)/4095)*153/100;
 80008d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d2:	091b      	lsrs	r3, r3, #4
 80008d4:	4a3e      	ldr	r2, [pc, #248]	; (80009d0 <ADC_CAL_init+0x3e8>)
 80008d6:	8812      	ldrh	r2, [r2, #0]
 80008d8:	b212      	sxth	r2, r2
 80008da:	fb03 f202 	mul.w	r2, r3, r2
 80008de:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <ADC_CAL_init+0x3ec>)
 80008e0:	fba3 1302 	umull	r1, r3, r3, r2
 80008e4:	1ad2      	subs	r2, r2, r3
 80008e6:	0852      	lsrs	r2, r2, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	0adb      	lsrs	r3, r3, #11
 80008ec:	461a      	mov	r2, r3
 80008ee:	4613      	mov	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	4413      	add	r3, r2
 80008f4:	011a      	lsls	r2, r3, #4
 80008f6:	4413      	add	r3, r2
 80008f8:	4a37      	ldr	r2, [pc, #220]	; (80009d8 <ADC_CAL_init+0x3f0>)
 80008fa:	fb82 1203 	smull	r1, r2, r2, r3
 80008fe:	1152      	asrs	r2, r2, #5
 8000900:	17db      	asrs	r3, r3, #31
 8000902:	1ad2      	subs	r2, r2, r3
 8000904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000906:	4413      	add	r3, r2
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
		Voltage_offset_temp[2] += (int32_t)((M3_raw/number_of_oversample*VDDA)/4095)*153/100;
 800090a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800090c:	091b      	lsrs	r3, r3, #4
 800090e:	4a30      	ldr	r2, [pc, #192]	; (80009d0 <ADC_CAL_init+0x3e8>)
 8000910:	8812      	ldrh	r2, [r2, #0]
 8000912:	b212      	sxth	r2, r2
 8000914:	fb03 f202 	mul.w	r2, r3, r2
 8000918:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <ADC_CAL_init+0x3ec>)
 800091a:	fba3 1302 	umull	r1, r3, r3, r2
 800091e:	1ad2      	subs	r2, r2, r3
 8000920:	0852      	lsrs	r2, r2, #1
 8000922:	4413      	add	r3, r2
 8000924:	0adb      	lsrs	r3, r3, #11
 8000926:	461a      	mov	r2, r3
 8000928:	4613      	mov	r3, r2
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4413      	add	r3, r2
 800092e:	011a      	lsls	r2, r3, #4
 8000930:	4413      	add	r3, r2
 8000932:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <ADC_CAL_init+0x3f0>)
 8000934:	fb82 1203 	smull	r1, r2, r2, r3
 8000938:	1152      	asrs	r2, r2, #5
 800093a:	17db      	asrs	r3, r3, #31
 800093c:	1ad2      	subs	r2, r2, r3
 800093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000940:	4413      	add	r3, r2
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
		calibrating--;
 8000944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000948:	3b01      	subs	r3, #1
 800094a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		if(!calibrating){
 800094e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000952:	2b00      	cmp	r3, #0
 8000954:	d114      	bne.n	8000980 <ADC_CAL_init+0x398>
			Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8000956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000958:	4a20      	ldr	r2, [pc, #128]	; (80009dc <ADC_CAL_init+0x3f4>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	099b      	lsrs	r3, r3, #6
 8000960:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <ADC_CAL_init+0x3f8>)
 8000962:	6013      	str	r3, [r2, #0]
			Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8000964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000966:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <ADC_CAL_init+0x3f4>)
 8000968:	fba2 2303 	umull	r2, r3, r2, r3
 800096c:	099b      	lsrs	r3, r3, #6
 800096e:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <ADC_CAL_init+0x3f8>)
 8000970:	6053      	str	r3, [r2, #4]
			Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8000972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000974:	4a19      	ldr	r2, [pc, #100]	; (80009dc <ADC_CAL_init+0x3f4>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	099b      	lsrs	r3, r3, #6
 800097c:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <ADC_CAL_init+0x3f8>)
 800097e:	6093      	str	r3, [r2, #8]
	while(calibrating){
 8000980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000984:	2b00      	cmp	r3, #0
 8000986:	f47f ae5e 	bne.w	8000646 <ADC_CAL_init+0x5e>

		}
	}
	Voltage_offset[0] = 2400;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <ADC_CAL_init+0x3f8>)
 800098c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000990:	601a      	str	r2, [r3, #0]
	Voltage_offset[1] = 2400;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <ADC_CAL_init+0x3f8>)
 8000994:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000998:	605a      	str	r2, [r3, #4]
	Voltage_offset[2] = 2400;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <ADC_CAL_init+0x3f8>)
 800099c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80009a0:	609a      	str	r2, [r3, #8]


	//---------------DAC DEBUG-------------
	HAL_DAC_Init(&hdac1);
 80009a2:	4810      	ldr	r0, [pc, #64]	; (80009e4 <ADC_CAL_init+0x3fc>)
 80009a4:	f003 fc1f 	bl	80041e6 <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80009a8:	2100      	movs	r1, #0
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <ADC_CAL_init+0x3fc>)
 80009ac:	f003 fc3d 	bl	800422a <HAL_DAC_Start>


	return VDDA; //success
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <ADC_CAL_init+0x3e8>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b21b      	sxth	r3, r3
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3750      	adds	r7, #80	; 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	04300002 	.word	0x04300002
 80009c4:	08600004 	.word	0x08600004
 80009c8:	0c900008 	.word	0x0c900008
 80009cc:	20000000 	.word	0x20000000
 80009d0:	200000d4 	.word	0x200000d4
 80009d4:	00100101 	.word	0x00100101
 80009d8:	51eb851f 	.word	0x51eb851f
 80009dc:	10624dd3 	.word	0x10624dd3
 80009e0:	200000c8 	.word	0x200000c8
 80009e4:	200002e8 	.word	0x200002e8

080009e8 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	ADC_CAL_init(&hadc1);
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <current_init+0x28>)
 80009f2:	f7ff fdf9 	bl	80005e8 <ADC_CAL_init>

	Curent_IRQ_callback = __IRQ_callback;
 80009f6:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <current_init+0x2c>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 80009fc:	2208      	movs	r2, #8
 80009fe:	4906      	ldr	r1, [pc, #24]	; (8000a18 <current_init+0x30>)
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <current_init+0x28>)
 8000a02:	f002 f865 	bl	8002ad0 <HAL_ADC_Start_DMA>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000014c 	.word	0x2000014c
 8000a14:	200000d8 	.word	0x200000d8
 8000a18:	20000088 	.word	0x20000088

08000a1c <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8000a24:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <voltage_temperature_init+0x20>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	4904      	ldr	r1, [pc, #16]	; (8000a40 <voltage_temperature_init+0x24>)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <voltage_temperature_init+0x28>)
 8000a30:	f002 f84e 	bl	8002ad0 <HAL_ADC_Start_DMA>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000ec 	.word	0x200000ec
 8000a40:	200000a8 	.word	0x200000a8
 8000a44:	200001b8 	.word	0x200001b8

08000a48 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a6d      	ldr	r2, [pc, #436]	; (8000c08 <HAL_ADC_ConvHalfCpltCallback+0x1c0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	f040 8093 	bne.w	8000b80 <HAL_ADC_ConvHalfCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8000a5a:	4b6c      	ldr	r3, [pc, #432]	; (8000c0c <HAL_ADC_ConvHalfCpltCallback+0x1c4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a66:	fb02 f303 	mul.w	r3, r2, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b68      	ldr	r3, [pc, #416]	; (8000c10 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	091b      	lsrs	r3, r3, #4
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	4b66      	ldr	r3, [pc, #408]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000a7a:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8000a7c:	4b64      	ldr	r3, [pc, #400]	; (8000c10 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	091b      	lsrs	r3, r3, #4
 8000a82:	4a64      	ldr	r2, [pc, #400]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000a84:	8812      	ldrh	r2, [r2, #0]
 8000a86:	b212      	sxth	r2, r2
 8000a88:	fb03 f202 	mul.w	r2, r3, r2
 8000a8c:	4b62      	ldr	r3, [pc, #392]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	0852      	lsrs	r2, r2, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	0ada      	lsrs	r2, r3, #11
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	011a      	lsls	r2, r3, #4
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a5d      	ldr	r2, [pc, #372]	; (8000c1c <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8000aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aaa:	095a      	lsrs	r2, r3, #5
 8000aac:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000ab8:	fb02 f303 	mul.w	r3, r2, r3
 8000abc:	4a59      	ldr	r2, [pc, #356]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000abe:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8000ac0:	4b53      	ldr	r3, [pc, #332]	; (8000c10 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	4a53      	ldr	r2, [pc, #332]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000ac8:	8812      	ldrh	r2, [r2, #0]
 8000aca:	b212      	sxth	r2, r2
 8000acc:	fb03 f202 	mul.w	r2, r3, r2
 8000ad0:	4b51      	ldr	r3, [pc, #324]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ad6:	1ad2      	subs	r2, r2, r3
 8000ad8:	0852      	lsrs	r2, r2, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	0ada      	lsrs	r2, r3, #11
 8000ade:	4613      	mov	r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	011a      	lsls	r2, r3, #4
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a4c      	ldr	r2, [pc, #304]	; (8000c1c <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	095a      	lsrs	r2, r3, #5
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	4a48      	ldr	r2, [pc, #288]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b02:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8000b04:	4b42      	ldr	r3, [pc, #264]	; (8000c10 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	091b      	lsrs	r3, r3, #4
 8000b0a:	4a42      	ldr	r2, [pc, #264]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000b0c:	8812      	ldrh	r2, [r2, #0]
 8000b0e:	b212      	sxth	r2, r2
 8000b10:	fb03 f202 	mul.w	r2, r3, r2
 8000b14:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000b16:	fba3 1302 	umull	r1, r3, r3, r2
 8000b1a:	1ad2      	subs	r2, r2, r3
 8000b1c:	0852      	lsrs	r2, r2, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	0ada      	lsrs	r2, r3, #11
 8000b22:	4613      	mov	r3, r2
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	4413      	add	r3, r2
 8000b28:	011a      	lsls	r2, r3, #4
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a3b      	ldr	r2, [pc, #236]	; (8000c1c <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	095a      	lsrs	r2, r3, #5
 8000b34:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b46:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8000b48:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b50:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b54:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bfb8      	it	lt
 8000b5c:	425b      	neglt	r3, r3
 8000b5e:	441a      	add	r2, r3
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bfb8      	it	lt
 8000b68:	425b      	neglt	r3, r3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	0fda      	lsrs	r2, r3, #31
 8000b6e:	4413      	add	r3, r2
 8000b70:	105b      	asrs	r3, r3, #1
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b76:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4829      	ldr	r0, [pc, #164]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b7e:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a2a      	ldr	r2, [pc, #168]	; (8000c2c <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d13b      	bne.n	8000c00 <HAL_ADC_ConvHalfCpltCallback+0x1b8>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	091b      	lsrs	r3, r3, #4
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000b90:	8812      	ldrh	r2, [r2, #0]
 8000b92:	b212      	sxth	r2, r2
 8000b94:	fb03 f202 	mul.w	r2, r3, r2
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	1ad2      	subs	r2, r2, r3
 8000ba0:	0852      	lsrs	r2, r2, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	0adb      	lsrs	r3, r3, #11
 8000ba6:	b25a      	sxtb	r2, r3
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8000baa:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	091b      	lsrs	r3, r3, #4
 8000bb2:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000bb4:	8812      	ldrh	r2, [r2, #0]
 8000bb6:	b212      	sxth	r2, r2
 8000bb8:	fb03 f202 	mul.w	r2, r3, r2
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc2:	1ad2      	subs	r2, r2, r3
 8000bc4:	0852      	lsrs	r2, r2, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	0adb      	lsrs	r3, r3, #11
 8000bca:	b25a      	sxtb	r2, r3
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8000bce:	71da      	strb	r2, [r3, #7]
//		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*360/3.3)/ADC_RES;
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	091b      	lsrs	r3, r3, #4
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000bd8:	8812      	ldrh	r2, [r2, #0]
 8000bda:	b212      	sxth	r2, r2
 8000bdc:	fb03 f202 	mul.w	r2, r3, r2
 8000be0:	4613      	mov	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	1a9b      	subs	r3, r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4413      	add	r3, r2
 8000bea:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	0bdb      	lsrs	r3, r3, #15
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8000bf6:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8000bfe:	4798      	blx	r3
	}
//	dac_value(data.Current_DC);
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000014c 	.word	0x2000014c
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000088 	.word	0x20000088
 8000c14:	200000d4 	.word	0x200000d4
 8000c18:	00100101 	.word	0x00100101
 8000c1c:	51eb851f 	.word	0x51eb851f
 8000c20:	200000c8 	.word	0x200000c8
 8000c24:	200000dc 	.word	0x200000dc
 8000c28:	200000d8 	.word	0x200000d8
 8000c2c:	200001b8 	.word	0x200001b8
 8000c30:	200000a8 	.word	0x200000a8
 8000c34:	200000f0 	.word	0x200000f0
 8000c38:	ccd99a67 	.word	0xccd99a67
 8000c3c:	200000ec 	.word	0x200000ec

08000c40 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a75      	ldr	r2, [pc, #468]	; (8000e20 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	f040 8093 	bne.w	8000d78 <HAL_ADC_ConvCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8000c52:	4b74      	ldr	r3, [pc, #464]	; (8000e24 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b70      	ldr	r3, [pc, #448]	; (8000e28 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	4b6e      	ldr	r3, [pc, #440]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000c72:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8000c74:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	4a6c      	ldr	r2, [pc, #432]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000c7c:	8812      	ldrh	r2, [r2, #0]
 8000c7e:	b212      	sxth	r2, r2
 8000c80:	fb03 f202 	mul.w	r2, r3, r2
 8000c84:	4b6a      	ldr	r3, [pc, #424]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000c86:	fba3 1302 	umull	r1, r3, r3, r2
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	0852      	lsrs	r2, r2, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	0ada      	lsrs	r2, r3, #11
 8000c92:	4613      	mov	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4413      	add	r3, r2
 8000c98:	011a      	lsls	r2, r3, #4
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a65      	ldr	r2, [pc, #404]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	095a      	lsrs	r2, r3, #5
 8000ca4:	4b64      	ldr	r3, [pc, #400]	; (8000e38 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	4a61      	ldr	r2, [pc, #388]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000cb6:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8000cb8:	4b5b      	ldr	r3, [pc, #364]	; (8000e28 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	4a5b      	ldr	r2, [pc, #364]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000cc0:	8812      	ldrh	r2, [r2, #0]
 8000cc2:	b212      	sxth	r2, r2
 8000cc4:	fb03 f202 	mul.w	r2, r3, r2
 8000cc8:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000cca:	fba3 1302 	umull	r1, r3, r3, r2
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	0852      	lsrs	r2, r2, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	0ada      	lsrs	r2, r3, #11
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	4413      	add	r3, r2
 8000cdc:	011a      	lsls	r2, r3, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a54      	ldr	r2, [pc, #336]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	095a      	lsrs	r2, r3, #5
 8000ce8:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000cf4:	fb02 f303 	mul.w	r3, r2, r3
 8000cf8:	4a50      	ldr	r2, [pc, #320]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000cfa:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8000cfc:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	4a4a      	ldr	r2, [pc, #296]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000d04:	8812      	ldrh	r2, [r2, #0]
 8000d06:	b212      	sxth	r2, r2
 8000d08:	fb03 f202 	mul.w	r2, r3, r2
 8000d0c:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	0852      	lsrs	r2, r2, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	0ada      	lsrs	r2, r3, #11
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	011a      	lsls	r2, r3, #4
 8000d22:	4413      	add	r3, r2
 8000d24:	4a43      	ldr	r2, [pc, #268]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	095a      	lsrs	r2, r3, #5
 8000d2c:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	4a3f      	ldr	r2, [pc, #252]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d3e:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8000d40:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d48:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bfb8      	it	lt
 8000d54:	425b      	neglt	r3, r3
 8000d56:	441a      	add	r2, r3
 8000d58:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bfb8      	it	lt
 8000d60:	425b      	neglt	r3, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	0fda      	lsrs	r2, r3, #31
 8000d66:	4413      	add	r3, r2
 8000d68:	105b      	asrs	r3, r3, #1
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d6e:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8000d70:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x200>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4831      	ldr	r0, [pc, #196]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d76:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a32      	ldr	r2, [pc, #200]	; (8000e44 <HAL_ADC_ConvCpltCallback+0x204>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d14a      	bne.n	8000e16 <HAL_ADC_ConvCpltCallback+0x1d6>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 8000d80:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <HAL_ADC_ConvCpltCallback+0x208>)
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000d88:	8812      	ldrh	r2, [r2, #0]
 8000d8a:	b212      	sxth	r2, r2
 8000d8c:	fb03 f202 	mul.w	r2, r3, r2
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000d92:	fba3 1302 	umull	r1, r3, r3, r2
 8000d96:	1ad2      	subs	r2, r2, r3
 8000d98:	0852      	lsrs	r2, r2, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	0adb      	lsrs	r3, r3, #11
 8000d9e:	b25a      	sxtb	r2, r3
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x20c>)
 8000da2:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <HAL_ADC_ConvCpltCallback+0x208>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000dac:	8812      	ldrh	r2, [r2, #0]
 8000dae:	b212      	sxth	r2, r2
 8000db0:	fb03 f202 	mul.w	r2, r3, r2
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000db6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dba:	1ad2      	subs	r2, r2, r3
 8000dbc:	0852      	lsrs	r2, r2, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	0adb      	lsrs	r3, r3, #11
 8000dc2:	b25a      	sxtb	r2, r3
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x20c>)
 8000dc6:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*360000)/ADC_RES;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_ADC_ConvCpltCallback+0x208>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x210>)
 8000dd0:	fb03 f202 	mul.w	r2, r3, r2
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dda:	1ad2      	subs	r2, r2, r3
 8000ddc:	0852      	lsrs	r2, r2, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	0adb      	lsrs	r3, r3, #11
 8000de2:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x20c>)
 8000de4:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_ADC_ConvCpltCallback+0x208>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000dee:	8812      	ldrh	r2, [r2, #0]
 8000df0:	b212      	sxth	r2, r2
 8000df2:	fb03 f202 	mul.w	r2, r3, r2
 8000df6:	4613      	mov	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <HAL_ADC_ConvCpltCallback+0x214>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	0bdb      	lsrs	r3, r3, #15
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x20c>)
 8000e0c:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_ADC_ConvCpltCallback+0x218>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x20c>)
 8000e14:	4798      	blx	r3
	}
//	 dac_value(data.Current_DC);

}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000014c 	.word	0x2000014c
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000088 	.word	0x20000088
 8000e2c:	200000d4 	.word	0x200000d4
 8000e30:	00100101 	.word	0x00100101
 8000e34:	51eb851f 	.word	0x51eb851f
 8000e38:	200000c8 	.word	0x200000c8
 8000e3c:	200000dc 	.word	0x200000dc
 8000e40:	200000d8 	.word	0x200000d8
 8000e44:	200001b8 	.word	0x200001b8
 8000e48:	200000a8 	.word	0x200000a8
 8000e4c:	200000f0 	.word	0x200000f0
 8000e50:	00057e40 	.word	0x00057e40
 8000e54:	ccd99a67 	.word	0xccd99a67
 8000e58:	200000ec 	.word	0x200000ec

08000e5c <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f004 f867 	bl	8004f38 <HAL_FDCAN_Start>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e00a      	b.n	8000e8a <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000e74:	2200      	movs	r2, #0
 8000e76:	2101      	movs	r1, #1
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f004 f9a3 	bl	80051c4 <HAL_FDCAN_ActivateNotification>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <FDCAN_sendData>:

  return FDCAN_STATUS_OK;
}

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b08e      	sub	sp, #56	; 0x38
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8000ea2:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8000ea6:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000eb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000eba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f004 f859 	bl	8004f88 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3738      	adds	r7, #56	; 0x38
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b09e      	sub	sp, #120	; 0x78
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f004 f885 	bl	8005010 <HAL_FDCAN_GetRxMessage>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8000f0c:	f000 fd42 	bl	8001994 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	677b      	str	r3, [r7, #116]	; 0x74
 8000f14:	e012      	b.n	8000f3c <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d107      	bne.n	8000f36 <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	4610      	mov	r0, r2
 8000f34:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8000f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f38:	3301      	adds	r3, #1
 8000f3a:	677b      	str	r3, [r7, #116]	; 0x74
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d3e7      	bcc.n	8000f16 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	3778      	adds	r7, #120	; 0x78
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000f8 	.word	0x200000f8
 8000f54:	20000148 	.word	0x20000148

08000f58 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f007 fdc1 	bl	8008af8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f76:	4b4d      	ldr	r3, [pc, #308]	; (80010ac <MX_ADC1_Init+0x154>)
 8000f78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <MX_ADC1_Init+0x154>)
 8000f80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f86:	4b49      	ldr	r3, [pc, #292]	; (80010ac <MX_ADC1_Init+0x154>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <MX_ADC1_Init+0x154>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <MX_ADC1_Init+0x154>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f98:	4b44      	ldr	r3, [pc, #272]	; (80010ac <MX_ADC1_Init+0x154>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa4:	4b41      	ldr	r3, [pc, #260]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000faa:	4b40      	ldr	r3, [pc, #256]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000fb0:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b3d      	ldr	r3, [pc, #244]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000fda:	4b34      	ldr	r3, [pc, #208]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000fe2:	4b32      	ldr	r3, [pc, #200]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_ADC1_Init+0x154>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000fee:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <MX_ADC1_Init+0x154>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <MX_ADC1_Init+0x154>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffa:	482c      	ldr	r0, [pc, #176]	; (80010ac <MX_ADC1_Init+0x154>)
 8000ffc:	f001 fa16 	bl	800242c <HAL_ADC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001006:	f000 fcc5 	bl	8001994 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4825      	ldr	r0, [pc, #148]	; (80010ac <MX_ADC1_Init+0x154>)
 8001016:	f002 ff33 	bl	8003e80 <HAL_ADCEx_MultiModeConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001020:	f000 fcb8 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_ADC1_Init+0x158>)
 8001026:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001028:	2306      	movs	r3, #6
 800102a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800102c:	2303      	movs	r3, #3
 800102e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001030:	237f      	movs	r3, #127	; 0x7f
 8001032:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001034:	2304      	movs	r3, #4
 8001036:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	481a      	ldr	r0, [pc, #104]	; (80010ac <MX_ADC1_Init+0x154>)
 8001042:	f002 f835 	bl	80030b0 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 800104c:	f000 fca2 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_ADC1_Init+0x15c>)
 8001052:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001054:	230c      	movs	r3, #12
 8001056:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4813      	ldr	r0, [pc, #76]	; (80010ac <MX_ADC1_Init+0x154>)
 800105e:	f002 f827 	bl	80030b0 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8001068:	f000 fc94 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_ADC1_Init+0x160>)
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001070:	2312      	movs	r3, #18
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_ADC1_Init+0x154>)
 800107a:	f002 f819 	bl	80030b0 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8001084:	f000 fc86 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_ADC1_Init+0x164>)
 800108a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800108c:	2318      	movs	r3, #24
 800108e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_ADC1_Init+0x154>)
 8001096:	f002 f80b 	bl	80030b0 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 80010a0:	f000 fc78 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3730      	adds	r7, #48	; 0x30
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000014c 	.word	0x2000014c
 80010b0:	04300002 	.word	0x04300002
 80010b4:	08600004 	.word	0x08600004
 80010b8:	0c900008 	.word	0x0c900008
 80010bc:	cb840000 	.word	0xcb840000

080010c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2220      	movs	r2, #32
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 fd13 	bl	8008af8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <MX_ADC2_Init+0x130>)
 80010d4:	4a47      	ldr	r2, [pc, #284]	; (80011f4 <MX_ADC2_Init+0x134>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d8:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <MX_ADC2_Init+0x130>)
 80010da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <MX_ADC2_Init+0x130>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e6:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <MX_ADC2_Init+0x130>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010ec:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <MX_ADC2_Init+0x130>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010f2:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <MX_ADC2_Init+0x130>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f8:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <MX_ADC2_Init+0x130>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010fe:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001100:	2200      	movs	r2, #0
 8001102:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001106:	2201      	movs	r2, #1
 8001108:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 800110a:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <MX_ADC2_Init+0x130>)
 800110c:	2204      	movs	r2, #4
 800110e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001110:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001118:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <MX_ADC2_Init+0x130>)
 800111a:	2200      	movs	r2, #0
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <MX_ADC2_Init+0x130>)
 800112e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <MX_ADC2_Init+0x130>)
 800113e:	220c      	movs	r2, #12
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001144:	2200      	movs	r2, #0
 8001146:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_ADC2_Init+0x130>)
 800114a:	2200      	movs	r2, #0
 800114c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001150:	2201      	movs	r2, #1
 8001152:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001154:	4826      	ldr	r0, [pc, #152]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001156:	f001 f969 	bl	800242c <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8001160:	f000 fc18 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_ADC2_Init+0x138>)
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001168:	2306      	movs	r3, #6
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800116c:	2307      	movs	r3, #7
 800116e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001170:	237f      	movs	r3, #127	; 0x7f
 8001172:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001174:	2304      	movs	r3, #4
 8001176:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	481b      	ldr	r0, [pc, #108]	; (80011f0 <MX_ADC2_Init+0x130>)
 8001182:	f001 ff95 	bl	80030b0 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 800118c:	f000 fc02 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_ADC2_Init+0x13c>)
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001194:	230c      	movs	r3, #12
 8001196:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	4813      	ldr	r0, [pc, #76]	; (80011f0 <MX_ADC2_Init+0x130>)
 80011a2:	f001 ff85 	bl	80030b0 <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80011ac:	f000 fbf2 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_ADC2_Init+0x140>)
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011b4:	2312      	movs	r3, #18
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_ADC2_Init+0x130>)
 80011be:	f001 ff77 	bl	80030b0 <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 80011c8:	f000 fbe4 	bl	8001994 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <MX_ADC2_Init+0x144>)
 80011ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011d0:	2318      	movs	r3, #24
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_ADC2_Init+0x130>)
 80011da:	f001 ff69 	bl	80030b0 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80011e4:	f000 fbd6 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200001b8 	.word	0x200001b8
 80011f4:	50000100 	.word	0x50000100
 80011f8:	32601000 	.word	0x32601000
 80011fc:	3ac04000 	.word	0x3ac04000
 8001200:	36902000 	.word	0x36902000
 8001204:	0c900008 	.word	0x0c900008

08001208 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09e      	sub	sp, #120	; 0x78
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	2244      	movs	r2, #68	; 0x44
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f007 fc65 	bl	8008af8 <memset>
  if(adcHandle->Instance==ADC1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001236:	d171      	bne.n	800131c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800123c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800123e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001242:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	4618      	mov	r0, r3
 800124a:	f005 fb9d 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001254:	f000 fb9e 	bl	8001994 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001258:	4b7a      	ldr	r3, [pc, #488]	; (8001444 <HAL_ADC_MspInit+0x23c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a79      	ldr	r2, [pc, #484]	; (8001444 <HAL_ADC_MspInit+0x23c>)
 8001260:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001262:	4b78      	ldr	r3, [pc, #480]	; (8001444 <HAL_ADC_MspInit+0x23c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10b      	bne.n	8001282 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800126a:	4b77      	ldr	r3, [pc, #476]	; (8001448 <HAL_ADC_MspInit+0x240>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a76      	ldr	r2, [pc, #472]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b74      	ldr	r3, [pc, #464]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b71      	ldr	r3, [pc, #452]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a70      	ldr	r2, [pc, #448]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b6e      	ldr	r3, [pc, #440]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 800129a:	2307      	movs	r3, #7
 800129c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b0:	f004 fb8e 	bl	80059d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012b4:	4b65      	ldr	r3, [pc, #404]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012b6:	4a66      	ldr	r2, [pc, #408]	; (8001450 <HAL_ADC_MspInit+0x248>)
 80012b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ba:	4b64      	ldr	r3, [pc, #400]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012bc:	2205      	movs	r2, #5
 80012be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c0:	4b62      	ldr	r3, [pc, #392]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	4b61      	ldr	r3, [pc, #388]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b5f      	ldr	r3, [pc, #380]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012d2:	4b5e      	ldr	r3, [pc, #376]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012da:	4b5c      	ldr	r3, [pc, #368]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e2:	4b5a      	ldr	r3, [pc, #360]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012e4:	2220      	movs	r2, #32
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012e8:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012ee:	4857      	ldr	r0, [pc, #348]	; (800144c <HAL_ADC_MspInit+0x244>)
 80012f0:	f003 f996 	bl	8004620 <HAL_DMA_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80012fa:	f000 fb4b 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_ADC_MspInit+0x244>)
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
 8001304:	4a51      	ldr	r2, [pc, #324]	; (800144c <HAL_ADC_MspInit+0x244>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2012      	movs	r0, #18
 8001310:	f002 ff35 	bl	800417e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001314:	2012      	movs	r0, #18
 8001316:	f002 ff4c 	bl	80041b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800131a:	e08f      	b.n	800143c <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_ADC_MspInit+0x24c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	f040 808a 	bne.w	800143c <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800132e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001332:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	4618      	mov	r0, r3
 800133a:	f005 fb25 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8001344:	f000 fb26 	bl	8001994 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001348:	4b3e      	ldr	r3, [pc, #248]	; (8001444 <HAL_ADC_MspInit+0x23c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a3d      	ldr	r2, [pc, #244]	; (8001444 <HAL_ADC_MspInit+0x23c>)
 8001350:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001352:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <HAL_ADC_MspInit+0x23c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10b      	bne.n	8001372 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_ADC_MspInit+0x240>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a3a      	ldr	r2, [pc, #232]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a34      	ldr	r2, [pc, #208]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <HAL_ADC_MspInit+0x240>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_ADC_MspInit+0x240>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 80013a2:	2360      	movs	r3, #96	; 0x60
 80013a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b8:	f004 fb0a 	bl	80059d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 80013bc:	f640 0304 	movw	r3, #2052	; 0x804
 80013c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013ce:	4619      	mov	r1, r3
 80013d0:	4821      	ldr	r0, [pc, #132]	; (8001458 <HAL_ADC_MspInit+0x250>)
 80013d2:	f004 fafd 	bl	80059d0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_ADC_MspInit+0x254>)
 80013d8:	4a21      	ldr	r2, [pc, #132]	; (8001460 <HAL_ADC_MspInit+0x258>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <HAL_ADC_MspInit+0x254>)
 80013de:	2224      	movs	r2, #36	; 0x24
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_ADC_MspInit+0x254>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_ADC_MspInit+0x254>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_ADC_MspInit+0x254>)
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_ADC_MspInit+0x254>)
 80013f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_ADC_MspInit+0x254>)
 80013fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001402:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_ADC_MspInit+0x254>)
 8001406:	2220      	movs	r2, #32
 8001408:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_ADC_MspInit+0x254>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001410:	4812      	ldr	r0, [pc, #72]	; (800145c <HAL_ADC_MspInit+0x254>)
 8001412:	f003 f905 	bl	8004620 <HAL_DMA_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 800141c:	f000 faba 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_ADC_MspInit+0x254>)
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_ADC_MspInit+0x254>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2012      	movs	r0, #18
 8001432:	f002 fea4 	bl	800417e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001436:	2012      	movs	r0, #18
 8001438:	f002 febb 	bl	80041b2 <HAL_NVIC_EnableIRQ>
}
 800143c:	bf00      	nop
 800143e:	3778      	adds	r7, #120	; 0x78
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002e4 	.word	0x200002e4
 8001448:	40021000 	.word	0x40021000
 800144c:	20000224 	.word	0x20000224
 8001450:	40020008 	.word	0x40020008
 8001454:	50000100 	.word	0x50000100
 8001458:	48000400 	.word	0x48000400
 800145c:	20000284 	.word	0x20000284
 8001460:	4002001c 	.word	0x4002001c

08001464 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2230      	movs	r2, #48	; 0x30
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f007 fb41 	bl	8008af8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <MX_DAC1_Init+0x6c>)
 8001478:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <MX_DAC1_Init+0x70>)
 800147a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800147c:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_DAC1_Init+0x6c>)
 800147e:	f002 feb2 	bl	80041e6 <HAL_DAC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001488:	f000 fa84 	bl	8001994 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <MX_DAC1_Init+0x6c>)
 80014b8:	f002 ff0a 	bl	80042d0 <HAL_DAC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80014c2:	f000 fa67 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3730      	adds	r7, #48	; 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002e8 	.word	0x200002e8
 80014d4:	50000800 	.word	0x50000800

080014d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a15      	ldr	r2, [pc, #84]	; (800154c <HAL_DAC_MspInit+0x74>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d124      	bne.n	8001544 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_DAC_MspInit+0x78>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_DAC_MspInit+0x78>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_DAC_MspInit+0x78>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_DAC_MspInit+0x78>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_DAC_MspInit+0x78>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_DAC_MspInit+0x78>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800152a:	2310      	movs	r3, #16
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152e:	2303      	movs	r3, #3
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f004 fa46 	bl	80059d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	50000800 	.word	0x50000800
 8001550:	40021000 	.word	0x40021000

08001554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <MX_DMA_Init+0x88>)
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <MX_DMA_Init+0x88>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6493      	str	r3, [r2, #72]	; 0x48
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_DMA_Init+0x88>)
 8001568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_DMA_Init+0x88>)
 8001574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001576:	4a19      	ldr	r2, [pc, #100]	; (80015dc <MX_DMA_Init+0x88>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6493      	str	r3, [r2, #72]	; 0x48
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_DMA_Init+0x88>)
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_DMA_Init+0x88>)
 800158c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158e:	4a13      	ldr	r2, [pc, #76]	; (80015dc <MX_DMA_Init+0x88>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6493      	str	r3, [r2, #72]	; 0x48
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_DMA_Init+0x88>)
 8001598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	200b      	movs	r0, #11
 80015a8:	f002 fde9 	bl	800417e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015ac:	200b      	movs	r0, #11
 80015ae:	f002 fe00 	bl	80041b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	200c      	movs	r0, #12
 80015b8:	f002 fde1 	bl	800417e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015bc:	200c      	movs	r0, #12
 80015be:	f002 fdf8 	bl	80041b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	203a      	movs	r0, #58	; 0x3a
 80015c8:	f002 fdd9 	bl	800417e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80015cc:	203a      	movs	r0, #58	; 0x3a
 80015ce:	f002 fdf0 	bl	80041b2 <HAL_NVIC_EnableIRQ>

}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <MX_FDCAN1_Init+0x88>)
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <MX_FDCAN1_Init+0x8c>)
 80015e8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_FDCAN1_Init+0x88>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <MX_FDCAN1_Init+0x88>)
 80015f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015f6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_FDCAN1_Init+0x88>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001600:	2200      	movs	r2, #0
 8001602:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001606:	2200      	movs	r2, #0
 8001608:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_FDCAN1_Init+0x88>)
 800160c:	2200      	movs	r2, #0
 800160e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001612:	2201      	movs	r2, #1
 8001614:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001618:	2207      	movs	r2, #7
 800161a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_FDCAN1_Init+0x88>)
 800161e:	222a      	movs	r2, #42	; 0x2a
 8001620:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001624:	2207      	movs	r2, #7
 8001626:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_FDCAN1_Init+0x88>)
 800162a:	2201      	movs	r2, #1
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001630:	2209      	movs	r2, #9
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001636:	220a      	movs	r2, #10
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_FDCAN1_Init+0x88>)
 800163c:	2209      	movs	r2, #9
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001642:	2200      	movs	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001648:	2200      	movs	r2, #0
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_FDCAN1_Init+0x88>)
 800164e:	2200      	movs	r2, #0
 8001650:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_FDCAN1_Init+0x88>)
 8001654:	f003 fb16 	bl	8004c84 <HAL_FDCAN_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800165e:	f000 f999 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002fc 	.word	0x200002fc
 800166c:	40006400 	.word	0x40006400

08001670 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09a      	sub	sp, #104	; 0x68
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2244      	movs	r2, #68	; 0x44
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f007 fa31 	bl	8008af8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <HAL_FDCAN_MspInit+0xbc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d141      	bne.n	8001724 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80016a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 f969 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80016bc:	f000 f96a 	bl	8001994 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_FDCAN_MspInit+0xc0>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <HAL_FDCAN_MspInit+0xc0>)
 80016c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ca:	6593      	str	r3, [r2, #88]	; 0x58
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_FDCAN_MspInit+0xc0>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_FDCAN_MspInit+0xc0>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_FDCAN_MspInit+0xc0>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_FDCAN_MspInit+0xc0>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016f4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001702:	2309      	movs	r3, #9
 8001704:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f004 f95e 	bl	80059d0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2015      	movs	r0, #21
 800171a:	f002 fd30 	bl	800417e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800171e:	2015      	movs	r0, #21
 8001720:	f002 fd47 	bl	80041b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001724:	bf00      	nop
 8001726:	3768      	adds	r7, #104	; 0x68
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40006400 	.word	0x40006400
 8001730:	40021000 	.word	0x40021000

08001734 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_FMAC_Init+0x20>)
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <MX_FMAC_Init+0x24>)
 800173c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_FMAC_Init+0x20>)
 8001740:	f004 f89a 	bl	8005878 <HAL_FMAC_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800174a:	f000 f923 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000360 	.word	0x20000360
 8001758:	40021400 	.word	0x40021400

0800175c <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_FMAC_MspInit+0x38>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10b      	bne.n	8001786 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_FMAC_MspInit+0x3c>)
 8001770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <HAL_FMAC_MspInit+0x3c>)
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	6493      	str	r3, [r2, #72]	; 0x48
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <HAL_FMAC_MspInit+0x3c>)
 800177c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021400 	.word	0x40021400
 8001798:	40021000 	.word	0x40021000

0800179c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <MX_GPIO_Init+0x110>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a3d      	ldr	r2, [pc, #244]	; (80018ac <MX_GPIO_Init+0x110>)
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <MX_GPIO_Init+0x110>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <MX_GPIO_Init+0x110>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a37      	ldr	r2, [pc, #220]	; (80018ac <MX_GPIO_Init+0x110>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b35      	ldr	r3, [pc, #212]	; (80018ac <MX_GPIO_Init+0x110>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b32      	ldr	r3, [pc, #200]	; (80018ac <MX_GPIO_Init+0x110>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a31      	ldr	r2, [pc, #196]	; (80018ac <MX_GPIO_Init+0x110>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <MX_GPIO_Init+0x110>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <MX_GPIO_Init+0x110>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a2b      	ldr	r2, [pc, #172]	; (80018ac <MX_GPIO_Init+0x110>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <MX_GPIO_Init+0x110>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	21c0      	movs	r1, #192	; 0xc0
 8001816:	4826      	ldr	r0, [pc, #152]	; (80018b0 <MX_GPIO_Init+0x114>)
 8001818:	f004 fa74 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f004 fa6d 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	481d      	ldr	r0, [pc, #116]	; (80018b4 <MX_GPIO_Init+0x118>)
 800183e:	f004 f8c7 	bl	80059d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8001842:	23c0      	movs	r3, #192	; 0xc0
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	4815      	ldr	r0, [pc, #84]	; (80018b0 <MX_GPIO_Init+0x114>)
 800185a:	f004 f8b9 	bl	80059d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800185e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f004 f8a7 	bl	80059d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8001882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f004 f897 	bl	80059d0 <HAL_GPIO_Init>

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	; 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	48000800 	.word	0x48000800
 80018b4:	48000400 	.word	0x48000400

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018bc:	f000 fa91 	bl	8001de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c0:	f000 f815 	bl	80018ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c4:	f7ff ff6a 	bl	800179c <MX_GPIO_Init>
  MX_DMA_Init();
 80018c8:	f7ff fe44 	bl	8001554 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80018cc:	f7ff fe88 	bl	80015e0 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 80018d0:	f7ff fb42 	bl	8000f58 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018d4:	f7ff fbf4 	bl	80010c0 <MX_ADC2_Init>
  MX_DAC1_Init();
 80018d8:	f7ff fdc4 	bl	8001464 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80018dc:	f000 f97e 	bl	8001bdc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80018e0:	f000 f908 	bl	8001af4 <MX_TIM3_Init>
  MX_FMAC_Init();
 80018e4:	f7ff ff26 	bl	8001734 <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 80018e8:	f7fe fe3c 	bl	8000564 <BLDC_main>
 80018ec:	e7fc      	b.n	80018e8 <main+0x30>

080018ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b094      	sub	sp, #80	; 0x50
 80018f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	2238      	movs	r2, #56	; 0x38
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f007 f8fb 	bl	8008af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001910:	2000      	movs	r0, #0
 8001912:	f004 fa0f 	bl	8005d34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001920:	2340      	movs	r3, #64	; 0x40
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001924:	2302      	movs	r3, #2
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001928:	2302      	movs	r3, #2
 800192a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800192c:	2304      	movs	r3, #4
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001930:	2350      	movs	r3, #80	; 0x50
 8001932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001934:	2302      	movs	r3, #2
 8001936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8001938:	2308      	movs	r3, #8
 800193a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800193c:	2302      	movs	r3, #2
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f004 faa9 	bl	8005e9c <HAL_RCC_OscConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001950:	f000 f820 	bl	8001994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001954:	230f      	movs	r3, #15
 8001956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001958:	2303      	movs	r3, #3
 800195a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2104      	movs	r1, #4
 800196c:	4618      	mov	r0, r3
 800196e:	f004 fdad 	bl	80064cc <HAL_RCC_ClockConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001978:	f000 f80c 	bl	8001994 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 800197c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001980:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8001984:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001988:	f004 fedc 	bl	8006744 <HAL_RCC_MCOConfig>
}
 800198c:	bf00      	nop
 800198e:	3750      	adds	r7, #80	; 0x50
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800199c:	e7fe      	b.n	800199c <Error_Handler+0x8>
	...

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_MspInit+0x44>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <HAL_MspInit+0x44>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6613      	str	r3, [r2, #96]	; 0x60
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_MspInit+0x44>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_MspInit+0x44>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x44>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x44>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019d6:	f004 fa51 	bl	8005e7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 fa28 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <DMA1_Channel1_IRQHandler+0x10>)
 8001a42:	f002 ffd0 	bl	80049e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000224 	.word	0x20000224

08001a50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <DMA1_Channel2_IRQHandler+0x10>)
 8001a56:	f002 ffc6 	bl	80049e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000284 	.word	0x20000284

08001a64 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <ADC1_2_IRQHandler+0x14>)
 8001a6a:	f001 f8f3 	bl	8002c54 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <ADC1_2_IRQHandler+0x18>)
 8001a70:	f001 f8f0 	bl	8002c54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000014c 	.word	0x2000014c
 8001a7c:	200001b8 	.word	0x200001b8

08001a80 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <FDCAN1_IT0_IRQHandler+0x10>)
 8001a86:	f003 fc83 	bl	8005390 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200002fc 	.word	0x200002fc

08001a94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <TIM3_IRQHandler+0x10>)
 8001a9a:	f005 f9bc 	bl	8006e16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000398 	.word	0x20000398

08001aa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <USART1_IRQHandler+0x10>)
 8001aae:	f005 fea1 	bl	80077f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200003e4 	.word	0x200003e4

08001abc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <DMA2_Channel3_IRQHandler+0x10>)
 8001ac2:	f002 ff90 	bl	80049e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000474 	.word	0x20000474

08001ad0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <SystemInit+0x20>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <SystemInit+0x20>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <MX_TIM3_Init+0x98>)
 8001b16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b26:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001b2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b38:	4813      	ldr	r0, [pc, #76]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b3a:	f005 f915 	bl	8006d68 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b44:	f7ff ff26 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	4619      	mov	r1, r3
 8001b54:	480c      	ldr	r0, [pc, #48]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b56:	f005 fadd 	bl	8007114 <HAL_TIM_ConfigClockSource>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b60:	f7ff ff18 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b72:	f005 fd27 	bl	80075c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b7c:	f7ff ff0a 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000398 	.word	0x20000398
 8001b8c:	40000400 	.word	0x40000400

08001b90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_TIM_Base_MspInit+0x44>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d113      	bne.n	8001bca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_TIM_Base_MspInit+0x48>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <HAL_TIM_Base_MspInit+0x48>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6593      	str	r3, [r2, #88]	; 0x58
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_TIM_Base_MspInit+0x48>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	201d      	movs	r0, #29
 8001bc0:	f002 fadd 	bl	800417e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bc4:	201d      	movs	r0, #29
 8001bc6:	f002 faf4 	bl	80041b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	40021000 	.word	0x40021000

08001bdc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001be2:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <MX_USART1_UART_Init+0x94>)
 8001be4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001be8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001bec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c24:	4811      	ldr	r0, [pc, #68]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c26:	f005 fd95 	bl	8007754 <HAL_UART_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c30:	f7ff feb0 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c34:	2100      	movs	r1, #0
 8001c36:	480d      	ldr	r0, [pc, #52]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c38:	f006 fe93 	bl	8008962 <HAL_UARTEx_SetTxFifoThreshold>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c42:	f7ff fea7 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c46:	2100      	movs	r1, #0
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c4a:	f006 fec8 	bl	80089de <HAL_UARTEx_SetRxFifoThreshold>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c54:	f7ff fe9e 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c58:	4804      	ldr	r0, [pc, #16]	; (8001c6c <MX_USART1_UART_Init+0x90>)
 8001c5a:	f006 fe49 	bl	80088f0 <HAL_UARTEx_DisableFifoMode>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c64:	f7ff fe96 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200003e4 	.word	0x200003e4
 8001c70:	40013800 	.word	0x40013800

08001c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b09a      	sub	sp, #104	; 0x68
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	2244      	movs	r2, #68	; 0x44
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f006 ff2f 	bl	8008af8 <memset>
  if(uartHandle->Instance==USART1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a37      	ldr	r2, [pc, #220]	; (8001d7c <HAL_UART_MspInit+0x108>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d166      	bne.n	8001d72 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 fe69 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cbc:	f7ff fe6a 	bl	8001994 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_UART_MspInit+0x10c>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	; (8001d80 <HAL_UART_MspInit+0x10c>)
 8001cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cca:	6613      	str	r3, [r2, #96]	; 0x60
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_UART_MspInit+0x10c>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_UART_MspInit+0x10c>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <HAL_UART_MspInit+0x10c>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_UART_MspInit+0x10c>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cf0:	2330      	movs	r3, #48	; 0x30
 8001cf2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d00:	2307      	movs	r3, #7
 8001d02:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481e      	ldr	r0, [pc, #120]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001d0c:	f003 fe60 	bl	80059d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_UART_MspInit+0x118>)
 8001d14:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d18:	2219      	movs	r2, #25
 8001d1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d1e:	2210      	movs	r2, #16
 8001d20:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d46:	4810      	ldr	r0, [pc, #64]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d48:	f002 fc6a 	bl	8004620 <HAL_DMA_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8001d52:	f7ff fe1f 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d5a:	679a      	str	r2, [r3, #120]	; 0x78
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2025      	movs	r0, #37	; 0x25
 8001d68:	f002 fa09 	bl	800417e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d6c:	2025      	movs	r0, #37	; 0x25
 8001d6e:	f002 fa20 	bl	80041b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3768      	adds	r7, #104	; 0x68
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000800 	.word	0x48000800
 8001d88:	20000474 	.word	0x20000474
 8001d8c:	40020430 	.word	0x40020430

08001d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d96:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <LoopForever+0xe>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dac:	4c0b      	ldr	r4, [pc, #44]	; (8001ddc <LoopForever+0x16>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dba:	f7ff fe89 	bl	8001ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f006 fea3 	bl	8008b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc2:	f7ff fd79 	bl	80018b8 <main>

08001dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc6:	e7fe      	b.n	8001dc6 <LoopForever>
  ldr   r0, =_estack
 8001dc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001dd4:	08008be4 	.word	0x08008be4
  ldr r2, =_sbss
 8001dd8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ddc:	200004d8 	.word	0x200004d8

08001de0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <COMP1_2_3_IRQHandler>

08001de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f002 f9bb 	bl	8004168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f80e 	bl	8001e14 <HAL_InitTick>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	e001      	b.n	8001e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e04:	f7ff fdcc 	bl	80019a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e08:	79fb      	ldrb	r3, [r7, #7]

}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_InitTick+0x68>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d022      	beq.n	8001e6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_InitTick+0x6c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_InitTick+0x68>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 f9c6 	bl	80041ce <HAL_SYSTICK_Config>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10f      	bne.n	8001e68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	d809      	bhi.n	8001e62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	f04f 30ff 	mov.w	r0, #4294967295
 8001e56:	f002 f992 	bl	800417e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_InitTick+0x70>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e007      	b.n	8001e72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	e004      	b.n	8001e72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e001      	b.n	8001e72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	2000000c 	.word	0x2000000c
 8001e80:	20000004 	.word	0x20000004
 8001e84:	20000008 	.word	0x20000008

08001e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_IncTick+0x1c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a03      	ldr	r2, [pc, #12]	; (8001ea4 <HAL_IncTick+0x1c>)
 8001e98:	6013      	str	r3, [r2, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	200004d4 	.word	0x200004d4
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200004d4 	.word	0x200004d4

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d004      	beq.n	8001ee8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_Delay+0x40>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee8:	bf00      	nop
 8001eea:	f7ff ffdf 	bl	8001eac <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d8f7      	bhi.n	8001eea <HAL_Delay+0x26>
  {
  }
}
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000000c 	.word	0x2000000c

08001f08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	609a      	str	r2, [r3, #8]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3360      	adds	r3, #96	; 0x60
 8001f82:	461a      	mov	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <LL_ADC_SetOffset+0x44>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fa8:	bf00      	nop
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	03fff000 	.word	0x03fff000

08001fb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3360      	adds	r3, #96	; 0x60
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3360      	adds	r3, #96	; 0x60
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800201a:	b480      	push	{r7}
 800201c:	b087      	sub	sp, #28
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3360      	adds	r3, #96	; 0x60
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	431a      	orrs	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3360      	adds	r3, #96	; 0x60
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	431a      	orrs	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800207a:	bf00      	nop
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	615a      	str	r2, [r3, #20]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b087      	sub	sp, #28
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3330      	adds	r3, #48	; 0x30
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	4413      	add	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	211f      	movs	r1, #31
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	401a      	ands	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0e9b      	lsrs	r3, r3, #26
 800210a:	f003 011f 	and.w	r1, r3, #31
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3314      	adds	r3, #20
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	0e5b      	lsrs	r3, r3, #25
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	4413      	add	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	0d1b      	lsrs	r3, r3, #20
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2107      	movs	r1, #7
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	401a      	ands	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	0d1b      	lsrs	r3, r3, #20
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	431a      	orrs	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d10a      	bne.n	80021d2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80021d0:	e00a      	b.n	80021e8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021de:	43db      	mvns	r3, r3
 80021e0:	401a      	ands	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	407f0000 	.word	0x407f0000

080021f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 031f 	and.w	r3, r3, #31
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002240:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6093      	str	r3, [r2, #8]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002268:	d101      	bne.n	800226e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800228c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002290:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022b8:	d101      	bne.n	80022be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002308:	f043 0202 	orr.w	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <LL_ADC_IsEnabled+0x18>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <LL_ADC_IsEnabled+0x1a>
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d101      	bne.n	800235a <LL_ADC_IsDisableOngoing+0x18>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <LL_ADC_IsDisableOngoing+0x1a>
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800237c:	f043 0204 	orr.w	r2, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a4:	f043 0210 	orr.w	r2, r3, #16
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d101      	bne.n	80023d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023f2:	f043 0220 	orr.w	r2, r3, #32
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b08      	cmp	r3, #8
 8002418:	d101      	bne.n	800241e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e177      	b.n	8002736 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7fe fed7 	bl	8001208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fef1 	bl	8002254 <LL_ADC_IsDeepPowerDownEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fed7 	bl	8002230 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff0c 	bl	80022a4 <LL_ADC_IsInternalRegulatorEnabled>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d115      	bne.n	80024be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fef0 	bl	800227c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800249c:	4b9c      	ldr	r3, [pc, #624]	; (8002710 <HAL_ADC_Init+0x2e4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	4a9c      	ldr	r2, [pc, #624]	; (8002714 <HAL_ADC_Init+0x2e8>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024b0:	e002      	b.n	80024b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f9      	bne.n	80024b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff feee 	bl	80022a4 <LL_ADC_IsInternalRegulatorEnabled>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	f043 0210 	orr.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff62 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 80024f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 8110 	bne.w	8002724 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 810c 	bne.w	8002724 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002514:	f043 0202 	orr.w	r2, r3, #2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fefb 	bl	800231c <LL_ADC_IsEnabled>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800252c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002530:	f7ff fef4 	bl	800231c <LL_ADC_IsEnabled>
 8002534:	4604      	mov	r4, r0
 8002536:	4878      	ldr	r0, [pc, #480]	; (8002718 <HAL_ADC_Init+0x2ec>)
 8002538:	f7ff fef0 	bl	800231c <LL_ADC_IsEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	4323      	orrs	r3, r4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4619      	mov	r1, r3
 800254a:	4874      	ldr	r0, [pc, #464]	; (800271c <HAL_ADC_Init+0x2f0>)
 800254c:	f7ff fcdc 	bl	8001f08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7f5b      	ldrb	r3, [r3, #29]
 8002554:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800255a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002560:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002566:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800257a:	2b01      	cmp	r3, #1
 800257c:	d106      	bne.n	800258c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	045b      	lsls	r3, r3, #17
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d009      	beq.n	80025a8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	4b5c      	ldr	r3, [pc, #368]	; (8002720 <HAL_ADC_Init+0x2f4>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	69b9      	ldr	r1, [r7, #24]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff feee 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 80025dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff0f 	bl	8002406 <LL_ADC_INJ_IsConversionOngoing>
 80025e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d16d      	bne.n	80026cc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d16a      	bne.n	80026cc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002602:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002612:	f023 0302 	bic.w	r3, r3, #2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	430b      	orrs	r3, r1
 800261e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d017      	beq.n	8002658 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002636:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002640:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6911      	ldr	r1, [r2, #16]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	430b      	orrs	r3, r1
 8002652:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002656:	e013      	b.n	8002680 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002666:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002678:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800267c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002686:	2b01      	cmp	r3, #1
 8002688:	d118      	bne.n	80026bc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026a6:	4311      	orrs	r1, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026ac:	430a      	orrs	r2, r1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	e007      	b.n	80026cc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10c      	bne.n	80026ee <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f023 010f 	bic.w	r1, r3, #15
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	1e5a      	subs	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
 80026ec:	e007      	b.n	80026fe <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 020f 	bic.w	r2, r2, #15
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	65da      	str	r2, [r3, #92]	; 0x5c
 800270e:	e011      	b.n	8002734 <HAL_ADC_Init+0x308>
 8002710:	20000004 	.word	0x20000004
 8002714:	053e2d63 	.word	0x053e2d63
 8002718:	50000100 	.word	0x50000100
 800271c:	50000300 	.word	0x50000300
 8002720:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	f043 0210 	orr.w	r2, r3, #16
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002734:	7ffb      	ldrb	r3, [r7, #31]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	bf00      	nop

08002740 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002748:	4859      	ldr	r0, [pc, #356]	; (80028b0 <HAL_ADC_Start+0x170>)
 800274a:	f7ff fd55 	bl	80021f8 <LL_ADC_GetMultimode>
 800274e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fe2f 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 809f 	bne.w	80028a0 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_ADC_Start+0x30>
 800276c:	2302      	movs	r3, #2
 800276e:	e09a      	b.n	80028a6 <HAL_ADC_Start+0x166>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f001 f945 	bl	8003a08 <ADC_Enable>
 800277e:	4603      	mov	r3, r0
 8002780:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f040 8086 	bne.w	8002896 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a44      	ldr	r2, [pc, #272]	; (80028b4 <HAL_ADC_Start+0x174>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d002      	beq.n	80027ae <HAL_ADC_Start+0x6e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	e001      	b.n	80027b2 <HAL_ADC_Start+0x72>
 80027ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d002      	beq.n	80027c0 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d8:	d106      	bne.n	80027e8 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027de:	f023 0206 	bic.w	r2, r3, #6
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	661a      	str	r2, [r3, #96]	; 0x60
 80027e6:	e002      	b.n	80027ee <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	221c      	movs	r2, #28
 80027f4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2c      	ldr	r2, [pc, #176]	; (80028b4 <HAL_ADC_Start+0x174>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d002      	beq.n	800280e <HAL_ADC_Start+0xce>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	e001      	b.n	8002812 <HAL_ADC_Start+0xd2>
 800280e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4293      	cmp	r3, r2
 8002818:	d008      	beq.n	800282c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b05      	cmp	r3, #5
 8002824:	d002      	beq.n	800282c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b09      	cmp	r3, #9
 800282a:	d114      	bne.n	8002856 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002842:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fd8a 	bl	8002368 <LL_ADC_REG_StartConversion>
 8002854:	e026      	b.n	80028a4 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <HAL_ADC_Start+0x174>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d002      	beq.n	8002872 <HAL_ADC_Start+0x132>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	e001      	b.n	8002876 <HAL_ADC_Start+0x136>
 8002872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002876:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00f      	beq.n	80028a4 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800288c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	65da      	str	r2, [r3, #92]	; 0x5c
 8002894:	e006      	b.n	80028a4 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800289e:	e001      	b.n	80028a4 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028a0:	2302      	movs	r3, #2
 80028a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	50000300 	.word	0x50000300
 80028b4:	50000100 	.word	0x50000100

080028b8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Stop+0x16>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e023      	b.n	8002916 <HAL_ADC_Stop+0x5e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028d6:	2103      	movs	r1, #3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 ffd9 	bl	8003890 <ADC_ConversionStop>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d111      	bne.n	800290c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f001 f8ef 	bl	8003acc <ADC_Disable>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800292a:	4867      	ldr	r0, [pc, #412]	; (8002ac8 <HAL_ADC_PollForConversion+0x1a8>)
 800292c:	f7ff fc64 	bl	80021f8 <LL_ADC_GetMultimode>
 8002930:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b08      	cmp	r3, #8
 8002938:	d102      	bne.n	8002940 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800293a:	2308      	movs	r3, #8
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	e02a      	b.n	8002996 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d002      	beq.n	8002952 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b09      	cmp	r3, #9
 8002950:	d111      	bne.n	8002976 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0a6      	b.n	8002abe <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002970:	2304      	movs	r3, #4
 8002972:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002974:	e00f      	b.n	8002996 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002976:	4854      	ldr	r0, [pc, #336]	; (8002ac8 <HAL_ADC_PollForConversion+0x1a8>)
 8002978:	f7ff fc4c 	bl	8002214 <LL_ADC_GetMultiDMATransfer>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f043 0220 	orr.w	r2, r3, #32
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e095      	b.n	8002abe <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002992:	2304      	movs	r3, #4
 8002994:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002996:	f7ff fa89 	bl	8001eac <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800299c:	e021      	b.n	80029e2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d01d      	beq.n	80029e2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80029a6:	f7ff fa81 	bl	8001eac <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <HAL_ADC_PollForConversion+0x9c>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d112      	bne.n	80029e2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10b      	bne.n	80029e2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e06d      	b.n	8002abe <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0d6      	beq.n	800299e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fb53 	bl	80020ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01c      	beq.n	8002a46 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7f5b      	ldrb	r3, [r3, #29]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d118      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d111      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a20      	ldr	r2, [pc, #128]	; (8002acc <HAL_ADC_PollForConversion+0x1ac>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d002      	beq.n	8002a56 <HAL_ADC_PollForConversion+0x136>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	e001      	b.n	8002a5a <HAL_ADC_PollForConversion+0x13a>
 8002a56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d008      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d002      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	d104      	bne.n	8002a7e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e00d      	b.n	8002a9a <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_ADC_PollForConversion+0x1ac>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d002      	beq.n	8002a8e <HAL_ADC_PollForConversion+0x16e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	e001      	b.n	8002a92 <HAL_ADC_PollForConversion+0x172>
 8002a8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a92:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d104      	bne.n	8002aaa <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e008      	b.n	8002abc <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d103      	bne.n	8002abc <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	220c      	movs	r2, #12
 8002aba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	50000300 	.word	0x50000300
 8002acc:	50000100 	.word	0x50000100

08002ad0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002adc:	4851      	ldr	r0, [pc, #324]	; (8002c24 <HAL_ADC_Start_DMA+0x154>)
 8002ade:	f7ff fb8b 	bl	80021f8 <LL_ADC_GetMultimode>
 8002ae2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fc65 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 808f 	bne.w	8002c14 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_Start_DMA+0x34>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e08a      	b.n	8002c1a <HAL_ADC_Start_DMA+0x14a>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d002      	beq.n	8002b1e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b09      	cmp	r3, #9
 8002b1c:	d173      	bne.n	8002c06 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 ff72 	bl	8003a08 <ADC_Enable>
 8002b24:	4603      	mov	r3, r0
 8002b26:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d166      	bne.n	8002bfc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a38      	ldr	r2, [pc, #224]	; (8002c28 <HAL_ADC_Start_DMA+0x158>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d002      	beq.n	8002b52 <HAL_ADC_Start_DMA+0x82>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e001      	b.n	8002b56 <HAL_ADC_Start_DMA+0x86>
 8002b52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d002      	beq.n	8002b64 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b80:	f023 0206 	bic.w	r2, r3, #6
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	661a      	str	r2, [r3, #96]	; 0x60
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	4a25      	ldr	r2, [pc, #148]	; (8002c2c <HAL_ADC_Start_DMA+0x15c>)
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	4a24      	ldr	r2, [pc, #144]	; (8002c30 <HAL_ADC_Start_DMA+0x160>)
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	4a23      	ldr	r2, [pc, #140]	; (8002c34 <HAL_ADC_Start_DMA+0x164>)
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	221c      	movs	r2, #28
 8002bae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0210 	orr.w	r2, r2, #16
 8002bc6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3340      	adds	r3, #64	; 0x40
 8002be2:	4619      	mov	r1, r3
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f001 fdc2 	bl	8004770 <HAL_DMA_Start_IT>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fbb7 	bl	8002368 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002bfa:	e00d      	b.n	8002c18 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002c04:	e008      	b.n	8002c18 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002c12:	e001      	b.n	8002c18 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	50000300 	.word	0x50000300
 8002c28:	50000100 	.word	0x50000100
 8002c2c:	08003b8b 	.word	0x08003b8b
 8002c30:	08003c63 	.word	0x08003c63
 8002c34:	08003c7f 	.word	0x08003c7f

08002c38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c70:	4883      	ldr	r0, [pc, #524]	; (8002e80 <HAL_ADC_IRQHandler+0x22c>)
 8002c72:	f7ff fac1 	bl	80021f8 <LL_ADC_GetMultimode>
 8002c76:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d017      	beq.n	8002cb2 <HAL_ADC_IRQHandler+0x5e>
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d012      	beq.n	8002cb2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f001 f8e1 	bl	8003e6c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x72>
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8085 	beq.w	8002ddc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d07f      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f9d7 	bl	80020ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d064      	beq.n	8002dce <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5e      	ldr	r2, [pc, #376]	; (8002e84 <HAL_ADC_IRQHandler+0x230>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d002      	beq.n	8002d14 <HAL_ADC_IRQHandler+0xc0>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	e001      	b.n	8002d18 <HAL_ADC_IRQHandler+0xc4>
 8002d14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d008      	beq.n	8002d32 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d002      	beq.n	8002d32 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b09      	cmp	r3, #9
 8002d30:	d104      	bne.n	8002d3c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	e00d      	b.n	8002d58 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <HAL_ADC_IRQHandler+0x230>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d002      	beq.n	8002d4c <HAL_ADC_IRQHandler+0xf8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	e001      	b.n	8002d50 <HAL_ADC_IRQHandler+0xfc>
 8002d4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d50:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d135      	bne.n	8002dce <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d12e      	bne.n	8002dce <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fb1f 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d11a      	bne.n	8002db6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 020c 	bic.w	r2, r2, #12
 8002d8e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d112      	bne.n	8002dce <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db4:	e00b      	b.n	8002dce <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fd ff36 	bl	8000c40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	220c      	movs	r2, #12
 8002dda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x19c>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 809e 	beq.w	8002f38 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8098 	beq.w	8002f38 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f980 	bl	800212a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e2a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f93b 	bl	80020ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e36:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <HAL_ADC_IRQHandler+0x230>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d002      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x1f4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	e001      	b.n	8002e4c <HAL_ADC_IRQHandler+0x1f8>
 8002e48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d008      	beq.n	8002e66 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d002      	beq.n	8002e66 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b07      	cmp	r3, #7
 8002e64:	d104      	bne.n	8002e70 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	e011      	b.n	8002e94 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <HAL_ADC_IRQHandler+0x230>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d006      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x234>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e005      	b.n	8002e8c <HAL_ADC_IRQHandler+0x238>
 8002e80:	50000300 	.word	0x50000300
 8002e84:	50000100 	.word	0x50000100
 8002e88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e8c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d047      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0x260>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d03f      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d13a      	bne.n	8002f2a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d133      	bne.n	8002f2a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d12e      	bne.n	8002f2a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fa98 	bl	8002406 <LL_ADC_INJ_IsConversionOngoing>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11a      	bne.n	8002f12 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002eea:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d112      	bne.n	8002f2a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f10:	e00b      	b.n	8002f2a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	f043 0210 	orr.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 ff76 	bl	8003e1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2260      	movs	r2, #96	; 0x60
 8002f36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d011      	beq.n	8002f66 <HAL_ADC_IRQHandler+0x312>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00c      	beq.n	8002f66 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f895 	bl	8003088 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d012      	beq.n	8002f96 <HAL_ADC_IRQHandler+0x342>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 ff5c 	bl	8003e44 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d012      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x372>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00d      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 ff4e 	bl	8003e58 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d036      	beq.n	800303e <HAL_ADC_IRQHandler+0x3ea>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d031      	beq.n	800303e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d102      	bne.n	8002fe8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe6:	e014      	b.n	8003012 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fee:	4825      	ldr	r0, [pc, #148]	; (8003084 <HAL_ADC_IRQHandler+0x430>)
 8002ff0:	f7ff f910 	bl	8002214 <LL_ADC_GetMultiDMATransfer>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	e008      	b.n	8003012 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800300e:	2301      	movs	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10e      	bne.n	8003036 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	f043 0202 	orr.w	r2, r3, #2
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f833 	bl	800309c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2210      	movs	r2, #16
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d018      	beq.n	800307a <HAL_ADC_IRQHandler+0x426>
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	2b00      	cmp	r3, #0
 8003050:	d013      	beq.n	800307a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003062:	f043 0208 	orr.w	r2, r3, #8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003072:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fedb 	bl	8003e30 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800307a:	bf00      	nop
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	50000300 	.word	0x50000300

08003088 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0b6      	sub	sp, #216	; 0xd8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x22>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e3c8      	b.n	8003864 <HAL_ADC_ConfigChannel+0x7b4>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f96a 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 83ad 	bne.w	8003846 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f7fe ffea 	bl	80020d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f958 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 8003108:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f978 	bl	8002406 <LL_ADC_INJ_IsConversionOngoing>
 8003116:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800311a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 81d9 	bne.w	80034d6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 81d4 	bne.w	80034d6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003136:	d10f      	bne.n	8003158 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	4619      	mov	r1, r3
 8003144:	f7ff f804 	bl	8002150 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe ff98 	bl	8002086 <LL_ADC_SetSamplingTimeCommonConfig>
 8003156:	e00e      	b.n	8003176 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6819      	ldr	r1, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	461a      	mov	r2, r3
 8003166:	f7fe fff3 	bl	8002150 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe ff88 	bl	8002086 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b04      	cmp	r3, #4
 8003196:	d022      	beq.n	80031de <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6919      	ldr	r1, [r3, #16]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031a8:	f7fe fee2 	bl	8001f70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	6919      	ldr	r1, [r3, #16]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f7fe ff2e 	bl	800201a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6919      	ldr	r1, [r3, #16]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	7f1b      	ldrb	r3, [r3, #28]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x124>
 80031ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d2:	e000      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x126>
 80031d4:	2300      	movs	r3, #0
 80031d6:	461a      	mov	r2, r3
 80031d8:	f7fe ff3a 	bl	8002050 <LL_ADC_SetOffsetSaturation>
 80031dc:	e17b      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe fee7 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_ADC_ConfigChannel+0x15a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fedc 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	e01e      	b.n	8003248 <HAL_ADC_ConfigChannel+0x198>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe fed1 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003228:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800322c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003238:	2320      	movs	r3, #32
 800323a:	e004      	b.n	8003246 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800323c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1b0>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	e018      	b.n	8003292 <HAL_ADC_ConfigChannel+0x1e2>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800327c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003284:	2320      	movs	r3, #32
 8003286:	e004      	b.n	8003292 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003288:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003292:	429a      	cmp	r2, r3
 8003294:	d106      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fea0 	bl	8001fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fe84 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x220>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fe79 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	f003 021f 	and.w	r2, r3, #31
 80032ce:	e01e      	b.n	800330e <HAL_ADC_ConfigChannel+0x25e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fe6e 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 80032dc:	4603      	mov	r3, r0
 80032de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80032fe:	2320      	movs	r3, #32
 8003300:	e004      	b.n	800330c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x276>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	0e9b      	lsrs	r3, r3, #26
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	e018      	b.n	8003358 <HAL_ADC_ConfigChannel+0x2a8>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800333a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800333e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800334a:	2320      	movs	r3, #32
 800334c:	e004      	b.n	8003358 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800334e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003358:	429a      	cmp	r2, r3
 800335a:	d106      	bne.n	800336a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2200      	movs	r2, #0
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fe3d 	bl	8001fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2102      	movs	r1, #2
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe fe21 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 8003376:	4603      	mov	r3, r0
 8003378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x2e6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fe16 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 800338c:	4603      	mov	r3, r0
 800338e:	0e9b      	lsrs	r3, r3, #26
 8003390:	f003 021f 	and.w	r2, r3, #31
 8003394:	e01e      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x324>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2102      	movs	r1, #2
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe fe0b 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e004      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80033c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x33c>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	e016      	b.n	800341a <HAL_ADC_ConfigChannel+0x36a>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800340c:	2320      	movs	r3, #32
 800340e:	e004      	b.n	800341a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003410:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800341a:	429a      	cmp	r2, r3
 800341c:	d106      	bne.n	800342c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	2102      	movs	r1, #2
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fddc 	bl	8001fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2103      	movs	r1, #3
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fdc0 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x3a8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2103      	movs	r1, #3
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe fdb5 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 800344e:	4603      	mov	r3, r0
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	f003 021f 	and.w	r2, r3, #31
 8003456:	e017      	b.n	8003488 <HAL_ADC_ConfigChannel+0x3d8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2103      	movs	r1, #3
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe fdaa 	bl	8001fb8 <LL_ADC_GetOffsetChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003472:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800347a:	2320      	movs	r3, #32
 800347c:	e003      	b.n	8003486 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800347e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x3f0>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	e011      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x414>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e003      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80034bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d106      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2103      	movs	r1, #3
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fd87 	bl	8001fe4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe ff1e 	bl	800231c <LL_ADC_IsEnabled>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 8140 	bne.w	8003768 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f7fe fe57 	bl	80021a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	4a8f      	ldr	r2, [pc, #572]	; (800373c <HAL_ADC_ConfigChannel+0x68c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	f040 8131 	bne.w	8003768 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <HAL_ADC_ConfigChannel+0x47e>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	0e9b      	lsrs	r3, r3, #26
 800351c:	3301      	adds	r3, #1
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2b09      	cmp	r3, #9
 8003524:	bf94      	ite	ls
 8003526:	2301      	movls	r3, #1
 8003528:	2300      	movhi	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e019      	b.n	8003562 <HAL_ADC_ConfigChannel+0x4b2>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800353c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800353e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800354a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2b09      	cmp	r3, #9
 800355a:	bf94      	ite	ls
 800355c:	2301      	movls	r3, #1
 800355e:	2300      	movhi	r3, #0
 8003560:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003562:	2b00      	cmp	r3, #0
 8003564:	d079      	beq.n	800365a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356e:	2b00      	cmp	r3, #0
 8003570:	d107      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x4d2>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	0e9b      	lsrs	r3, r3, #26
 8003578:	3301      	adds	r3, #1
 800357a:	069b      	lsls	r3, r3, #26
 800357c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003580:	e015      	b.n	80035ae <HAL_ADC_ConfigChannel+0x4fe>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003592:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800359a:	2320      	movs	r3, #32
 800359c:	e003      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	069b      	lsls	r3, r3, #26
 80035aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x51e>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	3301      	adds	r3, #1
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2101      	movs	r1, #1
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	e017      	b.n	80035fe <HAL_ADC_ConfigChannel+0x54e>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80035e6:	2320      	movs	r3, #32
 80035e8:	e003      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80035ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2101      	movs	r1, #1
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	ea42 0103 	orr.w	r1, r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x574>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	0e9b      	lsrs	r3, r3, #26
 8003614:	3301      	adds	r3, #1
 8003616:	f003 021f 	and.w	r2, r3, #31
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	051b      	lsls	r3, r3, #20
 8003622:	e018      	b.n	8003656 <HAL_ADC_ConfigChannel+0x5a6>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003634:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800363c:	2320      	movs	r3, #32
 800363e:	e003      	b.n	8003648 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	f003 021f 	and.w	r2, r3, #31
 800364e:	4613      	mov	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4413      	add	r3, r2
 8003654:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003656:	430b      	orrs	r3, r1
 8003658:	e081      	b.n	800375e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003662:	2b00      	cmp	r3, #0
 8003664:	d107      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x5c6>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	3301      	adds	r3, #1
 800366e:	069b      	lsls	r3, r3, #26
 8003670:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003674:	e015      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x5f2>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800368e:	2320      	movs	r3, #32
 8003690:	e003      	b.n	800369a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3301      	adds	r3, #1
 800369c:	069b      	lsls	r3, r3, #26
 800369e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x612>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	0e9b      	lsrs	r3, r3, #26
 80036b4:	3301      	adds	r3, #1
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	e017      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x642>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	61fb      	str	r3, [r7, #28]
  return result;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80036da:	2320      	movs	r3, #32
 80036dc:	e003      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	ea42 0103 	orr.w	r1, r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <HAL_ADC_ConfigChannel+0x66e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	0e9b      	lsrs	r3, r3, #26
 8003708:	3301      	adds	r3, #1
 800370a:	f003 021f 	and.w	r2, r3, #31
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	3b1e      	subs	r3, #30
 8003716:	051b      	lsls	r3, r3, #20
 8003718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800371c:	e01e      	b.n	800375c <HAL_ADC_ConfigChannel+0x6ac>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	613b      	str	r3, [r7, #16]
  return result;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003736:	2320      	movs	r3, #32
 8003738:	e006      	b.n	8003748 <HAL_ADC_ConfigChannel+0x698>
 800373a:	bf00      	nop
 800373c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	3301      	adds	r3, #1
 800374a:	f003 021f 	and.w	r2, r3, #31
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	3b1e      	subs	r3, #30
 8003756:	051b      	lsls	r3, r3, #20
 8003758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800375c:	430b      	orrs	r3, r1
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	6892      	ldr	r2, [r2, #8]
 8003762:	4619      	mov	r1, r3
 8003764:	f7fe fcf4 	bl	8002150 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b3f      	ldr	r3, [pc, #252]	; (800386c <HAL_ADC_ConfigChannel+0x7bc>)
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d071      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003774:	483e      	ldr	r0, [pc, #248]	; (8003870 <HAL_ADC_ConfigChannel+0x7c0>)
 8003776:	f7fe fbed 	bl	8001f54 <LL_ADC_GetCommonPathInternalCh>
 800377a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a3c      	ldr	r2, [pc, #240]	; (8003874 <HAL_ADC_ConfigChannel+0x7c4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_ADC_ConfigChannel+0x6e2>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3a      	ldr	r2, [pc, #232]	; (8003878 <HAL_ADC_ConfigChannel+0x7c8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d127      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d121      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a6:	d157      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037b0:	4619      	mov	r1, r3
 80037b2:	482f      	ldr	r0, [pc, #188]	; (8003870 <HAL_ADC_ConfigChannel+0x7c0>)
 80037b4:	f7fe fbbb 	bl	8001f2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037b8:	4b30      	ldr	r3, [pc, #192]	; (800387c <HAL_ADC_ConfigChannel+0x7cc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	099b      	lsrs	r3, r3, #6
 80037be:	4a30      	ldr	r2, [pc, #192]	; (8003880 <HAL_ADC_ConfigChannel+0x7d0>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	099b      	lsrs	r3, r3, #6
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	4613      	mov	r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037d2:	e002      	b.n	80037da <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f9      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e0:	e03a      	b.n	8003858 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a27      	ldr	r2, [pc, #156]	; (8003884 <HAL_ADC_ConfigChannel+0x7d4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d113      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x764>
 80037ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <HAL_ADC_ConfigChannel+0x7d8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d02a      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800380a:	4619      	mov	r1, r3
 800380c:	4818      	ldr	r0, [pc, #96]	; (8003870 <HAL_ADC_ConfigChannel+0x7c0>)
 800380e:	f7fe fb8e 	bl	8001f2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003812:	e021      	b.n	8003858 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1c      	ldr	r2, [pc, #112]	; (800388c <HAL_ADC_ConfigChannel+0x7dc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d11c      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800381e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a16      	ldr	r2, [pc, #88]	; (8003888 <HAL_ADC_ConfigChannel+0x7d8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d011      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003838:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800383c:	4619      	mov	r1, r3
 800383e:	480c      	ldr	r0, [pc, #48]	; (8003870 <HAL_ADC_ConfigChannel+0x7c0>)
 8003840:	f7fe fb75 	bl	8001f2e <LL_ADC_SetCommonPathInternalCh>
 8003844:	e008      	b.n	8003858 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	f043 0220 	orr.w	r2, r3, #32
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003860:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003864:	4618      	mov	r0, r3
 8003866:	37d8      	adds	r7, #216	; 0xd8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	80080000 	.word	0x80080000
 8003870:	50000300 	.word	0x50000300
 8003874:	c3210000 	.word	0xc3210000
 8003878:	90c00010 	.word	0x90c00010
 800387c:	20000004 	.word	0x20000004
 8003880:	053e2d63 	.word	0x053e2d63
 8003884:	c7520000 	.word	0xc7520000
 8003888:	50000100 	.word	0x50000100
 800388c:	cb840000 	.word	0xcb840000

08003890 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fd86 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 80038ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fda7 	bl	8002406 <LL_ADC_INJ_IsConversionOngoing>
 80038b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d103      	bne.n	80038c8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8098 	beq.w	80039f8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d02a      	beq.n	800392c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	7f5b      	ldrb	r3, [r3, #29]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d126      	bne.n	800392c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	7f1b      	ldrb	r3, [r3, #28]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d122      	bne.n	800392c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038ea:	e014      	b.n	8003916 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4a45      	ldr	r2, [pc, #276]	; (8003a04 <ADC_ConversionStop+0x174>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d90d      	bls.n	8003910 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	f043 0210 	orr.w	r2, r3, #16
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	f043 0201 	orr.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e074      	b.n	80039fa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d1e3      	bne.n	80038ec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2240      	movs	r2, #64	; 0x40
 800392a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d014      	beq.n	800395c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fd3e 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fcfb 	bl	8002342 <LL_ADC_IsDisableOngoing>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fd1a 	bl	8002390 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d014      	beq.n	800398c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fd4d 	bl	8002406 <LL_ADC_INJ_IsConversionOngoing>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fce3 	bl	8002342 <LL_ADC_IsDisableOngoing>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fd29 	bl	80023de <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d005      	beq.n	800399e <ADC_ConversionStop+0x10e>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d105      	bne.n	80039a4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003998:	230c      	movs	r3, #12
 800399a:	617b      	str	r3, [r7, #20]
        break;
 800399c:	e005      	b.n	80039aa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800399e:	2308      	movs	r3, #8
 80039a0:	617b      	str	r3, [r7, #20]
        break;
 80039a2:	e002      	b.n	80039aa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80039a4:	2304      	movs	r3, #4
 80039a6:	617b      	str	r3, [r7, #20]
        break;
 80039a8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80039aa:	f7fe fa7f 	bl	8001eac <HAL_GetTick>
 80039ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039b0:	e01b      	b.n	80039ea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039b2:	f7fe fa7b 	bl	8001eac <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b05      	cmp	r3, #5
 80039be:	d914      	bls.n	80039ea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	f043 0210 	orr.w	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e007      	b.n	80039fa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1dc      	bne.n	80039b2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	a33fffff 	.word	0xa33fffff

08003a08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fc81 	bl	800231c <LL_ADC_IsEnabled>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d14d      	bne.n	8003abc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <ADC_Enable+0xc0>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	f043 0210 	orr.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	f043 0201 	orr.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e039      	b.n	8003abe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fc3c 	bl	80022cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a54:	f7fe fa2a 	bl	8001eac <HAL_GetTick>
 8003a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a5a:	e028      	b.n	8003aae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fc5b 	bl	800231c <LL_ADC_IsEnabled>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fc2b 	bl	80022cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a76:	f7fe fa19 	bl	8001eac <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d914      	bls.n	8003aae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d00d      	beq.n	8003aae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	f043 0210 	orr.w	r2, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	f043 0201 	orr.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e007      	b.n	8003abe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d1cf      	bne.n	8003a5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	8000003f 	.word	0x8000003f

08003acc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe fc32 	bl	8002342 <LL_ADC_IsDisableOngoing>
 8003ade:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fc19 	bl	800231c <LL_ADC_IsEnabled>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d047      	beq.n	8003b80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d144      	bne.n	8003b80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030d 	and.w	r3, r3, #13
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10c      	bne.n	8003b1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe fbf3 	bl	80022f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2203      	movs	r2, #3
 8003b14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b16:	f7fe f9c9 	bl	8001eac <HAL_GetTick>
 8003b1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b1c:	e029      	b.n	8003b72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b22:	f043 0210 	orr.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e023      	b.n	8003b82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b3a:	f7fe f9b7 	bl	8001eac <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d914      	bls.n	8003b72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	f043 0210 	orr.w	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e007      	b.n	8003b82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1dc      	bne.n	8003b3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d14b      	bne.n	8003c3c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d021      	beq.n	8003c02 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fa72 	bl	80020ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d032      	beq.n	8003c34 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d12b      	bne.n	8003c34 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11f      	bne.n	8003c34 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf8:	f043 0201 	orr.w	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c00:	e018      	b.n	8003c34 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d111      	bne.n	8003c34 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7fd f803 	bl	8000c40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c3a:	e00e      	b.n	8003c5a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff fa27 	bl	800309c <HAL_ADC_ErrorCallback>
}
 8003c4e:	e004      	b.n	8003c5a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7fc fee9 	bl	8000a48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9c:	f043 0204 	orr.w	r2, r3, #4
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff f9f9 	bl	800309c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <LL_ADC_IsEnabled>:
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <LL_ADC_IsEnabled+0x18>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <LL_ADC_IsEnabled+0x1a>
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_ADC_StartCalibration>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003cea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_ADC_IsCalibrationOnGoing>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1e:	d101      	bne.n	8003d24 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d101      	bne.n	8003d4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e04d      	b.n	8003e10 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fea5 	bl	8003acc <ADC_Disable>
 8003d82:	4603      	mov	r3, r0
 8003d84:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d136      	bne.n	8003dfa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d94:	f023 0302 	bic.w	r3, r3, #2
 8003d98:	f043 0202 	orr.w	r2, r3, #2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ff96 	bl	8003cd8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dac:	e014      	b.n	8003dd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d90d      	bls.n	8003dd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	f023 0312 	bic.w	r3, r3, #18
 8003dc4:	f043 0210 	orr.w	r2, r3, #16
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e01b      	b.n	8003e10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff94 	bl	8003d0a <LL_ADC_IsCalibrationOnGoing>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e2      	bne.n	8003dae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	f023 0303 	bic.w	r3, r3, #3
 8003df0:	f043 0201 	orr.w	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003df8:	e005      	b.n	8003e06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfe:	f043 0210 	orr.w	r2, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	0004de01 	.word	0x0004de01

08003e1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b0a1      	sub	sp, #132	; 0x84
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e08b      	b.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb6:	d102      	bne.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	e001      	b.n	8003ec2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e06a      	b.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff25 	bl	8003d32 <LL_ADC_REG_IsConversionOngoing>
 8003ee8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff1f 	bl	8003d32 <LL_ADC_REG_IsConversionOngoing>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d14c      	bne.n	8003f94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d149      	bne.n	8003f94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f00:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003f02:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d028      	beq.n	8003f5e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f1e:	035b      	lsls	r3, r3, #13
 8003f20:	430b      	orrs	r3, r1
 8003f22:	431a      	orrs	r2, r3
 8003f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f2c:	f7ff fec1 	bl	8003cb2 <LL_ADC_IsEnabled>
 8003f30:	4604      	mov	r4, r0
 8003f32:	4823      	ldr	r0, [pc, #140]	; (8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f34:	f7ff febd 	bl	8003cb2 <LL_ADC_IsEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4323      	orrs	r3, r4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d133      	bne.n	8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f48:	f023 030f 	bic.w	r3, r3, #15
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	6811      	ldr	r1, [r2, #0]
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	6892      	ldr	r2, [r2, #8]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	431a      	orrs	r2, r3
 8003f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f5a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f5c:	e024      	b.n	8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f6a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f6e:	f7ff fea0 	bl	8003cb2 <LL_ADC_IsEnabled>
 8003f72:	4604      	mov	r4, r0
 8003f74:	4812      	ldr	r0, [pc, #72]	; (8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f76:	f7ff fe9c 	bl	8003cb2 <LL_ADC_IsEnabled>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4323      	orrs	r3, r4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d112      	bne.n	8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f8a:	f023 030f 	bic.w	r3, r3, #15
 8003f8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f92:	e009      	b.n	8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003fa6:	e000      	b.n	8003faa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3784      	adds	r7, #132	; 0x84
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd90      	pop	{r4, r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	50000100 	.word	0x50000100
 8003fc4:	50000300 	.word	0x50000300

08003fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <__NVIC_SetPriorityGrouping+0x44>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	60d3      	str	r3, [r2, #12]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <__NVIC_GetPriorityGrouping+0x18>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	f003 0307 	and.w	r3, r3, #7
}
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	2b00      	cmp	r3, #0
 800403c:	db0b      	blt.n	8004056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	f003 021f 	and.w	r2, r3, #31
 8004044:	4907      	ldr	r1, [pc, #28]	; (8004064 <__NVIC_EnableIRQ+0x38>)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2001      	movs	r0, #1
 800404e:	fa00 f202 	lsl.w	r2, r0, r2
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	e000e100 	.word	0xe000e100

08004068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db0a      	blt.n	8004092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	490c      	ldr	r1, [pc, #48]	; (80040b4 <__NVIC_SetPriority+0x4c>)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	440b      	add	r3, r1
 800408c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004090:	e00a      	b.n	80040a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4908      	ldr	r1, [pc, #32]	; (80040b8 <__NVIC_SetPriority+0x50>)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	3b04      	subs	r3, #4
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	440b      	add	r3, r1
 80040a6:	761a      	strb	r2, [r3, #24]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000e100 	.word	0xe000e100
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	; 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f1c3 0307 	rsb	r3, r3, #7
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	bf28      	it	cs
 80040da:	2304      	movcs	r3, #4
 80040dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d902      	bls.n	80040ec <NVIC_EncodePriority+0x30>
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3b03      	subs	r3, #3
 80040ea:	e000      	b.n	80040ee <NVIC_EncodePriority+0x32>
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	401a      	ands	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004104:	f04f 31ff 	mov.w	r1, #4294967295
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	43d9      	mvns	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004114:	4313      	orrs	r3, r2
         );
}
 8004116:	4618      	mov	r0, r3
 8004118:	3724      	adds	r7, #36	; 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004134:	d301      	bcc.n	800413a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004136:	2301      	movs	r3, #1
 8004138:	e00f      	b.n	800415a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <SysTick_Config+0x40>)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3b01      	subs	r3, #1
 8004140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004142:	210f      	movs	r1, #15
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	f7ff ff8e 	bl	8004068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <SysTick_Config+0x40>)
 800414e:	2200      	movs	r2, #0
 8004150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <SysTick_Config+0x40>)
 8004154:	2207      	movs	r2, #7
 8004156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	e000e010 	.word	0xe000e010

08004168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ff29 	bl	8003fc8 <__NVIC_SetPriorityGrouping>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af00      	add	r7, sp, #0
 8004184:	4603      	mov	r3, r0
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800418c:	f7ff ff40 	bl	8004010 <__NVIC_GetPriorityGrouping>
 8004190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f7ff ff90 	bl	80040bc <NVIC_EncodePriority>
 800419c:	4602      	mov	r2, r0
 800419e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff5f 	bl	8004068 <__NVIC_SetPriority>
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff33 	bl	800402c <__NVIC_EnableIRQ>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ffa4 	bl	8004124 <SysTick_Config>
 80041dc:	4603      	mov	r3, r0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e014      	b.n	8004222 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	791b      	ldrb	r3, [r3, #4]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd f965 	bl	80014d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	795b      	ldrb	r3, [r3, #5]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_DAC_Start+0x16>
 800423c:	2302      	movs	r3, #2
 800423e:	e043      	b.n	80042c8 <HAL_DAC_Start+0x9e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6819      	ldr	r1, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2201      	movs	r2, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004264:	2001      	movs	r0, #1
 8004266:	f7fd fe2d 	bl	8001ec4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10f      	bne.n	8004290 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800427a:	2b02      	cmp	r3, #2
 800427c:	d11d      	bne.n	80042ba <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	e014      	b.n	80042ba <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2102      	movs	r1, #2
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d107      	bne.n	80042ba <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0202 	orr.w	r2, r2, #2
 80042b8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	; 0x28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	795b      	ldrb	r3, [r3, #5]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_DAC_ConfigChannel+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e192      	b.n	800460e <HAL_DAC_ConfigChannel+0x33e>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2202      	movs	r2, #2
 80042f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d174      	bne.n	80043e6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80042fc:	f7fd fdd6 	bl	8001eac <HAL_GetTick>
 8004300:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d134      	bne.n	8004372 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004308:	e011      	b.n	800432e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800430a:	f7fd fdcf 	bl	8001eac <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d90a      	bls.n	800432e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f043 0208 	orr.w	r2, r3, #8
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2203      	movs	r2, #3
 8004328:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e16f      	b.n	800460e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800433c:	2001      	movs	r0, #1
 800433e:	f7fd fdc1 	bl	8001ec4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
 800434c:	e01e      	b.n	800438c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800434e:	f7fd fdad 	bl	8001eac <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d90a      	bls.n	8004372 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f043 0208 	orr.w	r2, r3, #8
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2203      	movs	r2, #3
 800436c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e14d      	b.n	800460e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	2b00      	cmp	r3, #0
 800437a:	dbe8      	blt.n	800434e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800437c:	2001      	movs	r0, #1
 800437e:	f7fd fda1 	bl	8001ec4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800438a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	ea02 0103 	and.w	r1, r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	21ff      	movs	r1, #255	; 0xff
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	ea02 0103 	and.w	r1, r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d11d      	bne.n	800442a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	221f      	movs	r2, #31
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	4013      	ands	r3, r2
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441e:	4313      	orrs	r3, r2
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2207      	movs	r2, #7
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004442:	4013      	ands	r3, r2
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d102      	bne.n	8004454 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]
 8004452:	e00f      	b.n	8004474 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d102      	bne.n	8004462 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800445c:	2301      	movs	r3, #1
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	e008      	b.n	8004474 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800446a:	2301      	movs	r3, #1
 800446c:	623b      	str	r3, [r7, #32]
 800446e:	e001      	b.n	8004474 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004470:	2300      	movs	r3, #0
 8004472:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004496:	4013      	ands	r3, r2
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	791b      	ldrb	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d102      	bne.n	80044a8 <HAL_DAC_ConfigChannel+0x1d8>
 80044a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044a6:	e000      	b.n	80044aa <HAL_DAC_ConfigChannel+0x1da>
 80044a8:	2300      	movs	r3, #0
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c2:	4013      	ands	r3, r2
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	795b      	ldrb	r3, [r3, #5]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d102      	bne.n	80044d4 <HAL_DAC_ConfigChannel+0x204>
 80044ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d2:	e000      	b.n	80044d6 <HAL_DAC_ConfigChannel+0x206>
 80044d4:	2300      	movs	r3, #0
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d114      	bne.n	8004516 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80044ec:	f002 f9d0 	bl	8006890 <HAL_RCC_GetHCLKFreq>
 80044f0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	4a48      	ldr	r2, [pc, #288]	; (8004618 <HAL_DAC_ConfigChannel+0x348>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d904      	bls.n	8004504 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
 8004502:	e00f      	b.n	8004524 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4a45      	ldr	r2, [pc, #276]	; (800461c <HAL_DAC_ConfigChannel+0x34c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d90a      	bls.n	8004522 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
 8004514:	e006      	b.n	8004524 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	4313      	orrs	r3, r2
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
 8004520:	e000      	b.n	8004524 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004522:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	4313      	orrs	r3, r2
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43da      	mvns	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	400a      	ands	r2, r1
 800455a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	4013      	ands	r3, r2
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	4313      	orrs	r3, r2
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004598:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	22c0      	movs	r2, #192	; 0xc0
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43da      	mvns	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	400a      	ands	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80045e4:	fa01 f303 	lsl.w	r3, r1, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	ea02 0103 	and.w	r1, r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	09896800 	.word	0x09896800
 800461c:	04c4b400 	.word	0x04c4b400

08004620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e08d      	b.n	800474e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	4b47      	ldr	r3, [pc, #284]	; (8004758 <HAL_DMA_Init+0x138>)
 800463a:	429a      	cmp	r2, r3
 800463c:	d80f      	bhi.n	800465e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	4b45      	ldr	r3, [pc, #276]	; (800475c <HAL_DMA_Init+0x13c>)
 8004646:	4413      	add	r3, r2
 8004648:	4a45      	ldr	r2, [pc, #276]	; (8004760 <HAL_DMA_Init+0x140>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	009a      	lsls	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a42      	ldr	r2, [pc, #264]	; (8004764 <HAL_DMA_Init+0x144>)
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
 800465c:	e00e      	b.n	800467c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4b40      	ldr	r3, [pc, #256]	; (8004768 <HAL_DMA_Init+0x148>)
 8004666:	4413      	add	r3, r2
 8004668:	4a3d      	ldr	r2, [pc, #244]	; (8004760 <HAL_DMA_Init+0x140>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	009a      	lsls	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a3c      	ldr	r2, [pc, #240]	; (800476c <HAL_DMA_Init+0x14c>)
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fa76 	bl	8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046dc:	d102      	bne.n	80046e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d010      	beq.n	8004724 <HAL_DMA_Init+0x104>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b04      	cmp	r3, #4
 8004708:	d80c      	bhi.n	8004724 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa96 	bl	8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	e008      	b.n	8004736 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40020407 	.word	0x40020407
 800475c:	bffdfff8 	.word	0xbffdfff8
 8004760:	cccccccd 	.word	0xcccccccd
 8004764:	40020000 	.word	0x40020000
 8004768:	bffdfbf8 	.word	0xbffdfbf8
 800476c:	40020400 	.word	0x40020400

08004770 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_DMA_Start_IT+0x20>
 800478c:	2302      	movs	r3, #2
 800478e:	e066      	b.n	800485e <HAL_DMA_Start_IT+0xee>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d155      	bne.n	8004850 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f9bb 	bl	8004b44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 020e 	orr.w	r2, r2, #14
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e00f      	b.n	8004808 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0204 	bic.w	r2, r2, #4
 80047f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 020a 	orr.w	r2, r2, #10
 8004806:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004824:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800483c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0201 	orr.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e005      	b.n	800485c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004858:	2302      	movs	r3, #2
 800485a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800485c:	7dfb      	ldrb	r3, [r7, #23]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d005      	beq.n	800488a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2204      	movs	r2, #4
 8004882:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	e037      	b.n	80048fa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 020e 	bic.w	r2, r2, #14
 8004898:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048a8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	f003 021f 	and.w	r2, r3, #31
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f202 	lsl.w	r2, r1, r2
 80048cc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048d6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00c      	beq.n	80048fa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048f8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d00d      	beq.n	800494c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2204      	movs	r2, #4
 8004934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e047      	b.n	80049dc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 020e 	bic.w	r2, r2, #14
 800495a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800497a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004980:	f003 021f 	and.w	r2, r3, #31
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2101      	movs	r1, #1
 800498a:	fa01 f202 	lsl.w	r2, r1, r2
 800498e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004998:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00c      	beq.n	80049bc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
    }
  }
  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2204      	movs	r2, #4
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d026      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x7a>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d021      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d107      	bne.n	8004a3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0204 	bic.w	r2, r2, #4
 8004a38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	f003 021f 	and.w	r2, r3, #31
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	2104      	movs	r1, #4
 8004a48:	fa01 f202 	lsl.w	r2, r1, r2
 8004a4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d071      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a5e:	e06c      	b.n	8004b3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2202      	movs	r2, #2
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02e      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d029      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 020a 	bic.w	r2, r2, #10
 8004a9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa8:	f003 021f 	and.w	r2, r3, #31
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d038      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ad0:	e033      	b.n	8004b3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2208      	movs	r2, #8
 8004adc:	409a      	lsls	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02a      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d025      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 020e 	bic.w	r2, r2, #14
 8004afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b04:	f003 021f 	and.w	r2, r3, #31
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
}
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	f003 021f 	and.w	r2, r3, #31
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d108      	bne.n	8004ba4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ba2:	e007      	b.n	8004bb4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d802      	bhi.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004bd4:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e001      	b.n	8004bde <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004bdc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3b08      	subs	r3, #8
 8004bea:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	009a      	lsls	r2, r3, #2
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4413      	add	r3, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a0b      	ldr	r2, [pc, #44]	; (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2201      	movs	r2, #1
 8004c14:	409a      	lsls	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40020407 	.word	0x40020407
 8004c2c:	40020800 	.word	0x40020800
 8004c30:	40020820 	.word	0x40020820
 8004c34:	cccccccd 	.word	0xcccccccd
 8004c38:	40020880 	.word	0x40020880

08004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a08      	ldr	r2, [pc, #32]	; (8004c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c5e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	2201      	movs	r2, #1
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c70:	bf00      	nop
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	1000823f 	.word	0x1000823f
 8004c80:	40020940 	.word	0x40020940

08004c84 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e147      	b.n	8004f26 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc fce0 	bl	8001670 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0210 	bic.w	r2, r2, #16
 8004cbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cc0:	f7fd f8f4 	bl	8001eac <HAL_GetTick>
 8004cc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cc6:	e012      	b.n	8004cee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004cc8:	f7fd f8f0 	bl	8001eac <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b0a      	cmp	r3, #10
 8004cd4:	d90b      	bls.n	8004cee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cda:	f043 0201 	orr.w	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e11b      	b.n	8004f26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d0e5      	beq.n	8004cc8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d0c:	f7fd f8ce 	bl	8001eac <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d12:	e012      	b.n	8004d3a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d14:	f7fd f8ca 	bl	8001eac <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b0a      	cmp	r3, #10
 8004d20:	d90b      	bls.n	8004d3a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2203      	movs	r2, #3
 8004d32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0f5      	b.n	8004f26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0e5      	beq.n	8004d14 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0202 	orr.w	r2, r2, #2
 8004d56:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a74      	ldr	r2, [pc, #464]	; (8004f30 <HAL_FDCAN_Init+0x2ac>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d103      	bne.n	8004d6a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004d62:	4a74      	ldr	r2, [pc, #464]	; (8004f34 <HAL_FDCAN_Init+0x2b0>)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	7c1b      	ldrb	r3, [r3, #16]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d108      	bne.n	8004d84 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d80:	619a      	str	r2, [r3, #24]
 8004d82:	e007      	b.n	8004d94 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d92:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	7c5b      	ldrb	r3, [r3, #17]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d108      	bne.n	8004dae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004daa:	619a      	str	r2, [r3, #24]
 8004dac:	e007      	b.n	8004dbe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699a      	ldr	r2, [r3, #24]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dbc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	7c9b      	ldrb	r3, [r3, #18]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d108      	bne.n	8004dd8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dd4:	619a      	str	r2, [r3, #24]
 8004dd6:	e007      	b.n	8004de8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004de6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004e0c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0210 	bic.w	r2, r2, #16
 8004e1c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d108      	bne.n	8004e38 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699a      	ldr	r2, [r3, #24]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0204 	orr.w	r2, r2, #4
 8004e34:	619a      	str	r2, [r3, #24]
 8004e36:	e02c      	b.n	8004e92 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d028      	beq.n	8004e92 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d01c      	beq.n	8004e82 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e56:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0210 	orr.w	r2, r2, #16
 8004e66:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d110      	bne.n	8004e92 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0220 	orr.w	r2, r2, #32
 8004e7e:	619a      	str	r2, [r3, #24]
 8004e80:	e007      	b.n	8004e92 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0220 	orr.w	r2, r2, #32
 8004e90:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ea2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004eaa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004eba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ebc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ec6:	d115      	bne.n	8004ef4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ed6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	3b01      	subs	r3, #1
 8004ede:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ee0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ef0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ef2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fbe2 	bl	80056d4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40006400 	.word	0x40006400
 8004f34:	40006500 	.word	0x40006500

08004f38 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d110      	bne.n	8004f6e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e006      	b.n	8004f7c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d12c      	bne.n	8004ffa <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e023      	b.n	8005008 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004fc8:	0c1b      	lsrs	r3, r3, #16
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fbd2 	bl	8005780 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004fec:	2201      	movs	r2, #1
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e006      	b.n	8005008 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffe:	f043 0208 	orr.w	r2, r3, #8
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005010:	b480      	push	{r7}
 8005012:	b08b      	sub	sp, #44	; 0x2c
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005024:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005026:	7efb      	ldrb	r3, [r7, #27]
 8005028:	2b02      	cmp	r3, #2
 800502a:	f040 80bc 	bne.w	80051a6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d121      	bne.n	8005078 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	2b00      	cmp	r3, #0
 8005042:	d107      	bne.n	8005054 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0af      	b.n	80051b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4413      	add	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	440b      	add	r3, r1
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
 8005076:	e020      	b.n	80050ba <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	2b00      	cmp	r3, #0
 8005086:	d107      	bne.n	8005098 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e08d      	b.n	80051b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a0:	0a1b      	lsrs	r3, r3, #8
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4413      	add	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	440b      	add	r3, r1
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d107      	bne.n	80050de <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	0c9b      	lsrs	r3, r3, #18
 80050d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e005      	b.n	80050ea <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	3304      	adds	r3, #4
 8005106:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	b29a      	uxth	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	0e1b      	lsrs	r3, r3, #24
 800513c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	0fda      	lsrs	r2, r3, #31
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	3304      	adds	r3, #4
 8005152:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005158:	2300      	movs	r3, #0
 800515a:	623b      	str	r3, [r7, #32]
 800515c:	e00a      	b.n	8005174 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	441a      	add	r2, r3
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	440b      	add	r3, r1
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	3301      	adds	r3, #1
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	0c1b      	lsrs	r3, r3, #16
 800517a:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800517c:	5cd3      	ldrb	r3, [r2, r3]
 800517e:	461a      	mov	r2, r3
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	4293      	cmp	r3, r2
 8005184:	d3eb      	bcc.n	800515e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d105      	bne.n	8005198 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005196:	e004      	b.n	80051a2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e006      	b.n	80051b4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051aa:	f043 0208 	orr.w	r2, r3, #8
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
  }
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	372c      	adds	r7, #44	; 0x2c
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	08008b9c 	.word	0x08008b9c

080051c4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051d6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d003      	beq.n	80051e6 <HAL_FDCAN_ActivateNotification+0x22>
 80051de:	7dfb      	ldrb	r3, [r7, #23]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	f040 80c8 	bne.w	8005376 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d03b      	beq.n	800527a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d031      	beq.n	800527a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d027      	beq.n	800527a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01d      	beq.n	800527a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d013      	beq.n	800527a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00c      	beq.n	800528a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d107      	bne.n	800528a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	2b00      	cmp	r3, #0
 8005292:	d004      	beq.n	800529e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d13b      	bne.n	8005316 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d131      	bne.n	8005316 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d127      	bne.n	8005316 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d11d      	bne.n	8005316 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d113      	bne.n	8005316 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d004      	beq.n	8005302 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00c      	beq.n	8005326 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0202 	orr.w	r2, r2, #2
 8005324:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	430a      	orrs	r2, r1
 8005340:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	430a      	orrs	r2, r1
 800535e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	430a      	orrs	r2, r1
 8005370:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e006      	b.n	8005384 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537a:	f043 0202 	orr.w	r2, r3, #2
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ac:	4013      	ands	r3, r2
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	6a3a      	ldr	r2, [r7, #32]
 80053c4:	4013      	ands	r3, r2
 80053c6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053d2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	4013      	ands	r3, r2
 80053de:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80053ea:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005402:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4013      	ands	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00d      	beq.n	800543a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d006      	beq.n	800543a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2240      	movs	r2, #64	; 0x40
 8005432:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f92e 	bl	8005696 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01b      	beq.n	8005480 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d014      	beq.n	8005480 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800545e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005476:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005478:	6939      	ldr	r1, [r7, #16]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f8ec 	bl	8005658 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	2b00      	cmp	r3, #0
 8005484:	d007      	beq.n	8005496 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800548e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f8b6 	bl	8005602 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a3a      	ldr	r2, [r7, #32]
 80054a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80054a4:	6a39      	ldr	r1, [r7, #32]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fb fd20 	bl	8000eec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80054ba:	69f9      	ldr	r1, [r7, #28]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f8ab 	bl	8005618 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00e      	beq.n	80054ee <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f8a0 	bl	800562e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01a      	beq.n	8005532 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b00      	cmp	r3, #0
 8005508:	d013      	beq.n	8005532 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005512:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4013      	ands	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f888 	bl	8005642 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00e      	beq.n	800555e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005556:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f888 	bl	800566e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005582:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f87c 	bl	8005682 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d011      	beq.n	80055bc <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80055ca:	6979      	ldr	r1, [r7, #20]
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f876 	bl	80056be <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d009      	beq.n	80055ec <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f858 	bl	80056aa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80055fa:	bf00      	nop
 80055fc:	3728      	adds	r7, #40	; 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80056dc:	4b27      	ldr	r3, [pc, #156]	; (800577c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80056de:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ee:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	041a      	lsls	r2, r3, #16
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005714:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	061a      	lsls	r2, r3, #24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e005      	b.n	8005762 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3304      	adds	r3, #4
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	429a      	cmp	r2, r3
 800576c:	d3f3      	bcc.n	8005756 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	4000a400 	.word	0x4000a400

08005780 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005780:	b480      	push	{r7}
 8005782:	b089      	sub	sp, #36	; 0x24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800579e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	e00a      	b.n	80057c2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80057b4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80057ba:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80057bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80057cc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80057d2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80057d8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	440b      	add	r3, r1
 80057f2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	3304      	adds	r3, #4
 80057fe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	3304      	adds	r3, #4
 800580a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e020      	b.n	8005854 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	3303      	adds	r3, #3
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4413      	add	r3, r2
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	3302      	adds	r3, #2
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	440b      	add	r3, r1
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800582a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	3301      	adds	r3, #1
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	440b      	add	r3, r1
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005838:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	440a      	add	r2, r1
 8005840:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005842:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	3304      	adds	r3, #4
 800584c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	3304      	adds	r3, #4
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	4a06      	ldr	r2, [pc, #24]	; (8005874 <FDCAN_CopyMessageToRAM+0xf4>)
 800585c:	5cd3      	ldrb	r3, [r2, r3]
 800585e:	461a      	mov	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4293      	cmp	r3, r2
 8005864:	d3d5      	bcc.n	8005812 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	3724      	adds	r7, #36	; 0x24
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	08008b9c 	.word	0x08008b9c

08005878 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e033      	b.n	80058f2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fb ff5c 	bl	800175c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f854 	bl	8005958 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f822 	bl	80058fa <FMAC_Reset>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d10c      	bne.n	80058d6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c0:	f043 0210 	orr.w	r2, r3, #16
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	22a0      	movs	r2, #160	; 0xa0
 80058cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
 80058d4:	e008      	b.n	80058e8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005902:	f7fc fad3 	bl	8001eac <HAL_GetTick>
 8005906:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005916:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005918:	e00f      	b.n	800593a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800591a:	f7fc fac7 	bl	8001eac <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005928:	d907      	bls.n	800593a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e00a      	b.n	8005950 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e8      	bne.n	800591a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f807 	bl	8005974 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f81b 	bl	80059a2 <FMAC_ResetOutputStateAndDataPointers>
}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059de:	e15a      	b.n	8005c96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	2101      	movs	r1, #1
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ec:	4013      	ands	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 814c 	beq.w	8005c90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d005      	beq.n	8005a10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d130      	bne.n	8005a72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	43db      	mvns	r3, r3
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4013      	ands	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a46:	2201      	movs	r2, #1
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	091b      	lsrs	r3, r3, #4
 8005a5c:	f003 0201 	and.w	r2, r3, #1
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d017      	beq.n	8005aae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	2203      	movs	r2, #3
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4013      	ands	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d123      	bne.n	8005b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	08da      	lsrs	r2, r3, #3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3208      	adds	r2, #8
 8005ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	220f      	movs	r2, #15
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4013      	ands	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	08da      	lsrs	r2, r3, #3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3208      	adds	r2, #8
 8005afc:	6939      	ldr	r1, [r7, #16]
 8005afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	43db      	mvns	r3, r3
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4013      	ands	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 0203 	and.w	r2, r3, #3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80a6 	beq.w	8005c90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b44:	4b5b      	ldr	r3, [pc, #364]	; (8005cb4 <HAL_GPIO_Init+0x2e4>)
 8005b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b48:	4a5a      	ldr	r2, [pc, #360]	; (8005cb4 <HAL_GPIO_Init+0x2e4>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	6613      	str	r3, [r2, #96]	; 0x60
 8005b50:	4b58      	ldr	r3, [pc, #352]	; (8005cb4 <HAL_GPIO_Init+0x2e4>)
 8005b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b5c:	4a56      	ldr	r2, [pc, #344]	; (8005cb8 <HAL_GPIO_Init+0x2e8>)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	089b      	lsrs	r3, r3, #2
 8005b62:	3302      	adds	r3, #2
 8005b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	220f      	movs	r2, #15
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b86:	d01f      	beq.n	8005bc8 <HAL_GPIO_Init+0x1f8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a4c      	ldr	r2, [pc, #304]	; (8005cbc <HAL_GPIO_Init+0x2ec>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d019      	beq.n	8005bc4 <HAL_GPIO_Init+0x1f4>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a4b      	ldr	r2, [pc, #300]	; (8005cc0 <HAL_GPIO_Init+0x2f0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d013      	beq.n	8005bc0 <HAL_GPIO_Init+0x1f0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a4a      	ldr	r2, [pc, #296]	; (8005cc4 <HAL_GPIO_Init+0x2f4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00d      	beq.n	8005bbc <HAL_GPIO_Init+0x1ec>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a49      	ldr	r2, [pc, #292]	; (8005cc8 <HAL_GPIO_Init+0x2f8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <HAL_GPIO_Init+0x1e8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a48      	ldr	r2, [pc, #288]	; (8005ccc <HAL_GPIO_Init+0x2fc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d101      	bne.n	8005bb4 <HAL_GPIO_Init+0x1e4>
 8005bb0:	2305      	movs	r3, #5
 8005bb2:	e00a      	b.n	8005bca <HAL_GPIO_Init+0x1fa>
 8005bb4:	2306      	movs	r3, #6
 8005bb6:	e008      	b.n	8005bca <HAL_GPIO_Init+0x1fa>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	e006      	b.n	8005bca <HAL_GPIO_Init+0x1fa>
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e004      	b.n	8005bca <HAL_GPIO_Init+0x1fa>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e002      	b.n	8005bca <HAL_GPIO_Init+0x1fa>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <HAL_GPIO_Init+0x1fa>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	f002 0203 	and.w	r2, r2, #3
 8005bd0:	0092      	lsls	r2, r2, #2
 8005bd2:	4093      	lsls	r3, r2
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bda:	4937      	ldr	r1, [pc, #220]	; (8005cb8 <HAL_GPIO_Init+0x2e8>)
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	089b      	lsrs	r3, r3, #2
 8005be0:	3302      	adds	r3, #2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005be8:	4b39      	ldr	r3, [pc, #228]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c0c:	4a30      	ldr	r2, [pc, #192]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c12:	4b2f      	ldr	r3, [pc, #188]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c36:	4a26      	ldr	r2, [pc, #152]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c3c:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	43db      	mvns	r3, r3
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c66:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4013      	ands	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c8a:	4a11      	ldr	r2, [pc, #68]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	3301      	adds	r3, #1
 8005c94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f47f ae9d 	bne.w	80059e0 <HAL_GPIO_Init+0x10>
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	48000400 	.word	0x48000400
 8005cc0:	48000800 	.word	0x48000800
 8005cc4:	48000c00 	.word	0x48000c00
 8005cc8:	48001000 	.word	0x48001000
 8005ccc:	48001400 	.word	0x48001400
 8005cd0:	40010400 	.word	0x40010400

08005cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	887b      	ldrh	r3, [r7, #2]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e001      	b.n	8005cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	807b      	strh	r3, [r7, #2]
 8005d10:	4613      	mov	r3, r2
 8005d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d14:	787b      	ldrb	r3, [r7, #1]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d1a:	887a      	ldrh	r2, [r7, #2]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d20:	e002      	b.n	8005d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d22:	887a      	ldrh	r2, [r7, #2]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d141      	bne.n	8005dc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d42:	4b4b      	ldr	r3, [pc, #300]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4e:	d131      	bne.n	8005db4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d50:	4b47      	ldr	r3, [pc, #284]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d56:	4a46      	ldr	r2, [pc, #280]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d60:	4b43      	ldr	r3, [pc, #268]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d68:	4a41      	ldr	r2, [pc, #260]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d70:	4b40      	ldr	r3, [pc, #256]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2232      	movs	r2, #50	; 0x32
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	4a3f      	ldr	r2, [pc, #252]	; (8005e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d80:	0c9b      	lsrs	r3, r3, #18
 8005d82:	3301      	adds	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d86:	e002      	b.n	8005d8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d8e:	4b38      	ldr	r3, [pc, #224]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9a:	d102      	bne.n	8005da2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f2      	bne.n	8005d88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005da2:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dae:	d158      	bne.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e057      	b.n	8005e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005db4:	4b2e      	ldr	r3, [pc, #184]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dba:	4a2d      	ldr	r2, [pc, #180]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005dc4:	e04d      	b.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dcc:	d141      	bne.n	8005e52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dce:	4b28      	ldr	r3, [pc, #160]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dda:	d131      	bne.n	8005e40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ddc:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de2:	4a23      	ldr	r2, [pc, #140]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dec:	4b20      	ldr	r3, [pc, #128]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005df4:	4a1e      	ldr	r2, [pc, #120]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2232      	movs	r2, #50	; 0x32
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	0c9b      	lsrs	r3, r3, #18
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e12:	e002      	b.n	8005e1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e1a:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e26:	d102      	bne.n	8005e2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f2      	bne.n	8005e14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e2e:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3a:	d112      	bne.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e011      	b.n	8005e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e50:	e007      	b.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e52:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e5a:	4a05      	ldr	r2, [pc, #20]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40007000 	.word	0x40007000
 8005e74:	20000004 	.word	0x20000004
 8005e78:	431bde83 	.word	0x431bde83

08005e7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e8a:	6093      	str	r3, [r2, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40007000 	.word	0x40007000

08005e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e306      	b.n	80064bc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d075      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eba:	4b97      	ldr	r3, [pc, #604]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec4:	4b94      	ldr	r3, [pc, #592]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b0c      	cmp	r3, #12
 8005ed2:	d102      	bne.n	8005eda <HAL_RCC_OscConfig+0x3e>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d002      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x44>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d10b      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	4b8d      	ldr	r3, [pc, #564]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d05b      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x108>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d157      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e2e1      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f00:	d106      	bne.n	8005f10 <HAL_RCC_OscConfig+0x74>
 8005f02:	4b85      	ldr	r3, [pc, #532]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a84      	ldr	r2, [pc, #528]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e01d      	b.n	8005f4c <HAL_RCC_OscConfig+0xb0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x98>
 8005f1a:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a7e      	ldr	r2, [pc, #504]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b7c      	ldr	r3, [pc, #496]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a7b      	ldr	r2, [pc, #492]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e00b      	b.n	8005f4c <HAL_RCC_OscConfig+0xb0>
 8005f34:	4b78      	ldr	r3, [pc, #480]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a77      	ldr	r2, [pc, #476]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	4b75      	ldr	r3, [pc, #468]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a74      	ldr	r2, [pc, #464]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fb ffaa 	bl	8001eac <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f5c:	f7fb ffa6 	bl	8001eac <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	; 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e2a6      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f6e:	4b6a      	ldr	r3, [pc, #424]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCC_OscConfig+0xc0>
 8005f7a:	e014      	b.n	8005fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fb ff96 	bl	8001eac <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f84:	f7fb ff92 	bl	8001eac <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	; 0x64
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e292      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f96:	4b60      	ldr	r3, [pc, #384]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0xe8>
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d075      	beq.n	800609e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb2:	4b59      	ldr	r3, [pc, #356]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
 8005fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fbc:	4b56      	ldr	r3, [pc, #344]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b0c      	cmp	r3, #12
 8005fca:	d102      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x136>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d002      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x13c>
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d11f      	bne.n	8006018 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fd8:	4b4f      	ldr	r3, [pc, #316]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x154>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e265      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff0:	4b49      	ldr	r3, [pc, #292]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	061b      	lsls	r3, r3, #24
 8005ffe:	4946      	ldr	r1, [pc, #280]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8006000:	4313      	orrs	r3, r2
 8006002:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006004:	4b45      	ldr	r3, [pc, #276]	; (800611c <HAL_RCC_OscConfig+0x280>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f7fb ff03 	bl	8001e14 <HAL_InitTick>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d043      	beq.n	800609c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e251      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d023      	beq.n	8006068 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006020:	4b3d      	ldr	r3, [pc, #244]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a3c      	ldr	r2, [pc, #240]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8006026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800602a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fb ff3e 	bl	8001eac <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006034:	f7fb ff3a 	bl	8001eac <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e23a      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006046:	4b34      	ldr	r3, [pc, #208]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006052:	4b31      	ldr	r3, [pc, #196]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	061b      	lsls	r3, r3, #24
 8006060:	492d      	ldr	r1, [pc, #180]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8006062:	4313      	orrs	r3, r2
 8006064:	604b      	str	r3, [r1, #4]
 8006066:	e01a      	b.n	800609e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006068:	4b2b      	ldr	r3, [pc, #172]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2a      	ldr	r2, [pc, #168]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 800606e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fb ff1a 	bl	8001eac <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800607c:	f7fb ff16 	bl	8001eac <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e216      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800608e:	4b22      	ldr	r3, [pc, #136]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x1e0>
 800609a:	e000      	b.n	800609e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800609c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d041      	beq.n	800612e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01c      	beq.n	80060ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060b2:	4b19      	ldr	r3, [pc, #100]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 80060b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b8:	4a17      	ldr	r2, [pc, #92]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c2:	f7fb fef3 	bl	8001eac <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ca:	f7fb feef 	bl	8001eac <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e1ef      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 80060de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0ef      	beq.n	80060ca <HAL_RCC_OscConfig+0x22e>
 80060ea:	e020      	b.n	800612e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 80060ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f2:	4a09      	ldr	r2, [pc, #36]	; (8006118 <HAL_RCC_OscConfig+0x27c>)
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fb fed6 	bl	8001eac <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006102:	e00d      	b.n	8006120 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006104:	f7fb fed2 	bl	8001eac <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d906      	bls.n	8006120 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e1d2      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
 8006116:	bf00      	nop
 8006118:	40021000 	.word	0x40021000
 800611c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006120:	4b8c      	ldr	r3, [pc, #560]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1ea      	bne.n	8006104 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 80a6 	beq.w	8006288 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800613c:	2300      	movs	r3, #0
 800613e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006140:	4b84      	ldr	r3, [pc, #528]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 8006142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_RCC_OscConfig+0x2b4>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <HAL_RCC_OscConfig+0x2b6>
 8006150:	2300      	movs	r3, #0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006156:	4b7f      	ldr	r3, [pc, #508]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 8006158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615a:	4a7e      	ldr	r2, [pc, #504]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 800615c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006160:	6593      	str	r3, [r2, #88]	; 0x58
 8006162:	4b7c      	ldr	r3, [pc, #496]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 8006164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800616e:	2301      	movs	r3, #1
 8006170:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006172:	4b79      	ldr	r3, [pc, #484]	; (8006358 <HAL_RCC_OscConfig+0x4bc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d118      	bne.n	80061b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800617e:	4b76      	ldr	r3, [pc, #472]	; (8006358 <HAL_RCC_OscConfig+0x4bc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a75      	ldr	r2, [pc, #468]	; (8006358 <HAL_RCC_OscConfig+0x4bc>)
 8006184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618a:	f7fb fe8f 	bl	8001eac <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006192:	f7fb fe8b 	bl	8001eac <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e18b      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061a4:	4b6c      	ldr	r3, [pc, #432]	; (8006358 <HAL_RCC_OscConfig+0x4bc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0f0      	beq.n	8006192 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d108      	bne.n	80061ca <HAL_RCC_OscConfig+0x32e>
 80061b8:	4b66      	ldr	r3, [pc, #408]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061be:	4a65      	ldr	r2, [pc, #404]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061c8:	e024      	b.n	8006214 <HAL_RCC_OscConfig+0x378>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d110      	bne.n	80061f4 <HAL_RCC_OscConfig+0x358>
 80061d2:	4b60      	ldr	r3, [pc, #384]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80061d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d8:	4a5e      	ldr	r2, [pc, #376]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80061da:	f043 0304 	orr.w	r3, r3, #4
 80061de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061e2:	4b5c      	ldr	r3, [pc, #368]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80061e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e8:	4a5a      	ldr	r2, [pc, #360]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061f2:	e00f      	b.n	8006214 <HAL_RCC_OscConfig+0x378>
 80061f4:	4b57      	ldr	r3, [pc, #348]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fa:	4a56      	ldr	r2, [pc, #344]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006204:	4b53      	ldr	r3, [pc, #332]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	4a52      	ldr	r2, [pc, #328]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 800620c:	f023 0304 	bic.w	r3, r3, #4
 8006210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d016      	beq.n	800624a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621c:	f7fb fe46 	bl	8001eac <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006222:	e00a      	b.n	800623a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006224:	f7fb fe42 	bl	8001eac <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e140      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800623a:	4b46      	ldr	r3, [pc, #280]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ed      	beq.n	8006224 <HAL_RCC_OscConfig+0x388>
 8006248:	e015      	b.n	8006276 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624a:	f7fb fe2f 	bl	8001eac <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006250:	e00a      	b.n	8006268 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006252:	f7fb fe2b 	bl	8001eac <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006260:	4293      	cmp	r3, r2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e129      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006268:	4b3a      	ldr	r3, [pc, #232]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1ed      	bne.n	8006252 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006276:	7ffb      	ldrb	r3, [r7, #31]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d105      	bne.n	8006288 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800627c:	4b35      	ldr	r3, [pc, #212]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 800627e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006280:	4a34      	ldr	r2, [pc, #208]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 8006282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006286:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d03c      	beq.n	800630e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01c      	beq.n	80062d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800629c:	4b2d      	ldr	r3, [pc, #180]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 800629e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062a2:	4a2c      	ldr	r2, [pc, #176]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fb fdfe 	bl	8001eac <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062b4:	f7fb fdfa 	bl	8001eac <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e0fa      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062c6:	4b23      	ldr	r3, [pc, #140]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80062c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0ef      	beq.n	80062b4 <HAL_RCC_OscConfig+0x418>
 80062d4:	e01b      	b.n	800630e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062d6:	4b1f      	ldr	r3, [pc, #124]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80062d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062dc:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 80062de:	f023 0301 	bic.w	r3, r3, #1
 80062e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e6:	f7fb fde1 	bl	8001eac <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062ec:	e008      	b.n	8006300 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062ee:	f7fb fddd 	bl	8001eac <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e0dd      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006300:	4b14      	ldr	r3, [pc, #80]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 8006302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1ef      	bne.n	80062ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 80d1 	beq.w	80064ba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006318:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 030c 	and.w	r3, r3, #12
 8006320:	2b0c      	cmp	r3, #12
 8006322:	f000 808b 	beq.w	800643c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d15e      	bne.n	80063ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a08      	ldr	r2, [pc, #32]	; (8006354 <HAL_RCC_OscConfig+0x4b8>)
 8006334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633a:	f7fb fdb7 	bl	8001eac <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006340:	e00c      	b.n	800635c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006342:	f7fb fdb3 	bl	8001eac <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d905      	bls.n	800635c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e0b3      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
 8006354:	40021000 	.word	0x40021000
 8006358:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800635c:	4b59      	ldr	r3, [pc, #356]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1ec      	bne.n	8006342 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006368:	4b56      	ldr	r3, [pc, #344]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	4b56      	ldr	r3, [pc, #344]	; (80064c8 <HAL_RCC_OscConfig+0x62c>)
 800636e:	4013      	ands	r3, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6a11      	ldr	r1, [r2, #32]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006378:	3a01      	subs	r2, #1
 800637a:	0112      	lsls	r2, r2, #4
 800637c:	4311      	orrs	r1, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006382:	0212      	lsls	r2, r2, #8
 8006384:	4311      	orrs	r1, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800638a:	0852      	lsrs	r2, r2, #1
 800638c:	3a01      	subs	r2, #1
 800638e:	0552      	lsls	r2, r2, #21
 8006390:	4311      	orrs	r1, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006396:	0852      	lsrs	r2, r2, #1
 8006398:	3a01      	subs	r2, #1
 800639a:	0652      	lsls	r2, r2, #25
 800639c:	4311      	orrs	r1, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063a2:	06d2      	lsls	r2, r2, #27
 80063a4:	430a      	orrs	r2, r1
 80063a6:	4947      	ldr	r1, [pc, #284]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063ac:	4b45      	ldr	r3, [pc, #276]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a44      	ldr	r2, [pc, #272]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063b8:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4a41      	ldr	r2, [pc, #260]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c4:	f7fb fd72 	bl	8001eac <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063cc:	f7fb fd6e 	bl	8001eac <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e06e      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063de:	4b39      	ldr	r3, [pc, #228]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x530>
 80063ea:	e066      	b.n	80064ba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ec:	4b35      	ldr	r3, [pc, #212]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a34      	ldr	r2, [pc, #208]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80063f8:	4b32      	ldr	r3, [pc, #200]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4a31      	ldr	r2, [pc, #196]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 80063fe:	f023 0303 	bic.w	r3, r3, #3
 8006402:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006404:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	4a2e      	ldr	r2, [pc, #184]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 800640a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800640e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006412:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fb fd4a 	bl	8001eac <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800641c:	f7fb fd46 	bl	8001eac <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e046      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800642e:	4b25      	ldr	r3, [pc, #148]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f0      	bne.n	800641c <HAL_RCC_OscConfig+0x580>
 800643a:	e03e      	b.n	80064ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e039      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <HAL_RCC_OscConfig+0x628>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f003 0203 	and.w	r2, r3, #3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	429a      	cmp	r2, r3
 800645a:	d12c      	bne.n	80064b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	3b01      	subs	r3, #1
 8006468:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646a:	429a      	cmp	r2, r3
 800646c:	d123      	bne.n	80064b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800647a:	429a      	cmp	r2, r3
 800647c:	d11b      	bne.n	80064b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800648a:	429a      	cmp	r2, r3
 800648c:	d113      	bne.n	80064b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	3b01      	subs	r3, #1
 800649c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d109      	bne.n	80064b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	3b01      	subs	r3, #1
 80064b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d001      	beq.n	80064ba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40021000 	.word	0x40021000
 80064c8:	019f800c 	.word	0x019f800c

080064cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e11e      	b.n	8006722 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064e4:	4b91      	ldr	r3, [pc, #580]	; (800672c <HAL_RCC_ClockConfig+0x260>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d910      	bls.n	8006514 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f2:	4b8e      	ldr	r3, [pc, #568]	; (800672c <HAL_RCC_ClockConfig+0x260>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 020f 	bic.w	r2, r3, #15
 80064fa:	498c      	ldr	r1, [pc, #560]	; (800672c <HAL_RCC_ClockConfig+0x260>)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	4313      	orrs	r3, r2
 8006500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b8a      	ldr	r3, [pc, #552]	; (800672c <HAL_RCC_ClockConfig+0x260>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e106      	b.n	8006722 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d073      	beq.n	8006608 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2b03      	cmp	r3, #3
 8006526:	d129      	bne.n	800657c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006528:	4b81      	ldr	r3, [pc, #516]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e0f4      	b.n	8006722 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006538:	f000 f9e2 	bl	8006900 <RCC_GetSysClockFreqFromPLLSource>
 800653c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4a7c      	ldr	r2, [pc, #496]	; (8006734 <HAL_RCC_ClockConfig+0x268>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d93f      	bls.n	80065c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006546:	4b7a      	ldr	r3, [pc, #488]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800655a:	2b00      	cmp	r3, #0
 800655c:	d033      	beq.n	80065c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006562:	2b00      	cmp	r3, #0
 8006564:	d12f      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006566:	4b72      	ldr	r3, [pc, #456]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800656e:	4a70      	ldr	r2, [pc, #448]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006574:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006576:	2380      	movs	r3, #128	; 0x80
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e024      	b.n	80065c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d107      	bne.n	8006594 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006584:	4b6a      	ldr	r3, [pc, #424]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d109      	bne.n	80065a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e0c6      	b.n	8006722 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006594:	4b66      	ldr	r3, [pc, #408]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0be      	b.n	8006722 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80065a4:	f000 f914 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 80065a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4a61      	ldr	r2, [pc, #388]	; (8006734 <HAL_RCC_ClockConfig+0x268>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d909      	bls.n	80065c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065b2:	4b5f      	ldr	r3, [pc, #380]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ba:	4a5d      	ldr	r2, [pc, #372]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80065bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065c2:	2380      	movs	r3, #128	; 0x80
 80065c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065c6:	4b5a      	ldr	r3, [pc, #360]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f023 0203 	bic.w	r2, r3, #3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4957      	ldr	r1, [pc, #348]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d8:	f7fb fc68 	bl	8001eac <HAL_GetTick>
 80065dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e0:	f7fb fc64 	bl	8001eac <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e095      	b.n	8006722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f6:	4b4e      	ldr	r3, [pc, #312]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 020c 	and.w	r2, r3, #12
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	429a      	cmp	r2, r3
 8006606:	d1eb      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d023      	beq.n	800665c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006620:	4b43      	ldr	r3, [pc, #268]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	4a42      	ldr	r2, [pc, #264]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800662a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006638:	4b3d      	ldr	r3, [pc, #244]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006640:	4a3b      	ldr	r2, [pc, #236]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006646:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006648:	4b39      	ldr	r3, [pc, #228]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4936      	ldr	r1, [pc, #216]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006656:	4313      	orrs	r3, r2
 8006658:	608b      	str	r3, [r1, #8]
 800665a:	e008      	b.n	800666e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2b80      	cmp	r3, #128	; 0x80
 8006660:	d105      	bne.n	800666e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006662:	4b33      	ldr	r3, [pc, #204]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	4a32      	ldr	r2, [pc, #200]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 8006668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800666c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800666e:	4b2f      	ldr	r3, [pc, #188]	; (800672c <HAL_RCC_ClockConfig+0x260>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d21d      	bcs.n	80066b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667c:	4b2b      	ldr	r3, [pc, #172]	; (800672c <HAL_RCC_ClockConfig+0x260>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f023 020f 	bic.w	r2, r3, #15
 8006684:	4929      	ldr	r1, [pc, #164]	; (800672c <HAL_RCC_ClockConfig+0x260>)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	4313      	orrs	r3, r2
 800668a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800668c:	f7fb fc0e 	bl	8001eac <HAL_GetTick>
 8006690:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006692:	e00a      	b.n	80066aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006694:	f7fb fc0a 	bl	8001eac <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e03b      	b.n	8006722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066aa:	4b20      	ldr	r3, [pc, #128]	; (800672c <HAL_RCC_ClockConfig+0x260>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d1ed      	bne.n	8006694 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066c4:	4b1a      	ldr	r3, [pc, #104]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	4917      	ldr	r1, [pc, #92]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066e2:	4b13      	ldr	r3, [pc, #76]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	490f      	ldr	r1, [pc, #60]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066f6:	f000 f86b 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 80066fa:	4602      	mov	r2, r0
 80066fc:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <HAL_RCC_ClockConfig+0x264>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	091b      	lsrs	r3, r3, #4
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	490c      	ldr	r1, [pc, #48]	; (8006738 <HAL_RCC_ClockConfig+0x26c>)
 8006708:	5ccb      	ldrb	r3, [r1, r3]
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	fa22 f303 	lsr.w	r3, r2, r3
 8006712:	4a0a      	ldr	r2, [pc, #40]	; (800673c <HAL_RCC_ClockConfig+0x270>)
 8006714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006716:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <HAL_RCC_ClockConfig+0x274>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f7fb fb7a 	bl	8001e14 <HAL_InitTick>
 8006720:	4603      	mov	r3, r0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40022000 	.word	0x40022000
 8006730:	40021000 	.word	0x40021000
 8006734:	04c4b400 	.word	0x04c4b400
 8006738:	08008b84 	.word	0x08008b84
 800673c:	20000004 	.word	0x20000004
 8006740:	20000008 	.word	0x20000008

08006744 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08c      	sub	sp, #48	; 0x30
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8006750:	2302      	movs	r3, #2
 8006752:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006754:	2303      	movs	r3, #3
 8006756:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8006758:	2300      	movs	r3, #0
 800675a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	0c1b      	lsrs	r3, r3, #16
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8006770:	029b      	lsls	r3, r3, #10
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	0c1b      	lsrs	r3, r3, #16
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <HAL_RCC_MCOConfig+0x88>)
 8006780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006782:	2101      	movs	r1, #1
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	fa01 f303 	lsl.w	r3, r1, r3
 800678a:	4910      	ldr	r1, [pc, #64]	; (80067cc <HAL_RCC_MCOConfig+0x88>)
 800678c:	4313      	orrs	r3, r2
 800678e:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	b29b      	uxth	r3, r3
 8006794:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	0d1b      	lsrs	r3, r3, #20
 800679a:	b2db      	uxtb	r3, r3
 800679c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800679e:	f107 0310 	add.w	r3, r7, #16
 80067a2:	4619      	mov	r1, r3
 80067a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a6:	f7ff f913 	bl	80059d0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <HAL_RCC_MCOConfig+0x88>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	430b      	orrs	r3, r1
 80067be:	4903      	ldr	r1, [pc, #12]	; (80067cc <HAL_RCC_MCOConfig+0x88>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	608b      	str	r3, [r1, #8]
  }
}
 80067c4:	bf00      	nop
 80067c6:	3730      	adds	r7, #48	; 0x30
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40021000 	.word	0x40021000

080067d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80067d6:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 030c 	and.w	r3, r3, #12
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d102      	bne.n	80067e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067e2:	4b2a      	ldr	r3, [pc, #168]	; (800688c <HAL_RCC_GetSysClockFreq+0xbc>)
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	e047      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80067e8:	4b27      	ldr	r3, [pc, #156]	; (8006888 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 030c 	and.w	r3, r3, #12
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d102      	bne.n	80067fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067f4:	4b25      	ldr	r3, [pc, #148]	; (800688c <HAL_RCC_GetSysClockFreq+0xbc>)
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	e03e      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80067fa:	4b23      	ldr	r3, [pc, #140]	; (8006888 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 030c 	and.w	r3, r3, #12
 8006802:	2b0c      	cmp	r3, #12
 8006804:	d136      	bne.n	8006874 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006806:	4b20      	ldr	r3, [pc, #128]	; (8006888 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006810:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	091b      	lsrs	r3, r3, #4
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	3301      	adds	r3, #1
 800681c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d10c      	bne.n	800683e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006824:	4a19      	ldr	r2, [pc, #100]	; (800688c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	4a16      	ldr	r2, [pc, #88]	; (8006888 <HAL_RCC_GetSysClockFreq+0xb8>)
 800682e:	68d2      	ldr	r2, [r2, #12]
 8006830:	0a12      	lsrs	r2, r2, #8
 8006832:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	617b      	str	r3, [r7, #20]
      break;
 800683c:	e00c      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800683e:	4a13      	ldr	r2, [pc, #76]	; (800688c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	fbb2 f3f3 	udiv	r3, r2, r3
 8006846:	4a10      	ldr	r2, [pc, #64]	; (8006888 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006848:	68d2      	ldr	r2, [r2, #12]
 800684a:	0a12      	lsrs	r2, r2, #8
 800684c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006850:	fb02 f303 	mul.w	r3, r2, r3
 8006854:	617b      	str	r3, [r7, #20]
      break;
 8006856:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006858:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <HAL_RCC_GetSysClockFreq+0xb8>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	0e5b      	lsrs	r3, r3, #25
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	3301      	adds	r3, #1
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	e001      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006878:	693b      	ldr	r3, [r7, #16]
}
 800687a:	4618      	mov	r0, r3
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40021000 	.word	0x40021000
 800688c:	00f42400 	.word	0x00f42400

08006890 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006894:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006896:	681b      	ldr	r3, [r3, #0]
}
 8006898:	4618      	mov	r0, r3
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000004 	.word	0x20000004

080068a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068ac:	f7ff fff0 	bl	8006890 <HAL_RCC_GetHCLKFreq>
 80068b0:	4602      	mov	r2, r0
 80068b2:	4b06      	ldr	r3, [pc, #24]	; (80068cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	0a1b      	lsrs	r3, r3, #8
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	4904      	ldr	r1, [pc, #16]	; (80068d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068be:	5ccb      	ldrb	r3, [r1, r3]
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40021000 	.word	0x40021000
 80068d0:	08008b94 	.word	0x08008b94

080068d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068d8:	f7ff ffda 	bl	8006890 <HAL_RCC_GetHCLKFreq>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	0adb      	lsrs	r3, r3, #11
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	4904      	ldr	r1, [pc, #16]	; (80068fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80068ea:	5ccb      	ldrb	r3, [r1, r3]
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40021000 	.word	0x40021000
 80068fc:	08008b94 	.word	0x08008b94

08006900 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006906:	4b1e      	ldr	r3, [pc, #120]	; (8006980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006910:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	091b      	lsrs	r3, r3, #4
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	3301      	adds	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b03      	cmp	r3, #3
 8006922:	d10c      	bne.n	800693e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006924:	4a17      	ldr	r2, [pc, #92]	; (8006984 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	fbb2 f3f3 	udiv	r3, r2, r3
 800692c:	4a14      	ldr	r2, [pc, #80]	; (8006980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800692e:	68d2      	ldr	r2, [r2, #12]
 8006930:	0a12      	lsrs	r2, r2, #8
 8006932:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	617b      	str	r3, [r7, #20]
    break;
 800693c:	e00c      	b.n	8006958 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800693e:	4a11      	ldr	r2, [pc, #68]	; (8006984 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	fbb2 f3f3 	udiv	r3, r2, r3
 8006946:	4a0e      	ldr	r2, [pc, #56]	; (8006980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006948:	68d2      	ldr	r2, [r2, #12]
 800694a:	0a12      	lsrs	r2, r2, #8
 800694c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]
    break;
 8006956:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006958:	4b09      	ldr	r3, [pc, #36]	; (8006980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	0e5b      	lsrs	r3, r3, #25
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	3301      	adds	r3, #1
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006972:	687b      	ldr	r3, [r7, #4]
}
 8006974:	4618      	mov	r0, r3
 8006976:	371c      	adds	r7, #28
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	40021000 	.word	0x40021000
 8006984:	00f42400 	.word	0x00f42400

08006988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006990:	2300      	movs	r3, #0
 8006992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006994:	2300      	movs	r3, #0
 8006996:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8098 	beq.w	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a6:	2300      	movs	r3, #0
 80069a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069aa:	4b43      	ldr	r3, [pc, #268]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10d      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b6:	4b40      	ldr	r3, [pc, #256]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ba:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c0:	6593      	str	r3, [r2, #88]	; 0x58
 80069c2:	4b3d      	ldr	r3, [pc, #244]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ca:	60bb      	str	r3, [r7, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ce:	2301      	movs	r3, #1
 80069d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d2:	4b3a      	ldr	r3, [pc, #232]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a39      	ldr	r2, [pc, #228]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069de:	f7fb fa65 	bl	8001eac <HAL_GetTick>
 80069e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069e4:	e009      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e6:	f7fb fa61 	bl	8001eac <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d902      	bls.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	74fb      	strb	r3, [r7, #19]
        break;
 80069f8:	e005      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069fa:	4b30      	ldr	r3, [pc, #192]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0ef      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a06:	7cfb      	ldrb	r3, [r7, #19]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d159      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a0c:	4b2a      	ldr	r3, [pc, #168]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01e      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d019      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a28:	4b23      	ldr	r3, [pc, #140]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a34:	4b20      	ldr	r3, [pc, #128]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a44:	4b1c      	ldr	r3, [pc, #112]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4a:	4a1b      	ldr	r2, [pc, #108]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a54:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d016      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a66:	f7fb fa21 	bl	8001eac <HAL_GetTick>
 8006a6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a6c:	e00b      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6e:	f7fb fa1d 	bl	8001eac <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d902      	bls.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	74fb      	strb	r3, [r7, #19]
            break;
 8006a84:	e006      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a86:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0ec      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a94:	7cfb      	ldrb	r3, [r7, #19]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10b      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	4903      	ldr	r1, [pc, #12]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ab2:	7cfb      	ldrb	r3, [r7, #19]
 8006ab4:	74bb      	strb	r3, [r7, #18]
 8006ab6:	e005      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	7cfb      	ldrb	r3, [r7, #19]
 8006ac2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ac4:	7c7b      	ldrb	r3, [r7, #17]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d105      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aca:	4ba6      	ldr	r3, [pc, #664]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	4aa5      	ldr	r2, [pc, #660]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ae2:	4ba0      	ldr	r3, [pc, #640]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	f023 0203 	bic.w	r2, r3, #3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	499c      	ldr	r1, [pc, #624]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b04:	4b97      	ldr	r3, [pc, #604]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0a:	f023 020c 	bic.w	r2, r3, #12
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	4994      	ldr	r1, [pc, #592]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0304 	and.w	r3, r3, #4
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b26:	4b8f      	ldr	r3, [pc, #572]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	498b      	ldr	r1, [pc, #556]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b48:	4b86      	ldr	r3, [pc, #536]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	4983      	ldr	r1, [pc, #524]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b6a:	4b7e      	ldr	r3, [pc, #504]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	497a      	ldr	r1, [pc, #488]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b8c:	4b75      	ldr	r3, [pc, #468]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	4972      	ldr	r1, [pc, #456]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bae:	4b6d      	ldr	r3, [pc, #436]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	4969      	ldr	r1, [pc, #420]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bd0:	4b64      	ldr	r3, [pc, #400]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	4961      	ldr	r1, [pc, #388]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bf2:	4b5c      	ldr	r3, [pc, #368]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	4958      	ldr	r1, [pc, #352]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d015      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c14:	4b53      	ldr	r3, [pc, #332]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	4950      	ldr	r1, [pc, #320]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c32:	d105      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c34:	4b4b      	ldr	r3, [pc, #300]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	4a4a      	ldr	r2, [pc, #296]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d015      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c4c:	4b45      	ldr	r3, [pc, #276]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	4942      	ldr	r1, [pc, #264]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c6a:	d105      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c6c:	4b3d      	ldr	r3, [pc, #244]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4a3c      	ldr	r2, [pc, #240]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d015      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c84:	4b37      	ldr	r3, [pc, #220]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c92:	4934      	ldr	r1, [pc, #208]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ca2:	d105      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ca4:	4b2f      	ldr	r3, [pc, #188]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	4a2e      	ldr	r2, [pc, #184]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d015      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cbc:	4b29      	ldr	r3, [pc, #164]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	4926      	ldr	r1, [pc, #152]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cda:	d105      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cdc:	4b21      	ldr	r3, [pc, #132]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ce6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d015      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cf4:	4b1b      	ldr	r3, [pc, #108]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d02:	4918      	ldr	r1, [pc, #96]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d12:	d105      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d14:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4a12      	ldr	r2, [pc, #72]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d015      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	490a      	ldr	r1, [pc, #40]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4a:	d105      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	4a04      	ldr	r2, [pc, #16]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d58:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40021000 	.word	0x40021000

08006d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e049      	b.n	8006e0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fa fefe 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3304      	adds	r3, #4
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f000 fae0 	bl	800736c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d122      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d11b      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f06f 0202 	mvn.w	r2, #2
 8006e42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fa69 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006e5e:	e005      	b.n	8006e6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fa5b 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa6c 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d122      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d11b      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f06f 0204 	mvn.w	r2, #4
 8006e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fa3f 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006eb2:	e005      	b.n	8006ec0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa31 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa42 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d122      	bne.n	8006f1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d11b      	bne.n	8006f1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f06f 0208 	mvn.w	r2, #8
 8006eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2204      	movs	r2, #4
 8006ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fa15 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006f06:	e005      	b.n	8006f14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fa07 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa18 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d122      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f003 0310 	and.w	r3, r3, #16
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d11b      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f06f 0210 	mvn.w	r2, #16
 8006f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2208      	movs	r2, #8
 8006f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f9eb 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006f5a:	e005      	b.n	8006f68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f9dd 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9ee 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d10e      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f06f 0201 	mvn.w	r2, #1
 8006f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f9b7 	bl	8007308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa4:	2b80      	cmp	r3, #128	; 0x80
 8006fa6:	d10e      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb2:	2b80      	cmp	r3, #128	; 0x80
 8006fb4:	d107      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fb8b 	bl	80076dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd4:	d10e      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe0:	2b80      	cmp	r3, #128	; 0x80
 8006fe2:	d107      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fb7e 	bl	80076f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d10e      	bne.n	8007020 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	d107      	bne.n	8007020 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f99c 	bl	8007358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b20      	cmp	r3, #32
 800702c:	d10e      	bne.n	800704c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b20      	cmp	r3, #32
 800703a:	d107      	bne.n	800704c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0220 	mvn.w	r2, #32
 8007044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb3e 	bl	80076c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705a:	d10f      	bne.n	800707c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800706a:	d107      	bne.n	800707c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fb44 	bl	8007704 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800708a:	d10f      	bne.n	80070ac <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800709a:	d107      	bne.n	80070ac <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80070a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fb36 	bl	8007718 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ba:	d10f      	bne.n	80070dc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ca:	d107      	bne.n	80070dc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80070d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fb28 	bl	800772c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ea:	d10f      	bne.n	800710c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070fa:	d107      	bne.n	800710c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fb1a 	bl	8007740 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_TIM_ConfigClockSource+0x1c>
 800712c:	2302      	movs	r3, #2
 800712e:	e0de      	b.n	80072ee <HAL_TIM_ConfigClockSource+0x1da>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800714e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800715a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a63      	ldr	r2, [pc, #396]	; (80072f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	f000 80a9 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007170:	4a61      	ldr	r2, [pc, #388]	; (80072f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	f200 80ae 	bhi.w	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007178:	4a60      	ldr	r2, [pc, #384]	; (80072fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	f000 80a1 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007180:	4a5e      	ldr	r2, [pc, #376]	; (80072fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	f200 80a6 	bhi.w	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007188:	4a5d      	ldr	r2, [pc, #372]	; (8007300 <HAL_TIM_ConfigClockSource+0x1ec>)
 800718a:	4293      	cmp	r3, r2
 800718c:	f000 8099 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007190:	4a5b      	ldr	r2, [pc, #364]	; (8007300 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007192:	4293      	cmp	r3, r2
 8007194:	f200 809e 	bhi.w	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007198:	4a5a      	ldr	r2, [pc, #360]	; (8007304 <HAL_TIM_ConfigClockSource+0x1f0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	f000 8091 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80071a0:	4a58      	ldr	r2, [pc, #352]	; (8007304 <HAL_TIM_ConfigClockSource+0x1f0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	f200 8096 	bhi.w	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80071a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071ac:	f000 8089 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80071b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071b4:	f200 808e 	bhi.w	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80071b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071bc:	d03e      	beq.n	800723c <HAL_TIM_ConfigClockSource+0x128>
 80071be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c2:	f200 8087 	bhi.w	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80071c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ca:	f000 8086 	beq.w	80072da <HAL_TIM_ConfigClockSource+0x1c6>
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d2:	d87f      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80071d4:	2b70      	cmp	r3, #112	; 0x70
 80071d6:	d01a      	beq.n	800720e <HAL_TIM_ConfigClockSource+0xfa>
 80071d8:	2b70      	cmp	r3, #112	; 0x70
 80071da:	d87b      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80071dc:	2b60      	cmp	r3, #96	; 0x60
 80071de:	d050      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x16e>
 80071e0:	2b60      	cmp	r3, #96	; 0x60
 80071e2:	d877      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80071e4:	2b50      	cmp	r3, #80	; 0x50
 80071e6:	d03c      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0x14e>
 80071e8:	2b50      	cmp	r3, #80	; 0x50
 80071ea:	d873      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80071ec:	2b40      	cmp	r3, #64	; 0x40
 80071ee:	d058      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0x18e>
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d86f      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80071f4:	2b30      	cmp	r3, #48	; 0x30
 80071f6:	d064      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80071f8:	2b30      	cmp	r3, #48	; 0x30
 80071fa:	d86b      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d060      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007200:	2b20      	cmp	r3, #32
 8007202:	d867      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d05c      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007208:	2b10      	cmp	r3, #16
 800720a:	d05a      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x1ae>
 800720c:	e062      	b.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6899      	ldr	r1, [r3, #8]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f000 f9b1 	bl	8007584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	609a      	str	r2, [r3, #8]
      break;
 800723a:	e04f      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	6899      	ldr	r1, [r3, #8]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f000 f99a 	bl	8007584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800725e:	609a      	str	r2, [r3, #8]
      break;
 8007260:	e03c      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6859      	ldr	r1, [r3, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	461a      	mov	r2, r3
 8007270:	f000 f90c 	bl	800748c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2150      	movs	r1, #80	; 0x50
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f965 	bl	800754a <TIM_ITRx_SetConfig>
      break;
 8007280:	e02c      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6859      	ldr	r1, [r3, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	461a      	mov	r2, r3
 8007290:	f000 f92b 	bl	80074ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2160      	movs	r1, #96	; 0x60
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f955 	bl	800754a <TIM_ITRx_SetConfig>
      break;
 80072a0:	e01c      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6859      	ldr	r1, [r3, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f000 f8ec 	bl	800748c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2140      	movs	r1, #64	; 0x40
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 f945 	bl	800754a <TIM_ITRx_SetConfig>
      break;
 80072c0:	e00c      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f000 f93c 	bl	800754a <TIM_ITRx_SetConfig>
      break;
 80072d2:	e003      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
      break;
 80072d8:	e000      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80072da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	00100070 	.word	0x00100070
 80072fc:	00100040 	.word	0x00100040
 8007300:	00100030 	.word	0x00100030
 8007304:	00100020 	.word	0x00100020

08007308 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a3c      	ldr	r2, [pc, #240]	; (8007470 <TIM_Base_SetConfig+0x104>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00f      	beq.n	80073a4 <TIM_Base_SetConfig+0x38>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738a:	d00b      	beq.n	80073a4 <TIM_Base_SetConfig+0x38>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a39      	ldr	r2, [pc, #228]	; (8007474 <TIM_Base_SetConfig+0x108>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d007      	beq.n	80073a4 <TIM_Base_SetConfig+0x38>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a38      	ldr	r2, [pc, #224]	; (8007478 <TIM_Base_SetConfig+0x10c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_Base_SetConfig+0x38>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a37      	ldr	r2, [pc, #220]	; (800747c <TIM_Base_SetConfig+0x110>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d108      	bne.n	80073b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a2d      	ldr	r2, [pc, #180]	; (8007470 <TIM_Base_SetConfig+0x104>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01b      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c4:	d017      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a2a      	ldr	r2, [pc, #168]	; (8007474 <TIM_Base_SetConfig+0x108>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d013      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a29      	ldr	r2, [pc, #164]	; (8007478 <TIM_Base_SetConfig+0x10c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00f      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a28      	ldr	r2, [pc, #160]	; (800747c <TIM_Base_SetConfig+0x110>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00b      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a27      	ldr	r2, [pc, #156]	; (8007480 <TIM_Base_SetConfig+0x114>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d007      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a26      	ldr	r2, [pc, #152]	; (8007484 <TIM_Base_SetConfig+0x118>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d003      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a25      	ldr	r2, [pc, #148]	; (8007488 <TIM_Base_SetConfig+0x11c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d108      	bne.n	8007408 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a10      	ldr	r2, [pc, #64]	; (8007470 <TIM_Base_SetConfig+0x104>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00f      	beq.n	8007454 <TIM_Base_SetConfig+0xe8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a11      	ldr	r2, [pc, #68]	; (800747c <TIM_Base_SetConfig+0x110>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00b      	beq.n	8007454 <TIM_Base_SetConfig+0xe8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a10      	ldr	r2, [pc, #64]	; (8007480 <TIM_Base_SetConfig+0x114>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d007      	beq.n	8007454 <TIM_Base_SetConfig+0xe8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a0f      	ldr	r2, [pc, #60]	; (8007484 <TIM_Base_SetConfig+0x118>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d003      	beq.n	8007454 <TIM_Base_SetConfig+0xe8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a0e      	ldr	r2, [pc, #56]	; (8007488 <TIM_Base_SetConfig+0x11c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d103      	bne.n	800745c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	615a      	str	r2, [r3, #20]
}
 8007462:	bf00      	nop
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40000400 	.word	0x40000400
 8007478:	40000800 	.word	0x40000800
 800747c:	40013400 	.word	0x40013400
 8007480:	40014000 	.word	0x40014000
 8007484:	40014400 	.word	0x40014400
 8007488:	40014800 	.word	0x40014800

0800748c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f023 0201 	bic.w	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f023 030a 	bic.w	r3, r3, #10
 80074c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	621a      	str	r2, [r3, #32]
}
 80074de:	bf00      	nop
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b087      	sub	sp, #28
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f023 0210 	bic.w	r2, r3, #16
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	031b      	lsls	r3, r3, #12
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4313      	orrs	r3, r2
 8007530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	f043 0307 	orr.w	r3, r3, #7
 8007570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	609a      	str	r2, [r3, #8]
}
 8007578:	bf00      	nop
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800759e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	021a      	lsls	r2, r3, #8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075d8:	2302      	movs	r3, #2
 80075da:	e065      	b.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a2c      	ldr	r2, [pc, #176]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a2b      	ldr	r2, [pc, #172]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d108      	bne.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007616:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1b      	ldr	r2, [pc, #108]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d018      	beq.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007652:	d013      	beq.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a18      	ldr	r2, [pc, #96]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00e      	beq.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a17      	ldr	r2, [pc, #92]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d009      	beq.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a12      	ldr	r2, [pc, #72]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d004      	beq.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a13      	ldr	r2, [pc, #76]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d10c      	bne.n	8007696 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007682:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	4313      	orrs	r3, r2
 800768c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	40012c00 	.word	0x40012c00
 80076b8:	40013400 	.word	0x40013400
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40014000 	.word	0x40014000

080076c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e042      	b.n	80077ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776c:	2b00      	cmp	r3, #0
 800776e:	d106      	bne.n	800777e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fa fa7b 	bl	8001c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2224      	movs	r2, #36	; 0x24
 8007782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fb64 	bl	8007e64 <UART_SetConfig>
 800779c:	4603      	mov	r3, r0
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e022      	b.n	80077ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fe24 	bl	80083fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 feab 	bl	8008540 <UART_CheckIdleState>
 80077ea:	4603      	mov	r3, r0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b0ba      	sub	sp, #232	; 0xe8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800781a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800781e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007822:	4013      	ands	r3, r2
 8007824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800782c:	2b00      	cmp	r3, #0
 800782e:	d11b      	bne.n	8007868 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d015      	beq.n	8007868 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800783c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	2b00      	cmp	r3, #0
 8007846:	d105      	bne.n	8007854 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800784c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d009      	beq.n	8007868 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 82d6 	beq.w	8007e0a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
      }
      return;
 8007866:	e2d0      	b.n	8007e0a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 811f 	beq.w	8007ab0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007872:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007876:	4b8b      	ldr	r3, [pc, #556]	; (8007aa4 <HAL_UART_IRQHandler+0x2b0>)
 8007878:	4013      	ands	r3, r2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d106      	bne.n	800788c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800787e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007882:	4b89      	ldr	r3, [pc, #548]	; (8007aa8 <HAL_UART_IRQHandler+0x2b4>)
 8007884:	4013      	ands	r3, r2
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 8112 	beq.w	8007ab0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d011      	beq.n	80078bc <HAL_UART_IRQHandler+0xc8>
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2201      	movs	r2, #1
 80078aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b2:	f043 0201 	orr.w	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d011      	beq.n	80078ec <HAL_UART_IRQHandler+0xf8>
 80078c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00b      	beq.n	80078ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2202      	movs	r2, #2
 80078da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e2:	f043 0204 	orr.w	r2, r3, #4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d011      	beq.n	800791c <HAL_UART_IRQHandler+0x128>
 80078f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2204      	movs	r2, #4
 800790a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007912:	f043 0202 	orr.w	r2, r3, #2
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007920:	f003 0308 	and.w	r3, r3, #8
 8007924:	2b00      	cmp	r3, #0
 8007926:	d017      	beq.n	8007958 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007934:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007938:	4b5a      	ldr	r3, [pc, #360]	; (8007aa4 <HAL_UART_IRQHandler+0x2b0>)
 800793a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2208      	movs	r2, #8
 8007946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800794e:	f043 0208 	orr.w	r2, r3, #8
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007960:	2b00      	cmp	r3, #0
 8007962:	d012      	beq.n	800798a <HAL_UART_IRQHandler+0x196>
 8007964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00c      	beq.n	800798a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007978:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007980:	f043 0220 	orr.w	r2, r3, #32
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 823c 	beq.w	8007e0e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d013      	beq.n	80079ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d105      	bne.n	80079ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d005      	beq.n	80079ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d04f      	beq.n	8007a8e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 feb9 	bl	8008766 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fe:	2b40      	cmp	r3, #64	; 0x40
 8007a00:	d141      	bne.n	8007a86 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1d9      	bne.n	8007a02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d013      	beq.n	8007a7e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5a:	4a14      	ldr	r2, [pc, #80]	; (8007aac <HAL_UART_IRQHandler+0x2b8>)
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fc ff58 	bl	8004918 <HAL_DMA_Abort_IT>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d017      	beq.n	8007a9e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7c:	e00f      	b.n	8007a9e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f9da 	bl	8007e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a84:	e00b      	b.n	8007a9e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f9d6 	bl	8007e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8c:	e007      	b.n	8007a9e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f9d2 	bl	8007e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007a9c:	e1b7      	b.n	8007e0e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9e:	bf00      	nop
    return;
 8007aa0:	e1b5      	b.n	8007e0e <HAL_UART_IRQHandler+0x61a>
 8007aa2:	bf00      	nop
 8007aa4:	10000001 	.word	0x10000001
 8007aa8:	04000120 	.word	0x04000120
 8007aac:	08008833 	.word	0x08008833

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	f040 814a 	bne.w	8007d4e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abe:	f003 0310 	and.w	r3, r3, #16
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 8143 	beq.w	8007d4e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 813c 	beq.w	8007d4e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2210      	movs	r2, #16
 8007adc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	f040 80b5 	bne.w	8007c58 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007afa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 8187 	beq.w	8007e12 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	f080 817f 	bcs.w	8007e12 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 8086 	bne.w	8007c3c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1da      	bne.n	8007b30 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e1      	bne.n	8007b7a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e3      	bne.n	8007bb6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0c:	f023 0310 	bic.w	r3, r3, #16
 8007c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e4      	bne.n	8007bfc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fc fe15 	bl	8004866 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f8fb 	bl	8007e4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c56:	e0dc      	b.n	8007e12 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 80ce 	beq.w	8007e16 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007c7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 80c9 	beq.w	8007e16 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e4      	bne.n	8007c84 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cd0:	f023 0301 	bic.w	r3, r3, #1
 8007cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3308      	adds	r3, #8
 8007cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e1      	bne.n	8007cba <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0310 	bic.w	r3, r3, #16
 8007d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	69b9      	ldr	r1, [r7, #24]
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	617b      	str	r3, [r7, #20]
   return(result);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e4      	bne.n	8007d0a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f880 	bl	8007e4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d4c:	e063      	b.n	8007e16 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00e      	beq.n	8007d78 <HAL_UART_IRQHandler+0x584>
 8007d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fd9f 	bl	80088b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d76:	e051      	b.n	8007e1c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d014      	beq.n	8007dae <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d105      	bne.n	8007d9c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d008      	beq.n	8007dae <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d03a      	beq.n	8007e1a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	4798      	blx	r3
    }
    return;
 8007dac:	e035      	b.n	8007e1a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <HAL_UART_IRQHandler+0x5da>
 8007dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fd49 	bl	800885e <UART_EndTransmit_IT>
    return;
 8007dcc:	e026      	b.n	8007e1c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <HAL_UART_IRQHandler+0x5fa>
 8007dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fd78 	bl	80088dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dec:	e016      	b.n	8007e1c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d010      	beq.n	8007e1c <HAL_UART_IRQHandler+0x628>
 8007dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	da0c      	bge.n	8007e1c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fd60 	bl	80088c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e08:	e008      	b.n	8007e1c <HAL_UART_IRQHandler+0x628>
      return;
 8007e0a:	bf00      	nop
 8007e0c:	e006      	b.n	8007e1c <HAL_UART_IRQHandler+0x628>
    return;
 8007e0e:	bf00      	nop
 8007e10:	e004      	b.n	8007e1c <HAL_UART_IRQHandler+0x628>
      return;
 8007e12:	bf00      	nop
 8007e14:	e002      	b.n	8007e1c <HAL_UART_IRQHandler+0x628>
      return;
 8007e16:	bf00      	nop
 8007e18:	e000      	b.n	8007e1c <HAL_UART_IRQHandler+0x628>
    return;
 8007e1a:	bf00      	nop
  }
}
 8007e1c:	37e8      	adds	r7, #232	; 0xe8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop

08007e24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e68:	b08c      	sub	sp, #48	; 0x30
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4bab      	ldr	r3, [pc, #684]	; (8008140 <UART_SetConfig+0x2dc>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4aa0      	ldr	r2, [pc, #640]	; (8008144 <UART_SetConfig+0x2e0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d004      	beq.n	8007ed0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007eda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	f023 010f 	bic.w	r1, r3, #15
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a91      	ldr	r2, [pc, #580]	; (8008148 <UART_SetConfig+0x2e4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d125      	bne.n	8007f54 <UART_SetConfig+0xf0>
 8007f08:	4b90      	ldr	r3, [pc, #576]	; (800814c <UART_SetConfig+0x2e8>)
 8007f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d81a      	bhi.n	8007f4c <UART_SetConfig+0xe8>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0xb8>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f2d 	.word	0x08007f2d
 8007f20:	08007f3d 	.word	0x08007f3d
 8007f24:	08007f35 	.word	0x08007f35
 8007f28:	08007f45 	.word	0x08007f45
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f32:	e0d6      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007f34:	2302      	movs	r3, #2
 8007f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3a:	e0d2      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f42:	e0ce      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007f44:	2308      	movs	r3, #8
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f4a:	e0ca      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f52:	e0c6      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a7d      	ldr	r2, [pc, #500]	; (8008150 <UART_SetConfig+0x2ec>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d138      	bne.n	8007fd0 <UART_SetConfig+0x16c>
 8007f5e:	4b7b      	ldr	r3, [pc, #492]	; (800814c <UART_SetConfig+0x2e8>)
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f64:	f003 030c 	and.w	r3, r3, #12
 8007f68:	2b0c      	cmp	r3, #12
 8007f6a:	d82d      	bhi.n	8007fc8 <UART_SetConfig+0x164>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <UART_SetConfig+0x110>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007fa9 	.word	0x08007fa9
 8007f78:	08007fc9 	.word	0x08007fc9
 8007f7c:	08007fc9 	.word	0x08007fc9
 8007f80:	08007fc9 	.word	0x08007fc9
 8007f84:	08007fb9 	.word	0x08007fb9
 8007f88:	08007fc9 	.word	0x08007fc9
 8007f8c:	08007fc9 	.word	0x08007fc9
 8007f90:	08007fc9 	.word	0x08007fc9
 8007f94:	08007fb1 	.word	0x08007fb1
 8007f98:	08007fc9 	.word	0x08007fc9
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	08007fc9 	.word	0x08007fc9
 8007fa4:	08007fc1 	.word	0x08007fc1
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fae:	e098      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb6:	e094      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007fb8:	2304      	movs	r3, #4
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fbe:	e090      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc6:	e08c      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007fc8:	2310      	movs	r3, #16
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fce:	e088      	b.n	80080e2 <UART_SetConfig+0x27e>
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a5f      	ldr	r2, [pc, #380]	; (8008154 <UART_SetConfig+0x2f0>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d125      	bne.n	8008026 <UART_SetConfig+0x1c2>
 8007fda:	4b5c      	ldr	r3, [pc, #368]	; (800814c <UART_SetConfig+0x2e8>)
 8007fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fe4:	2b30      	cmp	r3, #48	; 0x30
 8007fe6:	d016      	beq.n	8008016 <UART_SetConfig+0x1b2>
 8007fe8:	2b30      	cmp	r3, #48	; 0x30
 8007fea:	d818      	bhi.n	800801e <UART_SetConfig+0x1ba>
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d00a      	beq.n	8008006 <UART_SetConfig+0x1a2>
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d814      	bhi.n	800801e <UART_SetConfig+0x1ba>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <UART_SetConfig+0x19a>
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	d008      	beq.n	800800e <UART_SetConfig+0x1aa>
 8007ffc:	e00f      	b.n	800801e <UART_SetConfig+0x1ba>
 8007ffe:	2300      	movs	r3, #0
 8008000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008004:	e06d      	b.n	80080e2 <UART_SetConfig+0x27e>
 8008006:	2302      	movs	r3, #2
 8008008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800c:	e069      	b.n	80080e2 <UART_SetConfig+0x27e>
 800800e:	2304      	movs	r3, #4
 8008010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008014:	e065      	b.n	80080e2 <UART_SetConfig+0x27e>
 8008016:	2308      	movs	r3, #8
 8008018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801c:	e061      	b.n	80080e2 <UART_SetConfig+0x27e>
 800801e:	2310      	movs	r3, #16
 8008020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008024:	e05d      	b.n	80080e2 <UART_SetConfig+0x27e>
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a4b      	ldr	r2, [pc, #300]	; (8008158 <UART_SetConfig+0x2f4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d125      	bne.n	800807c <UART_SetConfig+0x218>
 8008030:	4b46      	ldr	r3, [pc, #280]	; (800814c <UART_SetConfig+0x2e8>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800803a:	2bc0      	cmp	r3, #192	; 0xc0
 800803c:	d016      	beq.n	800806c <UART_SetConfig+0x208>
 800803e:	2bc0      	cmp	r3, #192	; 0xc0
 8008040:	d818      	bhi.n	8008074 <UART_SetConfig+0x210>
 8008042:	2b80      	cmp	r3, #128	; 0x80
 8008044:	d00a      	beq.n	800805c <UART_SetConfig+0x1f8>
 8008046:	2b80      	cmp	r3, #128	; 0x80
 8008048:	d814      	bhi.n	8008074 <UART_SetConfig+0x210>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <UART_SetConfig+0x1f0>
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	d008      	beq.n	8008064 <UART_SetConfig+0x200>
 8008052:	e00f      	b.n	8008074 <UART_SetConfig+0x210>
 8008054:	2300      	movs	r3, #0
 8008056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805a:	e042      	b.n	80080e2 <UART_SetConfig+0x27e>
 800805c:	2302      	movs	r3, #2
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008062:	e03e      	b.n	80080e2 <UART_SetConfig+0x27e>
 8008064:	2304      	movs	r3, #4
 8008066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806a:	e03a      	b.n	80080e2 <UART_SetConfig+0x27e>
 800806c:	2308      	movs	r3, #8
 800806e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008072:	e036      	b.n	80080e2 <UART_SetConfig+0x27e>
 8008074:	2310      	movs	r3, #16
 8008076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807a:	e032      	b.n	80080e2 <UART_SetConfig+0x27e>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a30      	ldr	r2, [pc, #192]	; (8008144 <UART_SetConfig+0x2e0>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d12a      	bne.n	80080dc <UART_SetConfig+0x278>
 8008086:	4b31      	ldr	r3, [pc, #196]	; (800814c <UART_SetConfig+0x2e8>)
 8008088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008090:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008094:	d01a      	beq.n	80080cc <UART_SetConfig+0x268>
 8008096:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800809a:	d81b      	bhi.n	80080d4 <UART_SetConfig+0x270>
 800809c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080a0:	d00c      	beq.n	80080bc <UART_SetConfig+0x258>
 80080a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080a6:	d815      	bhi.n	80080d4 <UART_SetConfig+0x270>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <UART_SetConfig+0x250>
 80080ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b0:	d008      	beq.n	80080c4 <UART_SetConfig+0x260>
 80080b2:	e00f      	b.n	80080d4 <UART_SetConfig+0x270>
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ba:	e012      	b.n	80080e2 <UART_SetConfig+0x27e>
 80080bc:	2302      	movs	r3, #2
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c2:	e00e      	b.n	80080e2 <UART_SetConfig+0x27e>
 80080c4:	2304      	movs	r3, #4
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ca:	e00a      	b.n	80080e2 <UART_SetConfig+0x27e>
 80080cc:	2308      	movs	r3, #8
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d2:	e006      	b.n	80080e2 <UART_SetConfig+0x27e>
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080da:	e002      	b.n	80080e2 <UART_SetConfig+0x27e>
 80080dc:	2310      	movs	r3, #16
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a17      	ldr	r2, [pc, #92]	; (8008144 <UART_SetConfig+0x2e0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	f040 80a8 	bne.w	800823e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080f2:	2b08      	cmp	r3, #8
 80080f4:	d834      	bhi.n	8008160 <UART_SetConfig+0x2fc>
 80080f6:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <UART_SetConfig+0x298>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	08008121 	.word	0x08008121
 8008100:	08008161 	.word	0x08008161
 8008104:	08008129 	.word	0x08008129
 8008108:	08008161 	.word	0x08008161
 800810c:	0800812f 	.word	0x0800812f
 8008110:	08008161 	.word	0x08008161
 8008114:	08008161 	.word	0x08008161
 8008118:	08008161 	.word	0x08008161
 800811c:	08008137 	.word	0x08008137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008120:	f7fe fbc2 	bl	80068a8 <HAL_RCC_GetPCLK1Freq>
 8008124:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008126:	e021      	b.n	800816c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008128:	4b0c      	ldr	r3, [pc, #48]	; (800815c <UART_SetConfig+0x2f8>)
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800812c:	e01e      	b.n	800816c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800812e:	f7fe fb4f 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8008132:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008134:	e01a      	b.n	800816c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800813a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800813c:	e016      	b.n	800816c <UART_SetConfig+0x308>
 800813e:	bf00      	nop
 8008140:	cfff69f3 	.word	0xcfff69f3
 8008144:	40008000 	.word	0x40008000
 8008148:	40013800 	.word	0x40013800
 800814c:	40021000 	.word	0x40021000
 8008150:	40004400 	.word	0x40004400
 8008154:	40004800 	.word	0x40004800
 8008158:	40004c00 	.word	0x40004c00
 800815c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800816a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 812a 	beq.w	80083c8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	4a9e      	ldr	r2, [pc, #632]	; (80083f4 <UART_SetConfig+0x590>)
 800817a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800817e:	461a      	mov	r2, r3
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	fbb3 f3f2 	udiv	r3, r3, r2
 8008186:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	4413      	add	r3, r2
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	429a      	cmp	r2, r3
 8008196:	d305      	bcc.n	80081a4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d903      	bls.n	80081ac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081aa:	e10d      	b.n	80083c8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ae:	2200      	movs	r2, #0
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	60fa      	str	r2, [r7, #12]
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	4a8e      	ldr	r2, [pc, #568]	; (80083f4 <UART_SetConfig+0x590>)
 80081ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2200      	movs	r2, #0
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081ce:	f7f8 f823 	bl	8000218 <__aeabi_uldivmod>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4610      	mov	r0, r2
 80081d8:	4619      	mov	r1, r3
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	020b      	lsls	r3, r1, #8
 80081e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081e8:	0202      	lsls	r2, r0, #8
 80081ea:	6979      	ldr	r1, [r7, #20]
 80081ec:	6849      	ldr	r1, [r1, #4]
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	2000      	movs	r0, #0
 80081f2:	460c      	mov	r4, r1
 80081f4:	4605      	mov	r5, r0
 80081f6:	eb12 0804 	adds.w	r8, r2, r4
 80081fa:	eb43 0905 	adc.w	r9, r3, r5
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	469a      	mov	sl, r3
 8008206:	4693      	mov	fp, r2
 8008208:	4652      	mov	r2, sl
 800820a:	465b      	mov	r3, fp
 800820c:	4640      	mov	r0, r8
 800820e:	4649      	mov	r1, r9
 8008210:	f7f8 f802 	bl	8000218 <__aeabi_uldivmod>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4613      	mov	r3, r2
 800821a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008222:	d308      	bcc.n	8008236 <UART_SetConfig+0x3d2>
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800822a:	d204      	bcs.n	8008236 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6a3a      	ldr	r2, [r7, #32]
 8008232:	60da      	str	r2, [r3, #12]
 8008234:	e0c8      	b.n	80083c8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800823c:	e0c4      	b.n	80083c8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008246:	d167      	bne.n	8008318 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800824c:	2b08      	cmp	r3, #8
 800824e:	d828      	bhi.n	80082a2 <UART_SetConfig+0x43e>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <UART_SetConfig+0x3f4>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	0800827d 	.word	0x0800827d
 800825c:	08008285 	.word	0x08008285
 8008260:	0800828d 	.word	0x0800828d
 8008264:	080082a3 	.word	0x080082a3
 8008268:	08008293 	.word	0x08008293
 800826c:	080082a3 	.word	0x080082a3
 8008270:	080082a3 	.word	0x080082a3
 8008274:	080082a3 	.word	0x080082a3
 8008278:	0800829b 	.word	0x0800829b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800827c:	f7fe fb14 	bl	80068a8 <HAL_RCC_GetPCLK1Freq>
 8008280:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008282:	e014      	b.n	80082ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008284:	f7fe fb26 	bl	80068d4 <HAL_RCC_GetPCLK2Freq>
 8008288:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800828a:	e010      	b.n	80082ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800828c:	4b5a      	ldr	r3, [pc, #360]	; (80083f8 <UART_SetConfig+0x594>)
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008290:	e00d      	b.n	80082ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008292:	f7fe fa9d 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8008296:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008298:	e009      	b.n	80082ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800829e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082a0:	e005      	b.n	80082ae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 8089 	beq.w	80083c8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	4a4e      	ldr	r2, [pc, #312]	; (80083f4 <UART_SetConfig+0x590>)
 80082bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c0:	461a      	mov	r2, r3
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082c8:	005a      	lsls	r2, r3, #1
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	085b      	lsrs	r3, r3, #1
 80082d0:	441a      	add	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	2b0f      	cmp	r3, #15
 80082e0:	d916      	bls.n	8008310 <UART_SetConfig+0x4ac>
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e8:	d212      	bcs.n	8008310 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	f023 030f 	bic.w	r3, r3, #15
 80082f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	085b      	lsrs	r3, r3, #1
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	b29a      	uxth	r2, r3
 8008300:	8bfb      	ldrh	r3, [r7, #30]
 8008302:	4313      	orrs	r3, r2
 8008304:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	8bfa      	ldrh	r2, [r7, #30]
 800830c:	60da      	str	r2, [r3, #12]
 800830e:	e05b      	b.n	80083c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008316:	e057      	b.n	80083c8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008318:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800831c:	2b08      	cmp	r3, #8
 800831e:	d828      	bhi.n	8008372 <UART_SetConfig+0x50e>
 8008320:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <UART_SetConfig+0x4c4>)
 8008322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008326:	bf00      	nop
 8008328:	0800834d 	.word	0x0800834d
 800832c:	08008355 	.word	0x08008355
 8008330:	0800835d 	.word	0x0800835d
 8008334:	08008373 	.word	0x08008373
 8008338:	08008363 	.word	0x08008363
 800833c:	08008373 	.word	0x08008373
 8008340:	08008373 	.word	0x08008373
 8008344:	08008373 	.word	0x08008373
 8008348:	0800836b 	.word	0x0800836b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800834c:	f7fe faac 	bl	80068a8 <HAL_RCC_GetPCLK1Freq>
 8008350:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008352:	e014      	b.n	800837e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008354:	f7fe fabe 	bl	80068d4 <HAL_RCC_GetPCLK2Freq>
 8008358:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800835a:	e010      	b.n	800837e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800835c:	4b26      	ldr	r3, [pc, #152]	; (80083f8 <UART_SetConfig+0x594>)
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008360:	e00d      	b.n	800837e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008362:	f7fe fa35 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8008366:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008368:	e009      	b.n	800837e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008370:	e005      	b.n	800837e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800837c:	bf00      	nop
    }

    if (pclk != 0U)
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	2b00      	cmp	r3, #0
 8008382:	d021      	beq.n	80083c8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	4a1a      	ldr	r2, [pc, #104]	; (80083f4 <UART_SetConfig+0x590>)
 800838a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800838e:	461a      	mov	r2, r3
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	fbb3 f2f2 	udiv	r2, r3, r2
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	085b      	lsrs	r3, r3, #1
 800839c:	441a      	add	r2, r3
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	2b0f      	cmp	r3, #15
 80083ac:	d909      	bls.n	80083c2 <UART_SetConfig+0x55e>
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b4:	d205      	bcs.n	80083c2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	60da      	str	r2, [r3, #12]
 80083c0:	e002      	b.n	80083c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2200      	movs	r2, #0
 80083dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2200      	movs	r2, #0
 80083e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80083e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3730      	adds	r7, #48	; 0x30
 80083ec:	46bd      	mov	sp, r7
 80083ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083f2:	bf00      	nop
 80083f4:	08008bac 	.word	0x08008bac
 80083f8:	00f42400 	.word	0x00f42400

080083fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00a      	beq.n	8008426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	430a      	orrs	r2, r1
 8008424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00a      	beq.n	800846a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	f003 0308 	and.w	r3, r3, #8
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	f003 0310 	and.w	r3, r3, #16
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01a      	beq.n	8008512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084fa:	d10a      	bne.n	8008512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	605a      	str	r2, [r3, #4]
  }
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af02      	add	r7, sp, #8
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008550:	f7f9 fcac 	bl	8001eac <HAL_GetTick>
 8008554:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0308 	and.w	r3, r3, #8
 8008560:	2b08      	cmp	r3, #8
 8008562:	d10e      	bne.n	8008582 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f82f 	bl	80085d6 <UART_WaitOnFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e025      	b.n	80085ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b04      	cmp	r3, #4
 800858e:	d10e      	bne.n	80085ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f819 	bl	80085d6 <UART_WaitOnFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e00f      	b.n	80085ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b09c      	sub	sp, #112	; 0x70
 80085da:	af00      	add	r7, sp, #0
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	60b9      	str	r1, [r7, #8]
 80085e0:	603b      	str	r3, [r7, #0]
 80085e2:	4613      	mov	r3, r2
 80085e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085e6:	e0a9      	b.n	800873c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	f000 80a5 	beq.w	800873c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f2:	f7f9 fc5b 	bl	8001eac <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085fe:	429a      	cmp	r2, r3
 8008600:	d302      	bcc.n	8008608 <UART_WaitOnFlagUntilTimeout+0x32>
 8008602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008604:	2b00      	cmp	r3, #0
 8008606:	d140      	bne.n	800868a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800861c:	667b      	str	r3, [r7, #100]	; 0x64
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008628:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800862c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e6      	bne.n	8008608 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3308      	adds	r3, #8
 8008640:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	f023 0301 	bic.w	r3, r3, #1
 8008650:	663b      	str	r3, [r7, #96]	; 0x60
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3308      	adds	r3, #8
 8008658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800865a:	64ba      	str	r2, [r7, #72]	; 0x48
 800865c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e5      	bne.n	800863a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e069      	b.n	800875e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d051      	beq.n	800873c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a6:	d149      	bne.n	800873c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d0:	637b      	str	r3, [r7, #52]	; 0x34
 80086d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d8:	e841 2300 	strex	r3, r2, [r1]
 80086dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e6      	bne.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3308      	adds	r3, #8
 80086ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	613b      	str	r3, [r7, #16]
   return(result);
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f023 0301 	bic.w	r3, r3, #1
 80086fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3308      	adds	r3, #8
 8008702:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008704:	623a      	str	r2, [r7, #32]
 8008706:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	69f9      	ldr	r1, [r7, #28]
 800870a:	6a3a      	ldr	r2, [r7, #32]
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	61bb      	str	r3, [r7, #24]
   return(result);
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e5      	bne.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2220      	movs	r2, #32
 800871c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2220      	movs	r2, #32
 8008724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2220      	movs	r2, #32
 800872c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e010      	b.n	800875e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	69da      	ldr	r2, [r3, #28]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	4013      	ands	r3, r2
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	429a      	cmp	r2, r3
 800874a:	bf0c      	ite	eq
 800874c:	2301      	moveq	r3, #1
 800874e:	2300      	movne	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	461a      	mov	r2, r3
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	429a      	cmp	r2, r3
 8008758:	f43f af46 	beq.w	80085e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3770      	adds	r7, #112	; 0x70
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008766:	b480      	push	{r7}
 8008768:	b095      	sub	sp, #84	; 0x54
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878c:	643b      	str	r3, [r7, #64]	; 0x40
 800878e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e6      	bne.n	800876e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3308      	adds	r3, #8
 80087a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087b6:	f023 0301 	bic.w	r3, r3, #1
 80087ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e3      	bne.n	80087a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d118      	bne.n	8008812 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f023 0310 	bic.w	r3, r3, #16
 80087f4:	647b      	str	r3, [r7, #68]	; 0x44
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fe:	61bb      	str	r3, [r7, #24]
 8008800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6979      	ldr	r1, [r7, #20]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	613b      	str	r3, [r7, #16]
   return(result);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e6      	bne.n	80087e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2220      	movs	r2, #32
 8008816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008826:	bf00      	nop
 8008828:	3754      	adds	r7, #84	; 0x54
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff faf1 	bl	8007e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b088      	sub	sp, #32
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	e853 3f00 	ldrex	r3, [r3]
 8008872:	60bb      	str	r3, [r7, #8]
   return(result);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800887a:	61fb      	str	r3, [r7, #28]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	461a      	mov	r2, r3
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	61bb      	str	r3, [r7, #24]
 8008886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6979      	ldr	r1, [r7, #20]
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	613b      	str	r3, [r7, #16]
   return(result);
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e6      	bne.n	8008866 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff fabc 	bl	8007e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ac:	bf00      	nop
 80088ae:	3720      	adds	r7, #32
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d101      	bne.n	8008906 <HAL_UARTEx_DisableFifoMode+0x16>
 8008902:	2302      	movs	r3, #2
 8008904:	e027      	b.n	8008956 <HAL_UARTEx_DisableFifoMode+0x66>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2224      	movs	r2, #36	; 0x24
 8008912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0201 	bic.w	r2, r2, #1
 800892c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008934:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2220      	movs	r2, #32
 8008948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008976:	2302      	movs	r3, #2
 8008978:	e02d      	b.n	80089d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2224      	movs	r2, #36	; 0x24
 8008986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 0201 	bic.w	r2, r2, #1
 80089a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f850 	bl	8008a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d101      	bne.n	80089f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089f2:	2302      	movs	r3, #2
 80089f4:	e02d      	b.n	8008a52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2224      	movs	r2, #36	; 0x24
 8008a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0201 	bic.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f812 	bl	8008a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d108      	bne.n	8008a7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a7c:	e031      	b.n	8008ae2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a7e:	2308      	movs	r3, #8
 8008a80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a82:	2308      	movs	r3, #8
 8008a84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	0e5b      	lsrs	r3, r3, #25
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	0f5b      	lsrs	r3, r3, #29
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	7b3a      	ldrb	r2, [r7, #12]
 8008aaa:	4911      	ldr	r1, [pc, #68]	; (8008af0 <UARTEx_SetNbDataToProcess+0x94>)
 8008aac:	5c8a      	ldrb	r2, [r1, r2]
 8008aae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ab2:	7b3a      	ldrb	r2, [r7, #12]
 8008ab4:	490f      	ldr	r1, [pc, #60]	; (8008af4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ab6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	7b7a      	ldrb	r2, [r7, #13]
 8008ac8:	4909      	ldr	r1, [pc, #36]	; (8008af0 <UARTEx_SetNbDataToProcess+0x94>)
 8008aca:	5c8a      	ldrb	r2, [r1, r2]
 8008acc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ad0:	7b7a      	ldrb	r2, [r7, #13]
 8008ad2:	4908      	ldr	r1, [pc, #32]	; (8008af4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ad4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ad6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	08008bc4 	.word	0x08008bc4
 8008af4:	08008bcc 	.word	0x08008bcc

08008af8 <memset>:
 8008af8:	4402      	add	r2, r0
 8008afa:	4603      	mov	r3, r0
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d100      	bne.n	8008b02 <memset+0xa>
 8008b00:	4770      	bx	lr
 8008b02:	f803 1b01 	strb.w	r1, [r3], #1
 8008b06:	e7f9      	b.n	8008afc <memset+0x4>

08008b08 <__libc_init_array>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	4d0d      	ldr	r5, [pc, #52]	; (8008b40 <__libc_init_array+0x38>)
 8008b0c:	4c0d      	ldr	r4, [pc, #52]	; (8008b44 <__libc_init_array+0x3c>)
 8008b0e:	1b64      	subs	r4, r4, r5
 8008b10:	10a4      	asrs	r4, r4, #2
 8008b12:	2600      	movs	r6, #0
 8008b14:	42a6      	cmp	r6, r4
 8008b16:	d109      	bne.n	8008b2c <__libc_init_array+0x24>
 8008b18:	4d0b      	ldr	r5, [pc, #44]	; (8008b48 <__libc_init_array+0x40>)
 8008b1a:	4c0c      	ldr	r4, [pc, #48]	; (8008b4c <__libc_init_array+0x44>)
 8008b1c:	f000 f826 	bl	8008b6c <_init>
 8008b20:	1b64      	subs	r4, r4, r5
 8008b22:	10a4      	asrs	r4, r4, #2
 8008b24:	2600      	movs	r6, #0
 8008b26:	42a6      	cmp	r6, r4
 8008b28:	d105      	bne.n	8008b36 <__libc_init_array+0x2e>
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b30:	4798      	blx	r3
 8008b32:	3601      	adds	r6, #1
 8008b34:	e7ee      	b.n	8008b14 <__libc_init_array+0xc>
 8008b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3a:	4798      	blx	r3
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	e7f2      	b.n	8008b26 <__libc_init_array+0x1e>
 8008b40:	08008bdc 	.word	0x08008bdc
 8008b44:	08008bdc 	.word	0x08008bdc
 8008b48:	08008bdc 	.word	0x08008bdc
 8008b4c:	08008be0 	.word	0x08008be0

08008b50 <memcpy>:
 8008b50:	440a      	add	r2, r1
 8008b52:	4291      	cmp	r1, r2
 8008b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b58:	d100      	bne.n	8008b5c <memcpy+0xc>
 8008b5a:	4770      	bx	lr
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b66:	4291      	cmp	r1, r2
 8008b68:	d1f9      	bne.n	8008b5e <memcpy+0xe>
 8008b6a:	bd10      	pop	{r4, pc}

08008b6c <_init>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr

08008b78 <_fini>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr
