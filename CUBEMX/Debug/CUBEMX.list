
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f354  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  0800f538  0800f538  0001f538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100a8  080100a8  00030758  2**0
                  CONTENTS
  4 .ARM          00000008  080100a8  080100a8  000200a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100b0  080100b0  00030758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100b0  080100b0  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100b4  080100b4  000200b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000758  20000000  080100b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a0  20000758  08010810  00030758  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ff8  08010810  00031ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030788  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003144a  00000000  00000000  000307cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000633c  00000000  00000000  00061c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cf0  00000000  00000000  00067f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000190a  00000000  00000000  00069c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a2b  00000000  00000000  0006b552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038759  00000000  00000000  00092f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb58a  00000000  00000000  000cb6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000632c  00000000  00000000  001b6c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00012fe1  00000000  00000000  001bcf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001cff6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000758 	.word	0x20000758
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f51c 	.word	0x0800f51c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000075c 	.word	0x2000075c
 800021c:	0800f51c 	.word	0x0800f51c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <Update_FIR_filter+0x88>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <Update_FIR_filter+0x8c>)
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	601a      	str	r2, [r3, #0]
	float temp = 0.0f;
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	e016      	b.n	8001026 <Update_FIR_filter+0x52>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <Update_FIR_filter+0x90>)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	ed93 7a00 	vldr	s14, [r3]
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <Update_FIR_filter+0x8c>)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001014:	ed97 7a03 	vldr	s14, [r7, #12]
 8001018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101c:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	3301      	adds	r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b09      	cmp	r3, #9
 800102a:	dde5      	ble.n	8000ff8 <Update_FIR_filter+0x24>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <Update_FIR_filter+0x88>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b08      	cmp	r3, #8
 8001032:	d806      	bhi.n	8001042 <Update_FIR_filter+0x6e>
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <Update_FIR_filter+0x88>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <Update_FIR_filter+0x88>)
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e002      	b.n	8001048 <Update_FIR_filter+0x74>
	else FIR_index = 0;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <Update_FIR_filter+0x88>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
	return temp;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	ee07 3a90 	vmov	s15, r3
}
 800104e:	eeb0 0a67 	vmov.f32	s0, s15
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	200007bc 	.word	0x200007bc
 8001060:	200007c0 	.word	0x200007c0
 8001064:	20000000 	.word	0x20000000

08001068 <Update_FIR_filter2>:

#define FIR_FILTER_LENGTH2 100
uint8_t FIR_index2 = 0;
float FIR_Values2[FIR_FILTER_LENGTH2] = {0};
float FIR2_value = 0;
float Update_FIR_filter2(float input){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR2_value -= FIR_Values2[FIR_index];
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <Update_FIR_filter2+0x94>)
 8001074:	ed93 7a00 	vldr	s14, [r3]
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <Update_FIR_filter2+0x98>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <Update_FIR_filter2+0x9c>)
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <Update_FIR_filter2+0x94>)
 800108c:	edc3 7a00 	vstr	s15, [r3]
	FIR_Values2[FIR_index] = input/FIR_FILTER_LENGTH2;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <Update_FIR_filter2+0x98>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	ed97 7a01 	vldr	s14, [r7, #4]
 8001098:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001108 <Update_FIR_filter2+0xa0>
 800109c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <Update_FIR_filter2+0x9c>)
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	edc3 7a00 	vstr	s15, [r3]
	FIR2_value += FIR_Values2[FIR_index] ;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <Update_FIR_filter2+0x98>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <Update_FIR_filter2+0x9c>)
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <Update_FIR_filter2+0x94>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <Update_FIR_filter2+0x94>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
	if(FIR_index2 < FIR_FILTER_LENGTH2-1)FIR_index2++;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <Update_FIR_filter2+0xa4>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b62      	cmp	r3, #98	; 0x62
 80010ce:	d806      	bhi.n	80010de <Update_FIR_filter2+0x76>
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <Update_FIR_filter2+0xa4>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <Update_FIR_filter2+0xa4>)
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e002      	b.n	80010e4 <Update_FIR_filter2+0x7c>
	else FIR_index2 = 0;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <Update_FIR_filter2+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	return FIR2_value;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <Update_FIR_filter2+0x94>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	ee07 3a90 	vmov	s15, r3
}
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000097c 	.word	0x2000097c
 8001100:	200007bc 	.word	0x200007bc
 8001104:	200007ec 	.word	0x200007ec
 8001108:	42c80000 	.word	0x42c80000
 800110c:	200007e8 	.word	0x200007e8

08001110 <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG2
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif


    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <Current_IRQ+0x20>
 800111e:	2210      	movs	r2, #16
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <Current_IRQ+0x28>)
 8001124:	f00a f973 	bl	800b40e <memcpy>
    else return;
    Current_Callback_flag = 1;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <Current_IRQ+0x2c>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e000      	b.n	8001132 <Current_IRQ+0x22>
    else return;
 8001130:	bf00      	nop
}
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000784 	.word	0x20000784
 800113c:	20000774 	.word	0x20000774

08001140 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8001148:	220c      	movs	r2, #12
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <Voltage_Temp_IRQ+0x1c>)
 800114e:	f00a f95e 	bl	800b40e <memcpy>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000794 	.word	0x20000794

08001160 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 8001168:	221c      	movs	r2, #28
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <Encoders_IRQ+0x1c>)
 800116e:	f00a f94e 	bl	800b40e <memcpy>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200007a0 	.word	0x200007a0

08001180 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 8001188:	220c      	movs	r2, #12
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <Can_RX_Status_IRQ+0x1c>)
 800118e:	f00a f93e 	bl	800b40e <memcpy>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000980 	.word	0x20000980

080011a0 <check_value>:
	.max_warning = NAN,
	.min_warning = NAN,
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b2:	ed97 7a00 	vldr	s14, [r7]
 80011b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	da09      	bge.n	80011d4 <check_value+0x34>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c6:	ed97 7a00 	vldr	s14, [r7]
 80011ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	d801      	bhi.n	80011d8 <check_value+0x38>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e016      	b.n	8001206 <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	edd3 7a02 	vldr	s15, [r3, #8]
 80011de:	ed97 7a00 	vldr	s14, [r7]
 80011e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	da09      	bge.n	8001200 <check_value+0x60>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ed97 7a00 	vldr	s14, [r7]
 80011f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d801      	bhi.n	8001204 <check_value+0x64>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <check_value+0x66>
	return LIMIT_OK;																	//OK
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <sqrtI>:

uint32_t sqrtI(uint32_t sqrtArg)
{
 8001212:	b480      	push	{r7}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
uint32_t answer, x;
uint32_t temp;
if ( sqrtArg == 0 ) return 0; // undefined result
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <sqrtI+0x12>
 8001220:	2300      	movs	r3, #0
 8001222:	e027      	b.n	8001274 <sqrtI+0x62>
if ( sqrtArg == 1 ) return 1; // identity
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <sqrtI+0x1c>
 800122a:	2301      	movs	r3, #1
 800122c:	e022      	b.n	8001274 <sqrtI+0x62>
answer = 0; // integer square root
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 8001232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	e016      	b.n	8001268 <sqrtI+0x56>
{ // 16 bit shift
answer |= x; // possible bit in root
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
temp = answer * answer; // fast unsigned multiply
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fb03 f303 	mul.w	r3, r3, r3
 8001248:	60fb      	str	r3, [r7, #12]
if (temp == sqrtArg) break; // exact, found it
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d00e      	beq.n	8001270 <sqrtI+0x5e>
if (temp > sqrtArg) answer ^= x; // too large, reverse bit
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	d903      	bls.n	8001262 <sqrtI+0x50>
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4053      	eors	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	085b      	lsrs	r3, r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e5      	bne.n	800123a <sqrtI+0x28>
 800126e:	e000      	b.n	8001272 <sqrtI+0x60>
if (temp == sqrtArg) break; // exact, found it
 8001270:	bf00      	nop
}
return answer; // approximate root
 8001272:	697b      	ldr	r3, [r7, #20]
}
 8001274:	4618      	mov	r0, r3
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <atan2_approximation2>:
#define PI_FLOAT     3.14159265f
#define PIBY2_FLOAT  1.5707963f
// |error| < 0.005
float atan2_approximation2( float y, float x )
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a01 	vstr	s0, [r7, #4]
 800128a:	edc7 0a00 	vstr	s1, [r7]
	if ( x == 0.0f )
 800128e:	edd7 7a00 	vldr	s15, [r7]
 8001292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d116      	bne.n	80012ca <atan2_approximation2+0x4a>
	{
		if ( y > 0.0f ) return PIBY2_FLOAT;
 800129c:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	dd02      	ble.n	80012b0 <atan2_approximation2+0x30>
 80012aa:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80013a4 <atan2_approximation2+0x124>
 80012ae:	e071      	b.n	8001394 <atan2_approximation2+0x114>
		if ( y == 0.0f ) return 0.0f;
 80012b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d102      	bne.n	80012c4 <atan2_approximation2+0x44>
 80012be:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80013a8 <atan2_approximation2+0x128>
 80012c2:	e067      	b.n	8001394 <atan2_approximation2+0x114>
		return -PIBY2_FLOAT;
 80012c4:	eddf 7a39 	vldr	s15, [pc, #228]	; 80013ac <atan2_approximation2+0x12c>
 80012c8:	e064      	b.n	8001394 <atan2_approximation2+0x114>
	}
	float atan;
	float z = y/x;
 80012ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80012ce:	ed97 7a00 	vldr	s14, [r7]
 80012d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d6:	edc7 7a02 	vstr	s15, [r7, #8]
	if ( fabs( z ) < 1.0f )
 80012da:	edd7 7a02 	vldr	s15, [r7, #8]
 80012de:	eef0 7ae7 	vabs.f32	s15, s15
 80012e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	d52f      	bpl.n	8001350 <atan2_approximation2+0xd0>
	{
		atan = z/(1.0f + 0.28f*z*z);
 80012f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80013b0 <atan2_approximation2+0x130>
 80012f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800130c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001314:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( x < 0.0f )
 8001318:	edd7 7a00 	vldr	s15, [r7]
 800131c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	d534      	bpl.n	8001390 <atan2_approximation2+0x110>
		{
			if ( y < 0.0f ) return atan - PI_FLOAT;
 8001326:	edd7 7a01 	vldr	s15, [r7, #4]
 800132a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d506      	bpl.n	8001342 <atan2_approximation2+0xc2>
 8001334:	edd7 7a03 	vldr	s15, [r7, #12]
 8001338:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80013b4 <atan2_approximation2+0x134>
 800133c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001340:	e028      	b.n	8001394 <atan2_approximation2+0x114>
			return atan + PI_FLOAT;
 8001342:	edd7 7a03 	vldr	s15, [r7, #12]
 8001346:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80013b4 <atan2_approximation2+0x134>
 800134a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800134e:	e021      	b.n	8001394 <atan2_approximation2+0x114>
		}
	}
	else
	{
		atan = PIBY2_FLOAT - z/(z*z + 0.28f);
 8001350:	edd7 7a02 	vldr	s15, [r7, #8]
 8001354:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001358:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013b0 <atan2_approximation2+0x130>
 800135c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001360:	edd7 6a02 	vldr	s13, [r7, #8]
 8001364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001368:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80013a4 <atan2_approximation2+0x124>
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( y < 0.0f ) return atan - PI_FLOAT;
 8001374:	edd7 7a01 	vldr	s15, [r7, #4]
 8001378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	d506      	bpl.n	8001390 <atan2_approximation2+0x110>
 8001382:	edd7 7a03 	vldr	s15, [r7, #12]
 8001386:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80013b4 <atan2_approximation2+0x134>
 800138a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800138e:	e001      	b.n	8001394 <atan2_approximation2+0x114>
	}
	return atan;
 8001390:	edd7 7a03 	vldr	s15, [r7, #12]
}
 8001394:	eeb0 0a67 	vmov.f32	s0, s15
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	3fc90fda 	.word	0x3fc90fda
 80013a8:	00000000 	.word	0x00000000
 80013ac:	bfc90fda 	.word	0xbfc90fda
 80013b0:	3e8f5c29 	.word	0x3e8f5c29
 80013b4:	40490fdb 	.word	0x40490fdb

080013b8 <BLDC_main>:

//------------------------MAIN-------------------------
Flash *storage;
void BLDC_main(void){
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80013be:	af0a      	add	r7, sp, #40	; 0x28
	Flash_init();
 80013c0:	f002 f958 	bl	8003674 <Flash_init>
	storage = Flash_get_values();
 80013c4:	f002 f98e 	bl	80036e4 <Flash_get_values>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4ac2      	ldr	r2, [pc, #776]	; (80016d4 <BLDC_main+0x31c>)
 80013cc:	6013      	str	r3, [r2, #0]


	PrintServerPrintf("\n\r%s %d 0x%x\n\r",storage->ID, (uint32_t)storage->Current_limit);
 80013ce:	4bc1      	ldr	r3, [pc, #772]	; (80016d4 <BLDC_main+0x31c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4bbf      	ldr	r3, [pc, #764]	; (80016d4 <BLDC_main+0x31c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013da:	461a      	mov	r2, r3
 80013dc:	48be      	ldr	r0, [pc, #760]	; (80016d8 <BLDC_main+0x320>)
 80013de:	f002 fbe9 	bl	8003bb4 <PrintServerPrintf>

//	while(1);

	HAL_Delay(100);
 80013e2:	2064      	movs	r0, #100	; 0x64
 80013e4:	f004 f920 	bl	8005628 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 80013e8:	2128      	movs	r1, #40	; 0x28
 80013ea:	48bc      	ldr	r0, [pc, #752]	; (80016dc <BLDC_main+0x324>)
 80013ec:	f002 faf0 	bl	80039d0 <SetSampleTime>
	SetTunings(&Current_PID, storage->Current_kp, storage->Current_ki, storage->Current_kd, 1); //alva
 80013f0:	4bb8      	ldr	r3, [pc, #736]	; (80016d4 <BLDC_main+0x31c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80013f8:	4bb6      	ldr	r3, [pc, #728]	; (80016d4 <BLDC_main+0x31c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001400:	4bb4      	ldr	r3, [pc, #720]	; (80016d4 <BLDC_main+0x31c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001408:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800140c:	eeb0 1a66 	vmov.f32	s2, s13
 8001410:	eef0 0a47 	vmov.f32	s1, s14
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	48b0      	ldr	r0, [pc, #704]	; (80016dc <BLDC_main+0x324>)
 800141a:	f002 fa1f 	bl	800385c <SetTunings>
//	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
	SetOutputLimits(&Current_PID, -1500, 1500);
 800141e:	eddf 0ab0 	vldr	s1, [pc, #704]	; 80016e0 <BLDC_main+0x328>
 8001422:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80016e4 <BLDC_main+0x32c>
 8001426:	48ad      	ldr	r0, [pc, #692]	; (80016dc <BLDC_main+0x324>)
 8001428:	f002 fb06 	bl	8003a38 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 800142c:	2100      	movs	r1, #0
 800142e:	48ab      	ldr	r0, [pc, #684]	; (80016dc <BLDC_main+0x324>)
 8001430:	f002 fbb2 	bl	8003b98 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 8001434:	2101      	movs	r1, #1
 8001436:	48a9      	ldr	r0, [pc, #676]	; (80016dc <BLDC_main+0x324>)
 8001438:	f002 fb5a 	bl	8003af0 <SetMode>
	Initialize(&Current_PID);
 800143c:	48a7      	ldr	r0, [pc, #668]	; (80016dc <BLDC_main+0x324>)
 800143e:	f002 fb79 	bl	8003b34 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 8001442:	2164      	movs	r1, #100	; 0x64
 8001444:	48a8      	ldr	r0, [pc, #672]	; (80016e8 <BLDC_main+0x330>)
 8001446:	f002 fac3 	bl	80039d0 <SetSampleTime>
	SetTunings(&Velocity_PID, storage->Velocity_kp, storage->Velocity_ki, storage->Velocity_kd, 1);
 800144a:	4ba2      	ldr	r3, [pc, #648]	; (80016d4 <BLDC_main+0x31c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001452:	4ba0      	ldr	r3, [pc, #640]	; (80016d4 <BLDC_main+0x31c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800145a:	4b9e      	ldr	r3, [pc, #632]	; (80016d4 <BLDC_main+0x31c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001462:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001466:	eeb0 1a66 	vmov.f32	s2, s13
 800146a:	eef0 0a47 	vmov.f32	s1, s14
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	489d      	ldr	r0, [pc, #628]	; (80016e8 <BLDC_main+0x330>)
 8001474:	f002 f9f2 	bl	800385c <SetTunings>
	SetOutputLimits(&Velocity_PID, -(storage->Current_limit*1000.0f), (storage->Current_limit*1000.0f));
 8001478:	4b96      	ldr	r3, [pc, #600]	; (80016d4 <BLDC_main+0x31c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001486:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80016ec <BLDC_main+0x334>
 800148a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148e:	eeb1 7a67 	vneg.f32	s14, s15
 8001492:	4b90      	ldr	r3, [pc, #576]	; (80016d4 <BLDC_main+0x31c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a0:	eddf 6a92 	vldr	s13, [pc, #584]	; 80016ec <BLDC_main+0x334>
 80014a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014a8:	eef0 0a67 	vmov.f32	s1, s15
 80014ac:	eeb0 0a47 	vmov.f32	s0, s14
 80014b0:	488d      	ldr	r0, [pc, #564]	; (80016e8 <BLDC_main+0x330>)
 80014b2:	f002 fac1 	bl	8003a38 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80014b6:	2100      	movs	r1, #0
 80014b8:	488b      	ldr	r0, [pc, #556]	; (80016e8 <BLDC_main+0x330>)
 80014ba:	f002 fb6d 	bl	8003b98 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80014be:	2101      	movs	r1, #1
 80014c0:	4889      	ldr	r0, [pc, #548]	; (80016e8 <BLDC_main+0x330>)
 80014c2:	f002 fb15 	bl	8003af0 <SetMode>
	Initialize(&Velocity_PID);
 80014c6:	4888      	ldr	r0, [pc, #544]	; (80016e8 <BLDC_main+0x330>)
 80014c8:	f002 fb34 	bl	8003b34 <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80014cc:	2164      	movs	r1, #100	; 0x64
 80014ce:	4888      	ldr	r0, [pc, #544]	; (80016f0 <BLDC_main+0x338>)
 80014d0:	f002 fa7e 	bl	80039d0 <SetSampleTime>
	SetTunings(&Angle_PID, storage->Angle_kp, storage->Angle_ki, storage->Angle_kd, 1);
 80014d4:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <BLDC_main+0x31c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80014dc:	4b7d      	ldr	r3, [pc, #500]	; (80016d4 <BLDC_main+0x31c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014e4:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <BLDC_main+0x31c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80014ec:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80014f0:	eeb0 1a66 	vmov.f32	s2, s13
 80014f4:	eef0 0a47 	vmov.f32	s1, s14
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	487c      	ldr	r0, [pc, #496]	; (80016f0 <BLDC_main+0x338>)
 80014fe:	f002 f9ad 	bl	800385c <SetTunings>
	SetOutputLimits(&Angle_PID, -(storage->Velocity_limit*1000.0f), (storage->Velocity_limit*1000.0f));
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <BLDC_main+0x31c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001510:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80016ec <BLDC_main+0x334>
 8001514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001518:	eeb1 7a67 	vneg.f32	s14, s15
 800151c:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <BLDC_main+0x31c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152a:	eddf 6a70 	vldr	s13, [pc, #448]	; 80016ec <BLDC_main+0x334>
 800152e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001532:	eef0 0a67 	vmov.f32	s1, s15
 8001536:	eeb0 0a47 	vmov.f32	s0, s14
 800153a:	486d      	ldr	r0, [pc, #436]	; (80016f0 <BLDC_main+0x338>)
 800153c:	f002 fa7c 	bl	8003a38 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8001540:	2100      	movs	r1, #0
 8001542:	486b      	ldr	r0, [pc, #428]	; (80016f0 <BLDC_main+0x338>)
 8001544:	f002 fb28 	bl	8003b98 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8001548:	2101      	movs	r1, #1
 800154a:	4869      	ldr	r0, [pc, #420]	; (80016f0 <BLDC_main+0x338>)
 800154c:	f002 fad0 	bl	8003af0 <SetMode>
	Initialize(&Angle_PID);
 8001550:	4867      	ldr	r0, [pc, #412]	; (80016f0 <BLDC_main+0x338>)
 8001552:	f002 faef 	bl	8003b34 <Initialize>

	SetSampleTime(&Current_PID_offset, 40); //100s = 10kHz
 8001556:	2128      	movs	r1, #40	; 0x28
 8001558:	4866      	ldr	r0, [pc, #408]	; (80016f4 <BLDC_main+0x33c>)
 800155a:	f002 fa39 	bl	80039d0 <SetSampleTime>
	SetTunings(&Current_PID_offset, storage->Current_offset_kp, storage->Current_offset_ki, storage->Current_offset_kd, 1);
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <BLDC_main+0x31c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <BLDC_main+0x31c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <BLDC_main+0x31c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001576:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800157a:	eeb0 1a66 	vmov.f32	s2, s13
 800157e:	eef0 0a47 	vmov.f32	s1, s14
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	485b      	ldr	r0, [pc, #364]	; (80016f4 <BLDC_main+0x33c>)
 8001588:	f002 f968 	bl	800385c <SetTunings>
	SetOutputLimits(&Current_PID_offset, -1500, 1500);
 800158c:	eddf 0a54 	vldr	s1, [pc, #336]	; 80016e0 <BLDC_main+0x328>
 8001590:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80016e4 <BLDC_main+0x32c>
 8001594:	4857      	ldr	r0, [pc, #348]	; (80016f4 <BLDC_main+0x33c>)
 8001596:	f002 fa4f 	bl	8003a38 <SetOutputLimits>
	SetControllerDirection(&Current_PID_offset, DIRECT);
 800159a:	2100      	movs	r1, #0
 800159c:	4855      	ldr	r0, [pc, #340]	; (80016f4 <BLDC_main+0x33c>)
 800159e:	f002 fafb 	bl	8003b98 <SetControllerDirection>
	SetMode(&Current_PID_offset,  AUTOMATIC);
 80015a2:	2101      	movs	r1, #1
 80015a4:	4853      	ldr	r0, [pc, #332]	; (80016f4 <BLDC_main+0x33c>)
 80015a6:	f002 faa3 	bl	8003af0 <SetMode>
	Initialize(&Current_PID_offset);
 80015aa:	4852      	ldr	r0, [pc, #328]	; (80016f4 <BLDC_main+0x33c>)
 80015ac:	f002 fac2 	bl	8003b34 <Initialize>


	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 80015b0:	4851      	ldr	r0, [pc, #324]	; (80016f8 <BLDC_main+0x340>)
 80015b2:	f001 fe9f 	bl	80032f4 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 80015b6:	4851      	ldr	r0, [pc, #324]	; (80016fc <BLDC_main+0x344>)
 80015b8:	f002 fbec 	bl	8003d94 <current_init>

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 80015bc:	4850      	ldr	r0, [pc, #320]	; (8001700 <BLDC_main+0x348>)
 80015be:	f002 fc0f 	bl	8003de0 <voltage_temperature_init>
	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80015c2:	4a50      	ldr	r2, [pc, #320]	; (8001704 <BLDC_main+0x34c>)
 80015c4:	2136      	movs	r1, #54	; 0x36
 80015c6:	4850      	ldr	r0, [pc, #320]	; (8001708 <BLDC_main+0x350>)
 80015c8:	f002 fee8 	bl	800439c <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 80015cc:	484e      	ldr	r0, [pc, #312]	; (8001708 <BLDC_main+0x350>)
 80015ce:	f002 fec9 	bl	8004364 <FDCAN_Start>

	//--------------setup PWM------------------


	electrical_offset = storage->electrical_offset;
 80015d2:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <BLDC_main+0x31c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <BLDC_main+0x354>)
 80015da:	6013      	str	r3, [r2, #0]
	PHASE_ORDER = storage->PHASE_ORDER;
 80015dc:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <BLDC_main+0x31c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80015e4:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <BLDC_main+0x358>)
 80015e6:	701a      	strb	r2, [r3, #0]
	uint16_t mech_offset = storage->mech_offset;//storage->mech_offset;
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <BLDC_main+0x31c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 34a8 	ldrh.w	r3, [r3, #1192]	; 0x4a8
 80015f0:	f8a7 33b6 	strh.w	r3, [r7, #950]	; 0x3b6
	memcpy(error_filt, storage->error_filt,sizeof(error_filt));
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <BLDC_main+0x31c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3368      	adds	r3, #104	; 0x68
 80015fa:	f44f 6288 	mov.w	r2, #1088	; 0x440
 80015fe:	4619      	mov	r1, r3
 8001600:	4844      	ldr	r0, [pc, #272]	; (8001714 <BLDC_main+0x35c>)
 8001602:	f009 ff04 	bl	800b40e <memcpy>

	Current IRQ_Current_BUFF = {0};
 8001606:	f507 7361 	add.w	r3, r7, #900	; 0x384
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 8001614:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
	Encoders IRQ_Encoders_BUFF = {0};
 8001620:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	619a      	str	r2, [r3, #24]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 8001634:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]

	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7

	float velocity_temp[200] = {0};
 8001646:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800164a:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800164e:	4618      	mov	r0, r3
 8001650:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001654:	461a      	mov	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	f009 fe5a 	bl	800b310 <memset>
	uint32_t last_pos = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	uint8_t velocity_index = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
	float velocity = 0;
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

	int32_t position_overflow = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

	uint32_t test = 1499;
 8001676:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800167a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800167e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001682:	601a      	str	r2, [r3, #0]
	CTRL_init_PWM(&test);
 8001684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fe39 	bl	8002300 <CTRL_init_PWM>

	#ifdef CALIBRATE_ON_STARTUP
	Status = BLDC_CALIBRATING_ENCODER;
 800168e:	2302      	movs	r3, #2
 8001690:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 8001694:	bf00      	nop
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <BLDC_main+0x360>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0fb      	beq.n	8001696 <BLDC_main+0x2de>

		Current_Callback_flag = 0;
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <BLDC_main+0x360>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		//HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <BLDC_main+0x364>)
 80016a6:	f507 7461 	add.w	r4, r7, #900	; 0x384
 80016aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <BLDC_main+0x368>)
 80016b2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80016b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		#ifndef CALIBRATION
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <BLDC_main+0x36c>)
 80016be:	f507 7457 	add.w	r4, r7, #860	; 0x35c
 80016c2:	461d      	mov	r5, r3
 80016c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016d0:	e02a      	b.n	8001728 <BLDC_main+0x370>
 80016d2:	bf00      	nop
 80016d4:	20000acc 	.word	0x20000acc
 80016d8:	0800f538 	.word	0x0800f538
 80016dc:	20000a0c 	.word	0x20000a0c
 80016e0:	44bb8000 	.word	0x44bb8000
 80016e4:	c4bb8000 	.word	0xc4bb8000
 80016e8:	20000a4c 	.word	0x20000a4c
 80016ec:	447a0000 	.word	0x447a0000
 80016f0:	20000a8c 	.word	0x20000a8c
 80016f4:	200009cc 	.word	0x200009cc
 80016f8:	08001161 	.word	0x08001161
 80016fc:	08001111 	.word	0x08001111
 8001700:	08001141 	.word	0x08001141
 8001704:	08001181 	.word	0x08001181
 8001708:	20001a38 	.word	0x20001a38
 800170c:	20000f18 	.word	0x20000f18
 8001710:	20000f14 	.word	0x20000f14
 8001714:	20000ad4 	.word	0x20000ad4
 8001718:	20000774 	.word	0x20000774
 800171c:	20000784 	.word	0x20000784
 8001720:	20000794 	.word	0x20000794
 8001724:	200007a0 	.word	0x200007a0
		#endif
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8001728:	4ac7      	ldr	r2, [pc, #796]	; (8001a48 <BLDC_main+0x690>)
 800172a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800172e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001730:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//		IRQ_Current_BUFF.Current_DC -= current_offset;

//		IRQ_Current_BUFF.Current_DC = calculate_vector_sum((float)IRQ_Current_BUFF.Current_M1, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M3); //

		//start calibration
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8001734:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <BLDC_main+0x394>
 800173c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001740:	2b04      	cmp	r3, #4
 8001742:	d103      	bne.n	800174c <BLDC_main+0x394>
 8001744:	2302      	movs	r3, #2
 8001746:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
 800174a:	e046      	b.n	80017da <BLDC_main+0x422>

		//reset errors
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 800174c:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <BLDC_main+0x3ac>
 8001754:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001758:	2b05      	cmp	r3, #5
 800175a:	d103      	bne.n	8001764 <BLDC_main+0x3ac>
 800175c:	4bbb      	ldr	r3, [pc, #748]	; (8001a4c <BLDC_main+0x694>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e03a      	b.n	80017da <BLDC_main+0x422>

		//start motor when not running
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 8001764:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001768:	2b00      	cmp	r3, #0
 800176a:	d113      	bne.n	8001794 <BLDC_main+0x3dc>
 800176c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001770:	2b02      	cmp	r3, #2
 8001772:	d10f      	bne.n	8001794 <BLDC_main+0x3dc>
			Status = BLDC_RUNNING;
 8001774:	2303      	movs	r3, #3
 8001776:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
			SetMode(&Current_PID,  AUTOMATIC);
 800177a:	2101      	movs	r1, #1
 800177c:	48b4      	ldr	r0, [pc, #720]	; (8001a50 <BLDC_main+0x698>)
 800177e:	f002 f9b7 	bl	8003af0 <SetMode>
			SetMode(&Velocity_PID,  AUTOMATIC);
 8001782:	2101      	movs	r1, #1
 8001784:	48b3      	ldr	r0, [pc, #716]	; (8001a54 <BLDC_main+0x69c>)
 8001786:	f002 f9b3 	bl	8003af0 <SetMode>
			SetMode(&Angle_PID,  AUTOMATIC);
 800178a:	2101      	movs	r1, #1
 800178c:	48b2      	ldr	r0, [pc, #712]	; (8001a58 <BLDC_main+0x6a0>)
 800178e:	f002 f9af 	bl	8003af0 <SetMode>
 8001792:	e022      	b.n	80017da <BLDC_main+0x422>
		}

		//stop motor when running
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 8001794:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001798:	2b03      	cmp	r3, #3
 800179a:	d113      	bne.n	80017c4 <BLDC_main+0x40c>
 800179c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10f      	bne.n	80017c4 <BLDC_main+0x40c>
			Status = BLDC_STOPPED_WITH_BREAK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
			SetMode(&Current_PID,  MANUAL);
 80017aa:	2100      	movs	r1, #0
 80017ac:	48a8      	ldr	r0, [pc, #672]	; (8001a50 <BLDC_main+0x698>)
 80017ae:	f002 f99f 	bl	8003af0 <SetMode>
			SetMode(&Velocity_PID,  MANUAL);
 80017b2:	2100      	movs	r1, #0
 80017b4:	48a7      	ldr	r0, [pc, #668]	; (8001a54 <BLDC_main+0x69c>)
 80017b6:	f002 f99b 	bl	8003af0 <SetMode>
			SetMode(&Angle_PID,  MANUAL);
 80017ba:	2100      	movs	r1, #0
 80017bc:	48a6      	ldr	r0, [pc, #664]	; (8001a58 <BLDC_main+0x6a0>)
 80017be:	f002 f997 	bl	8003af0 <SetMode>
 80017c2:	e00a      	b.n	80017da <BLDC_main+0x422>
		}
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 80017c4:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d106      	bne.n	80017da <BLDC_main+0x422>
 80017cc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d102      	bne.n	80017da <BLDC_main+0x422>
 80017d4:	2301      	movs	r3, #1
 80017d6:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7

		//time keepers
		timing_CAN_feedback++;
 80017da:	4ba0      	ldr	r3, [pc, #640]	; (8001a5c <BLDC_main+0x6a4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a9e      	ldr	r2, [pc, #632]	; (8001a5c <BLDC_main+0x6a4>)
 80017e2:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 80017e4:	4b9e      	ldr	r3, [pc, #632]	; (8001a60 <BLDC_main+0x6a8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a9d      	ldr	r2, [pc, #628]	; (8001a60 <BLDC_main+0x6a8>)
 80017ec:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

//		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
//		warning |= (Limit_callback&1)      << 0; //warning
//		error   |= ((Limit_callback&2)>>1) << 0; //error

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 80017f4:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001800:	eeb0 0a67 	vmov.f32	s0, s15
 8001804:	4897      	ldr	r0, [pc, #604]	; (8001a64 <BLDC_main+0x6ac>)
 8001806:	f7ff fccb 	bl	80011a0 <check_value>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 33b5 	strb.w	r3, [r7, #949]	; 0x3b5
		warning |= (Limit_callback&1)      << 1; //warning
 8001810:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 800181e:	4313      	orrs	r3, r2
 8001820:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 1; //error
 8001824:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 8001828:	f003 0202 	and.w	r2, r3, #2
 800182c:	4b87      	ldr	r3, [pc, #540]	; (8001a4c <BLDC_main+0x694>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4313      	orrs	r3, r2
 8001832:	4a86      	ldr	r2, [pc, #536]	; (8001a4c <BLDC_main+0x694>)
 8001834:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 8001836:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	4888      	ldr	r0, [pc, #544]	; (8001a68 <BLDC_main+0x6b0>)
 8001848:	f7ff fcaa 	bl	80011a0 <check_value>
 800184c:	4603      	mov	r3, r0
 800184e:	f887 33b5 	strb.w	r3, [r7, #949]	; 0x3b5
		warning |= (Limit_callback&1)      << 2; //warning
 8001852:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8001860:	4313      	orrs	r3, r2
 8001862:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 2; //error
 8001866:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 800186a:	105b      	asrs	r3, r3, #1
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	f003 0204 	and.w	r2, r3, #4
 8001872:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <BLDC_main+0x694>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	4a74      	ldr	r2, [pc, #464]	; (8001a4c <BLDC_main+0x694>)
 800187a:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 800187c:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	4877      	ldr	r0, [pc, #476]	; (8001a6c <BLDC_main+0x6b4>)
 800188e:	f7ff fc87 	bl	80011a0 <check_value>
 8001892:	4603      	mov	r3, r0
 8001894:	f887 33b5 	strb.w	r3, [r7, #949]	; 0x3b5
		warning |= (Limit_callback&1)      << 3; //warning
 8001898:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 3; //error
 80018ac:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 80018b0:	105b      	asrs	r3, r3, #1
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	f003 0208 	and.w	r2, r3, #8
 80018b8:	4b64      	ldr	r3, [pc, #400]	; (8001a4c <BLDC_main+0x694>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4313      	orrs	r3, r2
 80018be:	4a63      	ldr	r2, [pc, #396]	; (8001a4c <BLDC_main+0x694>)
 80018c0:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 80018c2:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	4867      	ldr	r0, [pc, #412]	; (8001a70 <BLDC_main+0x6b8>)
 80018d4:	f7ff fc64 	bl	80011a0 <check_value>
 80018d8:	4603      	mov	r3, r0
 80018da:	f887 33b5 	strb.w	r3, [r7, #949]	; 0x3b5
		warning |= (Limit_callback&1)      << 4; //warning
 80018de:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80018ec:	4313      	orrs	r3, r2
 80018ee:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 4; //error
 80018f2:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 80018f6:	105b      	asrs	r3, r3, #1
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	f003 0210 	and.w	r2, r3, #16
 80018fe:	4b53      	ldr	r3, [pc, #332]	; (8001a4c <BLDC_main+0x694>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	4a51      	ldr	r2, [pc, #324]	; (8001a4c <BLDC_main+0x694>)
 8001906:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 8001908:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001914:	eeb0 0a67 	vmov.f32	s0, s15
 8001918:	4856      	ldr	r0, [pc, #344]	; (8001a74 <BLDC_main+0x6bc>)
 800191a:	f7ff fc41 	bl	80011a0 <check_value>
 800191e:	4603      	mov	r3, r0
 8001920:	f887 33b5 	strb.w	r3, [r7, #949]	; 0x3b5
		warning |= (Limit_callback&1)      << 5; //warning
 8001924:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 8001928:	015b      	lsls	r3, r3, #5
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8001932:	4313      	orrs	r3, r2
 8001934:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 5; //error
 8001938:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 800193c:	105b      	asrs	r3, r3, #1
 800193e:	015b      	lsls	r3, r3, #5
 8001940:	f003 0220 	and.w	r2, r3, #32
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <BLDC_main+0x694>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4313      	orrs	r3, r2
 800194a:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <BLDC_main+0x694>)
 800194c:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 800194e:	f9b7 337e 	ldrsh.w	r3, [r7, #894]	; 0x37e
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	4846      	ldr	r0, [pc, #280]	; (8001a78 <BLDC_main+0x6c0>)
 8001960:	f7ff fc1e 	bl	80011a0 <check_value>
 8001964:	4603      	mov	r3, r0
 8001966:	f887 33b5 	strb.w	r3, [r7, #949]	; 0x3b5
		warning |= (Limit_callback&1)      << 6; //warning
 800196a:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 800196e:	019b      	lsls	r3, r3, #6
 8001970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001974:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8001978:	4313      	orrs	r3, r2
 800197a:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 6; //error
 800197e:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 8001982:	105b      	asrs	r3, r3, #1
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <BLDC_main+0x694>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	4a2e      	ldr	r2, [pc, #184]	; (8001a4c <BLDC_main+0x694>)
 8001992:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 8001994:	f9b7 3380 	ldrsh.w	r3, [r7, #896]	; 0x380
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	4834      	ldr	r0, [pc, #208]	; (8001a78 <BLDC_main+0x6c0>)
 80019a6:	f7ff fbfb 	bl	80011a0 <check_value>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f887 33b5 	strb.w	r3, [r7, #949]	; 0x3b5
		warning |= (Limit_callback&1)      << 7; //warning
 80019b0:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 80019b4:	01db      	lsls	r3, r3, #7
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80019bc:	4313      	orrs	r3, r2
 80019be:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 7; //error
 80019c2:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 80019c6:	105b      	asrs	r3, r3, #1
 80019c8:	01db      	lsls	r3, r3, #7
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <BLDC_main+0x694>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <BLDC_main+0x694>)
 80019d4:	6013      	str	r3, [r2, #0]

		if (Angle_PID.Input < (IRQ_STATUS_BUFF.setpoint - 20000) || Angle_PID.Input > (IRQ_STATUS_BUFF.setpoint + 20000)) warning |= (1 << 8); //warning
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <BLDC_main+0x6a0>)
 80019d8:	ed93 7a00 	vldr	s14, [r3]
 80019dc:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80019e0:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80019e4:	3b20      	subs	r3, #32
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	d410      	bmi.n	8001a1a <BLDC_main+0x662>
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <BLDC_main+0x6a0>)
 80019fa:	ed93 7a00 	vldr	s14, [r3]
 80019fe:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001a02:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8001a06:	3320      	adds	r3, #32
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	dd05      	ble.n	8001a26 <BLDC_main+0x66e>
 8001a1a:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

		//-------------------RUN FIR FILTER---------------------
//		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);

		//----------------------position-----------------
		if (last_pos > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8001a26:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <BLDC_main+0x6c4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d929      	bls.n	8001a84 <BLDC_main+0x6cc>
 8001a30:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <BLDC_main+0x6c8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d824      	bhi.n	8001a84 <BLDC_main+0x6cc>
 8001a3a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8001a44:	e02d      	b.n	8001aa2 <BLDC_main+0x6ea>
 8001a46:	bf00      	nop
 8001a48:	20000980 	.word	0x20000980
 8001a4c:	20000780 	.word	0x20000780
 8001a50:	20000a0c 	.word	0x20000a0c
 8001a54:	20000a4c 	.word	0x20000a4c
 8001a58:	20000a8c 	.word	0x20000a8c
 8001a5c:	20000778 	.word	0x20000778
 8001a60:	2000077c 	.word	0x2000077c
 8001a64:	20000028 	.word	0x20000028
 8001a68:	20000038 	.word	0x20000038
 8001a6c:	20000078 	.word	0x20000078
 8001a70:	20000058 	.word	0x20000058
 8001a74:	20000048 	.word	0x20000048
 8001a78:	20000068 	.word	0x20000068
 8001a7c:	00041eb0 	.word	0x00041eb0
 8001a80:	00015f8f 	.word	0x00015f8f
		else if (last_pos < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8001a84:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001a88:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <BLDC_main+0x744>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d809      	bhi.n	8001aa2 <BLDC_main+0x6ea>
 8001a8e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001a92:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <BLDC_main+0x748>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d904      	bls.n	8001aa2 <BLDC_main+0x6ea>
 8001a98:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

		//-------------------calculate velocity------------------
		velocity_temp[velocity_index] = (IRQ_Encoders_BUFF.Encoder1_pos - last_pos);
 8001aa2:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8001aa6:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001aaa:	1ad2      	subs	r2, r2, r3
 8001aac:	f897 33cf 	ldrb.w	r3, [r7, #975]	; 0x3cf
 8001ab0:	ee07 2a90 	vmov	s15, r2
 8001ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab8:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8001abc:	f5a2 726a 	sub.w	r2, r2, #936	; 0x3a8
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
		last_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8001ac8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001acc:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
		velocity_index++;
 8001ad0:	f897 33cf 	ldrb.w	r3, [r7, #975]	; 0x3cf
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
		velocity_index = velocity_index % 200;
 8001ada:	f897 33cf 	ldrb.w	r3, [r7, #975]	; 0x3cf
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <BLDC_main+0x74c>)
 8001ae0:	fba2 1203 	umull	r1, r2, r2, r3
 8001ae4:	0992      	lsrs	r2, r2, #6
 8001ae6:	21c8      	movs	r1, #200	; 0xc8
 8001ae8:	fb01 f202 	mul.w	r2, r1, r2
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
		for(int i = 0; i > 200; i++){
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8001af8:	e01b      	b.n	8001b32 <BLDC_main+0x77a>
 8001afa:	bf00      	nop
 8001afc:	00015f8f 	.word	0x00015f8f
 8001b00:	00041eb0 	.word	0x00041eb0
 8001b04:	51eb851f 	.word	0x51eb851f
			velocity += velocity_temp[i];
 8001b08:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001b0c:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 8001b10:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ed97 7af2 	vldr	s14, [r7, #968]	; 0x3c8
 8001b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b24:	edc7 7af2 	vstr	s15, [r7, #968]	; 0x3c8
		for(int i = 0; i > 200; i++){
 8001b28:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8001b32:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8001b36:	2bc8      	cmp	r3, #200	; 0xc8
 8001b38:	dce6      	bgt.n	8001b08 <BLDC_main+0x750>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 8001b3a:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001b3e:	4ad4      	ldr	r2, [pc, #848]	; (8001e90 <BLDC_main+0xad8>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4ad2      	ldr	r2, [pc, #840]	; (8001e94 <BLDC_main+0xadc>)
 8001b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b4e:	441a      	add	r2, r3
 8001b50:	1211      	asrs	r1, r2, #8
 8001b52:	17da      	asrs	r2, r3, #31
 8001b54:	1a8a      	subs	r2, r1, r2
 8001b56:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b5a:	fb01 f202 	mul.w	r2, r1, r2
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
		uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 8001b64:	f9b7 23b2 	ldrsh.w	r2, [r7, #946]	; 0x3b2
 8001b68:	f8b7 33b6 	ldrh.w	r3, [r7, #950]	; 0x3b6
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b72:	4ac8      	ldr	r2, [pc, #800]	; (8001e94 <BLDC_main+0xadc>)
 8001b74:	fb82 1203 	smull	r1, r2, r2, r3
 8001b78:	441a      	add	r2, r3
 8001b7a:	1211      	asrs	r1, r2, #8
 8001b7c:	17da      	asrs	r2, r3, #31
 8001b7e:	1a8a      	subs	r2, r1, r2
 8001b80:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b84:	fb01 f202 	mul.w	r2, r1, r2
 8001b88:	1a9a      	subs	r2, r3, r2
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	4413      	add	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4ac0      	ldr	r2, [pc, #768]	; (8001e94 <BLDC_main+0xadc>)
 8001b94:	fb82 1203 	smull	r1, r2, r2, r3
 8001b98:	441a      	add	r2, r3
 8001b9a:	1212      	asrs	r2, r2, #8
 8001b9c:	17db      	asrs	r3, r3, #31
 8001b9e:	1ad2      	subs	r2, r2, r3
 8001ba0:	4bbd      	ldr	r3, [pc, #756]	; (8001e98 <BLDC_main+0xae0>)
 8001ba2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ba6:	11d9      	asrs	r1, r3, #7
 8001ba8:	17d3      	asrs	r3, r2, #31
 8001baa:	1ac9      	subs	r1, r1, r3
 8001bac:	460b      	mov	r3, r1
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	440b      	add	r3, r1
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1ad1      	subs	r1, r2, r3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	f8a7 33b0 	strh.w	r3, [r7, #944]	; 0x3b0
		int32_t error_pos = ((error_filt[index_error2] - error_filt[0])*17);
 8001bbc:	f8b7 33b0 	ldrh.w	r3, [r7, #944]	; 0x3b0
 8001bc0:	4ab6      	ldr	r2, [pc, #728]	; (8001e9c <BLDC_main+0xae4>)
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	ed93 7a00 	vldr	s14, [r3]
 8001bca:	4bb4      	ldr	r3, [pc, #720]	; (8001e9c <BLDC_main+0xae4>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd4:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be0:	ee17 3a90 	vmov	r3, s15
 8001be4:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac

		float d;
		float q;
		int16_t angle = (mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0) + error_pos + (int32_t)electrical_offset + 2*360)%360;
 8001be8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 fb08 	bl	8002204 <mech_to_el_deg>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4aa8      	ldr	r2, [pc, #672]	; (8001ea0 <BLDC_main+0xae8>)
 8001c00:	edd2 7a00 	vldr	s15, [r2]
 8001c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c08:	ee17 2a90 	vmov	r2, s15
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001c12:	4aa0      	ldr	r2, [pc, #640]	; (8001e94 <BLDC_main+0xadc>)
 8001c14:	fb82 1203 	smull	r1, r2, r2, r3
 8001c18:	441a      	add	r2, r3
 8001c1a:	1211      	asrs	r1, r2, #8
 8001c1c:	17da      	asrs	r2, r3, #31
 8001c1e:	1a8a      	subs	r2, r1, r2
 8001c20:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001c24:	fb01 f202 	mul.w	r2, r1, r2
 8001c28:	1a9a      	subs	r2, r3, r2
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	f8a7 33aa 	strh.w	r3, [r7, #938]	; 0x3aa
		dq0((float)angle*3.14159264f/180, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M3, (float)IRQ_Current_BUFF.Current_M1, &d, &q);
 8001c30:	f9b7 33aa 	ldrsh.w	r3, [r7, #938]	; 0x3aa
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3c:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001ea4 <BLDC_main+0xaec>
 8001c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c44:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001ea8 <BLDC_main+0xaf0>
 8001c48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c4c:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c58:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001c5c:	ee06 3a90 	vmov	s13, r3
 8001c60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001c64:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001c68:	ee06 3a10 	vmov	s12, r3
 8001c6c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001c70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	eef0 1a46 	vmov.f32	s3, s12
 8001c80:	eeb0 1a66 	vmov.f32	s2, s13
 8001c84:	eef0 0a67 	vmov.f32	s1, s15
 8001c88:	eeb0 0a47 	vmov.f32	s0, s14
 8001c8c:	f002 fac4 	bl	8004218 <dq0>
//		IRQ_Current_BUFF.Current_DC = (int32_t)sqrt((d*d + q*q));
		float q_lpf = Update_FIR_filter(q);
 8001c90:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001c94:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	f7ff f998 	bl	8000fd4 <Update_FIR_filter>
 8001ca4:	ed87 0ae9 	vstr	s0, [r7, #932]	; 0x3a4
		float d_lpf = Update_FIR_filter2(d);
 8001ca8:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001cac:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb8:	f7ff f9d6 	bl	8001068 <Update_FIR_filter2>
 8001cbc:	ed87 0ae8 	vstr	s0, [r7, #928]	; 0x3a0



		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 8001cc0:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ccc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001eac <BLDC_main+0xaf4>
 8001cdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce4:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <BLDC_main+0xaf8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001cec:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001eb4 <BLDC_main+0xafc>
 8001cf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <BLDC_main+0xb00>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)(IRQ_Encoders_BUFF.Velocity);
 8001cfe:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0a:	4b6c      	ldr	r3, [pc, #432]	; (8001ebc <BLDC_main+0xb04>)
 8001d0c:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = q_lpf;
 8001d10:	4a6b      	ldr	r2, [pc, #428]	; (8001ec0 <BLDC_main+0xb08>)
 8001d12:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001d16:	6013      	str	r3, [r2, #0]


//		Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
		Angle_PID.Setpoint = 360000;
 8001d18:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <BLDC_main+0xb00>)
 8001d1a:	4a6a      	ldr	r2, [pc, #424]	; (8001ec4 <BLDC_main+0xb0c>)
 8001d1c:	609a      	str	r2, [r3, #8]

		Compute(&Angle_PID);
 8001d1e:	4866      	ldr	r0, [pc, #408]	; (8001eb8 <BLDC_main+0xb00>)
 8001d20:	f001 fcea 	bl	80036f8 <Compute>



		Velocity_PID.Setpoint = Angle_PID.Output;
 8001d24:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <BLDC_main+0xb00>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a64      	ldr	r2, [pc, #400]	; (8001ebc <BLDC_main+0xb04>)
 8001d2a:	6093      	str	r3, [r2, #8]
//		Velocity_PID.Setpoint = -60000.0f;

		Compute(&Velocity_PID);
 8001d2c:	4863      	ldr	r0, [pc, #396]	; (8001ebc <BLDC_main+0xb04>)
 8001d2e:	f001 fce3 	bl	80036f8 <Compute>

		#ifndef ZERO_GRAVITY
		Current_PID.Setpoint = Velocity_PID.Output;
 8001d32:	4b62      	ldr	r3, [pc, #392]	; (8001ebc <BLDC_main+0xb04>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4a62      	ldr	r2, [pc, #392]	; (8001ec0 <BLDC_main+0xb08>)
 8001d38:	6093      	str	r3, [r2, #8]
//		Current_PID.Setpoint = weight*(fast_sin_2((abs)((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000));
//		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
//		else direction = 1;
		#endif

		Compute(&Current_PID);
 8001d3a:	4861      	ldr	r0, [pc, #388]	; (8001ec0 <BLDC_main+0xb08>)
 8001d3c:	f001 fcdc 	bl	80036f8 <Compute>


		Current_PID_offset.Setpoint = 0;
 8001d40:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <BLDC_main+0xb10>)
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
		Current_PID_offset.Input = d_lpf;
 8001d48:	4a5f      	ldr	r2, [pc, #380]	; (8001ec8 <BLDC_main+0xb10>)
 8001d4a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001d4e:	6013      	str	r3, [r2, #0]

		Compute(&Current_PID_offset);
 8001d50:	485d      	ldr	r0, [pc, #372]	; (8001ec8 <BLDC_main+0xb10>)
 8001d52:	f001 fcd1 	bl	80036f8 <Compute>
		}
		IRQ_Encoders_BUFF.Encoder2_pos = 0;
		#endif


		float V_d = Current_PID_offset.Output;
 8001d56:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <BLDC_main+0xb10>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
		float V_q = Current_PID.Output;
 8001d5e:	4b58      	ldr	r3, [pc, #352]	; (8001ec0 <BLDC_main+0xb08>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001d66:	2201      	movs	r2, #1
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	4858      	ldr	r0, [pc, #352]	; (8001ecc <BLDC_main+0xb14>)
 8001d6c:	f005 fc84 	bl	8007678 <HAL_GPIO_WritePin>
		float theta = atan2_approximation2(V_q, V_d)*180.0f/3.14159264f;
 8001d70:	edd7 0ae7 	vldr	s1, [r7, #924]	; 0x39c
 8001d74:	ed97 0ae6 	vldr	s0, [r7, #920]	; 0x398
 8001d78:	f7ff fa82 	bl	8001280 <atan2_approximation2>
 8001d7c:	eef0 7a40 	vmov.f32	s15, s0
 8001d80:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001ea8 <BLDC_main+0xaf0>
 8001d84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d88:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001ea4 <BLDC_main+0xaec>
 8001d8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d90:	edc7 7ae5 	vstr	s15, [r7, #916]	; 0x394
//		float theta = atan2(V_q, V_d)*180/3.14159264f;
//		uint32_t mag = (uint32_t)(sqrt(V_q*V_q+V_d*V_d));
		uint32_t mag = sqrtI((uint32_t)(V_q*V_q+V_d*V_d));
 8001d94:	edd7 7ae6 	vldr	s15, [r7, #920]	; 0x398
 8001d98:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d9c:	edd7 7ae7 	vldr	s15, [r7, #924]	; 0x39c
 8001da0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dac:	ee17 0a90 	vmov	r0, s15
 8001db0:	f7ff fa2f 	bl	8001212 <sqrtI>
 8001db4:	f8c7 03b8 	str.w	r0, [r7, #952]	; 0x3b8
		mag *= 0.7;
 8001db8:	f8d7 03b8 	ldr.w	r0, [r7, #952]	; 0x3b8
 8001dbc:	f7fe fbca 	bl	8000554 <__aeabi_ui2d>
 8001dc0:	a331      	add	r3, pc, #196	; (adr r3, 8001e88 <BLDC_main+0xad0>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fc3f 	bl	8000648 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe ff11 	bl	8000bf8 <__aeabi_d2uiz>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
		if (mag > 1499)mag = 1499;
 8001ddc:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8001de0:	f240 52db 	movw	r2, #1499	; 0x5db
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d903      	bls.n	8001df0 <BLDC_main+0xa38>
 8001de8:	f240 53db 	movw	r3, #1499	; 0x5db
 8001dec:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8

		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	4835      	ldr	r0, [pc, #212]	; (8001ecc <BLDC_main+0xb14>)
 8001df6:	f005 fc3f 	bl	8007678 <HAL_GPIO_WritePin>
		if(error){
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <BLDC_main+0xb18>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <BLDC_main+0xa56>
			Status = BLDC_ERROR;
 8001e02:	2304      	movs	r3, #4
 8001e04:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
			shutoff();
 8001e08:	f000 fc24 	bl	8002654 <shutoff>
 8001e0c:	e0d3      	b.n	8001fb6 <BLDC_main+0xbfe>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8001e0e:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d104      	bne.n	8001e20 <BLDC_main+0xa68>
			shutoff();
 8001e16:	f000 fc1d 	bl	8002654 <shutoff>
			shutdown();
 8001e1a:	f000 fc2d 	bl	8002678 <shutdown>
 8001e1e:	e0ca      	b.n	8001fb6 <BLDC_main+0xbfe>
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8001e20:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d157      	bne.n	8001ed8 <BLDC_main+0xb20>
//			shutoff();
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001e28:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f9e8 	bl	8002204 <mech_to_el_deg>
 8001e34:	4603      	mov	r3, r0
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <BLDC_main+0xae8>)
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4c:	ee17 3a90 	vmov	r3, s15
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	edd7 7ae5 	vldr	s15, [r7, #916]	; 0x394
 8001e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5e:	ee17 3a90 	vmov	r3, s15
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8001e74:	b291      	uxth	r1, r2
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <BLDC_main+0xb1c>)
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fa96 	bl	80023ac <inverter>
 8001e80:	e099      	b.n	8001fb6 <BLDC_main+0xbfe>
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	66666666 	.word	0x66666666
 8001e8c:	3fe66666 	.word	0x3fe66666
 8001e90:	10624dd3 	.word	0x10624dd3
 8001e94:	b60b60b7 	.word	0xb60b60b7
 8001e98:	78787879 	.word	0x78787879
 8001e9c:	20000ad4 	.word	0x20000ad4
 8001ea0:	20000f18 	.word	0x20000f18
 8001ea4:	40490fdb 	.word	0x40490fdb
 8001ea8:	43340000 	.word	0x43340000
 8001eac:	48afc800 	.word	0x48afc800
 8001eb0:	20000acc 	.word	0x20000acc
 8001eb4:	447a0000 	.word	0x447a0000
 8001eb8:	20000a8c 	.word	0x20000a8c
 8001ebc:	20000a4c 	.word	0x20000a4c
 8001ec0:	20000a0c 	.word	0x20000a0c
 8001ec4:	48afc800 	.word	0x48afc800
 8001ec8:	200009cc 	.word	0x200009cc
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	20000780 	.word	0x20000780
 8001ed4:	20000f14 	.word	0x20000f14
			}
		else if (Status == BLDC_RUNNING){
 8001ed8:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d12c      	bne.n	8001f3a <BLDC_main+0xb82>
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001ee0:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f98c 	bl	8002204 <mech_to_el_deg>
 8001eec:	4603      	mov	r3, r0
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4bae      	ldr	r3, [pc, #696]	; (80021b4 <BLDC_main+0xdfc>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f04:	ee17 3a90 	vmov	r3, s15
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	edd7 7ae5 	vldr	s15, [r7, #916]	; 0x394
 8001f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f16:	ee17 3a90 	vmov	r3, s15
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8001f2c:	b291      	uxth	r1, r2
 8001f2e:	4aa2      	ldr	r2, [pc, #648]	; (80021b8 <BLDC_main+0xe00>)
 8001f30:	7812      	ldrb	r2, [r2, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fa3a 	bl	80023ac <inverter>
 8001f38:	e03d      	b.n	8001fb6 <BLDC_main+0xbfe>
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 8001f3a:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d139      	bne.n	8001fb6 <BLDC_main+0xbfe>
			order_phases(&IRQ_Encoders, &IRQ_Current);
 8001f42:	499e      	ldr	r1, [pc, #632]	; (80021bc <BLDC_main+0xe04>)
 8001f44:	489e      	ldr	r0, [pc, #632]	; (80021c0 <BLDC_main+0xe08>)
 8001f46:	f000 fbb9 	bl	80026bc <order_phases>
			calibrate(&IRQ_Encoders, &IRQ_Current);
 8001f4a:	499c      	ldr	r1, [pc, #624]	; (80021bc <BLDC_main+0xe04>)
 8001f4c:	489c      	ldr	r0, [pc, #624]	; (80021c0 <BLDC_main+0xe08>)
 8001f4e:	f000 fd2b 	bl	80029a8 <calibrate>


			//start calibration
			storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 8001f52:	4b9b      	ldr	r3, [pc, #620]	; (80021c0 <BLDC_main+0xe08>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a9b      	ldr	r2, [pc, #620]	; (80021c4 <BLDC_main+0xe0c>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	4a99      	ldr	r2, [pc, #612]	; (80021c8 <BLDC_main+0xe10>)
 8001f62:	fb82 1203 	smull	r1, r2, r2, r3
 8001f66:	441a      	add	r2, r3
 8001f68:	1211      	asrs	r1, r2, #8
 8001f6a:	17da      	asrs	r2, r3, #31
 8001f6c:	1a8a      	subs	r2, r1, r2
 8001f6e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001f72:	fb01 f202 	mul.w	r2, r1, r2
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	4b94      	ldr	r3, [pc, #592]	; (80021cc <BLDC_main+0xe14>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 24a8 	strh.w	r2, [r3, #1192]	; 0x4a8
			storage->electrical_offset = electrical_offset;
 8001f84:	4b91      	ldr	r3, [pc, #580]	; (80021cc <BLDC_main+0xe14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a8a      	ldr	r2, [pc, #552]	; (80021b4 <BLDC_main+0xdfc>)
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	665a      	str	r2, [r3, #100]	; 0x64
			storage->PHASE_ORDER = PHASE_ORDER;
 8001f8e:	4b8f      	ldr	r3, [pc, #572]	; (80021cc <BLDC_main+0xe14>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a89      	ldr	r2, [pc, #548]	; (80021b8 <BLDC_main+0xe00>)
 8001f94:	7812      	ldrb	r2, [r2, #0]
 8001f96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			memcpy(storage->error_filt,error_filt,sizeof(error_filt));
 8001f9a:	4b8c      	ldr	r3, [pc, #560]	; (80021cc <BLDC_main+0xe14>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3368      	adds	r3, #104	; 0x68
 8001fa0:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001fa4:	498a      	ldr	r1, [pc, #552]	; (80021d0 <BLDC_main+0xe18>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f009 fa31 	bl	800b40e <memcpy>
			Flash_save();
 8001fac:	f001 fb8e 	bl	80036cc <Flash_save>
			Status = BLDC_STOPPED_WITH_BREAK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8001fb6:	4b87      	ldr	r3, [pc, #540]	; (80021d4 <BLDC_main+0xe1c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b95      	cmp	r3, #149	; 0x95
 8001fbc:	f240 80b3 	bls.w	8002126 <BLDC_main+0xd6e>
			timing_CAN_feedback = 0;
 8001fc0:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <BLDC_main+0xe1c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8001fc6:	4a84      	ldr	r2, [pc, #528]	; (80021d8 <BLDC_main+0xe20>)
 8001fc8:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8001fcc:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8001fce:	4b83      	ldr	r3, [pc, #524]	; (80021dc <BLDC_main+0xe24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a81      	ldr	r2, [pc, #516]	; (80021d8 <BLDC_main+0xe20>)
 8001fd4:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8001fd6:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001fda:	4a7f      	ldr	r2, [pc, #508]	; (80021d8 <BLDC_main+0xe20>)
 8001fdc:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8001fde:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001fe2:	4a7d      	ldr	r2, [pc, #500]	; (80021d8 <BLDC_main+0xe20>)
 8001fe4:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8001fe6:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b7a      	ldr	r3, [pc, #488]	; (80021d8 <BLDC_main+0xe20>)
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8001ff0:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001ff4:	4a78      	ldr	r2, [pc, #480]	; (80021d8 <BLDC_main+0xe20>)
 8001ff6:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8001ff8:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8001ffc:	4a76      	ldr	r2, [pc, #472]	; (80021d8 <BLDC_main+0xe20>)
 8001ffe:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8002000:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002004:	4a74      	ldr	r2, [pc, #464]	; (80021d8 <BLDC_main+0xe20>)
 8002006:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8002008:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 800200c:	461a      	mov	r2, r3
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <BLDC_main+0xe20>)
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8002012:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8002016:	4a70      	ldr	r2, [pc, #448]	; (80021d8 <BLDC_main+0xe20>)
 8002018:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 800201a:	f9b7 237e 	ldrsh.w	r2, [r7, #894]	; 0x37e
 800201e:	4b6e      	ldr	r3, [pc, #440]	; (80021d8 <BLDC_main+0xe20>)
 8002020:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 8002022:	f9b7 2380 	ldrsh.w	r2, [r7, #896]	; 0x380
 8002026:	4b6c      	ldr	r3, [pc, #432]	; (80021d8 <BLDC_main+0xe20>)
 8002028:	865a      	strh	r2, [r3, #50]	; 0x32
			Feedback.Temp_ENCODER1 = IRQ_Encoders_BUFF.Encoder1_temp_x10;
 800202a:	f9b7 2374 	ldrsh.w	r2, [r7, #884]	; 0x374
 800202e:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <BLDC_main+0xe20>)
 8002030:	869a      	strh	r2, [r3, #52]	; 0x34
			Feedback.Temp_ENCODER2 = IRQ_Encoders_BUFF.Encoder2_temp_x10;
 8002032:	f9b7 2376 	ldrsh.w	r2, [r7, #886]	; 0x376
 8002036:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <BLDC_main+0xe20>)
 8002038:	86da      	strh	r2, [r3, #54]	; 0x36

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 800203a:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800203e:	4a66      	ldr	r2, [pc, #408]	; (80021d8 <BLDC_main+0xe20>)
 8002040:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 8002042:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8002046:	4a64      	ldr	r2, [pc, #400]	; (80021d8 <BLDC_main+0xe20>)
 8002048:	6153      	str	r3, [r2, #20]
//			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 800204a:	4b65      	ldr	r3, [pc, #404]	; (80021e0 <BLDC_main+0xe28>)
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002054:	ee17 2a90 	vmov	r2, s15
 8002058:	4b5f      	ldr	r3, [pc, #380]	; (80021d8 <BLDC_main+0xe20>)
 800205a:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 800205c:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8002060:	4a5d      	ldr	r2, [pc, #372]	; (80021d8 <BLDC_main+0xe20>)
 8002062:	61d3      	str	r3, [r2, #28]
//			Feedback.Position_Velocity = (int32_t)velocity;
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8002064:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <BLDC_main+0xe20>)
 8002066:	f240 4136 	movw	r1, #1078	; 0x436
 800206a:	485e      	ldr	r0, [pc, #376]	; (80021e4 <BLDC_main+0xe2c>)
 800206c:	f002 f9d2 	bl	8004414 <FDCAN_sendData>

			//-----------------PRINTF DEBUGGING-------------------
			//will print same info as on CAN-BUS
			#ifdef PRINT_DEBUG
			PrintServerPrintf(
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <BLDC_main+0xe20>)
 8002072:	6a1e      	ldr	r6, [r3, #32]
 8002074:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <BLDC_main+0xe20>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <BLDC_main+0xe20>)
 800207c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800207e:	61b9      	str	r1, [r7, #24]
 8002080:	4b55      	ldr	r3, [pc, #340]	; (80021d8 <BLDC_main+0xe20>)
 8002082:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					#ifdef Position_debug
					"POSITION[EN1:%7d EN2:%7d CALC:%7i VELOCITY:%7i]"
					#endif
					"\r\n"
					#ifdef Current_debug
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8002084:	4b58      	ldr	r3, [pc, #352]	; (80021e8 <BLDC_main+0xe30>)
 8002086:	edd3 7a01 	vldr	s15, [r3, #4]
			PrintServerPrintf(
 800208a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800208e:	edc7 7a05 	vstr	s15, [r7, #20]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8002092:	edd7 7ae8 	vldr	s15, [r7, #928]	; 0x3a0
 8002096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209a:	ee17 3a90 	vmov	r3, s15
 800209e:	b21b      	sxth	r3, r3
			PrintServerPrintf(
 80020a0:	613b      	str	r3, [r7, #16]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 80020a2:	edd7 7ae9 	vldr	s15, [r7, #932]	; 0x3a4
 80020a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020aa:	ee17 3a90 	vmov	r3, s15
 80020ae:	b21b      	sxth	r3, r3
			PrintServerPrintf(
 80020b0:	60fb      	str	r3, [r7, #12]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 80020b2:	edd7 7ae5 	vldr	s15, [r7, #916]	; 0x394
 80020b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ba:	ee17 3a90 	vmov	r3, s15
 80020be:	b21b      	sxth	r3, r3
			PrintServerPrintf(
 80020c0:	60bb      	str	r3, [r7, #8]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 80020c2:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <BLDC_main+0xe34>)
 80020c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80020c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020cc:	ee17 3a90 	vmov	r3, s15
 80020d0:	b21b      	sxth	r3, r3
			PrintServerPrintf(
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <BLDC_main+0xe20>)
 80020d6:	691c      	ldr	r4, [r3, #16]
					#endif
					#ifdef Status_debug
					, status_sting[Feedback.Status_mode], Feedback.Status_setpoint, Feedback.Status_warning, Feedback.Status_faults
						#endif
					#ifdef Position_debug
					, Feedback.Position_Encoder1_pos, (int32_t)Velocity_PID.Input, Feedback.Position_Calculated_pos, Feedback.Position_Velocity/1000
 80020d8:	4b45      	ldr	r3, [pc, #276]	; (80021f0 <BLDC_main+0xe38>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
			PrintServerPrintf(
 80020de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e2:	edc7 7a00 	vstr	s15, [r7]
 80020e6:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <BLDC_main+0xe20>)
 80020e8:	699d      	ldr	r5, [r3, #24]
					, Feedback.Position_Encoder1_pos, (int32_t)Velocity_PID.Input, Feedback.Position_Calculated_pos, Feedback.Position_Velocity/1000
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <BLDC_main+0xe20>)
 80020ec:	69d9      	ldr	r1, [r3, #28]
			PrintServerPrintf(
 80020ee:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <BLDC_main+0xe0c>)
 80020f0:	fb83 2301 	smull	r2, r3, r3, r1
 80020f4:	119a      	asrs	r2, r3, #6
 80020f6:	17cb      	asrs	r3, r1, #31
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	9309      	str	r3, [sp, #36]	; 0x24
 80020fc:	9508      	str	r5, [sp, #32]
 80020fe:	683d      	ldr	r5, [r7, #0]
 8002100:	9507      	str	r5, [sp, #28]
 8002102:	9406      	str	r4, [sp, #24]
 8002104:	687c      	ldr	r4, [r7, #4]
 8002106:	9405      	str	r4, [sp, #20]
 8002108:	68bc      	ldr	r4, [r7, #8]
 800210a:	9404      	str	r4, [sp, #16]
 800210c:	68fc      	ldr	r4, [r7, #12]
 800210e:	9403      	str	r4, [sp, #12]
 8002110:	693c      	ldr	r4, [r7, #16]
 8002112:	9402      	str	r4, [sp, #8]
 8002114:	697c      	ldr	r4, [r7, #20]
 8002116:	9401      	str	r4, [sp, #4]
 8002118:	9000      	str	r0, [sp, #0]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	4631      	mov	r1, r6
 8002120:	4834      	ldr	r0, [pc, #208]	; (80021f4 <BLDC_main+0xe3c>)
 8002122:	f001 fd47 	bl	8003bb4 <PrintServerPrintf>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <BLDC_main+0xe24>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <BLDC_main+0xd86>
 800212e:	2201      	movs	r2, #1
 8002130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f005 fa9e 	bl	8007678 <HAL_GPIO_WritePin>
 800213c:	e006      	b.n	800214c <BLDC_main+0xd94>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002148:	f005 fa96 	bl	8007678 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 800214c:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <BLDC_main+0xda8>
 8002154:	2201      	movs	r2, #1
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	4827      	ldr	r0, [pc, #156]	; (80021f8 <BLDC_main+0xe40>)
 800215a:	f005 fa8d 	bl	8007678 <HAL_GPIO_WritePin>
 800215e:	e004      	b.n	800216a <BLDC_main+0xdb2>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	4824      	ldr	r0, [pc, #144]	; (80021f8 <BLDC_main+0xe40>)
 8002166:	f005 fa87 	bl	8007678 <HAL_GPIO_WritePin>

		#ifndef RUNNING_LED_DEBUG
		#ifndef RUNNING_LED_DEBUG2
		if(running_LED_timing >= LOOP_FREQ_KHZ*100){
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <BLDC_main+0xe44>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002172:	4293      	cmp	r3, r2
 8002174:	d906      	bls.n	8002184 <BLDC_main+0xdcc>
			running_LED_timing = 0;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <BLDC_main+0xe44>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 800217c:	2140      	movs	r1, #64	; 0x40
 800217e:	481e      	ldr	r0, [pc, #120]	; (80021f8 <BLDC_main+0xe40>)
 8002180:	f005 fa7f 	bl	8007682 <HAL_GPIO_TogglePin>
		//-----------------update dac---------------------------
		#ifdef DAC_DEBUG
//		dac_value(Velocity_PID.Output);
//		dac_value(test/3);
//		dac_value((uint32_t)abs(IRQ_Encoders_BUFF.Velocity/1000)+1500);
		dac_value(q/10 +1500);
 8002184:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8002188:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002198:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002200 <BLDC_main+0xe48>
 800219c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a4:	ee17 3a90 	vmov	r3, s15
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 fd28 	bl	8003c00 <dac_value>
	while(1){
 80021b0:	f7ff ba70 	b.w	8001694 <BLDC_main+0x2dc>
 80021b4:	20000f18 	.word	0x20000f18
 80021b8:	20000f14 	.word	0x20000f14
 80021bc:	20000784 	.word	0x20000784
 80021c0:	200007a0 	.word	0x200007a0
 80021c4:	10624dd3 	.word	0x10624dd3
 80021c8:	b60b60b7 	.word	0xb60b60b7
 80021cc:	20000acc 	.word	0x20000acc
 80021d0:	20000ad4 	.word	0x20000ad4
 80021d4:	20000778 	.word	0x20000778
 80021d8:	2000098c 	.word	0x2000098c
 80021dc:	20000780 	.word	0x20000780
 80021e0:	20000a8c 	.word	0x20000a8c
 80021e4:	20001a38 	.word	0x20001a38
 80021e8:	20000a0c 	.word	0x20000a0c
 80021ec:	200009cc 	.word	0x200009cc
 80021f0:	20000a4c 	.word	0x20000a4c
 80021f4:	0800f548 	.word	0x0800f548
 80021f8:	48000800 	.word	0x48000800
 80021fc:	2000077c 	.word	0x2000077c
 8002200:	44bb8000 	.word	0x44bb8000

08002204 <mech_to_el_deg>:
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	float temp = (float)(angle_deg-offset_deg+360000*2);
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8002218:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002224:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360000) temp = temp-360000;
 8002228:	e007      	b.n	800223a <mech_to_el_deg+0x36>
 800222a:	edd7 7a03 	vldr	s15, [r7, #12]
 800222e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80022f0 <mech_to_el_deg+0xec>
 8002232:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002236:	edc7 7a03 	vstr	s15, [r7, #12]
 800223a:	edd7 7a03 	vldr	s15, [r7, #12]
 800223e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022f0 <mech_to_el_deg+0xec>
 8002242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224a:	dcee      	bgt.n	800222a <mech_to_el_deg+0x26>
	while (temp > (360000/17)) temp = temp-deg_pr_pole;
 800224c:	e007      	b.n	800225e <mech_to_el_deg+0x5a>
 800224e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002252:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80022f4 <mech_to_el_deg+0xf0>
 8002256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800225a:	edc7 7a03 	vstr	s15, [r7, #12]
 800225e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002262:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80022f4 <mech_to_el_deg+0xf0>
 8002266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	dcee      	bgt.n	800224e <mech_to_el_deg+0x4a>
	temp = temp*17/1000;
 8002270:	edd7 7a03 	vldr	s15, [r7, #12]
 8002274:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002278:	ee27 7a87 	vmul.f32	s14, s15, s14
 800227c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80022f8 <mech_to_el_deg+0xf4>
 8002280:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002284:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360) temp -= 360;
 8002288:	e007      	b.n	800229a <mech_to_el_deg+0x96>
 800228a:	edd7 7a03 	vldr	s15, [r7, #12]
 800228e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80022fc <mech_to_el_deg+0xf8>
 8002292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002296:	edc7 7a03 	vstr	s15, [r7, #12]
 800229a:	edd7 7a03 	vldr	s15, [r7, #12]
 800229e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80022fc <mech_to_el_deg+0xf8>
 80022a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	dcee      	bgt.n	800228a <mech_to_el_deg+0x86>
	if(temp < 0) return 0;
 80022ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80022b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	d501      	bpl.n	80022be <mech_to_el_deg+0xba>
 80022ba:	2300      	movs	r3, #0
 80022bc:	e012      	b.n	80022e4 <mech_to_el_deg+0xe0>
	else if(temp > 360) return 360;
 80022be:	edd7 7a03 	vldr	s15, [r7, #12]
 80022c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80022fc <mech_to_el_deg+0xf8>
 80022c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	dd02      	ble.n	80022d6 <mech_to_el_deg+0xd2>
 80022d0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80022d4:	e006      	b.n	80022e4 <mech_to_el_deg+0xe0>
	else return (int16_t)temp;
 80022d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022de:	ee17 3a90 	vmov	r3, s15
 80022e2:	b21b      	sxth	r3, r3

//	return (int16_t)((((angle_deg)-offset_deg+360000*2)%deg_pr_pole)/(1000/17))%360;
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	48afc800 	.word	0x48afc800
 80022f4:	46a57000 	.word	0x46a57000
 80022f8:	447a0000 	.word	0x447a0000
 80022fc:	43b40000 	.word	0x43b40000

08002300 <CTRL_init_PWM>:
#define duty_max 1499
#define pi 3.1415926535

uint32_t *V_bat = 0;

void CTRL_init_PWM(uint32_t *V_bat_ptr){
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	V_bat = V_bat_ptr;
 8002308:	4a24      	ldr	r2, [pc, #144]	; (800239c <CTRL_init_PWM+0x9c>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 800230e:	2100      	movs	r1, #0
 8002310:	4823      	ldr	r0, [pc, #140]	; (80023a0 <CTRL_init_PWM+0xa0>)
 8002312:	f007 f975 	bl	8009600 <HAL_TIM_PWM_Start>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <CTRL_init_PWM+0x20>
 800231c:	f002 fd09 	bl	8004d32 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8002320:	2100      	movs	r1, #0
 8002322:	481f      	ldr	r0, [pc, #124]	; (80023a0 <CTRL_init_PWM+0xa0>)
 8002324:	f007 faa6 	bl	8009874 <HAL_TIMEx_PWMN_Start>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <CTRL_init_PWM+0x32>
 800232e:	f002 fd00 	bl	8004d32 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8002332:	2104      	movs	r1, #4
 8002334:	481a      	ldr	r0, [pc, #104]	; (80023a0 <CTRL_init_PWM+0xa0>)
 8002336:	f007 f963 	bl	8009600 <HAL_TIM_PWM_Start>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <CTRL_init_PWM+0x44>
 8002340:	f002 fcf7 	bl	8004d32 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8002344:	2104      	movs	r1, #4
 8002346:	4816      	ldr	r0, [pc, #88]	; (80023a0 <CTRL_init_PWM+0xa0>)
 8002348:	f007 fa94 	bl	8009874 <HAL_TIMEx_PWMN_Start>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <CTRL_init_PWM+0x56>
 8002352:	f002 fcee 	bl	8004d32 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8002356:	2108      	movs	r1, #8
 8002358:	4811      	ldr	r0, [pc, #68]	; (80023a0 <CTRL_init_PWM+0xa0>)
 800235a:	f007 f951 	bl	8009600 <HAL_TIM_PWM_Start>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <CTRL_init_PWM+0x68>
 8002364:	f002 fce5 	bl	8004d32 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8002368:	2108      	movs	r1, #8
 800236a:	480d      	ldr	r0, [pc, #52]	; (80023a0 <CTRL_init_PWM+0xa0>)
 800236c:	f007 fa82 	bl	8009874 <HAL_TIMEx_PWMN_Start>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <CTRL_init_PWM+0x7a>
 8002376:	f002 fcdc 	bl	8004d32 <Error_Handler>

	TIM1->CCR1 = 0;
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <CTRL_init_PWM+0xa4>)
 800237c:	2200      	movs	r2, #0
 800237e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <CTRL_init_PWM+0xa4>)
 8002382:	2200      	movs	r2, #0
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <CTRL_init_PWM+0xa4>)
 8002388:	2200      	movs	r2, #0
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 800238c:	4806      	ldr	r0, [pc, #24]	; (80023a8 <CTRL_init_PWM+0xa8>)
 800238e:	f006 fd09 	bl	8008da4 <HAL_TIM_Base_Start_IT>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000ad0 	.word	0x20000ad0
 80023a0:	20001d20 	.word	0x20001d20
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	20001d6c 	.word	0x20001d6c

080023ac <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage, uint8_t direction){
 80023ac:	b480      	push	{r7}
 80023ae:	b08b      	sub	sp, #44	; 0x2c
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
 80023b6:	460b      	mov	r3, r1
 80023b8:	80bb      	strh	r3, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	70fb      	strb	r3, [r7, #3]
	angle = (angle+360*2)%360;
 80023be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80023c6:	4a9d      	ldr	r2, [pc, #628]	; (800263c <inverter+0x290>)
 80023c8:	fb82 1203 	smull	r1, r2, r2, r3
 80023cc:	441a      	add	r2, r3
 80023ce:	1211      	asrs	r1, r2, #8
 80023d0:	17da      	asrs	r2, r3, #31
 80023d2:	1a8a      	subs	r2, r1, r2
 80023d4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80023d8:	fb01 f202 	mul.w	r2, r1, r2
 80023dc:	1a9a      	subs	r2, r3, r2
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]

//	if(V_bat == NULL){
//		shutoff();
//		return;
//	}
	uint16_t duty = voltage; //(voltage * duty_max)/ (*V_bat);
 80023e2:	88bb      	ldrh	r3, [r7, #4]
 80023e4:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(duty > duty_max)duty = duty_max;
 80023e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023e8:	f240 52db 	movw	r2, #1499	; 0x5db
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d902      	bls.n	80023f6 <inverter+0x4a>
 80023f0:	f240 53db 	movw	r3, #1499	; 0x5db
 80023f4:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint32_t compare_M1 = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
	uint32_t compare_M2 = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M3 = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]

	float deg = (float)(angle%60);
 8002402:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002406:	4b8e      	ldr	r3, [pc, #568]	; (8002640 <inverter+0x294>)
 8002408:	fb83 1302 	smull	r1, r3, r3, r2
 800240c:	4413      	add	r3, r2
 800240e:	1159      	asrs	r1, r3, #5
 8002410:	17d3      	asrs	r3, r2, #31
 8002412:	1ac9      	subs	r1, r1, r3
 8002414:	460b      	mov	r3, r1
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a5b      	subs	r3, r3, r1
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	b21b      	sxth	r3, r3
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002428:	edc7 7a05 	vstr	s15, [r7, #20]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 800242c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002436:	eddf 6a83 	vldr	s13, [pc, #524]	; 8002644 <inverter+0x298>
 800243a:	edd7 7a05 	vldr	s15, [r7, #20]
 800243e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002442:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002446:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800244a:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 8002644 <inverter+0x298>
 800244e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002452:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002456:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 8002648 <inverter+0x29c>
 800245a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800245e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002462:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002644 <inverter+0x298>
 8002466:	edd7 7a05 	vldr	s15, [r7, #20]
 800246a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800246e:	eddf 5a75 	vldr	s11, [pc, #468]	; 8002644 <inverter+0x298>
 8002472:	edd7 7a05 	vldr	s15, [r7, #20]
 8002476:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800247a:	eddf 5a73 	vldr	s11, [pc, #460]	; 8002648 <inverter+0x29c>
 800247e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002486:	eddf 6a71 	vldr	s13, [pc, #452]	; 800264c <inverter+0x2a0>
 800248a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800248e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800249a:	ee17 3a90 	vmov	r3, s15
 800249e:	827b      	strh	r3, [r7, #18]
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 80024a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80024ae:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80024b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024b6:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8002648 <inverter+0x29c>
 80024ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80024be:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024c2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80024c6:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002648 <inverter+0x29c>
 80024ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80024ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800264c <inverter+0x2a0>
 80024de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ee:	ee17 3a90 	vmov	r3, s15
 80024f2:	823b      	strh	r3, [r7, #16]
	uint16_t T0 = (duty_max-T1-T2)/2;
 80024f4:	8a7b      	ldrh	r3, [r7, #18]
 80024f6:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80024fa:	3303      	adds	r3, #3
 80024fc:	8a3a      	ldrh	r2, [r7, #16]
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	0fda      	lsrs	r2, r3, #31
 8002502:	4413      	add	r3, r2
 8002504:	105b      	asrs	r3, r3, #1
 8002506:	81fb      	strh	r3, [r7, #14]

	if(angle >= 0 && angle < 60){
 8002508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800250c:	2b00      	cmp	r3, #0
 800250e:	db10      	blt.n	8002532 <inverter+0x186>
 8002510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002514:	2b3b      	cmp	r3, #59	; 0x3b
 8002516:	dc0c      	bgt.n	8002532 <inverter+0x186>
		compare_M1 = T0;
 8002518:	89fb      	ldrh	r3, [r7, #14]
 800251a:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T2;
 800251c:	89fa      	ldrh	r2, [r7, #14]
 800251e:	8a3b      	ldrh	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 8002524:	89fa      	ldrh	r2, [r7, #14]
 8002526:	8a7b      	ldrh	r3, [r7, #18]
 8002528:	441a      	add	r2, r3
 800252a:	8a3b      	ldrh	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	e06a      	b.n	8002608 <inverter+0x25c>
		}
	else if(angle >= 60 && angle < 120){
 8002532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002536:	2b3b      	cmp	r3, #59	; 0x3b
 8002538:	dd10      	ble.n	800255c <inverter+0x1b0>
 800253a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800253e:	2b77      	cmp	r3, #119	; 0x77
 8002540:	dc0c      	bgt.n	800255c <inverter+0x1b0>
		compare_M1 = T0;
 8002542:	89fb      	ldrh	r3, [r7, #14]
 8002544:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 8002546:	89fa      	ldrh	r2, [r7, #14]
 8002548:	8a7b      	ldrh	r3, [r7, #18]
 800254a:	441a      	add	r2, r3
 800254c:	8a3b      	ldrh	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1;
 8002552:	89fa      	ldrh	r2, [r7, #14]
 8002554:	8a7b      	ldrh	r3, [r7, #18]
 8002556:	4413      	add	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	e055      	b.n	8002608 <inverter+0x25c>
		}
	else if(angle >= 120 && angle < 180){
 800255c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002560:	2b77      	cmp	r3, #119	; 0x77
 8002562:	dd10      	ble.n	8002586 <inverter+0x1da>
 8002564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002568:	2bb3      	cmp	r3, #179	; 0xb3
 800256a:	dc0c      	bgt.n	8002586 <inverter+0x1da>
		compare_M1 = T0+T2;
 800256c:	89fa      	ldrh	r2, [r7, #14]
 800256e:	8a3b      	ldrh	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 8002574:	89fa      	ldrh	r2, [r7, #14]
 8002576:	8a7b      	ldrh	r3, [r7, #18]
 8002578:	441a      	add	r2, r3
 800257a:	8a3b      	ldrh	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	e040      	b.n	8002608 <inverter+0x25c>
		}
	else if(angle >= 180 && angle < 240){
 8002586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258a:	2bb3      	cmp	r3, #179	; 0xb3
 800258c:	dd10      	ble.n	80025b0 <inverter+0x204>
 800258e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002592:	2bef      	cmp	r3, #239	; 0xef
 8002594:	dc0c      	bgt.n	80025b0 <inverter+0x204>
		compare_M1 = T0+T1+T2;
 8002596:	89fa      	ldrh	r2, [r7, #14]
 8002598:	8a7b      	ldrh	r3, [r7, #18]
 800259a:	441a      	add	r2, r3
 800259c:	8a3b      	ldrh	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1;
 80025a2:	89fa      	ldrh	r2, [r7, #14]
 80025a4:	8a7b      	ldrh	r3, [r7, #18]
 80025a6:	4413      	add	r3, r2
 80025a8:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 80025aa:	89fb      	ldrh	r3, [r7, #14]
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	e02b      	b.n	8002608 <inverter+0x25c>
		}
	else if(angle >= 240 && angle < 300){
 80025b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b4:	2bef      	cmp	r3, #239	; 0xef
 80025b6:	dd11      	ble.n	80025dc <inverter+0x230>
 80025b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80025c0:	da0c      	bge.n	80025dc <inverter+0x230>
		compare_M1 = T0+T1+T2;
 80025c2:	89fa      	ldrh	r2, [r7, #14]
 80025c4:	8a7b      	ldrh	r3, [r7, #18]
 80025c6:	441a      	add	r2, r3
 80025c8:	8a3b      	ldrh	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 80025ce:	89fb      	ldrh	r3, [r7, #14]
 80025d0:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T2;
 80025d2:	89fa      	ldrh	r2, [r7, #14]
 80025d4:	8a3b      	ldrh	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	e015      	b.n	8002608 <inverter+0x25c>
		}
	else if(angle >= 300 && angle <= 360){
 80025dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80025e4:	db10      	blt.n	8002608 <inverter+0x25c>
 80025e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ea:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80025ee:	dc0b      	bgt.n	8002608 <inverter+0x25c>
		compare_M1 = T0+T1;
 80025f0:	89fa      	ldrh	r2, [r7, #14]
 80025f2:	8a7b      	ldrh	r3, [r7, #18]
 80025f4:	4413      	add	r3, r2
 80025f6:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 80025f8:	89fb      	ldrh	r3, [r7, #14]
 80025fa:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 80025fc:	89fa      	ldrh	r2, [r7, #14]
 80025fe:	8a7b      	ldrh	r3, [r7, #18]
 8002600:	441a      	add	r2, r3
 8002602:	8a3b      	ldrh	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <inverter+0x2a4>)
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	6353      	str	r3, [r2, #52]	; 0x34
	if(direction){
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <inverter+0x276>
		TIM1->CCR2 = compare_M3;
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <inverter+0x2a4>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = compare_M2;
 800261a:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <inverter+0x2a4>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	63d3      	str	r3, [r2, #60]	; 0x3c
	}


//	dac_value(angle*8+200);

}
 8002620:	e005      	b.n	800262e <inverter+0x282>
		TIM1->CCR2 = compare_M2;
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <inverter+0x2a4>)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = compare_M3;
 8002628:	4a09      	ldr	r2, [pc, #36]	; (8002650 <inverter+0x2a4>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800262e:	bf00      	nop
 8002630:	372c      	adds	r7, #44	; 0x2c
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	b60b60b7 	.word	0xb60b60b7
 8002640:	88888889 	.word	0x88888889
 8002644:	42700000 	.word	0x42700000
 8002648:	43340000 	.word	0x43340000
 800264c:	471e3400 	.word	0x471e3400
 8002650:	40012c00 	.word	0x40012c00

08002654 <shutoff>:
void shutoff(void){
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <shutoff+0x20>)
 800265a:	2200      	movs	r2, #0
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <shutoff+0x20>)
 8002660:	2200      	movs	r2, #0
 8002662:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <shutoff+0x20>)
 8002666:	2200      	movs	r2, #0
 8002668:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40012c00 	.word	0x40012c00

08002678 <shutdown>:
void shutdown(void){
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 800267c:	2100      	movs	r1, #0
 800267e:	480e      	ldr	r0, [pc, #56]	; (80026b8 <shutdown+0x40>)
 8002680:	f007 f888 	bl	8009794 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8002684:	2100      	movs	r1, #0
 8002686:	480c      	ldr	r0, [pc, #48]	; (80026b8 <shutdown+0x40>)
 8002688:	f007 f962 	bl	8009950 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 800268c:	2104      	movs	r1, #4
 800268e:	480a      	ldr	r0, [pc, #40]	; (80026b8 <shutdown+0x40>)
 8002690:	f007 f880 	bl	8009794 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8002694:	2104      	movs	r1, #4
 8002696:	4808      	ldr	r0, [pc, #32]	; (80026b8 <shutdown+0x40>)
 8002698:	f007 f95a 	bl	8009950 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 800269c:	2108      	movs	r1, #8
 800269e:	4806      	ldr	r0, [pc, #24]	; (80026b8 <shutdown+0x40>)
 80026a0:	f007 f878 	bl	8009794 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 80026a4:	2108      	movs	r1, #8
 80026a6:	4804      	ldr	r0, [pc, #16]	; (80026b8 <shutdown+0x40>)
 80026a8:	f007 f952 	bl	8009950 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <shutdown+0x40>)
 80026ae:	f006 fb65 	bl	8008d7c <HAL_TIM_Base_Stop>
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20001d20 	.word	0x20001d20

080026bc <order_phases>:
float electrical_offset = 0;
float pi = 3.14159265f;

uint32_t motor_lut[LUT_SIZE];

void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 80026bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026c0:	b090      	sub	sp, #64	; 0x40
 80026c2:	af04      	add	r7, sp, #16
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]

    ///Checks phase order, to ensure that positive Q current produces
    ///torque in the positive direction wrt the position sensor.
	PrintServerPrintf("\n\r Checking phase ordering\n\r");
 80026c8:	48a8      	ldr	r0, [pc, #672]	; (800296c <order_phases+0x2b0>)
 80026ca:	f001 fa73 	bl	8003bb4 <PrintServerPrintf>
    float theta_ref = 0;
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    float theta_actual = 0;
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    int sample_counter = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28

    float d;
    float q;

    PHASE_ORDER = 0;
 80026de:	4ba4      	ldr	r3, [pc, #656]	; (8002970 <order_phases+0x2b4>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]

    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 80026e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ec:	ee17 3a90 	vmov	r3, s15
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	4a9f      	ldr	r2, [pc, #636]	; (8002970 <order_phases+0x2b4>)
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	2164      	movs	r1, #100	; 0x64
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fe57 	bl	80023ac <inverter>
    HAL_Delay(1000);
 80026fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002702:	f002 ff91 	bl	8005628 <HAL_Delay>
    //float theta_start = ps->GetMechPositionFixed();                                  //get initial rotor position
    float theta_start;

    //current d and q
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8002706:	4b9b      	ldr	r3, [pc, #620]	; (8002974 <order_phases+0x2b8>)
 8002708:	ed93 7a00 	vldr	s14, [r3]
 800270c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002714:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002978 <order_phases+0x2bc>
 8002718:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002728:	ed9f 6a94 	vldr	s12, [pc, #592]	; 800297c <order_phases+0x2c0>
 800272c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273c:	eddf 5a8f 	vldr	s11, [pc, #572]	; 800297c <order_phases+0x2c0>
 8002740:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002750:	ed9f 5a8a 	vldr	s10, [pc, #552]	; 800297c <order_phases+0x2c0>
 8002754:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002758:	f107 020c 	add.w	r2, r7, #12
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	eef0 1a65 	vmov.f32	s3, s11
 8002768:	eeb0 1a46 	vmov.f32	s2, s12
 800276c:	eef0 0a66 	vmov.f32	s1, s13
 8002770:	eeb0 0a47 	vmov.f32	s0, s14
 8002774:	f001 fd50 	bl	8004218 <dq0>
//    controller->i_b = I_SCALE*(float)(controller->adc2_raw - controller->adc2_offset);    //Calculate phase currents from ADC readings
//    controller->i_c = I_SCALE*(float)(controller->adc1_raw - controller->adc1_offset);
//    controller->i_a = -controller->i_b - controller->i_c;
//    dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
    float current = sqrt((d*d + q*q));
 8002778:	ed97 7a04 	vldr	s14, [r7, #16]
 800277c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002784:	edd7 6a03 	vldr	s13, [r7, #12]
 8002788:	edd7 7a03 	vldr	s15, [r7, #12]
 800278c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002794:	ee17 0a90 	vmov	r0, s15
 8002798:	f7fd fefe 	bl	8000598 <__aeabi_f2d>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	ec43 2b10 	vmov	d0, r2, r3
 80027a4:	f00a fedc 	bl	800d560 <sqrt>
 80027a8:	ec53 2b10 	vmov	r2, r3, d0
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe fa42 	bl	8000c38 <__aeabi_d2f>
 80027b4:	4603      	mov	r3, r0
 80027b6:	61bb      	str	r3, [r7, #24]
    PrintServerPrintf("\n\rCurrent\n\r");
 80027b8:	4871      	ldr	r0, [pc, #452]	; (8002980 <order_phases+0x2c4>)
 80027ba:	f001 f9fb 	bl	8003bb4 <PrintServerPrintf>
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fee9 	bl	8000598 <__aeabi_f2d>
 80027c6:	4680      	mov	r8, r0
 80027c8:	4689      	mov	r9, r1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fee3 	bl	8000598 <__aeabi_f2d>
 80027d2:	4604      	mov	r4, r0
 80027d4:	460d      	mov	r5, r1
 80027d6:	69b8      	ldr	r0, [r7, #24]
 80027d8:	f7fd fede 	bl	8000598 <__aeabi_f2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027e4:	e9cd 4500 	strd	r4, r5, [sp]
 80027e8:	4642      	mov	r2, r8
 80027ea:	464b      	mov	r3, r9
 80027ec:	4865      	ldr	r0, [pc, #404]	; (8002984 <order_phases+0x2c8>)
 80027ee:	f001 f9e1 	bl	8003bb4 <PrintServerPrintf>
    /// Rotate voltage angle
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 80027f2:	e045      	b.n	8002880 <order_phases+0x1c4>
    	inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 80027f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80027f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027fc:	ee17 3a90 	vmov	r3, s15
 8002800:	b21b      	sxth	r3, r3
 8002802:	4a5b      	ldr	r2, [pc, #364]	; (8002970 <order_phases+0x2b4>)
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	2164      	movs	r1, #100	; 0x64
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fdcf 	bl	80023ac <inverter>
    	HAL_Delay(1);
 800280e:	2001      	movs	r0, #1
 8002810:	f002 ff0a 	bl	8005628 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002820:	eddf 6a56 	vldr	s13, [pc, #344]	; 800297c <order_phases+0x2c0>
 8002824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002828:	edc7 7a07 	vstr	s15, [r7, #28]
       if(theta_ref==0){theta_start = theta_actual;}
 800282c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002830:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002838:	d101      	bne.n	800283e <order_phases+0x182>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
       if(sample_counter >= 1){
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	dd12      	ble.n	800286a <order_phases+0x1ae>
           sample_counter = 0 ;
 8002844:	2300      	movs	r3, #0
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
           PrintServerPrintf("%.4f %.4f\n\r", (float)theta_ref, theta_actual);
 8002848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800284a:	f7fd fea5 	bl	8000598 <__aeabi_f2d>
 800284e:	4604      	mov	r4, r0
 8002850:	460d      	mov	r5, r1
 8002852:	69f8      	ldr	r0, [r7, #28]
 8002854:	f7fd fea0 	bl	8000598 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	e9cd 2300 	strd	r2, r3, [sp]
 8002860:	4622      	mov	r2, r4
 8002862:	462b      	mov	r3, r5
 8002864:	4848      	ldr	r0, [pc, #288]	; (8002988 <order_phases+0x2cc>)
 8002866:	f001 f9a5 	bl	8003bb4 <PrintServerPrintf>
        }
        sample_counter++;
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	3301      	adds	r3, #1
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
       theta_ref += 1;
 8002870:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800287c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002880:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002884:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800298c <order_phases+0x2d0>
 8002888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002890:	d4b0      	bmi.n	80027f4 <order_phases+0x138>
        }
    float theta_end = (float)ps->Encoder1_pos/1000;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800297c <order_phases+0x2c0>
 80028a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028a6:	edc7 7a05 	vstr	s15, [r7, #20]
    int direction = (theta_end - theta_start)>0;
 80028aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80028ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	bfcc      	ite	gt
 80028c0:	2301      	movgt	r3, #1
 80028c2:	2300      	movle	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) > 180) direction = 0;
 80028c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80028cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002978 <order_phases+0x2bc>
 80028d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	dd01      	ble.n	80028e6 <order_phases+0x22a>
 80028e2:	2300      	movs	r3, #0
 80028e4:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) < -180) direction = 1;
 80028e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80028ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002990 <order_phases+0x2d4>
 80028f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fe:	d501      	bpl.n	8002904 <order_phases+0x248>
 8002900:	2301      	movs	r3, #1
 8002902:	623b      	str	r3, [r7, #32]
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 8002904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002906:	f7fd fe47 	bl	8000598 <__aeabi_f2d>
 800290a:	4604      	mov	r4, r0
 800290c:	460d      	mov	r5, r1
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7fd fe42 	bl	8000598 <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	e9cd 2300 	strd	r2, r3, [sp]
 800291c:	4622      	mov	r2, r4
 800291e:	462b      	mov	r3, r5
 8002920:	481c      	ldr	r0, [pc, #112]	; (8002994 <order_phases+0x2d8>)
 8002922:	f001 f947 	bl	8003bb4 <PrintServerPrintf>
    PrintServerPrintf("Direction:  %d\n\r", direction);
 8002926:	6a39      	ldr	r1, [r7, #32]
 8002928:	481b      	ldr	r0, [pc, #108]	; (8002998 <order_phases+0x2dc>)
 800292a:	f001 f943 	bl	8003bb4 <PrintServerPrintf>
    if(direction){PrintServerPrintf("Phasing correct\n\r");}
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <order_phases+0x280>
 8002934:	4819      	ldr	r0, [pc, #100]	; (800299c <order_phases+0x2e0>)
 8002936:	f001 f93d 	bl	8003bb4 <PrintServerPrintf>
 800293a:	e005      	b.n	8002948 <order_phases+0x28c>
    else if(!direction){PrintServerPrintf("Phasing incorrect.  Swapping phases V and W\n\r");}
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <order_phases+0x28c>
 8002942:	4817      	ldr	r0, [pc, #92]	; (80029a0 <order_phases+0x2e4>)
 8002944:	f001 f936 	bl	8003bb4 <PrintServerPrintf>
    PHASE_ORDER = !direction;
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2b00      	cmp	r3, #0
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <order_phases+0x2b4>)
 8002958:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 800295a:	200a      	movs	r0, #10
 800295c:	f002 fe64 	bl	8005628 <HAL_Delay>
    }
 8002960:	bf00      	nop
 8002962:	3730      	adds	r7, #48	; 0x30
 8002964:	46bd      	mov	sp, r7
 8002966:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800296a:	bf00      	nop
 800296c:	0800f5c8 	.word	0x0800f5c8
 8002970:	20000f14 	.word	0x20000f14
 8002974:	20000088 	.word	0x20000088
 8002978:	43340000 	.word	0x43340000
 800297c:	447a0000 	.word	0x447a0000
 8002980:	0800f5e8 	.word	0x0800f5e8
 8002984:	0800f5f4 	.word	0x0800f5f4
 8002988:	0800f604 	.word	0x0800f604
 800298c:	44340000 	.word	0x44340000
 8002990:	c3340000 	.word	0xc3340000
 8002994:	0800f610 	.word	0x0800f610
 8002998:	0800f638 	.word	0x0800f638
 800299c:	0800f64c 	.word	0x0800f64c
 80029a0:	0800f660 	.word	0x0800f660
 80029a4:	00000000 	.word	0x00000000

080029a8 <calibrate>:


void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 80029a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ac:	b0cb      	sub	sp, #300	; 0x12c
 80029ae:	af04      	add	r7, sp, #16
 80029b0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80029b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80029b4:	466b      	mov	r3, sp
 80029b6:	461e      	mov	r6, r3
    /// Measures the electrical angle offset of the position sensor
    /// and (in the future) corrects nonlinearity due to position sensor eccentricity
	PrintServerPrintf("Starting calibration procedure\n\r");
 80029b8:	48eb      	ldr	r0, [pc, #940]	; (8002d68 <calibrate+0x3c0>)
 80029ba:	f001 f8fb 	bl	8003bb4 <PrintServerPrintf>

   const int n = SIZE*NPP;                                                      // number of positions to be sampled per mechanical rotation.  Multiple of NPP for filtering reasons (see later)
 80029be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80029c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   const int n2 = 40;                                                          // increments between saved samples (for smoothing motion)
 80029c6:	2328      	movs	r3, #40	; 0x28
 80029c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   float delta = 360.0f*NPP/(n*n2);                                              // change in angle between samples
 80029cc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80029d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e0:	eddf 6ae2 	vldr	s13, [pc, #904]	; 8002d6c <calibrate+0x3c4>
 80029e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e8:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
   const int  n_lut =  SIZE*NPP;
 80029ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80029f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   const int window = WINDOW_SIZE;
 80029f4:	2310      	movs	r3, #16
 80029f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   float cogging_current[WINDOW_SIZE] = {0};
 80029fa:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80029fe:	2340      	movs	r3, #64	; 0x40
 8002a00:	461a      	mov	r2, r3
 8002a02:	2100      	movs	r1, #0
 8002a04:	f008 fc84 	bl	800b310 <memset>


   float theta_ref = 0;
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   float theta_actual = 0;
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

   float d;
   float q;


    float error_f[n];
 8002a18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a26:	2200      	movs	r2, #0
 8002a28:	461c      	mov	r4, r3
 8002a2a:	4615      	mov	r5, r2
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	016b      	lsls	r3, r5, #5
 8002a36:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002a3a:	0162      	lsls	r2, r4, #5
 8002a3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a40:	2200      	movs	r2, #0
 8002a42:	4698      	mov	r8, r3
 8002a44:	4691      	mov	r9, r2
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002a52:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002a56:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002a5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	3307      	adds	r3, #7
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	ebad 0d03 	sub.w	sp, sp, r3
 8002a6a:	ab04      	add	r3, sp, #16
 8002a6c:	3303      	adds	r3, #3
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    float error_b[n];
 8002a76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a84:	2200      	movs	r2, #0
 8002a86:	469a      	mov	sl, r3
 8002a88:	4693      	mov	fp, r2
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002a96:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002a9a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002a9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa6:	647a      	str	r2, [r7, #68]	; 0x44
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	014b      	lsls	r3, r1, #5
 8002ab8:	4621      	mov	r1, r4
 8002aba:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002abe:	4621      	mov	r1, r4
 8002ac0:	014a      	lsls	r2, r1, #5
 8002ac2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	3307      	adds	r3, #7
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	ebad 0d03 	sub.w	sp, sp, r3
 8002ad2:	ab04      	add	r3, sp, #16
 8002ad4:	3303      	adds	r3, #3
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int lut[n];
 8002ade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ae8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002aec:	2200      	movs	r2, #0
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002afe:	4629      	mov	r1, r5
 8002b00:	014b      	lsls	r3, r1, #5
 8002b02:	4621      	mov	r1, r4
 8002b04:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002b08:	4621      	mov	r1, r4
 8002b0a:	014a      	lsls	r2, r1, #5
 8002b0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b10:	2200      	movs	r2, #0
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
 8002b14:	637a      	str	r2, [r7, #52]	; 0x34
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b22:	4629      	mov	r1, r5
 8002b24:	014b      	lsls	r3, r1, #5
 8002b26:	4621      	mov	r1, r4
 8002b28:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	014a      	lsls	r2, r1, #5
 8002b30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3307      	adds	r3, #7
 8002b38:	08db      	lsrs	r3, r3, #3
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	ebad 0d03 	sub.w	sp, sp, r3
 8002b40:	ab04      	add	r3, sp, #16
 8002b42:	3303      	adds	r3, #3
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    int raw_f[n];
 8002b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b50:	3b01      	subs	r3, #1
 8002b52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	014b      	lsls	r3, r1, #5
 8002b70:	4621      	mov	r1, r4
 8002b72:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002b76:	4621      	mov	r1, r4
 8002b78:	014a      	lsls	r2, r1, #5
 8002b7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b7e:	2200      	movs	r2, #0
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	627a      	str	r2, [r7, #36]	; 0x24
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b90:	4629      	mov	r1, r5
 8002b92:	014b      	lsls	r3, r1, #5
 8002b94:	4621      	mov	r1, r4
 8002b96:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	014a      	lsls	r2, r1, #5
 8002b9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	3307      	adds	r3, #7
 8002ba6:	08db      	lsrs	r3, r3, #3
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	ebad 0d03 	sub.w	sp, sp, r3
 8002bae:	ab04      	add	r3, sp, #16
 8002bb0:	3303      	adds	r3, #3
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    int raw_b[n];
 8002bba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bc8:	2200      	movs	r2, #0
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	61fa      	str	r2, [r7, #28]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002bda:	4629      	mov	r1, r5
 8002bdc:	014b      	lsls	r3, r1, #5
 8002bde:	4621      	mov	r1, r4
 8002be0:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002be4:	4621      	mov	r1, r4
 8002be6:	014a      	lsls	r2, r1, #5
 8002be8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bec:	2200      	movs	r2, #0
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	617a      	str	r2, [r7, #20]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	014b      	lsls	r3, r1, #5
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002c08:	4621      	mov	r1, r4
 8002c0a:	014a      	lsls	r2, r1, #5
 8002c0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	3307      	adds	r3, #7
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	ebad 0d03 	sub.w	sp, sp, r3
 8002c1c:	ab04      	add	r3, sp, #16
 8002c1e:	3303      	adds	r3, #3
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float error[n];
 8002c28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c36:	2200      	movs	r2, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	60fa      	str	r2, [r7, #12]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c48:	4629      	mov	r1, r5
 8002c4a:	014b      	lsls	r3, r1, #5
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002c52:	4621      	mov	r1, r4
 8002c54:	014a      	lsls	r2, r1, #5
 8002c56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	014b      	lsls	r3, r1, #5
 8002c70:	4621      	mov	r1, r4
 8002c72:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002c76:	4621      	mov	r1, r4
 8002c78:	014a      	lsls	r2, r1, #5
 8002c7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3307      	adds	r3, #7
 8002c82:	08db      	lsrs	r3, r3, #3
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	ebad 0d03 	sub.w	sp, sp, r3
 8002c8a:	ab04      	add	r3, sp, #16
 8002c8c:	3303      	adds	r3, #3
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4




    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002c96:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c9e:	ee17 3a90 	vmov	r3, s15
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	4a32      	ldr	r2, [pc, #200]	; (8002d70 <calibrate+0x3c8>)
 8002ca6:	7812      	ldrb	r2, [r2, #0]
 8002ca8:	2164      	movs	r1, #100	; 0x64
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fb7e 	bl	80023ac <inverter>
    HAL_Delay(1000);
 8002cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cb4:	f002 fcb8 	bl	8005628 <HAL_Delay>

    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <calibrate+0x3cc>)
 8002cba:	ed93 7a00 	vldr	s14, [r3]
 8002cbe:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc6:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002d78 <calibrate+0x3d0>
 8002cca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cda:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8002d7c <calibrate+0x3d4>
 8002cde:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cee:	eddf 5a23 	vldr	s11, [pc, #140]	; 8002d7c <calibrate+0x3d4>
 8002cf2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d02:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8002d7c <calibrate+0x3d4>
 8002d06:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002d0a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002d0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	eef0 1a65 	vmov.f32	s3, s11
 8002d1a:	eeb0 1a46 	vmov.f32	s2, s12
 8002d1e:	eef0 0a66 	vmov.f32	s1, s13
 8002d22:	eeb0 0a47 	vmov.f32	s0, s14
 8002d26:	f001 fa77 	bl	8004218 <dq0>
    float current = sqrt((d*d + q*q));
 8002d2a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002d2e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d36:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002d3a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d46:	ee17 0a90 	vmov	r0, s15
 8002d4a:	f7fd fc25 	bl	8000598 <__aeabi_f2d>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	ec43 2b10 	vmov	d0, r2, r3
 8002d56:	f00a fc03 	bl	800d560 <sqrt>
 8002d5a:	ec53 2b10 	vmov	r2, r3, d0
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f7fd ff69 	bl	8000c38 <__aeabi_d2f>
 8002d66:	e00b      	b.n	8002d80 <calibrate+0x3d8>
 8002d68:	0800f690 	.word	0x0800f690
 8002d6c:	45bf4000 	.word	0x45bf4000
 8002d70:	20000f14 	.word	0x20000f14
 8002d74:	20000088 	.word	0x20000088
 8002d78:	43340000 	.word	0x43340000
 8002d7c:	447a0000 	.word	0x447a0000
 8002d80:	4603      	mov	r3, r0
 8002d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    PrintServerPrintf("Current Angle : Rotor Angle : Raw Encoder \n\r\n\r");
 8002d86:	48d4      	ldr	r0, [pc, #848]	; (80030d8 <calibrate+0x730>)
 8002d88:	f000 ff14 	bl	8003bb4 <PrintServerPrintf>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002d92:	e094      	b.n	8002ebe <calibrate+0x516>
       for(int j = 0; j<n2; j++){
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002d9a:	e084      	b.n	8002ea6 <calibrate+0x4fe>
        theta_ref += delta;
 8002d9c:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8002da0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da8:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
        inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002dac:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db4:	ee17 3a90 	vmov	r3, s15
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	4ac8      	ldr	r2, [pc, #800]	; (80030dc <calibrate+0x734>)
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	2164      	movs	r1, #100	; 0x64
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff faf3 	bl	80023ac <inverter>
        HAL_Delay(1);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f002 fc2e 	bl	8005628 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 8002dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	ee07 3a90 	vmov	s15, r3
 8002dd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dd8:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80030e0 <calibrate+0x738>
 8002ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002de0:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
       error_f[i] = theta_ref/NPP - theta_actual;
 8002de4:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002de8:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8002dec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002df0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002dfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	edc3 7a00 	vstr	s15, [r3]
	   if(error_f[i] < 0)error_f [i] = error_f[i]+ 360.0f;
 8002e08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e20:	d513      	bpl.n	8002e4a <calibrate+0x4a2>
 8002e22:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80030e4 <calibrate+0x73c>
 8002e36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e3a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	edc3 7a00 	vstr	s15, [r3]
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
 8002e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e54:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8002e5c:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002e60:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002e64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e68:	ee16 0a90 	vmov	r0, s13
 8002e6c:	f7fd fb94 	bl	8000598 <__aeabi_f2d>
 8002e70:	4604      	mov	r4, r0
 8002e72:	460d      	mov	r5, r1
 8002e74:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002e78:	f7fd fb8e 	bl	8000598 <__aeabi_f2d>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8002e84:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002e88:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002e8c:	9102      	str	r1, [sp, #8]
 8002e8e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e92:	4622      	mov	r2, r4
 8002e94:	462b      	mov	r3, r5
 8002e96:	4894      	ldr	r0, [pc, #592]	; (80030e8 <calibrate+0x740>)
 8002e98:	f000 fe8c 	bl	8003bb4 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8002e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002ea6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	f6ff af74 	blt.w	8002d9c <calibrate+0x3f4>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8002eb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002ebe:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002ec2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	f6ff af64 	blt.w	8002d94 <calibrate+0x3ec>
        }
    }

    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002ed2:	e094      	b.n	8002ffe <calibrate+0x656>
       for(int j = 0; j<n2; j++){
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002eda:	e084      	b.n	8002fe6 <calibrate+0x63e>
       theta_ref -= delta;
 8002edc:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8002ee0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee8:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
       inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002eec:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ef4:	ee17 3a90 	vmov	r3, s15
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	4a78      	ldr	r2, [pc, #480]	; (80030dc <calibrate+0x734>)
 8002efc:	7812      	ldrb	r2, [r2, #0]
 8002efe:	2164      	movs	r1, #100	; 0x64
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fa53 	bl	80023ac <inverter>
       HAL_Delay(1);                                                         // sample position sensor
 8002f06:	2001      	movs	r0, #1
 8002f08:	f002 fb8e 	bl	8005628 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 8002f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	ee07 3a90 	vmov	s15, r3
 8002f14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f18:	eddf 6a71 	vldr	s13, [pc, #452]	; 80030e0 <calibrate+0x738>
 8002f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f20:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
       error_b[i] = theta_ref/NPP - theta_actual;
 8002f24:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002f28:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8002f2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f30:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	edc3 7a00 	vstr	s15, [r3]
       if(error_b[i] < 0)error_b[i] = error_b[i]+ 360.0f;
 8002f48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	d513      	bpl.n	8002f8a <calibrate+0x5e2>
 8002f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80030e4 <calibrate+0x73c>
 8002f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	edc3 7a00 	vstr	s15, [r3]
       raw_b[i] =  ps->Encoder1_pos_raw;
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f94:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 8002f9c:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002fa0:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002fa4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fa8:	ee16 0a90 	vmov	r0, s13
 8002fac:	f7fd faf4 	bl	8000598 <__aeabi_f2d>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	460d      	mov	r5, r1
 8002fb4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002fb8:	f7fd faee 	bl	8000598 <__aeabi_f2d>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002fc4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002fc8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002fcc:	9102      	str	r1, [sp, #8]
 8002fce:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	462b      	mov	r3, r5
 8002fd6:	4845      	ldr	r0, [pc, #276]	; (80030ec <calibrate+0x744>)
 8002fd8:	f000 fdec 	bl	8003bb4 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8002fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fe6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	f6ff af74 	blt.w	8002edc <calibrate+0x534>
    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8002ff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002ffe:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003002:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003006:	429a      	cmp	r2, r3
 8003008:	f6ff af64 	blt.w	8002ed4 <calibrate+0x52c>
       //theta_ref -= delta;
        }
    }

        electrical_offset = 0;
 800300c:	4b38      	ldr	r3, [pc, #224]	; (80030f0 <calibrate+0x748>)
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
        for(int i = 0; i<n; i++){
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800301a:	e02c      	b.n	8003076 <calibrate+0x6ce>
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 800301c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003020:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	ed93 7a00 	vldr	s14, [r3]
 800302c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003030:	1e5a      	subs	r2, r3, #1
 8003032:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003048:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800304c:	ee07 3a90 	vmov	s15, r3
 8003050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003054:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <calibrate+0x748>)
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <calibrate+0x748>)
 8003068:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i<n; i++){
 800306c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003070:	3301      	adds	r3, #1
 8003072:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003076:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800307a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800307e:	429a      	cmp	r2, r3
 8003080:	dbcc      	blt.n	800301c <calibrate+0x674>
            }
        electrical_offset = fmod(electrical_offset*NPP, 360);                                        // convert mechanical angle to electrical angle
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <calibrate+0x748>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800308c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003090:	ee17 0a90 	vmov	r0, s15
 8003094:	f7fd fa80 	bl	8000598 <__aeabi_f2d>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 80030d0 <calibrate+0x728>
 80030a0:	ec43 2b10 	vmov	d0, r2, r3
 80030a4:	f00a fa2e 	bl	800d504 <fmod>
 80030a8:	ec53 2b10 	vmov	r2, r3, d0
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fd fdc2 	bl	8000c38 <__aeabi_d2f>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <calibrate+0x748>)
 80030b8:	6013      	str	r3, [r2, #0]
        /// FIR n-sample average, where n = number of samples in one electrical cycle
        /// This filter has zero gain at electrical frequency and all integer multiples
        /// So cogging effects should be completely filtered out.


        float mean = 0;
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80030c8:	e03b      	b.n	8003142 <calibrate+0x79a>
 80030ca:	bf00      	nop
 80030cc:	f3af 8000 	nop.w
 80030d0:	00000000 	.word	0x00000000
 80030d4:	40768000 	.word	0x40768000
 80030d8:	0800f6b4 	.word	0x0800f6b4
 80030dc:	20000f14 	.word	0x20000f14
 80030e0:	447a0000 	.word	0x447a0000
 80030e4:	43b40000 	.word	0x43b40000
 80030e8:	0800f6e4 	.word	0x0800f6e4
 80030ec:	0800f6f4 	.word	0x0800f6f4
 80030f0:	20000f18 	.word	0x20000f18
            error[i] = 0.5f*(error_f[i] + error_b[n-i-1]);
 80030f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80030f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	ed93 7a00 	vldr	s14, [r3]
 8003104:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003108:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003120:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003128:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800312c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8003138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800313c:	3301      	adds	r3, #1
 800313e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003142:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003146:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800314a:	429a      	cmp	r2, r3
 800314c:	dbd2      	blt.n	80030f4 <calibrate+0x74c>
            }
        for (int i = 0; i<n; i++){
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003154:	e09f      	b.n	8003296 <calibrate+0x8ee>
            for(int j = 0; j<window; j++){
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800315c:	e04c      	b.n	80031f8 <calibrate+0x850>
                int ind = -window/2 + j + i;                                    // Indexes from -window/2 to + window/2
 800315e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003162:	0fda      	lsrs	r2, r3, #31
 8003164:	4413      	add	r3, r2
 8003166:	105b      	asrs	r3, r3, #1
 8003168:	425b      	negs	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003170:	4413      	add	r3, r2
 8003172:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003176:	4413      	add	r3, r2
 8003178:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                if(ind<0){
 800317c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003180:	2b00      	cmp	r3, #0
 8003182:	da07      	bge.n	8003194 <calibrate+0x7ec>
                    ind += n;}                                                  // Moving average wraps around
 8003184:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003188:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800318c:	4413      	add	r3, r2
 800318e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003192:	e00c      	b.n	80031ae <calibrate+0x806>
                else if(ind > n-1) {
 8003194:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003198:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800319c:	429a      	cmp	r2, r3
 800319e:	dc06      	bgt.n	80031ae <calibrate+0x806>
                    ind -= n;}
 80031a0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80031a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                if(error[ind] == NAN)while(1);
                error_filt[i] += error[ind]/(float)window;
 80031ae:	4a4e      	ldr	r2, [pc, #312]	; (80032e8 <calibrate+0x940>)
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	ed93 7a00 	vldr	s14, [r3]
 80031bc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80031c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	ed93 6a00 	vldr	s12, [r3]
 80031cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031d8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80031dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e0:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <calibrate+0x940>)
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	edc3 7a00 	vstr	s15, [r3]
            for(int j = 0; j<window; j++){
 80031ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031f2:	3301      	adds	r3, #1
 80031f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80031f8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80031fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003200:	429a      	cmp	r2, r3
 8003202:	dbac      	blt.n	800315e <calibrate+0x7b6>
                if(error_filt[i] == NAN)while(1);
                }
            if(i<window){
 8003204:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800320c:	429a      	cmp	r2, r3
 800320e:	da28      	bge.n	8003262 <calibrate+0x8ba>
                cogging_current[i] = current*sinf((error[i] - error_filt[i])*NPP);
 8003210:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	ed93 7a00 	vldr	s14, [r3]
 8003220:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <calibrate+0x940>)
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003232:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8003236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800323a:	eeb0 0a67 	vmov.f32	s0, s15
 800323e:	f00a fa67 	bl	800d710 <sinf>
 8003242:	eeb0 7a40 	vmov.f32	s14, s0
 8003246:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800324a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	33d0      	adds	r3, #208	; 0xd0
 8003256:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800325a:	4413      	add	r3, r2
 800325c:	3bbc      	subs	r3, #188	; 0xbc
 800325e:	edc3 7a00 	vstr	s15, [r3]
                }
//            PrintServerPrintf("%.4f   %4f    %.4f   %.4f\n\r", error[i], error_filt[i], error_f[i], error_b[i]);
//            HAL_Delay(10);
            mean += error_filt[i]/n;
 8003262:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <calibrate+0x940>)
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	edd3 6a00 	vldr	s13, [r3]
 8003270:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800327c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003280:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 8003284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003288:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
        for (int i = 0; i<n; i++){
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	3301      	adds	r3, #1
 8003292:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003296:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800329a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800329e:	429a      	cmp	r2, r3
 80032a0:	f6ff af59 	blt.w	8003156 <calibrate+0x7ae>
            }
        int raw_offset = (raw_f[0] + raw_b[n-1])/2;                             //Insensitive to errors in this direction, so 2 points is plenty
 80032a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032ae:	1e59      	subs	r1, r3, #1
 80032b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032b8:	4413      	add	r3, r2
 80032ba:	0fda      	lsrs	r2, r3, #31
 80032bc:	4413      	add	r3, r2
 80032be:	105b      	asrs	r3, r3, #1
 80032c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

//        ps->WriteLUT(lut);                                                      // write lookup table to position sensor object
        //memcpy(controller->cogging, cogging_current, sizeof(controller->cogging));  //compensation doesn't actually work yet....

//        memcpy(&ENCODER_LUT, lut, 128*4);                                 // copy the lookup table to the flash array
        PrintServerPrintf("\n\rEncoder Electrical Offset (deg) %f\n\r",  electrical_offset);
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <calibrate+0x944>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f965 	bl	8000598 <__aeabi_f2d>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4807      	ldr	r0, [pc, #28]	; (80032f0 <calibrate+0x948>)
 80032d4:	f000 fc6e 	bl	8003bb4 <PrintServerPrintf>
 80032d8:	46b5      	mov	sp, r6
//        for (int i = 0; i<LUT_SIZE; i++){
//        	float wanted_pos = i *360.0f / LUT_SIZE;
//        	motor_lut[i] = find_closest(error_test, SIZE*NPP, wanted_pos);
//        	PrintServerPrintf("%d\n\r", motor_lut[i]);
//        }
    }
 80032da:	bf00      	nop
 80032dc:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e6:	bf00      	nop
 80032e8:	20000ad4 	.word	0x20000ad4
 80032ec:	20000f18 	.word	0x20000f18
 80032f0:	0800f704 	.word	0x0800f704

080032f4 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80032fc:	2201      	movs	r2, #1
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	4815      	ldr	r0, [pc, #84]	; (8003358 <ORBIS_init+0x64>)
 8003302:	f004 f9b9 	bl	8007678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8003306:	2201      	movs	r2, #1
 8003308:	2104      	movs	r1, #4
 800330a:	4814      	ldr	r0, [pc, #80]	; (800335c <ORBIS_init+0x68>)
 800330c:	f004 f9b4 	bl	8007678 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <ORBIS_init+0x6c>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <ORBIS_init+0x70>)
 8003318:	2274      	movs	r2, #116	; 0x74
 800331a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	2140      	movs	r1, #64	; 0x40
 8003320:	480d      	ldr	r0, [pc, #52]	; (8003358 <ORBIS_init+0x64>)
 8003322:	f004 f9a9 	bl	8007678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	2104      	movs	r1, #4
 800332a:	480c      	ldr	r0, [pc, #48]	; (800335c <ORBIS_init+0x68>)
 800332c:	f004 f9a4 	bl	8007678 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8003330:	2305      	movs	r3, #5
 8003332:	4a0d      	ldr	r2, [pc, #52]	; (8003368 <ORBIS_init+0x74>)
 8003334:	490b      	ldr	r1, [pc, #44]	; (8003364 <ORBIS_init+0x70>)
 8003336:	480d      	ldr	r0, [pc, #52]	; (800336c <ORBIS_init+0x78>)
 8003338:	f005 f9a4 	bl	8008684 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 800333c:	2305      	movs	r3, #5
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <ORBIS_init+0x7c>)
 8003340:	490c      	ldr	r1, [pc, #48]	; (8003374 <ORBIS_init+0x80>)
 8003342:	480d      	ldr	r0, [pc, #52]	; (8003378 <ORBIS_init+0x84>)
 8003344:	f005 f99e 	bl	8008684 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 8003348:	480c      	ldr	r0, [pc, #48]	; (800337c <ORBIS_init+0x88>)
 800334a:	f005 fd2b 	bl	8008da4 <HAL_TIM_Base_Start_IT>

}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	48000400 	.word	0x48000400
 800335c:	48000c00 	.word	0x48000c00
 8003360:	20000f3c 	.word	0x20000f3c
 8003364:	20000f1c 	.word	0x20000f1c
 8003368:	20000f24 	.word	0x20000f24
 800336c:	20001c54 	.word	0x20001c54
 8003370:	20000f34 	.word	0x20000f34
 8003374:	20000f2c 	.word	0x20000f2c
 8003378:	20001cb8 	.word	0x20001cb8
 800337c:	20001d6c 	.word	0x20001d6c

08003380 <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a73      	ldr	r2, [pc, #460]	; (8003558 <HAL_SPI_TxRxCpltCallback+0x1d8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	f040 80bb 	bne.w	8003508 <HAL_SPI_TxRxCpltCallback+0x188>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8003392:	2201      	movs	r2, #1
 8003394:	2140      	movs	r1, #64	; 0x40
 8003396:	4871      	ldr	r0, [pc, #452]	; (800355c <HAL_SPI_TxRxCpltCallback+0x1dc>)
 8003398:	f004 f96e 	bl	8007678 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 800339c:	4b70      	ldr	r3, [pc, #448]	; (8003560 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b70      	ldr	r3, [pc, #448]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80033a4:	611a      	str	r2, [r3, #16]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80033a6:	4b6e      	ldr	r3, [pc, #440]	; (8003560 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	019b      	lsls	r3, r3, #6
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b6c      	ldr	r3, [pc, #432]	; (8003560 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	4a68      	ldr	r2, [pc, #416]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80033c4:	6013      	str	r3, [r2, #0]
		data_encoders.Encoder1_pos_raw = (uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2);
 80033c6:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	019b      	lsls	r3, r3, #6
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b64      	ldr	r3, [pc, #400]	; (8003560 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	4313      	orrs	r3, r2
 80033d8:	4a62      	ldr	r2, [pc, #392]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80033da:	6093      	str	r3, [r2, #8]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	4a60      	ldr	r2, [pc, #384]	; (800356c <HAL_SPI_TxRxCpltCallback+0x1ec>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	dd10      	ble.n	8003410 <HAL_SPI_TxRxCpltCallback+0x90>
 80033ee:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 80033fe:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800340a:	edc7 7a03 	vstr	s15, [r7, #12]
 800340e:	e025      	b.n	800345c <HAL_SPI_TxRxCpltCallback+0xdc>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8003410:	4b54      	ldr	r3, [pc, #336]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	4b54      	ldr	r3, [pc, #336]	; (8003568 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	4a54      	ldr	r2, [pc, #336]	; (8003570 <HAL_SPI_TxRxCpltCallback+0x1f0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	da10      	bge.n	8003444 <HAL_SPI_TxRxCpltCallback+0xc4>
 8003422:	4b50      	ldr	r3, [pc, #320]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	4b4f      	ldr	r3, [pc, #316]	; (8003568 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8003432:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800343e:	edc7 7a03 	vstr	s15, [r7, #12]
 8003442:	e00b      	b.n	800345c <HAL_SPI_TxRxCpltCallback+0xdc>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 8003444:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003458:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 800345c:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8003464:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 8003466:	4b43      	ldr	r3, [pc, #268]	; (8003574 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003468:	ed93 7a00 	vldr	s14, [r3]
 800346c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003476:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 800347a:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 800347c:	ed93 7a00 	vldr	s14, [r3]
 8003480:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	4a3d      	ldr	r2, [pc, #244]	; (800357c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003492:	4b38      	ldr	r3, [pc, #224]	; (8003574 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003494:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 8003498:	4b37      	ldr	r3, [pc, #220]	; (8003578 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	4a37      	ldr	r2, [pc, #220]	; (800357c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	601a      	str	r2, [r3, #0]
		velocity_index++;
 80034a6:	4b34      	ldr	r3, [pc, #208]	; (8003578 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4b32      	ldr	r3, [pc, #200]	; (8003578 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80034b0:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d102      	bne.n	80034c0 <HAL_SPI_TxRxCpltCallback+0x140>
 80034ba:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 80034c0:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003580 <HAL_SPI_TxRxCpltCallback+0x200>
 80034ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ce:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003584 <HAL_SPI_TxRxCpltCallback+0x204>
 80034d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d6:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003588 <HAL_SPI_TxRxCpltCallback+0x208>
 80034da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034de:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800358c <HAL_SPI_TxRxCpltCallback+0x20c>
 80034e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ea:	ee17 2a90 	vmov	r2, s15
 80034ee:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80034f0:	615a      	str	r2, [r3, #20]
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80034f4:	789b      	ldrb	r3, [r3, #2]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	b21a      	sxth	r2, r3
 80034fa:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80034fc:	78db      	ldrb	r3, [r3, #3]
 80034fe:	b21b      	sxth	r3, r3
 8003500:	4313      	orrs	r3, r2
 8003502:	b21a      	sxth	r2, r3
 8003504:	4b17      	ldr	r3, [pc, #92]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003506:	831a      	strh	r2, [r3, #24]
	}
	if (hspi == &hspi3) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a21      	ldr	r2, [pc, #132]	; (8003590 <HAL_SPI_TxRxCpltCallback+0x210>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d11a      	bne.n	8003546 <HAL_SPI_TxRxCpltCallback+0x1c6>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8003510:	2201      	movs	r2, #1
 8003512:	2104      	movs	r1, #4
 8003514:	481f      	ldr	r0, [pc, #124]	; (8003594 <HAL_SPI_TxRxCpltCallback+0x214>)
 8003516:	f004 f8af 	bl	8007678 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 800351a:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <HAL_SPI_TxRxCpltCallback+0x218>)
 800351c:	78db      	ldrb	r3, [r3, #3]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	b21a      	sxth	r2, r3
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_SPI_TxRxCpltCallback+0x218>)
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	b21b      	sxth	r3, r3
 8003528:	4313      	orrs	r3, r2
 800352a:	b21a      	sxth	r2, r3
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800352e:	835a      	strh	r2, [r3, #26]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_SPI_TxRxCpltCallback+0x218>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_SPI_TxRxCpltCallback+0x218>)
 8003538:	7852      	ldrb	r2, [r2, #1]
 800353a:	0892      	lsrs	r2, r2, #2
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	4313      	orrs	r3, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003544:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4806      	ldr	r0, [pc, #24]	; (8003564 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800354c:	4798      	blx	r3
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20001c54 	.word	0x20001c54
 800355c:	48000400 	.word	0x48000400
 8003560:	20000f24 	.word	0x20000f24
 8003564:	20000f40 	.word	0x20000f40
 8003568:	20000f60 	.word	0x20000f60
 800356c:	0002bf20 	.word	0x0002bf20
 8003570:	fffd40e0 	.word	0xfffd40e0
 8003574:	20000f5c 	.word	0x20000f5c
 8003578:	20000f64 	.word	0x20000f64
 800357c:	20000f68 	.word	0x20000f68
 8003580:	461c4000 	.word	0x461c4000
 8003584:	42700000 	.word	0x42700000
 8003588:	43b40000 	.word	0x43b40000
 800358c:	42c80000 	.word	0x42c80000
 8003590:	20001cb8 	.word	0x20001cb8
 8003594:	48000c00 	.word	0x48000c00
 8003598:	20000f34 	.word	0x20000f34
 800359c:	20000f3c 	.word	0x20000f3c

080035a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2140      	movs	r1, #64	; 0x40
 80035ac:	480b      	ldr	r0, [pc, #44]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80035ae:	f004 f863 	bl	8007678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2104      	movs	r1, #4
 80035b6:	480a      	ldr	r0, [pc, #40]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80035b8:	f004 f85e 	bl	8007678 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80035bc:	2305      	movs	r3, #5
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80035c0:	4909      	ldr	r1, [pc, #36]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80035c2:	480a      	ldr	r0, [pc, #40]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80035c4:	f005 f85e 	bl	8008684 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80035c8:	2305      	movs	r3, #5
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80035cc:	4909      	ldr	r1, [pc, #36]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80035ce:	480a      	ldr	r0, [pc, #40]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80035d0:	f005 f858 	bl	8008684 <HAL_SPI_TransmitReceive_DMA>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	48000400 	.word	0x48000400
 80035e0:	48000c00 	.word	0x48000c00
 80035e4:	20000f24 	.word	0x20000f24
 80035e8:	20000f1c 	.word	0x20000f1c
 80035ec:	20001c54 	.word	0x20001c54
 80035f0:	20000f34 	.word	0x20000f34
 80035f4:	20000f2c 	.word	0x20000f2c
 80035f8:	20001cb8 	.word	0x20001cb8

080035fc <flash_write>:

Flash* flash_read(uint32_t address){
    return (Flash*)address;
}

void flash_write(uint32_t page, uint64_t data[], uint32_t size){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
	uint32_t PageError;
	FLASH_EraseInitTypeDef pEraseInit = {
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	2301      	movs	r3, #1
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	2301      	movs	r3, #1
 8003616:	623b      	str	r3, [r7, #32]
			.NbPages = 1,
			.Page = page,
			.TypeErase = FLASH_TYPEERASE_PAGES
	};

	HAL_FLASH_Unlock();
 8003618:	f003 fd8c 	bl	8007134 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 800361c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f003 fe76 	bl	8007318 <HAL_FLASHEx_Erase>

    for(int i = 0; i < size/sizeof(uint64_t); i++){
 800362c:	2300      	movs	r3, #0
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003630:	e014      	b.n	800365c <flash_write+0x60>
    	uint32_t address = FLASH_BASE + PAGE_SIZE*page + i*sizeof(uint64_t);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003638:	021a      	lsls	r2, r3, #8
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4413      	add	r3, r2
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003650:	2000      	movs	r0, #0
 8003652:	f003 fdbf 	bl	80071d4 <HAL_FLASH_Program>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	3301      	adds	r3, #1
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	429a      	cmp	r2, r3
 8003664:	d8e5      	bhi.n	8003632 <flash_write+0x36>
    }
    HAL_FLASH_Lock();
 8003666:	f003 fd79 	bl	800715c <HAL_FLASH_Lock>
}
 800366a:	bf00      	nop
 800366c:	3730      	adds	r7, #48	; 0x30
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <Flash_init>:

void Flash_init(){
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
	if (memcmp(ptr, &RAM, RAM_COMPARE)){
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <Flash_init+0x4c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	225e      	movs	r2, #94	; 0x5e
 800367e:	4911      	ldr	r1, [pc, #68]	; (80036c4 <Flash_init+0x50>)
 8003680:	4618      	mov	r0, r3
 8003682:	f007 fe35 	bl	800b2f0 <memcmp>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00f      	beq.n	80036ac <Flash_init+0x38>
		memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <Flash_init+0x4c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003694:	4619      	mov	r1, r3
 8003696:	480c      	ldr	r0, [pc, #48]	; (80036c8 <Flash_init+0x54>)
 8003698:	f007 feb9 	bl	800b40e <memcpy>
		memcpy(&Stored_in_RAM, &RAM, RAM_COMPARE);
 800369c:	225e      	movs	r2, #94	; 0x5e
 800369e:	4909      	ldr	r1, [pc, #36]	; (80036c4 <Flash_init+0x50>)
 80036a0:	4809      	ldr	r0, [pc, #36]	; (80036c8 <Flash_init+0x54>)
 80036a2:	f007 feb4 	bl	800b40e <memcpy>
		Flash_save();
 80036a6:	f000 f811 	bl	80036cc <Flash_save>
	}
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
}
 80036aa:	e007      	b.n	80036bc <Flash_init+0x48>
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <Flash_init+0x4c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 80036b4:	4619      	mov	r1, r3
 80036b6:	4804      	ldr	r0, [pc, #16]	; (80036c8 <Flash_init+0x54>)
 80036b8:	f007 fea9 	bl	800b40e <memcpy>
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000008c 	.word	0x2000008c
 80036c4:	20000090 	.word	0x20000090
 80036c8:	200010f8 	.word	0x200010f8

080036cc <Flash_save>:

void Flash_save(){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
	flash_write(PAGE_NUMBER, (uint64_t*)&Stored_in_RAM, sizeof(Flash));
 80036d0:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 80036d4:	4902      	ldr	r1, [pc, #8]	; (80036e0 <Flash_save+0x14>)
 80036d6:	203f      	movs	r0, #63	; 0x3f
 80036d8:	f7ff ff90 	bl	80035fc <flash_write>
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200010f8 	.word	0x200010f8

080036e4 <Flash_get_values>:

Flash *Flash_get_values(){
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
	return &Stored_in_RAM; //*ptr;// = flash_read(FLASH_BASE + PAGE_SIZE*PAGE_NUMBER);
 80036e8:	4b02      	ldr	r3, [pc, #8]	; (80036f4 <Flash_get_values+0x10>)
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	200010f8 	.word	0x200010f8

080036f8 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80a2 	beq.w	8003850 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371c:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	ed93 7a00 	vldr	s14, [r3]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	edd3 7a04 	vldr	s15, [r3, #16]
 800372c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003730:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	ed93 7a03 	vldr	s14, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	edd3 6a06 	vldr	s13, [r3, #24]
 8003740:	edd7 7a03 	vldr	s15, [r7, #12]
 8003744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <Compute+0x82>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003768:	edd7 7a02 	vldr	s15, [r7, #8]
 800376c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	dd04      	ble.n	800379a <Compute+0xa2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	e00e      	b.n	80037b8 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	ed93 7a03 	vldr	s14, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80037a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	d503      	bpl.n	80037b8 <Compute+0xc0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <Compute+0xe0>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80037c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80037cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80037d6:	e003      	b.n	80037e0 <Compute+0xe8>
	else val->Output = 0;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	ed93 6a07 	vldr	s12, [r3, #28]
 80037f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80037fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	ed93 7a01 	vldr	s14, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381c:	dd04      	ble.n	8003828 <Compute+0x130>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e00e      	b.n	8003846 <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	ed93 7a01 	vldr	s14, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	edd3 7a08 	vldr	s15, [r3, #32]
 8003834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383c:	d503      	bpl.n	8003846 <Compute+0x14e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	611a      	str	r2, [r3, #16]
 800384e:	e000      	b.n	8003852 <Compute+0x15a>
	if(!val->inAuto) return;
 8003850:	bf00      	nop
}
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6178      	str	r0, [r7, #20]
 8003864:	ed87 0a04 	vstr	s0, [r7, #16]
 8003868:	edc7 0a03 	vstr	s1, [r7, #12]
 800386c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003870:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8003874:	edd7 7a04 	vldr	s15, [r7, #16]
 8003878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	f100 809b 	bmi.w	80039ba <SetTunings+0x15e>
 8003884:	edd7 7a03 	vldr	s15, [r7, #12]
 8003888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003890:	f100 8093 	bmi.w	80039ba <SetTunings+0x15e>
 8003894:	edd7 7a02 	vldr	s15, [r7, #8]
 8003898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a0:	f100 808b 	bmi.w	80039ba <SetTunings+0x15e>
 80038a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80038a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	f100 8083 	bmi.w	80039ba <SetTunings+0x15e>
 80038b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80038b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c4:	dc79      	bgt.n	80039ba <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 80038c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80038ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d2:	bfcc      	ite	gt
 80038d4:	2301      	movgt	r3, #1
 80038d6:	2300      	movle	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 80038e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80038e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f2:	bf4c      	ite	mi
 80038f4:	2301      	movmi	r3, #1
 80038f6:	2300      	movpl	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800390e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80039c8 <SetTunings+0x16c>
 8003912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8003920:	ed97 7a03 	vldr	s14, [r7, #12]
 8003924:	edd7 7a07 	vldr	s15, [r7, #28]
 8003928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 8003932:	edd7 6a02 	vldr	s13, [r7, #8]
 8003936:	ed97 7a07 	vldr	s14, [r7, #28]
 800393a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	2b01      	cmp	r3, #1
 800394a:	d11d      	bne.n	8003988 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003952:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80039cc <SetTunings+0x170>
 8003956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	edd3 7a06 	vldr	s15, [r3, #24]
 8003966:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80039cc <SetTunings+0x170>
 800396a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	edd3 7a07 	vldr	s15, [r3, #28]
 800397a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80039cc <SetTunings+0x170>
 800397e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	ed93 7a05 	vldr	s14, [r3, #20]
 800398e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 800399c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80039a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80039ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80039b8:	e000      	b.n	80039bc <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 80039ba:	bf00      	nop
}
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	49742400 	.word	0x49742400
 80039cc:	00000000 	.word	0x00000000

080039d0 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	dd25      	ble.n	8003a2c <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 80039f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039fa:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	edd3 6a07 	vldr	s13, [r3, #28]
 8003a18:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a44:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8003a48:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a58:	dc44      	bgt.n	8003ae4 <SetOutputLimits+0xac>
   val->outMin = Min;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7a:	dd04      	ble.n	8003a86 <SetOutputLimits+0x4e>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	605a      	str	r2, [r3, #4]
 8003a84:	e00e      	b.n	8003aa4 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	d503      	bpl.n	8003aa4 <SetOutputLimits+0x6c>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	ed93 7a03 	vldr	s14, [r3, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003ab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab8:	dd04      	ble.n	8003ac4 <SetOutputLimits+0x8c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	e010      	b.n	8003ae6 <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	ed93 7a03 	vldr	s14, [r3, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad8:	d505      	bpl.n	8003ae6 <SetOutputLimits+0xae>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	e000      	b.n	8003ae6 <SetOutputLimits+0xae>
   if(Min > Max) return;
 8003ae4:	bf00      	nop
}
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8003b10:	2a00      	cmp	r2, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2201      	moveq	r2, #1
 8003b16:	2200      	movne	r2, #0
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d102      	bne.n	8003b24 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f808 	bl	8003b34 <Initialize>
    }
    val->inAuto = newAuto;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <Initialize>:

void Initialize(PID_instance *val)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b60:	dd04      	ble.n	8003b6c <Initialize+0x38>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8003b6a:	e00f      	b.n	8003b8c <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	d400      	bmi.n	8003b84 <Initialize+0x50>
}
 8003b82:	e003      	b.n	8003b8c <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8003bb4:	b40f      	push	{r0, r1, r2, r3}
 8003bb6:	b590      	push	{r4, r7, lr}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8003bbc:	f107 031c 	add.w	r3, r7, #28
 8003bc0:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bca:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <PrintServerPrintf+0x44>)
 8003bcc:	f007 fb82 	bl	800b2d4 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <PrintServerPrintf+0x48>)
 8003bd2:	681c      	ldr	r4, [r3, #0]
 8003bd4:	4808      	ldr	r0, [pc, #32]	; (8003bf8 <PrintServerPrintf+0x44>)
 8003bd6:	f7fc fb73 	bl	80002c0 <strlen>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	4905      	ldr	r1, [pc, #20]	; (8003bf8 <PrintServerPrintf+0x44>)
 8003be2:	4620      	mov	r0, r4
 8003be4:	f005 ffe6 	bl	8009bb4 <HAL_UART_Transmit_DMA>
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003bf2:	b004      	add	sp, #16
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	200015b0 	.word	0x200015b0
 8003bfc:	20000548 	.word	0x20000548

08003c00 <dac_value>:
#define Vref 3000

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};

void dac_value(uint16_t V_dac){
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 8003c0a:	88fa      	ldrh	r2, [r7, #6]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	031b      	lsls	r3, r3, #12
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <dac_value+0x34>)
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	b212      	sxth	r2, r2
 8003c18:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c1c:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8003c1e:	89fb      	ldrh	r3, [r7, #14]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2100      	movs	r1, #0
 8003c24:	4804      	ldr	r0, [pc, #16]	; (8003c38 <dac_value+0x38>)
 8003c26:	f002 fc1f 	bl	8006468 <HAL_DAC_SetValue>
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200017fc 	.word	0x200017fc
 8003c38:	20001a24 	.word	0x20001a24

08003c3c <ADC_CAL>:
    // Calculate the magnitude of the vector sum
    float magnitude = sqrt(sum.real * sum.real + sum.imag * sum.imag);
    return magnitude;
}

void ADC_CAL(){
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8003c40:	4b4b      	ldr	r3, [pc, #300]	; (8003d70 <ADC_CAL+0x134>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b48      	ldr	r3, [pc, #288]	; (8003d74 <ADC_CAL+0x138>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	b21a      	sxth	r2, r3
 8003c5e:	4b46      	ldr	r3, [pc, #280]	; (8003d78 <ADC_CAL+0x13c>)
 8003c60:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8003c62:	4b44      	ldr	r3, [pc, #272]	; (8003d74 <ADC_CAL+0x138>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	4a43      	ldr	r2, [pc, #268]	; (8003d78 <ADC_CAL+0x13c>)
 8003c6a:	8812      	ldrh	r2, [r2, #0]
 8003c6c:	b212      	sxth	r2, r2
 8003c6e:	fb03 f202 	mul.w	r2, r3, r2
 8003c72:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <ADC_CAL+0x140>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	1ad2      	subs	r2, r2, r3
 8003c7a:	0852      	lsrs	r2, r2, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	0adb      	lsrs	r3, r3, #11
 8003c80:	461a      	mov	r2, r3
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	011a      	lsls	r2, r3, #4
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4a3c      	ldr	r2, [pc, #240]	; (8003d80 <ADC_CAL+0x144>)
 8003c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8003c92:	1152      	asrs	r2, r2, #5
 8003c94:	17db      	asrs	r3, r3, #31
 8003c96:	1ad2      	subs	r2, r2, r3
 8003c98:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <ADC_CAL+0x148>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4a39      	ldr	r2, [pc, #228]	; (8003d84 <ADC_CAL+0x148>)
 8003ca0:	6013      	str	r3, [r2, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8003ca2:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <ADC_CAL+0x138>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	4a33      	ldr	r2, [pc, #204]	; (8003d78 <ADC_CAL+0x13c>)
 8003caa:	8812      	ldrh	r2, [r2, #0]
 8003cac:	b212      	sxth	r2, r2
 8003cae:	fb03 f202 	mul.w	r2, r3, r2
 8003cb2:	4b32      	ldr	r3, [pc, #200]	; (8003d7c <ADC_CAL+0x140>)
 8003cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb8:	1ad2      	subs	r2, r2, r3
 8003cba:	0852      	lsrs	r2, r2, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	0adb      	lsrs	r3, r3, #11
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	011a      	lsls	r2, r3, #4
 8003cca:	4413      	add	r3, r2
 8003ccc:	4a2c      	ldr	r2, [pc, #176]	; (8003d80 <ADC_CAL+0x144>)
 8003cce:	fb82 1203 	smull	r1, r2, r2, r3
 8003cd2:	1152      	asrs	r2, r2, #5
 8003cd4:	17db      	asrs	r3, r3, #31
 8003cd6:	1ad2      	subs	r2, r2, r3
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <ADC_CAL+0x148>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	4a29      	ldr	r2, [pc, #164]	; (8003d84 <ADC_CAL+0x148>)
 8003ce0:	6053      	str	r3, [r2, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <ADC_CAL+0x138>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	4a23      	ldr	r2, [pc, #140]	; (8003d78 <ADC_CAL+0x13c>)
 8003cea:	8812      	ldrh	r2, [r2, #0]
 8003cec:	b212      	sxth	r2, r2
 8003cee:	fb03 f202 	mul.w	r2, r3, r2
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <ADC_CAL+0x140>)
 8003cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf8:	1ad2      	subs	r2, r2, r3
 8003cfa:	0852      	lsrs	r2, r2, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	0adb      	lsrs	r3, r3, #11
 8003d00:	461a      	mov	r2, r3
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	011a      	lsls	r2, r3, #4
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <ADC_CAL+0x144>)
 8003d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8003d12:	1152      	asrs	r2, r2, #5
 8003d14:	17db      	asrs	r3, r3, #31
 8003d16:	1ad2      	subs	r2, r2, r3
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <ADC_CAL+0x148>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <ADC_CAL+0x148>)
 8003d20:	6093      	str	r3, [r2, #8]
	calibrating--;
 8003d22:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <ADC_CAL+0x14c>)
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <ADC_CAL+0x14c>)
 8003d2c:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <ADC_CAL+0x14c>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d117      	bne.n	8003d66 <ADC_CAL+0x12a>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <ADC_CAL+0x148>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <ADC_CAL+0x150>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <ADC_CAL+0x154>)
 8003d44:	6013      	str	r3, [r2, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <ADC_CAL+0x148>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <ADC_CAL+0x150>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	4a0f      	ldr	r2, [pc, #60]	; (8003d90 <ADC_CAL+0x154>)
 8003d54:	6053      	str	r3, [r2, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <ADC_CAL+0x148>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <ADC_CAL+0x150>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <ADC_CAL+0x154>)
 8003d64:	6093      	str	r3, [r2, #8]
	}
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	2000054c 	.word	0x2000054c
 8003d74:	200017b0 	.word	0x200017b0
 8003d78:	200017fc 	.word	0x200017fc
 8003d7c:	00100101 	.word	0x00100101
 8003d80:	51eb851f 	.word	0x51eb851f
 8003d84:	20001828 	.word	0x20001828
 8003d88:	20001824 	.word	0x20001824
 8003d8c:	10624dd3 	.word	0x10624dd3
 8003d90:	200017f0 	.word	0x200017f0

08003d94 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <current_init+0x38>)
 8003d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003da2:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <current_init+0x3c>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8003daa:	2208      	movs	r2, #8
 8003dac:	4909      	ldr	r1, [pc, #36]	; (8003dd4 <current_init+0x40>)
 8003dae:	480a      	ldr	r0, [pc, #40]	; (8003dd8 <current_init+0x44>)
 8003db0:	f002 f9b2 	bl	8006118 <HAL_ADC_Start_DMA>


	HAL_DAC_Init(&hdac1);
 8003db4:	4809      	ldr	r0, [pc, #36]	; (8003ddc <current_init+0x48>)
 8003db6:	f002 fb11 	bl	80063dc <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4807      	ldr	r0, [pc, #28]	; (8003ddc <current_init+0x48>)
 8003dbe:	f002 fb1f 	bl	8006400 <HAL_DAC_Start>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20001824 	.word	0x20001824
 8003dd0:	20001800 	.word	0x20001800
 8003dd4:	200017b0 	.word	0x200017b0
 8003dd8:	2000188c 	.word	0x2000188c
 8003ddc:	20001a24 	.word	0x20001a24

08003de0 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8003de8:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <voltage_temperature_init+0x20>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8003dee:	2208      	movs	r2, #8
 8003df0:	4904      	ldr	r1, [pc, #16]	; (8003e04 <voltage_temperature_init+0x24>)
 8003df2:	4805      	ldr	r0, [pc, #20]	; (8003e08 <voltage_temperature_init+0x28>)
 8003df4:	f002 f990 	bl	8006118 <HAL_ADC_Start_DMA>
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20001814 	.word	0x20001814
 8003e04:	200017d0 	.word	0x200017d0
 8003e08:	200018f8 	.word	0x200018f8

08003e0c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a6e      	ldr	r2, [pc, #440]	; (8003fd0 <HAL_ADC_ConvHalfCpltCallback+0x1c4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	f040 8091 	bne.w	8003f40 <HAL_ADC_ConvHalfCpltCallback+0x134>
		if(calibrating)ADC_CAL();
 8003e1e:	4b6d      	ldr	r3, [pc, #436]	; (8003fd4 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_ADC_ConvHalfCpltCallback+0x20>
 8003e26:	f7ff ff09 	bl	8003c3c <ADC_CAL>
 8003e2a:	e089      	b.n	8003f40 <HAL_ADC_ConvHalfCpltCallback+0x134>
		else {
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003e38:	fb02 f303 	mul.w	r3, r2, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b67      	ldr	r3, [pc, #412]	; (8003fdc <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	b21a      	sxth	r2, r3
 8003e4a:	4b65      	ldr	r3, [pc, #404]	; (8003fe0 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003e4c:	801a      	strh	r2, [r3, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8003e4e:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4619      	mov	r1, r3
 8003e54:	4b61      	ldr	r3, [pc, #388]	; (8003fdc <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	da00      	bge.n	8003e5e <HAL_ADC_ConvHalfCpltCallback+0x52>
 8003e5c:	330f      	adds	r3, #15
 8003e5e:	111b      	asrs	r3, r3, #4
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b21b      	sxth	r3, r3
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	4a5e      	ldr	r2, [pc, #376]	; (8003fe8 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003e6e:	fb82 0203 	smull	r0, r2, r2, r3
 8003e72:	441a      	add	r2, r3
 8003e74:	12d2      	asrs	r2, r2, #11
 8003e76:	17db      	asrs	r3, r3, #31
 8003e78:	1ad2      	subs	r2, r2, r3
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	011a      	lsls	r2, r3, #4
 8003e82:	4413      	add	r3, r2
 8003e84:	4a59      	ldr	r2, [pc, #356]	; (8003fec <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003e86:	fb82 0203 	smull	r0, r2, r2, r3
 8003e8a:	1152      	asrs	r2, r2, #5
 8003e8c:	17db      	asrs	r3, r3, #31
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	440b      	add	r3, r1
 8003e92:	2232      	movs	r2, #50	; 0x32
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	4a55      	ldr	r2, [pc, #340]	; (8003ff0 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003e9a:	6013      	str	r3, [r2, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8003e9c:	4b51      	ldr	r3, [pc, #324]	; (8003fe4 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da00      	bge.n	8003eac <HAL_ADC_ConvHalfCpltCallback+0xa0>
 8003eaa:	330f      	adds	r3, #15
 8003eac:	111b      	asrs	r3, r3, #4
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b21b      	sxth	r3, r3
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	4a4b      	ldr	r2, [pc, #300]	; (8003fe8 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003ebc:	fb82 0203 	smull	r0, r2, r2, r3
 8003ec0:	441a      	add	r2, r3
 8003ec2:	12d2      	asrs	r2, r2, #11
 8003ec4:	17db      	asrs	r3, r3, #31
 8003ec6:	1ad2      	subs	r2, r2, r3
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	011a      	lsls	r2, r3, #4
 8003ed0:	4413      	add	r3, r2
 8003ed2:	4a46      	ldr	r2, [pc, #280]	; (8003fec <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003ed4:	fb82 0203 	smull	r0, r2, r2, r3
 8003ed8:	1152      	asrs	r2, r2, #5
 8003eda:	17db      	asrs	r3, r3, #31
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	440b      	add	r3, r1
 8003ee0:	2232      	movs	r2, #50	; 0x32
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	4a42      	ldr	r2, [pc, #264]	; (8003ff0 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003ee8:	6053      	str	r3, [r2, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4b3a      	ldr	r3, [pc, #232]	; (8003fdc <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	da00      	bge.n	8003efa <HAL_ADC_ConvHalfCpltCallback+0xee>
 8003ef8:	330f      	adds	r3, #15
 8003efa:	111b      	asrs	r3, r3, #4
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	4a37      	ldr	r2, [pc, #220]	; (8003fe8 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003f0a:	fb82 0203 	smull	r0, r2, r2, r3
 8003f0e:	441a      	add	r2, r3
 8003f10:	12d2      	asrs	r2, r2, #11
 8003f12:	17db      	asrs	r3, r3, #31
 8003f14:	1ad2      	subs	r2, r2, r3
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	011a      	lsls	r2, r3, #4
 8003f1e:	4413      	add	r3, r2
 8003f20:	4a32      	ldr	r2, [pc, #200]	; (8003fec <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003f22:	fb82 0203 	smull	r0, r2, r2, r3
 8003f26:	1152      	asrs	r2, r2, #5
 8003f28:	17db      	asrs	r3, r3, #31
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	2232      	movs	r2, #50	; 0x32
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	4a2e      	ldr	r2, [pc, #184]	; (8003ff0 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003f36:	6093      	str	r3, [r2, #8]
//			data.Current_DC = sqrt(data.Current_M1*data.Current_M1 + data.Current_M2*data.Current_M2 + data.Current_M3*data.Current_M3);//(int32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
			Curent_IRQ_callback(&data);
 8003f38:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	482c      	ldr	r0, [pc, #176]	; (8003ff0 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003f3e:	4798      	blx	r3
		}
	}
	if (hadc == &hadc2){
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a2d      	ldr	r2, [pc, #180]	; (8003ff8 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d13f      	bne.n	8003fc8 <HAL_ADC_ConvHalfCpltCallback+0x1bc>
		//VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003f48:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003f50:	8812      	ldrh	r2, [r2, #0]
 8003f52:	b212      	sxth	r2, r2
 8003f54:	fb03 f202 	mul.w	r2, r3, r2
 8003f58:	4b29      	ldr	r3, [pc, #164]	; (8004000 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8003f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f5e:	1ad2      	subs	r2, r2, r3
 8003f60:	0852      	lsrs	r2, r2, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	0adb      	lsrs	r3, r3, #11
 8003f66:	b21a      	sxth	r2, r3
 8003f68:	4b26      	ldr	r3, [pc, #152]	; (8004004 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003f6a:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003f74:	8812      	ldrh	r2, [r2, #0]
 8003f76:	b212      	sxth	r2, r2
 8003f78:	fb03 f202 	mul.w	r2, r3, r2
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	4413      	add	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	1ad2      	subs	r2, r2, r3
 8003f8e:	0852      	lsrs	r2, r2, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	0adb      	lsrs	r3, r3, #11
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003f96:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003f98:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003fa0:	8812      	ldrh	r2, [r2, #0]
 8003fa2:	b212      	sxth	r2, r2
 8003fa4:	fb03 f202 	mul.w	r2, r3, r2
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4a15      	ldr	r2, [pc, #84]	; (8004008 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	0bdb      	lsrs	r3, r3, #15
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003fbe:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	480f      	ldr	r0, [pc, #60]	; (8004004 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003fc6:	4798      	blx	r3
	}
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	2000188c 	.word	0x2000188c
 8003fd4:	20001824 	.word	0x20001824
 8003fd8:	2000054c 	.word	0x2000054c
 8003fdc:	200017b0 	.word	0x200017b0
 8003fe0:	200017fc 	.word	0x200017fc
 8003fe4:	200017f0 	.word	0x200017f0
 8003fe8:	80080081 	.word	0x80080081
 8003fec:	51eb851f 	.word	0x51eb851f
 8003ff0:	20001804 	.word	0x20001804
 8003ff4:	20001800 	.word	0x20001800
 8003ff8:	200018f8 	.word	0x200018f8
 8003ffc:	200017d0 	.word	0x200017d0
 8004000:	00100101 	.word	0x00100101
 8004004:	20001818 	.word	0x20001818
 8004008:	ccd99a67 	.word	0xccd99a67
 800400c:	20001814 	.word	0x20001814

08004010 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a6f      	ldr	r2, [pc, #444]	; (80041d8 <HAL_ADC_ConvCpltCallback+0x1c8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	f040 808f 	bne.w	8004140 <HAL_ADC_ConvCpltCallback+0x130>
 8004022:	4b6e      	ldr	r3, [pc, #440]	; (80041dc <HAL_ADC_ConvCpltCallback+0x1cc>)
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 808a 	bne.w	8004140 <HAL_ADC_ConvCpltCallback+0x130>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 800402c:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	461a      	mov	r2, r3
 800403e:	4b69      	ldr	r3, [pc, #420]	; (80041e4 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	b21a      	sxth	r2, r3
 800404a:	4b67      	ldr	r3, [pc, #412]	; (80041e8 <HAL_ADC_ConvCpltCallback+0x1d8>)
 800404c:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 800404e:	4b67      	ldr	r3, [pc, #412]	; (80041ec <HAL_ADC_ConvCpltCallback+0x1dc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4619      	mov	r1, r3
 8004054:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	da00      	bge.n	800405e <HAL_ADC_ConvCpltCallback+0x4e>
 800405c:	330f      	adds	r3, #15
 800405e:	111b      	asrs	r3, r3, #4
 8004060:	461a      	mov	r2, r3
 8004062:	4b61      	ldr	r3, [pc, #388]	; (80041e8 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b21b      	sxth	r3, r3
 8004068:	fb02 f303 	mul.w	r3, r2, r3
 800406c:	4a60      	ldr	r2, [pc, #384]	; (80041f0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 800406e:	fb82 0203 	smull	r0, r2, r2, r3
 8004072:	441a      	add	r2, r3
 8004074:	12d2      	asrs	r2, r2, #11
 8004076:	17db      	asrs	r3, r3, #31
 8004078:	1ad2      	subs	r2, r2, r3
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	011a      	lsls	r2, r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	4a5b      	ldr	r2, [pc, #364]	; (80041f4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8004086:	fb82 0203 	smull	r0, r2, r2, r3
 800408a:	1152      	asrs	r2, r2, #5
 800408c:	17db      	asrs	r3, r3, #31
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	440b      	add	r3, r1
 8004092:	2232      	movs	r2, #50	; 0x32
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	4a57      	ldr	r2, [pc, #348]	; (80041f8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800409a:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 800409c:	4b53      	ldr	r3, [pc, #332]	; (80041ec <HAL_ADC_ConvCpltCallback+0x1dc>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4619      	mov	r1, r3
 80040a2:	4b50      	ldr	r3, [pc, #320]	; (80041e4 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	da00      	bge.n	80040ac <HAL_ADC_ConvCpltCallback+0x9c>
 80040aa:	330f      	adds	r3, #15
 80040ac:	111b      	asrs	r3, r3, #4
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b21b      	sxth	r3, r3
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	4a4d      	ldr	r2, [pc, #308]	; (80041f0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 80040bc:	fb82 0203 	smull	r0, r2, r2, r3
 80040c0:	441a      	add	r2, r3
 80040c2:	12d2      	asrs	r2, r2, #11
 80040c4:	17db      	asrs	r3, r3, #31
 80040c6:	1ad2      	subs	r2, r2, r3
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4413      	add	r3, r2
 80040ce:	011a      	lsls	r2, r3, #4
 80040d0:	4413      	add	r3, r2
 80040d2:	4a48      	ldr	r2, [pc, #288]	; (80041f4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 80040d4:	fb82 0203 	smull	r0, r2, r2, r3
 80040d8:	1152      	asrs	r2, r2, #5
 80040da:	17db      	asrs	r3, r3, #31
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	440b      	add	r3, r1
 80040e0:	2232      	movs	r2, #50	; 0x32
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	4a44      	ldr	r2, [pc, #272]	; (80041f8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 80040e8:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80040ea:	4b40      	ldr	r3, [pc, #256]	; (80041ec <HAL_ADC_ConvCpltCallback+0x1dc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	4619      	mov	r1, r3
 80040f0:	4b3c      	ldr	r3, [pc, #240]	; (80041e4 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da00      	bge.n	80040fa <HAL_ADC_ConvCpltCallback+0xea>
 80040f8:	330f      	adds	r3, #15
 80040fa:	111b      	asrs	r3, r3, #4
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b3a      	ldr	r3, [pc, #232]	; (80041e8 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b21b      	sxth	r3, r3
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	4a39      	ldr	r2, [pc, #228]	; (80041f0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 800410a:	fb82 0203 	smull	r0, r2, r2, r3
 800410e:	441a      	add	r2, r3
 8004110:	12d2      	asrs	r2, r2, #11
 8004112:	17db      	asrs	r3, r3, #31
 8004114:	1ad2      	subs	r2, r2, r3
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	4413      	add	r3, r2
 8004120:	4a34      	ldr	r2, [pc, #208]	; (80041f4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8004122:	fb82 0203 	smull	r0, r2, r2, r3
 8004126:	1152      	asrs	r2, r2, #5
 8004128:	17db      	asrs	r3, r3, #31
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	440b      	add	r3, r1
 800412e:	2232      	movs	r2, #50	; 0x32
 8004130:	fb02 f303 	mul.w	r3, r2, r3
 8004134:	4a30      	ldr	r2, [pc, #192]	; (80041f8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8004136:	6093      	str	r3, [r2, #8]
//		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
		Curent_IRQ_callback(&data);
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_ADC_ConvCpltCallback+0x1ec>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	482e      	ldr	r0, [pc, #184]	; (80041f8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800413e:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d142      	bne.n	80041ce <HAL_ADC_ConvCpltCallback+0x1be>
//		  T = (1.0f / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
//		  T = T - 273.15f;
////		  T = (T * 9.0f)/ 5.0f + 32.0f;
//		VT_data.Temp_NTC1  = (int16_t)T;

		VT_data.Temp_NTC1 = 0; //(VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES * ;
 8004148:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800414a:	2200      	movs	r2, #0
 800414c:	80da      	strh	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 800414e:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	4a24      	ldr	r2, [pc, #144]	; (80041e8 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8004156:	8812      	ldrh	r2, [r2, #0]
 8004158:	b212      	sxth	r2, r2
 800415a:	fb03 f202 	mul.w	r2, r3, r2
 800415e:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8004160:	fba3 1302 	umull	r1, r3, r3, r2
 8004164:	1ad2      	subs	r2, r2, r3
 8004166:	0852      	lsrs	r2, r2, #1
 8004168:	4413      	add	r3, r2
 800416a:	0adb      	lsrs	r3, r3, #11
 800416c:	b21a      	sxth	r2, r3
 800416e:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8004170:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8004172:	4b25      	ldr	r3, [pc, #148]	; (8004208 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <HAL_ADC_ConvCpltCallback+0x1d8>)
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	b212      	sxth	r2, r2
 800417e:	fb03 f202 	mul.w	r2, r3, r2
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4413      	add	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	461a      	mov	r2, r3
 800418c:	4b1f      	ldr	r3, [pc, #124]	; (800420c <HAL_ADC_ConvCpltCallback+0x1fc>)
 800418e:	fba3 1302 	umull	r1, r3, r3, r2
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	0852      	lsrs	r2, r2, #1
 8004196:	4413      	add	r3, r2
 8004198:	0adb      	lsrs	r3, r3, #11
 800419a:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800419c:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80041a6:	8812      	ldrh	r2, [r2, #0]
 80041a8:	b212      	sxth	r2, r2
 80041aa:	fb03 f202 	mul.w	r2, r3, r2
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	4a15      	ldr	r2, [pc, #84]	; (8004210 <HAL_ADC_ConvCpltCallback+0x200>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	0bdb      	lsrs	r3, r3, #15
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80041c4:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <HAL_ADC_ConvCpltCallback+0x204>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	480e      	ldr	r0, [pc, #56]	; (8004204 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80041cc:	4798      	blx	r3
	}
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2000188c 	.word	0x2000188c
 80041dc:	20001824 	.word	0x20001824
 80041e0:	2000054c 	.word	0x2000054c
 80041e4:	200017b0 	.word	0x200017b0
 80041e8:	200017fc 	.word	0x200017fc
 80041ec:	200017f0 	.word	0x200017f0
 80041f0:	80080081 	.word	0x80080081
 80041f4:	51eb851f 	.word	0x51eb851f
 80041f8:	20001804 	.word	0x20001804
 80041fc:	20001800 	.word	0x20001800
 8004200:	200018f8 	.word	0x200018f8
 8004204:	20001818 	.word	0x20001818
 8004208:	200017d0 	.word	0x200017d0
 800420c:	00100101 	.word	0x00100101
 8004210:	ccd99a67 	.word	0xccd99a67
 8004214:	20001814 	.word	0x20001814

08004218 <dq0>:
//}
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
float sin3(float deg){
	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
}
void dq0(float theta, float a, float b, float c, float *d, float *q){
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004222:	edc7 0a04 	vstr	s1, [r7, #16]
 8004226:	ed87 1a03 	vstr	s2, [r7, #12]
 800422a:	edc7 1a02 	vstr	s3, [r7, #8]
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]

//	uint32_t temp = (int32_t)(90.0f-theta*180/3.14159264f+2*360)%360;
//    float cf = sin3((float)temp)*pi/180.0f;
//    float sf = sin3((theta)*180.0f/pi)*pi/180.0f;

	float cf = cos(theta);
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	f7fc f9b0 	bl	8000598 <__aeabi_f2d>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	ec43 2b10 	vmov	d0, r2, r3
 8004240:	f009 f9ba 	bl	800d5b8 <cos>
 8004244:	ec53 2b10 	vmov	r2, r3, d0
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	f7fc fcf4 	bl	8000c38 <__aeabi_d2f>
 8004250:	4603      	mov	r3, r0
 8004252:	61fb      	str	r3, [r7, #28]
	float sf = sin(theta);
 8004254:	6978      	ldr	r0, [r7, #20]
 8004256:	f7fc f99f 	bl	8000598 <__aeabi_f2d>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	ec43 2b10 	vmov	d0, r2, r3
 8004262:	f009 f9fd 	bl	800d660 <sin>
 8004266:	ec53 2b10 	vmov	r2, r3, d0
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	f7fc fce3 	bl	8000c38 <__aeabi_d2f>
 8004272:	4603      	mov	r3, r0
 8004274:	61bb      	str	r3, [r7, #24]


    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8004276:	ed97 7a07 	vldr	s14, [r7, #28]
 800427a:	edd7 7a04 	vldr	s15, [r7, #16]
 800427e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004282:	edd7 7a06 	vldr	s15, [r7, #24]
 8004286:	eddf 6a34 	vldr	s13, [pc, #208]	; 8004358 <dq0+0x140>
 800428a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800428e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004292:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004296:	ee67 7a86 	vmul.f32	s15, s15, s12
 800429a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800429e:	edd7 7a03 	vldr	s15, [r7, #12]
 80042a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80042ae:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800435c <dq0+0x144>
 80042b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80042ba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80042be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80042c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80042ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042d2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004360 <dq0+0x148>
 80042d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 80042e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80042e4:	eeb1 7a67 	vneg.f32	s14, s15
 80042e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80042f4:	eddf 6a19 	vldr	s13, [pc, #100]	; 800435c <dq0+0x144>
 80042f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004300:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004304:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004308:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800430c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004318:	edd7 7a07 	vldr	s15, [r7, #28]
 800431c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004358 <dq0+0x140>
 8004320:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004324:	edd7 7a06 	vldr	s15, [r7, #24]
 8004328:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800432c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004330:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004334:	edd7 7a02 	vldr	s15, [r7, #8]
 8004338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800433c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004340:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004360 <dq0+0x148>
 8004344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	edc3 7a00 	vstr	s15, [r3]
    }
 800434e:	bf00      	nop
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	3f5db3d7 	.word	0x3f5db3d7
 800435c:	bf5db3d7 	.word	0xbf5db3d7
 8004360:	3f2aaaab 	.word	0x3f2aaaab

08004364 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f002 fc6d 	bl	8006c4c <HAL_FDCAN_Start>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e00a      	b.n	8004392 <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800437c:	2200      	movs	r2, #0
 800437e:	2101      	movs	r1, #1
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f002 fd65 	bl	8006e50 <HAL_FDCAN_ActivateNotification>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 80043a8:	4b18      	ldr	r3, [pc, #96]	; (800440c <FDCAN_addCallback+0x70>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b09      	cmp	r3, #9
 80043ae:	d901      	bls.n	80043b4 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e025      	b.n	8004400 <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	e00c      	b.n	80043d4 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80043ba:	4a15      	ldr	r2, [pc, #84]	; (8004410 <FDCAN_addCallback+0x74>)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d101      	bne.n	80043ce <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e018      	b.n	8004400 <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <FDCAN_addCallback+0x70>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d3ed      	bcc.n	80043ba <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <FDCAN_addCallback+0x70>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	490a      	ldr	r1, [pc, #40]	; (8004410 <FDCAN_addCallback+0x74>)
 80043e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <FDCAN_addCallback+0x74>)
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <FDCAN_addCallback+0x70>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	4a04      	ldr	r2, [pc, #16]	; (800440c <FDCAN_addCallback+0x70>)
 80043fc:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3724      	adds	r7, #36	; 0x24
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	20001884 	.word	0x20001884
 8004410:	20001834 	.word	0x20001834

08004414 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8004424:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8004428:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004432:	2300      	movs	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004436:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 800443c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004442:	2300      	movs	r3, #0
 8004444:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 800444a:	f107 0314 	add.w	r3, r7, #20
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4619      	mov	r1, r3
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f002 fc12 	bl	8006c7c <HAL_FDCAN_AddMessageToTxFifoQ>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3738      	adds	r7, #56	; 0x38
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b09e      	sub	sp, #120	; 0x78
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8004476:	f107 030c 	add.w	r3, r7, #12
 800447a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f002 fc5d 	bl	8006d40 <HAL_FDCAN_GetRxMessage>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 800448c:	f000 fc51 	bl	8004d32 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004490:	2300      	movs	r3, #0
 8004492:	677b      	str	r3, [r7, #116]	; 0x74
 8004494:	e012      	b.n	80044bc <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8004496:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8004498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d107      	bne.n	80044b6 <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80044a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044ae:	f107 020c 	add.w	r2, r7, #12
 80044b2:	4610      	mov	r0, r2
 80044b4:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80044b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b8:	3301      	adds	r3, #1
 80044ba:	677b      	str	r3, [r7, #116]	; 0x74
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d3e7      	bcc.n	8004496 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	3778      	adds	r7, #120	; 0x78
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20001834 	.word	0x20001834
 80044d4:	20001884 	.word	0x20001884

080044d8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80044d8:	b510      	push	{r4, lr}
 80044da:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80044dc:	2400      	movs	r4, #0
 80044de:	9409      	str	r4, [sp, #36]	; 0x24
 80044e0:	940a      	str	r4, [sp, #40]	; 0x28
 80044e2:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 80044e4:	2220      	movs	r2, #32
 80044e6:	4621      	mov	r1, r4
 80044e8:	a801      	add	r0, sp, #4
 80044ea:	f006 ff11 	bl	800b310 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80044ee:	4837      	ldr	r0, [pc, #220]	; (80045cc <MX_ADC1_Init+0xf4>)
 80044f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044f4:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80044f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80044fa:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80044fc:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044fe:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8004500:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004502:	2301      	movs	r3, #1
 8004504:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004506:	2208      	movs	r2, #8
 8004508:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800450a:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800450c:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 4;
 800450e:	2204      	movs	r2, #4
 8004510:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004512:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004516:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004518:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800451a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800451e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004522:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8004524:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004528:	220c      	movs	r2, #12
 800452a:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800452c:	6484      	str	r4, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800452e:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004530:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004532:	f001 f88d 	bl	8005650 <HAL_ADC_Init>
 8004536:	2800      	cmp	r0, #0
 8004538:	d135      	bne.n	80045a6 <MX_ADC1_Init+0xce>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800453a:	2300      	movs	r3, #0
 800453c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800453e:	a909      	add	r1, sp, #36	; 0x24
 8004540:	4822      	ldr	r0, [pc, #136]	; (80045cc <MX_ADC1_Init+0xf4>)
 8004542:	f001 fe6b 	bl	800621c <HAL_ADCEx_MultiModeConfigChannel>
 8004546:	2800      	cmp	r0, #0
 8004548:	d130      	bne.n	80045ac <MX_ADC1_Init+0xd4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800454a:	4b21      	ldr	r3, [pc, #132]	; (80045d0 <MX_ADC1_Init+0xf8>)
 800454c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800454e:	2306      	movs	r3, #6
 8004550:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004552:	2303      	movs	r3, #3
 8004554:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004556:	237f      	movs	r3, #127	; 0x7f
 8004558:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800455a:	2304      	movs	r3, #4
 800455c:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004562:	a901      	add	r1, sp, #4
 8004564:	4819      	ldr	r0, [pc, #100]	; (80045cc <MX_ADC1_Init+0xf4>)
 8004566:	f001 fb23 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 800456a:	bb10      	cbnz	r0, 80045b2 <MX_ADC1_Init+0xda>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <MX_ADC1_Init+0xfc>)
 800456e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004570:	230c      	movs	r3, #12
 8004572:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004574:	a901      	add	r1, sp, #4
 8004576:	4815      	ldr	r0, [pc, #84]	; (80045cc <MX_ADC1_Init+0xf4>)
 8004578:	f001 fb1a 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 800457c:	b9e0      	cbnz	r0, 80045b8 <MX_ADC1_Init+0xe0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <MX_ADC1_Init+0x100>)
 8004580:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004582:	2312      	movs	r3, #18
 8004584:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004586:	a901      	add	r1, sp, #4
 8004588:	4810      	ldr	r0, [pc, #64]	; (80045cc <MX_ADC1_Init+0xf4>)
 800458a:	f001 fb11 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 800458e:	b9b0      	cbnz	r0, 80045be <MX_ADC1_Init+0xe6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004590:	4b12      	ldr	r3, [pc, #72]	; (80045dc <MX_ADC1_Init+0x104>)
 8004592:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004594:	2318      	movs	r3, #24
 8004596:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004598:	a901      	add	r1, sp, #4
 800459a:	480c      	ldr	r0, [pc, #48]	; (80045cc <MX_ADC1_Init+0xf4>)
 800459c:	f001 fb08 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 80045a0:	b980      	cbnz	r0, 80045c4 <MX_ADC1_Init+0xec>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80045a2:	b00c      	add	sp, #48	; 0x30
 80045a4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80045a6:	f000 fbc4 	bl	8004d32 <Error_Handler>
 80045aa:	e7c6      	b.n	800453a <MX_ADC1_Init+0x62>
    Error_Handler();
 80045ac:	f000 fbc1 	bl	8004d32 <Error_Handler>
 80045b0:	e7cb      	b.n	800454a <MX_ADC1_Init+0x72>
    Error_Handler();
 80045b2:	f000 fbbe 	bl	8004d32 <Error_Handler>
 80045b6:	e7d9      	b.n	800456c <MX_ADC1_Init+0x94>
    Error_Handler();
 80045b8:	f000 fbbb 	bl	8004d32 <Error_Handler>
 80045bc:	e7df      	b.n	800457e <MX_ADC1_Init+0xa6>
    Error_Handler();
 80045be:	f000 fbb8 	bl	8004d32 <Error_Handler>
 80045c2:	e7e5      	b.n	8004590 <MX_ADC1_Init+0xb8>
    Error_Handler();
 80045c4:	f000 fbb5 	bl	8004d32 <Error_Handler>
}
 80045c8:	e7eb      	b.n	80045a2 <MX_ADC1_Init+0xca>
 80045ca:	bf00      	nop
 80045cc:	2000188c 	.word	0x2000188c
 80045d0:	04300002 	.word	0x04300002
 80045d4:	08600004 	.word	0x08600004
 80045d8:	0c900008 	.word	0x0c900008
 80045dc:	cb840000 	.word	0xcb840000

080045e0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80045e0:	b500      	push	{lr}
 80045e2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80045e4:	2220      	movs	r2, #32
 80045e6:	2100      	movs	r1, #0
 80045e8:	4668      	mov	r0, sp
 80045ea:	f006 fe91 	bl	800b310 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80045ee:	4832      	ldr	r0, [pc, #200]	; (80046b8 <MX_ADC2_Init+0xd8>)
 80045f0:	4b32      	ldr	r3, [pc, #200]	; (80046bc <MX_ADC2_Init+0xdc>)
 80045f2:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80045f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80045f8:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80045fa:	2300      	movs	r3, #0
 80045fc:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045fe:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8004600:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004602:	2201      	movs	r2, #1
 8004604:	6142      	str	r2, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004606:	2104      	movs	r1, #4
 8004608:	6181      	str	r1, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800460a:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800460c:	7742      	strb	r2, [r0, #29]
  hadc2.Init.NbrOfConversion = 4;
 800460e:	6201      	str	r1, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004610:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004614:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004616:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004618:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800461c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004620:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8004622:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004626:	210c      	movs	r1, #12
 8004628:	6441      	str	r1, [r0, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800462a:	6483      	str	r3, [r0, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800462c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800462e:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004630:	f001 f80e 	bl	8005650 <HAL_ADC_Init>
 8004634:	2800      	cmp	r0, #0
 8004636:	d130      	bne.n	800469a <MX_ADC2_Init+0xba>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <MX_ADC2_Init+0xe0>)
 800463a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800463c:	2306      	movs	r3, #6
 800463e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004640:	2307      	movs	r3, #7
 8004642:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004644:	237f      	movs	r3, #127	; 0x7f
 8004646:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004648:	2304      	movs	r3, #4
 800464a:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004650:	4669      	mov	r1, sp
 8004652:	4819      	ldr	r0, [pc, #100]	; (80046b8 <MX_ADC2_Init+0xd8>)
 8004654:	f001 faac 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 8004658:	bb10      	cbnz	r0, 80046a0 <MX_ADC2_Init+0xc0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800465a:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <MX_ADC2_Init+0xe4>)
 800465c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800465e:	230c      	movs	r3, #12
 8004660:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004662:	2300      	movs	r3, #0
 8004664:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004666:	4669      	mov	r1, sp
 8004668:	4813      	ldr	r0, [pc, #76]	; (80046b8 <MX_ADC2_Init+0xd8>)
 800466a:	f001 faa1 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 800466e:	b9d0      	cbnz	r0, 80046a6 <MX_ADC2_Init+0xc6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <MX_ADC2_Init+0xe8>)
 8004672:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004674:	2312      	movs	r3, #18
 8004676:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004678:	4669      	mov	r1, sp
 800467a:	480f      	ldr	r0, [pc, #60]	; (80046b8 <MX_ADC2_Init+0xd8>)
 800467c:	f001 fa98 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 8004680:	b9a0      	cbnz	r0, 80046ac <MX_ADC2_Init+0xcc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004682:	4b12      	ldr	r3, [pc, #72]	; (80046cc <MX_ADC2_Init+0xec>)
 8004684:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004686:	2318      	movs	r3, #24
 8004688:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800468a:	4669      	mov	r1, sp
 800468c:	480a      	ldr	r0, [pc, #40]	; (80046b8 <MX_ADC2_Init+0xd8>)
 800468e:	f001 fa8f 	bl	8005bb0 <HAL_ADC_ConfigChannel>
 8004692:	b970      	cbnz	r0, 80046b2 <MX_ADC2_Init+0xd2>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004694:	b009      	add	sp, #36	; 0x24
 8004696:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800469a:	f000 fb4a 	bl	8004d32 <Error_Handler>
 800469e:	e7cb      	b.n	8004638 <MX_ADC2_Init+0x58>
    Error_Handler();
 80046a0:	f000 fb47 	bl	8004d32 <Error_Handler>
 80046a4:	e7d9      	b.n	800465a <MX_ADC2_Init+0x7a>
    Error_Handler();
 80046a6:	f000 fb44 	bl	8004d32 <Error_Handler>
 80046aa:	e7e1      	b.n	8004670 <MX_ADC2_Init+0x90>
    Error_Handler();
 80046ac:	f000 fb41 	bl	8004d32 <Error_Handler>
 80046b0:	e7e7      	b.n	8004682 <MX_ADC2_Init+0xa2>
    Error_Handler();
 80046b2:	f000 fb3e 	bl	8004d32 <Error_Handler>
}
 80046b6:	e7ed      	b.n	8004694 <MX_ADC2_Init+0xb4>
 80046b8:	200018f8 	.word	0x200018f8
 80046bc:	50000100 	.word	0x50000100
 80046c0:	32601000 	.word	0x32601000
 80046c4:	3ac04000 	.word	0x3ac04000
 80046c8:	36902000 	.word	0x36902000
 80046cc:	0c900008 	.word	0x0c900008

080046d0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	b09c      	sub	sp, #112	; 0x70
 80046d4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d6:	2100      	movs	r1, #0
 80046d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80046da:	9118      	str	r1, [sp, #96]	; 0x60
 80046dc:	9119      	str	r1, [sp, #100]	; 0x64
 80046de:	911a      	str	r1, [sp, #104]	; 0x68
 80046e0:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046e2:	2244      	movs	r2, #68	; 0x44
 80046e4:	a806      	add	r0, sp, #24
 80046e6:	f006 fe13 	bl	800b310 <memset>
  if(adcHandle->Instance==ADC1)
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f0:	d004      	beq.n	80046fc <HAL_ADC_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80046f2:	4a63      	ldr	r2, [pc, #396]	; (8004880 <HAL_ADC_MspInit+0x1b0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d059      	beq.n	80047ac <HAL_ADC_MspInit+0xdc>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80046f8:	b01c      	add	sp, #112	; 0x70
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80046fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004700:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004702:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004706:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004708:	a806      	add	r0, sp, #24
 800470a:	f003 fc75 	bl	8007ff8 <HAL_RCCEx_PeriphCLKConfig>
 800470e:	2800      	cmp	r0, #0
 8004710:	d13b      	bne.n	800478a <HAL_ADC_MspInit+0xba>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004712:	4a5c      	ldr	r2, [pc, #368]	; (8004884 <HAL_ADC_MspInit+0x1b4>)
 8004714:	6813      	ldr	r3, [r2, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800471a:	2b01      	cmp	r3, #1
 800471c:	d038      	beq.n	8004790 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800471e:	4b5a      	ldr	r3, [pc, #360]	; (8004888 <HAL_ADC_MspInit+0x1b8>)
 8004720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	64da      	str	r2, [r3, #76]	; 0x4c
 8004728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	9302      	str	r3, [sp, #8]
 8004730:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8004732:	2307      	movs	r3, #7
 8004734:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004736:	2303      	movs	r3, #3
 8004738:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	2500      	movs	r5, #0
 800473c:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473e:	a917      	add	r1, sp, #92	; 0x5c
 8004740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004744:	f002 feb4 	bl	80074b0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8004748:	4850      	ldr	r0, [pc, #320]	; (800488c <HAL_ADC_MspInit+0x1bc>)
 800474a:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_ADC_MspInit+0x1c0>)
 800474c:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800474e:	2305      	movs	r3, #5
 8004750:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004752:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004754:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800475a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800475e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004764:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004766:	2320      	movs	r3, #32
 8004768:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800476a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800476c:	f001 ffd0 	bl	8006710 <HAL_DMA_Init>
 8004770:	b9c8      	cbnz	r0, 80047a6 <HAL_ADC_MspInit+0xd6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004772:	4b46      	ldr	r3, [pc, #280]	; (800488c <HAL_ADC_MspInit+0x1bc>)
 8004774:	6563      	str	r3, [r4, #84]	; 0x54
 8004776:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004778:	2200      	movs	r2, #0
 800477a:	4611      	mov	r1, r2
 800477c:	2012      	movs	r0, #18
 800477e:	f001 fdd5 	bl	800632c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004782:	2012      	movs	r0, #18
 8004784:	f001 fe08 	bl	8006398 <HAL_NVIC_EnableIRQ>
 8004788:	e7b6      	b.n	80046f8 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 800478a:	f000 fad2 	bl	8004d32 <Error_Handler>
 800478e:	e7c0      	b.n	8004712 <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004790:	4b3d      	ldr	r3, [pc, #244]	; (8004888 <HAL_ADC_MspInit+0x1b8>)
 8004792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004798:	64da      	str	r2, [r3, #76]	; 0x4c
 800479a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	9b01      	ldr	r3, [sp, #4]
 80047a4:	e7bb      	b.n	800471e <HAL_ADC_MspInit+0x4e>
      Error_Handler();
 80047a6:	f000 fac4 	bl	8004d32 <Error_Handler>
 80047aa:	e7e2      	b.n	8004772 <HAL_ADC_MspInit+0xa2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80047ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b0:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80047b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80047b6:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047b8:	a806      	add	r0, sp, #24
 80047ba:	f003 fc1d 	bl	8007ff8 <HAL_RCCEx_PeriphCLKConfig>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d14d      	bne.n	800485e <HAL_ADC_MspInit+0x18e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80047c2:	4a30      	ldr	r2, [pc, #192]	; (8004884 <HAL_ADC_MspInit+0x1b4>)
 80047c4:	6813      	ldr	r3, [r2, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d04a      	beq.n	8004864 <HAL_ADC_MspInit+0x194>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ce:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <HAL_ADC_MspInit+0x1b8>)
 80047d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80047d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047da:	f002 0201 	and.w	r2, r2, #1
 80047de:	9204      	str	r2, [sp, #16]
 80047e0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047e4:	f042 0202 	orr.w	r2, r2, #2
 80047e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	9305      	str	r3, [sp, #20]
 80047f2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 80047f4:	2360      	movs	r3, #96	; 0x60
 80047f6:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047f8:	2603      	movs	r6, #3
 80047fa:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2500      	movs	r5, #0
 80047fe:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004800:	a917      	add	r1, sp, #92	; 0x5c
 8004802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004806:	f002 fe53 	bl	80074b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 800480a:	f640 0304 	movw	r3, #2052	; 0x804
 800480e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004810:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004814:	a917      	add	r1, sp, #92	; 0x5c
 8004816:	481f      	ldr	r0, [pc, #124]	; (8004894 <HAL_ADC_MspInit+0x1c4>)
 8004818:	f002 fe4a 	bl	80074b0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800481c:	481e      	ldr	r0, [pc, #120]	; (8004898 <HAL_ADC_MspInit+0x1c8>)
 800481e:	4b1f      	ldr	r3, [pc, #124]	; (800489c <HAL_ADC_MspInit+0x1cc>)
 8004820:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004822:	2324      	movs	r3, #36	; 0x24
 8004824:	6043      	str	r3, [r0, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004826:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004828:	60c5      	str	r5, [r0, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800482e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004832:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004838:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800483a:	2320      	movs	r3, #32
 800483c:	61c3      	str	r3, [r0, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800483e:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004840:	f001 ff66 	bl	8006710 <HAL_DMA_Init>
 8004844:	b9c8      	cbnz	r0, 800487a <HAL_ADC_MspInit+0x1aa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <HAL_ADC_MspInit+0x1c8>)
 8004848:	6563      	str	r3, [r4, #84]	; 0x54
 800484a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800484c:	2200      	movs	r2, #0
 800484e:	4611      	mov	r1, r2
 8004850:	2012      	movs	r0, #18
 8004852:	f001 fd6b 	bl	800632c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004856:	2012      	movs	r0, #18
 8004858:	f001 fd9e 	bl	8006398 <HAL_NVIC_EnableIRQ>
}
 800485c:	e74c      	b.n	80046f8 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 800485e:	f000 fa68 	bl	8004d32 <Error_Handler>
 8004862:	e7ae      	b.n	80047c2 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004864:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_ADC_MspInit+0x1b8>)
 8004866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800486c:	64da      	str	r2, [r3, #76]	; 0x4c
 800486e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004874:	9303      	str	r3, [sp, #12]
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	e7a9      	b.n	80047ce <HAL_ADC_MspInit+0xfe>
      Error_Handler();
 800487a:	f000 fa5a 	bl	8004d32 <Error_Handler>
 800487e:	e7e2      	b.n	8004846 <HAL_ADC_MspInit+0x176>
 8004880:	50000100 	.word	0x50000100
 8004884:	20001888 	.word	0x20001888
 8004888:	40021000 	.word	0x40021000
 800488c:	20001964 	.word	0x20001964
 8004890:	40020008 	.word	0x40020008
 8004894:	48000400 	.word	0x48000400
 8004898:	200019c4 	.word	0x200019c4
 800489c:	4002001c 	.word	0x4002001c

080048a0 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80048a0:	b500      	push	{lr}
 80048a2:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80048a4:	2230      	movs	r2, #48	; 0x30
 80048a6:	2100      	movs	r1, #0
 80048a8:	4668      	mov	r0, sp
 80048aa:	f006 fd31 	bl	800b310 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80048ae:	4810      	ldr	r0, [pc, #64]	; (80048f0 <MX_DAC1_Init+0x50>)
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <MX_DAC1_Init+0x54>)
 80048b2:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80048b4:	f001 fd92 	bl	80063dc <HAL_DAC_Init>
 80048b8:	b9a0      	cbnz	r0, 80048e4 <MX_DAC1_Init+0x44>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80048ba:	2200      	movs	r2, #0
 80048bc:	9200      	str	r2, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80048be:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80048c2:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80048c6:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80048c8:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80048ca:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80048cc:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80048ce:	2301      	movs	r3, #1
 80048d0:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80048d2:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80048d4:	4669      	mov	r1, sp
 80048d6:	4806      	ldr	r0, [pc, #24]	; (80048f0 <MX_DAC1_Init+0x50>)
 80048d8:	f001 fdde 	bl	8006498 <HAL_DAC_ConfigChannel>
 80048dc:	b928      	cbnz	r0, 80048ea <MX_DAC1_Init+0x4a>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80048de:	b00d      	add	sp, #52	; 0x34
 80048e0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80048e4:	f000 fa25 	bl	8004d32 <Error_Handler>
 80048e8:	e7e7      	b.n	80048ba <MX_DAC1_Init+0x1a>
    Error_Handler();
 80048ea:	f000 fa22 	bl	8004d32 <Error_Handler>
}
 80048ee:	e7f6      	b.n	80048de <MX_DAC1_Init+0x3e>
 80048f0:	20001a24 	.word	0x20001a24
 80048f4:	50000800 	.word	0x50000800

080048f8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80048f8:	b500      	push	{lr}
 80048fa:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fc:	2300      	movs	r3, #0
 80048fe:	9303      	str	r3, [sp, #12]
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	9305      	str	r3, [sp, #20]
 8004904:	9306      	str	r3, [sp, #24]
 8004906:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 8004908:	6802      	ldr	r2, [r0, #0]
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_DAC_MspInit+0x60>)
 800490c:	429a      	cmp	r2, r3
 800490e:	d002      	beq.n	8004916 <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8004910:	b009      	add	sp, #36	; 0x24
 8004912:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004916:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800491a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800491e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004920:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004924:	64da      	str	r2, [r3, #76]	; 0x4c
 8004926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004928:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800492c:	9201      	str	r2, [sp, #4]
 800492e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	64da      	str	r2, [r3, #76]	; 0x4c
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	9302      	str	r3, [sp, #8]
 8004940:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004942:	2310      	movs	r3, #16
 8004944:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004946:	2303      	movs	r3, #3
 8004948:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494a:	a903      	add	r1, sp, #12
 800494c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004950:	f002 fdae 	bl	80074b0 <HAL_GPIO_Init>
}
 8004954:	e7dc      	b.n	8004910 <HAL_DAC_MspInit+0x18>
 8004956:	bf00      	nop
 8004958:	50000800 	.word	0x50000800

0800495c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800495c:	b500      	push	{lr}
 800495e:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004960:	4b2b      	ldr	r3, [pc, #172]	; (8004a10 <MX_DMA_Init+0xb4>)
 8004962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004964:	f042 0204 	orr.w	r2, r2, #4
 8004968:	649a      	str	r2, [r3, #72]	; 0x48
 800496a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800496c:	f002 0204 	and.w	r2, r2, #4
 8004970:	9201      	str	r2, [sp, #4]
 8004972:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004974:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	649a      	str	r2, [r3, #72]	; 0x48
 800497c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800497e:	f002 0201 	and.w	r2, r2, #1
 8004982:	9202      	str	r2, [sp, #8]
 8004984:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004988:	f042 0202 	orr.w	r2, r2, #2
 800498c:	649a      	str	r2, [r3, #72]	; 0x48
 800498e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	9303      	str	r3, [sp, #12]
 8004996:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004998:	2200      	movs	r2, #0
 800499a:	4611      	mov	r1, r2
 800499c:	200b      	movs	r0, #11
 800499e:	f001 fcc5 	bl	800632c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80049a2:	200b      	movs	r0, #11
 80049a4:	f001 fcf8 	bl	8006398 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80049a8:	2200      	movs	r2, #0
 80049aa:	4611      	mov	r1, r2
 80049ac:	200c      	movs	r0, #12
 80049ae:	f001 fcbd 	bl	800632c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80049b2:	200c      	movs	r0, #12
 80049b4:	f001 fcf0 	bl	8006398 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80049b8:	2200      	movs	r2, #0
 80049ba:	4611      	mov	r1, r2
 80049bc:	200d      	movs	r0, #13
 80049be:	f001 fcb5 	bl	800632c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80049c2:	200d      	movs	r0, #13
 80049c4:	f001 fce8 	bl	8006398 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80049c8:	2200      	movs	r2, #0
 80049ca:	4611      	mov	r1, r2
 80049cc:	200e      	movs	r0, #14
 80049ce:	f001 fcad 	bl	800632c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80049d2:	200e      	movs	r0, #14
 80049d4:	f001 fce0 	bl	8006398 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80049d8:	2200      	movs	r2, #0
 80049da:	4611      	mov	r1, r2
 80049dc:	2038      	movs	r0, #56	; 0x38
 80049de:	f001 fca5 	bl	800632c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80049e2:	2038      	movs	r0, #56	; 0x38
 80049e4:	f001 fcd8 	bl	8006398 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80049e8:	2200      	movs	r2, #0
 80049ea:	4611      	mov	r1, r2
 80049ec:	2039      	movs	r0, #57	; 0x39
 80049ee:	f001 fc9d 	bl	800632c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80049f2:	2039      	movs	r0, #57	; 0x39
 80049f4:	f001 fcd0 	bl	8006398 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	4611      	mov	r1, r2
 80049fc:	203a      	movs	r0, #58	; 0x3a
 80049fe:	f001 fc95 	bl	800632c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8004a02:	203a      	movs	r0, #58	; 0x3a
 8004a04:	f001 fcc8 	bl	8006398 <HAL_NVIC_EnableIRQ>

}
 8004a08:	b005      	add	sp, #20
 8004a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000

08004a14 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8004a14:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004a16:	4811      	ldr	r0, [pc, #68]	; (8004a5c <MX_FDCAN1_Init+0x48>)
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <MX_FDCAN1_Init+0x4c>)
 8004a1a:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8004a20:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004a24:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004a26:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004a28:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004a2a:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004a2c:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8004a2e:	2201      	movs	r2, #1
 8004a30:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8004a32:	2107      	movs	r1, #7
 8004a34:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8004a36:	242a      	movs	r4, #42	; 0x2a
 8004a38:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8004a3a:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004a3c:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8004a3e:	2209      	movs	r2, #9
 8004a40:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8004a42:	210a      	movs	r1, #10
 8004a44:	62c1      	str	r1, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8004a46:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8004a48:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004a4a:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004a4c:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004a4e:	f001 fff7 	bl	8006a40 <HAL_FDCAN_Init>
 8004a52:	b900      	cbnz	r0, 8004a56 <MX_FDCAN1_Init+0x42>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004a54:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004a56:	f000 f96c 	bl	8004d32 <Error_Handler>
}
 8004a5a:	e7fb      	b.n	8004a54 <MX_FDCAN1_Init+0x40>
 8004a5c:	20001a38 	.word	0x20001a38
 8004a60:	40006400 	.word	0x40006400

08004a64 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8004a64:	b510      	push	{r4, lr}
 8004a66:	b098      	sub	sp, #96	; 0x60
 8004a68:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	9113      	str	r1, [sp, #76]	; 0x4c
 8004a6e:	9114      	str	r1, [sp, #80]	; 0x50
 8004a70:	9115      	str	r1, [sp, #84]	; 0x54
 8004a72:	9116      	str	r1, [sp, #88]	; 0x58
 8004a74:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a76:	2244      	movs	r2, #68	; 0x44
 8004a78:	a802      	add	r0, sp, #8
 8004a7a:	f006 fc49 	bl	800b310 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <HAL_FDCAN_MspInit+0x98>)
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d001      	beq.n	8004a8a <HAL_FDCAN_MspInit+0x26>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8004a86:	b018      	add	sp, #96	; 0x60
 8004a88:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a8e:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a94:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a96:	a802      	add	r0, sp, #8
 8004a98:	f003 faae 	bl	8007ff8 <HAL_RCCEx_PeriphCLKConfig>
 8004a9c:	bb50      	cbnz	r0, 8004af4 <HAL_FDCAN_MspInit+0x90>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <HAL_FDCAN_MspInit+0x9c>)
 8004aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004aa2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004aa6:	659a      	str	r2, [r3, #88]	; 0x58
 8004aa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004aaa:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004aae:	9200      	str	r2, [sp, #0]
 8004ab0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004ac4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004ac8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aca:	2302      	movs	r3, #2
 8004acc:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ace:	2400      	movs	r4, #0
 8004ad0:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad2:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004ad4:	2309      	movs	r3, #9
 8004ad6:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad8:	a913      	add	r1, sp, #76	; 0x4c
 8004ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ade:	f002 fce7 	bl	80074b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	2015      	movs	r0, #21
 8004ae8:	f001 fc20 	bl	800632c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004aec:	2015      	movs	r0, #21
 8004aee:	f001 fc53 	bl	8006398 <HAL_NVIC_EnableIRQ>
}
 8004af2:	e7c8      	b.n	8004a86 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 8004af4:	f000 f91d 	bl	8004d32 <Error_Handler>
 8004af8:	e7d1      	b.n	8004a9e <HAL_FDCAN_MspInit+0x3a>
 8004afa:	bf00      	nop
 8004afc:	40006400 	.word	0x40006400
 8004b00:	40021000 	.word	0x40021000

08004b04 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8004b04:	b508      	push	{r3, lr}
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004b06:	4805      	ldr	r0, [pc, #20]	; (8004b1c <MX_FMAC_Init+0x18>)
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <MX_FMAC_Init+0x1c>)
 8004b0a:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004b0c:	f002 fca0 	bl	8007450 <HAL_FMAC_Init>
 8004b10:	b900      	cbnz	r0, 8004b14 <MX_FMAC_Init+0x10>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004b12:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004b14:	f000 f90d 	bl	8004d32 <Error_Handler>
}
 8004b18:	e7fb      	b.n	8004b12 <MX_FMAC_Init+0xe>
 8004b1a:	bf00      	nop
 8004b1c:	20001a9c 	.word	0x20001a9c
 8004b20:	40021400 	.word	0x40021400

08004b24 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{

  if(fmacHandle->Instance==FMAC)
 8004b24:	6802      	ldr	r2, [r0, #0]
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_FMAC_MspInit+0x28>)
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d000      	beq.n	8004b2e <HAL_FMAC_MspInit+0xa>
 8004b2c:	4770      	bx	lr
{
 8004b2e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004b30:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004b34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b36:	f042 0210 	orr.w	r2, r2, #16
 8004b3a:	649a      	str	r2, [r3, #72]	; 0x48
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8004b46:	b002      	add	sp, #8
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40021400 	.word	0x40021400

08004b50 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8004b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b54:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b56:	2400      	movs	r4, #0
 8004b58:	9405      	str	r4, [sp, #20]
 8004b5a:	9406      	str	r4, [sp, #24]
 8004b5c:	9407      	str	r4, [sp, #28]
 8004b5e:	9408      	str	r4, [sp, #32]
 8004b60:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b62:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <MX_GPIO_Init+0x110>)
 8004b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b66:	f042 0220 	orr.w	r2, r2, #32
 8004b6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b6e:	f002 0220 	and.w	r2, r2, #32
 8004b72:	9200      	str	r2, [sp, #0]
 8004b74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b78:	f042 0204 	orr.w	r2, r2, #4
 8004b7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b80:	f002 0204 	and.w	r2, r2, #4
 8004b84:	9201      	str	r2, [sp, #4]
 8004b86:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b92:	f002 0201 	and.w	r2, r2, #1
 8004b96:	9202      	str	r2, [sp, #8]
 8004b98:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b9c:	f042 0202 	orr.w	r2, r2, #2
 8004ba0:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba4:	f002 0202 	and.w	r2, r2, #2
 8004ba8:	9203      	str	r2, [sp, #12]
 8004baa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bae:	f042 0208 	orr.w	r2, r2, #8
 8004bb2:	64da      	str	r2, [r3, #76]	; 0x4c
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8004bbe:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8004c6c <MX_GPIO_Init+0x11c>
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	21c0      	movs	r1, #192	; 0xc0
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	f002 fd56 	bl	8007678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8004bcc:	4622      	mov	r2, r4
 8004bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bd6:	f002 fd4f 	bl	8007678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8004bda:	4f22      	ldr	r7, [pc, #136]	; (8004c64 <MX_GPIO_Init+0x114>)
 8004bdc:	4622      	mov	r2, r4
 8004bde:	2104      	movs	r1, #4
 8004be0:	4638      	mov	r0, r7
 8004be2:	f002 fd49 	bl	8007678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8004be6:	4e20      	ldr	r6, [pc, #128]	; (8004c68 <MX_GPIO_Init+0x118>)
 8004be8:	4622      	mov	r2, r4
 8004bea:	2140      	movs	r1, #64	; 0x40
 8004bec:	4630      	mov	r0, r6
 8004bee:	f002 fd43 	bl	8007678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8004bf2:	23c0      	movs	r3, #192	; 0xc0
 8004bf4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf6:	2501      	movs	r5, #1
 8004bf8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bfc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bfe:	a905      	add	r1, sp, #20
 8004c00:	4640      	mov	r0, r8
 8004c02:	f002 fc55 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c0a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c12:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004c14:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c16:	a905      	add	r1, sp, #20
 8004c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c1c:	f002 fc48 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8004c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c26:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c28:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c2a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8004c2c:	a905      	add	r1, sp, #20
 8004c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c32:	f002 fc3d 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8004c36:	2304      	movs	r3, #4
 8004c38:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c3a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c3e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8004c40:	a905      	add	r1, sp, #20
 8004c42:	4638      	mov	r0, r7
 8004c44:	f002 fc34 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8004c48:	2340      	movs	r3, #64	; 0x40
 8004c4a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c4c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c50:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8004c52:	a905      	add	r1, sp, #20
 8004c54:	4630      	mov	r0, r6
 8004c56:	f002 fc2b 	bl	80074b0 <HAL_GPIO_Init>

}
 8004c5a:	b00a      	add	sp, #40	; 0x28
 8004c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c60:	40021000 	.word	0x40021000
 8004c64:	48000c00 	.word	0x48000c00
 8004c68:	48000400 	.word	0x48000400
 8004c6c:	48000800 	.word	0x48000800

08004c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c70:	b500      	push	{lr}
 8004c72:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c74:	2238      	movs	r2, #56	; 0x38
 8004c76:	2100      	movs	r1, #0
 8004c78:	a806      	add	r0, sp, #24
 8004c7a:	f006 fb49 	bl	800b310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c7e:	2000      	movs	r0, #0
 8004c80:	9001      	str	r0, [sp, #4]
 8004c82:	9002      	str	r0, [sp, #8]
 8004c84:	9003      	str	r0, [sp, #12]
 8004c86:	9004      	str	r0, [sp, #16]
 8004c88:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004c8a:	f002 fd03 	bl	8007694 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c96:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c98:	2240      	movs	r2, #64	; 0x40
 8004c9a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c9c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c9e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004ca4:	2250      	movs	r2, #80	; 0x50
 8004ca6:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ca8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004caa:	2208      	movs	r2, #8
 8004cac:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004cae:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cb0:	a806      	add	r0, sp, #24
 8004cb2:	f002 fd81 	bl	80077b8 <HAL_RCC_OscConfig>
 8004cb6:	b9c0      	cbnz	r0, 8004cea <SystemClock_Config+0x7a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cb8:	230f      	movs	r3, #15
 8004cba:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004cc4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cc6:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004cc8:	2104      	movs	r1, #4
 8004cca:	eb0d 0001 	add.w	r0, sp, r1
 8004cce:	f003 f84b 	bl	8007d68 <HAL_RCC_ClockConfig>
 8004cd2:	b960      	cbnz	r0, 8004cee <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8004cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cd8:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8004cdc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ce0:	f002 ffe0 	bl	8007ca4 <HAL_RCC_MCOConfig>
}
 8004ce4:	b015      	add	sp, #84	; 0x54
 8004ce6:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cea:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cec:	e7fe      	b.n	8004cec <SystemClock_Config+0x7c>
 8004cee:	b672      	cpsid	i
 8004cf0:	e7fe      	b.n	8004cf0 <SystemClock_Config+0x80>

08004cf2 <main>:
{
 8004cf2:	b508      	push	{r3, lr}
  HAL_Init();
 8004cf4:	f000 fc76 	bl	80055e4 <HAL_Init>
  SystemClock_Config();
 8004cf8:	f7ff ffba 	bl	8004c70 <SystemClock_Config>
  MX_GPIO_Init();
 8004cfc:	f7ff ff28 	bl	8004b50 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d00:	f7ff fe2c 	bl	800495c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004d04:	f7ff fe86 	bl	8004a14 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8004d08:	f000 f816 	bl	8004d38 <MX_SPI1_Init>
  MX_SPI3_Init();
 8004d0c:	f000 f83a 	bl	8004d84 <MX_SPI3_Init>
  MX_TIM1_Init();
 8004d10:	f000 fae4 	bl	80052dc <MX_TIM1_Init>
  MX_ADC1_Init();
 8004d14:	f7ff fbe0 	bl	80044d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004d18:	f7ff fc62 	bl	80045e0 <MX_ADC2_Init>
  MX_DAC1_Init();
 8004d1c:	f7ff fdc0 	bl	80048a0 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8004d20:	f000 fb72 	bl	8005408 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8004d24:	f000 fa24 	bl	8005170 <MX_TIM3_Init>
  MX_FMAC_Init();
 8004d28:	f7ff feec 	bl	8004b04 <MX_FMAC_Init>
	BLDC_main();
 8004d2c:	f7fc fb44 	bl	80013b8 <BLDC_main>
  while (1)
 8004d30:	e7fc      	b.n	8004d2c <main+0x3a>

08004d32 <Error_Handler>:
 8004d32:	b672      	cpsid	i
  while (1)
 8004d34:	e7fe      	b.n	8004d34 <Error_Handler+0x2>
	...

08004d38 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004d38:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004d3a:	4810      	ldr	r0, [pc, #64]	; (8004d7c <MX_SPI1_Init+0x44>)
 8004d3c:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <MX_SPI1_Init+0x48>)
 8004d3e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d40:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004d44:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d46:	2300      	movs	r3, #0
 8004d48:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d4e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d50:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004d52:	2201      	movs	r2, #1
 8004d54:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004d5c:	2228      	movs	r2, #40	; 0x28
 8004d5e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d60:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d62:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d64:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004d66:	2207      	movs	r2, #7
 8004d68:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d6a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004d6c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d6e:	f003 fc17 	bl	80085a0 <HAL_SPI_Init>
 8004d72:	b900      	cbnz	r0, 8004d76 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d74:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004d76:	f7ff ffdc 	bl	8004d32 <Error_Handler>
}
 8004d7a:	e7fb      	b.n	8004d74 <MX_SPI1_Init+0x3c>
 8004d7c:	20001c54 	.word	0x20001c54
 8004d80:	40013000 	.word	0x40013000

08004d84 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004d84:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004d86:	4810      	ldr	r0, [pc, #64]	; (8004dc8 <MX_SPI3_Init+0x44>)
 8004d88:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <MX_SPI3_Init+0x48>)
 8004d8a:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004d8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004d90:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004d92:	2300      	movs	r3, #0
 8004d94:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d9a:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d9c:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004d9e:	2201      	movs	r2, #1
 8004da0:	6142      	str	r2, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da6:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004da8:	2228      	movs	r2, #40	; 0x28
 8004daa:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004dac:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004dae:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004db2:	2207      	movs	r2, #7
 8004db4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004db6:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004db8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004dba:	f003 fbf1 	bl	80085a0 <HAL_SPI_Init>
 8004dbe:	b900      	cbnz	r0, 8004dc2 <MX_SPI3_Init+0x3e>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004dc0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004dc2:	f7ff ffb6 	bl	8004d32 <Error_Handler>
}
 8004dc6:	e7fb      	b.n	8004dc0 <MX_SPI3_Init+0x3c>
 8004dc8:	20001cb8 	.word	0x20001cb8
 8004dcc:	40003c00 	.word	0x40003c00

08004dd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9305      	str	r3, [sp, #20]
 8004dda:	9306      	str	r3, [sp, #24]
 8004ddc:	9307      	str	r3, [sp, #28]
 8004dde:	9308      	str	r3, [sp, #32]
 8004de0:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8004de2:	6803      	ldr	r3, [r0, #0]
 8004de4:	4a59      	ldr	r2, [pc, #356]	; (8004f4c <HAL_SPI_MspInit+0x17c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_SPI_MspInit+0x24>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8004dea:	4a59      	ldr	r2, [pc, #356]	; (8004f50 <HAL_SPI_MspInit+0x180>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d056      	beq.n	8004e9e <HAL_SPI_MspInit+0xce>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004df0:	b00a      	add	sp, #40	; 0x28
 8004df2:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004df4:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <HAL_SPI_MspInit+0x184>)
 8004df6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004df8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dfc:	661a      	str	r2, [r3, #96]	; 0x60
 8004dfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e00:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e04:	9201      	str	r2, [sp, #4]
 8004e06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e0a:	f042 0202 	orr.w	r2, r2, #2
 8004e0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	9302      	str	r3, [sp, #8]
 8004e18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004e1a:	2338      	movs	r3, #56	; 0x38
 8004e1c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1e:	2302      	movs	r3, #2
 8004e20:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e22:	2305      	movs	r3, #5
 8004e24:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e26:	a905      	add	r1, sp, #20
 8004e28:	484b      	ldr	r0, [pc, #300]	; (8004f58 <HAL_SPI_MspInit+0x188>)
 8004e2a:	f002 fb41 	bl	80074b0 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8004e2e:	484b      	ldr	r0, [pc, #300]	; (8004f5c <HAL_SPI_MspInit+0x18c>)
 8004e30:	4b4b      	ldr	r3, [pc, #300]	; (8004f60 <HAL_SPI_MspInit+0x190>)
 8004e32:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004e34:	230a      	movs	r3, #10
 8004e36:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e3c:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e42:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e44:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004e46:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e48:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004e4a:	f001 fc61 	bl	8006710 <HAL_DMA_Init>
 8004e4e:	bb00      	cbnz	r0, 8004e92 <HAL_SPI_MspInit+0xc2>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004e50:	4b42      	ldr	r3, [pc, #264]	; (8004f5c <HAL_SPI_MspInit+0x18c>)
 8004e52:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e54:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8004e56:	4843      	ldr	r0, [pc, #268]	; (8004f64 <HAL_SPI_MspInit+0x194>)
 8004e58:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <HAL_SPI_MspInit+0x198>)
 8004e5a:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004e5c:	230b      	movs	r3, #11
 8004e5e:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e60:	2310      	movs	r3, #16
 8004e62:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e6c:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e6e:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004e70:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e72:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004e74:	f001 fc4c 	bl	8006710 <HAL_DMA_Init>
 8004e78:	b970      	cbnz	r0, 8004e98 <HAL_SPI_MspInit+0xc8>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004e7a:	4b3a      	ldr	r3, [pc, #232]	; (8004f64 <HAL_SPI_MspInit+0x194>)
 8004e7c:	6563      	str	r3, [r4, #84]	; 0x54
 8004e7e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004e80:	2200      	movs	r2, #0
 8004e82:	4611      	mov	r1, r2
 8004e84:	2023      	movs	r0, #35	; 0x23
 8004e86:	f001 fa51 	bl	800632c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004e8a:	2023      	movs	r0, #35	; 0x23
 8004e8c:	f001 fa84 	bl	8006398 <HAL_NVIC_EnableIRQ>
 8004e90:	e7ae      	b.n	8004df0 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8004e92:	f7ff ff4e 	bl	8004d32 <Error_Handler>
 8004e96:	e7db      	b.n	8004e50 <HAL_SPI_MspInit+0x80>
      Error_Handler();
 8004e98:	f7ff ff4b 	bl	8004d32 <Error_Handler>
 8004e9c:	e7ed      	b.n	8004e7a <HAL_SPI_MspInit+0xaa>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004e9e:	4b2d      	ldr	r3, [pc, #180]	; (8004f54 <HAL_SPI_MspInit+0x184>)
 8004ea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ea8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004eaa:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004eae:	9203      	str	r2, [sp, #12]
 8004eb0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eb4:	f042 0204 	orr.w	r2, r2, #4
 8004eb8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004ec4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004ec8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004ece:	2306      	movs	r3, #6
 8004ed0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ed2:	a905      	add	r1, sp, #20
 8004ed4:	4825      	ldr	r0, [pc, #148]	; (8004f6c <HAL_SPI_MspInit+0x19c>)
 8004ed6:	f002 faeb 	bl	80074b0 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8004eda:	4825      	ldr	r0, [pc, #148]	; (8004f70 <HAL_SPI_MspInit+0x1a0>)
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <HAL_SPI_MspInit+0x1a4>)
 8004ede:	6003      	str	r3, [r0, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8004ee0:	230e      	movs	r3, #14
 8004ee2:	6043      	str	r3, [r0, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6083      	str	r3, [r0, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ee8:	60c3      	str	r3, [r0, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004eea:	2280      	movs	r2, #128	; 0x80
 8004eec:	6102      	str	r2, [r0, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004eee:	6143      	str	r3, [r0, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ef0:	6183      	str	r3, [r0, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8004ef2:	61c3      	str	r3, [r0, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ef4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8004ef6:	f001 fc0b 	bl	8006710 <HAL_DMA_Init>
 8004efa:	bb00      	cbnz	r0, 8004f3e <HAL_SPI_MspInit+0x16e>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8004efc:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <HAL_SPI_MspInit+0x1a0>)
 8004efe:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f00:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8004f02:	481d      	ldr	r0, [pc, #116]	; (8004f78 <HAL_SPI_MspInit+0x1a8>)
 8004f04:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <HAL_SPI_MspInit+0x1ac>)
 8004f06:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004f08:	230f      	movs	r3, #15
 8004f0a:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f18:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f1a:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004f1c:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f1e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004f20:	f001 fbf6 	bl	8006710 <HAL_DMA_Init>
 8004f24:	b970      	cbnz	r0, 8004f44 <HAL_SPI_MspInit+0x174>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8004f26:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <HAL_SPI_MspInit+0x1a8>)
 8004f28:	6563      	str	r3, [r4, #84]	; 0x54
 8004f2a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4611      	mov	r1, r2
 8004f30:	2033      	movs	r0, #51	; 0x33
 8004f32:	f001 f9fb 	bl	800632c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004f36:	2033      	movs	r0, #51	; 0x33
 8004f38:	f001 fa2e 	bl	8006398 <HAL_NVIC_EnableIRQ>
}
 8004f3c:	e758      	b.n	8004df0 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8004f3e:	f7ff fef8 	bl	8004d32 <Error_Handler>
 8004f42:	e7db      	b.n	8004efc <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8004f44:	f7ff fef5 	bl	8004d32 <Error_Handler>
 8004f48:	e7ed      	b.n	8004f26 <HAL_SPI_MspInit+0x156>
 8004f4a:	bf00      	nop
 8004f4c:	40013000 	.word	0x40013000
 8004f50:	40003c00 	.word	0x40003c00
 8004f54:	40021000 	.word	0x40021000
 8004f58:	48000400 	.word	0x48000400
 8004f5c:	20001ad4 	.word	0x20001ad4
 8004f60:	40020030 	.word	0x40020030
 8004f64:	20001b34 	.word	0x20001b34
 8004f68:	40020044 	.word	0x40020044
 8004f6c:	48000800 	.word	0x48000800
 8004f70:	20001b94 	.word	0x20001b94
 8004f74:	40020408 	.word	0x40020408
 8004f78:	20001bf4 	.word	0x20001bf4
 8004f7c:	4002041c 	.word	0x4002041c

08004f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f80:	b500      	push	{lr}
 8004f82:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_MspInit+0x34>)
 8004f86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	661a      	str	r2, [r3, #96]	; 0x60
 8004f8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f90:	f002 0201 	and.w	r2, r2, #1
 8004f94:	9200      	str	r2, [sp, #0]
 8004f96:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f9e:	659a      	str	r2, [r3, #88]	; 0x58
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004faa:	f002 fbfd 	bl	80077a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fae:	b003      	add	sp, #12
 8004fb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fb4:	40021000 	.word	0x40021000

08004fb8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fb8:	e7fe      	b.n	8004fb8 <NMI_Handler>

08004fba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fba:	e7fe      	b.n	8004fba <HardFault_Handler>

08004fbc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fbc:	e7fe      	b.n	8004fbc <MemManage_Handler>

08004fbe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fbe:	e7fe      	b.n	8004fbe <BusFault_Handler>

08004fc0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fc0:	e7fe      	b.n	8004fc0 <UsageFault_Handler>

08004fc2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fc2:	4770      	bx	lr

08004fc4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fc4:	4770      	bx	lr

08004fc6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fc6:	4770      	bx	lr

08004fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fca:	f000 fb1b 	bl	8005604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fce:	bd08      	pop	{r3, pc}

08004fd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004fd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004fd2:	4802      	ldr	r0, [pc, #8]	; (8004fdc <DMA1_Channel1_IRQHandler+0xc>)
 8004fd4:	f001 fcd1 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004fd8:	bd08      	pop	{r3, pc}
 8004fda:	bf00      	nop
 8004fdc:	20001964 	.word	0x20001964

08004fe0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004fe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004fe2:	4802      	ldr	r0, [pc, #8]	; (8004fec <DMA1_Channel2_IRQHandler+0xc>)
 8004fe4:	f001 fcc9 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004fe8:	bd08      	pop	{r3, pc}
 8004fea:	bf00      	nop
 8004fec:	200019c4 	.word	0x200019c4

08004ff0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004ff0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004ff2:	4802      	ldr	r0, [pc, #8]	; (8004ffc <DMA1_Channel3_IRQHandler+0xc>)
 8004ff4:	f001 fcc1 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004ff8:	bd08      	pop	{r3, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20001ad4 	.word	0x20001ad4

08005000 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005000:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005002:	4802      	ldr	r0, [pc, #8]	; (800500c <DMA1_Channel4_IRQHandler+0xc>)
 8005004:	f001 fcb9 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005008:	bd08      	pop	{r3, pc}
 800500a:	bf00      	nop
 800500c:	20001b34 	.word	0x20001b34

08005010 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005012:	4803      	ldr	r0, [pc, #12]	; (8005020 <ADC1_2_IRQHandler+0x10>)
 8005014:	f000 fc3a 	bl	800588c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005018:	4802      	ldr	r0, [pc, #8]	; (8005024 <ADC1_2_IRQHandler+0x14>)
 800501a:	f000 fc37 	bl	800588c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800501e:	bd08      	pop	{r3, pc}
 8005020:	2000188c 	.word	0x2000188c
 8005024:	200018f8 	.word	0x200018f8

08005028 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005028:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800502a:	4802      	ldr	r0, [pc, #8]	; (8005034 <FDCAN1_IT0_IRQHandler+0xc>)
 800502c:	f001 ff9d 	bl	8006f6a <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005030:	bd08      	pop	{r3, pc}
 8005032:	bf00      	nop
 8005034:	20001a38 	.word	0x20001a38

08005038 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005038:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800503a:	4802      	ldr	r0, [pc, #8]	; (8005044 <TIM3_IRQHandler+0xc>)
 800503c:	f003 fef9 	bl	8008e32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005040:	bd08      	pop	{r3, pc}
 8005042:	bf00      	nop
 8005044:	20001d6c 	.word	0x20001d6c

08005048 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005048:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800504a:	4802      	ldr	r0, [pc, #8]	; (8005054 <SPI1_IRQHandler+0xc>)
 800504c:	f003 fcaa 	bl	80089a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005050:	bd08      	pop	{r3, pc}
 8005052:	bf00      	nop
 8005054:	20001c54 	.word	0x20001c54

08005058 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800505a:	4802      	ldr	r0, [pc, #8]	; (8005064 <USART1_IRQHandler+0xc>)
 800505c:	f004 fe6c 	bl	8009d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005060:	bd08      	pop	{r3, pc}
 8005062:	bf00      	nop
 8005064:	20001e18 	.word	0x20001e18

08005068 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005068:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800506a:	4802      	ldr	r0, [pc, #8]	; (8005074 <SPI3_IRQHandler+0xc>)
 800506c:	f003 fc9a 	bl	80089a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005070:	bd08      	pop	{r3, pc}
 8005072:	bf00      	nop
 8005074:	20001cb8 	.word	0x20001cb8

08005078 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8005078:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800507a:	4802      	ldr	r0, [pc, #8]	; (8005084 <DMA2_Channel1_IRQHandler+0xc>)
 800507c:	f001 fc7d 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005080:	bd08      	pop	{r3, pc}
 8005082:	bf00      	nop
 8005084:	20001b94 	.word	0x20001b94

08005088 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8005088:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800508a:	4802      	ldr	r0, [pc, #8]	; (8005094 <DMA2_Channel2_IRQHandler+0xc>)
 800508c:	f001 fc75 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8005090:	bd08      	pop	{r3, pc}
 8005092:	bf00      	nop
 8005094:	20001bf4 	.word	0x20001bf4

08005098 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8005098:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800509a:	4802      	ldr	r0, [pc, #8]	; (80050a4 <DMA2_Channel3_IRQHandler+0xc>)
 800509c:	f001 fc6d 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80050a0:	bd08      	pop	{r3, pc}
 80050a2:	bf00      	nop
 80050a4:	20001db8 	.word	0x20001db8

080050a8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80050a8:	2001      	movs	r0, #1
 80050aa:	4770      	bx	lr

080050ac <_kill>:

int _kill(int pid, int sig)
{
 80050ac:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050ae:	f006 f981 	bl	800b3b4 <__errno>
 80050b2:	2316      	movs	r3, #22
 80050b4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80050b6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ba:	bd08      	pop	{r3, pc}

080050bc <_exit>:

void _exit (int status)
{
 80050bc:	b508      	push	{r3, lr}
  errno = EINVAL;
 80050be:	f006 f979 	bl	800b3b4 <__errno>
 80050c2:	2316      	movs	r3, #22
 80050c4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80050c6:	e7fe      	b.n	80050c6 <_exit+0xa>

080050c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050c8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ca:	1e16      	subs	r6, r2, #0
 80050cc:	dd07      	ble.n	80050de <_read+0x16>
 80050ce:	460c      	mov	r4, r1
 80050d0:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80050d2:	f3af 8000 	nop.w
 80050d6:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050da:	42a5      	cmp	r5, r4
 80050dc:	d1f9      	bne.n	80050d2 <_read+0xa>
  }

  return len;
}
 80050de:	4630      	mov	r0, r6
 80050e0:	bd70      	pop	{r4, r5, r6, pc}

080050e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050e2:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e4:	1e16      	subs	r6, r2, #0
 80050e6:	dd07      	ble.n	80050f8 <_write+0x16>
 80050e8:	460c      	mov	r4, r1
 80050ea:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80050ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80050f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050f4:	42a5      	cmp	r5, r4
 80050f6:	d1f9      	bne.n	80050ec <_write+0xa>
  }
  return len;
}
 80050f8:	4630      	mov	r0, r6
 80050fa:	bd70      	pop	{r4, r5, r6, pc}

080050fc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	4770      	bx	lr

08005102 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005106:	604b      	str	r3, [r1, #4]
  return 0;
}
 8005108:	2000      	movs	r0, #0
 800510a:	4770      	bx	lr

0800510c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800510c:	2001      	movs	r0, #1
 800510e:	4770      	bx	lr

08005110 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005110:	2000      	movs	r0, #0
 8005112:	4770      	bx	lr

08005114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005114:	b508      	push	{r3, lr}
 8005116:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005118:	4a0c      	ldr	r2, [pc, #48]	; (800514c <_sbrk+0x38>)
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	b152      	cbz	r2, 8005134 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800511e:	4a0b      	ldr	r2, [pc, #44]	; (800514c <_sbrk+0x38>)
 8005120:	6810      	ldr	r0, [r2, #0]
 8005122:	4403      	add	r3, r0
 8005124:	4a0a      	ldr	r2, [pc, #40]	; (8005150 <_sbrk+0x3c>)
 8005126:	490b      	ldr	r1, [pc, #44]	; (8005154 <_sbrk+0x40>)
 8005128:	1a52      	subs	r2, r2, r1
 800512a:	4293      	cmp	r3, r2
 800512c:	d806      	bhi.n	800513c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800512e:	4a07      	ldr	r2, [pc, #28]	; (800514c <_sbrk+0x38>)
 8005130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8005132:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8005134:	4a05      	ldr	r2, [pc, #20]	; (800514c <_sbrk+0x38>)
 8005136:	4908      	ldr	r1, [pc, #32]	; (8005158 <_sbrk+0x44>)
 8005138:	6011      	str	r1, [r2, #0]
 800513a:	e7f0      	b.n	800511e <_sbrk+0xa>
    errno = ENOMEM;
 800513c:	f006 f93a 	bl	800b3b4 <__errno>
 8005140:	230c      	movs	r3, #12
 8005142:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005144:	f04f 30ff 	mov.w	r0, #4294967295
 8005148:	e7f3      	b.n	8005132 <_sbrk+0x1e>
 800514a:	bf00      	nop
 800514c:	20001d1c 	.word	0x20001d1c
 8005150:	20008000 	.word	0x20008000
 8005154:	00000400 	.word	0x00000400
 8005158:	20001ff8 	.word	0x20001ff8

0800515c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800515c:	4a03      	ldr	r2, [pc, #12]	; (800516c <SystemInit+0x10>)
 800515e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005162:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005166:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800516a:	4770      	bx	lr
 800516c:	e000ed00 	.word	0xe000ed00

08005170 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005170:	b500      	push	{lr}
 8005172:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005174:	2300      	movs	r3, #0
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	9305      	str	r3, [sp, #20]
 800517a:	9306      	str	r3, [sp, #24]
 800517c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	9302      	str	r3, [sp, #8]
 8005182:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005184:	4815      	ldr	r0, [pc, #84]	; (80051dc <MX_TIM3_Init+0x6c>)
 8005186:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <MX_TIM3_Init+0x70>)
 8005188:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 3;
 800518a:	2203      	movs	r2, #3
 800518c:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800518e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 3999;
 8005190:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005194:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005196:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800519c:	f003 fff2 	bl	8009184 <HAL_TIM_Base_Init>
 80051a0:	b990      	cbnz	r0, 80051c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80051a8:	a904      	add	r1, sp, #16
 80051aa:	480c      	ldr	r0, [pc, #48]	; (80051dc <MX_TIM3_Init+0x6c>)
 80051ac:	f004 f93e 	bl	800942c <HAL_TIM_ConfigClockSource>
 80051b0:	b968      	cbnz	r0, 80051ce <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051b2:	2300      	movs	r3, #0
 80051b4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051b6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80051b8:	a901      	add	r1, sp, #4
 80051ba:	4808      	ldr	r0, [pc, #32]	; (80051dc <MX_TIM3_Init+0x6c>)
 80051bc:	f004 fc02 	bl	80099c4 <HAL_TIMEx_MasterConfigSynchronization>
 80051c0:	b940      	cbnz	r0, 80051d4 <MX_TIM3_Init+0x64>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80051c2:	b009      	add	sp, #36	; 0x24
 80051c4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80051c8:	f7ff fdb3 	bl	8004d32 <Error_Handler>
 80051cc:	e7e9      	b.n	80051a2 <MX_TIM3_Init+0x32>
    Error_Handler();
 80051ce:	f7ff fdb0 	bl	8004d32 <Error_Handler>
 80051d2:	e7ee      	b.n	80051b2 <MX_TIM3_Init+0x42>
    Error_Handler();
 80051d4:	f7ff fdad 	bl	8004d32 <Error_Handler>
}
 80051d8:	e7f3      	b.n	80051c2 <MX_TIM3_Init+0x52>
 80051da:	bf00      	nop
 80051dc:	20001d6c 	.word	0x20001d6c
 80051e0:	40000400 	.word	0x40000400

080051e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051e4:	b500      	push	{lr}
 80051e6:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 80051e8:	6803      	ldr	r3, [r0, #0]
 80051ea:	4a13      	ldr	r2, [pc, #76]	; (8005238 <HAL_TIM_Base_MspInit+0x54>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d005      	beq.n	80051fc <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 80051f0:	4a12      	ldr	r2, [pc, #72]	; (800523c <HAL_TIM_Base_MspInit+0x58>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00d      	beq.n	8005212 <HAL_TIM_Base_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80051f6:	b003      	add	sp, #12
 80051f8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <HAL_TIM_Base_MspInit+0x5c>)
 80051fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005204:	661a      	str	r2, [r3, #96]	; 0x60
 8005206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	9b00      	ldr	r3, [sp, #0]
 8005210:	e7f1      	b.n	80051f6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005212:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <HAL_TIM_Base_MspInit+0x5c>)
 8005214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005216:	f042 0202 	orr.w	r2, r2, #2
 800521a:	659a      	str	r2, [r3, #88]	; 0x58
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	4611      	mov	r1, r2
 800522a:	201d      	movs	r0, #29
 800522c:	f001 f87e 	bl	800632c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005230:	201d      	movs	r0, #29
 8005232:	f001 f8b1 	bl	8006398 <HAL_NVIC_EnableIRQ>
}
 8005236:	e7de      	b.n	80051f6 <HAL_TIM_Base_MspInit+0x12>
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40021000 	.word	0x40021000

08005244 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005248:	2300      	movs	r3, #0
 800524a:	9303      	str	r3, [sp, #12]
 800524c:	9304      	str	r3, [sp, #16]
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	9306      	str	r3, [sp, #24]
 8005252:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8005254:	6802      	ldr	r2, [r0, #0]
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_TIM_MspPostInit+0x8c>)
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800525c:	b008      	add	sp, #32
 800525e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005260:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8005264:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005266:	f042 0204 	orr.w	r2, r2, #4
 800526a:	64da      	str	r2, [r3, #76]	; 0x4c
 800526c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800526e:	f002 0204 	and.w	r2, r2, #4
 8005272:	9201      	str	r2, [sp, #4]
 8005274:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005278:	f042 0202 	orr.w	r2, r2, #2
 800527c:	64da      	str	r2, [r3, #76]	; 0x4c
 800527e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	9302      	str	r3, [sp, #8]
 8005286:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005288:	2307      	movs	r3, #7
 800528a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528c:	2502      	movs	r5, #2
 800528e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005290:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005292:	a903      	add	r1, sp, #12
 8005294:	480f      	ldr	r0, [pc, #60]	; (80052d4 <HAL_TIM_MspPostInit+0x90>)
 8005296:	f002 f90b 	bl	80074b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800529a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800529e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a2:	2400      	movs	r4, #0
 80052a4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80052a8:	2306      	movs	r3, #6
 80052aa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ac:	4e0a      	ldr	r6, [pc, #40]	; (80052d8 <HAL_TIM_MspPostInit+0x94>)
 80052ae:	a903      	add	r1, sp, #12
 80052b0:	4630      	mov	r0, r6
 80052b2:	f002 f8fd 	bl	80074b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80052b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052bc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052be:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80052c2:	2304      	movs	r3, #4
 80052c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c6:	a903      	add	r1, sp, #12
 80052c8:	4630      	mov	r0, r6
 80052ca:	f002 f8f1 	bl	80074b0 <HAL_GPIO_Init>
}
 80052ce:	e7c5      	b.n	800525c <HAL_TIM_MspPostInit+0x18>
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	48000800 	.word	0x48000800
 80052d8:	48000400 	.word	0x48000400

080052dc <MX_TIM1_Init>:
{
 80052dc:	b510      	push	{r4, lr}
 80052de:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052e0:	2400      	movs	r4, #0
 80052e2:	9418      	str	r4, [sp, #96]	; 0x60
 80052e4:	9419      	str	r4, [sp, #100]	; 0x64
 80052e6:	941a      	str	r4, [sp, #104]	; 0x68
 80052e8:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052ea:	9415      	str	r4, [sp, #84]	; 0x54
 80052ec:	9416      	str	r4, [sp, #88]	; 0x58
 80052ee:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052f0:	940e      	str	r4, [sp, #56]	; 0x38
 80052f2:	940f      	str	r4, [sp, #60]	; 0x3c
 80052f4:	9410      	str	r4, [sp, #64]	; 0x40
 80052f6:	9411      	str	r4, [sp, #68]	; 0x44
 80052f8:	9412      	str	r4, [sp, #72]	; 0x48
 80052fa:	9413      	str	r4, [sp, #76]	; 0x4c
 80052fc:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052fe:	2234      	movs	r2, #52	; 0x34
 8005300:	4621      	mov	r1, r4
 8005302:	a801      	add	r0, sp, #4
 8005304:	f006 f804 	bl	800b310 <memset>
  htim1.Instance = TIM1;
 8005308:	483d      	ldr	r0, [pc, #244]	; (8005400 <MX_TIM1_Init+0x124>)
 800530a:	4b3e      	ldr	r3, [pc, #248]	; (8005404 <MX_TIM1_Init+0x128>)
 800530c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800530e:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005310:	2320      	movs	r3, #32
 8005312:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1499;
 8005314:	f240 53db 	movw	r3, #1499	; 0x5db
 8005318:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800531a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800531c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005322:	f003 ff2f 	bl	8009184 <HAL_TIM_Base_Init>
 8005326:	2800      	cmp	r0, #0
 8005328:	d151      	bne.n	80053ce <MX_TIM1_Init+0xf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800532a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532e:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005330:	a918      	add	r1, sp, #96	; 0x60
 8005332:	4833      	ldr	r0, [pc, #204]	; (8005400 <MX_TIM1_Init+0x124>)
 8005334:	f004 f87a 	bl	800942c <HAL_TIM_ConfigClockSource>
 8005338:	2800      	cmp	r0, #0
 800533a:	d14b      	bne.n	80053d4 <MX_TIM1_Init+0xf8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800533c:	4830      	ldr	r0, [pc, #192]	; (8005400 <MX_TIM1_Init+0x124>)
 800533e:	f003 ff51 	bl	80091e4 <HAL_TIM_PWM_Init>
 8005342:	2800      	cmp	r0, #0
 8005344:	d149      	bne.n	80053da <MX_TIM1_Init+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005346:	2300      	movs	r3, #0
 8005348:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800534a:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800534c:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800534e:	a915      	add	r1, sp, #84	; 0x54
 8005350:	482b      	ldr	r0, [pc, #172]	; (8005400 <MX_TIM1_Init+0x124>)
 8005352:	f004 fb37 	bl	80099c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005356:	2800      	cmp	r0, #0
 8005358:	d142      	bne.n	80053e0 <MX_TIM1_Init+0x104>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800535a:	2360      	movs	r3, #96	; 0x60
 800535c:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800535e:	2200      	movs	r2, #0
 8005360:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005362:	2302      	movs	r3, #2
 8005364:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8005366:	2308      	movs	r3, #8
 8005368:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800536a:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800536c:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800536e:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005370:	a90e      	add	r1, sp, #56	; 0x38
 8005372:	4823      	ldr	r0, [pc, #140]	; (8005400 <MX_TIM1_Init+0x124>)
 8005374:	f003 ffb0 	bl	80092d8 <HAL_TIM_PWM_ConfigChannel>
 8005378:	2800      	cmp	r0, #0
 800537a:	d134      	bne.n	80053e6 <MX_TIM1_Init+0x10a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800537c:	2204      	movs	r2, #4
 800537e:	a90e      	add	r1, sp, #56	; 0x38
 8005380:	481f      	ldr	r0, [pc, #124]	; (8005400 <MX_TIM1_Init+0x124>)
 8005382:	f003 ffa9 	bl	80092d8 <HAL_TIM_PWM_ConfigChannel>
 8005386:	2800      	cmp	r0, #0
 8005388:	d130      	bne.n	80053ec <MX_TIM1_Init+0x110>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800538a:	2208      	movs	r2, #8
 800538c:	a90e      	add	r1, sp, #56	; 0x38
 800538e:	481c      	ldr	r0, [pc, #112]	; (8005400 <MX_TIM1_Init+0x124>)
 8005390:	f003 ffa2 	bl	80092d8 <HAL_TIM_PWM_ConfigChannel>
 8005394:	bb68      	cbnz	r0, 80053f2 <MX_TIM1_Init+0x116>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005396:	2300      	movs	r3, #0
 8005398:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800539a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800539c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800539e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80053a0:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80053a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053a6:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80053a8:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80053aa:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80053ac:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80053ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053b2:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80053b4:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80053b6:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053b8:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80053ba:	a901      	add	r1, sp, #4
 80053bc:	4810      	ldr	r0, [pc, #64]	; (8005400 <MX_TIM1_Init+0x124>)
 80053be:	f004 fb4b 	bl	8009a58 <HAL_TIMEx_ConfigBreakDeadTime>
 80053c2:	b9c8      	cbnz	r0, 80053f8 <MX_TIM1_Init+0x11c>
  HAL_TIM_MspPostInit(&htim1);
 80053c4:	480e      	ldr	r0, [pc, #56]	; (8005400 <MX_TIM1_Init+0x124>)
 80053c6:	f7ff ff3d 	bl	8005244 <HAL_TIM_MspPostInit>
}
 80053ca:	b01c      	add	sp, #112	; 0x70
 80053cc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80053ce:	f7ff fcb0 	bl	8004d32 <Error_Handler>
 80053d2:	e7aa      	b.n	800532a <MX_TIM1_Init+0x4e>
    Error_Handler();
 80053d4:	f7ff fcad 	bl	8004d32 <Error_Handler>
 80053d8:	e7b0      	b.n	800533c <MX_TIM1_Init+0x60>
    Error_Handler();
 80053da:	f7ff fcaa 	bl	8004d32 <Error_Handler>
 80053de:	e7b2      	b.n	8005346 <MX_TIM1_Init+0x6a>
    Error_Handler();
 80053e0:	f7ff fca7 	bl	8004d32 <Error_Handler>
 80053e4:	e7b9      	b.n	800535a <MX_TIM1_Init+0x7e>
    Error_Handler();
 80053e6:	f7ff fca4 	bl	8004d32 <Error_Handler>
 80053ea:	e7c7      	b.n	800537c <MX_TIM1_Init+0xa0>
    Error_Handler();
 80053ec:	f7ff fca1 	bl	8004d32 <Error_Handler>
 80053f0:	e7cb      	b.n	800538a <MX_TIM1_Init+0xae>
    Error_Handler();
 80053f2:	f7ff fc9e 	bl	8004d32 <Error_Handler>
 80053f6:	e7ce      	b.n	8005396 <MX_TIM1_Init+0xba>
    Error_Handler();
 80053f8:	f7ff fc9b 	bl	8004d32 <Error_Handler>
 80053fc:	e7e2      	b.n	80053c4 <MX_TIM1_Init+0xe8>
 80053fe:	bf00      	nop
 8005400:	20001d20 	.word	0x20001d20
 8005404:	40012c00 	.word	0x40012c00

08005408 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005408:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800540a:	4817      	ldr	r0, [pc, #92]	; (8005468 <MX_USART1_UART_Init+0x60>)
 800540c:	4b17      	ldr	r3, [pc, #92]	; (800546c <MX_USART1_UART_Init+0x64>)
 800540e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8005410:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8005414:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005416:	2300      	movs	r3, #0
 8005418:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800541a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800541c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800541e:	220c      	movs	r2, #12
 8005420:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005422:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005424:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005426:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005428:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800542a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800542c:	f005 f8f6 	bl	800a61c <HAL_UART_Init>
 8005430:	b970      	cbnz	r0, 8005450 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005432:	2100      	movs	r1, #0
 8005434:	480c      	ldr	r0, [pc, #48]	; (8005468 <MX_USART1_UART_Init+0x60>)
 8005436:	f005 f96d 	bl	800a714 <HAL_UARTEx_SetTxFifoThreshold>
 800543a:	b960      	cbnz	r0, 8005456 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800543c:	2100      	movs	r1, #0
 800543e:	480a      	ldr	r0, [pc, #40]	; (8005468 <MX_USART1_UART_Init+0x60>)
 8005440:	f005 f98d 	bl	800a75e <HAL_UARTEx_SetRxFifoThreshold>
 8005444:	b950      	cbnz	r0, 800545c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005446:	4808      	ldr	r0, [pc, #32]	; (8005468 <MX_USART1_UART_Init+0x60>)
 8005448:	f005 f945 	bl	800a6d6 <HAL_UARTEx_DisableFifoMode>
 800544c:	b948      	cbnz	r0, 8005462 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800544e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005450:	f7ff fc6f 	bl	8004d32 <Error_Handler>
 8005454:	e7ed      	b.n	8005432 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8005456:	f7ff fc6c 	bl	8004d32 <Error_Handler>
 800545a:	e7ef      	b.n	800543c <MX_USART1_UART_Init+0x34>
    Error_Handler();
 800545c:	f7ff fc69 	bl	8004d32 <Error_Handler>
 8005460:	e7f1      	b.n	8005446 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8005462:	f7ff fc66 	bl	8004d32 <Error_Handler>
}
 8005466:	e7f2      	b.n	800544e <MX_USART1_UART_Init+0x46>
 8005468:	20001e18 	.word	0x20001e18
 800546c:	40013800 	.word	0x40013800

08005470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005470:	b530      	push	{r4, r5, lr}
 8005472:	b099      	sub	sp, #100	; 0x64
 8005474:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005476:	2100      	movs	r1, #0
 8005478:	9113      	str	r1, [sp, #76]	; 0x4c
 800547a:	9114      	str	r1, [sp, #80]	; 0x50
 800547c:	9115      	str	r1, [sp, #84]	; 0x54
 800547e:	9116      	str	r1, [sp, #88]	; 0x58
 8005480:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005482:	2244      	movs	r2, #68	; 0x44
 8005484:	a802      	add	r0, sp, #8
 8005486:	f005 ff43 	bl	800b310 <memset>
  if(uartHandle->Instance==USART1)
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	4b27      	ldr	r3, [pc, #156]	; (800552c <HAL_UART_MspInit+0xbc>)
 800548e:	429a      	cmp	r2, r3
 8005490:	d001      	beq.n	8005496 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005492:	b019      	add	sp, #100	; 0x64
 8005494:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005496:	2301      	movs	r3, #1
 8005498:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800549a:	a802      	add	r0, sp, #8
 800549c:	f002 fdac 	bl	8007ff8 <HAL_RCCEx_PeriphCLKConfig>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d13c      	bne.n	800551e <HAL_UART_MspInit+0xae>
    __HAL_RCC_USART1_CLK_ENABLE();
 80054a4:	4b22      	ldr	r3, [pc, #136]	; (8005530 <HAL_UART_MspInit+0xc0>)
 80054a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ac:	661a      	str	r2, [r3, #96]	; 0x60
 80054ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054b0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80054b4:	9200      	str	r2, [sp, #0]
 80054b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054ba:	f042 0204 	orr.w	r2, r2, #4
 80054be:	64da      	str	r2, [r3, #76]	; 0x4c
 80054c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80054ca:	2330      	movs	r3, #48	; 0x30
 80054cc:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ce:	2302      	movs	r3, #2
 80054d0:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d2:	2500      	movs	r5, #0
 80054d4:	9515      	str	r5, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d6:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054d8:	2307      	movs	r3, #7
 80054da:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054dc:	a913      	add	r1, sp, #76	; 0x4c
 80054de:	4815      	ldr	r0, [pc, #84]	; (8005534 <HAL_UART_MspInit+0xc4>)
 80054e0:	f001 ffe6 	bl	80074b0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel3;
 80054e4:	4814      	ldr	r0, [pc, #80]	; (8005538 <HAL_UART_MspInit+0xc8>)
 80054e6:	4b15      	ldr	r3, [pc, #84]	; (800553c <HAL_UART_MspInit+0xcc>)
 80054e8:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80054ea:	2319      	movs	r3, #25
 80054ec:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054ee:	2310      	movs	r3, #16
 80054f0:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054f2:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054f8:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054fa:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80054fc:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054fe:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005500:	f001 f906 	bl	8006710 <HAL_DMA_Init>
 8005504:	b970      	cbnz	r0, 8005524 <HAL_UART_MspInit+0xb4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <HAL_UART_MspInit+0xc8>)
 8005508:	67a3      	str	r3, [r4, #120]	; 0x78
 800550a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800550c:	2200      	movs	r2, #0
 800550e:	4611      	mov	r1, r2
 8005510:	2025      	movs	r0, #37	; 0x25
 8005512:	f000 ff0b 	bl	800632c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005516:	2025      	movs	r0, #37	; 0x25
 8005518:	f000 ff3e 	bl	8006398 <HAL_NVIC_EnableIRQ>
}
 800551c:	e7b9      	b.n	8005492 <HAL_UART_MspInit+0x22>
      Error_Handler();
 800551e:	f7ff fc08 	bl	8004d32 <Error_Handler>
 8005522:	e7bf      	b.n	80054a4 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8005524:	f7ff fc05 	bl	8004d32 <Error_Handler>
 8005528:	e7ed      	b.n	8005506 <HAL_UART_MspInit+0x96>
 800552a:	bf00      	nop
 800552c:	40013800 	.word	0x40013800
 8005530:	40021000 	.word	0x40021000
 8005534:	48000800 	.word	0x48000800
 8005538:	20001db8 	.word	0x20001db8
 800553c:	40020430 	.word	0x40020430

08005540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005540:	480d      	ldr	r0, [pc, #52]	; (8005578 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005542:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005544:	480d      	ldr	r0, [pc, #52]	; (800557c <LoopForever+0x6>)
  ldr r1, =_edata
 8005546:	490e      	ldr	r1, [pc, #56]	; (8005580 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005548:	4a0e      	ldr	r2, [pc, #56]	; (8005584 <LoopForever+0xe>)
  movs r3, #0
 800554a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800554c:	e002      	b.n	8005554 <LoopCopyDataInit>

0800554e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800554e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005552:	3304      	adds	r3, #4

08005554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005558:	d3f9      	bcc.n	800554e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800555a:	4a0b      	ldr	r2, [pc, #44]	; (8005588 <LoopForever+0x12>)
  ldr r4, =_ebss
 800555c:	4c0b      	ldr	r4, [pc, #44]	; (800558c <LoopForever+0x16>)
  movs r3, #0
 800555e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005560:	e001      	b.n	8005566 <LoopFillZerobss>

08005562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005564:	3204      	adds	r2, #4

08005566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005568:	d3fb      	bcc.n	8005562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800556a:	f7ff fdf7 	bl	800515c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800556e:	f005 ff27 	bl	800b3c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005572:	f7ff fbbe 	bl	8004cf2 <main>

08005576 <LoopForever>:

LoopForever:
    b LoopForever
 8005576:	e7fe      	b.n	8005576 <LoopForever>
  ldr   r0, =_estack
 8005578:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800557c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005580:	20000758 	.word	0x20000758
  ldr r2, =_sidata
 8005584:	080100b8 	.word	0x080100b8
  ldr r2, =_sbss
 8005588:	20000758 	.word	0x20000758
  ldr r4, =_ebss
 800558c:	20001ff8 	.word	0x20001ff8

08005590 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005590:	e7fe      	b.n	8005590 <COMP1_2_3_IRQHandler>
	...

08005594 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005594:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <HAL_InitTick+0x44>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	b90b      	cbnz	r3, 800559e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800559a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800559c:	4770      	bx	lr
{
 800559e:	b510      	push	{r4, lr}
 80055a0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80055a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055aa:	4a0c      	ldr	r2, [pc, #48]	; (80055dc <HAL_InitTick+0x48>)
 80055ac:	6810      	ldr	r0, [r2, #0]
 80055ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80055b2:	f000 feff 	bl	80063b4 <HAL_SYSTICK_Config>
 80055b6:	b968      	cbnz	r0, 80055d4 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055b8:	2c0f      	cmp	r4, #15
 80055ba:	d901      	bls.n	80055c0 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80055bc:	2001      	movs	r0, #1
 80055be:	e00a      	b.n	80055d6 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055c0:	2200      	movs	r2, #0
 80055c2:	4621      	mov	r1, r4
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	f000 feb0 	bl	800632c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <HAL_InitTick+0x4c>)
 80055ce:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80055d0:	2000      	movs	r0, #0
 80055d2:	e000      	b.n	80055d6 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80055d4:	2001      	movs	r0, #1
}
 80055d6:	bd10      	pop	{r4, pc}
 80055d8:	20000554 	.word	0x20000554
 80055dc:	20000550 	.word	0x20000550
 80055e0:	20000558 	.word	0x20000558

080055e4 <HAL_Init>:
{
 80055e4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055e6:	2003      	movs	r0, #3
 80055e8:	f000 fe8e 	bl	8006308 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055ec:	200f      	movs	r0, #15
 80055ee:	f7ff ffd1 	bl	8005594 <HAL_InitTick>
 80055f2:	b110      	cbz	r0, 80055fa <HAL_Init+0x16>
    status = HAL_ERROR;
 80055f4:	2401      	movs	r4, #1
}
 80055f6:	4620      	mov	r0, r4
 80055f8:	bd10      	pop	{r4, pc}
 80055fa:	4604      	mov	r4, r0
    HAL_MspInit();
 80055fc:	f7ff fcc0 	bl	8004f80 <HAL_MspInit>
 8005600:	e7f9      	b.n	80055f6 <HAL_Init+0x12>
	...

08005604 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005604:	4a03      	ldr	r2, [pc, #12]	; (8005614 <HAL_IncTick+0x10>)
 8005606:	6813      	ldr	r3, [r2, #0]
 8005608:	4903      	ldr	r1, [pc, #12]	; (8005618 <HAL_IncTick+0x14>)
 800560a:	6809      	ldr	r1, [r1, #0]
 800560c:	440b      	add	r3, r1
 800560e:	6013      	str	r3, [r2, #0]
}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20001ea8 	.word	0x20001ea8
 8005618:	20000554 	.word	0x20000554

0800561c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800561c:	4b01      	ldr	r3, [pc, #4]	; (8005624 <HAL_GetTick+0x8>)
 800561e:	6818      	ldr	r0, [r3, #0]
}
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20001ea8 	.word	0x20001ea8

08005628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800562c:	f7ff fff6 	bl	800561c <HAL_GetTick>
 8005630:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005632:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005636:	d002      	beq.n	800563e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8005638:	4b04      	ldr	r3, [pc, #16]	; (800564c <HAL_Delay+0x24>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800563e:	f7ff ffed 	bl	800561c <HAL_GetTick>
 8005642:	1b40      	subs	r0, r0, r5
 8005644:	42a0      	cmp	r0, r4
 8005646:	d3fa      	bcc.n	800563e <HAL_Delay+0x16>
  {
  }
}
 8005648:	bd38      	pop	{r3, r4, r5, pc}
 800564a:	bf00      	nop
 800564c:	20000554 	.word	0x20000554

08005650 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005650:	b530      	push	{r4, r5, lr}
 8005652:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005654:	2300      	movs	r3, #0
 8005656:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005658:	2800      	cmp	r0, #0
 800565a:	f000 8104 	beq.w	8005866 <HAL_ADC_Init+0x216>
 800565e:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005660:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80c0 	beq.w	80057e8 <HAL_ADC_Init+0x198>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005668:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8005670:	d005      	beq.n	800567e <HAL_ADC_Init+0x2e>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8005678:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800567c:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800567e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005680:	6893      	ldr	r3, [r2, #8]
 8005682:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005686:	d119      	bne.n	80056bc <HAL_ADC_Init+0x6c>
  MODIFY_REG(ADCx->CR,
 8005688:	6893      	ldr	r3, [r2, #8]
 800568a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800568e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005696:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005698:	4b74      	ldr	r3, [pc, #464]	; (800586c <HAL_ADC_Init+0x21c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	099b      	lsrs	r3, r3, #6
 800569e:	4a74      	ldr	r2, [pc, #464]	; (8005870 <HAL_ADC_Init+0x220>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	099b      	lsrs	r3, r3, #6
 80056a6:	3301      	adds	r3, #1
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80056ac:	9b01      	ldr	r3, [sp, #4]
 80056ae:	b12b      	cbz	r3, 80056bc <HAL_ADC_Init+0x6c>
    {
      wait_loop_index--;
 80056b0:	9b01      	ldr	r3, [sp, #4]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80056b6:	9b01      	ldr	r3, [sp, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f9      	bne.n	80056b0 <HAL_ADC_Init+0x60>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056bc:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80056be:	688b      	ldr	r3, [r1, #8]
 80056c0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80056c4:	f040 8097 	bne.w	80057f6 <HAL_ADC_Init+0x1a6>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056ca:	f043 0310 	orr.w	r3, r3, #16
 80056ce:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80056d8:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056da:	688a      	ldr	r2, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	f002 0204 	and.w	r2, r2, #4
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f040 80b6 	bne.w	8005858 <HAL_ADC_Init+0x208>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056f2:	f043 0302 	orr.w	r3, r3, #2
 80056f6:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056f8:	688b      	ldr	r3, [r1, #8]
 80056fa:	f013 0f01 	tst.w	r3, #1
 80056fe:	d110      	bne.n	8005722 <HAL_ADC_Init+0xd2>
 8005700:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800570a:	689b      	ldr	r3, [r3, #8]
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800570c:	4313      	orrs	r3, r2
 800570e:	f013 0f01 	tst.w	r3, #1
 8005712:	d106      	bne.n	8005722 <HAL_ADC_Init+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005714:	4a57      	ldr	r2, [pc, #348]	; (8005874 <HAL_ADC_Init+0x224>)
 8005716:	6893      	ldr	r3, [r2, #8]
 8005718:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800571c:	6861      	ldr	r1, [r4, #4]
 800571e:	430b      	orrs	r3, r1
 8005720:	6093      	str	r3, [r2, #8]
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005722:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8005726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005728:	68e1      	ldr	r1, [r4, #12]
 800572a:	430b      	orrs	r3, r1
 800572c:	68a1      	ldr	r1, [r4, #8]
 800572e:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005730:	7f61      	ldrb	r1, [r4, #29]
                hadc->Init.DataAlign                                                   |
 8005732:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800573a:	2a01      	cmp	r2, #1
 800573c:	d05d      	beq.n	80057fa <HAL_ADC_Init+0x1aa>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800573e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005740:	b122      	cbz	r2, 800574c <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005742:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005746:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005748:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800574a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800574c:	6821      	ldr	r1, [r4, #0]
 800574e:	68cd      	ldr	r5, [r1, #12]
 8005750:	4a49      	ldr	r2, [pc, #292]	; (8005878 <HAL_ADC_Init+0x228>)
 8005752:	402a      	ands	r2, r5
 8005754:	431a      	orrs	r2, r3
 8005756:	60ca      	str	r2, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	6913      	ldr	r3, [r2, #16]
 800575c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005762:	430b      	orrs	r3, r1
 8005764:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005766:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005768:	688a      	ldr	r2, [r1, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800576a:	688b      	ldr	r3, [r1, #8]
 800576c:	f003 0308 	and.w	r3, r3, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005770:	f002 0204 	and.w	r2, r2, #4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005774:	4313      	orrs	r3, r2
 8005776:	d128      	bne.n	80057ca <HAL_ADC_Init+0x17a>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005778:	68ca      	ldr	r2, [r1, #12]
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800577a:	7f25      	ldrb	r5, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800577c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005780:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005782:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005786:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800578a:	f022 0202 	bic.w	r2, r2, #2
 800578e:	4313      	orrs	r3, r2
 8005790:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d035      	beq.n	8005804 <HAL_ADC_Init+0x1b4>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	6913      	ldr	r3, [r2, #16]
 800579c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a0:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80057a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057b0:	6921      	ldr	r1, [r4, #16]
 80057b2:	430b      	orrs	r3, r1
 80057b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80057b8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d030      	beq.n	8005822 <HAL_ADC_Init+0x1d2>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	6913      	ldr	r3, [r2, #16]
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057ca:	6963      	ldr	r3, [r4, #20]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d03a      	beq.n	8005846 <HAL_ADC_Init+0x1f6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80057d4:	f023 030f 	bic.w	r3, r3, #15
 80057d8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80057da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057dc:	f023 0303 	bic.w	r3, r3, #3
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80057e6:	e03c      	b.n	8005862 <HAL_ADC_Init+0x212>
    HAL_ADC_MspInit(hadc);
 80057e8:	f7fe ff72 	bl	80046d0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80057ec:	2300      	movs	r3, #0
 80057ee:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80057f0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80057f4:	e738      	b.n	8005668 <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057f6:	2000      	movs	r0, #0
 80057f8:	e76f      	b.n	80056da <HAL_ADC_Init+0x8a>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80057fc:	3a01      	subs	r2, #1
 80057fe:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8005802:	e79c      	b.n	800573e <HAL_ADC_Init+0xee>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	6913      	ldr	r3, [r2, #16]
 8005808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005814:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800581c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005820:	e7ca      	b.n	80057b8 <HAL_ADC_Init+0x168>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005822:	6821      	ldr	r1, [r4, #0]
 8005824:	690a      	ldr	r2, [r1, #16]
 8005826:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005828:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800582a:	432b      	orrs	r3, r5
 800582c:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8005830:	f022 0204 	bic.w	r2, r2, #4
 8005834:	4313      	orrs	r3, r2
 8005836:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005838:	4313      	orrs	r3, r2
 800583a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800583c:	4313      	orrs	r3, r2
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	610b      	str	r3, [r1, #16]
 8005844:	e7c1      	b.n	80057ca <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005846:	6821      	ldr	r1, [r4, #0]
 8005848:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800584a:	6a23      	ldr	r3, [r4, #32]
 800584c:	3b01      	subs	r3, #1
 800584e:	f022 020f 	bic.w	r2, r2, #15
 8005852:	4313      	orrs	r3, r2
 8005854:	630b      	str	r3, [r1, #48]	; 0x30
 8005856:	e7c0      	b.n	80057da <HAL_ADC_Init+0x18a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005858:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800585a:	f043 0310 	orr.w	r3, r3, #16
 800585e:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005860:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005862:	b003      	add	sp, #12
 8005864:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005866:	2001      	movs	r0, #1
 8005868:	e7fb      	b.n	8005862 <HAL_ADC_Init+0x212>
 800586a:	bf00      	nop
 800586c:	20000550 	.word	0x20000550
 8005870:	053e2d63 	.word	0x053e2d63
 8005874:	50000300 	.word	0x50000300
 8005878:	fff04007 	.word	0xfff04007

0800587c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800587c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800587e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005880:	f7fe fac4 	bl	8003e0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005884:	bd08      	pop	{r3, pc}

08005886 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8005886:	4770      	bx	lr

08005888 <HAL_ADC_ErrorCallback>:
}
 8005888:	4770      	bx	lr
	...

0800588c <HAL_ADC_IRQHandler>:
{
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005890:	6803      	ldr	r3, [r0, #0]
 8005892:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005894:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005896:	4b9b      	ldr	r3, [pc, #620]	; (8005b04 <HAL_ADC_IRQHandler+0x278>)
 8005898:	689e      	ldr	r6, [r3, #8]
 800589a:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800589e:	f017 0f02 	tst.w	r7, #2
 80058a2:	d010      	beq.n	80058c6 <HAL_ADC_IRQHandler+0x3a>
 80058a4:	f015 0f02 	tst.w	r5, #2
 80058a8:	d00d      	beq.n	80058c6 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058aa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80058ac:	f013 0f10 	tst.w	r3, #16
 80058b0:	d103      	bne.n	80058ba <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80058b2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80058b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058b8:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80058ba:	4620      	mov	r0, r4
 80058bc:	f000 fcac 	bl	8006218 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	2202      	movs	r2, #2
 80058c4:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80058c6:	f017 0f04 	tst.w	r7, #4
 80058ca:	d002      	beq.n	80058d2 <HAL_ADC_IRQHandler+0x46>
 80058cc:	f015 0f04 	tst.w	r5, #4
 80058d0:	d105      	bne.n	80058de <HAL_ADC_IRQHandler+0x52>
 80058d2:	f017 0f08 	tst.w	r7, #8
 80058d6:	d03e      	beq.n	8005956 <HAL_ADC_IRQHandler+0xca>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80058d8:	f015 0f08 	tst.w	r5, #8
 80058dc:	d03b      	beq.n	8005956 <HAL_ADC_IRQHandler+0xca>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058e0:	f013 0f10 	tst.w	r3, #16
 80058e4:	d103      	bne.n	80058ee <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058ec:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80058ee:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80058f6:	d128      	bne.n	800594a <HAL_ADC_IRQHandler+0xbe>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058f8:	4a83      	ldr	r2, [pc, #524]	; (8005b08 <HAL_ADC_IRQHandler+0x27c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	f000 80f6 	beq.w	8005aec <HAL_ADC_IRQHandler+0x260>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005900:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005902:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8005906:	d120      	bne.n	800594a <HAL_ADC_IRQHandler+0xbe>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	f012 0f08 	tst.w	r2, #8
 800590e:	d01c      	beq.n	800594a <HAL_ADC_IRQHandler+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	f012 0f04 	tst.w	r2, #4
 8005916:	d110      	bne.n	800593a <HAL_ADC_IRQHandler+0xae>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	f022 020c 	bic.w	r2, r2, #12
 800591e:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005920:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005926:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005928:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800592a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800592e:	d10c      	bne.n	800594a <HAL_ADC_IRQHandler+0xbe>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005930:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005938:	e007      	b.n	800594a <HAL_ADC_IRQHandler+0xbe>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800593a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800593c:	f043 0310 	orr.w	r3, r3, #16
 8005940:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005942:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 800594a:	4620      	mov	r0, r4
 800594c:	f7fe fb60 	bl	8004010 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	220c      	movs	r2, #12
 8005954:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005956:	f017 0f20 	tst.w	r7, #32
 800595a:	d002      	beq.n	8005962 <HAL_ADC_IRQHandler+0xd6>
 800595c:	f015 0f20 	tst.w	r5, #32
 8005960:	d105      	bne.n	800596e <HAL_ADC_IRQHandler+0xe2>
 8005962:	f017 0f40 	tst.w	r7, #64	; 0x40
 8005966:	d048      	beq.n	80059fa <HAL_ADC_IRQHandler+0x16e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005968:	f015 0f40 	tst.w	r5, #64	; 0x40
 800596c:	d045      	beq.n	80059fa <HAL_ADC_IRQHandler+0x16e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800596e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005970:	f013 0f10 	tst.w	r3, #16
 8005974:	d103      	bne.n	800597e <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005976:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800597c:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800597e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005982:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005986:	68d8      	ldr	r0, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005988:	495f      	ldr	r1, [pc, #380]	; (8005b08 <HAL_ADC_IRQHandler+0x27c>)
 800598a:	428b      	cmp	r3, r1
 800598c:	f000 80a4 	beq.w	8005ad8 <HAL_ADC_IRQHandler+0x24c>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005990:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005992:	bb62      	cbnz	r2, 80059ee <HAL_ADC_IRQHandler+0x162>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005994:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8005998:	d005      	beq.n	80059a6 <HAL_ADC_IRQHandler+0x11a>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800599a:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 800599e:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80059a2:	4302      	orrs	r2, r0
 80059a4:	d123      	bne.n	80059ee <HAL_ADC_IRQHandler+0x162>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80059ac:	d01f      	beq.n	80059ee <HAL_ADC_IRQHandler+0x162>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80059ae:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 80059b2:	d11c      	bne.n	80059ee <HAL_ADC_IRQHandler+0x162>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	f012 0f08 	tst.w	r2, #8
 80059ba:	d110      	bne.n	80059de <HAL_ADC_IRQHandler+0x152>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059c2:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80059c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ca:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80059cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80059d2:	d10c      	bne.n	80059ee <HAL_ADC_IRQHandler+0x162>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	65e3      	str	r3, [r4, #92]	; 0x5c
 80059dc:	e007      	b.n	80059ee <HAL_ADC_IRQHandler+0x162>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059e0:	f043 0310 	orr.w	r3, r3, #16
 80059e4:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059e8:	f043 0301 	orr.w	r3, r3, #1
 80059ec:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 fc0e 	bl	8006210 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	2260      	movs	r2, #96	; 0x60
 80059f8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80059fa:	f017 0f80 	tst.w	r7, #128	; 0x80
 80059fe:	d002      	beq.n	8005a06 <HAL_ADC_IRQHandler+0x17a>
 8005a00:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005a04:	d12f      	bne.n	8005a66 <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005a06:	f417 7f80 	tst.w	r7, #256	; 0x100
 8005a0a:	d002      	beq.n	8005a12 <HAL_ADC_IRQHandler+0x186>
 8005a0c:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005a10:	d134      	bne.n	8005a7c <HAL_ADC_IRQHandler+0x1f0>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005a12:	f417 7f00 	tst.w	r7, #512	; 0x200
 8005a16:	d002      	beq.n	8005a1e <HAL_ADC_IRQHandler+0x192>
 8005a18:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005a1c:	d13a      	bne.n	8005a94 <HAL_ADC_IRQHandler+0x208>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005a1e:	f017 0f10 	tst.w	r7, #16
 8005a22:	d019      	beq.n	8005a58 <HAL_ADC_IRQHandler+0x1cc>
 8005a24:	f015 0f10 	tst.w	r5, #16
 8005a28:	d016      	beq.n	8005a58 <HAL_ADC_IRQHandler+0x1cc>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005a2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a2c:	b133      	cbz	r3, 8005a3c <HAL_ADC_IRQHandler+0x1b0>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005a2e:	2e00      	cmp	r6, #0
 8005a30:	d03c      	beq.n	8005aac <HAL_ADC_IRQHandler+0x220>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005a32:	4b34      	ldr	r3, [pc, #208]	; (8005b04 <HAL_ADC_IRQHandler+0x278>)
 8005a34:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005a36:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8005a3a:	d00a      	beq.n	8005a52 <HAL_ADC_IRQHandler+0x1c6>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005a3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a42:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005a44:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a46:	f043 0302 	orr.w	r3, r3, #2
 8005a4a:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f7ff ff1b 	bl	8005888 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	2210      	movs	r2, #16
 8005a56:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005a58:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8005a5c:	d002      	beq.n	8005a64 <HAL_ADC_IRQHandler+0x1d8>
 8005a5e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8005a62:	d129      	bne.n	8005ab8 <HAL_ADC_IRQHandler+0x22c>
}
 8005a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005a66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6c:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f7ff ff09 	bl	8005886 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	2280      	movs	r2, #128	; 0x80
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e7c4      	b.n	8005a06 <HAL_ADC_IRQHandler+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005a7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a82:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005a84:	4620      	mov	r0, r4
 8005a86:	f000 fbc5 	bl	8006214 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e7be      	b.n	8005a12 <HAL_ADC_IRQHandler+0x186>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005a94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a9a:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 fbba 	bl	8006216 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	e7b8      	b.n	8005a1e <HAL_ADC_IRQHandler+0x192>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f013 0f01 	tst.w	r3, #1
 8005ab4:	d0cd      	beq.n	8005a52 <HAL_ADC_IRQHandler+0x1c6>
 8005ab6:	e7c1      	b.n	8005a3c <HAL_ADC_IRQHandler+0x1b0>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005ab8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005abe:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005ac0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ac2:	f043 0308 	orr.w	r3, r3, #8
 8005ac6:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ace:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fb9e 	bl	8006212 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8005ad6:	e7c5      	b.n	8005a64 <HAL_ADC_IRQHandler+0x1d8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ad8:	21c1      	movs	r1, #193	; 0xc1
 8005ada:	40f1      	lsrs	r1, r6
 8005adc:	f011 0f01 	tst.w	r1, #1
 8005ae0:	f47f af56 	bne.w	8005990 <HAL_ADC_IRQHandler+0x104>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005ae4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8005ae8:	68c9      	ldr	r1, [r1, #12]
 8005aea:	e752      	b.n	8005992 <HAL_ADC_IRQHandler+0x106>
 8005aec:	f240 2221 	movw	r2, #545	; 0x221
 8005af0:	40f2      	lsrs	r2, r6
 8005af2:	f012 0f01 	tst.w	r2, #1
 8005af6:	f47f af03 	bne.w	8005900 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005afa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005afe:	68d2      	ldr	r2, [r2, #12]
 8005b00:	e6ff      	b.n	8005902 <HAL_ADC_IRQHandler+0x76>
 8005b02:	bf00      	nop
 8005b04:	50000300 	.word	0x50000300
 8005b08:	50000100 	.word	0x50000100

08005b0c <ADC_DMAConvCplt>:
{
 8005b0c:	b508      	push	{r3, lr}
 8005b0e:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b10:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b12:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005b14:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005b18:	d130      	bne.n	8005b7c <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b1a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b20:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b22:	6803      	ldr	r3, [r0, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	f012 0f08 	tst.w	r2, #8
 8005b2a:	d014      	beq.n	8005b56 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005b32:	d120      	bne.n	8005b76 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005b3a:	d11c      	bne.n	8005b76 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b3c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b42:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b44:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b46:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005b4a:	d114      	bne.n	8005b76 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b4c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005b54:	e00f      	b.n	8005b76 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f013 0f02 	tst.w	r3, #2
 8005b5c:	d10b      	bne.n	8005b76 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b5e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b64:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b66:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b68:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005b6c:	d103      	bne.n	8005b76 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b6e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8005b76:	f7fe fa4b 	bl	8004010 <HAL_ADC_ConvCpltCallback>
}
 8005b7a:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b7c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005b7e:	f012 0f10 	tst.w	r2, #16
 8005b82:	d104      	bne.n	8005b8e <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b84:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005b86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b88:	4618      	mov	r0, r3
 8005b8a:	4790      	blx	r2
}
 8005b8c:	e7f5      	b.n	8005b7a <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8005b8e:	f7ff fe7b 	bl	8005888 <HAL_ADC_ErrorCallback>
 8005b92:	e7f2      	b.n	8005b7a <ADC_DMAConvCplt+0x6e>

08005b94 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b94:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b96:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b98:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ba0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005ba2:	f043 0304 	orr.w	r3, r3, #4
 8005ba6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ba8:	f7ff fe6e 	bl	8005888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bac:	bd08      	pop	{r3, pc}
	...

08005bb0 <HAL_ADC_ConfigChannel>:
{
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005bb8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8005bbc:	2a01      	cmp	r2, #1
 8005bbe:	f000 8241 	beq.w	8006044 <HAL_ADC_ConfigChannel+0x494>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bca:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bcc:	6890      	ldr	r0, [r2, #8]
 8005bce:	f010 0f04 	tst.w	r0, #4
 8005bd2:	d009      	beq.n	8005be8 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bd6:	f042 0220 	orr.w	r2, r2, #32
 8005bda:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005bdc:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005be4:	b003      	add	sp, #12
 8005be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005be8:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005bea:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 8005bee:	f00e 0e0c 	and.w	lr, lr, #12
 8005bf2:	3230      	adds	r2, #48	; 0x30
  MODIFY_REG(*preg,
 8005bf4:	f852 400e 	ldr.w	r4, [r2, lr]
 8005bf8:	f000 0c1f 	and.w	ip, r0, #31
 8005bfc:	6808      	ldr	r0, [r1, #0]
 8005bfe:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8005c06:	251f      	movs	r5, #31
 8005c08:	fa05 fc0c 	lsl.w	ip, r5, ip
 8005c0c:	ea24 0c0c 	bic.w	ip, r4, ip
 8005c10:	ea40 000c 	orr.w	r0, r0, ip
 8005c14:	f842 000e 	str.w	r0, [r2, lr]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c18:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c1a:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c1c:	68a2      	ldr	r2, [r4, #8]
 8005c1e:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c22:	f000 0004 	and.w	r0, r0, #4
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c26:	4302      	orrs	r2, r0
 8005c28:	d14f      	bne.n	8005cca <HAL_ADC_ConfigChannel+0x11a>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005c2a:	688a      	ldr	r2, [r1, #8]
 8005c2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005c30:	f000 808b 	beq.w	8005d4a <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005c34:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c36:	ea4f 5cd5 	mov.w	ip, r5, lsr #23
 8005c3a:	f00c 0c04 	and.w	ip, ip, #4
 8005c3e:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8005c40:	f854 000c 	ldr.w	r0, [r4, ip]
 8005c44:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005c48:	2607      	movs	r6, #7
 8005c4a:	40ae      	lsls	r6, r5
 8005c4c:	ea20 0006 	bic.w	r0, r0, r6
 8005c50:	40aa      	lsls	r2, r5
 8005c52:	4302      	orrs	r2, r0
 8005c54:	f844 200c 	str.w	r2, [r4, ip]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005c58:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005c5a:	6942      	ldr	r2, [r0, #20]
 8005c5c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c60:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c62:	694a      	ldr	r2, [r1, #20]
 8005c64:	681c      	ldr	r4, [r3, #0]
 8005c66:	68e0      	ldr	r0, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c68:	690d      	ldr	r5, [r1, #16]
 8005c6a:	2d04      	cmp	r5, #4
 8005c6c:	f000 8081 	beq.w	8005d72 <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c70:	3460      	adds	r4, #96	; 0x60
  MODIFY_REG(*preg,
 8005c72:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c76:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005c7a:	0040      	lsls	r0, r0, #1
 8005c7c:	4082      	lsls	r2, r0
 8005c7e:	6808      	ldr	r0, [r1, #0]
 8005c80:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c84:	4eaa      	ldr	r6, [pc, #680]	; (8005f30 <HAL_ADC_ConfigChannel+0x380>)
 8005c86:	403e      	ands	r6, r7
 8005c88:	4330      	orrs	r0, r6
 8005c8a:	4302      	orrs	r2, r0
 8005c8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005c90:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c94:	690c      	ldr	r4, [r1, #16]
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8005c9a:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8005c9e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005ca2:	698d      	ldr	r5, [r1, #24]
 8005ca4:	432a      	orrs	r2, r5
 8005ca6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005caa:	690d      	ldr	r5, [r1, #16]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8005cb0:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005cb4:	7f0c      	ldrb	r4, [r1, #28]
 8005cb6:	2c01      	cmp	r4, #1
 8005cb8:	bf14      	ite	ne
 8005cba:	2400      	movne	r4, #0
 8005cbc:	2401      	moveq	r4, #1
 8005cbe:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005cc2:	ea42 6244 	orr.w	r2, r2, r4, lsl #25
 8005cc6:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cca:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ccc:	6890      	ldr	r0, [r2, #8]
 8005cce:	f010 0f01 	tst.w	r0, #1
 8005cd2:	d112      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x14a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005cd4:	6808      	ldr	r0, [r1, #0]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005cd6:	68cd      	ldr	r5, [r1, #12]
 8005cd8:	4c96      	ldr	r4, [pc, #600]	; (8005f34 <HAL_ADC_ConfigChannel+0x384>)
 8005cda:	42a5      	cmp	r5, r4
    SET_BIT(ADCx->DIFSEL,
 8005cdc:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005ce0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005ce4:	bf0c      	ite	eq
 8005ce6:	4320      	orreq	r0, r4
    CLEAR_BIT(ADCx->DIFSEL,
 8005ce8:	ea24 0000 	bicne.w	r0, r4, r0
 8005cec:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005cf0:	68c8      	ldr	r0, [r1, #12]
 8005cf2:	4a90      	ldr	r2, [pc, #576]	; (8005f34 <HAL_ADC_ConfigChannel+0x384>)
 8005cf4:	4290      	cmp	r0, r2
 8005cf6:	f000 80d3 	beq.w	8005ea0 <HAL_ADC_ConfigChannel+0x2f0>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005cfa:	680a      	ldr	r2, [r1, #0]
 8005cfc:	498e      	ldr	r1, [pc, #568]	; (8005f38 <HAL_ADC_ConfigChannel+0x388>)
 8005cfe:	420a      	tst	r2, r1
 8005d00:	f000 8192 	beq.w	8006028 <HAL_ADC_ConfigChannel+0x478>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005d04:	498d      	ldr	r1, [pc, #564]	; (8005f3c <HAL_ADC_ConfigChannel+0x38c>)
 8005d06:	6889      	ldr	r1, [r1, #8]
 8005d08:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005d0c:	488c      	ldr	r0, [pc, #560]	; (8005f40 <HAL_ADC_ConfigChannel+0x390>)
 8005d0e:	4282      	cmp	r2, r0
 8005d10:	f000 819a 	beq.w	8006048 <HAL_ADC_ConfigChannel+0x498>
 8005d14:	488b      	ldr	r0, [pc, #556]	; (8005f44 <HAL_ADC_ConfigChannel+0x394>)
 8005d16:	4282      	cmp	r2, r0
 8005d18:	f000 8196 	beq.w	8006048 <HAL_ADC_ConfigChannel+0x498>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d1c:	488a      	ldr	r0, [pc, #552]	; (8005f48 <HAL_ADC_ConfigChannel+0x398>)
 8005d1e:	4282      	cmp	r2, r0
 8005d20:	f040 816e 	bne.w	8006000 <HAL_ADC_ConfigChannel+0x450>
 8005d24:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8005d28:	f040 8182 	bne.w	8006030 <HAL_ADC_ConfigChannel+0x480>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	4a87      	ldr	r2, [pc, #540]	; (8005f4c <HAL_ADC_ConfigChannel+0x39c>)
 8005d30:	4291      	cmp	r1, r2
 8005d32:	f000 817f 	beq.w	8006034 <HAL_ADC_ConfigChannel+0x484>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d36:	4981      	ldr	r1, [pc, #516]	; (8005f3c <HAL_ADC_ConfigChannel+0x38c>)
 8005d38:	688a      	ldr	r2, [r1, #8]
 8005d3a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005d3e:	4322      	orrs	r2, r4
 8005d40:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005d44:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d46:	2000      	movs	r0, #0
}
 8005d48:	e749      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005d4a:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d4c:	0dc2      	lsrs	r2, r0, #23
 8005d4e:	f002 0204 	and.w	r2, r2, #4
 8005d52:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8005d54:	58a5      	ldr	r5, [r4, r2]
 8005d56:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005d5a:	2607      	movs	r6, #7
 8005d5c:	fa06 f000 	lsl.w	r0, r6, r0
 8005d60:	ea25 0000 	bic.w	r0, r5, r0
 8005d64:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005d66:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005d68:	6942      	ldr	r2, [r0, #20]
 8005d6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005d6e:	6142      	str	r2, [r0, #20]
}
 8005d70:	e777      	b.n	8005c62 <HAL_ADC_ConfigChannel+0xb2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d72:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005d74:	6e20      	ldr	r0, [r4, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d76:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d7a:	680a      	ldr	r2, [r1, #0]
 8005d7c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005d80:	bb5d      	cbnz	r5, 8005dda <HAL_ADC_ConfigChannel+0x22a>
 8005d82:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d86:	42a8      	cmp	r0, r5
 8005d88:	d057      	beq.n	8005e3a <HAL_ADC_ConfigChannel+0x28a>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d8a:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d8e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005d90:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d92:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d96:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d9a:	4282      	cmp	r2, r0
 8005d9c:	d05e      	beq.n	8005e5c <HAL_ADC_ConfigChannel+0x2ac>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005da4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005da6:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005da8:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dac:	680a      	ldr	r2, [r1, #0]
 8005dae:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005db2:	4282      	cmp	r2, r0
 8005db4:	d063      	beq.n	8005e7e <HAL_ADC_ConfigChannel+0x2ce>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005dbc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005dbe:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005dc0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dc4:	680a      	ldr	r2, [r1, #0]
 8005dc6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005dca:	4282      	cmp	r2, r0
 8005dcc:	f47f af7d 	bne.w	8005cca <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(*preg,
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005dd6:	6022      	str	r2, [r4, #0]
}
 8005dd8:	e777      	b.n	8005cca <HAL_ADC_ConfigChannel+0x11a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dda:	fa92 f5a2 	rbit	r5, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005dde:	b11d      	cbz	r5, 8005de8 <HAL_ADC_ConfigChannel+0x238>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005de0:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005de4:	42a8      	cmp	r0, r5
 8005de6:	d028      	beq.n	8005e3a <HAL_ADC_ConfigChannel+0x28a>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005de8:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005dec:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005dee:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005df0:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005df8:	b11a      	cbz	r2, 8005e02 <HAL_ADC_ConfigChannel+0x252>
  return __builtin_clz(value);
 8005dfa:	fab2 f282 	clz	r2, r2
 8005dfe:	4282      	cmp	r2, r0
 8005e00:	d02c      	beq.n	8005e5c <HAL_ADC_ConfigChannel+0x2ac>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e08:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005e0a:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e0c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e10:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005e16:	b11a      	cbz	r2, 8005e20 <HAL_ADC_ConfigChannel+0x270>
  return __builtin_clz(value);
 8005e18:	fab2 f282 	clz	r2, r2
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e1c:	4282      	cmp	r2, r0
 8005e1e:	d02e      	beq.n	8005e7e <HAL_ADC_ConfigChannel+0x2ce>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e26:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005e28:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e2a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e2e:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e30:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005e34:	fab2 f282 	clz	r2, r2
 8005e38:	e7c7      	b.n	8005dca <HAL_ADC_ConfigChannel+0x21a>
  MODIFY_REG(*preg,
 8005e3a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005e3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e40:	6622      	str	r2, [r4, #96]	; 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	f102 0564 	add.w	r5, r2, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e48:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005e4a:	6e50      	ldr	r0, [r2, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e4c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e50:	680a      	ldr	r2, [r1, #0]
 8005e52:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8005e56:	2c00      	cmp	r4, #0
 8005e58:	d1cc      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x244>
 8005e5a:	e79c      	b.n	8005d96 <HAL_ADC_ConfigChannel+0x1e6>
  MODIFY_REG(*preg,
 8005e5c:	682a      	ldr	r2, [r5, #0]
 8005e5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e62:	602a      	str	r2, [r5, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e6a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005e6c:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e6e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e72:	680a      	ldr	r2, [r1, #0]
 8005e74:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005e78:	2d00      	cmp	r5, #0
 8005e7a:	d1ca      	bne.n	8005e12 <HAL_ADC_ConfigChannel+0x262>
 8005e7c:	e797      	b.n	8005dae <HAL_ADC_ConfigChannel+0x1fe>
  MODIFY_REG(*preg,
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e84:	6022      	str	r2, [r4, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e8c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005e8e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e90:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e94:	680a      	ldr	r2, [r1, #0]
 8005e96:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	d1c8      	bne.n	8005e30 <HAL_ADC_ConfigChannel+0x280>
 8005e9e:	e792      	b.n	8005dc6 <HAL_ADC_ConfigChannel+0x216>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ea0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ea2:	680a      	ldr	r2, [r1, #0]
 8005ea4:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8005ea8:	b9bc      	cbnz	r4, 8005eda <HAL_ADC_ConfigChannel+0x32a>
 8005eaa:	0e94      	lsrs	r4, r2, #26
 8005eac:	3401      	adds	r4, #1
 8005eae:	f004 051f 	and.w	r5, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005eb2:	2d09      	cmp	r5, #9
 8005eb4:	d94c      	bls.n	8005f50 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005eb6:	0e94      	lsrs	r4, r2, #26
 8005eb8:	3401      	adds	r4, #1
 8005eba:	f004 021f 	and.w	r2, r4, #31
 8005ebe:	06a4      	lsls	r4, r4, #26
 8005ec0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005ec4:	2501      	movs	r5, #1
 8005ec6:	4095      	lsls	r5, r2
 8005ec8:	432c      	orrs	r4, r5
 8005eca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005ece:	3a1e      	subs	r2, #30
 8005ed0:	0512      	lsls	r2, r2, #20
 8005ed2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ed6:	4322      	orrs	r2, r4
 8005ed8:	e044      	b.n	8005f64 <HAL_ADC_ConfigChannel+0x3b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eda:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8005ede:	2c00      	cmp	r4, #0
 8005ee0:	d053      	beq.n	8005f8a <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 8005ee2:	fab4 f484 	clz	r4, r4
 8005ee6:	3401      	adds	r4, #1
 8005ee8:	f004 041f 	and.w	r4, r4, #31
 8005eec:	2c09      	cmp	r4, #9
 8005eee:	d94c      	bls.n	8005f8a <HAL_ADC_ConfigChannel+0x3da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef0:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8005ef4:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ef8:	3501      	adds	r5, #1
 8005efa:	06ad      	lsls	r5, r5, #26
 8005efc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f00:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8005f04:	fab6 f686 	clz	r6, r6
 8005f08:	3601      	adds	r6, #1
 8005f0a:	f006 061f 	and.w	r6, r6, #31
 8005f0e:	2401      	movs	r4, #1
 8005f10:	40b4      	lsls	r4, r6
 8005f12:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f14:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005f18:	fab2 f282 	clz	r2, r2
 8005f1c:	3201      	adds	r2, #1
 8005f1e:	f002 021f 	and.w	r2, r2, #31
 8005f22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005f26:	3a1e      	subs	r2, #30
 8005f28:	0512      	lsls	r2, r2, #20
 8005f2a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005f2e:	e7d2      	b.n	8005ed6 <HAL_ADC_ConfigChannel+0x326>
 8005f30:	03fff000 	.word	0x03fff000
 8005f34:	407f0000 	.word	0x407f0000
 8005f38:	80080000 	.word	0x80080000
 8005f3c:	50000300 	.word	0x50000300
 8005f40:	c3210000 	.word	0xc3210000
 8005f44:	90c00010 	.word	0x90c00010
 8005f48:	c7520000 	.word	0xc7520000
 8005f4c:	50000100 	.word	0x50000100
 8005f50:	06a4      	lsls	r4, r4, #26
 8005f52:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005f56:	2201      	movs	r2, #1
 8005f58:	40aa      	lsls	r2, r5
 8005f5a:	4314      	orrs	r4, r2
 8005f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f60:	052a      	lsls	r2, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f62:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005f64:	0dd5      	lsrs	r5, r2, #23
 8005f66:	f005 0504 	and.w	r5, r5, #4
 8005f6a:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8005f6c:	5944      	ldr	r4, [r0, r5]
 8005f6e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005f72:	f04f 0c07 	mov.w	ip, #7
 8005f76:	fa0c fc02 	lsl.w	ip, ip, r2
 8005f7a:	ea24 040c 	bic.w	r4, r4, ip
 8005f7e:	688e      	ldr	r6, [r1, #8]
 8005f80:	fa06 f202 	lsl.w	r2, r6, r2
 8005f84:	4322      	orrs	r2, r4
 8005f86:	5142      	str	r2, [r0, r5]
}
 8005f88:	e6b7      	b.n	8005cfa <HAL_ADC_ConfigChannel+0x14a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f8a:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8005f8e:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f92:	3501      	adds	r5, #1
 8005f94:	06ad      	lsls	r5, r5, #26
 8005f96:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9a:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8005f9e:	fab6 f686 	clz	r6, r6
 8005fa2:	3601      	adds	r6, #1
 8005fa4:	f006 061f 	and.w	r6, r6, #31
 8005fa8:	2401      	movs	r4, #1
 8005faa:	40b4      	lsls	r4, r6
 8005fac:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fae:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005fb2:	fab2 f282 	clz	r2, r2
 8005fb6:	3201      	adds	r2, #1
 8005fb8:	f002 021f 	and.w	r2, r2, #31
 8005fbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005fc0:	0512      	lsls	r2, r2, #20
 8005fc2:	e7ce      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x3b2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005fc4:	4926      	ldr	r1, [pc, #152]	; (8006060 <HAL_ADC_ConfigChannel+0x4b0>)
 8005fc6:	688a      	ldr	r2, [r1, #8]
 8005fc8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005fcc:	4322      	orrs	r2, r4
 8005fce:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005fd2:	608a      	str	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fd4:	4a23      	ldr	r2, [pc, #140]	; (8006064 <HAL_ADC_ConfigChannel+0x4b4>)
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	0992      	lsrs	r2, r2, #6
 8005fda:	4923      	ldr	r1, [pc, #140]	; (8006068 <HAL_ADC_ConfigChannel+0x4b8>)
 8005fdc:	fba1 1202 	umull	r1, r2, r1, r2
 8005fe0:	0992      	lsrs	r2, r2, #6
 8005fe2:	3201      	adds	r2, #1
 8005fe4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005fec:	9a01      	ldr	r2, [sp, #4]
 8005fee:	b1ea      	cbz	r2, 800602c <HAL_ADC_ConfigChannel+0x47c>
            wait_loop_index--;
 8005ff0:	9a01      	ldr	r2, [sp, #4]
 8005ff2:	3a01      	subs	r2, #1
 8005ff4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005ff6:	9a01      	ldr	r2, [sp, #4]
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	d1f9      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	e5ee      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006000:	481a      	ldr	r0, [pc, #104]	; (800606c <HAL_ADC_ConfigChannel+0x4bc>)
 8006002:	4282      	cmp	r2, r0
 8006004:	d118      	bne.n	8006038 <HAL_ADC_ConfigChannel+0x488>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006006:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800600a:	d117      	bne.n	800603c <HAL_ADC_ConfigChannel+0x48c>
        if (ADC_VREFINT_INSTANCE(hadc))
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	4a18      	ldr	r2, [pc, #96]	; (8006070 <HAL_ADC_ConfigChannel+0x4c0>)
 8006010:	4291      	cmp	r1, r2
 8006012:	d015      	beq.n	8006040 <HAL_ADC_ConfigChannel+0x490>
 8006014:	4912      	ldr	r1, [pc, #72]	; (8006060 <HAL_ADC_ConfigChannel+0x4b0>)
 8006016:	688a      	ldr	r2, [r1, #8]
 8006018:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800601c:	4322      	orrs	r2, r4
 800601e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006022:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006024:	2000      	movs	r0, #0
}
 8006026:	e5da      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
 8006028:	2000      	movs	r0, #0
 800602a:	e5d8      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
 800602c:	2000      	movs	r0, #0
 800602e:	e5d6      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
 8006030:	2000      	movs	r0, #0
 8006032:	e5d4      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
 8006034:	2000      	movs	r0, #0
 8006036:	e5d2      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
 8006038:	2000      	movs	r0, #0
 800603a:	e5d0      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
 800603c:	2000      	movs	r0, #0
 800603e:	e5ce      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
 8006040:	2000      	movs	r0, #0
 8006042:	e5cc      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8006044:	2002      	movs	r0, #2
 8006046:	e5cd      	b.n	8005be4 <HAL_ADC_ConfigChannel+0x34>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006048:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800604c:	d105      	bne.n	800605a <HAL_ADC_ConfigChannel+0x4aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006054:	d0b6      	beq.n	8005fc4 <HAL_ADC_ConfigChannel+0x414>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006056:	2000      	movs	r0, #0
 8006058:	e5c1      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
 800605a:	2000      	movs	r0, #0
 800605c:	e5bf      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2e>
 800605e:	bf00      	nop
 8006060:	50000300 	.word	0x50000300
 8006064:	20000550 	.word	0x20000550
 8006068:	053e2d63 	.word	0x053e2d63
 800606c:	cb840000 	.word	0xcb840000
 8006070:	50000100 	.word	0x50000100

08006074 <ADC_Enable>:
{
 8006074:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006076:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	f012 0f01 	tst.w	r2, #1
 800607e:	d147      	bne.n	8006110 <ADC_Enable+0x9c>
 8006080:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006082:	6899      	ldr	r1, [r3, #8]
 8006084:	4a23      	ldr	r2, [pc, #140]	; (8006114 <ADC_Enable+0xa0>)
 8006086:	4211      	tst	r1, r2
 8006088:	d009      	beq.n	800609e <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800608a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800608c:	f043 0310 	orr.w	r3, r3, #16
 8006090:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006092:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 800609a:	2001      	movs	r0, #1
 800609c:	e039      	b.n	8006112 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060a4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80060a8:	f042 0201 	orr.w	r2, r2, #1
 80060ac:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80060ae:	f7ff fab5 	bl	800561c <HAL_GetTick>
 80060b2:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	f012 0f01 	tst.w	r2, #1
 80060bc:	d006      	beq.n	80060cc <ADC_Enable+0x58>
  return HAL_OK;
 80060be:	2000      	movs	r0, #0
 80060c0:	e027      	b.n	8006112 <ADC_Enable+0x9e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	f012 0f01 	tst.w	r2, #1
 80060ca:	d11f      	bne.n	800610c <ADC_Enable+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	f012 0f01 	tst.w	r2, #1
 80060d2:	d107      	bne.n	80060e4 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060da:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80060e4:	f7ff fa9a 	bl	800561c <HAL_GetTick>
 80060e8:	1b43      	subs	r3, r0, r5
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d9e9      	bls.n	80060c2 <ADC_Enable+0x4e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f013 0f01 	tst.w	r3, #1
 80060f6:	d1e4      	bne.n	80060c2 <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80060fa:	f043 0310 	orr.w	r3, r3, #16
 80060fe:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006100:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8006108:	2001      	movs	r0, #1
 800610a:	e002      	b.n	8006112 <ADC_Enable+0x9e>
  return HAL_OK;
 800610c:	2000      	movs	r0, #0
 800610e:	e000      	b.n	8006112 <ADC_Enable+0x9e>
 8006110:	2000      	movs	r0, #0
}
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	8000003f 	.word	0x8000003f

08006118 <HAL_ADC_Start_DMA>:
{
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800611c:	4837      	ldr	r0, [pc, #220]	; (80061fc <HAL_ADC_Start_DMA+0xe4>)
 800611e:	6887      	ldr	r7, [r0, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006120:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006122:	6880      	ldr	r0, [r0, #8]
 8006124:	f010 0f04 	tst.w	r0, #4
 8006128:	d161      	bne.n	80061ee <HAL_ADC_Start_DMA+0xd6>
 800612a:	460e      	mov	r6, r1
 800612c:	4615      	mov	r5, r2
    __HAL_LOCK(hadc);
 800612e:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8006132:	2a01      	cmp	r2, #1
 8006134:	d05d      	beq.n	80061f2 <HAL_ADC_Start_DMA+0xda>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006136:	f007 071f 	and.w	r7, r7, #31
 800613a:	2301      	movs	r3, #1
 800613c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006140:	f240 2321 	movw	r3, #545	; 0x221
 8006144:	40fb      	lsrs	r3, r7
 8006146:	f013 0f01 	tst.w	r3, #1
 800614a:	d104      	bne.n	8006156 <HAL_ADC_Start_DMA+0x3e>
      __HAL_UNLOCK(hadc);
 800614c:	2300      	movs	r3, #0
 800614e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8006152:	2001      	movs	r0, #1
 8006154:	e04c      	b.n	80061f0 <HAL_ADC_Start_DMA+0xd8>
      tmp_hal_status = ADC_Enable(hadc);
 8006156:	4620      	mov	r0, r4
 8006158:	f7ff ff8c 	bl	8006074 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800615c:	2800      	cmp	r0, #0
 800615e:	d142      	bne.n	80061e6 <HAL_ADC_Start_DMA+0xce>
        ADC_STATE_CLR_SET(hadc->State,
 8006160:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006162:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616e:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006170:	6822      	ldr	r2, [r4, #0]
 8006172:	4b23      	ldr	r3, [pc, #140]	; (8006200 <HAL_ADC_Start_DMA+0xe8>)
 8006174:	429a      	cmp	r2, r3
 8006176:	d03e      	beq.n	80061f6 <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006178:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800617a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800617e:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006180:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006182:	f413 5f80 	tst.w	r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006186:	bf1a      	itte	ne
 8006188:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 800618a:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800618e:	2300      	moveq	r3, #0
 8006190:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006192:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006194:	4a1b      	ldr	r2, [pc, #108]	; (8006204 <HAL_ADC_Start_DMA+0xec>)
 8006196:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006198:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800619a:	4a1b      	ldr	r2, [pc, #108]	; (8006208 <HAL_ADC_Start_DMA+0xf0>)
 800619c:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800619e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061a0:	4a1a      	ldr	r2, [pc, #104]	; (800620c <HAL_ADC_Start_DMA+0xf4>)
 80061a2:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	221c      	movs	r2, #28
 80061a8:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 80061aa:	2300      	movs	r3, #0
 80061ac:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80061b0:	6822      	ldr	r2, [r4, #0]
 80061b2:	6853      	ldr	r3, [r2, #4]
 80061b4:	f043 0310 	orr.w	r3, r3, #16
 80061b8:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	68d3      	ldr	r3, [r2, #12]
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80061c4:	6821      	ldr	r1, [r4, #0]
 80061c6:	462b      	mov	r3, r5
 80061c8:	4632      	mov	r2, r6
 80061ca:	3140      	adds	r1, #64	; 0x40
 80061cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061ce:	f000 fb15 	bl	80067fc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80061d2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80061d4:	6893      	ldr	r3, [r2, #8]
 80061d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061de:	f043 0304 	orr.w	r3, r3, #4
 80061e2:	6093      	str	r3, [r2, #8]
}
 80061e4:	e004      	b.n	80061f0 <HAL_ADC_Start_DMA+0xd8>
        __HAL_UNLOCK(hadc);
 80061e6:	2300      	movs	r3, #0
 80061e8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80061ec:	e000      	b.n	80061f0 <HAL_ADC_Start_DMA+0xd8>
    tmp_hal_status = HAL_BUSY;
 80061ee:	2002      	movs	r0, #2
}
 80061f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80061f2:	2002      	movs	r0, #2
 80061f4:	e7fc      	b.n	80061f0 <HAL_ADC_Start_DMA+0xd8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80061f6:	2f00      	cmp	r7, #0
 80061f8:	d0be      	beq.n	8006178 <HAL_ADC_Start_DMA+0x60>
 80061fa:	e7c1      	b.n	8006180 <HAL_ADC_Start_DMA+0x68>
 80061fc:	50000300 	.word	0x50000300
 8006200:	50000100 	.word	0x50000100
 8006204:	08005b0d 	.word	0x08005b0d
 8006208:	0800587d 	.word	0x0800587d
 800620c:	08005b95 	.word	0x08005b95

08006210 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006210:	4770      	bx	lr

08006212 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006212:	4770      	bx	lr

08006214 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006214:	4770      	bx	lr

08006216 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006216:	4770      	bx	lr

08006218 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006218:	4770      	bx	lr
	...

0800621c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800621c:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8006220:	2a01      	cmp	r2, #1
 8006222:	d03d      	beq.n	80062a0 <HAL_ADCEx_MultiModeConfigChannel+0x84>
{
 8006224:	b410      	push	{r4}
 8006226:	b09d      	sub	sp, #116	; 0x74
 8006228:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800622a:	2201      	movs	r2, #1
 800622c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006230:	2200      	movs	r2, #0
 8006232:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006234:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006236:	6802      	ldr	r2, [r0, #0]
 8006238:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800623c:	d032      	beq.n	80062a4 <HAL_ADCEx_MultiModeConfigChannel+0x88>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800623e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006240:	f042 0220 	orr.w	r2, r2, #32
 8006244:	65c2      	str	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006246:	2200      	movs	r2, #0
 8006248:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

    return HAL_ERROR;
 800624c:	2001      	movs	r0, #1
 800624e:	e01f      	b.n	8006290 <HAL_ADCEx_MultiModeConfigChannel+0x74>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006250:	492b      	ldr	r1, [pc, #172]	; (8006300 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8006252:	688a      	ldr	r2, [r1, #8]
 8006254:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006258:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800625a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800625e:	6891      	ldr	r1, [r2, #8]
 8006260:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006264:	6892      	ldr	r2, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006266:	430a      	orrs	r2, r1
 8006268:	f012 0f01 	tst.w	r2, #1
 800626c:	d116      	bne.n	800629c <HAL_ADCEx_MultiModeConfigChannel+0x80>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800626e:	4924      	ldr	r1, [pc, #144]	; (8006300 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8006270:	688a      	ldr	r2, [r1, #8]
 8006272:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8006276:	f022 020f 	bic.w	r2, r2, #15
 800627a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800627c:	2000      	movs	r0, #0
 800627e:	e004      	b.n	800628a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006282:	f042 0220 	orr.w	r2, r2, #32
 8006286:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006288:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8006290:	b01d      	add	sp, #116	; 0x74
 8006292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006296:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006298:	2000      	movs	r0, #0
 800629a:	e7f6      	b.n	800628a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800629c:	2000      	movs	r0, #0
 800629e:	e7f4      	b.n	800628a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 80062a0:	2002      	movs	r0, #2
}
 80062a2:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062a4:	4a17      	ldr	r2, [pc, #92]	; (8006304 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 80062a6:	6890      	ldr	r0, [r2, #8]
 80062a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80062ac:	6892      	ldr	r2, [r2, #8]
 80062ae:	4302      	orrs	r2, r0
 80062b0:	f012 0f04 	tst.w	r2, #4
 80062b4:	d1e4      	bne.n	8006280 <HAL_ADCEx_MultiModeConfigChannel+0x64>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062b6:	680a      	ldr	r2, [r1, #0]
 80062b8:	2a00      	cmp	r2, #0
 80062ba:	d0c9      	beq.n	8006250 <HAL_ADCEx_MultiModeConfigChannel+0x34>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80062bc:	4810      	ldr	r0, [pc, #64]	; (8006300 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80062be:	6882      	ldr	r2, [r0, #8]
 80062c0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80062c4:	684c      	ldr	r4, [r1, #4]
 80062c6:	4322      	orrs	r2, r4
 80062c8:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80062cc:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80062d0:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80062d6:	6890      	ldr	r0, [r2, #8]
 80062d8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80062dc:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062de:	4302      	orrs	r2, r0
 80062e0:	f012 0f01 	tst.w	r2, #1
 80062e4:	d1d8      	bne.n	8006298 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        MODIFY_REG(tmpADC_Common->CCR,
 80062e6:	4c06      	ldr	r4, [pc, #24]	; (8006300 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80062e8:	68a0      	ldr	r0, [r4, #8]
 80062ea:	680a      	ldr	r2, [r1, #0]
 80062ec:	6889      	ldr	r1, [r1, #8]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80062f4:	f021 010f 	bic.w	r1, r1, #15
 80062f8:	430a      	orrs	r2, r1
 80062fa:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062fc:	2000      	movs	r0, #0
 80062fe:	e7c4      	b.n	800628a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006300:	50000300 	.word	0x50000300
 8006304:	50000100 	.word	0x50000100

08006308 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006308:	4907      	ldr	r1, [pc, #28]	; (8006328 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800630a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800630c:	0203      	lsls	r3, r0, #8
 800630e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006312:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006316:	0412      	lsls	r2, r2, #16
 8006318:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800631a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800631c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006324:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006326:	4770      	bx	lr
 8006328:	e000ed00 	.word	0xe000ed00

0800632c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800632c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800632e:	4b18      	ldr	r3, [pc, #96]	; (8006390 <HAL_NVIC_SetPriority+0x64>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006336:	f1c3 0c07 	rsb	ip, r3, #7
 800633a:	f1bc 0f04 	cmp.w	ip, #4
 800633e:	bf28      	it	cs
 8006340:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006344:	f103 0e04 	add.w	lr, r3, #4
 8006348:	f1be 0f06 	cmp.w	lr, #6
 800634c:	bf8c      	ite	hi
 800634e:	3b03      	subhi	r3, #3
 8006350:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006352:	f04f 3eff 	mov.w	lr, #4294967295
 8006356:	fa0e fc0c 	lsl.w	ip, lr, ip
 800635a:	ea21 010c 	bic.w	r1, r1, ip
 800635e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006360:	fa0e fe03 	lsl.w	lr, lr, r3
 8006364:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006368:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800636a:	2800      	cmp	r0, #0
 800636c:	db09      	blt.n	8006382 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800636e:	0109      	lsls	r1, r1, #4
 8006370:	b2c9      	uxtb	r1, r1
 8006372:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006376:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800637a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800637e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006382:	f000 000f 	and.w	r0, r0, #15
 8006386:	0109      	lsls	r1, r1, #4
 8006388:	b2c9      	uxtb	r1, r1
 800638a:	4b02      	ldr	r3, [pc, #8]	; (8006394 <HAL_NVIC_SetPriority+0x68>)
 800638c:	5419      	strb	r1, [r3, r0]
 800638e:	e7f6      	b.n	800637e <HAL_NVIC_SetPriority+0x52>
 8006390:	e000ed00 	.word	0xe000ed00
 8006394:	e000ed14 	.word	0xe000ed14

08006398 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006398:	2800      	cmp	r0, #0
 800639a:	db07      	blt.n	80063ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800639c:	0941      	lsrs	r1, r0, #5
 800639e:	f000 001f 	and.w	r0, r0, #31
 80063a2:	2301      	movs	r3, #1
 80063a4:	4083      	lsls	r3, r0
 80063a6:	4a02      	ldr	r2, [pc, #8]	; (80063b0 <HAL_NVIC_EnableIRQ+0x18>)
 80063a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	e000e100 	.word	0xe000e100

080063b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063b4:	3801      	subs	r0, #1
 80063b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80063ba:	d20b      	bcs.n	80063d4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063c0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c2:	4a05      	ldr	r2, [pc, #20]	; (80063d8 <HAL_SYSTICK_Config+0x24>)
 80063c4:	21f0      	movs	r1, #240	; 0xf0
 80063c6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063ca:	2000      	movs	r0, #0
 80063cc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063ce:	2207      	movs	r2, #7
 80063d0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063d2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80063d4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80063d6:	4770      	bx	lr
 80063d8:	e000ed00 	.word	0xe000ed00

080063dc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80063dc:	b170      	cbz	r0, 80063fc <HAL_DAC_Init+0x20>
{
 80063de:	b510      	push	{r4, lr}
 80063e0:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80063e2:	7903      	ldrb	r3, [r0, #4]
 80063e4:	b133      	cbz	r3, 80063f4 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80063e6:	2302      	movs	r3, #2
 80063e8:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80063ea:	2000      	movs	r0, #0
 80063ec:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80063ee:	2301      	movs	r3, #1
 80063f0:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 80063f2:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80063f4:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80063f6:	f7fe fa7f 	bl	80048f8 <HAL_DAC_MspInit>
 80063fa:	e7f4      	b.n	80063e6 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 80063fc:	2001      	movs	r0, #1
}
 80063fe:	4770      	bx	lr

08006400 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006400:	7943      	ldrb	r3, [r0, #5]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d02e      	beq.n	8006464 <HAL_DAC_Start+0x64>
{
 8006406:	b570      	push	{r4, r5, r6, lr}
 8006408:	4604      	mov	r4, r0
 800640a:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 800640c:	2001      	movs	r0, #1
 800640e:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006410:	2302      	movs	r3, #2
 8006412:	7123      	strb	r3, [r4, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006414:	6822      	ldr	r2, [r4, #0]
 8006416:	6811      	ldr	r1, [r2, #0]
 8006418:	f005 0610 	and.w	r6, r5, #16
 800641c:	fa00 f306 	lsl.w	r3, r0, r6
 8006420:	430b      	orrs	r3, r1
 8006422:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8006424:	f7ff f900 	bl	8005628 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8006428:	b97d      	cbnz	r5, 800644a <HAL_DAC_Start+0x4a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	6813      	ldr	r3, [r2, #0]
 800642e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006432:	2b02      	cmp	r3, #2
 8006434:	d004      	beq.n	8006440 <HAL_DAC_Start+0x40>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006436:	2301      	movs	r3, #1
 8006438:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800643a:	2000      	movs	r0, #0
 800643c:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 800643e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006440:	6853      	ldr	r3, [r2, #4]
 8006442:	f043 0301 	orr.w	r3, r3, #1
 8006446:	6053      	str	r3, [r2, #4]
 8006448:	e7f5      	b.n	8006436 <HAL_DAC_Start+0x36>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800644a:	6821      	ldr	r1, [r4, #0]
 800644c:	680a      	ldr	r2, [r1, #0]
 800644e:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8006452:	2302      	movs	r3, #2
 8006454:	40b3      	lsls	r3, r6
 8006456:	429a      	cmp	r2, r3
 8006458:	d1ed      	bne.n	8006436 <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800645a:	684b      	ldr	r3, [r1, #4]
 800645c:	f043 0302 	orr.w	r3, r3, #2
 8006460:	604b      	str	r3, [r1, #4]
 8006462:	e7e8      	b.n	8006436 <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 8006464:	2002      	movs	r0, #2
}
 8006466:	4770      	bx	lr

08006468 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006468:	b410      	push	{r4}
 800646a:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 800646c:	2400      	movs	r4, #0
 800646e:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006470:	6800      	ldr	r0, [r0, #0]
 8006472:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006474:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8006476:	b951      	cbnz	r1, 800648e <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006478:	9901      	ldr	r1, [sp, #4]
 800647a:	3108      	adds	r1, #8
 800647c:	440a      	add	r2, r1
 800647e:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006480:	9a01      	ldr	r2, [sp, #4]
 8006482:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8006484:	2000      	movs	r0, #0
 8006486:	b003      	add	sp, #12
 8006488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800648c:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800648e:	9901      	ldr	r1, [sp, #4]
 8006490:	3114      	adds	r1, #20
 8006492:	440a      	add	r2, r1
 8006494:	9201      	str	r2, [sp, #4]
 8006496:	e7f3      	b.n	8006480 <HAL_DAC_SetValue+0x18>

08006498 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006498:	7943      	ldrb	r3, [r0, #5]
 800649a:	2b01      	cmp	r3, #1
 800649c:	f000 80e8 	beq.w	8006670 <HAL_DAC_ConfigChannel+0x1d8>
{
 80064a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a4:	4604      	mov	r4, r0
 80064a6:	460e      	mov	r6, r1
 80064a8:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 80064aa:	2301      	movs	r3, #1
 80064ac:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80064ae:	2302      	movs	r3, #2
 80064b0:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80064b2:	688b      	ldr	r3, [r1, #8]
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d071      	beq.n	800659c <HAL_DAC_ConfigChannel+0x104>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80064b8:	69f3      	ldr	r3, [r6, #28]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	f000 80b8 	beq.w	8006630 <HAL_DAC_ConfigChannel+0x198>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80064c4:	f005 0510 	and.w	r5, r5, #16
 80064c8:	2207      	movs	r2, #7
 80064ca:	40aa      	lsls	r2, r5
 80064cc:	43d2      	mvns	r2, r2
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80064ce:	69b1      	ldr	r1, [r6, #24]
 80064d0:	2901      	cmp	r1, #1
 80064d2:	f000 80ba 	beq.w	800664a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80064d6:	2902      	cmp	r1, #2
 80064d8:	f000 80b9 	beq.w	800664e <HAL_DAC_ConfigChannel+0x1b6>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80064dc:	6971      	ldr	r1, [r6, #20]
 80064de:	fab1 f181 	clz	r1, r1
 80064e2:	0949      	lsrs	r1, r1, #5
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80064e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80064e8:	40a8      	lsls	r0, r5
 80064ea:	ea23 0300 	bic.w	r3, r3, r0
 80064ee:	4013      	ands	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80064f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064f4:	40aa      	lsls	r2, r5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80064f6:	ea23 0302 	bic.w	r3, r3, r2
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80064fa:	7932      	ldrb	r2, [r6, #4]
 80064fc:	2a01      	cmp	r2, #1
 80064fe:	bf14      	ite	ne
 8006500:	2200      	movne	r2, #0
 8006502:	2201      	moveq	r2, #1
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006504:	68b7      	ldr	r7, [r6, #8]
 8006506:	6970      	ldr	r0, [r6, #20]
 8006508:	4307      	orrs	r7, r0
 800650a:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 800650e:	7972      	ldrb	r2, [r6, #5]
 8006510:	2a01      	cmp	r2, #1
 8006512:	bf14      	ite	ne
 8006514:	2200      	movne	r2, #0
 8006516:	2201      	moveq	r2, #1
 8006518:	ea47 2742 	orr.w	r7, r7, r2, lsl #9
 800651c:	430f      	orrs	r7, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800651e:	f423 4840 	bic.w	r8, r3, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006522:	6833      	ldr	r3, [r6, #0]
 8006524:	2b02      	cmp	r3, #2
 8006526:	f000 8094 	beq.w	8006652 <HAL_DAC_ConfigChannel+0x1ba>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800652a:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800652e:	40af      	lsls	r7, r5
 8006530:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006538:	6821      	ldr	r1, [r4, #0]
 800653a:	680b      	ldr	r3, [r1, #0]
 800653c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006540:	40aa      	lsls	r2, r5
 8006542:	ea23 0302 	bic.w	r3, r3, r2
 8006546:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006548:	6821      	ldr	r1, [r4, #0]
 800654a:	680a      	ldr	r2, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800654c:	f640 73fe 	movw	r3, #4094	; 0xffe
 8006550:	40ab      	lsls	r3, r5
 8006552:	ea22 0203 	bic.w	r2, r2, r3
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006556:	68f3      	ldr	r3, [r6, #12]
 8006558:	40ab      	lsls	r3, r5
 800655a:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800655c:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800655e:	6821      	ldr	r1, [r4, #0]
 8006560:	680b      	ldr	r3, [r1, #0]
 8006562:	22c0      	movs	r2, #192	; 0xc0
 8006564:	40aa      	lsls	r2, r5
 8006566:	ea23 0302 	bic.w	r3, r3, r2
 800656a:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800656c:	68f3      	ldr	r3, [r6, #12]
 800656e:	f3c3 0183 	ubfx	r1, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	6e02      	ldr	r2, [r0, #96]	; 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006576:	6933      	ldr	r3, [r6, #16]
 8006578:	019b      	lsls	r3, r3, #6
 800657a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800657e:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006580:	40ab      	lsls	r3, r5
 8006582:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006586:	40a9      	lsls	r1, r5
 8006588:	ea22 0201 	bic.w	r2, r2, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	6603      	str	r3, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006590:	2301      	movs	r3, #1
 8006592:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006594:	2000      	movs	r0, #0
 8006596:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8006598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800659c:	f7ff f83e 	bl	800561c <HAL_GetTick>
 80065a0:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80065a2:	b17d      	cbz	r5, 80065c4 <HAL_DAC_ConfigChannel+0x12c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da3a      	bge.n	8006622 <HAL_DAC_ConfigChannel+0x18a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80065ac:	f7ff f836 	bl	800561c <HAL_GetTick>
 80065b0:	1bc0      	subs	r0, r0, r7
 80065b2:	2801      	cmp	r0, #1
 80065b4:	d9f6      	bls.n	80065a4 <HAL_DAC_ConfigChannel+0x10c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	f043 0308 	orr.w	r3, r3, #8
 80065bc:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80065be:	2003      	movs	r0, #3
 80065c0:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80065c2:	e7e9      	b.n	8006598 <HAL_DAC_ConfigChannel+0x100>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80065cc:	d00b      	beq.n	80065e6 <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80065ce:	f7ff f825 	bl	800561c <HAL_GetTick>
 80065d2:	1bc0      	subs	r0, r0, r7
 80065d4:	2801      	cmp	r0, #1
 80065d6:	d9f5      	bls.n	80065c4 <HAL_DAC_ConfigChannel+0x12c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	f043 0308 	orr.w	r3, r3, #8
 80065de:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80065e0:	2003      	movs	r0, #3
 80065e2:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80065e4:	e7d8      	b.n	8006598 <HAL_DAC_ConfigChannel+0x100>
      HAL_Delay(1);
 80065e6:	2001      	movs	r0, #1
 80065e8:	f7ff f81e 	bl	8005628 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80065f2:	6820      	ldr	r0, [r4, #0]
 80065f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80065f6:	f005 0210 	and.w	r2, r5, #16
 80065fa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80065fe:	4091      	lsls	r1, r2
 8006600:	ea23 0301 	bic.w	r3, r3, r1
 8006604:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8006606:	4091      	lsls	r1, r2
 8006608:	430b      	orrs	r3, r1
 800660a:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006610:	21ff      	movs	r1, #255	; 0xff
 8006612:	4091      	lsls	r1, r2
 8006614:	ea23 0301 	bic.w	r3, r3, r1
 8006618:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800661a:	4091      	lsls	r1, r2
 800661c:	430b      	orrs	r3, r1
 800661e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006620:	e74a      	b.n	80064b8 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 8006622:	2001      	movs	r0, #1
 8006624:	f7ff f800 	bl	8005628 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800662c:	645a      	str	r2, [r3, #68]	; 0x44
 800662e:	e7e0      	b.n	80065f2 <HAL_DAC_ConfigChannel+0x15a>
    tmpreg1 = hdac->Instance->CCR;
 8006630:	6821      	ldr	r1, [r4, #0]
 8006632:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006634:	f005 0010 	and.w	r0, r5, #16
 8006638:	231f      	movs	r3, #31
 800663a:	4083      	lsls	r3, r0
 800663c:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006640:	6a33      	ldr	r3, [r6, #32]
 8006642:	4083      	lsls	r3, r0
 8006644:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8006646:	638b      	str	r3, [r1, #56]	; 0x38
 8006648:	e73a      	b.n	80064c0 <HAL_DAC_ConfigChannel+0x28>
    connectOnChip = 0x00000000UL;
 800664a:	2100      	movs	r1, #0
 800664c:	e74a      	b.n	80064e4 <HAL_DAC_ConfigChannel+0x4c>
    connectOnChip = DAC_MCR_MODE1_0;
 800664e:	2101      	movs	r1, #1
 8006650:	e748      	b.n	80064e4 <HAL_DAC_ConfigChannel+0x4c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006652:	f001 fca7 	bl	8007fa4 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006656:	4b07      	ldr	r3, [pc, #28]	; (8006674 <HAL_DAC_ConfigChannel+0x1dc>)
 8006658:	4298      	cmp	r0, r3
 800665a:	d902      	bls.n	8006662 <HAL_DAC_ConfigChannel+0x1ca>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800665c:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8006660:	e765      	b.n	800652e <HAL_DAC_ConfigChannel+0x96>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <HAL_DAC_ConfigChannel+0x1e0>)
 8006664:	4298      	cmp	r0, r3
 8006666:	f67f af62 	bls.w	800652e <HAL_DAC_ConfigChannel+0x96>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800666a:	f448 4880 	orr.w	r8, r8, #16384	; 0x4000
 800666e:	e75e      	b.n	800652e <HAL_DAC_ConfigChannel+0x96>
  __HAL_LOCK(hdac);
 8006670:	2002      	movs	r0, #2
}
 8006672:	4770      	bx	lr
 8006674:	09896800 	.word	0x09896800
 8006678:	04c4b400 	.word	0x04c4b400

0800667c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800667c:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800667e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8006680:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8006682:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006684:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8006686:	b114      	cbz	r4, 800668e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006688:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800668a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800668c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800668e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006690:	f004 0c1f 	and.w	ip, r4, #31
 8006694:	2401      	movs	r4, #1
 8006696:	fa04 f40c 	lsl.w	r4, r4, ip
 800669a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800669c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800669e:	6804      	ldr	r4, [r0, #0]
 80066a0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066a2:	6883      	ldr	r3, [r0, #8]
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d005      	beq.n	80066b4 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80066a8:	6803      	ldr	r3, [r0, #0]
 80066aa:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80066ac:	6803      	ldr	r3, [r0, #0]
 80066ae:	60da      	str	r2, [r3, #12]
  }
}
 80066b0:	bc30      	pop	{r4, r5}
 80066b2:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80066b4:	6803      	ldr	r3, [r0, #0]
 80066b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80066b8:	6803      	ldr	r3, [r0, #0]
 80066ba:	60d9      	str	r1, [r3, #12]
 80066bc:	e7f8      	b.n	80066b0 <DMA_SetConfig+0x34>
	...

080066c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066c0:	b410      	push	{r4}
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80066c2:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80066c4:	4c0d      	ldr	r4, [pc, #52]	; (80066fc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80066c6:	4a0e      	ldr	r2, [pc, #56]	; (8006700 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80066c8:	490e      	ldr	r1, [pc, #56]	; (8006704 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80066ca:	42a3      	cmp	r3, r4
 80066cc:	bf88      	it	hi
 80066ce:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80066d0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80066d2:	f021 0103 	bic.w	r1, r1, #3
 80066d6:	440a      	add	r2, r1
 80066d8:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80066da:	4a0b      	ldr	r2, [pc, #44]	; (8006708 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 80066dc:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	3b08      	subs	r3, #8
 80066e2:	4a0a      	ldr	r2, [pc, #40]	; (800670c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80066e4:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80066e8:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80066ec:	2201      	movs	r2, #1
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	6503      	str	r3, [r0, #80]	; 0x50
}
 80066f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40020407 	.word	0x40020407
 8006700:	40020800 	.word	0x40020800
 8006704:	40020820 	.word	0x40020820
 8006708:	40020880 	.word	0x40020880
 800670c:	cccccccd 	.word	0xcccccccd

08006710 <HAL_DMA_Init>:
  if (hdma == NULL)
 8006710:	2800      	cmp	r0, #0
 8006712:	d060      	beq.n	80067d6 <HAL_DMA_Init+0xc6>
{
 8006714:	b510      	push	{r4, lr}
 8006716:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006718:	6802      	ldr	r2, [r0, #0]
 800671a:	4b30      	ldr	r3, [pc, #192]	; (80067dc <HAL_DMA_Init+0xcc>)
 800671c:	429a      	cmp	r2, r3
 800671e:	d83f      	bhi.n	80067a0 <HAL_DMA_Init+0x90>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006720:	4b2f      	ldr	r3, [pc, #188]	; (80067e0 <HAL_DMA_Init+0xd0>)
 8006722:	4413      	add	r3, r2
 8006724:	492f      	ldr	r1, [pc, #188]	; (80067e4 <HAL_DMA_Init+0xd4>)
 8006726:	fba1 1303 	umull	r1, r3, r1, r3
 800672a:	091b      	lsrs	r3, r3, #4
 800672c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800672e:	492e      	ldr	r1, [pc, #184]	; (80067e8 <HAL_DMA_Init+0xd8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006730:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006732:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8006734:	2302      	movs	r3, #2
 8006736:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800673a:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800673c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8006740:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8006744:	68a3      	ldr	r3, [r4, #8]
 8006746:	68e0      	ldr	r0, [r4, #12]
 8006748:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800674a:	6920      	ldr	r0, [r4, #16]
 800674c:	4303      	orrs	r3, r0
 800674e:	6960      	ldr	r0, [r4, #20]
 8006750:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006752:	69a0      	ldr	r0, [r4, #24]
 8006754:	4303      	orrs	r3, r0
 8006756:	69e0      	ldr	r0, [r4, #28]
 8006758:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800675a:	6a20      	ldr	r0, [r4, #32]
 800675c:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800675e:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8006760:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff ffac 	bl	80066c0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006768:	68a3      	ldr	r3, [r4, #8]
 800676a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800676e:	bf04      	itt	eq
 8006770:	2300      	moveq	r3, #0
 8006772:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006774:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006776:	7922      	ldrb	r2, [r4, #4]
 8006778:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800677a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800677c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800677e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006780:	6863      	ldr	r3, [r4, #4]
 8006782:	1e5a      	subs	r2, r3, #1
 8006784:	2a03      	cmp	r2, #3
 8006786:	d914      	bls.n	80067b2 <HAL_DMA_Init+0xa2>
    hdma->DMAmuxRequestGen = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800678c:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800678e:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006790:	2000      	movs	r0, #0
 8006792:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8006794:	2301      	movs	r3, #1
 8006796:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 800679a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800679e:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80067a0:	4b12      	ldr	r3, [pc, #72]	; (80067ec <HAL_DMA_Init+0xdc>)
 80067a2:	4413      	add	r3, r2
 80067a4:	490f      	ldr	r1, [pc, #60]	; (80067e4 <HAL_DMA_Init+0xd4>)
 80067a6:	fba1 1303 	umull	r1, r3, r1, r3
 80067aa:	091b      	lsrs	r3, r3, #4
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4910      	ldr	r1, [pc, #64]	; (80067f0 <HAL_DMA_Init+0xe0>)
 80067b0:	e7be      	b.n	8006730 <HAL_DMA_Init+0x20>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067b2:	b2db      	uxtb	r3, r3

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067b4:	4a0f      	ldr	r2, [pc, #60]	; (80067f4 <HAL_DMA_Init+0xe4>)
 80067b6:	441a      	add	r2, r3
 80067b8:	0092      	lsls	r2, r2, #2
 80067ba:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067bc:	490e      	ldr	r1, [pc, #56]	; (80067f8 <HAL_DMA_Init+0xe8>)
 80067be:	65a1      	str	r1, [r4, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80067c0:	3b01      	subs	r3, #1
 80067c2:	2101      	movs	r1, #1
 80067c4:	fa01 f303 	lsl.w	r3, r1, r3
 80067c8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80067d2:	605a      	str	r2, [r3, #4]
 80067d4:	e7dc      	b.n	8006790 <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 80067d6:	2001      	movs	r0, #1
}
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40020407 	.word	0x40020407
 80067e0:	bffdfff8 	.word	0xbffdfff8
 80067e4:	cccccccd 	.word	0xcccccccd
 80067e8:	40020000 	.word	0x40020000
 80067ec:	bffdfbf8 	.word	0xbffdfbf8
 80067f0:	40020400 	.word	0x40020400
 80067f4:	1000823f 	.word	0x1000823f
 80067f8:	40020940 	.word	0x40020940

080067fc <HAL_DMA_Start_IT>:
{
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8006800:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8006804:	2801      	cmp	r0, #1
 8006806:	d041      	beq.n	800688c <HAL_DMA_Start_IT+0x90>
 8006808:	2001      	movs	r0, #1
 800680a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800680e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8006812:	b2c0      	uxtb	r0, r0
 8006814:	2801      	cmp	r0, #1
 8006816:	d004      	beq.n	8006822 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8006818:	2300      	movs	r3, #0
 800681a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 800681e:	2002      	movs	r0, #2
}
 8006820:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8006822:	2002      	movs	r0, #2
 8006824:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006828:	2000      	movs	r0, #0
 800682a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800682c:	6825      	ldr	r5, [r4, #0]
 800682e:	6828      	ldr	r0, [r5, #0]
 8006830:	f020 0001 	bic.w	r0, r0, #1
 8006834:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006836:	4620      	mov	r0, r4
 8006838:	f7ff ff20 	bl	800667c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800683c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800683e:	b1d3      	cbz	r3, 8006876 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	f043 030e 	orr.w	r3, r3, #14
 8006848:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800684a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006852:	d003      	beq.n	800685c <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800685a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800685c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800685e:	b11b      	cbz	r3, 8006868 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006866:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8006868:	6822      	ldr	r2, [r4, #0]
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006872:	2000      	movs	r0, #0
 8006874:	e7d4      	b.n	8006820 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	6813      	ldr	r3, [r2, #0]
 800687a:	f023 0304 	bic.w	r3, r3, #4
 800687e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006880:	6822      	ldr	r2, [r4, #0]
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	f043 030a 	orr.w	r3, r3, #10
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e7de      	b.n	800684a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800688c:	2002      	movs	r0, #2
 800688e:	e7c7      	b.n	8006820 <HAL_DMA_Start_IT+0x24>

08006890 <HAL_DMA_Abort>:
{
 8006890:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006892:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	2a02      	cmp	r2, #2
 800689a:	d009      	beq.n	80068b0 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800689c:	2204      	movs	r2, #4
 800689e:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80068a0:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80068ae:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068b0:	6801      	ldr	r1, [r0, #0]
 80068b2:	680a      	ldr	r2, [r1, #0]
 80068b4:	f022 020e 	bic.w	r2, r2, #14
 80068b8:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068ba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80068bc:	680a      	ldr	r2, [r1, #0]
 80068be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c2:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 80068c4:	6801      	ldr	r1, [r0, #0]
 80068c6:	680a      	ldr	r2, [r1, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068ce:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80068d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068d2:	f002 011f 	and.w	r1, r2, #31
 80068d6:	2201      	movs	r2, #1
 80068d8:	408a      	lsls	r2, r1
 80068da:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068de:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80068e0:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 80068e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068e4:	b142      	cbz	r2, 80068f8 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068e6:	6811      	ldr	r1, [r2, #0]
 80068e8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80068ec:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068f0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80068f2:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068f4:	2000      	movs	r0, #0
 80068f6:	e7d4      	b.n	80068a2 <HAL_DMA_Abort+0x12>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e7d2      	b.n	80068a2 <HAL_DMA_Abort+0x12>

080068fc <HAL_DMA_Abort_IT>:
{
 80068fc:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80068fe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d009      	beq.n	800691c <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006908:	2304      	movs	r3, #4
 800690a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800690c:	2301      	movs	r3, #1
 800690e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006912:	2200      	movs	r2, #0
 8006914:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8006918:	4618      	mov	r0, r3
}
 800691a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800691c:	6802      	ldr	r2, [r0, #0]
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	f023 030e 	bic.w	r3, r3, #14
 8006924:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006926:	6802      	ldr	r2, [r0, #0]
 8006928:	6813      	ldr	r3, [r2, #0]
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006930:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006938:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800693a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800693c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800693e:	f003 021f 	and.w	r2, r3, #31
 8006942:	2301      	movs	r3, #1
 8006944:	4093      	lsls	r3, r2
 8006946:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006948:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800694a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800694c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800694e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006950:	b133      	cbz	r3, 8006960 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006958:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800695a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800695c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800695e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006960:	2301      	movs	r3, #1
 8006962:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006966:	2300      	movs	r3, #0
 8006968:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800696c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800696e:	b113      	cbz	r3, 8006976 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8006970:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006972:	2000      	movs	r0, #0
 8006974:	e7d1      	b.n	800691a <HAL_DMA_Abort_IT+0x1e>
 8006976:	2000      	movs	r0, #0
 8006978:	e7cf      	b.n	800691a <HAL_DMA_Abort_IT+0x1e>

0800697a <HAL_DMA_IRQHandler>:
{
 800697a:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800697c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800697e:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006980:	6804      	ldr	r4, [r0, #0]
 8006982:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006984:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	2204      	movs	r2, #4
 800698c:	409a      	lsls	r2, r3
 800698e:	420a      	tst	r2, r1
 8006990:	d015      	beq.n	80069be <HAL_DMA_IRQHandler+0x44>
 8006992:	f015 0f04 	tst.w	r5, #4
 8006996:	d012      	beq.n	80069be <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	f013 0f20 	tst.w	r3, #32
 800699e:	d103      	bne.n	80069a8 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	f023 0304 	bic.w	r3, r3, #4
 80069a6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80069a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80069aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80069ac:	f003 021f 	and.w	r2, r3, #31
 80069b0:	2304      	movs	r3, #4
 80069b2:	4093      	lsls	r3, r2
 80069b4:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80069b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80069b8:	b103      	cbz	r3, 80069bc <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 80069ba:	4798      	blx	r3
}
 80069bc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80069be:	2202      	movs	r2, #2
 80069c0:	409a      	lsls	r2, r3
 80069c2:	420a      	tst	r2, r1
 80069c4:	d01c      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 80069c6:	f015 0f02 	tst.w	r5, #2
 80069ca:	d019      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	f013 0f20 	tst.w	r3, #32
 80069d2:	d106      	bne.n	80069e2 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	f023 030a 	bic.w	r3, r3, #10
 80069da:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80069dc:	2301      	movs	r3, #1
 80069de:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80069e2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80069e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80069e6:	f003 021f 	and.w	r2, r3, #31
 80069ea:	2302      	movs	r3, #2
 80069ec:	4093      	lsls	r3, r2
 80069ee:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80069f0:	2300      	movs	r3, #0
 80069f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80069f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0df      	beq.n	80069bc <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 80069fc:	4798      	blx	r3
 80069fe:	e7dd      	b.n	80069bc <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006a00:	2208      	movs	r2, #8
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	420b      	tst	r3, r1
 8006a08:	d0d8      	beq.n	80069bc <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8006a0a:	f015 0f08 	tst.w	r5, #8
 8006a0e:	d0d5      	beq.n	80069bc <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	f023 030e 	bic.w	r3, r3, #14
 8006a16:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a18:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006a1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2201      	movs	r2, #1
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a28:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006a2a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8006a34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0c0      	beq.n	80069bc <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8006a3a:	4798      	blx	r3
  return;
 8006a3c:	e7be      	b.n	80069bc <HAL_DMA_IRQHandler+0x42>
	...

08006a40 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a40:	2800      	cmp	r0, #0
 8006a42:	f000 80f9 	beq.w	8006c38 <HAL_FDCAN_Init+0x1f8>
{
 8006a46:	b538      	push	{r3, r4, r5, lr}
 8006a48:	4604      	mov	r4, r0

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a4a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a4e:	b1d3      	cbz	r3, 8006a86 <HAL_FDCAN_Init+0x46>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a50:	6822      	ldr	r2, [r4, #0]
 8006a52:	6993      	ldr	r3, [r2, #24]
 8006a54:	f023 0310 	bic.w	r3, r3, #16
 8006a58:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a5a:	f7fe fddf 	bl	800561c <HAL_GetTick>
 8006a5e:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	f012 0f08 	tst.w	r2, #8
 8006a68:	d012      	beq.n	8006a90 <HAL_FDCAN_Init+0x50>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a6a:	f7fe fdd7 	bl	800561c <HAL_GetTick>
 8006a6e:	1b40      	subs	r0, r0, r5
 8006a70:	280a      	cmp	r0, #10
 8006a72:	d9f5      	bls.n	8006a60 <HAL_FDCAN_Init+0x20>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	6623      	str	r3, [r4, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8006a82:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006a84:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006a86:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8006a8a:	f7fd ffeb 	bl	8004a64 <HAL_FDCAN_MspInit>
 8006a8e:	e7df      	b.n	8006a50 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8006a98:	f7fe fdc0 	bl	800561c <HAL_GetTick>
 8006a9c:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	f012 0f01 	tst.w	r2, #1
 8006aa6:	d10d      	bne.n	8006ac4 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006aa8:	f7fe fdb8 	bl	800561c <HAL_GetTick>
 8006aac:	1b40      	subs	r0, r0, r5
 8006aae:	280a      	cmp	r0, #10
 8006ab0:	d9f5      	bls.n	8006a9e <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ab2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006aba:	2303      	movs	r3, #3
 8006abc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	e7df      	b.n	8006a84 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	f042 0202 	orr.w	r2, r2, #2
 8006aca:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	4b5b      	ldr	r3, [pc, #364]	; (8006c3c <HAL_FDCAN_Init+0x1fc>)
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d047      	beq.n	8006b64 <HAL_FDCAN_Init+0x124>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006ad4:	7c23      	ldrb	r3, [r4, #16]
 8006ad6:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ad8:	6822      	ldr	r2, [r4, #0]
 8006ada:	6993      	ldr	r3, [r2, #24]
 8006adc:	bf0c      	ite	eq
 8006ade:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ae2:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006ae6:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006ae8:	7c63      	ldrb	r3, [r4, #17]
 8006aea:	2b01      	cmp	r3, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	6993      	ldr	r3, [r2, #24]
 8006af0:	bf0c      	ite	eq
 8006af2:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006af6:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8006afa:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006afc:	7ca3      	ldrb	r3, [r4, #18]
 8006afe:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	6993      	ldr	r3, [r2, #24]
 8006b04:	bf0c      	ite	eq
 8006b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b0e:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006b10:	6822      	ldr	r2, [r4, #0]
 8006b12:	6993      	ldr	r3, [r2, #24]
 8006b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b18:	68a1      	ldr	r1, [r4, #8]
 8006b1a:	430b      	orrs	r3, r1
 8006b1c:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	6993      	ldr	r3, [r2, #24]
 8006b22:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8006b26:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b28:	6822      	ldr	r2, [r4, #0]
 8006b2a:	6913      	ldr	r3, [r2, #16]
 8006b2c:	f023 0310 	bic.w	r3, r3, #16
 8006b30:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006b32:	68e3      	ldr	r3, [r4, #12]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d01b      	beq.n	8006b70 <HAL_FDCAN_Init+0x130>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006b38:	b1fb      	cbz	r3, 8006b7a <HAL_FDCAN_Init+0x13a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d065      	beq.n	8006c0a <HAL_FDCAN_Init+0x1ca>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	6993      	ldr	r3, [r2, #24]
 8006b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b46:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b48:	6822      	ldr	r2, [r4, #0]
 8006b4a:	6913      	ldr	r3, [r2, #16]
 8006b4c:	f043 0310 	orr.w	r3, r3, #16
 8006b50:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d110      	bne.n	8006b7a <HAL_FDCAN_Init+0x13a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	6993      	ldr	r3, [r2, #24]
 8006b5c:	f043 0320 	orr.w	r3, r3, #32
 8006b60:	6193      	str	r3, [r2, #24]
 8006b62:	e00a      	b.n	8006b7a <HAL_FDCAN_Init+0x13a>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006b64:	6862      	ldr	r2, [r4, #4]
 8006b66:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006b6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8006b6e:	e7b1      	b.n	8006ad4 <HAL_FDCAN_Init+0x94>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	6993      	ldr	r3, [r2, #24]
 8006b74:	f043 0304 	orr.w	r3, r3, #4
 8006b78:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	69a3      	ldr	r3, [r4, #24]
 8006b7e:	1e59      	subs	r1, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006b80:	69e3      	ldr	r3, [r4, #28]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b86:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006b8a:	6a21      	ldr	r1, [r4, #32]
 8006b8c:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006b8e:	430b      	orrs	r3, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006b90:	6961      	ldr	r1, [r4, #20]
 8006b92:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b98:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba0:	d039      	beq.n	8006c16 <HAL_FDCAN_Init+0x1d6>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8006ba8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006baa:	430b      	orrs	r3, r1
 8006bac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006bb0:	4b23      	ldr	r3, [pc, #140]	; (8006c40 <HAL_FDCAN_Init+0x200>)
 8006bb2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006bb4:	6821      	ldr	r1, [r4, #0]
 8006bb6:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8006bba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006bbc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006bc0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006bc4:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006bc8:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <HAL_FDCAN_Init+0x204>)
 8006bca:	6462      	str	r2, [r4, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006bcc:	6821      	ldr	r1, [r4, #0]
 8006bce:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8006bd2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006bd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bd8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8006bdc:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006be0:	4a19      	ldr	r2, [pc, #100]	; (8006c48 <HAL_FDCAN_Init+0x208>)
 8006be2:	64a2      	str	r2, [r4, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006be4:	32d8      	adds	r2, #216	; 0xd8
 8006be6:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006be8:	32d8      	adds	r2, #216	; 0xd8
 8006bea:	6522      	str	r2, [r4, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006bec:	3218      	adds	r2, #24
 8006bee:	6562      	str	r2, [r4, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006bf0:	2100      	movs	r1, #0
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006bf2:	32d8      	adds	r2, #216	; 0xd8
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006bf4:	f843 1b04 	str.w	r1, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d1fb      	bne.n	8006bf4 <HAL_FDCAN_Init+0x1b4>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006c00:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8006c08:	e73c      	b.n	8006a84 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	6993      	ldr	r3, [r2, #24]
 8006c0e:	f043 0320 	orr.w	r3, r3, #32
 8006c12:	6193      	str	r3, [r2, #24]
 8006c14:	e7b1      	b.n	8006b7a <HAL_FDCAN_Init+0x13a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c16:	6822      	ldr	r2, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c1a:	1e59      	subs	r1, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006c1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006c28:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c2a:	430b      	orrs	r3, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006c2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c2e:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c34:	60d3      	str	r3, [r2, #12]
 8006c36:	e7b4      	b.n	8006ba2 <HAL_FDCAN_Init+0x162>
    return HAL_ERROR;
 8006c38:	2001      	movs	r0, #1
}
 8006c3a:	4770      	bx	lr
 8006c3c:	40006400 	.word	0x40006400
 8006c40:	4000a400 	.word	0x4000a400
 8006c44:	4000a470 	.word	0x4000a470
 8006c48:	4000a4b0 	.word	0x4000a4b0

08006c4c <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006c4c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d005      	beq.n	8006c62 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006c56:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006c58:	f043 0304 	orr.w	r3, r3, #4
 8006c5c:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006c5e:	2001      	movs	r0, #1
}
 8006c60:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006c62:	2302      	movs	r3, #2
 8006c64:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006c68:	6802      	ldr	r2, [r0, #0]
 8006c6a:	6993      	ldr	r3, [r2, #24]
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_OK;
 8006c76:	4618      	mov	r0, r3
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_FDCAN_AddMessageToTxFifoQ>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006c7c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d154      	bne.n	8006d30 <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
{
 8006c86:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006c88:	6804      	ldr	r4, [r0, #0]
 8006c8a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8006c8e:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8006c92:	d005      	beq.n	8006ca0 <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006c94:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c9a:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8006c9c:	2001      	movs	r0, #1
}
 8006c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006ca0:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 8006ca4:	f3c5 4501 	ubfx	r5, r5, #16, #2
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006ca8:	684b      	ldr	r3, [r1, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d138      	bne.n	8006d20 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8006cae:	690c      	ldr	r4, [r1, #16]
 8006cb0:	688b      	ldr	r3, [r1, #8]
 8006cb2:	431c      	orrs	r4, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006cb4:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006cb6:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006cba:	69cb      	ldr	r3, [r1, #28]
 8006cbc:	698e      	ldr	r6, [r1, #24]
 8006cbe:	4333      	orrs	r3, r6
 8006cc0:	694e      	ldr	r6, [r1, #20]
 8006cc2:	4333      	orrs	r3, r6
 8006cc4:	68ce      	ldr	r6, [r1, #12]
 8006cc6:	4333      	orrs	r3, r6
 8006cc8:	6a0e      	ldr	r6, [r1, #32]
 8006cca:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006cce:	eb05 06c5 	add.w	r6, r5, r5, lsl #3
 8006cd2:	6d47      	ldr	r7, [r0, #84]	; 0x54
 8006cd4:	eb07 0ec6 	add.w	lr, r7, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006cd8:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 8006cdc:	f8ce 3004 	str.w	r3, [lr, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006ce0:	89cb      	ldrh	r3, [r1, #14]
 8006ce2:	4c16      	ldr	r4, [pc, #88]	; (8006d3c <HAL_FDCAN_AddMessageToTxFifoQ+0xc0>)
 8006ce4:	5ce3      	ldrb	r3, [r4, r3]
 8006ce6:	b19b      	cbz	r3, 8006d10 <HAL_FDCAN_AddMessageToTxFifoQ+0x94>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006ce8:	eb0e 060c 	add.w	r6, lr, ip
 8006cec:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006cee:	7893      	ldrb	r3, [r2, #2]
 8006cf0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006cf2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006cf6:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006cf8:	433b      	orrs	r3, r7
 8006cfa:	7857      	ldrb	r7, [r2, #1]
 8006cfc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006d00:	60b3      	str	r3, [r6, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006d02:	f10c 0c04 	add.w	ip, ip, #4
 8006d06:	3204      	adds	r2, #4
 8006d08:	89cb      	ldrh	r3, [r1, #14]
 8006d0a:	5ce3      	ldrb	r3, [r4, r3]
 8006d0c:	459c      	cmp	ip, r3
 8006d0e:	d3eb      	bcc.n	8006ce8 <HAL_FDCAN_AddMessageToTxFifoQ+0x6c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006d10:	6802      	ldr	r2, [r0, #0]
 8006d12:	2301      	movs	r3, #1
 8006d14:	40ab      	lsls	r3, r5
 8006d16:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006d1a:	6583      	str	r3, [r0, #88]	; 0x58
    return HAL_OK;
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e7be      	b.n	8006c9e <HAL_FDCAN_AddMessageToTxFifoQ+0x22>
                   pTxHeader->TxFrameType |
 8006d20:	690b      	ldr	r3, [r1, #16]
 8006d22:	680c      	ldr	r4, [r1, #0]
 8006d24:	431c      	orrs	r4, r3
 8006d26:	688b      	ldr	r3, [r1, #8]
 8006d28:	431c      	orrs	r4, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d2a:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8006d2e:	e7c4      	b.n	8006cba <HAL_FDCAN_AddMessageToTxFifoQ+0x3e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006d30:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006d32:	f043 0308 	orr.w	r3, r3, #8
 8006d36:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006d38:	2001      	movs	r0, #1
}
 8006d3a:	4770      	bx	lr
 8006d3c:	0800f744 	.word	0x0800f744

08006d40 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006d40:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
 8006d44:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8006d48:	f1bc 0f02 	cmp.w	ip, #2
 8006d4c:	d177      	bne.n	8006e3e <HAL_FDCAN_GetRxMessage+0xfe>
{
 8006d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006d50:	2940      	cmp	r1, #64	; 0x40
 8006d52:	d00b      	beq.n	8006d6c <HAL_FDCAN_GetRxMessage+0x2c>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006d54:	6804      	ldr	r4, [r0, #0]
 8006d56:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8006d5a:	f015 0f0f 	tst.w	r5, #15
 8006d5e:	d11b      	bne.n	8006d98 <HAL_FDCAN_GetRxMessage+0x58>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006d60:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d66:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006d68:	2001      	movs	r0, #1
 8006d6a:	e063      	b.n	8006e34 <HAL_FDCAN_GetRxMessage+0xf4>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006d6c:	6804      	ldr	r4, [r0, #0]
 8006d6e:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8006d72:	f015 0f0f 	tst.w	r5, #15
 8006d76:	d105      	bne.n	8006d84 <HAL_FDCAN_GetRxMessage+0x44>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006d78:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7e:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006d80:	2001      	movs	r0, #1
 8006d82:	e057      	b.n	8006e34 <HAL_FDCAN_GetRxMessage+0xf4>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006d84:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
 8006d88:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006d8c:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 8006d90:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8006d92:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8006d96:	e008      	b.n	8006daa <HAL_FDCAN_GetRxMessage+0x6a>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006d98:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 8006d9c:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006da0:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 8006da4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8006da6:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006daa:	6834      	ldr	r4, [r6, #0]
 8006dac:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006db0:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006db2:	2c00      	cmp	r4, #0
 8006db4:	d13f      	bne.n	8006e36 <HAL_FDCAN_GetRxMessage+0xf6>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006db6:	6834      	ldr	r4, [r6, #0]
 8006db8:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8006dbc:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006dbe:	6834      	ldr	r4, [r6, #0]
 8006dc0:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8006dc4:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006dc6:	6834      	ldr	r4, [r6, #0]
 8006dc8:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8006dcc:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006dce:	88b4      	ldrh	r4, [r6, #4]
 8006dd0:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006dd2:	6874      	ldr	r4, [r6, #4]
 8006dd4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8006dd8:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006dda:	6875      	ldr	r5, [r6, #4]
 8006ddc:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8006de0:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006de2:	6875      	ldr	r5, [r6, #4]
 8006de4:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8006de8:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006dea:	79f5      	ldrb	r5, [r6, #7]
 8006dec:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8006df0:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006df2:	6875      	ldr	r5, [r6, #4]
 8006df4:	0fed      	lsrs	r5, r5, #31
 8006df6:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006df8:	0c24      	lsrs	r4, r4, #16
 8006dfa:	4d14      	ldr	r5, [pc, #80]	; (8006e4c <HAL_FDCAN_GetRxMessage+0x10c>)
 8006dfc:	5d2c      	ldrb	r4, [r5, r4]
 8006dfe:	b18c      	cbz	r4, 8006e24 <HAL_FDCAN_GetRxMessage+0xe4>
 8006e00:	1df5      	adds	r5, r6, #7
 8006e02:	3b01      	subs	r3, #1
 8006e04:	4c11      	ldr	r4, [pc, #68]	; (8006e4c <HAL_FDCAN_GetRxMessage+0x10c>)
      pRxData[ByteCounter] = pData[ByteCounter];
 8006e06:	46ac      	mov	ip, r5
 8006e08:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 8006e0c:	f803 ef01 	strb.w	lr, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006e10:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 8006e14:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8006e18:	f1ac 0c06 	sub.w	ip, ip, #6
 8006e1c:	ebac 0c06 	sub.w	ip, ip, r6
 8006e20:	45e6      	cmp	lr, ip
 8006e22:	d8f0      	bhi.n	8006e06 <HAL_FDCAN_GetRxMessage+0xc6>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006e24:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006e26:	6803      	ldr	r3, [r0, #0]
 8006e28:	bf0c      	ite	eq
 8006e2a:	f8c3 7094 	streq.w	r7, [r3, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006e2e:	f8c3 709c 	strne.w	r7, [r3, #156]	; 0x9c
    return HAL_OK;
 8006e32:	2000      	movs	r0, #0
}
 8006e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006e36:	6834      	ldr	r4, [r6, #0]
 8006e38:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 8006e3c:	e7be      	b.n	8006dbc <HAL_FDCAN_GetRxMessage+0x7c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006e3e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006e40:	f043 0308 	orr.w	r3, r3, #8
 8006e44:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006e46:	2001      	movs	r0, #1
}
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	0800f744 	.word	0x0800f744

08006e50 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006e50:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d905      	bls.n	8006e68 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006e5c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006e5e:	f043 0302 	orr.w	r3, r3, #2
 8006e62:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006e64:	2001      	movs	r0, #1
}
 8006e66:	4770      	bx	lr
{
 8006e68:	b470      	push	{r4, r5, r6}
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006e6a:	6804      	ldr	r4, [r0, #0]
 8006e6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006e6e:	f011 0607 	ands.w	r6, r1, #7
 8006e72:	d002      	beq.n	8006e7a <HAL_FDCAN_ActivateNotification+0x2a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006e74:	f013 0f01 	tst.w	r3, #1
 8006e78:	d023      	beq.n	8006ec2 <HAL_FDCAN_ActivateNotification+0x72>
 8006e7a:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006e7e:	d002      	beq.n	8006e86 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006e80:	f013 0f02 	tst.w	r3, #2
 8006e84:	d01d      	beq.n	8006ec2 <HAL_FDCAN_ActivateNotification+0x72>
 8006e86:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006e8a:	d002      	beq.n	8006e92 <HAL_FDCAN_ActivateNotification+0x42>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006e8c:	f013 0f04 	tst.w	r3, #4
 8006e90:	d017      	beq.n	8006ec2 <HAL_FDCAN_ActivateNotification+0x72>
 8006e92:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006e96:	d002      	beq.n	8006e9e <HAL_FDCAN_ActivateNotification+0x4e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006e98:	f013 0f08 	tst.w	r3, #8
 8006e9c:	d011      	beq.n	8006ec2 <HAL_FDCAN_ActivateNotification+0x72>
 8006e9e:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006ea2:	d002      	beq.n	8006eaa <HAL_FDCAN_ActivateNotification+0x5a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006ea4:	f013 0f10 	tst.w	r3, #16
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_FDCAN_ActivateNotification+0x72>
 8006eaa:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006eae:	d002      	beq.n	8006eb6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006eb0:	f013 0f20 	tst.w	r3, #32
 8006eb4:	d005      	beq.n	8006ec2 <HAL_FDCAN_ActivateNotification+0x72>
 8006eb6:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006eba:	d006      	beq.n	8006eca <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006ebc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ec0:	d103      	bne.n	8006eca <HAL_FDCAN_ActivateNotification+0x7a>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006ec2:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8006ec4:	f045 0501 	orr.w	r5, r5, #1
 8006ec8:	65e5      	str	r5, [r4, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006eca:	b116      	cbz	r6, 8006ed2 <HAL_FDCAN_ActivateNotification+0x82>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006ecc:	f013 0f01 	tst.w	r3, #1
 8006ed0:	d123      	bne.n	8006f1a <HAL_FDCAN_ActivateNotification+0xca>
 8006ed2:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006ed6:	d002      	beq.n	8006ede <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006ed8:	f013 0f02 	tst.w	r3, #2
 8006edc:	d11d      	bne.n	8006f1a <HAL_FDCAN_ActivateNotification+0xca>
 8006ede:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006ee2:	d002      	beq.n	8006eea <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006ee4:	f013 0f04 	tst.w	r3, #4
 8006ee8:	d117      	bne.n	8006f1a <HAL_FDCAN_ActivateNotification+0xca>
 8006eea:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006eee:	d002      	beq.n	8006ef6 <HAL_FDCAN_ActivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006ef0:	f013 0f08 	tst.w	r3, #8
 8006ef4:	d111      	bne.n	8006f1a <HAL_FDCAN_ActivateNotification+0xca>
 8006ef6:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006efa:	d002      	beq.n	8006f02 <HAL_FDCAN_ActivateNotification+0xb2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006efc:	f013 0f10 	tst.w	r3, #16
 8006f00:	d10b      	bne.n	8006f1a <HAL_FDCAN_ActivateNotification+0xca>
 8006f02:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006f06:	d002      	beq.n	8006f0e <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006f08:	f013 0f20 	tst.w	r3, #32
 8006f0c:	d105      	bne.n	8006f1a <HAL_FDCAN_ActivateNotification+0xca>
 8006f0e:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006f12:	d007      	beq.n	8006f24 <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006f14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f18:	d004      	beq.n	8006f24 <HAL_FDCAN_ActivateNotification+0xd4>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006f1a:	6804      	ldr	r4, [r0, #0]
 8006f1c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006f1e:	f043 0302 	orr.w	r3, r3, #2
 8006f22:	65e3      	str	r3, [r4, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006f24:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006f28:	d005      	beq.n	8006f36 <HAL_FDCAN_ActivateNotification+0xe6>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006f2a:	6804      	ldr	r4, [r0, #0]
 8006f2c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8006f30:	4313      	orrs	r3, r2
 8006f32:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006f36:	f411 7f80 	tst.w	r1, #256	; 0x100
 8006f3a:	d005      	beq.n	8006f48 <HAL_FDCAN_ActivateNotification+0xf8>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006f3c:	6804      	ldr	r4, [r0, #0]
 8006f3e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006f48:	6802      	ldr	r2, [r0, #0]
 8006f4a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6553      	str	r3, [r2, #84]	; 0x54
    return HAL_OK;
 8006f50:	2000      	movs	r0, #0
}
 8006f52:	bc70      	pop	{r4, r5, r6}
 8006f54:	4770      	bx	lr

08006f56 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006f56:	4770      	bx	lr

08006f58 <HAL_FDCAN_RxFifo1Callback>:
}
 8006f58:	4770      	bx	lr

08006f5a <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8006f5a:	4770      	bx	lr

08006f5c <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8006f5c:	4770      	bx	lr

08006f5e <HAL_FDCAN_TxBufferAbortCallback>:
}
 8006f5e:	4770      	bx	lr

08006f60 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8006f60:	4770      	bx	lr

08006f62 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8006f62:	4770      	bx	lr

08006f64 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8006f64:	4770      	bx	lr

08006f66 <HAL_FDCAN_ErrorCallback>:
}
 8006f66:	4770      	bx	lr

08006f68 <HAL_FDCAN_ErrorStatusCallback>:
}
 8006f68:	4770      	bx	lr

08006f6a <HAL_FDCAN_IRQHandler>:
{
 8006f6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f6e:	4604      	mov	r4, r0
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006f70:	6803      	ldr	r3, [r0, #0]
 8006f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006f74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f76:	ea02 0901 	and.w	r9, r2, r1
 8006f7a:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f82:	ea02 0801 	and.w	r8, r2, r1
 8006f86:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006f8a:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f8e:	4017      	ands	r7, r2
 8006f90:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006f94:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006f96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f98:	4015      	ands	r5, r2
 8006f9a:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006f9e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fa2:	4016      	ands	r6, r2
 8006fa4:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006faa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006fae:	d003      	beq.n	8006fb8 <HAL_FDCAN_IRQHandler+0x4e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fb2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006fb6:	d151      	bne.n	800705c <HAL_FDCAN_IRQHandler+0xf2>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fbc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006fc0:	d003      	beq.n	8006fca <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006fc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fc4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006fc8:	d14d      	bne.n	8007066 <HAL_FDCAN_IRQHandler+0xfc>
  if (TxEventFifoITs != 0U)
 8006fca:	f1b9 0f00 	cmp.w	r9, #0
 8006fce:	d156      	bne.n	800707e <HAL_FDCAN_IRQHandler+0x114>
  if (RxFifo0ITs != 0U)
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d15b      	bne.n	800708e <HAL_FDCAN_IRQHandler+0x124>
  if (RxFifo1ITs != 0U)
 8006fd6:	2f00      	cmp	r7, #0
 8006fd8:	d161      	bne.n	800709e <HAL_FDCAN_IRQHandler+0x134>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fde:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006fe2:	d003      	beq.n	8006fec <HAL_FDCAN_IRQHandler+0x82>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fe6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006fea:	d15f      	bne.n	80070ac <HAL_FDCAN_IRQHandler+0x142>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ff0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ff4:	d003      	beq.n	8006ffe <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006ff6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ff8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ffc:	d15d      	bne.n	80070ba <HAL_FDCAN_IRQHandler+0x150>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007002:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8007006:	d003      	beq.n	8007010 <HAL_FDCAN_IRQHandler+0xa6>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800700a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800700e:	d15f      	bne.n	80070d0 <HAL_FDCAN_IRQHandler+0x166>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007014:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007018:	d003      	beq.n	8007022 <HAL_FDCAN_IRQHandler+0xb8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800701a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800701c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007020:	d15d      	bne.n	80070de <HAL_FDCAN_IRQHandler+0x174>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007026:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800702a:	d00a      	beq.n	8007042 <HAL_FDCAN_IRQHandler+0xd8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800702c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800702e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007032:	d006      	beq.n	8007042 <HAL_FDCAN_IRQHandler+0xd8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007034:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007038:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800703a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800703c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007040:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8007042:	2e00      	cmp	r6, #0
 8007044:	d152      	bne.n	80070ec <HAL_FDCAN_IRQHandler+0x182>
  if (Errors != 0U)
 8007046:	b125      	cbz	r5, 8007052 <HAL_FDCAN_IRQHandler+0xe8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 800704c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800704e:	432b      	orrs	r3, r5
 8007050:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007052:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007054:	2b00      	cmp	r3, #0
 8007056:	d150      	bne.n	80070fa <HAL_FDCAN_IRQHandler+0x190>
}
 8007058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800705c:	2240      	movs	r2, #64	; 0x40
 800705e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007060:	f7ff ff80 	bl	8006f64 <HAL_FDCAN_HighPriorityMessageCallback>
 8007064:	e7a8      	b.n	8006fb8 <HAL_FDCAN_IRQHandler+0x4e>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007066:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800706a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800706e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007072:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007074:	4011      	ands	r1, r2
 8007076:	4620      	mov	r0, r4
 8007078:	f7ff ff71 	bl	8006f5e <HAL_FDCAN_TxBufferAbortCallback>
 800707c:	e7a5      	b.n	8006fca <HAL_FDCAN_IRQHandler+0x60>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007084:	4649      	mov	r1, r9
 8007086:	4620      	mov	r0, r4
 8007088:	f7ff ff65 	bl	8006f56 <HAL_FDCAN_TxEventFifoCallback>
 800708c:	e7a0      	b.n	8006fd0 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007094:	4641      	mov	r1, r8
 8007096:	4620      	mov	r0, r4
 8007098:	f7fd f9e8 	bl	800446c <HAL_FDCAN_RxFifo0Callback>
 800709c:	e79b      	b.n	8006fd6 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80070a2:	4639      	mov	r1, r7
 80070a4:	4620      	mov	r0, r4
 80070a6:	f7ff ff57 	bl	8006f58 <HAL_FDCAN_RxFifo1Callback>
 80070aa:	e796      	b.n	8006fda <HAL_FDCAN_IRQHandler+0x70>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80070ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b0:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80070b2:	4620      	mov	r0, r4
 80070b4:	f7ff ff51 	bl	8006f5a <HAL_FDCAN_TxFifoEmptyCallback>
 80070b8:	e798      	b.n	8006fec <HAL_FDCAN_IRQHandler+0x82>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80070ba:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80070be:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80070c2:	2080      	movs	r0, #128	; 0x80
 80070c4:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80070c6:	4011      	ands	r1, r2
 80070c8:	4620      	mov	r0, r4
 80070ca:	f7ff ff47 	bl	8006f5c <HAL_FDCAN_TxBufferCompleteCallback>
 80070ce:	e796      	b.n	8006ffe <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80070d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80070d4:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7ff ff42 	bl	8006f60 <HAL_FDCAN_TimestampWraparoundCallback>
 80070dc:	e798      	b.n	8007010 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80070de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80070e2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80070e4:	4620      	mov	r0, r4
 80070e6:	f7ff ff3c 	bl	8006f62 <HAL_FDCAN_TimeoutOccurredCallback>
 80070ea:	e79a      	b.n	8007022 <HAL_FDCAN_IRQHandler+0xb8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80070f0:	4631      	mov	r1, r6
 80070f2:	4620      	mov	r0, r4
 80070f4:	f7ff ff38 	bl	8006f68 <HAL_FDCAN_ErrorStatusCallback>
 80070f8:	e7a5      	b.n	8007046 <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff ff33 	bl	8006f66 <HAL_FDCAN_ErrorCallback>
}
 8007100:	e7aa      	b.n	8007058 <HAL_FDCAN_IRQHandler+0xee>
	...

08007104 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007104:	b510      	push	{r4, lr}
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  uint32_t *dest_addr = (uint32_t *)Address;
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007106:	460b      	mov	r3, r1

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007108:	4c09      	ldr	r4, [pc, #36]	; (8007130 <FLASH_Program_Fast+0x2c>)
 800710a:	6962      	ldr	r2, [r4, #20]
 800710c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007110:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007112:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007116:	b672      	cpsid	i
 8007118:	f501 7c80 	add.w	ip, r1, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800711c:	1a41      	subs	r1, r0, r1
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 8007122:	3304      	adds	r3, #4
    row_index--;
  }
  while (row_index != 0U);
 8007124:	4563      	cmp	r3, ip
 8007126:	d1fa      	bne.n	800711e <FLASH_Program_Fast+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007128:	f38e 8810 	msr	PRIMASK, lr

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800712c:	bd10      	pop	{r4, pc}
 800712e:	bf00      	nop
 8007130:	40022000 	.word	0x40022000

08007134 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007134:	4b07      	ldr	r3, [pc, #28]	; (8007154 <HAL_FLASH_Unlock+0x20>)
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	db01      	blt.n	8007140 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800713c:	2000      	movs	r0, #0
}
 800713e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <HAL_FLASH_Unlock+0x20>)
 8007142:	4a05      	ldr	r2, [pc, #20]	; (8007158 <HAL_FLASH_Unlock+0x24>)
 8007144:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007146:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800714a:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800714c:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800714e:	0fc0      	lsrs	r0, r0, #31
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40022000 	.word	0x40022000
 8007158:	45670123 	.word	0x45670123

0800715c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800715c:	4b04      	ldr	r3, [pc, #16]	; (8007170 <HAL_FLASH_Lock+0x14>)
 800715e:	695a      	ldr	r2, [r3, #20]
 8007160:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007164:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007166:	6958      	ldr	r0, [r3, #20]
}
 8007168:	43c0      	mvns	r0, r0
 800716a:	0fc0      	lsrs	r0, r0, #31
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40022000 	.word	0x40022000

08007174 <FLASH_WaitForLastOperation>:
{
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8007178:	f7fe fa50 	bl	800561c <HAL_GetTick>
 800717c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800717e:	4e13      	ldr	r6, [pc, #76]	; (80071cc <FLASH_WaitForLastOperation+0x58>)
 8007180:	6933      	ldr	r3, [r6, #16]
 8007182:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007186:	d006      	beq.n	8007196 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007188:	f7fe fa48 	bl	800561c <HAL_GetTick>
 800718c:	1b00      	subs	r0, r0, r4
 800718e:	42a8      	cmp	r0, r5
 8007190:	d9f6      	bls.n	8007180 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 8007192:	2003      	movs	r0, #3
}
 8007194:	bd70      	pop	{r4, r5, r6, pc}
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007196:	4b0d      	ldr	r3, [pc, #52]	; (80071cc <FLASH_WaitForLastOperation+0x58>)
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 800719e:	4013      	ands	r3, r2
 80071a0:	d109      	bne.n	80071b6 <FLASH_WaitForLastOperation+0x42>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80071a2:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <FLASH_WaitForLastOperation+0x58>)
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f013 0f01 	tst.w	r3, #1
 80071aa:	d00c      	beq.n	80071c6 <FLASH_WaitForLastOperation+0x52>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80071ac:	4b07      	ldr	r3, [pc, #28]	; (80071cc <FLASH_WaitForLastOperation+0x58>)
 80071ae:	2201      	movs	r2, #1
 80071b0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80071b2:	2000      	movs	r0, #0
 80071b4:	e7ee      	b.n	8007194 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode |= error;
 80071b6:	4906      	ldr	r1, [pc, #24]	; (80071d0 <FLASH_WaitForLastOperation+0x5c>)
 80071b8:	684a      	ldr	r2, [r1, #4]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 80071be:	4a03      	ldr	r2, [pc, #12]	; (80071cc <FLASH_WaitForLastOperation+0x58>)
 80071c0:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 80071c2:	2001      	movs	r0, #1
 80071c4:	e7e6      	b.n	8007194 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 80071c6:	2000      	movs	r0, #0
 80071c8:	e7e4      	b.n	8007194 <FLASH_WaitForLastOperation+0x20>
 80071ca:	bf00      	nop
 80071cc:	40022000 	.word	0x40022000
 80071d0:	2000055c 	.word	0x2000055c

080071d4 <HAL_FLASH_Program>:
{
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 80071d8:	4a21      	ldr	r2, [pc, #132]	; (8007260 <HAL_FLASH_Program+0x8c>)
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	2a01      	cmp	r2, #1
 80071de:	d03c      	beq.n	800725a <HAL_FLASH_Program+0x86>
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	461f      	mov	r7, r3
 80071e6:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <HAL_FLASH_Program+0x8c>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071f0:	f7ff ffc0 	bl	8007174 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80071f4:	b9e8      	cbnz	r0, 8007232 <HAL_FLASH_Program+0x5e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80071f6:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <HAL_FLASH_Program+0x8c>)
 80071f8:	6058      	str	r0, [r3, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80071fa:	b13c      	cbz	r4, 800720c <HAL_FLASH_Program+0x38>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80071fc:	1e63      	subs	r3, r4, #1
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d91b      	bls.n	800723a <HAL_FLASH_Program+0x66>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007206:	f7ff ffb5 	bl	8007174 <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 800720a:	e012      	b.n	8007232 <HAL_FLASH_Program+0x5e>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800720c:	4a15      	ldr	r2, [pc, #84]	; (8007264 <HAL_FLASH_Program+0x90>)
 800720e:	6953      	ldr	r3, [r2, #20]
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 8007216:	602e      	str	r6, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007218:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800721c:	606f      	str	r7, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800721e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007222:	f7ff ffa7 	bl	8007174 <FLASH_WaitForLastOperation>
      prog_bit = FLASH_CR_PG;
 8007226:	2401      	movs	r4, #1
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007228:	4a0e      	ldr	r2, [pc, #56]	; (8007264 <HAL_FLASH_Program+0x90>)
 800722a:	6953      	ldr	r3, [r2, #20]
 800722c:	ea23 0304 	bic.w	r3, r3, r4
 8007230:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <HAL_FLASH_Program+0x8c>)
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]
}
 8007238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	f7ff ff61 	bl	8007104 <FLASH_Program_Fast>
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007242:	2c02      	cmp	r4, #2
 8007244:	bf14      	ite	ne
 8007246:	2400      	movne	r4, #0
 8007248:	2401      	moveq	r4, #1
 800724a:	04a4      	lsls	r4, r4, #18
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800724c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007250:	f7ff ff90 	bl	8007174 <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 8007254:	2c00      	cmp	r4, #0
 8007256:	d1e7      	bne.n	8007228 <HAL_FLASH_Program+0x54>
 8007258:	e7eb      	b.n	8007232 <HAL_FLASH_Program+0x5e>
  __HAL_LOCK(&pFlash);
 800725a:	2002      	movs	r0, #2
 800725c:	e7ec      	b.n	8007238 <HAL_FLASH_Program+0x64>
 800725e:	bf00      	nop
 8007260:	2000055c 	.word	0x2000055c
 8007264:	40022000 	.word	0x40022000

08007268 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007268:	f010 0f01 	tst.w	r0, #1
 800726c:	d004      	beq.n	8007278 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800726e:	4a05      	ldr	r2, [pc, #20]	; (8007284 <FLASH_MassErase+0x1c>)
 8007270:	6953      	ldr	r3, [r2, #20]
 8007272:	f043 0304 	orr.w	r3, r3, #4
 8007276:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007278:	4a02      	ldr	r2, [pc, #8]	; (8007284 <FLASH_MassErase+0x1c>)
 800727a:	6953      	ldr	r3, [r2, #20]
 800727c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007280:	6153      	str	r3, [r2, #20]
}
 8007282:	4770      	bx	lr
 8007284:	40022000 	.word	0x40022000

08007288 <FLASH_PageErase>:
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007288:	4b08      	ldr	r3, [pc, #32]	; (80072ac <FLASH_PageErase+0x24>)
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	00c0      	lsls	r0, r0, #3
 800728e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8007292:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8007296:	4310      	orrs	r0, r2
 8007298:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800729a:	695a      	ldr	r2, [r3, #20]
 800729c:	f042 0202 	orr.w	r2, r2, #2
 80072a0:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80072a2:	695a      	ldr	r2, [r3, #20]
 80072a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80072a8:	615a      	str	r2, [r3, #20]
}
 80072aa:	4770      	bx	lr
 80072ac:	40022000 	.word	0x40022000

080072b0 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80072b0:	4b17      	ldr	r3, [pc, #92]	; (8007310 <FLASH_FlushCaches+0x60>)
 80072b2:	7f1a      	ldrb	r2, [r3, #28]
 80072b4:	b2d3      	uxtb	r3, r2

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80072b6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80072ba:	2a01      	cmp	r2, #1
 80072bc:	d007      	beq.n	80072ce <FLASH_FlushCaches+0x1e>
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80072be:	3b02      	subs	r3, #2
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d915      	bls.n	80072f2 <FLASH_FlushCaches+0x42>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <FLASH_FlushCaches+0x60>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	771a      	strb	r2, [r3, #28]
}
 80072cc:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80072ce:	4a11      	ldr	r2, [pc, #68]	; (8007314 <FLASH_FlushCaches+0x64>)
 80072d0:	6811      	ldr	r1, [r2, #0]
 80072d2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80072d6:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80072d8:	6811      	ldr	r1, [r2, #0]
 80072da:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80072de:	6011      	str	r1, [r2, #0]
 80072e0:	6811      	ldr	r1, [r2, #0]
 80072e2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80072e6:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072e8:	6811      	ldr	r1, [r2, #0]
 80072ea:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80072ee:	6011      	str	r1, [r2, #0]
 80072f0:	e7e5      	b.n	80072be <FLASH_FlushCaches+0xe>
    __HAL_FLASH_DATA_CACHE_RESET();
 80072f2:	4b08      	ldr	r3, [pc, #32]	; (8007314 <FLASH_FlushCaches+0x64>)
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007302:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	e7db      	b.n	80072c6 <FLASH_FlushCaches+0x16>
 800730e:	bf00      	nop
 8007310:	2000055c 	.word	0x2000055c
 8007314:	40022000 	.word	0x40022000

08007318 <HAL_FLASHEx_Erase>:
{
 8007318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800731c:	4b3b      	ldr	r3, [pc, #236]	; (800740c <HAL_FLASHEx_Erase+0xf4>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d06f      	beq.n	8007404 <HAL_FLASHEx_Erase+0xec>
 8007324:	4604      	mov	r4, r0
 8007326:	460f      	mov	r7, r1
 8007328:	4b38      	ldr	r3, [pc, #224]	; (800740c <HAL_FLASHEx_Erase+0xf4>)
 800732a:	2201      	movs	r2, #1
 800732c:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800732e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007332:	f7ff ff1f 	bl	8007174 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8007336:	4681      	mov	r9, r0
 8007338:	2800      	cmp	r0, #0
 800733a:	d15d      	bne.n	80073f8 <HAL_FLASHEx_Erase+0xe0>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800733c:	4b33      	ldr	r3, [pc, #204]	; (800740c <HAL_FLASHEx_Erase+0xf4>)
 800733e:	2200      	movs	r2, #0
 8007340:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007342:	4b33      	ldr	r3, [pc, #204]	; (8007410 <HAL_FLASHEx_Erase+0xf8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f413 7f00 	tst.w	r3, #512	; 0x200
 800734a:	d032      	beq.n	80073b2 <HAL_FLASHEx_Erase+0x9a>
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800734c:	4b30      	ldr	r3, [pc, #192]	; (8007410 <HAL_FLASHEx_Erase+0xf8>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007354:	d029      	beq.n	80073aa <HAL_FLASHEx_Erase+0x92>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007356:	4a2e      	ldr	r2, [pc, #184]	; (8007410 <HAL_FLASHEx_Erase+0xf8>)
 8007358:	6813      	ldr	r3, [r2, #0]
 800735a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800735e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007360:	4b2a      	ldr	r3, [pc, #168]	; (800740c <HAL_FLASHEx_Erase+0xf4>)
 8007362:	2203      	movs	r2, #3
 8007364:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d034      	beq.n	80073d6 <HAL_FLASHEx_Erase+0xbe>
      *PageError = 0xFFFFFFFFU;
 800736c:	f04f 33ff 	mov.w	r3, #4294967295
 8007370:	603b      	str	r3, [r7, #0]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007372:	68a5      	ldr	r5, [r4, #8]
 8007374:	68e3      	ldr	r3, [r4, #12]
 8007376:	442b      	add	r3, r5
 8007378:	429d      	cmp	r5, r3
 800737a:	d23b      	bcs.n	80073f4 <HAL_FLASHEx_Erase+0xdc>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800737c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007380:	4e23      	ldr	r6, [pc, #140]	; (8007410 <HAL_FLASHEx_Erase+0xf8>)
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007382:	6861      	ldr	r1, [r4, #4]
 8007384:	4628      	mov	r0, r5
 8007386:	f7ff ff7f 	bl	8007288 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800738a:	4640      	mov	r0, r8
 800738c:	f7ff fef2 	bl	8007174 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007390:	6973      	ldr	r3, [r6, #20]
 8007392:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007396:	6173      	str	r3, [r6, #20]
        if (status != HAL_OK)
 8007398:	4681      	mov	r9, r0
 800739a:	bb50      	cbnz	r0, 80073f2 <HAL_FLASHEx_Erase+0xda>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800739c:	3501      	adds	r5, #1
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	68e2      	ldr	r2, [r4, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	42ab      	cmp	r3, r5
 80073a6:	d8ec      	bhi.n	8007382 <HAL_FLASHEx_Erase+0x6a>
 80073a8:	e024      	b.n	80073f4 <HAL_FLASHEx_Erase+0xdc>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80073aa:	4b18      	ldr	r3, [pc, #96]	; (800740c <HAL_FLASHEx_Erase+0xf4>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	771a      	strb	r2, [r3, #28]
 80073b0:	e7d9      	b.n	8007366 <HAL_FLASHEx_Erase+0x4e>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80073b2:	4b17      	ldr	r3, [pc, #92]	; (8007410 <HAL_FLASHEx_Erase+0xf8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80073ba:	d008      	beq.n	80073ce <HAL_FLASHEx_Erase+0xb6>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80073bc:	4a14      	ldr	r2, [pc, #80]	; (8007410 <HAL_FLASHEx_Erase+0xf8>)
 80073be:	6813      	ldr	r3, [r2, #0]
 80073c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073c4:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80073c6:	4b11      	ldr	r3, [pc, #68]	; (800740c <HAL_FLASHEx_Erase+0xf4>)
 80073c8:	2202      	movs	r2, #2
 80073ca:	771a      	strb	r2, [r3, #28]
 80073cc:	e7cb      	b.n	8007366 <HAL_FLASHEx_Erase+0x4e>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80073ce:	4b0f      	ldr	r3, [pc, #60]	; (800740c <HAL_FLASHEx_Erase+0xf4>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	771a      	strb	r2, [r3, #28]
 80073d4:	e7c7      	b.n	8007366 <HAL_FLASHEx_Erase+0x4e>
      FLASH_MassErase(pEraseInit->Banks);
 80073d6:	6860      	ldr	r0, [r4, #4]
 80073d8:	f7ff ff46 	bl	8007268 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073e0:	f7ff fec8 	bl	8007174 <FLASH_WaitForLastOperation>
 80073e4:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80073e6:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <HAL_FLASHEx_Erase+0xf8>)
 80073e8:	6953      	ldr	r3, [r2, #20]
 80073ea:	f023 0304 	bic.w	r3, r3, #4
 80073ee:	6153      	str	r3, [r2, #20]
 80073f0:	e000      	b.n	80073f4 <HAL_FLASHEx_Erase+0xdc>
          *PageError = page_index;
 80073f2:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();
 80073f4:	f7ff ff5c 	bl	80072b0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <HAL_FLASHEx_Erase+0xf4>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
}
 80073fe:	4648      	mov	r0, r9
 8007400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8007404:	f04f 0902 	mov.w	r9, #2
 8007408:	e7f9      	b.n	80073fe <HAL_FLASHEx_Erase+0xe6>
 800740a:	bf00      	nop
 800740c:	2000055c 	.word	0x2000055c
 8007410:	40022000 	.word	0x40022000

08007414 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007418:	f7fe f900 	bl	800561c <HAL_GetTick>
 800741c:	4605      	mov	r5, r0

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800741e:	6822      	ldr	r2, [r4, #0]
 8007420:	6913      	ldr	r3, [r2, #16]
 8007422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007426:	6113      	str	r3, [r2, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007430:	d00b      	beq.n	800744a <FMAC_Reset+0x36>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007432:	f7fe f8f3 	bl	800561c <HAL_GetTick>
 8007436:	1b40      	subs	r0, r0, r5
 8007438:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800743c:	d9f4      	bls.n	8007428 <FMAC_Reset+0x14>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800743e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007444:	6363      	str	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8007446:	2001      	movs	r0, #1
 8007448:	e001      	b.n	800744e <FMAC_Reset+0x3a>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800744a:	2000      	movs	r0, #0
 800744c:	6360      	str	r0, [r4, #52]	; 0x34
  return HAL_OK;
}
 800744e:	bd38      	pop	{r3, r4, r5, pc}

08007450 <HAL_FMAC_Init>:
  if (hfmac == NULL)
 8007450:	b360      	cbz	r0, 80074ac <HAL_FMAC_Init+0x5c>
{
 8007452:	b510      	push	{r4, lr}
 8007454:	4604      	mov	r4, r0
  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007456:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800745a:	b1d3      	cbz	r3, 8007492 <HAL_FMAC_Init+0x42>
  hfmac->FilterParam = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	6063      	str	r3, [r4, #4]
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
 8007460:	60e3      	str	r3, [r4, #12]
  hfmac->pInputSize = NULL;
 8007462:	6163      	str	r3, [r4, #20]
  hfmac->InputCurrentSize = 0U;
 8007464:	8223      	strh	r3, [r4, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007466:	2220      	movs	r2, #32
 8007468:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 800746c:	61a3      	str	r3, [r4, #24]
  hfmac->pOutputSize = NULL;
 800746e:	6223      	str	r3, [r4, #32]
  hfmac->OutputCurrentSize = 0U;
 8007470:	83a3      	strh	r3, [r4, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007472:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007476:	4620      	mov	r0, r4
 8007478:	f7ff ffcc 	bl	8007414 <FMAC_Reset>
 800747c:	2801      	cmp	r0, #1
 800747e:	d00d      	beq.n	800749c <HAL_FMAC_Init+0x4c>
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007480:	2000      	movs	r0, #0
 8007482:	6360      	str	r0, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007484:	2320      	movs	r3, #32
 8007486:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 800748a:	2300      	movs	r3, #0
 800748c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8007490:	bd10      	pop	{r4, pc}
    hfmac->Lock = HAL_UNLOCKED;
 8007492:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    HAL_FMAC_MspInit(hfmac);
 8007496:	f7fd fb45 	bl	8004b24 <HAL_FMAC_MspInit>
 800749a:	e7df      	b.n	800745c <HAL_FMAC_Init+0xc>
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 800749c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800749e:	f043 0310 	orr.w	r3, r3, #16
 80074a2:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80074a4:	23a0      	movs	r3, #160	; 0xa0
 80074a6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    status = HAL_ERROR;
 80074aa:	e7ee      	b.n	800748a <HAL_FMAC_Init+0x3a>
    return HAL_ERROR;
 80074ac:	2001      	movs	r0, #1
}
 80074ae:	4770      	bx	lr

080074b0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80074b0:	680b      	ldr	r3, [r1, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80d6 	beq.w	8007664 <HAL_GPIO_Init+0x1b4>
{
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 80074be:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 80074c2:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80074c4:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074c6:	f04f 0e03 	mov.w	lr, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074ca:	4c67      	ldr	r4, [pc, #412]	; (8007668 <HAL_GPIO_Init+0x1b8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074cc:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007674 <HAL_GPIO_Init+0x1c4>
 80074d0:	e047      	b.n	8007562 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80074d2:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80074d4:	fa0e fa0c 	lsl.w	sl, lr, ip
 80074d8:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074dc:	68cb      	ldr	r3, [r1, #12]
 80074de:	fa03 f30c 	lsl.w	r3, r3, ip
 80074e2:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80074e6:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80074e8:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074ea:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074ee:	684b      	ldr	r3, [r1, #4]
 80074f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80074f4:	4093      	lsls	r3, r2
 80074f6:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 80074f8:	6043      	str	r3, [r0, #4]
 80074fa:	e03d      	b.n	8007578 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074fc:	2700      	movs	r7, #0
 80074fe:	fa07 f70b 	lsl.w	r7, r7, fp
 8007502:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007506:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8007508:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 800750a:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800750e:	684e      	ldr	r6, [r1, #4]
 8007510:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8007514:	bf0c      	ite	eq
 8007516:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8007518:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 800751c:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 800751e:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007520:	684e      	ldr	r6, [r1, #4]
 8007522:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8007526:	bf0c      	ite	eq
 8007528:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800752a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 800752e:	60e3      	str	r3, [r4, #12]

        temp = EXTI->EMR1;
 8007530:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007532:	684e      	ldr	r6, [r1, #4]
 8007534:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8007538:	bf0c      	ite	eq
 800753a:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800753c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 8007540:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007542:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007544:	684e      	ldr	r6, [r1, #4]
 8007546:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 800754a:	bf0c      	ite	eq
 800754c:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 800754e:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 8007552:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 8007554:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007556:	680b      	ldr	r3, [r1, #0]
 8007558:	f10c 0c02 	add.w	ip, ip, #2
 800755c:	fa33 f702 	lsrs.w	r7, r3, r2
 8007560:	d07d      	beq.n	800765e <HAL_GPIO_Init+0x1ae>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007562:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8007566:	ea17 0903 	ands.w	r9, r7, r3
 800756a:	d0f3      	beq.n	8007554 <HAL_GPIO_Init+0xa4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800756c:	684b      	ldr	r3, [r1, #4]
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	3b01      	subs	r3, #1
 8007574:	2b01      	cmp	r3, #1
 8007576:	d9ac      	bls.n	80074d2 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007578:	684b      	ldr	r3, [r1, #4]
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	2b03      	cmp	r3, #3
 8007580:	d022      	beq.n	80075c8 <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 8007582:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007584:	fa0e f30c 	lsl.w	r3, lr, ip
 8007588:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800758c:	688b      	ldr	r3, [r1, #8]
 800758e:	fa03 f30c 	lsl.w	r3, r3, ip
 8007592:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 8007594:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007596:	684b      	ldr	r3, [r1, #4]
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d113      	bne.n	80075c8 <HAL_GPIO_Init+0x118>
        temp = GPIOx->AFR[position >> 3U];
 80075a0:	08d7      	lsrs	r7, r2, #3
 80075a2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80075a6:	f8d7 a020 	ldr.w	sl, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075aa:	f002 0b07 	and.w	fp, r2, #7
 80075ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80075b2:	230f      	movs	r3, #15
 80075b4:	fa03 f30b 	lsl.w	r3, r3, fp
 80075b8:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075bc:	690b      	ldr	r3, [r1, #16]
 80075be:	fa03 f30b 	lsl.w	r3, r3, fp
 80075c2:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80075c6:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 80075c8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075ca:	fa0e f30c 	lsl.w	r3, lr, ip
 80075ce:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075d2:	684b      	ldr	r3, [r1, #4]
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	fa03 f30c 	lsl.w	r3, r3, ip
 80075dc:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80075de:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075e0:	684b      	ldr	r3, [r1, #4]
 80075e2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80075e6:	d0b5      	beq.n	8007554 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075e8:	4e20      	ldr	r6, [pc, #128]	; (800766c <HAL_GPIO_Init+0x1bc>)
 80075ea:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80075ec:	f043 0301 	orr.w	r3, r3, #1
 80075f0:	6633      	str	r3, [r6, #96]	; 0x60
 80075f2:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80075fc:	f022 0303 	bic.w	r3, r2, #3
 8007600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007604:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007608:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800760c:	f002 0b03 	and.w	fp, r2, #3
 8007610:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007614:	270f      	movs	r7, #15
 8007616:	fa07 f70b 	lsl.w	r7, r7, fp
 800761a:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800761e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8007622:	f43f af6b 	beq.w	80074fc <HAL_GPIO_Init+0x4c>
 8007626:	4540      	cmp	r0, r8
 8007628:	d011      	beq.n	800764e <HAL_GPIO_Init+0x19e>
 800762a:	4e11      	ldr	r6, [pc, #68]	; (8007670 <HAL_GPIO_Init+0x1c0>)
 800762c:	42b0      	cmp	r0, r6
 800762e:	d010      	beq.n	8007652 <HAL_GPIO_Init+0x1a2>
 8007630:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007634:	42b0      	cmp	r0, r6
 8007636:	d00e      	beq.n	8007656 <HAL_GPIO_Init+0x1a6>
 8007638:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800763c:	42b0      	cmp	r0, r6
 800763e:	d00c      	beq.n	800765a <HAL_GPIO_Init+0x1aa>
 8007640:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007644:	42b0      	cmp	r0, r6
 8007646:	bf0c      	ite	eq
 8007648:	2705      	moveq	r7, #5
 800764a:	2706      	movne	r7, #6
 800764c:	e757      	b.n	80074fe <HAL_GPIO_Init+0x4e>
 800764e:	462f      	mov	r7, r5
 8007650:	e755      	b.n	80074fe <HAL_GPIO_Init+0x4e>
 8007652:	2702      	movs	r7, #2
 8007654:	e753      	b.n	80074fe <HAL_GPIO_Init+0x4e>
 8007656:	4677      	mov	r7, lr
 8007658:	e751      	b.n	80074fe <HAL_GPIO_Init+0x4e>
 800765a:	2704      	movs	r7, #4
 800765c:	e74f      	b.n	80074fe <HAL_GPIO_Init+0x4e>
  }
}
 800765e:	b003      	add	sp, #12
 8007660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40010400 	.word	0x40010400
 800766c:	40021000 	.word	0x40021000
 8007670:	48000800 	.word	0x48000800
 8007674:	48000400 	.word	0x48000400

08007678 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007678:	b10a      	cbz	r2, 800767e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800767a:	6181      	str	r1, [r0, #24]
 800767c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800767e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007680:	4770      	bx	lr

08007682 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007682:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007684:	ea01 0203 	and.w	r2, r1, r3
 8007688:	ea21 0103 	bic.w	r1, r1, r3
 800768c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007690:	6181      	str	r1, [r0, #24]
}
 8007692:	4770      	bx	lr

08007694 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007694:	2800      	cmp	r0, #0
 8007696:	d13a      	bne.n	800770e <HAL_PWREx_ControlVoltageScaling+0x7a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007698:	4b40      	ldr	r3, [pc, #256]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a4:	d008      	beq.n	80076b8 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076a6:	4a3d      	ldr	r2, [pc, #244]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
 80076a8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80076ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80076b4:	2000      	movs	r0, #0
 80076b6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076b8:	4a38      	ldr	r2, [pc, #224]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
 80076ba:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80076be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80076c6:	6813      	ldr	r3, [r2, #0]
 80076c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80076cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076d0:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80076d2:	4b33      	ldr	r3, [pc, #204]	; (80077a0 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2132      	movs	r1, #50	; 0x32
 80076d8:	fb01 f303 	mul.w	r3, r1, r3
 80076dc:	4931      	ldr	r1, [pc, #196]	; (80077a4 <HAL_PWREx_ControlVoltageScaling+0x110>)
 80076de:	fba1 1303 	umull	r1, r3, r1, r3
 80076e2:	0c9b      	lsrs	r3, r3, #18
 80076e4:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076e6:	6952      	ldr	r2, [r2, #20]
 80076e8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80076ec:	d007      	beq.n	80076fe <HAL_PWREx_ControlVoltageScaling+0x6a>
 80076ee:	492b      	ldr	r1, [pc, #172]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 80076f0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076f2:	694a      	ldr	r2, [r1, #20]
 80076f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80076f8:	d001      	beq.n	80076fe <HAL_PWREx_ControlVoltageScaling+0x6a>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1f8      	bne.n	80076f0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076fe:	4b27      	ldr	r3, [pc, #156]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007700:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 8007702:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007706:	bf0c      	ite	eq
 8007708:	2000      	moveq	r0, #0
 800770a:	2003      	movne	r0, #3
 800770c:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800770e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007712:	d008      	beq.n	8007726 <HAL_PWREx_ControlVoltageScaling+0x92>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007714:	4a21      	ldr	r2, [pc, #132]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007716:	6813      	ldr	r3, [r2, #0]
 8007718:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800771c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007720:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007722:	2000      	movs	r0, #0
}
 8007724:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007726:	4b1d      	ldr	r3, [pc, #116]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800772e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007732:	d008      	beq.n	8007746 <HAL_PWREx_ControlVoltageScaling+0xb2>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007734:	4a19      	ldr	r2, [pc, #100]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007736:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800773a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800773e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8007742:	2000      	movs	r0, #0
 8007744:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007746:	4a15      	ldr	r2, [pc, #84]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007748:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800774c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007754:	6813      	ldr	r3, [r2, #0]
 8007756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800775a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800775e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007760:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2132      	movs	r1, #50	; 0x32
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	490e      	ldr	r1, [pc, #56]	; (80077a4 <HAL_PWREx_ControlVoltageScaling+0x110>)
 800776c:	fba1 1303 	umull	r1, r3, r1, r3
 8007770:	0c9b      	lsrs	r3, r3, #18
 8007772:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007774:	6952      	ldr	r2, [r2, #20]
 8007776:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800777a:	d007      	beq.n	800778c <HAL_PWREx_ControlVoltageScaling+0xf8>
 800777c:	4907      	ldr	r1, [pc, #28]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 800777e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007780:	694a      	ldr	r2, [r1, #20]
 8007782:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007786:	d001      	beq.n	800778c <HAL_PWREx_ControlVoltageScaling+0xf8>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f8      	bne.n	800777e <HAL_PWREx_ControlVoltageScaling+0xea>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800778c:	4b03      	ldr	r3, [pc, #12]	; (800779c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800778e:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 8007790:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007794:	bf0c      	ite	eq
 8007796:	2000      	moveq	r0, #0
 8007798:	2003      	movne	r0, #3
 800779a:	4770      	bx	lr
 800779c:	40007000 	.word	0x40007000
 80077a0:	20000550 	.word	0x20000550
 80077a4:	431bde83 	.word	0x431bde83

080077a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80077a8:	4a02      	ldr	r2, [pc, #8]	; (80077b4 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80077aa:	6893      	ldr	r3, [r2, #8]
 80077ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077b0:	6093      	str	r3, [r2, #8]
}
 80077b2:	4770      	bx	lr
 80077b4:	40007000 	.word	0x40007000

080077b8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f000 8257 	beq.w	8007c6c <HAL_RCC_OscConfig+0x4b4>
{
 80077be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077c6:	6803      	ldr	r3, [r0, #0]
 80077c8:	f013 0f01 	tst.w	r3, #1
 80077cc:	d037      	beq.n	800783e <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ce:	4aa5      	ldr	r2, [pc, #660]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 80077d0:	6893      	ldr	r3, [r2, #8]
 80077d2:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077d6:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80077d8:	2b0c      	cmp	r3, #12
 80077da:	d023      	beq.n	8007824 <HAL_RCC_OscConfig+0x6c>
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d025      	beq.n	800782c <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077e0:	6863      	ldr	r3, [r4, #4]
 80077e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e6:	d04e      	beq.n	8007886 <HAL_RCC_OscConfig+0xce>
 80077e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077ec:	d051      	beq.n	8007892 <HAL_RCC_OscConfig+0xda>
 80077ee:	4b9d      	ldr	r3, [pc, #628]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007800:	6863      	ldr	r3, [r4, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d052      	beq.n	80078ac <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007806:	f7fd ff09 	bl	800561c <HAL_GetTick>
 800780a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800780c:	4e95      	ldr	r6, [pc, #596]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 800780e:	6833      	ldr	r3, [r6, #0]
 8007810:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007814:	d113      	bne.n	800783e <HAL_RCC_OscConfig+0x86>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007816:	f7fd ff01 	bl	800561c <HAL_GetTick>
 800781a:	1b40      	subs	r0, r0, r5
 800781c:	2864      	cmp	r0, #100	; 0x64
 800781e:	d9f6      	bls.n	800780e <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 8007820:	2003      	movs	r0, #3
 8007822:	e22c      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007824:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007828:	2a03      	cmp	r2, #3
 800782a:	d1d9      	bne.n	80077e0 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800782c:	4b8d      	ldr	r3, [pc, #564]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007834:	d003      	beq.n	800783e <HAL_RCC_OscConfig+0x86>
 8007836:	6863      	ldr	r3, [r4, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8219 	beq.w	8007c70 <HAL_RCC_OscConfig+0x4b8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	f013 0f02 	tst.w	r3, #2
 8007844:	d05d      	beq.n	8007902 <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007846:	4a87      	ldr	r2, [pc, #540]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007848:	6893      	ldr	r3, [r2, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800784e:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007850:	2b0c      	cmp	r3, #12
 8007852:	d03a      	beq.n	80078ca <HAL_RCC_OscConfig+0x112>
 8007854:	2b04      	cmp	r3, #4
 8007856:	d03c      	beq.n	80078d2 <HAL_RCC_OscConfig+0x11a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007858:	68e3      	ldr	r3, [r4, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d077      	beq.n	800794e <HAL_RCC_OscConfig+0x196>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800785e:	4a81      	ldr	r2, [pc, #516]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007860:	6813      	ldr	r3, [r2, #0]
 8007862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007868:	f7fd fed8 	bl	800561c <HAL_GetTick>
 800786c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800786e:	4e7d      	ldr	r6, [pc, #500]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007870:	6833      	ldr	r3, [r6, #0]
 8007872:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007876:	d161      	bne.n	800793c <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007878:	f7fd fed0 	bl	800561c <HAL_GetTick>
 800787c:	1b40      	subs	r0, r0, r5
 800787e:	2802      	cmp	r0, #2
 8007880:	d9f6      	bls.n	8007870 <HAL_RCC_OscConfig+0xb8>
          {
            return HAL_TIMEOUT;
 8007882:	2003      	movs	r0, #3
 8007884:	e1fb      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007886:	4a77      	ldr	r2, [pc, #476]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007888:	6813      	ldr	r3, [r2, #0]
 800788a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	e7b6      	b.n	8007800 <HAL_RCC_OscConfig+0x48>
 8007892:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007896:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	e7a9      	b.n	8007800 <HAL_RCC_OscConfig+0x48>
        tickstart = HAL_GetTick();
 80078ac:	f7fd feb6 	bl	800561c <HAL_GetTick>
 80078b0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078b2:	4e6c      	ldr	r6, [pc, #432]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	6833      	ldr	r3, [r6, #0]
 80078b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80078ba:	d0c0      	beq.n	800783e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078bc:	f7fd feae 	bl	800561c <HAL_GetTick>
 80078c0:	1b40      	subs	r0, r0, r5
 80078c2:	2864      	cmp	r0, #100	; 0x64
 80078c4:	d9f6      	bls.n	80078b4 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 80078c6:	2003      	movs	r0, #3
 80078c8:	e1d9      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078ca:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80078ce:	2a02      	cmp	r2, #2
 80078d0:	d1c2      	bne.n	8007858 <HAL_RCC_OscConfig+0xa0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078d2:	4b64      	ldr	r3, [pc, #400]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80078da:	d003      	beq.n	80078e4 <HAL_RCC_OscConfig+0x12c>
 80078dc:	68e3      	ldr	r3, [r4, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 81c8 	beq.w	8007c74 <HAL_RCC_OscConfig+0x4bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e4:	4a5f      	ldr	r2, [pc, #380]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 80078e6:	6853      	ldr	r3, [r2, #4]
 80078e8:	6921      	ldr	r1, [r4, #16]
 80078ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80078f2:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80078f4:	4b5c      	ldr	r3, [pc, #368]	; (8007a68 <HAL_RCC_OscConfig+0x2b0>)
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	f7fd fe4c 	bl	8005594 <HAL_InitTick>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f040 81bb 	bne.w	8007c78 <HAL_RCC_OscConfig+0x4c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	f013 0f08 	tst.w	r3, #8
 8007908:	d04c      	beq.n	80079a4 <HAL_RCC_OscConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800790a:	6963      	ldr	r3, [r4, #20]
 800790c:	b39b      	cbz	r3, 8007976 <HAL_RCC_OscConfig+0x1be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800790e:	4a55      	ldr	r2, [pc, #340]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007910:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007914:	f043 0301 	orr.w	r3, r3, #1
 8007918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791c:	f7fd fe7e 	bl	800561c <HAL_GetTick>
 8007920:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007922:	4e50      	ldr	r6, [pc, #320]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007924:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8007928:	f013 0f02 	tst.w	r3, #2
 800792c:	d13a      	bne.n	80079a4 <HAL_RCC_OscConfig+0x1ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800792e:	f7fd fe75 	bl	800561c <HAL_GetTick>
 8007932:	1b40      	subs	r0, r0, r5
 8007934:	2802      	cmp	r0, #2
 8007936:	d9f5      	bls.n	8007924 <HAL_RCC_OscConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8007938:	2003      	movs	r0, #3
 800793a:	e1a0      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800793c:	4a49      	ldr	r2, [pc, #292]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 800793e:	6853      	ldr	r3, [r2, #4]
 8007940:	6921      	ldr	r1, [r4, #16]
 8007942:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007946:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800794a:	6053      	str	r3, [r2, #4]
 800794c:	e7d9      	b.n	8007902 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 800794e:	4a45      	ldr	r2, [pc, #276]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007950:	6813      	ldr	r3, [r2, #0]
 8007952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007956:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007958:	f7fd fe60 	bl	800561c <HAL_GetTick>
 800795c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800795e:	4e41      	ldr	r6, [pc, #260]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007960:	6833      	ldr	r3, [r6, #0]
 8007962:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007966:	d0cc      	beq.n	8007902 <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007968:	f7fd fe58 	bl	800561c <HAL_GetTick>
 800796c:	1b40      	subs	r0, r0, r5
 800796e:	2802      	cmp	r0, #2
 8007970:	d9f6      	bls.n	8007960 <HAL_RCC_OscConfig+0x1a8>
            return HAL_TIMEOUT;
 8007972:	2003      	movs	r0, #3
 8007974:	e183      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007976:	4a3b      	ldr	r2, [pc, #236]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007978:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007984:	f7fd fe4a 	bl	800561c <HAL_GetTick>
 8007988:	4605      	mov	r5, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800798a:	4e36      	ldr	r6, [pc, #216]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 800798c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8007990:	f013 0f02 	tst.w	r3, #2
 8007994:	d006      	beq.n	80079a4 <HAL_RCC_OscConfig+0x1ec>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007996:	f7fd fe41 	bl	800561c <HAL_GetTick>
 800799a:	1b40      	subs	r0, r0, r5
 800799c:	2802      	cmp	r0, #2
 800799e:	d9f5      	bls.n	800798c <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 80079a0:	2003      	movs	r0, #3
 80079a2:	e16c      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	f013 0f04 	tst.w	r3, #4
 80079aa:	f000 8082 	beq.w	8007ab2 <HAL_RCC_OscConfig+0x2fa>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80079ae:	4b2d      	ldr	r3, [pc, #180]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 80079b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80079b6:	d136      	bne.n	8007a26 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079b8:	4b2a      	ldr	r3, [pc, #168]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 80079ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079c0:	659a      	str	r2, [r3, #88]	; 0x58
 80079c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80079cc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079ce:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <HAL_RCC_OscConfig+0x2b4>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80079d6:	d028      	beq.n	8007a2a <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079d8:	68a3      	ldr	r3, [r4, #8]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d039      	beq.n	8007a52 <HAL_RCC_OscConfig+0x29a>
 80079de:	2b05      	cmp	r3, #5
 80079e0:	d046      	beq.n	8007a70 <HAL_RCC_OscConfig+0x2b8>
 80079e2:	4b20      	ldr	r3, [pc, #128]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80079f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80079f4:	f022 0204 	bic.w	r2, r2, #4
 80079f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079fc:	68a3      	ldr	r3, [r4, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d044      	beq.n	8007a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a02:	f7fd fe0b 	bl	800561c <HAL_GetTick>
 8007a06:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a08:	4f16      	ldr	r7, [pc, #88]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a0a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a12:	f013 0f02 	tst.w	r3, #2
 8007a16:	d14b      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a18:	f7fd fe00 	bl	800561c <HAL_GetTick>
 8007a1c:	1b80      	subs	r0, r0, r6
 8007a1e:	4540      	cmp	r0, r8
 8007a20:	d9f5      	bls.n	8007a0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 8007a22:	2003      	movs	r0, #3
 8007a24:	e12b      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
    FlagStatus       pwrclkchanged = RESET;
 8007a26:	2500      	movs	r5, #0
 8007a28:	e7d1      	b.n	80079ce <HAL_RCC_OscConfig+0x216>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a2a:	4a10      	ldr	r2, [pc, #64]	; (8007a6c <HAL_RCC_OscConfig+0x2b4>)
 8007a2c:	6813      	ldr	r3, [r2, #0]
 8007a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a32:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007a34:	f7fd fdf2 	bl	800561c <HAL_GetTick>
 8007a38:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a3a:	4f0c      	ldr	r7, [pc, #48]	; (8007a6c <HAL_RCC_OscConfig+0x2b4>)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007a42:	d1c9      	bne.n	80079d8 <HAL_RCC_OscConfig+0x220>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a44:	f7fd fdea 	bl	800561c <HAL_GetTick>
 8007a48:	1b80      	subs	r0, r0, r6
 8007a4a:	2802      	cmp	r0, #2
 8007a4c:	d9f6      	bls.n	8007a3c <HAL_RCC_OscConfig+0x284>
          return HAL_TIMEOUT;
 8007a4e:	2003      	movs	r0, #3
 8007a50:	e115      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a52:	4a04      	ldr	r2, [pc, #16]	; (8007a64 <HAL_RCC_OscConfig+0x2ac>)
 8007a54:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a58:	f043 0301 	orr.w	r3, r3, #1
 8007a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a60:	e7cc      	b.n	80079fc <HAL_RCC_OscConfig+0x244>
 8007a62:	bf00      	nop
 8007a64:	40021000 	.word	0x40021000
 8007a68:	20000558 	.word	0x20000558
 8007a6c:	40007000 	.word	0x40007000
 8007a70:	4b8a      	ldr	r3, [pc, #552]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007a72:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007a76:	f042 0204 	orr.w	r2, r2, #4
 8007a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007a7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007a8a:	e7b7      	b.n	80079fc <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a8c:	f7fd fdc6 	bl	800561c <HAL_GetTick>
 8007a90:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a92:	4f82      	ldr	r7, [pc, #520]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a94:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a9c:	f013 0f02 	tst.w	r3, #2
 8007aa0:	d006      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aa2:	f7fd fdbb 	bl	800561c <HAL_GetTick>
 8007aa6:	1b80      	subs	r0, r0, r6
 8007aa8:	4540      	cmp	r0, r8
 8007aaa:	d9f5      	bls.n	8007a98 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8007aac:	2003      	movs	r0, #3
 8007aae:	e0e6      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ab0:	b9e5      	cbnz	r5, 8007aec <HAL_RCC_OscConfig+0x334>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f013 0f20 	tst.w	r3, #32
 8007ab8:	d035      	beq.n	8007b26 <HAL_RCC_OscConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007aba:	69a3      	ldr	r3, [r4, #24]
 8007abc:	b1e3      	cbz	r3, 8007af8 <HAL_RCC_OscConfig+0x340>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007abe:	4a77      	ldr	r2, [pc, #476]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007ac0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007acc:	f7fd fda6 	bl	800561c <HAL_GetTick>
 8007ad0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ad2:	4e72      	ldr	r6, [pc, #456]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007ad4:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8007ad8:	f013 0f02 	tst.w	r3, #2
 8007adc:	d123      	bne.n	8007b26 <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ade:	f7fd fd9d 	bl	800561c <HAL_GetTick>
 8007ae2:	1b40      	subs	r0, r0, r5
 8007ae4:	2802      	cmp	r0, #2
 8007ae6:	d9f5      	bls.n	8007ad4 <HAL_RCC_OscConfig+0x31c>
        {
          return HAL_TIMEOUT;
 8007ae8:	2003      	movs	r0, #3
 8007aea:	e0c8      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aec:	4a6b      	ldr	r2, [pc, #428]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007aee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af4:	6593      	str	r3, [r2, #88]	; 0x58
 8007af6:	e7dc      	b.n	8007ab2 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007af8:	4a68      	ldr	r2, [pc, #416]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007afa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b06:	f7fd fd89 	bl	800561c <HAL_GetTick>
 8007b0a:	4605      	mov	r5, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b0c:	4e63      	ldr	r6, [pc, #396]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007b0e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8007b12:	f013 0f02 	tst.w	r3, #2
 8007b16:	d006      	beq.n	8007b26 <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b18:	f7fd fd80 	bl	800561c <HAL_GetTick>
 8007b1c:	1b40      	subs	r0, r0, r5
 8007b1e:	2802      	cmp	r0, #2
 8007b20:	d9f5      	bls.n	8007b0e <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 8007b22:	2003      	movs	r0, #3
 8007b24:	e0ab      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b26:	69e3      	ldr	r3, [r4, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80a7 	beq.w	8007c7c <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b2e:	4a5b      	ldr	r2, [pc, #364]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007b30:	6892      	ldr	r2, [r2, #8]
 8007b32:	f002 020c 	and.w	r2, r2, #12
 8007b36:	2a0c      	cmp	r2, #12
 8007b38:	d069      	beq.n	8007c0e <HAL_RCC_OscConfig+0x456>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d01d      	beq.n	8007b7a <HAL_RCC_OscConfig+0x3c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b3e:	4b57      	ldr	r3, [pc, #348]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007b46:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	f022 0203 	bic.w	r2, r2, #3
 8007b4e:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8007b56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b5a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5c:	f7fd fd5e 	bl	800561c <HAL_GetTick>
 8007b60:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b62:	4d4e      	ldr	r5, [pc, #312]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007b6a:	d04e      	beq.n	8007c0a <HAL_RCC_OscConfig+0x452>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b6c:	f7fd fd56 	bl	800561c <HAL_GetTick>
 8007b70:	1b00      	subs	r0, r0, r4
 8007b72:	2802      	cmp	r0, #2
 8007b74:	d9f6      	bls.n	8007b64 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8007b76:	2003      	movs	r0, #3
 8007b78:	e081      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 8007b7a:	4a48      	ldr	r2, [pc, #288]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007b7c:	6813      	ldr	r3, [r2, #0]
 8007b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b82:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007b84:	f7fd fd4a 	bl	800561c <HAL_GetTick>
 8007b88:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b8a:	4e44      	ldr	r6, [pc, #272]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007b8c:	6833      	ldr	r3, [r6, #0]
 8007b8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007b92:	d006      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b94:	f7fd fd42 	bl	800561c <HAL_GetTick>
 8007b98:	1b40      	subs	r0, r0, r5
 8007b9a:	2802      	cmp	r0, #2
 8007b9c:	d9f6      	bls.n	8007b8c <HAL_RCC_OscConfig+0x3d4>
            return HAL_TIMEOUT;
 8007b9e:	2003      	movs	r0, #3
 8007ba0:	e06d      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ba2:	4a3e      	ldr	r2, [pc, #248]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007ba4:	68d1      	ldr	r1, [r2, #12]
 8007ba6:	4b3e      	ldr	r3, [pc, #248]	; (8007ca0 <HAL_RCC_OscConfig+0x4e8>)
 8007ba8:	400b      	ands	r3, r1
 8007baa:	6a21      	ldr	r1, [r4, #32]
 8007bac:	430b      	orrs	r3, r1
 8007bae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007bb0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007bb4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007bb6:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8007bba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bbc:	3901      	subs	r1, #1
 8007bbe:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007bc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007bc4:	0849      	lsrs	r1, r1, #1
 8007bc6:	3901      	subs	r1, #1
 8007bc8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8007bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bce:	0849      	lsrs	r1, r1, #1
 8007bd0:	3901      	subs	r1, #1
 8007bd2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8007bd6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8007bd8:	6813      	ldr	r3, [r2, #0]
 8007bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bde:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007be0:	68d3      	ldr	r3, [r2, #12]
 8007be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007be6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8007be8:	f7fd fd18 	bl	800561c <HAL_GetTick>
 8007bec:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bee:	4d2b      	ldr	r5, [pc, #172]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007bf6:	d106      	bne.n	8007c06 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf8:	f7fd fd10 	bl	800561c <HAL_GetTick>
 8007bfc:	1b00      	subs	r0, r0, r4
 8007bfe:	2802      	cmp	r0, #2
 8007c00:	d9f6      	bls.n	8007bf0 <HAL_RCC_OscConfig+0x438>
            return HAL_TIMEOUT;
 8007c02:	2003      	movs	r0, #3
 8007c04:	e03b      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
      }
    }
  }
  }

  return HAL_OK;
 8007c06:	2000      	movs	r0, #0
 8007c08:	e039      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e037      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d038      	beq.n	8007c84 <HAL_RCC_OscConfig+0x4cc>
      temp_pllckcfg = RCC->PLLCFGR;
 8007c12:	4b22      	ldr	r3, [pc, #136]	; (8007c9c <HAL_RCC_OscConfig+0x4e4>)
 8007c14:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c16:	f003 0103 	and.w	r1, r3, #3
 8007c1a:	6a22      	ldr	r2, [r4, #32]
 8007c1c:	4291      	cmp	r1, r2
 8007c1e:	d133      	bne.n	8007c88 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c26:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c28:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007c2c:	d12e      	bne.n	8007c8c <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007c32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c34:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007c38:	d12a      	bne.n	8007c90 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007c3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c40:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007c44:	d126      	bne.n	8007c94 <HAL_RCC_OscConfig+0x4dc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c46:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007c4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007c4c:	0852      	lsrs	r2, r2, #1
 8007c4e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c50:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007c54:	d120      	bne.n	8007c98 <HAL_RCC_OscConfig+0x4e0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007c56:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007c58:	0852      	lsrs	r2, r2, #1
 8007c5a:	3a01      	subs	r2, #1
 8007c5c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c60:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8007c64:	bf14      	ite	ne
 8007c66:	2001      	movne	r0, #1
 8007c68:	2000      	moveq	r0, #0
 8007c6a:	e008      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
 8007c6c:	2001      	movs	r0, #1
}
 8007c6e:	4770      	bx	lr
        return HAL_ERROR;
 8007c70:	2001      	movs	r0, #1
 8007c72:	e004      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 8007c74:	2001      	movs	r0, #1
 8007c76:	e002      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
          return HAL_ERROR;
 8007c78:	2001      	movs	r0, #1
 8007c7a:	e000      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8007c7c:	2000      	movs	r0, #0
}
 8007c7e:	b002      	add	sp, #8
 8007c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8007c84:	2001      	movs	r0, #1
 8007c86:	e7fa      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 8007c88:	2001      	movs	r0, #1
 8007c8a:	e7f8      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	e7f6      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
 8007c90:	2001      	movs	r0, #1
 8007c92:	e7f4      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
 8007c94:	2001      	movs	r0, #1
 8007c96:	e7f2      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
 8007c98:	2001      	movs	r0, #1
 8007c9a:	e7f0      	b.n	8007c7e <HAL_RCC_OscConfig+0x4c6>
 8007c9c:	40021000 	.word	0x40021000
 8007ca0:	019f800c 	.word	0x019f800c

08007ca4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	4604      	mov	r4, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	4616      	mov	r6, r2

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	9302      	str	r3, [sp, #8]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	9304      	str	r3, [sp, #16]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	9303      	str	r3, [sp, #12]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007cba:	f3c0 4003 	ubfx	r0, r0, #16, #4

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8007cbe:	4a0f      	ldr	r2, [pc, #60]	; (8007cfc <HAL_RCC_MCOConfig+0x58>)
 8007cc0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4083      	lsls	r3, r0
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007cca:	b2a3      	uxth	r3, r4
 8007ccc:	9301      	str	r3, [sp, #4]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007cce:	f3c4 5307 	ubfx	r3, r4, #20, #8
 8007cd2:	9305      	str	r3, [sp, #20]
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007cd4:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8007cd8:	a901      	add	r1, sp, #4
 8007cda:	0280      	lsls	r0, r0, #10
 8007cdc:	f7ff fbe8 	bl	80074b0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8007ce0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8007ce4:	d107      	bne.n	8007cf6 <HAL_RCC_MCOConfig+0x52>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007ce6:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <HAL_RCC_MCOConfig+0x58>)
 8007ce8:	6899      	ldr	r1, [r3, #8]
 8007cea:	f021 41fe 	bic.w	r1, r1, #2130706432	; 0x7f000000
 8007cee:	ea41 0206 	orr.w	r2, r1, r6
 8007cf2:	432a      	orrs	r2, r5
 8007cf4:	609a      	str	r2, [r3, #8]
  }
}
 8007cf6:	b006      	add	sp, #24
 8007cf8:	bd70      	pop	{r4, r5, r6, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40021000 	.word	0x40021000

08007d00 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007d00:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 030c 	and.w	r3, r3, #12
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d025      	beq.n	8007d58 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007d0c:	4b14      	ldr	r3, [pc, #80]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f003 030c 	and.w	r3, r3, #12
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d021      	beq.n	8007d5c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007d18:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f003 030c 	and.w	r3, r3, #12
 8007d20:	2b0c      	cmp	r3, #12
 8007d22:	d001      	beq.n	8007d28 <HAL_RCC_GetSysClockFreq+0x28>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007d24:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007d26:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d28:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d2a:	68da      	ldr	r2, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007d32:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d34:	4a0a      	ldr	r2, [pc, #40]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d36:	68d0      	ldr	r0, [r2, #12]
 8007d38:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8007d3c:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x64>)
 8007d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d42:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d46:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007d4e:	3301      	adds	r3, #1
 8007d50:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007d52:	fbb0 f0f3 	udiv	r0, r0, r3
 8007d56:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007d58:	4802      	ldr	r0, [pc, #8]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x64>)
 8007d5a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x64>)
 8007d5e:	4770      	bx	lr
 8007d60:	40021000 	.word	0x40021000
 8007d64:	00f42400 	.word	0x00f42400

08007d68 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f000 80b9 	beq.w	8007ee0 <HAL_RCC_ClockConfig+0x178>
{
 8007d6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d72:	460c      	mov	r4, r1
 8007d74:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d76:	4b84      	ldr	r3, [pc, #528]	; (8007f88 <HAL_RCC_ClockConfig+0x220>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	428b      	cmp	r3, r1
 8007d80:	d20b      	bcs.n	8007d9a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d82:	4a81      	ldr	r2, [pc, #516]	; (8007f88 <HAL_RCC_ClockConfig+0x220>)
 8007d84:	6813      	ldr	r3, [r2, #0]
 8007d86:	f023 030f 	bic.w	r3, r3, #15
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d8e:	6813      	ldr	r3, [r2, #0]
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	428b      	cmp	r3, r1
 8007d96:	f040 80a5 	bne.w	8007ee4 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	f013 0f01 	tst.w	r3, #1
 8007da0:	f000 80a4 	beq.w	8007eec <HAL_RCC_ClockConfig+0x184>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007da4:	686a      	ldr	r2, [r5, #4]
 8007da6:	2a03      	cmp	r2, #3
 8007da8:	d030      	beq.n	8007e0c <HAL_RCC_ClockConfig+0xa4>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007daa:	2a02      	cmp	r2, #2
 8007dac:	d063      	beq.n	8007e76 <HAL_RCC_ClockConfig+0x10e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dae:	4b77      	ldr	r3, [pc, #476]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007db6:	f000 8097 	beq.w	8007ee8 <HAL_RCC_ClockConfig+0x180>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007dba:	f7ff ffa1 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007dbe:	4b74      	ldr	r3, [pc, #464]	; (8007f90 <HAL_RCC_ClockConfig+0x228>)
 8007dc0:	4298      	cmp	r0, r3
 8007dc2:	d965      	bls.n	8007e90 <HAL_RCC_ClockConfig+0x128>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007dc4:	4a71      	ldr	r2, [pc, #452]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007dc6:	6893      	ldr	r3, [r2, #8]
 8007dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007dd2:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dd6:	4a6d      	ldr	r2, [pc, #436]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007dd8:	6893      	ldr	r3, [r2, #8]
 8007dda:	f023 0303 	bic.w	r3, r3, #3
 8007dde:	6869      	ldr	r1, [r5, #4]
 8007de0:	430b      	orrs	r3, r1
 8007de2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8007de4:	f7fd fc1a 	bl	800561c <HAL_GetTick>
 8007de8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dea:	4f68      	ldr	r7, [pc, #416]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dec:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f003 030c 	and.w	r3, r3, #12
 8007df6:	686a      	ldr	r2, [r5, #4]
 8007df8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007dfc:	d04b      	beq.n	8007e96 <HAL_RCC_ClockConfig+0x12e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dfe:	f7fd fc0d 	bl	800561c <HAL_GetTick>
 8007e02:	1b80      	subs	r0, r0, r6
 8007e04:	4540      	cmp	r0, r8
 8007e06:	d9f3      	bls.n	8007df0 <HAL_RCC_ClockConfig+0x88>
        return HAL_TIMEOUT;
 8007e08:	2003      	movs	r0, #3
 8007e0a:	e0ba      	b.n	8007f82 <HAL_RCC_ClockConfig+0x21a>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e0c:	4a5f      	ldr	r2, [pc, #380]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8007e14:	d101      	bne.n	8007e1a <HAL_RCC_ClockConfig+0xb2>
        return HAL_ERROR;
 8007e16:	2001      	movs	r0, #1
 8007e18:	e0b3      	b.n	8007f82 <HAL_RCC_ClockConfig+0x21a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e1a:	495c      	ldr	r1, [pc, #368]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007e1c:	68ca      	ldr	r2, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e1e:	68c9      	ldr	r1, [r1, #12]
 8007e20:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8007e24:	3101      	adds	r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e26:	4a59      	ldr	r2, [pc, #356]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007e28:	68d2      	ldr	r2, [r2, #12]
 8007e2a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8007e2e:	4859      	ldr	r0, [pc, #356]	; (8007f94 <HAL_RCC_ClockConfig+0x22c>)
 8007e30:	fbb0 f1f1 	udiv	r1, r0, r1
 8007e34:	fb01 f202 	mul.w	r2, r1, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e38:	4954      	ldr	r1, [pc, #336]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007e3a:	68c9      	ldr	r1, [r1, #12]
 8007e3c:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8007e40:	3101      	adds	r1, #1
 8007e42:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8007e44:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8007e48:	4951      	ldr	r1, [pc, #324]	; (8007f90 <HAL_RCC_ClockConfig+0x228>)
 8007e4a:	428a      	cmp	r2, r1
 8007e4c:	d91a      	bls.n	8007e84 <HAL_RCC_ClockConfig+0x11c>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007e4e:	4a4f      	ldr	r2, [pc, #316]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007e50:	6892      	ldr	r2, [r2, #8]
 8007e52:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8007e56:	d004      	beq.n	8007e62 <HAL_RCC_ClockConfig+0xfa>
 8007e58:	f013 0902 	ands.w	r9, r3, #2
 8007e5c:	d0bb      	beq.n	8007dd6 <HAL_RCC_ClockConfig+0x6e>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007e5e:	68ab      	ldr	r3, [r5, #8]
 8007e60:	b99b      	cbnz	r3, 8007e8a <HAL_RCC_ClockConfig+0x122>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e62:	4a4a      	ldr	r2, [pc, #296]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007e64:	6893      	ldr	r3, [r2, #8]
 8007e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007e70:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007e74:	e7af      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x6e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e76:	4b45      	ldr	r3, [pc, #276]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007e7e:	d19c      	bne.n	8007dba <HAL_RCC_ClockConfig+0x52>
          return HAL_ERROR;
 8007e80:	2001      	movs	r0, #1
 8007e82:	e07e      	b.n	8007f82 <HAL_RCC_ClockConfig+0x21a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007e84:	f04f 0900 	mov.w	r9, #0
 8007e88:	e7a5      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x6e>
 8007e8a:	f04f 0900 	mov.w	r9, #0
 8007e8e:	e7a2      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x6e>
 8007e90:	f04f 0900 	mov.w	r9, #0
 8007e94:	e79f      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e96:	682b      	ldr	r3, [r5, #0]
 8007e98:	f013 0f02 	tst.w	r3, #2
 8007e9c:	d129      	bne.n	8007ef2 <HAL_RCC_ClockConfig+0x18a>
    if(hpre == RCC_SYSCLK_DIV2)
 8007e9e:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8007ea2:	d140      	bne.n	8007f26 <HAL_RCC_ClockConfig+0x1be>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007ea4:	4a39      	ldr	r2, [pc, #228]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007ea6:	6893      	ldr	r3, [r2, #8]
 8007ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eac:	6093      	str	r3, [r2, #8]
 8007eae:	e03a      	b.n	8007f26 <HAL_RCC_ClockConfig+0x1be>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eb0:	4a35      	ldr	r2, [pc, #212]	; (8007f88 <HAL_RCC_ClockConfig+0x220>)
 8007eb2:	6813      	ldr	r3, [r2, #0]
 8007eb4:	f023 030f 	bic.w	r3, r3, #15
 8007eb8:	4323      	orrs	r3, r4
 8007eba:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007ebc:	f7fd fbae 	bl	800561c <HAL_GetTick>
 8007ec0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ec2:	4f31      	ldr	r7, [pc, #196]	; (8007f88 <HAL_RCC_ClockConfig+0x220>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ec4:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f003 030f 	and.w	r3, r3, #15
 8007ece:	42a3      	cmp	r3, r4
 8007ed0:	d02f      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x1ca>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ed2:	f7fd fba3 	bl	800561c <HAL_GetTick>
 8007ed6:	1b80      	subs	r0, r0, r6
 8007ed8:	4540      	cmp	r0, r8
 8007eda:	d9f5      	bls.n	8007ec8 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007edc:	2003      	movs	r0, #3
 8007ede:	e050      	b.n	8007f82 <HAL_RCC_ClockConfig+0x21a>
    return HAL_ERROR;
 8007ee0:	2001      	movs	r0, #1
}
 8007ee2:	4770      	bx	lr
      return HAL_ERROR;
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	e04c      	b.n	8007f82 <HAL_RCC_ClockConfig+0x21a>
          return HAL_ERROR;
 8007ee8:	2001      	movs	r0, #1
 8007eea:	e04a      	b.n	8007f82 <HAL_RCC_ClockConfig+0x21a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007eec:	f013 0f02 	tst.w	r3, #2
 8007ef0:	d019      	beq.n	8007f26 <HAL_RCC_ClockConfig+0x1be>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef2:	f013 0f04 	tst.w	r3, #4
 8007ef6:	d004      	beq.n	8007f02 <HAL_RCC_ClockConfig+0x19a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ef8:	4a24      	ldr	r2, [pc, #144]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007efa:	6893      	ldr	r3, [r2, #8]
 8007efc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f00:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f02:	682b      	ldr	r3, [r5, #0]
 8007f04:	f013 0f08 	tst.w	r3, #8
 8007f08:	d006      	beq.n	8007f18 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007f0a:	4a20      	ldr	r2, [pc, #128]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007f0c:	6893      	ldr	r3, [r2, #8]
 8007f0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f16:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f18:	4a1c      	ldr	r2, [pc, #112]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007f1a:	6893      	ldr	r3, [r2, #8]
 8007f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f20:	68a9      	ldr	r1, [r5, #8]
 8007f22:	430b      	orrs	r3, r1
 8007f24:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f26:	4b18      	ldr	r3, [pc, #96]	; (8007f88 <HAL_RCC_ClockConfig+0x220>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	d8be      	bhi.n	8007eb0 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f32:	682b      	ldr	r3, [r5, #0]
 8007f34:	f013 0f04 	tst.w	r3, #4
 8007f38:	d006      	beq.n	8007f48 <HAL_RCC_ClockConfig+0x1e0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f3a:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007f3c:	6893      	ldr	r3, [r2, #8]
 8007f3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007f42:	68e9      	ldr	r1, [r5, #12]
 8007f44:	430b      	orrs	r3, r1
 8007f46:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	f013 0f08 	tst.w	r3, #8
 8007f4e:	d007      	beq.n	8007f60 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f50:	4a0e      	ldr	r2, [pc, #56]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007f52:	6893      	ldr	r3, [r2, #8]
 8007f54:	6929      	ldr	r1, [r5, #16]
 8007f56:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007f5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007f5e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f60:	f7ff fece 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 8007f64:	4b09      	ldr	r3, [pc, #36]	; (8007f8c <HAL_RCC_ClockConfig+0x224>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007f6c:	4a0a      	ldr	r2, [pc, #40]	; (8007f98 <HAL_RCC_ClockConfig+0x230>)
 8007f6e:	5cd3      	ldrb	r3, [r2, r3]
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	40d8      	lsrs	r0, r3
 8007f76:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <HAL_RCC_ClockConfig+0x234>)
 8007f78:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <HAL_RCC_ClockConfig+0x238>)
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	f7fd fb09 	bl	8005594 <HAL_InitTick>
}
 8007f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f86:	bf00      	nop
 8007f88:	40022000 	.word	0x40022000
 8007f8c:	40021000 	.word	0x40021000
 8007f90:	04c4b400 	.word	0x04c4b400
 8007f94:	00f42400 	.word	0x00f42400
 8007f98:	0800f72c 	.word	0x0800f72c
 8007f9c:	20000550 	.word	0x20000550
 8007fa0:	20000558 	.word	0x20000558

08007fa4 <HAL_RCC_GetHCLKFreq>:
}
 8007fa4:	4b01      	ldr	r3, [pc, #4]	; (8007fac <HAL_RCC_GetHCLKFreq+0x8>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	20000550 	.word	0x20000550

08007fb0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007fb0:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007fb8:	4a04      	ldr	r2, [pc, #16]	; (8007fcc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007fba:	5cd3      	ldrb	r3, [r2, r3]
 8007fbc:	f003 031f 	and.w	r3, r3, #31
 8007fc0:	4a03      	ldr	r2, [pc, #12]	; (8007fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fc2:	6810      	ldr	r0, [r2, #0]
}
 8007fc4:	40d8      	lsrs	r0, r3
 8007fc6:	4770      	bx	lr
 8007fc8:	40021000 	.word	0x40021000
 8007fcc:	0800f73c 	.word	0x0800f73c
 8007fd0:	20000550 	.word	0x20000550

08007fd4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <HAL_RCC_GetPCLK2Freq+0x18>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007fdc:	4a04      	ldr	r2, [pc, #16]	; (8007ff0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007fde:	5cd3      	ldrb	r3, [r2, r3]
 8007fe0:	f003 031f 	and.w	r3, r3, #31
 8007fe4:	4a03      	ldr	r2, [pc, #12]	; (8007ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fe6:	6810      	ldr	r0, [r2, #0]
}
 8007fe8:	40d8      	lsrs	r0, r3
 8007fea:	4770      	bx	lr
 8007fec:	40021000 	.word	0x40021000
 8007ff0:	0800f73c 	.word	0x0800f73c
 8007ff4:	20000550 	.word	0x20000550

08007ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008000:	6803      	ldr	r3, [r0, #0]
 8008002:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008006:	d059      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008008:	4bab      	ldr	r3, [pc, #684]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800800a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008010:	d125      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008012:	4ba9      	ldr	r3, [pc, #676]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008014:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008016:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800801a:	659a      	str	r2, [r3, #88]	; 0x58
 800801c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008026:	2701      	movs	r7, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008028:	4aa4      	ldr	r2, [pc, #656]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800802a:	6813      	ldr	r3, [r2, #0]
 800802c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008030:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008032:	f7fd faf3 	bl	800561c <HAL_GetTick>
 8008036:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008038:	4ea0      	ldr	r6, [pc, #640]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800803a:	6833      	ldr	r3, [r6, #0]
 800803c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008040:	f040 813e 	bne.w	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008044:	f7fd faea 	bl	800561c <HAL_GetTick>
 8008048:	1b40      	subs	r0, r0, r5
 800804a:	2802      	cmp	r0, #2
 800804c:	d9f5      	bls.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        ret = HAL_TIMEOUT;
 800804e:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008050:	b3af      	cbz	r7, 80080be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008052:	4a99      	ldr	r2, [pc, #612]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008054:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800805a:	6593      	str	r3, [r2, #88]	; 0x58
 800805c:	e02f      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    FlagStatus       pwrclkchanged = RESET;
 800805e:	2700      	movs	r7, #0
 8008060:	e7e2      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x30>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008062:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008064:	429a      	cmp	r2, r3
 8008066:	d012      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x96>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008068:	4a93      	ldr	r2, [pc, #588]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800806a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800806e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008072:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008076:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800807a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800807e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008082:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008086:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800808a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800808e:	f013 0f01 	tst.w	r3, #1
 8008092:	f000 811c 	beq.w	80082ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
        tickstart = HAL_GetTick();
 8008096:	f7fd fac1 	bl	800561c <HAL_GetTick>
 800809a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800809c:	4e86      	ldr	r6, [pc, #536]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800809e:	f241 3888 	movw	r8, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080a2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80080a6:	f013 0f02 	tst.w	r3, #2
 80080aa:	f040 8110 	bne.w	80082ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ae:	f7fd fab5 	bl	800561c <HAL_GetTick>
 80080b2:	1b40      	subs	r0, r0, r5
 80080b4:	4540      	cmp	r0, r8
 80080b6:	d9f4      	bls.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
            ret = HAL_TIMEOUT;
 80080b8:	2003      	movs	r0, #3
 80080ba:	e7c9      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x58>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080bc:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	f013 0f01 	tst.w	r3, #1
 80080c4:	d008      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080c6:	4a7c      	ldr	r2, [pc, #496]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80080c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80080cc:	f023 0303 	bic.w	r3, r3, #3
 80080d0:	6861      	ldr	r1, [r4, #4]
 80080d2:	430b      	orrs	r3, r1
 80080d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	f013 0f02 	tst.w	r3, #2
 80080de:	d008      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080e0:	4a75      	ldr	r2, [pc, #468]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80080e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80080e6:	f023 030c 	bic.w	r3, r3, #12
 80080ea:	68a1      	ldr	r1, [r4, #8]
 80080ec:	430b      	orrs	r3, r1
 80080ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	f013 0f04 	tst.w	r3, #4
 80080f8:	d008      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080fa:	4a6f      	ldr	r2, [pc, #444]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80080fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008100:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008104:	68e1      	ldr	r1, [r4, #12]
 8008106:	430b      	orrs	r3, r1
 8008108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	f013 0f08 	tst.w	r3, #8
 8008112:	d008      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008114:	4a68      	ldr	r2, [pc, #416]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008116:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800811a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800811e:	6921      	ldr	r1, [r4, #16]
 8008120:	430b      	orrs	r3, r1
 8008122:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	f013 0f20 	tst.w	r3, #32
 800812c:	d008      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800812e:	4a62      	ldr	r2, [pc, #392]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008130:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008134:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008138:	6961      	ldr	r1, [r4, #20]
 800813a:	430b      	orrs	r3, r1
 800813c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008146:	d008      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008148:	4a5b      	ldr	r2, [pc, #364]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800814a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800814e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008152:	69a1      	ldr	r1, [r4, #24]
 8008154:	430b      	orrs	r3, r1
 8008156:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008160:	d008      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008162:	4a55      	ldr	r2, [pc, #340]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008164:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008168:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800816c:	69e1      	ldr	r1, [r4, #28]
 800816e:	430b      	orrs	r3, r1
 8008170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	f413 7f80 	tst.w	r3, #256	; 0x100
 800817a:	d008      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800817c:	4a4e      	ldr	r2, [pc, #312]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800817e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008182:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008186:	6a21      	ldr	r1, [r4, #32]
 8008188:	430b      	orrs	r3, r1
 800818a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008194:	d008      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008196:	4a48      	ldr	r2, [pc, #288]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008198:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800819c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80081a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80081a2:	430b      	orrs	r3, r1
 80081a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80081ae:	d00c      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081b0:	4a41      	ldr	r2, [pc, #260]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80081b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80081b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80081ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80081bc:	430b      	orrs	r3, r1
 80081be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80081c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081c8:	d057      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x282>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80081d0:	d00c      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081d2:	4a39      	ldr	r2, [pc, #228]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80081d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80081d8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80081dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80081de:	430b      	orrs	r3, r1
 80081e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80081e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081ea:	d04b      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80081f2:	d00c      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081f4:	4a30      	ldr	r2, [pc, #192]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80081f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80081fa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80081fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008200:	430b      	orrs	r3, r1
 8008202:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008206:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800820c:	d03f      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x296>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008214:	d00c      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008216:	4a28      	ldr	r2, [pc, #160]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008218:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800821c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008222:	430b      	orrs	r3, r1
 8008224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800822a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800822e:	d033      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008236:	d00c      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008238:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800823a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800823e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008242:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008244:	430b      	orrs	r3, r1
 8008246:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800824a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800824c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008250:	d027      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008258:	d00c      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800825a:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800825c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008260:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008264:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008266:	430b      	orrs	r3, r1
 8008268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800826c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800826e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008272:	d01b      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  }

#endif /* QUADSPI */

  return status;
}
 8008274:	b002      	add	sp, #8
 8008276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800827a:	68d3      	ldr	r3, [r2, #12]
 800827c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008280:	60d3      	str	r3, [r2, #12]
 8008282:	e7a2      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008284:	68d3      	ldr	r3, [r2, #12]
 8008286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800828a:	60d3      	str	r3, [r2, #12]
 800828c:	e7ae      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800828e:	68d3      	ldr	r3, [r2, #12]
 8008290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008294:	60d3      	str	r3, [r2, #12]
 8008296:	e7ba      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008298:	68d3      	ldr	r3, [r2, #12]
 800829a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800829e:	60d3      	str	r3, [r2, #12]
 80082a0:	e7c6      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082a2:	68d3      	ldr	r3, [r2, #12]
 80082a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082a8:	60d3      	str	r3, [r2, #12]
 80082aa:	e7d2      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80082ac:	68d3      	ldr	r3, [r2, #12]
 80082ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b2:	60d3      	str	r3, [r2, #12]
  return status;
 80082b4:	e7de      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80082b6:	bf00      	nop
 80082b8:	40021000 	.word	0x40021000
 80082bc:	40007000 	.word	0x40007000
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082c0:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80082c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80082c6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80082ca:	f47f aeca 	bne.w	8008062 <HAL_RCCEx_PeriphCLKConfig+0x6a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082ce:	4a05      	ldr	r2, [pc, #20]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80082d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80082d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80082da:	430b      	orrs	r3, r1
 80082dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082e0:	2000      	movs	r0, #0
 80082e2:	e6b5      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80082e4:	40021000 	.word	0x40021000

080082e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	4681      	mov	r9, r0
 80082f0:	460f      	mov	r7, r1
 80082f2:	4616      	mov	r6, r2
 80082f4:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082f6:	f7fd f991 	bl	800561c <HAL_GetTick>
 80082fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fc:	442b      	add	r3, r5
 80082fe:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8008302:	f7fd f98b 	bl	800561c <HAL_GetTick>
 8008306:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008308:	4b2c      	ldr	r3, [pc, #176]	; (80083bc <SPI_WaitFlagStateUntilTimeout+0xd4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8008310:	fb08 f303 	mul.w	r3, r8, r3
 8008314:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008316:	f8d9 2000 	ldr.w	r2, [r9]
 800831a:	6894      	ldr	r4, [r2, #8]
 800831c:	ea37 0404 	bics.w	r4, r7, r4
 8008320:	bf0c      	ite	eq
 8008322:	2301      	moveq	r3, #1
 8008324:	2300      	movne	r3, #0
 8008326:	42b3      	cmp	r3, r6
 8008328:	d044      	beq.n	80083b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 800832a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800832e:	d0f4      	beq.n	800831a <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008330:	f7fd f974 	bl	800561c <HAL_GetTick>
 8008334:	eba0 000a 	sub.w	r0, r0, sl
 8008338:	4540      	cmp	r0, r8
 800833a:	d207      	bcs.n	800834c <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800833c:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800833e:	2b00      	cmp	r3, #0
 8008340:	bf08      	it	eq
 8008342:	4698      	moveq	r8, r3
      }
      count--;
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	3b01      	subs	r3, #1
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	e7e4      	b.n	8008316 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800834c:	f8d9 2000 	ldr.w	r2, [r9]
 8008350:	6853      	ldr	r3, [r2, #4]
 8008352:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008356:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008358:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800835c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008360:	d00c      	beq.n	800837c <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008362:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8008366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800836a:	d016      	beq.n	800839a <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 800836c:	2301      	movs	r3, #1
 800836e:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008372:	2300      	movs	r3, #0
 8008374:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008378:	2003      	movs	r0, #3
 800837a:	e01c      	b.n	80083b6 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800837c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008384:	d002      	beq.n	800838c <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800838a:	d1ea      	bne.n	8008362 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800838c:	f8d9 2000 	ldr.w	r2, [r9]
 8008390:	6813      	ldr	r3, [r2, #0]
 8008392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	e7e3      	b.n	8008362 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800839a:	f8d9 2000 	ldr.w	r2, [r9]
 800839e:	6813      	ldr	r3, [r2, #0]
 80083a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	f8d9 2000 	ldr.w	r2, [r9]
 80083aa:	6813      	ldr	r3, [r2, #0]
 80083ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	e7db      	b.n	800836c <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 80083b4:	2000      	movs	r0, #0
}
 80083b6:	b002      	add	sp, #8
 80083b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083bc:	20000550 	.word	0x20000550

080083c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	4680      	mov	r8, r0
 80083c8:	460c      	mov	r4, r1
 80083ca:	4615      	mov	r5, r2
 80083cc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083d4:	f7fd f922 	bl	800561c <HAL_GetTick>
 80083d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80083da:	4437      	add	r7, r6
 80083dc:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 80083de:	f7fd f91d 	bl	800561c <HAL_GetTick>
 80083e2:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083e4:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083e8:	4b33      	ldr	r3, [pc, #204]	; (80084b8 <SPI_WaitFifoStateUntilTimeout+0xf8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80083f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80083f4:	0d1b      	lsrs	r3, r3, #20
 80083f6:	fb07 f303 	mul.w	r3, r7, r3
 80083fa:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80083fc:	f8d8 2000 	ldr.w	r2, [r8]
 8008400:	e002      	b.n	8008408 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8008402:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008406:	d111      	bne.n	800842c <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8008408:	6893      	ldr	r3, [r2, #8]
 800840a:	ea03 0c04 	and.w	ip, r3, r4
 800840e:	45ac      	cmp	ip, r5
 8008410:	d04e      	beq.n	80084b0 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008412:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8008416:	d1f4      	bne.n	8008402 <SPI_WaitFifoStateUntilTimeout+0x42>
 8008418:	2d00      	cmp	r5, #0
 800841a:	d1f2      	bne.n	8008402 <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 800841c:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8008426:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800842a:	e7ea      	b.n	8008402 <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800842c:	f7fd f8f6 	bl	800561c <HAL_GetTick>
 8008430:	eba0 0009 	sub.w	r0, r0, r9
 8008434:	42b8      	cmp	r0, r7
 8008436:	d207      	bcs.n	8008448 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008438:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800843a:	2b00      	cmp	r3, #0
 800843c:	bf08      	it	eq
 800843e:	461f      	moveq	r7, r3
      }
      count--;
 8008440:	9b01      	ldr	r3, [sp, #4]
 8008442:	3b01      	subs	r3, #1
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	e7d9      	b.n	80083fc <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008448:	f8d8 2000 	ldr.w	r2, [r8]
 800844c:	6853      	ldr	r3, [r2, #4]
 800844e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008452:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008454:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800845c:	d00c      	beq.n	8008478 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800845e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8008462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008466:	d016      	beq.n	8008496 <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8008468:	2301      	movs	r3, #1
 800846a:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800846e:	2300      	movs	r3, #0
 8008470:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008474:	2003      	movs	r0, #3
 8008476:	e01c      	b.n	80084b2 <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008478:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800847c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008480:	d002      	beq.n	8008488 <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008486:	d1ea      	bne.n	800845e <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8008488:	f8d8 2000 	ldr.w	r2, [r8]
 800848c:	6813      	ldr	r3, [r2, #0]
 800848e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	e7e3      	b.n	800845e <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 8008496:	f8d8 2000 	ldr.w	r2, [r8]
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	f8d8 2000 	ldr.w	r2, [r8]
 80084a6:	6813      	ldr	r3, [r2, #0]
 80084a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	e7db      	b.n	8008468 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 80084b0:	2000      	movs	r0, #0
}
 80084b2:	b002      	add	sp, #8
 80084b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b8:	20000550 	.word	0x20000550

080084bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	4604      	mov	r4, r0
 80084c2:	460d      	mov	r5, r1
 80084c4:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084c6:	9200      	str	r2, [sp, #0]
 80084c8:	460b      	mov	r3, r1
 80084ca:	2200      	movs	r2, #0
 80084cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80084d0:	f7ff ff76 	bl	80083c0 <SPI_WaitFifoStateUntilTimeout>
 80084d4:	b9b0      	cbnz	r0, 8008504 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084d6:	9600      	str	r6, [sp, #0]
 80084d8:	462b      	mov	r3, r5
 80084da:	2200      	movs	r2, #0
 80084dc:	2180      	movs	r1, #128	; 0x80
 80084de:	4620      	mov	r0, r4
 80084e0:	f7ff ff02 	bl	80082e8 <SPI_WaitFlagStateUntilTimeout>
 80084e4:	b9a8      	cbnz	r0, 8008512 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084e6:	9600      	str	r6, [sp, #0]
 80084e8:	462b      	mov	r3, r5
 80084ea:	2200      	movs	r2, #0
 80084ec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80084f0:	4620      	mov	r0, r4
 80084f2:	f7ff ff65 	bl	80083c0 <SPI_WaitFifoStateUntilTimeout>
 80084f6:	b150      	cbz	r0, 800850e <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80084fa:	f043 0320 	orr.w	r3, r3, #32
 80084fe:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008500:	2003      	movs	r0, #3
 8008502:	e004      	b.n	800850e <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008504:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008506:	f043 0320 	orr.w	r3, r3, #32
 800850a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800850c:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800850e:	b002      	add	sp, #8
 8008510:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008512:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008514:	f043 0320 	orr.w	r3, r3, #32
 8008518:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800851a:	2003      	movs	r0, #3
 800851c:	e7f7      	b.n	800850e <SPI_EndRxTxTransaction+0x52>

0800851e <SPI_EndRxTransaction>:
{
 800851e:	b570      	push	{r4, r5, r6, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	4604      	mov	r4, r0
 8008524:	460d      	mov	r5, r1
 8008526:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008528:	6843      	ldr	r3, [r0, #4]
 800852a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800852e:	d00d      	beq.n	800854c <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008530:	9600      	str	r6, [sp, #0]
 8008532:	462b      	mov	r3, r5
 8008534:	2200      	movs	r2, #0
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	4620      	mov	r0, r4
 800853a:	f7ff fed5 	bl	80082e8 <SPI_WaitFlagStateUntilTimeout>
 800853e:	b990      	cbnz	r0, 8008566 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008546:	d014      	beq.n	8008572 <SPI_EndRxTransaction+0x54>
}
 8008548:	b002      	add	sp, #8
 800854a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800854c:	6883      	ldr	r3, [r0, #8]
 800854e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008552:	d002      	beq.n	800855a <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008558:	d1ea      	bne.n	8008530 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800855a:	6822      	ldr	r2, [r4, #0]
 800855c:	6813      	ldr	r3, [r2, #0]
 800855e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e7e4      	b.n	8008530 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008566:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008568:	f043 0320 	orr.w	r3, r3, #32
 800856c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800856e:	2003      	movs	r0, #3
 8008570:	e7ea      	b.n	8008548 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008572:	68a3      	ldr	r3, [r4, #8]
 8008574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008578:	d002      	beq.n	8008580 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800857a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800857e:	d1e3      	bne.n	8008548 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008580:	9600      	str	r6, [sp, #0]
 8008582:	462b      	mov	r3, r5
 8008584:	2200      	movs	r2, #0
 8008586:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff ff18 	bl	80083c0 <SPI_WaitFifoStateUntilTimeout>
 8008590:	2800      	cmp	r0, #0
 8008592:	d0d9      	beq.n	8008548 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008594:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008596:	f043 0320 	orr.w	r3, r3, #32
 800859a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800859c:	2003      	movs	r0, #3
 800859e:	e7d3      	b.n	8008548 <SPI_EndRxTransaction+0x2a>

080085a0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d06d      	beq.n	8008680 <HAL_SPI_Init+0xe0>
{
 80085a4:	b510      	push	{r4, lr}
 80085a6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80085aa:	b933      	cbnz	r3, 80085ba <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085ac:	6843      	ldr	r3, [r0, #4]
 80085ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085b2:	d005      	beq.n	80085c0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085b4:	2300      	movs	r3, #0
 80085b6:	61c3      	str	r3, [r0, #28]
 80085b8:	e002      	b.n	80085c0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085ba:	2300      	movs	r3, #0
 80085bc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085be:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80085c4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d053      	beq.n	8008674 <HAL_SPI_Init+0xd4>
  hspi->State = HAL_SPI_STATE_BUSY;
 80085cc:	2302      	movs	r3, #2
 80085ce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80085d2:	6822      	ldr	r2, [r4, #0]
 80085d4:	6813      	ldr	r3, [r2, #0]
 80085d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085da:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085dc:	68e3      	ldr	r3, [r4, #12]
 80085de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085e2:	bf8c      	ite	hi
 80085e4:	2100      	movhi	r1, #0
 80085e6:	2101      	movls	r1, #1
 80085e8:	0309      	lsls	r1, r1, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80085ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085f2:	bf1c      	itt	ne
 80085f4:	2300      	movne	r3, #0
 80085f6:	62a3      	strne	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085f8:	6822      	ldr	r2, [r4, #0]
 80085fa:	6863      	ldr	r3, [r4, #4]
 80085fc:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008600:	68a0      	ldr	r0, [r4, #8]
 8008602:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8008606:	4303      	orrs	r3, r0
 8008608:	6920      	ldr	r0, [r4, #16]
 800860a:	f000 0002 	and.w	r0, r0, #2
 800860e:	4303      	orrs	r3, r0
 8008610:	6960      	ldr	r0, [r4, #20]
 8008612:	f000 0001 	and.w	r0, r0, #1
 8008616:	4303      	orrs	r3, r0
 8008618:	69a0      	ldr	r0, [r4, #24]
 800861a:	f400 7000 	and.w	r0, r0, #512	; 0x200
 800861e:	4303      	orrs	r3, r0
 8008620:	69e0      	ldr	r0, [r4, #28]
 8008622:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8008626:	4303      	orrs	r3, r0
 8008628:	6a20      	ldr	r0, [r4, #32]
 800862a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800862e:	4303      	orrs	r3, r0
 8008630:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008632:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8008636:	4303      	orrs	r3, r0
 8008638:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800863e:	f003 0310 	and.w	r3, r3, #16
 8008642:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008644:	f000 0008 	and.w	r0, r0, #8
 8008648:	4303      	orrs	r3, r0
 800864a:	68e0      	ldr	r0, [r4, #12]
 800864c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8008650:	4303      	orrs	r3, r0
 8008652:	8b60      	ldrh	r0, [r4, #26]
 8008654:	f000 0004 	and.w	r0, r0, #4
 8008658:	4303      	orrs	r3, r0
 800865a:	430b      	orrs	r3, r1
 800865c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	69d3      	ldr	r3, [r2, #28]
 8008662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008666:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008668:	2000      	movs	r0, #0
 800866a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800866c:	2301      	movs	r3, #1
 800866e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8008672:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8008674:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8008678:	4620      	mov	r0, r4
 800867a:	f7fc fba9 	bl	8004dd0 <HAL_SPI_MspInit>
 800867e:	e7a5      	b.n	80085cc <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8008680:	2001      	movs	r0, #1
}
 8008682:	4770      	bx	lr

08008684 <HAL_SPI_TransmitReceive_DMA>:
{
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8008688:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800868c:	2801      	cmp	r0, #1
 800868e:	f000 80f7 	beq.w	8008880 <HAL_SPI_TransmitReceive_DMA+0x1fc>
 8008692:	2001      	movs	r0, #1
 8008694:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8008698:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800869c:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800869e:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80086a0:	2801      	cmp	r0, #1
 80086a2:	d00a      	beq.n	80086ba <HAL_SPI_TransmitReceive_DMA+0x36>
 80086a4:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80086a8:	f040 80db 	bne.w	8008862 <HAL_SPI_TransmitReceive_DMA+0x1de>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086ac:	68a5      	ldr	r5, [r4, #8]
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	f040 80dc 	bne.w	800886c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80086b4:	2804      	cmp	r0, #4
 80086b6:	f040 80db 	bne.w	8008870 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086ba:	2900      	cmp	r1, #0
 80086bc:	f000 80da 	beq.w	8008874 <HAL_SPI_TransmitReceive_DMA+0x1f0>
 80086c0:	2a00      	cmp	r2, #0
 80086c2:	f000 80d9 	beq.w	8008878 <HAL_SPI_TransmitReceive_DMA+0x1f4>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 80d8 	beq.w	800887c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086cc:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80086d0:	b2c0      	uxtb	r0, r0
 80086d2:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086d4:	bf1c      	itt	ne
 80086d6:	2005      	movne	r0, #5
 80086d8:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086dc:	2000      	movs	r0, #0
 80086de:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80086e0:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80086e2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80086e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086e6:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80086e8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80086ec:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 80086f0:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80086f2:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80086f4:	6822      	ldr	r2, [r4, #0]
 80086f6:	6853      	ldr	r3, [r2, #4]
 80086f8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80086fc:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086fe:	68e3      	ldr	r3, [r4, #12]
 8008700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008704:	d928      	bls.n	8008758 <HAL_SPI_TransmitReceive_DMA+0xd4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008706:	6822      	ldr	r2, [r4, #0]
 8008708:	6853      	ldr	r3, [r2, #4]
 800870a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800870e:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008710:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b04      	cmp	r3, #4
 8008718:	d069      	beq.n	80087ee <HAL_SPI_TransmitReceive_DMA+0x16a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800871a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800871c:	4a59      	ldr	r2, [pc, #356]	; (8008884 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800871e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008720:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008722:	4a59      	ldr	r2, [pc, #356]	; (8008888 <HAL_SPI_TransmitReceive_DMA+0x204>)
 8008724:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008728:	4a58      	ldr	r2, [pc, #352]	; (800888c <HAL_SPI_TransmitReceive_DMA+0x208>)
 800872a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800872c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800872e:	2200      	movs	r2, #0
 8008730:	639a      	str	r2, [r3, #56]	; 0x38
                                 hspi->RxXferCount))
 8008732:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008736:	6821      	ldr	r1, [r4, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800873c:	310c      	adds	r1, #12
 800873e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008740:	f7fe f85c 	bl	80067fc <HAL_DMA_Start_IT>
 8008744:	2800      	cmp	r0, #0
 8008746:	d059      	beq.n	80087fc <HAL_SPI_TransmitReceive_DMA+0x178>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008748:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800874a:	f043 0310 	orr.w	r3, r3, #16
 800874e:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8008750:	2001      	movs	r0, #1
 8008752:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8008756:	e085      	b.n	8008864 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	6853      	ldr	r3, [r2, #4]
 800875c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008760:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008762:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800876a:	d01a      	beq.n	80087a2 <HAL_SPI_TransmitReceive_DMA+0x11e>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800876c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008774:	d1cc      	bne.n	8008710 <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008776:	6822      	ldr	r2, [r4, #0]
 8008778:	6853      	ldr	r3, [r2, #4]
 800877a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800877e:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008780:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008784:	f013 0f01 	tst.w	r3, #1
 8008788:	d124      	bne.n	80087d4 <HAL_SPI_TransmitReceive_DMA+0x150>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800878a:	6822      	ldr	r2, [r4, #0]
 800878c:	6853      	ldr	r3, [r2, #4]
 800878e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008792:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008794:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008798:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800879c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80087a0:	e7b6      	b.n	8008710 <HAL_SPI_TransmitReceive_DMA+0x8c>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80087a2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80087a4:	f013 0f01 	tst.w	r3, #1
 80087a8:	d109      	bne.n	80087be <HAL_SPI_TransmitReceive_DMA+0x13a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80087aa:	6822      	ldr	r2, [r4, #0]
 80087ac:	6853      	ldr	r3, [r2, #4]
 80087ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087b2:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80087b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80087b6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80087ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80087bc:	e7d6      	b.n	800876c <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	6853      	ldr	r3, [r2, #4]
 80087c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087c6:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80087c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80087ca:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80087ce:	3301      	adds	r3, #1
 80087d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80087d2:	e7cb      	b.n	800876c <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80087d4:	6822      	ldr	r2, [r4, #0]
 80087d6:	6853      	ldr	r3, [r2, #4]
 80087d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80087dc:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80087de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80087e2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80087e6:	3301      	adds	r3, #1
 80087e8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80087ec:	e790      	b.n	8008710 <HAL_SPI_TransmitReceive_DMA+0x8c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80087ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087f0:	4a27      	ldr	r2, [pc, #156]	; (8008890 <HAL_SPI_TransmitReceive_DMA+0x20c>)
 80087f2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80087f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087f6:	4a27      	ldr	r2, [pc, #156]	; (8008894 <HAL_SPI_TransmitReceive_DMA+0x210>)
 80087f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80087fa:	e794      	b.n	8008726 <HAL_SPI_TransmitReceive_DMA+0xa2>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	6853      	ldr	r3, [r2, #4]
 8008800:	f043 0301 	orr.w	r3, r3, #1
 8008804:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008806:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008808:	2300      	movs	r3, #0
 800880a:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800880c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800880e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008810:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008812:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008814:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008816:	6393      	str	r3, [r2, #56]	; 0x38
                                 hspi->TxXferCount))
 8008818:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800881a:	6822      	ldr	r2, [r4, #0]
 800881c:	b29b      	uxth	r3, r3
 800881e:	320c      	adds	r2, #12
 8008820:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008822:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008824:	f7fd ffea 	bl	80067fc <HAL_DMA_Start_IT>
 8008828:	b998      	cbnz	r0, 8008852 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008832:	d103      	bne.n	800883c <HAL_SPI_TransmitReceive_DMA+0x1b8>
    __HAL_SPI_ENABLE(hspi);
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800883a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800883c:	6822      	ldr	r2, [r4, #0]
 800883e:	6853      	ldr	r3, [r2, #4]
 8008840:	f043 0320 	orr.w	r3, r3, #32
 8008844:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008846:	6822      	ldr	r2, [r4, #0]
 8008848:	6853      	ldr	r3, [r2, #4]
 800884a:	f043 0302 	orr.w	r3, r3, #2
 800884e:	6053      	str	r3, [r2, #4]
 8008850:	e008      	b.n	8008864 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008852:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008854:	f043 0310 	orr.w	r3, r3, #16
 8008858:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800885a:	2001      	movs	r0, #1
 800885c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8008860:	e000      	b.n	8008864 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_BUSY;
 8008862:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8008864:	2300      	movs	r3, #0
 8008866:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800886a:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 800886c:	2002      	movs	r0, #2
 800886e:	e7f9      	b.n	8008864 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 8008870:	2002      	movs	r0, #2
 8008872:	e7f7      	b.n	8008864 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_ERROR;
 8008874:	2001      	movs	r0, #1
 8008876:	e7f5      	b.n	8008864 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 8008878:	2001      	movs	r0, #1
 800887a:	e7f3      	b.n	8008864 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 800887c:	2001      	movs	r0, #1
 800887e:	e7f1      	b.n	8008864 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  __HAL_LOCK(hspi);
 8008880:	2002      	movs	r0, #2
 8008882:	e7f2      	b.n	800886a <HAL_SPI_TransmitReceive_DMA+0x1e6>
 8008884:	080088a9 	.word	0x080088a9
 8008888:	08008947 	.word	0x08008947
 800888c:	080088b5 	.word	0x080088b5
 8008890:	0800889d 	.word	0x0800889d
 8008894:	080088d7 	.word	0x080088d7

08008898 <HAL_SPI_RxCpltCallback>:
}
 8008898:	4770      	bx	lr

0800889a <HAL_SPI_RxHalfCpltCallback>:
}
 800889a:	4770      	bx	lr

0800889c <SPI_DMAHalfReceiveCplt>:
{
 800889c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800889e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80088a0:	f7ff fffb 	bl	800889a <HAL_SPI_RxHalfCpltCallback>
}
 80088a4:	bd08      	pop	{r3, pc}

080088a6 <HAL_SPI_TxRxHalfCpltCallback>:
}
 80088a6:	4770      	bx	lr

080088a8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80088a8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80088aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80088ac:	f7ff fffb 	bl	80088a6 <HAL_SPI_TxRxHalfCpltCallback>
}
 80088b0:	bd08      	pop	{r3, pc}

080088b2 <HAL_SPI_ErrorCallback>:
}
 80088b2:	4770      	bx	lr

080088b4 <SPI_DMAError>:
{
 80088b4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80088b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80088b8:	6802      	ldr	r2, [r0, #0]
 80088ba:	6853      	ldr	r3, [r2, #4]
 80088bc:	f023 0303 	bic.w	r3, r3, #3
 80088c0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80088c2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80088c4:	f043 0310 	orr.w	r3, r3, #16
 80088c8:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80088d0:	f7ff ffef 	bl	80088b2 <HAL_SPI_ErrorCallback>
}
 80088d4:	bd08      	pop	{r3, pc}

080088d6 <SPI_DMAReceiveCplt>:
{
 80088d6:	b538      	push	{r3, r4, r5, lr}
 80088d8:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80088da:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80088dc:	f7fc fe9e 	bl	800561c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f013 0f20 	tst.w	r3, #32
 80088e8:	d11f      	bne.n	800892a <SPI_DMAReceiveCplt+0x54>
 80088ea:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80088ec:	6821      	ldr	r1, [r4, #0]
 80088ee:	684b      	ldr	r3, [r1, #4]
 80088f0:	f023 0320 	bic.w	r3, r3, #32
 80088f4:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	b91b      	cbnz	r3, 8008902 <SPI_DMAReceiveCplt+0x2c>
 80088fa:	6863      	ldr	r3, [r4, #4]
 80088fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008900:	d017      	beq.n	8008932 <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008902:	6821      	ldr	r1, [r4, #0]
 8008904:	684b      	ldr	r3, [r1, #4]
 8008906:	f023 0301 	bic.w	r3, r3, #1
 800890a:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800890c:	2164      	movs	r1, #100	; 0x64
 800890e:	4620      	mov	r0, r4
 8008910:	f7ff fe05 	bl	800851e <SPI_EndRxTransaction>
 8008914:	b108      	cbz	r0, 800891a <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008916:	2320      	movs	r3, #32
 8008918:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008920:	2301      	movs	r3, #1
 8008922:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008926:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008928:	b94b      	cbnz	r3, 800893e <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 800892a:	4620      	mov	r0, r4
 800892c:	f7ff ffb4 	bl	8008898 <HAL_SPI_RxCpltCallback>
}
 8008930:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008932:	6821      	ldr	r1, [r4, #0]
 8008934:	684b      	ldr	r3, [r1, #4]
 8008936:	f023 0303 	bic.w	r3, r3, #3
 800893a:	604b      	str	r3, [r1, #4]
 800893c:	e7e6      	b.n	800890c <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 800893e:	4620      	mov	r0, r4
 8008940:	f7ff ffb7 	bl	80088b2 <HAL_SPI_ErrorCallback>
      return;
 8008944:	e7f4      	b.n	8008930 <SPI_DMAReceiveCplt+0x5a>

08008946 <SPI_DMATransmitReceiveCplt>:
{
 8008946:	b538      	push	{r3, r4, r5, lr}
 8008948:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800894a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800894c:	f7fc fe66 	bl	800561c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f013 0f20 	tst.w	r3, #32
 8008958:	d11c      	bne.n	8008994 <SPI_DMATransmitReceiveCplt+0x4e>
 800895a:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800895c:	6821      	ldr	r1, [r4, #0]
 800895e:	684b      	ldr	r3, [r1, #4]
 8008960:	f023 0320 	bic.w	r3, r3, #32
 8008964:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008966:	2164      	movs	r1, #100	; 0x64
 8008968:	4620      	mov	r0, r4
 800896a:	f7ff fda7 	bl	80084bc <SPI_EndRxTxTransaction>
 800896e:	b118      	cbz	r0, 8008978 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008970:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008972:	f043 0320 	orr.w	r3, r3, #32
 8008976:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008978:	6822      	ldr	r2, [r4, #0]
 800897a:	6853      	ldr	r3, [r2, #4]
 800897c:	f023 0303 	bic.w	r3, r3, #3
 8008980:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008986:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800898a:	2301      	movs	r3, #1
 800898c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008990:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008992:	b91b      	cbnz	r3, 800899c <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 8008994:	4620      	mov	r0, r4
 8008996:	f7fa fcf3 	bl	8003380 <HAL_SPI_TxRxCpltCallback>
}
 800899a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800899c:	4620      	mov	r0, r4
 800899e:	f7ff ff88 	bl	80088b2 <HAL_SPI_ErrorCallback>
      return;
 80089a2:	e7fa      	b.n	800899a <SPI_DMATransmitReceiveCplt+0x54>

080089a4 <HAL_SPI_IRQHandler>:
{
 80089a4:	b510      	push	{r4, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80089aa:	6802      	ldr	r2, [r0, #0]
 80089ac:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80089ae:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80089b0:	f003 0041 	and.w	r0, r3, #65	; 0x41
 80089b4:	2801      	cmp	r0, #1
 80089b6:	d067      	beq.n	8008a88 <HAL_SPI_IRQHandler+0xe4>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80089b8:	f013 0f02 	tst.w	r3, #2
 80089bc:	d002      	beq.n	80089c4 <HAL_SPI_IRQHandler+0x20>
 80089be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80089c2:	d168      	bne.n	8008a96 <HAL_SPI_IRQHandler+0xf2>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80089c4:	f413 7fb0 	tst.w	r3, #352	; 0x160
 80089c8:	d068      	beq.n	8008a9c <HAL_SPI_IRQHandler+0xf8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80089ca:	f011 0f20 	tst.w	r1, #32
 80089ce:	d065      	beq.n	8008a9c <HAL_SPI_IRQHandler+0xf8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80089d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80089d4:	d00f      	beq.n	80089f6 <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80089d6:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80089da:	b2c0      	uxtb	r0, r0
 80089dc:	2803      	cmp	r0, #3
 80089de:	d05f      	beq.n	8008aa0 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80089e0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80089e2:	f040 0004 	orr.w	r0, r0, #4
 80089e6:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089e8:	2000      	movs	r0, #0
 80089ea:	9000      	str	r0, [sp, #0]
 80089ec:	68d0      	ldr	r0, [r2, #12]
 80089ee:	9000      	str	r0, [sp, #0]
 80089f0:	6890      	ldr	r0, [r2, #8]
 80089f2:	9000      	str	r0, [sp, #0]
 80089f4:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80089f6:	f013 0f20 	tst.w	r3, #32
 80089fa:	d00c      	beq.n	8008a16 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80089fe:	f040 0001 	orr.w	r0, r0, #1
 8008a02:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a04:	2000      	movs	r0, #0
 8008a06:	9002      	str	r0, [sp, #8]
 8008a08:	6890      	ldr	r0, [r2, #8]
 8008a0a:	9002      	str	r0, [sp, #8]
 8008a0c:	6810      	ldr	r0, [r2, #0]
 8008a0e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8008a12:	6010      	str	r0, [r2, #0]
 8008a14:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008a16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a1a:	d009      	beq.n	8008a30 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008a1e:	f043 0308 	orr.w	r3, r3, #8
 8008a22:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a24:	2300      	movs	r3, #0
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	9303      	str	r3, [sp, #12]
 8008a2e:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a30:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d032      	beq.n	8008a9c <HAL_SPI_IRQHandler+0xf8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a36:	6822      	ldr	r2, [r4, #0]
 8008a38:	6853      	ldr	r3, [r2, #4]
 8008a3a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008a3e:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a46:	f011 0f03 	tst.w	r1, #3
 8008a4a:	d031      	beq.n	8008ab0 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008a4c:	6822      	ldr	r2, [r4, #0]
 8008a4e:	6853      	ldr	r3, [r2, #4]
 8008a50:	f023 0303 	bic.w	r3, r3, #3
 8008a54:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8008a56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a58:	b14b      	cbz	r3, 8008a6e <HAL_SPI_IRQHandler+0xca>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a5a:	4a17      	ldr	r2, [pc, #92]	; (8008ab8 <HAL_SPI_IRQHandler+0x114>)
 8008a5c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a60:	f7fd ff4c 	bl	80068fc <HAL_DMA_Abort_IT>
 8008a64:	b118      	cbz	r0, 8008a6e <HAL_SPI_IRQHandler+0xca>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a66:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a6c:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008a6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a70:	b1a3      	cbz	r3, 8008a9c <HAL_SPI_IRQHandler+0xf8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a72:	4a11      	ldr	r2, [pc, #68]	; (8008ab8 <HAL_SPI_IRQHandler+0x114>)
 8008a74:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a78:	f7fd ff40 	bl	80068fc <HAL_DMA_Abort_IT>
 8008a7c:	b170      	cbz	r0, 8008a9c <HAL_SPI_IRQHandler+0xf8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a84:	6623      	str	r3, [r4, #96]	; 0x60
 8008a86:	e009      	b.n	8008a9c <HAL_SPI_IRQHandler+0xf8>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a88:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008a8c:	d094      	beq.n	80089b8 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8008a8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008a90:	4620      	mov	r0, r4
 8008a92:	4798      	blx	r3
    return;
 8008a94:	e002      	b.n	8008a9c <HAL_SPI_IRQHandler+0xf8>
    hspi->TxISR(hspi);
 8008a96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a98:	4620      	mov	r0, r4
 8008a9a:	4798      	blx	r3
}
 8008a9c:	b004      	add	sp, #16
 8008a9e:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	68d3      	ldr	r3, [r2, #12]
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	6893      	ldr	r3, [r2, #8]
 8008aaa:	9301      	str	r3, [sp, #4]
 8008aac:	9b01      	ldr	r3, [sp, #4]
        return;
 8008aae:	e7f5      	b.n	8008a9c <HAL_SPI_IRQHandler+0xf8>
        HAL_SPI_ErrorCallback(hspi);
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f7ff fefe 	bl	80088b2 <HAL_SPI_ErrorCallback>
 8008ab6:	e7f1      	b.n	8008a9c <HAL_SPI_IRQHandler+0xf8>
 8008ab8:	08008abd 	.word	0x08008abd

08008abc <SPI_DMAAbortOnError>:
{
 8008abc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008abe:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008ac6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8008ac8:	f7ff fef3 	bl	80088b2 <HAL_SPI_ErrorCallback>
}
 8008acc:	bd08      	pop	{r3, pc}
	...

08008ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ad0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ad2:	6a03      	ldr	r3, [r0, #32]
 8008ad4:	f023 0301 	bic.w	r3, r3, #1
 8008ad8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008adc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ade:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ae0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ae4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae8:	680c      	ldr	r4, [r1, #0]
 8008aea:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008aec:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008af0:	688c      	ldr	r4, [r1, #8]
 8008af2:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008af4:	4c21      	ldr	r4, [pc, #132]	; (8008b7c <TIM_OC1_SetConfig+0xac>)
 8008af6:	42a0      	cmp	r0, r4
 8008af8:	d02a      	beq.n	8008b50 <TIM_OC1_SetConfig+0x80>
 8008afa:	4d21      	ldr	r5, [pc, #132]	; (8008b80 <TIM_OC1_SetConfig+0xb0>)
 8008afc:	42a8      	cmp	r0, r5
 8008afe:	d019      	beq.n	8008b34 <TIM_OC1_SetConfig+0x64>
 8008b00:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8008b04:	42a0      	cmp	r0, r4
 8008b06:	d01c      	beq.n	8008b42 <TIM_OC1_SetConfig+0x72>
 8008b08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008b0c:	42a0      	cmp	r0, r4
 8008b0e:	d00a      	beq.n	8008b26 <TIM_OC1_SetConfig+0x56>
 8008b10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008b14:	42a0      	cmp	r0, r4
 8008b16:	d129      	bne.n	8008b6c <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b18:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b1c:	68cc      	ldr	r4, [r1, #12]
 8008b1e:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b20:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b24:	e01a      	b.n	8008b5c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b26:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008b2a:	68cc      	ldr	r4, [r1, #12]
 8008b2c:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b2e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b32:	e013      	b.n	8008b5c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b34:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008b38:	68cc      	ldr	r4, [r1, #12]
 8008b3a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b3c:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b40:	e00c      	b.n	8008b5c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b42:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008b46:	68cc      	ldr	r4, [r1, #12]
 8008b48:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b4a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4e:	e005      	b.n	8008b5c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b50:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008b54:	68cc      	ldr	r4, [r1, #12]
 8008b56:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b58:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b5c:	f426 7440 	bic.w	r4, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b60:	694d      	ldr	r5, [r1, #20]
 8008b62:	698e      	ldr	r6, [r1, #24]
 8008b64:	ea45 0c06 	orr.w	ip, r5, r6
 8008b68:	ea4c 0604 	orr.w	r6, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6c:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b6e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b70:	684a      	ldr	r2, [r1, #4]
 8008b72:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b74:	6203      	str	r3, [r0, #32]
}
 8008b76:	bc70      	pop	{r4, r5, r6}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40012c00 	.word	0x40012c00
 8008b80:	40013400 	.word	0x40013400

08008b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b84:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b86:	6a03      	ldr	r3, [r0, #32]
 8008b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b90:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b92:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b98:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b9c:	680c      	ldr	r4, [r1, #0]
 8008b9e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ba4:	688c      	ldr	r4, [r1, #8]
 8008ba6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008baa:	4c18      	ldr	r4, [pc, #96]	; (8008c0c <TIM_OC3_SetConfig+0x88>)
 8008bac:	42a0      	cmp	r0, r4
 8008bae:	d017      	beq.n	8008be0 <TIM_OC3_SetConfig+0x5c>
 8008bb0:	4d17      	ldr	r5, [pc, #92]	; (8008c10 <TIM_OC3_SetConfig+0x8c>)
 8008bb2:	42a8      	cmp	r0, r5
 8008bb4:	d00c      	beq.n	8008bd0 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb6:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8008bba:	42a0      	cmp	r0, r4
 8008bbc:	d017      	beq.n	8008bee <TIM_OC3_SetConfig+0x6a>
 8008bbe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008bc2:	42a0      	cmp	r0, r4
 8008bc4:	d013      	beq.n	8008bee <TIM_OC3_SetConfig+0x6a>
 8008bc6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008bca:	42a0      	cmp	r0, r4
 8008bcc:	d117      	bne.n	8008bfe <TIM_OC3_SetConfig+0x7a>
 8008bce:	e00e      	b.n	8008bee <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bd4:	68cc      	ldr	r4, [r1, #12]
 8008bd6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bde:	e006      	b.n	8008bee <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8008be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008be4:	68cc      	ldr	r4, [r1, #12]
 8008be6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bee:	f426 5440 	bic.w	r4, r6, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bf2:	694d      	ldr	r5, [r1, #20]
 8008bf4:	698e      	ldr	r6, [r1, #24]
 8008bf6:	ea45 0c06 	orr.w	ip, r5, r6
 8008bfa:	ea44 160c 	orr.w	r6, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfe:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c00:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c02:	684a      	ldr	r2, [r1, #4]
 8008c04:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c06:	6203      	str	r3, [r0, #32]
}
 8008c08:	bc70      	pop	{r4, r5, r6}
 8008c0a:	4770      	bx	lr
 8008c0c:	40012c00 	.word	0x40012c00
 8008c10:	40013400 	.word	0x40013400

08008c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c14:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c16:	6a03      	ldr	r3, [r0, #32]
 8008c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c1e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c20:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c22:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c24:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008c28:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c2c:	680c      	ldr	r4, [r1, #0]
 8008c2e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c36:	688c      	ldr	r4, [r1, #8]
 8008c38:	ea43 3304 	orr.w	r3, r3, r4, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008c3c:	4c18      	ldr	r4, [pc, #96]	; (8008ca0 <TIM_OC4_SetConfig+0x8c>)
 8008c3e:	42a0      	cmp	r0, r4
 8008c40:	d017      	beq.n	8008c72 <TIM_OC4_SetConfig+0x5e>
 8008c42:	4d18      	ldr	r5, [pc, #96]	; (8008ca4 <TIM_OC4_SetConfig+0x90>)
 8008c44:	42a8      	cmp	r0, r5
 8008c46:	d00c      	beq.n	8008c62 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c48:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8008c4c:	42a0      	cmp	r0, r4
 8008c4e:	d017      	beq.n	8008c80 <TIM_OC4_SetConfig+0x6c>
 8008c50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c54:	42a0      	cmp	r0, r4
 8008c56:	d013      	beq.n	8008c80 <TIM_OC4_SetConfig+0x6c>
 8008c58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c5c:	42a0      	cmp	r0, r4
 8008c5e:	d117      	bne.n	8008c90 <TIM_OC4_SetConfig+0x7c>
 8008c60:	e00e      	b.n	8008c80 <TIM_OC4_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC4NP;
 8008c62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008c66:	68cc      	ldr	r4, [r1, #12]
 8008c68:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c70:	e006      	b.n	8008c80 <TIM_OC4_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC4NP;
 8008c72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008c76:	68cc      	ldr	r4, [r1, #12]
 8008c78:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c80:	f426 4440 	bic.w	r4, r6, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c84:	694d      	ldr	r5, [r1, #20]
 8008c86:	698e      	ldr	r6, [r1, #24]
 8008c88:	ea45 0c06 	orr.w	ip, r5, r6
 8008c8c:	ea44 168c 	orr.w	r6, r4, ip, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c90:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c92:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c94:	684a      	ldr	r2, [r1, #4]
 8008c96:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c98:	6203      	str	r3, [r0, #32]
}
 8008c9a:	bc70      	pop	{r4, r5, r6}
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	40012c00 	.word	0x40012c00
 8008ca4:	40013400 	.word	0x40013400

08008ca8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ca8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008caa:	6a03      	ldr	r3, [r0, #32]
 8008cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cb0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cb6:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008cbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cc0:	680d      	ldr	r5, [r1, #0]
 8008cc2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cc8:	688d      	ldr	r5, [r1, #8]
 8008cca:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cce:	4d0f      	ldr	r5, [pc, #60]	; (8008d0c <TIM_OC5_SetConfig+0x64>)
 8008cd0:	42a8      	cmp	r0, r5
 8008cd2:	d00f      	beq.n	8008cf4 <TIM_OC5_SetConfig+0x4c>
 8008cd4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008cd8:	42a8      	cmp	r0, r5
 8008cda:	d00b      	beq.n	8008cf4 <TIM_OC5_SetConfig+0x4c>
 8008cdc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008ce0:	42a8      	cmp	r0, r5
 8008ce2:	d007      	beq.n	8008cf4 <TIM_OC5_SetConfig+0x4c>
 8008ce4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ce8:	42a8      	cmp	r0, r5
 8008cea:	d003      	beq.n	8008cf4 <TIM_OC5_SetConfig+0x4c>
 8008cec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008cf0:	42a8      	cmp	r0, r5
 8008cf2:	d104      	bne.n	8008cfe <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cf4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008cf8:	694d      	ldr	r5, [r1, #20]
 8008cfa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d00:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d02:	684a      	ldr	r2, [r1, #4]
 8008d04:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d06:	6203      	str	r3, [r0, #32]
}
 8008d08:	bc30      	pop	{r4, r5}
 8008d0a:	4770      	bx	lr
 8008d0c:	40012c00 	.word	0x40012c00

08008d10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d10:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d12:	6a03      	ldr	r3, [r0, #32]
 8008d14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d1c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d1e:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d20:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008d24:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d28:	680d      	ldr	r5, [r1, #0]
 8008d2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d32:	688d      	ldr	r5, [r1, #8]
 8008d34:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d38:	4d0f      	ldr	r5, [pc, #60]	; (8008d78 <TIM_OC6_SetConfig+0x68>)
 8008d3a:	42a8      	cmp	r0, r5
 8008d3c:	d00f      	beq.n	8008d5e <TIM_OC6_SetConfig+0x4e>
 8008d3e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008d42:	42a8      	cmp	r0, r5
 8008d44:	d00b      	beq.n	8008d5e <TIM_OC6_SetConfig+0x4e>
 8008d46:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008d4a:	42a8      	cmp	r0, r5
 8008d4c:	d007      	beq.n	8008d5e <TIM_OC6_SetConfig+0x4e>
 8008d4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008d52:	42a8      	cmp	r0, r5
 8008d54:	d003      	beq.n	8008d5e <TIM_OC6_SetConfig+0x4e>
 8008d56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008d5a:	42a8      	cmp	r0, r5
 8008d5c:	d104      	bne.n	8008d68 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d5e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d62:	694d      	ldr	r5, [r1, #20]
 8008d64:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d68:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d6a:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d6c:	684a      	ldr	r2, [r1, #4]
 8008d6e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d70:	6203      	str	r3, [r0, #32]
}
 8008d72:	bc30      	pop	{r4, r5}
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40012c00 	.word	0x40012c00

08008d7c <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8008d7c:	6803      	ldr	r3, [r0, #0]
 8008d7e:	6a19      	ldr	r1, [r3, #32]
 8008d80:	f241 1211 	movw	r2, #4369	; 0x1111
 8008d84:	4211      	tst	r1, r2
 8008d86:	d108      	bne.n	8008d9a <HAL_TIM_Base_Stop+0x1e>
 8008d88:	6a19      	ldr	r1, [r3, #32]
 8008d8a:	f244 4244 	movw	r2, #17476	; 0x4444
 8008d8e:	4211      	tst	r1, r2
 8008d90:	d103      	bne.n	8008d9a <HAL_TIM_Base_Stop+0x1e>
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	f022 0201 	bic.w	r2, r2, #1
 8008d98:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8008da0:	2000      	movs	r0, #0
 8008da2:	4770      	bx	lr

08008da4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008da4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d132      	bne.n	8008e14 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8008dae:	2302      	movs	r3, #2
 8008db0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008db4:	6802      	ldr	r2, [r0, #0]
 8008db6:	68d3      	ldr	r3, [r2, #12]
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dbe:	6803      	ldr	r3, [r0, #0]
 8008dc0:	4a17      	ldr	r2, [pc, #92]	; (8008e20 <HAL_TIM_Base_Start_IT+0x7c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d018      	beq.n	8008df8 <HAL_TIM_Base_Start_IT+0x54>
 8008dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dca:	d015      	beq.n	8008df8 <HAL_TIM_Base_Start_IT+0x54>
 8008dcc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d011      	beq.n	8008df8 <HAL_TIM_Base_Start_IT+0x54>
 8008dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d00d      	beq.n	8008df8 <HAL_TIM_Base_Start_IT+0x54>
 8008ddc:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d009      	beq.n	8008df8 <HAL_TIM_Base_Start_IT+0x54>
 8008de4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d005      	beq.n	8008df8 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	f042 0201 	orr.w	r2, r2, #1
 8008df2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008df4:	2000      	movs	r0, #0
 8008df6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008df8:	6899      	ldr	r1, [r3, #8]
 8008dfa:	4a0a      	ldr	r2, [pc, #40]	; (8008e24 <HAL_TIM_Base_Start_IT+0x80>)
 8008dfc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dfe:	2a06      	cmp	r2, #6
 8008e00:	d00a      	beq.n	8008e18 <HAL_TIM_Base_Start_IT+0x74>
 8008e02:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008e06:	d009      	beq.n	8008e1c <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	f042 0201 	orr.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008e10:	2000      	movs	r0, #0
 8008e12:	4770      	bx	lr
    return HAL_ERROR;
 8008e14:	2001      	movs	r0, #1
 8008e16:	4770      	bx	lr
  return HAL_OK;
 8008e18:	2000      	movs	r0, #0
 8008e1a:	4770      	bx	lr
 8008e1c:	2000      	movs	r0, #0
}
 8008e1e:	4770      	bx	lr
 8008e20:	40012c00 	.word	0x40012c00
 8008e24:	00010007 	.word	0x00010007

08008e28 <HAL_TIM_PWM_MspInit>:
}
 8008e28:	4770      	bx	lr

08008e2a <HAL_TIM_OC_DelayElapsedCallback>:
}
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIM_IC_CaptureCallback>:
}
 8008e2c:	4770      	bx	lr

08008e2e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008e2e:	4770      	bx	lr

08008e30 <HAL_TIM_TriggerCallback>:
}
 8008e30:	4770      	bx	lr

08008e32 <HAL_TIM_IRQHandler>:
{
 8008e32:	b510      	push	{r4, lr}
 8008e34:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e36:	6803      	ldr	r3, [r0, #0]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	f012 0f02 	tst.w	r2, #2
 8008e3e:	d012      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	f012 0f02 	tst.w	r2, #2
 8008e46:	d00e      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e48:	f06f 0202 	mvn.w	r2, #2
 8008e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e52:	6803      	ldr	r3, [r0, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	f013 0f03 	tst.w	r3, #3
 8008e5a:	f000 809f 	beq.w	8008f9c <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	f7ff ffe5 	bl	8008e2c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e62:	2300      	movs	r3, #0
 8008e64:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	691a      	ldr	r2, [r3, #16]
 8008e6a:	f012 0f04 	tst.w	r2, #4
 8008e6e:	d013      	beq.n	8008e98 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	f012 0f04 	tst.w	r2, #4
 8008e76:	d00f      	beq.n	8008e98 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e78:	f06f 0204 	mvn.w	r2, #4
 8008e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e7e:	2302      	movs	r3, #2
 8008e80:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008e8a:	f000 808d 	beq.w	8008fa8 <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7ff ffcc 	bl	8008e2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e94:	2300      	movs	r3, #0
 8008e96:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	f012 0f08 	tst.w	r2, #8
 8008ea0:	d012      	beq.n	8008ec8 <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	f012 0f08 	tst.w	r2, #8
 8008ea8:	d00e      	beq.n	8008ec8 <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008eaa:	f06f 0208 	mvn.w	r2, #8
 8008eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	f013 0f03 	tst.w	r3, #3
 8008ebc:	d07b      	beq.n	8008fb6 <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f7ff ffb4 	bl	8008e2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	f012 0f10 	tst.w	r2, #16
 8008ed0:	d012      	beq.n	8008ef8 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	f012 0f10 	tst.w	r2, #16
 8008ed8:	d00e      	beq.n	8008ef8 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008eda:	f06f 0210 	mvn.w	r2, #16
 8008ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ee0:	2308      	movs	r3, #8
 8008ee2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008eec:	d06a      	beq.n	8008fc4 <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff ff9c 	bl	8008e2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	691a      	ldr	r2, [r3, #16]
 8008efc:	f012 0f01 	tst.w	r2, #1
 8008f00:	d003      	beq.n	8008f0a <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	f012 0f01 	tst.w	r2, #1
 8008f08:	d163      	bne.n	8008fd2 <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	691a      	ldr	r2, [r3, #16]
 8008f0e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008f12:	d003      	beq.n	8008f1c <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008f1a:	d161      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008f24:	d003      	beq.n	8008f2e <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008f2c:	d15f      	bne.n	8008fee <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	691a      	ldr	r2, [r3, #16]
 8008f32:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008f36:	d003      	beq.n	8008f40 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008f3e:	d15d      	bne.n	8008ffc <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	691a      	ldr	r2, [r3, #16]
 8008f44:	f012 0f20 	tst.w	r2, #32
 8008f48:	d003      	beq.n	8008f52 <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	f012 0f20 	tst.w	r2, #32
 8008f50:	d15b      	bne.n	800900a <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	691a      	ldr	r2, [r3, #16]
 8008f56:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8008f5a:	d003      	beq.n	8008f64 <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8008f62:	d159      	bne.n	8009018 <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	691a      	ldr	r2, [r3, #16]
 8008f68:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008f6c:	d003      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008f74:	d157      	bne.n	8009026 <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	691a      	ldr	r2, [r3, #16]
 8008f7a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008f7e:	d003      	beq.n	8008f88 <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008f86:	d155      	bne.n	8009034 <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8008f90:	d003      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8008f98:	d153      	bne.n	8009042 <HAL_TIM_IRQHandler+0x210>
}
 8008f9a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9c:	f7ff ff45 	bl	8008e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7ff ff44 	bl	8008e2e <HAL_TIM_PWM_PulseFinishedCallback>
 8008fa6:	e75c      	b.n	8008e62 <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f7ff ff3e 	bl	8008e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f7ff ff3d 	bl	8008e2e <HAL_TIM_PWM_PulseFinishedCallback>
 8008fb4:	e76e      	b.n	8008e94 <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f7ff ff37 	bl	8008e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f7ff ff36 	bl	8008e2e <HAL_TIM_PWM_PulseFinishedCallback>
 8008fc2:	e77f      	b.n	8008ec4 <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f7ff ff30 	bl	8008e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7ff ff2f 	bl	8008e2e <HAL_TIM_PWM_PulseFinishedCallback>
 8008fd0:	e790      	b.n	8008ef4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fd2:	f06f 0201 	mvn.w	r2, #1
 8008fd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f7fa fae1 	bl	80035a0 <HAL_TIM_PeriodElapsedCallback>
 8008fde:	e794      	b.n	8008f0a <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fe4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fd99 	bl	8009b1e <HAL_TIMEx_BreakCallback>
 8008fec:	e796      	b.n	8008f1c <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ff2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 fd93 	bl	8009b20 <HAL_TIMEx_Break2Callback>
 8008ffa:	e798      	b.n	8008f2e <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009000:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009002:	4620      	mov	r0, r4
 8009004:	f7ff ff14 	bl	8008e30 <HAL_TIM_TriggerCallback>
 8009008:	e79a      	b.n	8008f40 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800900a:	f06f 0220 	mvn.w	r2, #32
 800900e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fd83 	bl	8009b1c <HAL_TIMEx_CommutCallback>
 8009016:	e79c      	b.n	8008f52 <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009018:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800901c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fd7f 	bl	8009b22 <HAL_TIMEx_EncoderIndexCallback>
 8009024:	e79e      	b.n	8008f64 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009026:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800902a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800902c:	4620      	mov	r0, r4
 800902e:	f000 fd79 	bl	8009b24 <HAL_TIMEx_DirectionChangeCallback>
 8009032:	e7a0      	b.n	8008f76 <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009034:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009038:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 800903a:	4620      	mov	r0, r4
 800903c:	f000 fd73 	bl	8009b26 <HAL_TIMEx_IndexErrorCallback>
 8009040:	e7a2      	b.n	8008f88 <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009042:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009046:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009048:	4620      	mov	r0, r4
 800904a:	f000 fd6d 	bl	8009b28 <HAL_TIMEx_TransitionErrorCallback>
}
 800904e:	e7a4      	b.n	8008f9a <HAL_TIM_IRQHandler+0x168>

08009050 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8009050:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009052:	4a4b      	ldr	r2, [pc, #300]	; (8009180 <TIM_Base_SetConfig+0x130>)
 8009054:	4290      	cmp	r0, r2
 8009056:	d04f      	beq.n	80090f8 <TIM_Base_SetConfig+0xa8>
 8009058:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800905c:	d074      	beq.n	8009148 <TIM_Base_SetConfig+0xf8>
 800905e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009062:	4290      	cmp	r0, r2
 8009064:	f000 8087 	beq.w	8009176 <TIM_Base_SetConfig+0x126>
 8009068:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800906c:	4290      	cmp	r0, r2
 800906e:	d07d      	beq.n	800916c <TIM_Base_SetConfig+0x11c>
 8009070:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009074:	4290      	cmp	r0, r2
 8009076:	d055      	beq.n	8009124 <TIM_Base_SetConfig+0xd4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009078:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800907c:	4290      	cmp	r0, r2
 800907e:	d011      	beq.n	80090a4 <TIM_Base_SetConfig+0x54>
 8009080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009084:	4290      	cmp	r0, r2
 8009086:	d01b      	beq.n	80090c0 <TIM_Base_SetConfig+0x70>
 8009088:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800908c:	4290      	cmp	r0, r2
 800908e:	d025      	beq.n	80090dc <TIM_Base_SetConfig+0x8c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009094:	694a      	ldr	r2, [r1, #20]
 8009096:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009098:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800909a:	688b      	ldr	r3, [r1, #8]
 800909c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800909e:	680b      	ldr	r3, [r1, #0]
 80090a0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090a2:	e03c      	b.n	800911e <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~TIM_CR1_CKD;
 80090a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090a8:	68ca      	ldr	r2, [r1, #12]
 80090aa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090b0:	694a      	ldr	r2, [r1, #20]
 80090b2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80090b4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090b6:	688b      	ldr	r3, [r1, #8]
 80090b8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80090ba:	680b      	ldr	r3, [r1, #0]
 80090bc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090be:	e02c      	b.n	800911a <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 80090c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090c4:	68ca      	ldr	r2, [r1, #12]
 80090c6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090cc:	694a      	ldr	r2, [r1, #20]
 80090ce:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80090d0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090d2:	688b      	ldr	r3, [r1, #8]
 80090d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80090d6:	680b      	ldr	r3, [r1, #0]
 80090d8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090da:	e01e      	b.n	800911a <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 80090dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090e0:	68ca      	ldr	r2, [r1, #12]
 80090e2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090e8:	694a      	ldr	r2, [r1, #20]
 80090ea:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80090ec:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090ee:	688b      	ldr	r3, [r1, #8]
 80090f0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80090f2:	680b      	ldr	r3, [r1, #0]
 80090f4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090f6:	e010      	b.n	800911a <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80090fc:	684a      	ldr	r2, [r1, #4]
 80090fe:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009104:	68ca      	ldr	r2, [r1, #12]
 8009106:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800910c:	694a      	ldr	r2, [r1, #20]
 800910e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009110:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009112:	688b      	ldr	r3, [r1, #8]
 8009114:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009116:	680b      	ldr	r3, [r1, #0]
 8009118:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800911a:	690b      	ldr	r3, [r1, #16]
 800911c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800911e:	2301      	movs	r3, #1
 8009120:	6143      	str	r3, [r0, #20]
}
 8009122:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009128:	684a      	ldr	r2, [r1, #4]
 800912a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800912c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009130:	68ca      	ldr	r2, [r1, #12]
 8009132:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009138:	694a      	ldr	r2, [r1, #20]
 800913a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800913c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800913e:	688b      	ldr	r3, [r1, #8]
 8009140:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009142:	680b      	ldr	r3, [r1, #0]
 8009144:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009146:	e7e8      	b.n	800911a <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800914c:	684a      	ldr	r2, [r1, #4]
 800914e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009154:	68ca      	ldr	r2, [r1, #12]
 8009156:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800915c:	694a      	ldr	r2, [r1, #20]
 800915e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009160:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009162:	688b      	ldr	r3, [r1, #8]
 8009164:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009166:	680b      	ldr	r3, [r1, #0]
 8009168:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800916a:	e7d8      	b.n	800911e <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800916c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009170:	684a      	ldr	r2, [r1, #4]
 8009172:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009174:	e7ec      	b.n	8009150 <TIM_Base_SetConfig+0x100>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800917a:	684a      	ldr	r2, [r1, #4]
 800917c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800917e:	e7e7      	b.n	8009150 <TIM_Base_SetConfig+0x100>
 8009180:	40012c00 	.word	0x40012c00

08009184 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009184:	b360      	cbz	r0, 80091e0 <HAL_TIM_Base_Init+0x5c>
{
 8009186:	b510      	push	{r4, lr}
 8009188:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800918a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800918e:	b313      	cbz	r3, 80091d6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009190:	2302      	movs	r3, #2
 8009192:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009196:	4621      	mov	r1, r4
 8009198:	f851 0b04 	ldr.w	r0, [r1], #4
 800919c:	f7ff ff58 	bl	8009050 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091a0:	2301      	movs	r3, #1
 80091a2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80091aa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80091ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80091b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80091b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80091c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80091ca:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80091ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80091d2:	2000      	movs	r0, #0
}
 80091d4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80091d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80091da:	f7fc f803 	bl	80051e4 <HAL_TIM_Base_MspInit>
 80091de:	e7d7      	b.n	8009190 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80091e0:	2001      	movs	r0, #1
}
 80091e2:	4770      	bx	lr

080091e4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80091e4:	b360      	cbz	r0, 8009240 <HAL_TIM_PWM_Init+0x5c>
{
 80091e6:	b510      	push	{r4, lr}
 80091e8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80091ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80091ee:	b313      	cbz	r3, 8009236 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80091f0:	2302      	movs	r3, #2
 80091f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091f6:	4621      	mov	r1, r4
 80091f8:	f851 0b04 	ldr.w	r0, [r1], #4
 80091fc:	f7ff ff28 	bl	8009050 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009200:	2301      	movs	r3, #1
 8009202:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009206:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800920a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800920e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009212:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009216:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800921a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800921e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009226:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800922a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800922e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009232:	2000      	movs	r0, #0
}
 8009234:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009236:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800923a:	f7ff fdf5 	bl	8008e28 <HAL_TIM_PWM_MspInit>
 800923e:	e7d7      	b.n	80091f0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8009240:	2001      	movs	r0, #1
}
 8009242:	4770      	bx	lr

08009244 <TIM_OC2_SetConfig>:
{
 8009244:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009246:	6a03      	ldr	r3, [r0, #32]
 8009248:	f023 0310 	bic.w	r3, r3, #16
 800924c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800924e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009250:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009252:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009254:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009258:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800925c:	680c      	ldr	r4, [r1, #0]
 800925e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8009262:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009266:	688c      	ldr	r4, [r1, #8]
 8009268:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800926c:	4c18      	ldr	r4, [pc, #96]	; (80092d0 <TIM_OC2_SetConfig+0x8c>)
 800926e:	42a0      	cmp	r0, r4
 8009270:	d017      	beq.n	80092a2 <TIM_OC2_SetConfig+0x5e>
 8009272:	4d18      	ldr	r5, [pc, #96]	; (80092d4 <TIM_OC2_SetConfig+0x90>)
 8009274:	42a8      	cmp	r0, r5
 8009276:	d00c      	beq.n	8009292 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009278:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800927c:	42a0      	cmp	r0, r4
 800927e:	d017      	beq.n	80092b0 <TIM_OC2_SetConfig+0x6c>
 8009280:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009284:	42a0      	cmp	r0, r4
 8009286:	d013      	beq.n	80092b0 <TIM_OC2_SetConfig+0x6c>
 8009288:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800928c:	42a0      	cmp	r0, r4
 800928e:	d117      	bne.n	80092c0 <TIM_OC2_SetConfig+0x7c>
 8009290:	e00e      	b.n	80092b0 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8009292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009296:	68cc      	ldr	r4, [r1, #12]
 8009298:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800929c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a0:	e006      	b.n	80092b0 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80092a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092a6:	68cc      	ldr	r4, [r1, #12]
 80092a8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80092ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092b0:	f426 6440 	bic.w	r4, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092b4:	694d      	ldr	r5, [r1, #20]
 80092b6:	698e      	ldr	r6, [r1, #24]
 80092b8:	ea45 0c06 	orr.w	ip, r5, r6
 80092bc:	ea44 068c 	orr.w	r6, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 80092c0:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80092c2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80092c4:	684a      	ldr	r2, [r1, #4]
 80092c6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80092c8:	6203      	str	r3, [r0, #32]
}
 80092ca:	bc70      	pop	{r4, r5, r6}
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40012c00 	.word	0x40012c00
 80092d4:	40013400 	.word	0x40013400

080092d8 <HAL_TIM_PWM_ConfigChannel>:
{
 80092d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80092da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80092de:	2b01      	cmp	r3, #1
 80092e0:	f000 8095 	beq.w	800940e <HAL_TIM_PWM_ConfigChannel+0x136>
 80092e4:	4604      	mov	r4, r0
 80092e6:	460d      	mov	r5, r1
 80092e8:	2301      	movs	r3, #1
 80092ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80092ee:	2a14      	cmp	r2, #20
 80092f0:	f200 8088 	bhi.w	8009404 <HAL_TIM_PWM_ConfigChannel+0x12c>
 80092f4:	e8df f002 	tbb	[pc, r2]
 80092f8:	8686860b 	.word	0x8686860b
 80092fc:	8686861f 	.word	0x8686861f
 8009300:	86868634 	.word	0x86868634
 8009304:	86868648 	.word	0x86868648
 8009308:	8686865d 	.word	0x8686865d
 800930c:	71          	.byte	0x71
 800930d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800930e:	6800      	ldr	r0, [r0, #0]
 8009310:	f7ff fbde 	bl	8008ad0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	6993      	ldr	r3, [r2, #24]
 8009318:	f043 0308 	orr.w	r3, r3, #8
 800931c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	6993      	ldr	r3, [r2, #24]
 8009322:	f023 0304 	bic.w	r3, r3, #4
 8009326:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009328:	6822      	ldr	r2, [r4, #0]
 800932a:	6993      	ldr	r3, [r2, #24]
 800932c:	6929      	ldr	r1, [r5, #16]
 800932e:	430b      	orrs	r3, r1
 8009330:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009332:	2000      	movs	r0, #0
      break;
 8009334:	e067      	b.n	8009406 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009336:	6800      	ldr	r0, [r0, #0]
 8009338:	f7ff ff84 	bl	8009244 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800933c:	6822      	ldr	r2, [r4, #0]
 800933e:	6993      	ldr	r3, [r2, #24]
 8009340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009344:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009346:	6822      	ldr	r2, [r4, #0]
 8009348:	6993      	ldr	r3, [r2, #24]
 800934a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800934e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009350:	6822      	ldr	r2, [r4, #0]
 8009352:	6993      	ldr	r3, [r2, #24]
 8009354:	6929      	ldr	r1, [r5, #16]
 8009356:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800935a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800935c:	2000      	movs	r0, #0
      break;
 800935e:	e052      	b.n	8009406 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009360:	6800      	ldr	r0, [r0, #0]
 8009362:	f7ff fc0f 	bl	8008b84 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009366:	6822      	ldr	r2, [r4, #0]
 8009368:	69d3      	ldr	r3, [r2, #28]
 800936a:	f043 0308 	orr.w	r3, r3, #8
 800936e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009370:	6822      	ldr	r2, [r4, #0]
 8009372:	69d3      	ldr	r3, [r2, #28]
 8009374:	f023 0304 	bic.w	r3, r3, #4
 8009378:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	69d3      	ldr	r3, [r2, #28]
 800937e:	6929      	ldr	r1, [r5, #16]
 8009380:	430b      	orrs	r3, r1
 8009382:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009384:	2000      	movs	r0, #0
      break;
 8009386:	e03e      	b.n	8009406 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009388:	6800      	ldr	r0, [r0, #0]
 800938a:	f7ff fc43 	bl	8008c14 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800938e:	6822      	ldr	r2, [r4, #0]
 8009390:	69d3      	ldr	r3, [r2, #28]
 8009392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009396:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009398:	6822      	ldr	r2, [r4, #0]
 800939a:	69d3      	ldr	r3, [r2, #28]
 800939c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093a0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093a2:	6822      	ldr	r2, [r4, #0]
 80093a4:	69d3      	ldr	r3, [r2, #28]
 80093a6:	6929      	ldr	r1, [r5, #16]
 80093a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80093ac:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80093ae:	2000      	movs	r0, #0
      break;
 80093b0:	e029      	b.n	8009406 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80093b2:	6800      	ldr	r0, [r0, #0]
 80093b4:	f7ff fc78 	bl	8008ca8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80093bc:	f043 0308 	orr.w	r3, r3, #8
 80093c0:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80093c6:	f023 0304 	bic.w	r3, r3, #4
 80093ca:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093cc:	6822      	ldr	r2, [r4, #0]
 80093ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80093d0:	6929      	ldr	r1, [r5, #16]
 80093d2:	430b      	orrs	r3, r1
 80093d4:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80093d6:	2000      	movs	r0, #0
      break;
 80093d8:	e015      	b.n	8009406 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093da:	6800      	ldr	r0, [r0, #0]
 80093dc:	f7ff fc98 	bl	8008d10 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093e0:	6822      	ldr	r2, [r4, #0]
 80093e2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80093e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80093e8:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093ea:	6822      	ldr	r2, [r4, #0]
 80093ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80093ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093f2:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093f4:	6822      	ldr	r2, [r4, #0]
 80093f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80093f8:	6929      	ldr	r1, [r5, #16]
 80093fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80093fe:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009400:	2000      	movs	r0, #0
      break;
 8009402:	e000      	b.n	8009406 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8009404:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8009406:	2300      	movs	r3, #0
 8009408:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800940c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800940e:	2002      	movs	r0, #2
 8009410:	e7fc      	b.n	800940c <HAL_TIM_PWM_ConfigChannel+0x134>

08009412 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009412:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009414:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009416:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800941a:	430a      	orrs	r2, r1
 800941c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009420:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009424:	6082      	str	r2, [r0, #8]
}
 8009426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_TIM_ConfigClockSource>:
{
 800942c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800942e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009432:	2b01      	cmp	r3, #1
 8009434:	f000 80cc 	beq.w	80095d0 <HAL_TIM_ConfigClockSource+0x1a4>
 8009438:	4604      	mov	r4, r0
 800943a:	2301      	movs	r3, #1
 800943c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009440:	2302      	movs	r3, #2
 8009442:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009446:	6802      	ldr	r2, [r0, #0]
 8009448:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800944a:	4b62      	ldr	r3, [pc, #392]	; (80095d4 <HAL_TIM_ConfigClockSource+0x1a8>)
 800944c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800944e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8009450:	6808      	ldr	r0, [r1, #0]
 8009452:	2870      	cmp	r0, #112	; 0x70
 8009454:	f000 8083 	beq.w	800955e <HAL_TIM_ConfigClockSource+0x132>
 8009458:	d851      	bhi.n	80094fe <HAL_TIM_ConfigClockSource+0xd2>
 800945a:	2850      	cmp	r0, #80	; 0x50
 800945c:	f000 8099 	beq.w	8009592 <HAL_TIM_ConfigClockSource+0x166>
 8009460:	d91f      	bls.n	80094a2 <HAL_TIM_ConfigClockSource+0x76>
 8009462:	2860      	cmp	r0, #96	; 0x60
 8009464:	d149      	bne.n	80094fa <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	6848      	ldr	r0, [r1, #4]
 800946a:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800946c:	6a1a      	ldr	r2, [r3, #32]
 800946e:	f022 0210 	bic.w	r2, r2, #16
 8009472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009474:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8009476:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009478:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800947c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009480:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009484:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8009488:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800948a:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800948c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800948e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009490:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009498:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800949c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800949e:	2000      	movs	r0, #0
}
 80094a0:	e042      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 80094a2:	2840      	cmp	r0, #64	; 0x40
 80094a4:	d11c      	bne.n	80094e0 <HAL_TIM_ConfigClockSource+0xb4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	6848      	ldr	r0, [r1, #4]
 80094aa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80094ac:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ae:	6a1a      	ldr	r2, [r3, #32]
 80094b0:	f022 0201 	bic.w	r2, r2, #1
 80094b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094b6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094bc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094c0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80094c4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80094c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094c8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094ca:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80094cc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80094ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80094d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094d6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80094da:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80094dc:	2000      	movs	r0, #0
}
 80094de:	e023      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 80094e0:	d874      	bhi.n	80095cc <HAL_TIM_ConfigClockSource+0x1a0>
 80094e2:	2820      	cmp	r0, #32
 80094e4:	d02f      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x11a>
 80094e6:	d903      	bls.n	80094f0 <HAL_TIM_ConfigClockSource+0xc4>
 80094e8:	2830      	cmp	r0, #48	; 0x30
 80094ea:	d02c      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x11a>
 80094ec:	2001      	movs	r0, #1
 80094ee:	e01b      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
 80094f0:	f030 0310 	bics.w	r3, r0, #16
 80094f4:	d027      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x11a>
 80094f6:	2001      	movs	r0, #1
 80094f8:	e016      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
 80094fa:	2001      	movs	r0, #1
 80094fc:	e014      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
 80094fe:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8009502:	d039      	beq.n	8009578 <HAL_TIM_ConfigClockSource+0x14c>
 8009504:	d90c      	bls.n	8009520 <HAL_TIM_ConfigClockSource+0xf4>
 8009506:	4a34      	ldr	r2, [pc, #208]	; (80095d8 <HAL_TIM_ConfigClockSource+0x1ac>)
 8009508:	4290      	cmp	r0, r2
 800950a:	d01c      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x11a>
 800950c:	d913      	bls.n	8009536 <HAL_TIM_ConfigClockSource+0x10a>
 800950e:	4a33      	ldr	r2, [pc, #204]	; (80095dc <HAL_TIM_ConfigClockSource+0x1b0>)
 8009510:	4290      	cmp	r0, r2
 8009512:	d018      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x11a>
 8009514:	3230      	adds	r2, #48	; 0x30
 8009516:	4290      	cmp	r0, r2
 8009518:	bf18      	it	ne
 800951a:	2001      	movne	r0, #1
 800951c:	d013      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x11a>
 800951e:	e003      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
  HAL_StatusTypeDef status = HAL_OK;
 8009520:	f5b0 5080 	subs.w	r0, r0, #4096	; 0x1000
 8009524:	bf18      	it	ne
 8009526:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8009528:	2301      	movs	r3, #1
 800952a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800952e:	2300      	movs	r3, #0
 8009530:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009534:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8009536:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 800953a:	d004      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x11a>
 800953c:	3a10      	subs	r2, #16
 800953e:	4290      	cmp	r0, r2
 8009540:	bf18      	it	ne
 8009542:	2001      	movne	r0, #1
 8009544:	d1f0      	bne.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009546:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8009548:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800954a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800954e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009552:	4302      	orrs	r2, r0
 8009554:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8009558:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800955a:	2000      	movs	r0, #0
}
 800955c:	e7e4      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 800955e:	68cb      	ldr	r3, [r1, #12]
 8009560:	684a      	ldr	r2, [r1, #4]
 8009562:	6889      	ldr	r1, [r1, #8]
 8009564:	6820      	ldr	r0, [r4, #0]
 8009566:	f7ff ff54 	bl	8009412 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800956a:	6822      	ldr	r2, [r4, #0]
 800956c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800956e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009572:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009574:	2000      	movs	r0, #0
      break;
 8009576:	e7d7      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 8009578:	68cb      	ldr	r3, [r1, #12]
 800957a:	684a      	ldr	r2, [r1, #4]
 800957c:	6889      	ldr	r1, [r1, #8]
 800957e:	6820      	ldr	r0, [r4, #0]
 8009580:	f7ff ff47 	bl	8009412 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009584:	6822      	ldr	r2, [r4, #0]
 8009586:	6893      	ldr	r3, [r2, #8]
 8009588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800958c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800958e:	2000      	movs	r0, #0
      break;
 8009590:	e7ca      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	6848      	ldr	r0, [r1, #4]
 8009596:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009598:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800959a:	6a1a      	ldr	r2, [r3, #32]
 800959c:	f022 0201 	bic.w	r2, r2, #1
 80095a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095a2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095a8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095ac:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80095b0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80095b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095b4:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095b6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80095b8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80095ba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80095be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095c2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80095c6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095c8:	2000      	movs	r0, #0
}
 80095ca:	e7ad      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 80095cc:	2001      	movs	r0, #1
 80095ce:	e7ab      	b.n	8009528 <HAL_TIM_ConfigClockSource+0xfc>
  __HAL_LOCK(htim);
 80095d0:	2002      	movs	r0, #2
 80095d2:	e7af      	b.n	8009534 <HAL_TIM_ConfigClockSource+0x108>
 80095d4:	ffce0088 	.word	0xffce0088
 80095d8:	00100030 	.word	0x00100030
 80095dc:	00100040 	.word	0x00100040

080095e0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095e0:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095e4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095e6:	f04f 0c01 	mov.w	ip, #1
 80095ea:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 80095ee:	ea23 030c 	bic.w	r3, r3, ip
 80095f2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095f4:	6a03      	ldr	r3, [r0, #32]
 80095f6:	408a      	lsls	r2, r1
 80095f8:	431a      	orrs	r2, r3
 80095fa:	6202      	str	r2, [r0, #32]
}
 80095fc:	4770      	bx	lr
	...

08009600 <HAL_TIM_PWM_Start>:
{
 8009600:	b510      	push	{r4, lr}
 8009602:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009604:	2910      	cmp	r1, #16
 8009606:	d86b      	bhi.n	80096e0 <HAL_TIM_PWM_Start+0xe0>
 8009608:	e8df f001 	tbb	[pc, r1]
 800960c:	6a6a6a09 	.word	0x6a6a6a09
 8009610:	6a6a6a4a 	.word	0x6a6a6a4a
 8009614:	6a6a6a53 	.word	0x6a6a6a53
 8009618:	6a6a6a5a 	.word	0x6a6a6a5a
 800961c:	63          	.byte	0x63
 800961d:	00          	.byte	0x00
 800961e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	f040 80a5 	bne.w	8009774 <HAL_TIM_PWM_Start+0x174>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800962a:	2302      	movs	r3, #2
 800962c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009630:	2201      	movs	r2, #1
 8009632:	6820      	ldr	r0, [r4, #0]
 8009634:	f7ff ffd4 	bl	80095e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	4a53      	ldr	r2, [pc, #332]	; (8009788 <HAL_TIM_PWM_Start+0x188>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d00f      	beq.n	8009660 <HAL_TIM_PWM_Start+0x60>
 8009640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009644:	4293      	cmp	r3, r2
 8009646:	d00b      	beq.n	8009660 <HAL_TIM_PWM_Start+0x60>
 8009648:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800964c:	4293      	cmp	r3, r2
 800964e:	d007      	beq.n	8009660 <HAL_TIM_PWM_Start+0x60>
 8009650:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009654:	4293      	cmp	r3, r2
 8009656:	d003      	beq.n	8009660 <HAL_TIM_PWM_Start+0x60>
 8009658:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800965c:	4293      	cmp	r3, r2
 800965e:	d107      	bne.n	8009670 <HAL_TIM_PWM_Start+0x70>
    __HAL_TIM_MOE_ENABLE(htim);
 8009660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009666:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	4a47      	ldr	r2, [pc, #284]	; (8009788 <HAL_TIM_PWM_Start+0x188>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d073      	beq.n	8009758 <HAL_TIM_PWM_Start+0x158>
 8009670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009674:	d070      	beq.n	8009758 <HAL_TIM_PWM_Start+0x158>
 8009676:	4a45      	ldr	r2, [pc, #276]	; (800978c <HAL_TIM_PWM_Start+0x18c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d06d      	beq.n	8009758 <HAL_TIM_PWM_Start+0x158>
 800967c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009680:	4293      	cmp	r3, r2
 8009682:	d069      	beq.n	8009758 <HAL_TIM_PWM_Start+0x158>
 8009684:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009688:	4293      	cmp	r3, r2
 800968a:	d065      	beq.n	8009758 <HAL_TIM_PWM_Start+0x158>
 800968c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009690:	4293      	cmp	r3, r2
 8009692:	d061      	beq.n	8009758 <HAL_TIM_PWM_Start+0x158>
    __HAL_TIM_ENABLE(htim);
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	f042 0201 	orr.w	r2, r2, #1
 800969a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800969c:	2000      	movs	r0, #0
 800969e:	e068      	b.n	8009772 <HAL_TIM_PWM_Start+0x172>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096a0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d166      	bne.n	8009778 <HAL_TIM_PWM_Start+0x178>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096aa:	2302      	movs	r3, #2
 80096ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80096b0:	e7be      	b.n	8009630 <HAL_TIM_PWM_Start+0x30>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d03d      	beq.n	8009738 <HAL_TIM_PWM_Start+0x138>
    return HAL_ERROR;
 80096bc:	2001      	movs	r0, #1
 80096be:	e058      	b.n	8009772 <HAL_TIM_PWM_Start+0x172>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	bf18      	it	ne
 80096ca:	2301      	movne	r3, #1
 80096cc:	b16b      	cbz	r3, 80096ea <HAL_TIM_PWM_Start+0xea>
    return HAL_ERROR;
 80096ce:	2001      	movs	r0, #1
 80096d0:	e04f      	b.n	8009772 <HAL_TIM_PWM_Start+0x172>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096d2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	bf18      	it	ne
 80096dc:	2301      	movne	r3, #1
 80096de:	e7f5      	b.n	80096cc <HAL_TIM_PWM_Start+0xcc>
 80096e0:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d148      	bne.n	800977c <HAL_TIM_PWM_Start+0x17c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096ea:	2910      	cmp	r1, #16
 80096ec:	d830      	bhi.n	8009750 <HAL_TIM_PWM_Start+0x150>
 80096ee:	a301      	add	r3, pc, #4	; (adr r3, 80096f4 <HAL_TIM_PWM_Start+0xf4>)
 80096f0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80096f4:	0800962b 	.word	0x0800962b
 80096f8:	08009751 	.word	0x08009751
 80096fc:	08009751 	.word	0x08009751
 8009700:	08009751 	.word	0x08009751
 8009704:	080096ab 	.word	0x080096ab
 8009708:	08009751 	.word	0x08009751
 800970c:	08009751 	.word	0x08009751
 8009710:	08009751 	.word	0x08009751
 8009714:	08009739 	.word	0x08009739
 8009718:	08009751 	.word	0x08009751
 800971c:	08009751 	.word	0x08009751
 8009720:	08009751 	.word	0x08009751
 8009724:	08009741 	.word	0x08009741
 8009728:	08009751 	.word	0x08009751
 800972c:	08009751 	.word	0x08009751
 8009730:	08009751 	.word	0x08009751
 8009734:	08009749 	.word	0x08009749
 8009738:	2302      	movs	r3, #2
 800973a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800973e:	e777      	b.n	8009630 <HAL_TIM_PWM_Start+0x30>
 8009740:	2302      	movs	r3, #2
 8009742:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009746:	e773      	b.n	8009630 <HAL_TIM_PWM_Start+0x30>
 8009748:	2302      	movs	r3, #2
 800974a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800974e:	e76f      	b.n	8009630 <HAL_TIM_PWM_Start+0x30>
 8009750:	2302      	movs	r3, #2
 8009752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009756:	e76b      	b.n	8009630 <HAL_TIM_PWM_Start+0x30>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009758:	6899      	ldr	r1, [r3, #8]
 800975a:	4a0d      	ldr	r2, [pc, #52]	; (8009790 <HAL_TIM_PWM_Start+0x190>)
 800975c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975e:	2a06      	cmp	r2, #6
 8009760:	d00e      	beq.n	8009780 <HAL_TIM_PWM_Start+0x180>
 8009762:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009766:	d00d      	beq.n	8009784 <HAL_TIM_PWM_Start+0x184>
      __HAL_TIM_ENABLE(htim);
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	f042 0201 	orr.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009770:	2000      	movs	r0, #0
}
 8009772:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009774:	2001      	movs	r0, #1
 8009776:	e7fc      	b.n	8009772 <HAL_TIM_PWM_Start+0x172>
 8009778:	2001      	movs	r0, #1
 800977a:	e7fa      	b.n	8009772 <HAL_TIM_PWM_Start+0x172>
 800977c:	2001      	movs	r0, #1
 800977e:	e7f8      	b.n	8009772 <HAL_TIM_PWM_Start+0x172>
  return HAL_OK;
 8009780:	2000      	movs	r0, #0
 8009782:	e7f6      	b.n	8009772 <HAL_TIM_PWM_Start+0x172>
 8009784:	2000      	movs	r0, #0
 8009786:	e7f4      	b.n	8009772 <HAL_TIM_PWM_Start+0x172>
 8009788:	40012c00 	.word	0x40012c00
 800978c:	40000400 	.word	0x40000400
 8009790:	00010007 	.word	0x00010007

08009794 <HAL_TIM_PWM_Stop>:
{
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4604      	mov	r4, r0
 8009798:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800979a:	2200      	movs	r2, #0
 800979c:	6800      	ldr	r0, [r0, #0]
 800979e:	f7ff ff1f 	bl	80095e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	4a2a      	ldr	r2, [pc, #168]	; (8009850 <HAL_TIM_PWM_Stop+0xbc>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d00f      	beq.n	80097ca <HAL_TIM_PWM_Stop+0x36>
 80097aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d00b      	beq.n	80097ca <HAL_TIM_PWM_Stop+0x36>
 80097b2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d007      	beq.n	80097ca <HAL_TIM_PWM_Stop+0x36>
 80097ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097be:	4293      	cmp	r3, r2
 80097c0:	d003      	beq.n	80097ca <HAL_TIM_PWM_Stop+0x36>
 80097c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d10d      	bne.n	80097e6 <HAL_TIM_PWM_Stop+0x52>
    __HAL_TIM_MOE_DISABLE(htim);
 80097ca:	6a19      	ldr	r1, [r3, #32]
 80097cc:	f241 1211 	movw	r2, #4369	; 0x1111
 80097d0:	4211      	tst	r1, r2
 80097d2:	d108      	bne.n	80097e6 <HAL_TIM_PWM_Stop+0x52>
 80097d4:	6a19      	ldr	r1, [r3, #32]
 80097d6:	f244 4244 	movw	r2, #17476	; 0x4444
 80097da:	4211      	tst	r1, r2
 80097dc:	d103      	bne.n	80097e6 <HAL_TIM_PWM_Stop+0x52>
 80097de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097e4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	6a19      	ldr	r1, [r3, #32]
 80097ea:	f241 1211 	movw	r2, #4369	; 0x1111
 80097ee:	4211      	tst	r1, r2
 80097f0:	d108      	bne.n	8009804 <HAL_TIM_PWM_Stop+0x70>
 80097f2:	6a19      	ldr	r1, [r3, #32]
 80097f4:	f244 4244 	movw	r2, #17476	; 0x4444
 80097f8:	4211      	tst	r1, r2
 80097fa:	d103      	bne.n	8009804 <HAL_TIM_PWM_Stop+0x70>
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	f022 0201 	bic.w	r2, r2, #1
 8009802:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009804:	b925      	cbnz	r5, 8009810 <HAL_TIM_PWM_Stop+0x7c>
 8009806:	2301      	movs	r3, #1
 8009808:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800980c:	2000      	movs	r0, #0
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	3d04      	subs	r5, #4
 8009812:	2d0c      	cmp	r5, #12
 8009814:	d818      	bhi.n	8009848 <HAL_TIM_PWM_Stop+0xb4>
 8009816:	e8df f005 	tbb	[pc, r5]
 800981a:	1707      	.short	0x1707
 800981c:	170b1717 	.word	0x170b1717
 8009820:	170f1717 	.word	0x170f1717
 8009824:	1717      	.short	0x1717
 8009826:	13          	.byte	0x13
 8009827:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009828:	2301      	movs	r3, #1
 800982a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800982e:	e7ed      	b.n	800980c <HAL_TIM_PWM_Stop+0x78>
 8009830:	2301      	movs	r3, #1
 8009832:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009836:	e7e9      	b.n	800980c <HAL_TIM_PWM_Stop+0x78>
 8009838:	2301      	movs	r3, #1
 800983a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800983e:	e7e5      	b.n	800980c <HAL_TIM_PWM_Stop+0x78>
 8009840:	2301      	movs	r3, #1
 8009842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009846:	e7e1      	b.n	800980c <HAL_TIM_PWM_Stop+0x78>
 8009848:	2301      	movs	r3, #1
 800984a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800984e:	e7dd      	b.n	800980c <HAL_TIM_PWM_Stop+0x78>
 8009850:	40012c00 	.word	0x40012c00

08009854 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009854:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009858:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800985a:	f04f 0c04 	mov.w	ip, #4
 800985e:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &=  ~tmp;
 8009862:	ea23 030c 	bic.w	r3, r3, ip
 8009866:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009868:	6a03      	ldr	r3, [r0, #32]
 800986a:	408a      	lsls	r2, r1
 800986c:	431a      	orrs	r2, r3
 800986e:	6202      	str	r2, [r0, #32]
}
 8009870:	4770      	bx	lr
	...

08009874 <HAL_TIMEx_PWMN_Start>:
{
 8009874:	b510      	push	{r4, lr}
 8009876:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009878:	460b      	mov	r3, r1
 800987a:	bb71      	cbnz	r1, 80098da <HAL_TIMEx_PWMN_Start+0x66>
 800987c:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	2a01      	cmp	r2, #1
 8009884:	d156      	bne.n	8009934 <HAL_TIMEx_PWMN_Start+0xc0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009886:	2202      	movs	r2, #2
 8009888:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800988c:	2204      	movs	r2, #4
 800988e:	4619      	mov	r1, r3
 8009890:	6820      	ldr	r0, [r4, #0]
 8009892:	f7ff ffdf 	bl	8009854 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8009896:	6822      	ldr	r2, [r4, #0]
 8009898:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800989a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800989e:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	4a29      	ldr	r2, [pc, #164]	; (8009948 <HAL_TIMEx_PWMN_Start+0xd4>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d037      	beq.n	8009918 <HAL_TIMEx_PWMN_Start+0xa4>
 80098a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ac:	d034      	beq.n	8009918 <HAL_TIMEx_PWMN_Start+0xa4>
 80098ae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d030      	beq.n	8009918 <HAL_TIMEx_PWMN_Start+0xa4>
 80098b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d02c      	beq.n	8009918 <HAL_TIMEx_PWMN_Start+0xa4>
 80098be:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d028      	beq.n	8009918 <HAL_TIMEx_PWMN_Start+0xa4>
 80098c6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d024      	beq.n	8009918 <HAL_TIMEx_PWMN_Start+0xa4>
    __HAL_TIM_ENABLE(htim);
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	f042 0201 	orr.w	r2, r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80098d6:	2000      	movs	r0, #0
 80098d8:	e02b      	b.n	8009932 <HAL_TIMEx_PWMN_Start+0xbe>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098da:	2904      	cmp	r1, #4
 80098dc:	d013      	beq.n	8009906 <HAL_TIMEx_PWMN_Start+0x92>
 80098de:	2908      	cmp	r1, #8
 80098e0:	bf0c      	ite	eq
 80098e2:	f890 2046 	ldrbeq.w	r2, [r0, #70]	; 0x46
 80098e6:	f890 2047 	ldrbne.w	r2, [r0, #71]	; 0x47
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	3a01      	subs	r2, #1
 80098ee:	bf18      	it	ne
 80098f0:	2201      	movne	r2, #1
 80098f2:	bb3a      	cbnz	r2, 8009944 <HAL_TIMEx_PWMN_Start+0xd0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	f04f 0202 	mov.w	r2, #2
 80098fa:	bf0c      	ite	eq
 80098fc:	f884 2046 	strbeq.w	r2, [r4, #70]	; 0x46
 8009900:	f884 2047 	strbne.w	r2, [r4, #71]	; 0x47
 8009904:	e7c2      	b.n	800988c <HAL_TIMEx_PWMN_Start+0x18>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009906:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 800990a:	b2d2      	uxtb	r2, r2
 800990c:	2a01      	cmp	r2, #1
 800990e:	d113      	bne.n	8009938 <HAL_TIMEx_PWMN_Start+0xc4>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009910:	2202      	movs	r2, #2
 8009912:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 8009916:	e7b9      	b.n	800988c <HAL_TIMEx_PWMN_Start+0x18>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009918:	6899      	ldr	r1, [r3, #8]
 800991a:	4a0c      	ldr	r2, [pc, #48]	; (800994c <HAL_TIMEx_PWMN_Start+0xd8>)
 800991c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800991e:	2a06      	cmp	r2, #6
 8009920:	d00c      	beq.n	800993c <HAL_TIMEx_PWMN_Start+0xc8>
 8009922:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009926:	d00b      	beq.n	8009940 <HAL_TIMEx_PWMN_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	f042 0201 	orr.w	r2, r2, #1
 800992e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009930:	2000      	movs	r0, #0
}
 8009932:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009934:	2001      	movs	r0, #1
 8009936:	e7fc      	b.n	8009932 <HAL_TIMEx_PWMN_Start+0xbe>
 8009938:	2001      	movs	r0, #1
 800993a:	e7fa      	b.n	8009932 <HAL_TIMEx_PWMN_Start+0xbe>
  return HAL_OK;
 800993c:	2000      	movs	r0, #0
 800993e:	e7f8      	b.n	8009932 <HAL_TIMEx_PWMN_Start+0xbe>
 8009940:	2000      	movs	r0, #0
 8009942:	e7f6      	b.n	8009932 <HAL_TIMEx_PWMN_Start+0xbe>
    return HAL_ERROR;
 8009944:	2001      	movs	r0, #1
 8009946:	e7f4      	b.n	8009932 <HAL_TIMEx_PWMN_Start+0xbe>
 8009948:	40012c00 	.word	0x40012c00
 800994c:	00010007 	.word	0x00010007

08009950 <HAL_TIMEx_PWMN_Stop>:
{
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009956:	2200      	movs	r2, #0
 8009958:	6800      	ldr	r0, [r0, #0]
 800995a:	f7ff ff7b 	bl	8009854 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	6a19      	ldr	r1, [r3, #32]
 8009962:	f241 1211 	movw	r2, #4369	; 0x1111
 8009966:	4211      	tst	r1, r2
 8009968:	d108      	bne.n	800997c <HAL_TIMEx_PWMN_Stop+0x2c>
 800996a:	6a19      	ldr	r1, [r3, #32]
 800996c:	f244 4244 	movw	r2, #17476	; 0x4444
 8009970:	4211      	tst	r1, r2
 8009972:	d103      	bne.n	800997c <HAL_TIMEx_PWMN_Stop+0x2c>
 8009974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800997a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	6a19      	ldr	r1, [r3, #32]
 8009980:	f241 1211 	movw	r2, #4369	; 0x1111
 8009984:	4211      	tst	r1, r2
 8009986:	d108      	bne.n	800999a <HAL_TIMEx_PWMN_Stop+0x4a>
 8009988:	6a19      	ldr	r1, [r3, #32]
 800998a:	f244 4244 	movw	r2, #17476	; 0x4444
 800998e:	4211      	tst	r1, r2
 8009990:	d103      	bne.n	800999a <HAL_TIMEx_PWMN_Stop+0x4a>
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	f022 0201 	bic.w	r2, r2, #1
 8009998:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800999a:	b925      	cbnz	r5, 80099a6 <HAL_TIMEx_PWMN_Stop+0x56>
 800999c:	2301      	movs	r3, #1
 800999e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80099a2:	2000      	movs	r0, #0
 80099a4:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80099a6:	2d04      	cmp	r5, #4
 80099a8:	d008      	beq.n	80099bc <HAL_TIMEx_PWMN_Stop+0x6c>
 80099aa:	2d08      	cmp	r5, #8
 80099ac:	f04f 0301 	mov.w	r3, #1
 80099b0:	bf0c      	ite	eq
 80099b2:	f884 3046 	strbeq.w	r3, [r4, #70]	; 0x46
 80099b6:	f884 3047 	strbne.w	r3, [r4, #71]	; 0x47
 80099ba:	e7f2      	b.n	80099a2 <HAL_TIMEx_PWMN_Stop+0x52>
 80099bc:	2301      	movs	r3, #1
 80099be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099c2:	e7ee      	b.n	80099a2 <HAL_TIMEx_PWMN_Stop+0x52>

080099c4 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80099c4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80099c8:	2a01      	cmp	r2, #1
 80099ca:	d040      	beq.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
{
 80099cc:	b430      	push	{r4, r5}
 80099ce:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80099d0:	2201      	movs	r2, #1
 80099d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80099d6:	2202      	movs	r2, #2
 80099d8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80099dc:	6800      	ldr	r0, [r0, #0]
 80099de:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 80099e0:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099e2:	4d1c      	ldr	r5, [pc, #112]	; (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80099e4:	42a8      	cmp	r0, r5
 80099e6:	d003      	beq.n	80099f0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80099e8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80099ec:	42a8      	cmp	r0, r5
 80099ee:	d103      	bne.n	80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x34>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099f4:	684d      	ldr	r5, [r1, #4]
 80099f6:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80099f8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80099fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a00:	680d      	ldr	r5, [r1, #0]
 8009a02:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8009a04:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	4812      	ldr	r0, [pc, #72]	; (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8009a0a:	4282      	cmp	r2, r0
 8009a0c:	d012      	beq.n	8009a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a0e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009a12:	d00f      	beq.n	8009a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a14:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8009a18:	4282      	cmp	r2, r0
 8009a1a:	d00b      	beq.n	8009a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a1c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009a20:	4282      	cmp	r2, r0
 8009a22:	d007      	beq.n	8009a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a24:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8009a28:	4282      	cmp	r2, r0
 8009a2a:	d003      	beq.n	8009a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a2c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8009a30:	4282      	cmp	r2, r0
 8009a32:	d104      	bne.n	8009a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a34:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a38:	6889      	ldr	r1, [r1, #8]
 8009a3a:	430c      	orrs	r4, r1
    htim->Instance->SMCR = tmpsmcr;
 8009a3c:	6094      	str	r4, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009a44:	2000      	movs	r0, #0
 8009a46:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
}
 8009a4a:	bc30      	pop	{r4, r5}
 8009a4c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009a4e:	2002      	movs	r0, #2
}
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	40012c00 	.word	0x40012c00

08009a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8009a58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d031      	beq.n	8009ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
{
 8009a60:	b410      	push	{r4}
 8009a62:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8009a64:	2301      	movs	r3, #1
 8009a66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a6a:	68cb      	ldr	r3, [r1, #12]
 8009a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a70:	6888      	ldr	r0, [r1, #8]
 8009a72:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a78:	6848      	ldr	r0, [r1, #4]
 8009a7a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a80:	6808      	ldr	r0, [r1, #0]
 8009a82:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a88:	6908      	ldr	r0, [r1, #16]
 8009a8a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a90:	6948      	ldr	r0, [r1, #20]
 8009a92:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a98:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8009a9a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009a9c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8009aa0:	6988      	ldr	r0, [r1, #24]
 8009aa2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009aa6:	6810      	ldr	r0, [r2, #0]
 8009aa8:	4c1b      	ldr	r4, [pc, #108]	; (8009b18 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8009aaa:	42a0      	cmp	r0, r4
 8009aac:	d00c      	beq.n	8009ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8009aae:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009ab2:	42a0      	cmp	r0, r4
 8009ab4:	d01e      	beq.n	8009af4 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
  htim->Instance->BDTR = tmpbdtr;
 8009ab6:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8009ab8:	2000      	movs	r0, #0
 8009aba:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
}
 8009abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ac2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009ac4:	2002      	movs	r0, #2
}
 8009ac6:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009acc:	69cc      	ldr	r4, [r1, #28]
 8009ace:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ad0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ad4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8009ad6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ade:	6a0c      	ldr	r4, [r1, #32]
 8009ae0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ae2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009ae6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8009ae8:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009aea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009aee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009af0:	430b      	orrs	r3, r1
 8009af2:	e7e0      	b.n	8009ab6 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009af8:	69cc      	ldr	r4, [r1, #28]
 8009afa:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009afc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b00:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8009b02:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b0a:	6a0c      	ldr	r4, [r1, #32]
 8009b0c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b0e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b12:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8009b14:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009b16:	e7e8      	b.n	8009aea <HAL_TIMEx_ConfigBreakDeadTime+0x92>
 8009b18:	40012c00 	.word	0x40012c00

08009b1c <HAL_TIMEx_CommutCallback>:
}
 8009b1c:	4770      	bx	lr

08009b1e <HAL_TIMEx_BreakCallback>:
}
 8009b1e:	4770      	bx	lr

08009b20 <HAL_TIMEx_Break2Callback>:
}
 8009b20:	4770      	bx	lr

08009b22 <HAL_TIMEx_EncoderIndexCallback>:
}
 8009b22:	4770      	bx	lr

08009b24 <HAL_TIMEx_DirectionChangeCallback>:
}
 8009b24:	4770      	bx	lr

08009b26 <HAL_TIMEx_IndexErrorCallback>:
}
 8009b26:	4770      	bx	lr

08009b28 <HAL_TIMEx_TransitionErrorCallback>:
}
 8009b28:	4770      	bx	lr

08009b2a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009b2a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	e852 3f00 	ldrex	r3, [r2]
 8009b30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b34:	e842 3100 	strex	r1, r3, [r2]
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	d1f6      	bne.n	8009b2a <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b3c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	f102 0308 	add.w	r3, r2, #8
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4a:	3208      	adds	r2, #8
 8009b4c:	e842 3100 	strex	r1, r3, [r2]
 8009b50:	2900      	cmp	r1, #0
 8009b52:	d1f3      	bne.n	8009b3c <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b54:	2320      	movs	r3, #32
 8009b56:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8009b5a:	4770      	bx	lr

08009b5c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	e852 3f00 	ldrex	r3, [r2]
 8009b62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	e842 3100 	strex	r1, r3, [r2]
 8009b6a:	2900      	cmp	r1, #0
 8009b6c:	d1f6      	bne.n	8009b5c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	f102 0308 	add.w	r3, r2, #8
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b7c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	3208      	adds	r2, #8
 8009b82:	e842 3100 	strex	r1, r3, [r2]
 8009b86:	2900      	cmp	r1, #0
 8009b88:	d1f1      	bne.n	8009b6e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b8a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d006      	beq.n	8009b9e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b90:	2320      	movs	r3, #32
 8009b92:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b96:	2300      	movs	r3, #0
 8009b98:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b9a:	6703      	str	r3, [r0, #112]	; 0x70
}
 8009b9c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba0:	e852 3f00 	ldrex	r3, [r2]
 8009ba4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	e842 3100 	strex	r1, r3, [r2]
 8009bac:	2900      	cmp	r1, #0
 8009bae:	d1f6      	bne.n	8009b9e <UART_EndRxTransfer+0x42>
 8009bb0:	e7ee      	b.n	8009b90 <UART_EndRxTransfer+0x34>
	...

08009bb4 <HAL_UART_Transmit_DMA>:
{
 8009bb4:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009bb6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8009bba:	2a20      	cmp	r2, #32
 8009bbc:	d14a      	bne.n	8009c54 <HAL_UART_Transmit_DMA+0xa0>
{
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8009bc2:	2900      	cmp	r1, #0
 8009bc4:	d048      	beq.n	8009c58 <HAL_UART_Transmit_DMA+0xa4>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d048      	beq.n	8009c5c <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 8009bca:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009bce:	2a01      	cmp	r2, #1
 8009bd0:	d046      	beq.n	8009c60 <HAL_UART_Transmit_DMA+0xac>
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8009bd8:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009bda:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8009bde:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009be8:	2221      	movs	r2, #33	; 0x21
 8009bea:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8009bee:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009bf0:	b1e2      	cbz	r2, 8009c2c <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009bf2:	491c      	ldr	r1, [pc, #112]	; (8009c64 <HAL_UART_Transmit_DMA+0xb0>)
 8009bf4:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009bf6:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009bf8:	491b      	ldr	r1, [pc, #108]	; (8009c68 <HAL_UART_Transmit_DMA+0xb4>)
 8009bfa:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009bfc:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009bfe:	491b      	ldr	r1, [pc, #108]	; (8009c6c <HAL_UART_Transmit_DMA+0xb8>)
 8009c00:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8009c02:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009c04:	2100      	movs	r1, #0
 8009c06:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009c08:	6802      	ldr	r2, [r0, #0]
 8009c0a:	3228      	adds	r2, #40	; 0x28
 8009c0c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009c0e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8009c10:	f7fc fdf4 	bl	80067fc <HAL_DMA_Start_IT>
 8009c14:	b150      	cbz	r0, 8009c2c <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c16:	2310      	movs	r3, #16
 8009c18:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8009c22:	2320      	movs	r3, #32
 8009c24:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8009c28:	2001      	movs	r0, #1
 8009c2a:	e012      	b.n	8009c52 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	2240      	movs	r2, #64	; 0x40
 8009c30:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8009c32:	2300      	movs	r3, #0
 8009c34:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	f102 0308 	add.w	r3, r2, #8
 8009c3e:	e853 3f00 	ldrex	r3, [r3]
 8009c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c46:	3208      	adds	r2, #8
 8009c48:	e842 3100 	strex	r1, r3, [r2]
 8009c4c:	2900      	cmp	r1, #0
 8009c4e:	d1f3      	bne.n	8009c38 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 8009c50:	2000      	movs	r0, #0
}
 8009c52:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009c54:	2002      	movs	r0, #2
}
 8009c56:	4770      	bx	lr
      return HAL_ERROR;
 8009c58:	2001      	movs	r0, #1
 8009c5a:	e7fa      	b.n	8009c52 <HAL_UART_Transmit_DMA+0x9e>
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	e7f8      	b.n	8009c52 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 8009c60:	2002      	movs	r0, #2
 8009c62:	e7f6      	b.n	8009c52 <HAL_UART_Transmit_DMA+0x9e>
 8009c64:	08009c73 	.word	0x08009c73
 8009c68:	08009cbd 	.word	0x08009cbd
 8009c6c:	08009cc9 	.word	0x08009cc9

08009c70 <HAL_UART_TxCpltCallback>:
}
 8009c70:	4770      	bx	lr

08009c72 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c72:	b508      	push	{r3, lr}
 8009c74:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c76:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f013 0f20 	tst.w	r3, #32
 8009c80:	d118      	bne.n	8009cb4 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c88:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	f102 0308 	add.w	r3, r2, #8
 8009c8e:	e853 3f00 	ldrex	r3, [r3]
 8009c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c96:	3208      	adds	r2, #8
 8009c98:	e842 3100 	strex	r1, r3, [r2]
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	d1f3      	bne.n	8009c88 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ca0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca2:	e852 3f00 	ldrex	r3, [r2]
 8009ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	e842 3100 	strex	r1, r3, [r2]
 8009cae:	2900      	cmp	r1, #0
 8009cb0:	d1f6      	bne.n	8009ca0 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cb2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8009cb4:	f7ff ffdc 	bl	8009c70 <HAL_UART_TxCpltCallback>
}
 8009cb8:	e7fb      	b.n	8009cb2 <UART_DMATransmitCplt+0x40>

08009cba <HAL_UART_TxHalfCpltCallback>:
}
 8009cba:	4770      	bx	lr

08009cbc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cbc:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009cbe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009cc0:	f7ff fffb 	bl	8009cba <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cc4:	bd08      	pop	{r3, pc}

08009cc6 <HAL_UART_ErrorCallback>:
}
 8009cc6:	4770      	bx	lr

08009cc8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cc8:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cca:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ccc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009cd0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009cdc:	d001      	beq.n	8009ce2 <UART_DMAError+0x1a>
 8009cde:	2a21      	cmp	r2, #33	; 0x21
 8009ce0:	d010      	beq.n	8009d04 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009cea:	d001      	beq.n	8009cf0 <UART_DMAError+0x28>
 8009cec:	2d22      	cmp	r5, #34	; 0x22
 8009cee:	d010      	beq.n	8009d12 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cf0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009cf4:	f043 0310 	orr.w	r3, r3, #16
 8009cf8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f7ff ffe2 	bl	8009cc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff ff0d 	bl	8009b2a <UART_EndTxTransfer>
 8009d10:	e7e7      	b.n	8009ce2 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f7ff ff1f 	bl	8009b5c <UART_EndRxTransfer>
 8009d1e:	e7e7      	b.n	8009cf0 <UART_DMAError+0x28>

08009d20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d20:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d22:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009d2a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d2e:	f7ff ffca 	bl	8009cc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d32:	bd08      	pop	{r3, pc}

08009d34 <HAL_UARTEx_RxEventCallback>:
}
 8009d34:	4770      	bx	lr
	...

08009d38 <HAL_UART_IRQHandler>:
{
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d3c:	6802      	ldr	r2, [r0, #0]
 8009d3e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d40:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d42:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8009d44:	f640 0c0f 	movw	ip, #2063	; 0x80f
 8009d48:	ea13 0f0c 	tst.w	r3, ip
 8009d4c:	d10e      	bne.n	8009d6c <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d4e:	f013 0f20 	tst.w	r3, #32
 8009d52:	d014      	beq.n	8009d7e <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d54:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d58:	f000 5580 	and.w	r5, r0, #268435456	; 0x10000000
 8009d5c:	ea5c 0c05 	orrs.w	ip, ip, r5
 8009d60:	d00d      	beq.n	8009d7e <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 8009d62:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009d64:	b3a3      	cbz	r3, 8009dd0 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 8009d66:	4620      	mov	r0, r4
 8009d68:	4798      	blx	r3
 8009d6a:	e031      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009d6c:	4db5      	ldr	r5, [pc, #724]	; (800a044 <HAL_UART_IRQHandler+0x30c>)
 8009d6e:	4005      	ands	r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009d70:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 800a04c <HAL_UART_IRQHandler+0x314>
 8009d74:	ea01 0c0c 	and.w	ip, r1, ip
 8009d78:	ea5c 0c05 	orrs.w	ip, ip, r5
 8009d7c:	d129      	bne.n	8009dd2 <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d7e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8009d80:	2d01      	cmp	r5, #1
 8009d82:	f000 80c0 	beq.w	8009f06 <HAL_UART_IRQHandler+0x1ce>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d86:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009d8a:	d003      	beq.n	8009d94 <HAL_UART_IRQHandler+0x5c>
 8009d8c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8009d90:	f040 8151 	bne.w	800a036 <HAL_UART_IRQHandler+0x2fe>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009d94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d98:	d006      	beq.n	8009da8 <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d9a:	f001 0280 	and.w	r2, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d9e:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 8009da2:	4302      	orrs	r2, r0
 8009da4:	f040 8154 	bne.w	800a050 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009da8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009dac:	d003      	beq.n	8009db6 <HAL_UART_IRQHandler+0x7e>
 8009dae:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009db2:	f040 8154 	bne.w	800a05e <HAL_UART_IRQHandler+0x326>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009db6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8009dba:	d003      	beq.n	8009dc4 <HAL_UART_IRQHandler+0x8c>
 8009dbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8009dc0:	f040 815f 	bne.w	800a082 <HAL_UART_IRQHandler+0x34a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009dc4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009dc8:	d002      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x98>
 8009dca:	2900      	cmp	r1, #0
 8009dcc:	f2c0 815d 	blt.w	800a08a <HAL_UART_IRQHandler+0x352>
}
 8009dd0:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dd2:	f013 0f01 	tst.w	r3, #1
 8009dd6:	d009      	beq.n	8009dec <HAL_UART_IRQHandler+0xb4>
 8009dd8:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009ddc:	d006      	beq.n	8009dec <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009dde:	2601      	movs	r6, #1
 8009de0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009de2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009de6:	4332      	orrs	r2, r6
 8009de8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dec:	f013 0f02 	tst.w	r3, #2
 8009df0:	d00f      	beq.n	8009e12 <HAL_UART_IRQHandler+0xda>
 8009df2:	f010 0f01 	tst.w	r0, #1
 8009df6:	d01b      	beq.n	8009e30 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009df8:	6822      	ldr	r2, [r4, #0]
 8009dfa:	2602      	movs	r6, #2
 8009dfc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dfe:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e02:	f042 0204 	orr.w	r2, r2, #4
 8009e06:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e0a:	f013 0f04 	tst.w	r3, #4
 8009e0e:	d106      	bne.n	8009e1e <HAL_UART_IRQHandler+0xe6>
 8009e10:	e00e      	b.n	8009e30 <HAL_UART_IRQHandler+0xf8>
 8009e12:	f013 0f04 	tst.w	r3, #4
 8009e16:	d00b      	beq.n	8009e30 <HAL_UART_IRQHandler+0xf8>
 8009e18:	f010 0f01 	tst.w	r0, #1
 8009e1c:	d008      	beq.n	8009e30 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e1e:	6822      	ldr	r2, [r4, #0]
 8009e20:	2604      	movs	r6, #4
 8009e22:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e24:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e28:	f042 0202 	orr.w	r2, r2, #2
 8009e2c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e30:	f013 0f08 	tst.w	r3, #8
 8009e34:	d00b      	beq.n	8009e4e <HAL_UART_IRQHandler+0x116>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e36:	f001 0220 	and.w	r2, r1, #32
 8009e3a:	432a      	orrs	r2, r5
 8009e3c:	d007      	beq.n	8009e4e <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e3e:	6822      	ldr	r2, [r4, #0]
 8009e40:	2508      	movs	r5, #8
 8009e42:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e44:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e48:	432a      	orrs	r2, r5
 8009e4a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8009e52:	d00c      	beq.n	8009e6e <HAL_UART_IRQHandler+0x136>
 8009e54:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 8009e58:	d009      	beq.n	8009e6e <HAL_UART_IRQHandler+0x136>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e5a:	6822      	ldr	r2, [r4, #0]
 8009e5c:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8009e60:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e62:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e66:	f042 0220 	orr.w	r2, r2, #32
 8009e6a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e6e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e72:	2a00      	cmp	r2, #0
 8009e74:	d0ac      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e76:	f013 0f20 	tst.w	r3, #32
 8009e7a:	d009      	beq.n	8009e90 <HAL_UART_IRQHandler+0x158>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e7c:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e80:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 8009e84:	4301      	orrs	r1, r0
 8009e86:	d003      	beq.n	8009e90 <HAL_UART_IRQHandler+0x158>
        if (huart->RxISR != NULL)
 8009e88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009e8a:	b10b      	cbz	r3, 8009e90 <HAL_UART_IRQHandler+0x158>
          huart->RxISR(huart);
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8009e90:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e9c:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	d029      	beq.n	8009ef8 <HAL_UART_IRQHandler+0x1c0>
        UART_EndRxTransfer(huart);
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f7ff fe59 	bl	8009b5c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009eb2:	d01d      	beq.n	8009ef0 <HAL_UART_IRQHandler+0x1b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	f102 0308 	add.w	r3, r2, #8
 8009eba:	e853 3f00 	ldrex	r3, [r3]
 8009ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	3208      	adds	r2, #8
 8009ec4:	e842 3100 	strex	r1, r3, [r2]
 8009ec8:	2900      	cmp	r1, #0
 8009eca:	d1f3      	bne.n	8009eb4 <HAL_UART_IRQHandler+0x17c>
          if (huart->hdmarx != NULL)
 8009ecc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009ece:	b15b      	cbz	r3, 8009ee8 <HAL_UART_IRQHandler+0x1b0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ed0:	4a5d      	ldr	r2, [pc, #372]	; (800a048 <HAL_UART_IRQHandler+0x310>)
 8009ed2:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ed4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009ed6:	f7fc fd11 	bl	80068fc <HAL_DMA_Abort_IT>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f43f af78 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ee0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009ee2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009ee4:	4798      	blx	r3
 8009ee6:	e773      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f7ff feec 	bl	8009cc6 <HAL_UART_ErrorCallback>
 8009eee:	e76f      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f7ff fee8 	bl	8009cc6 <HAL_UART_ErrorCallback>
 8009ef6:	e76b      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f7ff fee4 	bl	8009cc6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009efe:	2300      	movs	r3, #0
 8009f00:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009f04:	e764      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f06:	f013 0f10 	tst.w	r3, #16
 8009f0a:	f43f af3c 	beq.w	8009d86 <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f0e:	f011 0f10 	tst.w	r1, #16
 8009f12:	f43f af38 	beq.w	8009d86 <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f16:	2310      	movs	r3, #16
 8009f18:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f22:	d04e      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x28a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f24:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009f26:	6813      	ldr	r3, [r2, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f43f af4f 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f32:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009f36:	4299      	cmp	r1, r3
 8009f38:	f67f af4a 	bls.w	8009dd0 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 8009f3c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f40:	6813      	ldr	r3, [r2, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f013 0f20 	tst.w	r3, #32
 8009f48:	d131      	bne.n	8009fae <HAL_UART_IRQHandler+0x276>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f4a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4c:	e852 3f00 	ldrex	r3, [r2]
 8009f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f54:	e842 3100 	strex	r1, r3, [r2]
 8009f58:	2900      	cmp	r1, #0
 8009f5a:	d1f6      	bne.n	8009f4a <HAL_UART_IRQHandler+0x212>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5e:	f102 0308 	add.w	r3, r2, #8
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	3208      	adds	r2, #8
 8009f6c:	e842 3100 	strex	r1, r3, [r2]
 8009f70:	2900      	cmp	r1, #0
 8009f72:	d1f3      	bne.n	8009f5c <HAL_UART_IRQHandler+0x224>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f74:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f76:	f102 0308 	add.w	r3, r2, #8
 8009f7a:	e853 3f00 	ldrex	r3, [r3]
 8009f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	3208      	adds	r2, #8
 8009f84:	e842 3100 	strex	r1, r3, [r2]
 8009f88:	2900      	cmp	r1, #0
 8009f8a:	d1f3      	bne.n	8009f74 <HAL_UART_IRQHandler+0x23c>
          huart->RxState = HAL_UART_STATE_READY;
 8009f8c:	2320      	movs	r3, #32
 8009f8e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f92:	2300      	movs	r3, #0
 8009f94:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f98:	e852 3f00 	ldrex	r3, [r2]
 8009f9c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa0:	e842 3100 	strex	r1, r3, [r2]
 8009fa4:	2900      	cmp	r1, #0
 8009fa6:	d1f6      	bne.n	8009f96 <HAL_UART_IRQHandler+0x25e>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fa8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009faa:	f7fc fc71 	bl	8006890 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009fb2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009fb6:	1ac9      	subs	r1, r1, r3
 8009fb8:	b289      	uxth	r1, r1
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f7ff feba 	bl	8009d34 <HAL_UARTEx_RxEventCallback>
 8009fc0:	e706      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fc2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009fc6:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8009fc8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f43f aefe 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fd4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009fd8:	1a89      	subs	r1, r1, r2
 8009fda:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	f43f aef7 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fe2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	e852 3f00 	ldrex	r3, [r2]
 8009fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	e842 3000 	strex	r0, r3, [r2]
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d1f6      	bne.n	8009fe2 <HAL_UART_IRQHandler+0x2aa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ff4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	f102 0308 	add.w	r3, r2, #8
 8009ffa:	e853 3f00 	ldrex	r3, [r3]
 8009ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a002:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	3208      	adds	r2, #8
 800a008:	e842 3000 	strex	r0, r3, [r2]
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d1f1      	bne.n	8009ff4 <HAL_UART_IRQHandler+0x2bc>
        huart->RxState = HAL_UART_STATE_READY;
 800a010:	2320      	movs	r3, #32
 800a012:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a016:	2300      	movs	r3, #0
 800a018:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800a01a:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a01c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	e852 3f00 	ldrex	r3, [r2]
 800a022:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	e842 3000 	strex	r0, r3, [r2]
 800a02a:	2800      	cmp	r0, #0
 800a02c:	d1f6      	bne.n	800a01c <HAL_UART_IRQHandler+0x2e4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a02e:	4620      	mov	r0, r4
 800a030:	f7ff fe80 	bl	8009d34 <HAL_UARTEx_RxEventCallback>
 800a034:	e6cc      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a036:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a03a:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fb47 	bl	800a6d0 <HAL_UARTEx_WakeupCallback>
    return;
 800a042:	e6c5      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
 800a044:	10000001 	.word	0x10000001
 800a048:	08009d21 	.word	0x08009d21
 800a04c:	04000120 	.word	0x04000120
    if (huart->TxISR != NULL)
 800a050:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a052:	2b00      	cmp	r3, #0
 800a054:	f43f aebc 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 800a058:	4620      	mov	r0, r4
 800a05a:	4798      	blx	r3
 800a05c:	e6b8      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a05e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	e852 3f00 	ldrex	r3, [r2]
 800a064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a068:	e842 3100 	strex	r1, r3, [r2]
 800a06c:	2900      	cmp	r1, #0
 800a06e:	d1f6      	bne.n	800a05e <HAL_UART_IRQHandler+0x326>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a070:	2320      	movs	r3, #32
 800a072:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a076:	2300      	movs	r3, #0
 800a078:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a07a:	4620      	mov	r0, r4
 800a07c:	f7ff fdf8 	bl	8009c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a080:	e6a6      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fb26 	bl	800a6d4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800a088:	e6a2      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 fb21 	bl	800a6d2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800a090:	e69e      	b.n	8009dd0 <HAL_UART_IRQHandler+0x98>
 800a092:	bf00      	nop

0800a094 <UART_SetConfig>:
{
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800a098:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a09a:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a09c:	68a3      	ldr	r3, [r4, #8]
 800a09e:	6922      	ldr	r2, [r4, #16]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	6962      	ldr	r2, [r4, #20]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	69e2      	ldr	r2, [r4, #28]
 800a0a8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0aa:	4aa4      	ldr	r2, [pc, #656]	; (800a33c <UART_SetConfig+0x2a8>)
 800a0ac:	4002      	ands	r2, r0
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0b2:	6822      	ldr	r2, [r4, #0]
 800a0b4:	6853      	ldr	r3, [r2, #4]
 800a0b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a0ba:	68e1      	ldr	r1, [r4, #12]
 800a0bc:	430b      	orrs	r3, r1
 800a0be:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0c0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0c2:	6822      	ldr	r2, [r4, #0]
 800a0c4:	4b9e      	ldr	r3, [pc, #632]	; (800a340 <UART_SetConfig+0x2ac>)
 800a0c6:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800a0c8:	bf1c      	itt	ne
 800a0ca:	6a23      	ldrne	r3, [r4, #32]
 800a0cc:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0ce:	6893      	ldr	r3, [r2, #8]
 800a0d0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a0d4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a0d8:	430b      	orrs	r3, r1
 800a0da:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0dc:	6822      	ldr	r2, [r4, #0]
 800a0de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a0e0:	f023 030f 	bic.w	r3, r3, #15
 800a0e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a0e6:	430b      	orrs	r3, r1
 800a0e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	4a95      	ldr	r2, [pc, #596]	; (800a344 <UART_SetConfig+0x2b0>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d01f      	beq.n	800a132 <UART_SetConfig+0x9e>
 800a0f2:	4a95      	ldr	r2, [pc, #596]	; (800a348 <UART_SetConfig+0x2b4>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d02e      	beq.n	800a156 <UART_SetConfig+0xc2>
 800a0f8:	4a94      	ldr	r2, [pc, #592]	; (800a34c <UART_SetConfig+0x2b8>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d048      	beq.n	800a190 <UART_SetConfig+0xfc>
 800a0fe:	4a94      	ldr	r2, [pc, #592]	; (800a350 <UART_SetConfig+0x2bc>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d05b      	beq.n	800a1bc <UART_SetConfig+0x128>
 800a104:	4a8e      	ldr	r2, [pc, #568]	; (800a340 <UART_SetConfig+0x2ac>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d06d      	beq.n	800a1e6 <UART_SetConfig+0x152>
 800a10a:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a10c:	69e0      	ldr	r0, [r4, #28]
 800a10e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a112:	f000 80de 	beq.w	800a2d2 <UART_SetConfig+0x23e>
    switch (clocksource)
 800a116:	2a08      	cmp	r2, #8
 800a118:	f200 815e 	bhi.w	800a3d8 <UART_SetConfig+0x344>
 800a11c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a120:	01440122 	.word	0x01440122
 800a124:	015c014a 	.word	0x015c014a
 800a128:	015c0147 	.word	0x015c0147
 800a12c:	015c015c 	.word	0x015c015c
 800a130:	010a      	.short	0x010a
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a132:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800a136:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a13a:	f002 0203 	and.w	r2, r2, #3
 800a13e:	2a03      	cmp	r2, #3
 800a140:	d807      	bhi.n	800a152 <UART_SetConfig+0xbe>
 800a142:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a146:	006b      	.short	0x006b
 800a148:	014f0004 	.word	0x014f0004
 800a14c:	0151      	.short	0x0151
 800a14e:	2204      	movs	r2, #4
 800a150:	e7dc      	b.n	800a10c <UART_SetConfig+0x78>
 800a152:	2210      	movs	r2, #16
 800a154:	e7da      	b.n	800a10c <UART_SetConfig+0x78>
 800a156:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800a15a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a15e:	f002 020c 	and.w	r2, r2, #12
 800a162:	2a0c      	cmp	r2, #12
 800a164:	d812      	bhi.n	800a18c <UART_SetConfig+0xf8>
 800a166:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a16a:	0077      	.short	0x0077
 800a16c:	00110011 	.word	0x00110011
 800a170:	000d0011 	.word	0x000d0011
 800a174:	00110011 	.word	0x00110011
 800a178:	01410011 	.word	0x01410011
 800a17c:	00110011 	.word	0x00110011
 800a180:	000f0011 	.word	0x000f0011
 800a184:	2204      	movs	r2, #4
 800a186:	e7c1      	b.n	800a10c <UART_SetConfig+0x78>
 800a188:	2208      	movs	r2, #8
 800a18a:	e7bf      	b.n	800a10c <UART_SetConfig+0x78>
 800a18c:	2210      	movs	r2, #16
 800a18e:	e7bd      	b.n	800a10c <UART_SetConfig+0x78>
 800a190:	4b70      	ldr	r3, [pc, #448]	; (800a354 <UART_SetConfig+0x2c0>)
 800a192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a196:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a19a:	2b20      	cmp	r3, #32
 800a19c:	f000 8128 	beq.w	800a3f0 <UART_SetConfig+0x35c>
 800a1a0:	d807      	bhi.n	800a1b2 <UART_SetConfig+0x11e>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 8091 	beq.w	800a2ca <UART_SetConfig+0x236>
 800a1a8:	2b10      	cmp	r3, #16
 800a1aa:	bf14      	ite	ne
 800a1ac:	2210      	movne	r2, #16
 800a1ae:	2204      	moveq	r2, #4
 800a1b0:	e7ac      	b.n	800a10c <UART_SetConfig+0x78>
 800a1b2:	2b30      	cmp	r3, #48	; 0x30
 800a1b4:	bf14      	ite	ne
 800a1b6:	2210      	movne	r2, #16
 800a1b8:	2208      	moveq	r2, #8
 800a1ba:	e7a7      	b.n	800a10c <UART_SetConfig+0x78>
 800a1bc:	4b65      	ldr	r3, [pc, #404]	; (800a354 <UART_SetConfig+0x2c0>)
 800a1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a1c6:	2b80      	cmp	r3, #128	; 0x80
 800a1c8:	f000 8114 	beq.w	800a3f4 <UART_SetConfig+0x360>
 800a1cc:	d806      	bhi.n	800a1dc <UART_SetConfig+0x148>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d07d      	beq.n	800a2ce <UART_SetConfig+0x23a>
 800a1d2:	2b40      	cmp	r3, #64	; 0x40
 800a1d4:	bf14      	ite	ne
 800a1d6:	2210      	movne	r2, #16
 800a1d8:	2204      	moveq	r2, #4
 800a1da:	e797      	b.n	800a10c <UART_SetConfig+0x78>
 800a1dc:	2bc0      	cmp	r3, #192	; 0xc0
 800a1de:	bf14      	ite	ne
 800a1e0:	2210      	movne	r2, #16
 800a1e2:	2208      	moveq	r2, #8
 800a1e4:	e792      	b.n	800a10c <UART_SetConfig+0x78>
 800a1e6:	4b5b      	ldr	r3, [pc, #364]	; (800a354 <UART_SetConfig+0x2c0>)
 800a1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a1f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1f4:	d064      	beq.n	800a2c0 <UART_SetConfig+0x22c>
 800a1f6:	d809      	bhi.n	800a20c <UART_SetConfig+0x178>
 800a1f8:	b393      	cbz	r3, 800a260 <UART_SetConfig+0x1cc>
 800a1fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1fe:	bf18      	it	ne
 800a200:	2001      	movne	r0, #1
 800a202:	f040 80c8 	bne.w	800a396 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 800a206:	f7fd fd7b 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
        break;
 800a20a:	e02b      	b.n	800a264 <UART_SetConfig+0x1d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a20c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a210:	d102      	bne.n	800a218 <UART_SetConfig+0x184>
        pclk = (uint32_t) LSE_VALUE;
 800a212:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a216:	e028      	b.n	800a26a <UART_SetConfig+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a218:	2001      	movs	r0, #1
 800a21a:	e0bc      	b.n	800a396 <UART_SetConfig+0x302>
 800a21c:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 800a21e:	4948      	ldr	r1, [pc, #288]	; (800a340 <UART_SetConfig+0x2ac>)
 800a220:	428b      	cmp	r3, r1
 800a222:	f47f af73 	bne.w	800a10c <UART_SetConfig+0x78>
    switch (clocksource)
 800a226:	2a08      	cmp	r2, #8
 800a228:	f200 80c6 	bhi.w	800a3b8 <UART_SetConfig+0x324>
 800a22c:	a301      	add	r3, pc, #4	; (adr r3, 800a234 <UART_SetConfig+0x1a0>)
 800a22e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800a232:	bf00      	nop
 800a234:	0800a261 	.word	0x0800a261
 800a238:	0800a3b9 	.word	0x0800a3b9
 800a23c:	0800a25d 	.word	0x0800a25d
 800a240:	0800a3b9 	.word	0x0800a3b9
 800a244:	0800a207 	.word	0x0800a207
 800a248:	0800a3b9 	.word	0x0800a3b9
 800a24c:	0800a3b9 	.word	0x0800a3b9
 800a250:	0800a3b9 	.word	0x0800a3b9
 800a254:	0800a2c5 	.word	0x0800a2c5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a258:	2200      	movs	r2, #0
 800a25a:	e7e0      	b.n	800a21e <UART_SetConfig+0x18a>
    switch (clocksource)
 800a25c:	483e      	ldr	r0, [pc, #248]	; (800a358 <UART_SetConfig+0x2c4>)
 800a25e:	e004      	b.n	800a26a <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a260:	f7fd fea6 	bl	8007fb0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a264:	2800      	cmp	r0, #0
 800a266:	f000 80a9 	beq.w	800a3bc <UART_SetConfig+0x328>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a26a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a26c:	4b3b      	ldr	r3, [pc, #236]	; (800a35c <UART_SetConfig+0x2c8>)
 800a26e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a272:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a276:	6865      	ldr	r5, [r4, #4]
 800a278:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a27c:	4299      	cmp	r1, r3
 800a27e:	f200 809f 	bhi.w	800a3c0 <UART_SetConfig+0x32c>
 800a282:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a286:	f200 809d 	bhi.w	800a3c4 <UART_SetConfig+0x330>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a28a:	2600      	movs	r6, #0
 800a28c:	4633      	mov	r3, r6
 800a28e:	4631      	mov	r1, r6
 800a290:	f7f6 fd22 	bl	8000cd8 <__aeabi_uldivmod>
 800a294:	0209      	lsls	r1, r1, #8
 800a296:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a29a:	0200      	lsls	r0, r0, #8
 800a29c:	086b      	lsrs	r3, r5, #1
 800a29e:	18c0      	adds	r0, r0, r3
 800a2a0:	462a      	mov	r2, r5
 800a2a2:	4633      	mov	r3, r6
 800a2a4:	f141 0100 	adc.w	r1, r1, #0
 800a2a8:	f7f6 fd16 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2ac:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800a2b0:	4b2b      	ldr	r3, [pc, #172]	; (800a360 <UART_SetConfig+0x2cc>)
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	f200 8088 	bhi.w	800a3c8 <UART_SetConfig+0x334>
          huart->Instance->BRR = usartdiv;
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	60d8      	str	r0, [r3, #12]
 800a2bc:	4630      	mov	r0, r6
 800a2be:	e06a      	b.n	800a396 <UART_SetConfig+0x302>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2c0:	4825      	ldr	r0, [pc, #148]	; (800a358 <UART_SetConfig+0x2c4>)
 800a2c2:	e7d2      	b.n	800a26a <UART_SetConfig+0x1d6>
        pclk = (uint32_t) LSE_VALUE;
 800a2c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a2c8:	e7cf      	b.n	800a26a <UART_SetConfig+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	e71e      	b.n	800a10c <UART_SetConfig+0x78>
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	e71c      	b.n	800a10c <UART_SetConfig+0x78>
    switch (clocksource)
 800a2d2:	2a08      	cmp	r2, #8
 800a2d4:	d87a      	bhi.n	800a3cc <UART_SetConfig+0x338>
 800a2d6:	e8df f002 	tbb	[pc, r2]
 800a2da:	2505      	.short	0x2505
 800a2dc:	7928792b 	.word	0x7928792b
 800a2e0:	7979      	.short	0x7979
 800a2e2:	09          	.byte	0x09
 800a2e3:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2e4:	f7fd fe64 	bl	8007fb0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d071      	beq.n	800a3d0 <UART_SetConfig+0x33c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2ec:	6862      	ldr	r2, [r4, #4]
 800a2ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a2f0:	4b1a      	ldr	r3, [pc, #104]	; (800a35c <UART_SetConfig+0x2c8>)
 800a2f2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a2f6:	fbb0 f0f3 	udiv	r0, r0, r3
 800a2fa:	0853      	lsrs	r3, r2, #1
 800a2fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a300:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a304:	f1a3 0110 	sub.w	r1, r3, #16
 800a308:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800a30c:	4291      	cmp	r1, r2
 800a30e:	d861      	bhi.n	800a3d4 <UART_SetConfig+0x340>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a310:	f023 020f 	bic.w	r2, r3, #15
 800a314:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800a316:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a318:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800a31c:	4313      	orrs	r3, r2
 800a31e:	60cb      	str	r3, [r1, #12]
 800a320:	2000      	movs	r0, #0
 800a322:	e038      	b.n	800a396 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a324:	f7fd fe56 	bl	8007fd4 <HAL_RCC_GetPCLK2Freq>
        break;
 800a328:	e7de      	b.n	800a2e8 <UART_SetConfig+0x254>
        pclk = HAL_RCC_GetSysClockFreq();
 800a32a:	f7fd fce9 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
        break;
 800a32e:	e7db      	b.n	800a2e8 <UART_SetConfig+0x254>
        pclk = (uint32_t) HSI_VALUE;
 800a330:	4809      	ldr	r0, [pc, #36]	; (800a358 <UART_SetConfig+0x2c4>)
 800a332:	e7db      	b.n	800a2ec <UART_SetConfig+0x258>
    switch (clocksource)
 800a334:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a338:	e018      	b.n	800a36c <UART_SetConfig+0x2d8>
 800a33a:	bf00      	nop
 800a33c:	cfff69f3 	.word	0xcfff69f3
 800a340:	40008000 	.word	0x40008000
 800a344:	40013800 	.word	0x40013800
 800a348:	40004400 	.word	0x40004400
 800a34c:	40004800 	.word	0x40004800
 800a350:	40004c00 	.word	0x40004c00
 800a354:	40021000 	.word	0x40021000
 800a358:	00f42400 	.word	0x00f42400
 800a35c:	0800f754 	.word	0x0800f754
 800a360:	000ffcff 	.word	0x000ffcff
        pclk = HAL_RCC_GetPCLK1Freq();
 800a364:	f7fd fe24 	bl	8007fb0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a368:	2800      	cmp	r0, #0
 800a36a:	d037      	beq.n	800a3dc <UART_SetConfig+0x348>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a36c:	6863      	ldr	r3, [r4, #4]
 800a36e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a370:	4a21      	ldr	r2, [pc, #132]	; (800a3f8 <UART_SetConfig+0x364>)
 800a372:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800a376:	fbb0 f0f2 	udiv	r0, r0, r2
 800a37a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a37e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a382:	f1a0 0210 	sub.w	r2, r0, #16
 800a386:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d828      	bhi.n	800a3e0 <UART_SetConfig+0x34c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	b280      	uxth	r0, r0
 800a392:	60d8      	str	r0, [r3, #12]
 800a394:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800a396:	2301      	movs	r3, #1
 800a398:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a39c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800a3a4:	6763      	str	r3, [r4, #116]	; 0x74
}
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3a8:	f7fd fe14 	bl	8007fd4 <HAL_RCC_GetPCLK2Freq>
        break;
 800a3ac:	e7dc      	b.n	800a368 <UART_SetConfig+0x2d4>
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ae:	f7fd fca7 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
        break;
 800a3b2:	e7d9      	b.n	800a368 <UART_SetConfig+0x2d4>
        pclk = (uint32_t) HSI_VALUE;
 800a3b4:	4811      	ldr	r0, [pc, #68]	; (800a3fc <UART_SetConfig+0x368>)
 800a3b6:	e7d9      	b.n	800a36c <UART_SetConfig+0x2d8>
    switch (clocksource)
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	e7ec      	b.n	800a396 <UART_SetConfig+0x302>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e7ea      	b.n	800a396 <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 800a3c0:	2001      	movs	r0, #1
 800a3c2:	e7e8      	b.n	800a396 <UART_SetConfig+0x302>
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	e7e6      	b.n	800a396 <UART_SetConfig+0x302>
          ret = HAL_ERROR;
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	e7e4      	b.n	800a396 <UART_SetConfig+0x302>
    switch (clocksource)
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	e7e2      	b.n	800a396 <UART_SetConfig+0x302>
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	e7e0      	b.n	800a396 <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 800a3d4:	2001      	movs	r0, #1
 800a3d6:	e7de      	b.n	800a396 <UART_SetConfig+0x302>
    switch (clocksource)
 800a3d8:	2001      	movs	r0, #1
 800a3da:	e7dc      	b.n	800a396 <UART_SetConfig+0x302>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e7da      	b.n	800a396 <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 800a3e0:	2001      	movs	r0, #1
 800a3e2:	e7d8      	b.n	800a396 <UART_SetConfig+0x302>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	e691      	b.n	800a10c <UART_SetConfig+0x78>
 800a3e8:	2208      	movs	r2, #8
 800a3ea:	e68f      	b.n	800a10c <UART_SetConfig+0x78>
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	e68d      	b.n	800a10c <UART_SetConfig+0x78>
 800a3f0:	2202      	movs	r2, #2
 800a3f2:	e68b      	b.n	800a10c <UART_SetConfig+0x78>
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	e689      	b.n	800a10c <UART_SetConfig+0x78>
 800a3f8:	0800f754 	.word	0x0800f754
 800a3fc:	00f42400 	.word	0x00f42400

0800a400 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a400:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a402:	f013 0f01 	tst.w	r3, #1
 800a406:	d006      	beq.n	800a416 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a408:	6802      	ldr	r2, [r0, #0]
 800a40a:	6853      	ldr	r3, [r2, #4]
 800a40c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a410:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a412:	430b      	orrs	r3, r1
 800a414:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a416:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a418:	f013 0f02 	tst.w	r3, #2
 800a41c:	d006      	beq.n	800a42c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a41e:	6802      	ldr	r2, [r0, #0]
 800a420:	6853      	ldr	r3, [r2, #4]
 800a422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a426:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a428:	430b      	orrs	r3, r1
 800a42a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a42c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a42e:	f013 0f04 	tst.w	r3, #4
 800a432:	d006      	beq.n	800a442 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a434:	6802      	ldr	r2, [r0, #0]
 800a436:	6853      	ldr	r3, [r2, #4]
 800a438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a43c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a43e:	430b      	orrs	r3, r1
 800a440:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a442:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a444:	f013 0f08 	tst.w	r3, #8
 800a448:	d006      	beq.n	800a458 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a44a:	6802      	ldr	r2, [r0, #0]
 800a44c:	6853      	ldr	r3, [r2, #4]
 800a44e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a452:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a454:	430b      	orrs	r3, r1
 800a456:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a458:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a45a:	f013 0f10 	tst.w	r3, #16
 800a45e:	d006      	beq.n	800a46e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a460:	6802      	ldr	r2, [r0, #0]
 800a462:	6893      	ldr	r3, [r2, #8]
 800a464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a468:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a46a:	430b      	orrs	r3, r1
 800a46c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a46e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a470:	f013 0f20 	tst.w	r3, #32
 800a474:	d006      	beq.n	800a484 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a476:	6802      	ldr	r2, [r0, #0]
 800a478:	6893      	ldr	r3, [r2, #8]
 800a47a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a47e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a480:	430b      	orrs	r3, r1
 800a482:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a484:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a486:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a48a:	d00a      	beq.n	800a4a2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a48c:	6802      	ldr	r2, [r0, #0]
 800a48e:	6853      	ldr	r3, [r2, #4]
 800a490:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a494:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a496:	430b      	orrs	r3, r1
 800a498:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a49a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a49c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4a0:	d00b      	beq.n	800a4ba <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a4a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a4a8:	d006      	beq.n	800a4b8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4aa:	6802      	ldr	r2, [r0, #0]
 800a4ac:	6853      	ldr	r3, [r2, #4]
 800a4ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a4b2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a4b4:	430b      	orrs	r3, r1
 800a4b6:	6053      	str	r3, [r2, #4]
}
 800a4b8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4ba:	6802      	ldr	r2, [r0, #0]
 800a4bc:	6853      	ldr	r3, [r2, #4]
 800a4be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a4c2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	6053      	str	r3, [r2, #4]
 800a4c8:	e7eb      	b.n	800a4a2 <UART_AdvFeatureConfig+0xa2>

0800a4ca <UART_WaitOnFlagUntilTimeout>:
{
 800a4ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	460e      	mov	r6, r1
 800a4d2:	4615      	mov	r5, r2
 800a4d4:	4699      	mov	r9, r3
 800a4d6:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4dc:	69dc      	ldr	r4, [r3, #28]
 800a4de:	ea36 0404 	bics.w	r4, r6, r4
 800a4e2:	bf0c      	ite	eq
 800a4e4:	2401      	moveq	r4, #1
 800a4e6:	2400      	movne	r4, #0
 800a4e8:	42ac      	cmp	r4, r5
 800a4ea:	d15a      	bne.n	800a5a2 <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 800a4ec:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a4f0:	d0f4      	beq.n	800a4dc <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f2:	f7fb f893 	bl	800561c <HAL_GetTick>
 800a4f6:	eba0 0009 	sub.w	r0, r0, r9
 800a4fa:	42b8      	cmp	r0, r7
 800a4fc:	d830      	bhi.n	800a560 <UART_WaitOnFlagUntilTimeout+0x96>
 800a4fe:	b37f      	cbz	r7, 800a560 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a500:	f8d8 3000 	ldr.w	r3, [r8]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	f012 0f04 	tst.w	r2, #4
 800a50a:	d0e5      	beq.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a50c:	69da      	ldr	r2, [r3, #28]
 800a50e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a512:	d0e1      	beq.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a518:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a51a:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	e852 3f00 	ldrex	r3, [r2]
 800a522:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a526:	e842 3100 	strex	r1, r3, [r2]
 800a52a:	2900      	cmp	r1, #0
 800a52c:	d1f5      	bne.n	800a51a <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a52e:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	f102 0308 	add.w	r3, r2, #8
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53e:	3208      	adds	r2, #8
 800a540:	e842 3100 	strex	r1, r3, [r2]
 800a544:	2900      	cmp	r1, #0
 800a546:	d1f2      	bne.n	800a52e <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800a548:	2320      	movs	r3, #32
 800a54a:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a54e:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a552:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800a556:	2300      	movs	r3, #0
 800a558:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 800a55c:	2003      	movs	r0, #3
 800a55e:	e021      	b.n	800a5a4 <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a560:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	e852 3f00 	ldrex	r3, [r2]
 800a568:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56c:	e842 3100 	strex	r1, r3, [r2]
 800a570:	2900      	cmp	r1, #0
 800a572:	d1f5      	bne.n	800a560 <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a574:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a578:	f102 0308 	add.w	r3, r2, #8
 800a57c:	e853 3f00 	ldrex	r3, [r3]
 800a580:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	3208      	adds	r2, #8
 800a586:	e842 3100 	strex	r1, r3, [r2]
 800a58a:	2900      	cmp	r1, #0
 800a58c:	d1f2      	bne.n	800a574 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800a58e:	2320      	movs	r3, #32
 800a590:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a594:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800a598:	2300      	movs	r3, #0
 800a59a:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 800a59e:	2003      	movs	r0, #3
 800a5a0:	e000      	b.n	800a5a4 <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 800a5a2:	2000      	movs	r0, #0
}
 800a5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a5a8 <UART_CheckIdleState>:
{
 800a5a8:	b530      	push	{r4, r5, lr}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a5b4:	f7fb f832 	bl	800561c <HAL_GetTick>
 800a5b8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5ba:	6822      	ldr	r2, [r4, #0]
 800a5bc:	6812      	ldr	r2, [r2, #0]
 800a5be:	f012 0f08 	tst.w	r2, #8
 800a5c2:	d10f      	bne.n	800a5e4 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f013 0f04 	tst.w	r3, #4
 800a5cc:	d118      	bne.n	800a600 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800a5ce:	2320      	movs	r3, #32
 800a5d0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a5d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d8:	2000      	movs	r0, #0
 800a5da:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800a5dc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a5e0:	b003      	add	sp, #12
 800a5e2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7ff ff69 	bl	800a4ca <UART_WaitOnFlagUntilTimeout>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d0e3      	beq.n	800a5c4 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800a5fc:	2003      	movs	r0, #3
 800a5fe:	e7ef      	b.n	800a5e0 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	462b      	mov	r3, r5
 800a608:	2200      	movs	r2, #0
 800a60a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a60e:	4620      	mov	r0, r4
 800a610:	f7ff ff5b 	bl	800a4ca <UART_WaitOnFlagUntilTimeout>
 800a614:	2800      	cmp	r0, #0
 800a616:	d0da      	beq.n	800a5ce <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800a618:	2003      	movs	r0, #3
 800a61a:	e7e1      	b.n	800a5e0 <UART_CheckIdleState+0x38>

0800a61c <HAL_UART_Init>:
  if (huart == NULL)
 800a61c:	b378      	cbz	r0, 800a67e <HAL_UART_Init+0x62>
{
 800a61e:	b510      	push	{r4, lr}
 800a620:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a622:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a626:	b30b      	cbz	r3, 800a66c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a628:	2324      	movs	r3, #36	; 0x24
 800a62a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a62e:	6822      	ldr	r2, [r4, #0]
 800a630:	6813      	ldr	r3, [r2, #0]
 800a632:	f023 0301 	bic.w	r3, r3, #1
 800a636:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a638:	4620      	mov	r0, r4
 800a63a:	f7ff fd2b 	bl	800a094 <UART_SetConfig>
 800a63e:	2801      	cmp	r0, #1
 800a640:	d013      	beq.n	800a66a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a642:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a644:	b9bb      	cbnz	r3, 800a676 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a646:	6822      	ldr	r2, [r4, #0]
 800a648:	6853      	ldr	r3, [r2, #4]
 800a64a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a64e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a650:	6822      	ldr	r2, [r4, #0]
 800a652:	6893      	ldr	r3, [r2, #8]
 800a654:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a658:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	6813      	ldr	r3, [r2, #0]
 800a65e:	f043 0301 	orr.w	r3, r3, #1
 800a662:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a664:	4620      	mov	r0, r4
 800a666:	f7ff ff9f 	bl	800a5a8 <UART_CheckIdleState>
}
 800a66a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a66c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a670:	f7fa fefe 	bl	8005470 <HAL_UART_MspInit>
 800a674:	e7d8      	b.n	800a628 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a676:	4620      	mov	r0, r4
 800a678:	f7ff fec2 	bl	800a400 <UART_AdvFeatureConfig>
 800a67c:	e7e3      	b.n	800a646 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a67e:	2001      	movs	r0, #1
}
 800a680:	4770      	bx	lr
	...

0800a684 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a684:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a686:	b92b      	cbnz	r3, 800a694 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800a688:	2301      	movs	r3, #1
 800a68a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a68e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800a692:	4770      	bx	lr
{
 800a694:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a696:	6803      	ldr	r3, [r0, #0]
 800a698:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a69a:	6899      	ldr	r1, [r3, #8]
 800a69c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a69e:	4d0a      	ldr	r5, [pc, #40]	; (800a6c8 <UARTEx_SetNbDataToProcess+0x44>)
 800a6a0:	5c6b      	ldrb	r3, [r5, r1]
 800a6a2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6a4:	4c09      	ldr	r4, [pc, #36]	; (800a6cc <UARTEx_SetNbDataToProcess+0x48>)
 800a6a6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6a8:	fb93 f3f1 	sdiv	r3, r3, r1
 800a6ac:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6b0:	f3c2 6242 	ubfx	r2, r2, #25, #3
 800a6b4:	5cab      	ldrb	r3, [r5, r2]
 800a6b6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6b8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6ba:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 800a6be:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800a6c2:	bc30      	pop	{r4, r5}
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	0800f774 	.word	0x0800f774
 800a6cc:	0800f76c 	.word	0x0800f76c

0800a6d0 <HAL_UARTEx_WakeupCallback>:
}
 800a6d0:	4770      	bx	lr

0800a6d2 <HAL_UARTEx_RxFifoFullCallback>:
}
 800a6d2:	4770      	bx	lr

0800a6d4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800a6d4:	4770      	bx	lr

0800a6d6 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800a6d6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d018      	beq.n	800a710 <HAL_UARTEx_DisableFifoMode+0x3a>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a6e4:	2324      	movs	r3, #36	; 0x24
 800a6e6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ea:	6803      	ldr	r3, [r0, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a6ee:	6819      	ldr	r1, [r3, #0]
 800a6f0:	f021 0101 	bic.w	r1, r1, #1
 800a6f4:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6f6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6fe:	6801      	ldr	r1, [r0, #0]
 800a700:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a702:	2220      	movs	r2, #32
 800a704:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a708:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800a70c:	4618      	mov	r0, r3
 800a70e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a710:	2002      	movs	r0, #2
}
 800a712:	4770      	bx	lr

0800a714 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800a714:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a716:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d01d      	beq.n	800a75a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800a71e:	4604      	mov	r4, r0
 800a720:	2301      	movs	r3, #1
 800a722:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a726:	2324      	movs	r3, #36	; 0x24
 800a728:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a72c:	6803      	ldr	r3, [r0, #0]
 800a72e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	f022 0201 	bic.w	r2, r2, #1
 800a736:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a738:	6802      	ldr	r2, [r0, #0]
 800a73a:	6893      	ldr	r3, [r2, #8]
 800a73c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a740:	4319      	orrs	r1, r3
 800a742:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a744:	f7ff ff9e 	bl	800a684 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a74c:	2320      	movs	r3, #32
 800a74e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a752:	2000      	movs	r0, #0
 800a754:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a758:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a75a:	2002      	movs	r0, #2
 800a75c:	e7fc      	b.n	800a758 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800a75e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800a75e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a760:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a764:	2b01      	cmp	r3, #1
 800a766:	d01d      	beq.n	800a7a4 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800a768:	4604      	mov	r4, r0
 800a76a:	2301      	movs	r3, #1
 800a76c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a770:	2324      	movs	r3, #36	; 0x24
 800a772:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a776:	6803      	ldr	r3, [r0, #0]
 800a778:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	f022 0201 	bic.w	r2, r2, #1
 800a780:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a782:	6802      	ldr	r2, [r0, #0]
 800a784:	6893      	ldr	r3, [r2, #8]
 800a786:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800a78a:	4319      	orrs	r1, r3
 800a78c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a78e:	f7ff ff79 	bl	800a684 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a796:	2320      	movs	r3, #32
 800a798:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a79c:	2000      	movs	r0, #0
 800a79e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a7a4:	2002      	movs	r0, #2
 800a7a6:	e7fc      	b.n	800a7a2 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800a7a8 <__cvt>:
 800a7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	ec55 4b10 	vmov	r4, r5, d0
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	460e      	mov	r6, r1
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	462b      	mov	r3, r5
 800a7b8:	bfbb      	ittet	lt
 800a7ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a7be:	461d      	movlt	r5, r3
 800a7c0:	2300      	movge	r3, #0
 800a7c2:	232d      	movlt	r3, #45	; 0x2d
 800a7c4:	700b      	strb	r3, [r1, #0]
 800a7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a7cc:	4691      	mov	r9, r2
 800a7ce:	f023 0820 	bic.w	r8, r3, #32
 800a7d2:	bfbc      	itt	lt
 800a7d4:	4622      	movlt	r2, r4
 800a7d6:	4614      	movlt	r4, r2
 800a7d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a7dc:	d005      	beq.n	800a7ea <__cvt+0x42>
 800a7de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a7e2:	d100      	bne.n	800a7e6 <__cvt+0x3e>
 800a7e4:	3601      	adds	r6, #1
 800a7e6:	2102      	movs	r1, #2
 800a7e8:	e000      	b.n	800a7ec <__cvt+0x44>
 800a7ea:	2103      	movs	r1, #3
 800a7ec:	ab03      	add	r3, sp, #12
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	ab02      	add	r3, sp, #8
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	ec45 4b10 	vmov	d0, r4, r5
 800a7f8:	4653      	mov	r3, sl
 800a7fa:	4632      	mov	r2, r6
 800a7fc:	f000 fea0 	bl	800b540 <_dtoa_r>
 800a800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a804:	4607      	mov	r7, r0
 800a806:	d102      	bne.n	800a80e <__cvt+0x66>
 800a808:	f019 0f01 	tst.w	r9, #1
 800a80c:	d022      	beq.n	800a854 <__cvt+0xac>
 800a80e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a812:	eb07 0906 	add.w	r9, r7, r6
 800a816:	d110      	bne.n	800a83a <__cvt+0x92>
 800a818:	783b      	ldrb	r3, [r7, #0]
 800a81a:	2b30      	cmp	r3, #48	; 0x30
 800a81c:	d10a      	bne.n	800a834 <__cvt+0x8c>
 800a81e:	2200      	movs	r2, #0
 800a820:	2300      	movs	r3, #0
 800a822:	4620      	mov	r0, r4
 800a824:	4629      	mov	r1, r5
 800a826:	f7f6 f977 	bl	8000b18 <__aeabi_dcmpeq>
 800a82a:	b918      	cbnz	r0, 800a834 <__cvt+0x8c>
 800a82c:	f1c6 0601 	rsb	r6, r6, #1
 800a830:	f8ca 6000 	str.w	r6, [sl]
 800a834:	f8da 3000 	ldr.w	r3, [sl]
 800a838:	4499      	add	r9, r3
 800a83a:	2200      	movs	r2, #0
 800a83c:	2300      	movs	r3, #0
 800a83e:	4620      	mov	r0, r4
 800a840:	4629      	mov	r1, r5
 800a842:	f7f6 f969 	bl	8000b18 <__aeabi_dcmpeq>
 800a846:	b108      	cbz	r0, 800a84c <__cvt+0xa4>
 800a848:	f8cd 900c 	str.w	r9, [sp, #12]
 800a84c:	2230      	movs	r2, #48	; 0x30
 800a84e:	9b03      	ldr	r3, [sp, #12]
 800a850:	454b      	cmp	r3, r9
 800a852:	d307      	bcc.n	800a864 <__cvt+0xbc>
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a858:	1bdb      	subs	r3, r3, r7
 800a85a:	4638      	mov	r0, r7
 800a85c:	6013      	str	r3, [r2, #0]
 800a85e:	b004      	add	sp, #16
 800a860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a864:	1c59      	adds	r1, r3, #1
 800a866:	9103      	str	r1, [sp, #12]
 800a868:	701a      	strb	r2, [r3, #0]
 800a86a:	e7f0      	b.n	800a84e <__cvt+0xa6>

0800a86c <__exponent>:
 800a86c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a86e:	4603      	mov	r3, r0
 800a870:	2900      	cmp	r1, #0
 800a872:	bfb8      	it	lt
 800a874:	4249      	neglt	r1, r1
 800a876:	f803 2b02 	strb.w	r2, [r3], #2
 800a87a:	bfb4      	ite	lt
 800a87c:	222d      	movlt	r2, #45	; 0x2d
 800a87e:	222b      	movge	r2, #43	; 0x2b
 800a880:	2909      	cmp	r1, #9
 800a882:	7042      	strb	r2, [r0, #1]
 800a884:	dd2a      	ble.n	800a8dc <__exponent+0x70>
 800a886:	f10d 0207 	add.w	r2, sp, #7
 800a88a:	4617      	mov	r7, r2
 800a88c:	260a      	movs	r6, #10
 800a88e:	4694      	mov	ip, r2
 800a890:	fb91 f5f6 	sdiv	r5, r1, r6
 800a894:	fb06 1415 	mls	r4, r6, r5, r1
 800a898:	3430      	adds	r4, #48	; 0x30
 800a89a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a89e:	460c      	mov	r4, r1
 800a8a0:	2c63      	cmp	r4, #99	; 0x63
 800a8a2:	f102 32ff 	add.w	r2, r2, #4294967295
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	dcf1      	bgt.n	800a88e <__exponent+0x22>
 800a8aa:	3130      	adds	r1, #48	; 0x30
 800a8ac:	f1ac 0402 	sub.w	r4, ip, #2
 800a8b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a8b4:	1c41      	adds	r1, r0, #1
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	42ba      	cmp	r2, r7
 800a8ba:	d30a      	bcc.n	800a8d2 <__exponent+0x66>
 800a8bc:	f10d 0209 	add.w	r2, sp, #9
 800a8c0:	eba2 020c 	sub.w	r2, r2, ip
 800a8c4:	42bc      	cmp	r4, r7
 800a8c6:	bf88      	it	hi
 800a8c8:	2200      	movhi	r2, #0
 800a8ca:	4413      	add	r3, r2
 800a8cc:	1a18      	subs	r0, r3, r0
 800a8ce:	b003      	add	sp, #12
 800a8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a8d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a8da:	e7ed      	b.n	800a8b8 <__exponent+0x4c>
 800a8dc:	2330      	movs	r3, #48	; 0x30
 800a8de:	3130      	adds	r1, #48	; 0x30
 800a8e0:	7083      	strb	r3, [r0, #2]
 800a8e2:	70c1      	strb	r1, [r0, #3]
 800a8e4:	1d03      	adds	r3, r0, #4
 800a8e6:	e7f1      	b.n	800a8cc <__exponent+0x60>

0800a8e8 <_printf_float>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	ed2d 8b02 	vpush	{d8}
 800a8f0:	b08d      	sub	sp, #52	; 0x34
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a8f8:	4616      	mov	r6, r2
 800a8fa:	461f      	mov	r7, r3
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	f000 fd0f 	bl	800b320 <_localeconv_r>
 800a902:	f8d0 a000 	ldr.w	sl, [r0]
 800a906:	4650      	mov	r0, sl
 800a908:	f7f5 fcda 	bl	80002c0 <strlen>
 800a90c:	2300      	movs	r3, #0
 800a90e:	930a      	str	r3, [sp, #40]	; 0x28
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	9305      	str	r3, [sp, #20]
 800a914:	f8d8 3000 	ldr.w	r3, [r8]
 800a918:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a91c:	3307      	adds	r3, #7
 800a91e:	f023 0307 	bic.w	r3, r3, #7
 800a922:	f103 0208 	add.w	r2, r3, #8
 800a926:	f8c8 2000 	str.w	r2, [r8]
 800a92a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a92e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a932:	9307      	str	r3, [sp, #28]
 800a934:	f8cd 8018 	str.w	r8, [sp, #24]
 800a938:	ee08 0a10 	vmov	s16, r0
 800a93c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a944:	4b9e      	ldr	r3, [pc, #632]	; (800abc0 <_printf_float+0x2d8>)
 800a946:	f04f 32ff 	mov.w	r2, #4294967295
 800a94a:	f7f6 f917 	bl	8000b7c <__aeabi_dcmpun>
 800a94e:	bb88      	cbnz	r0, 800a9b4 <_printf_float+0xcc>
 800a950:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a954:	4b9a      	ldr	r3, [pc, #616]	; (800abc0 <_printf_float+0x2d8>)
 800a956:	f04f 32ff 	mov.w	r2, #4294967295
 800a95a:	f7f6 f8f1 	bl	8000b40 <__aeabi_dcmple>
 800a95e:	bb48      	cbnz	r0, 800a9b4 <_printf_float+0xcc>
 800a960:	2200      	movs	r2, #0
 800a962:	2300      	movs	r3, #0
 800a964:	4640      	mov	r0, r8
 800a966:	4649      	mov	r1, r9
 800a968:	f7f6 f8e0 	bl	8000b2c <__aeabi_dcmplt>
 800a96c:	b110      	cbz	r0, 800a974 <_printf_float+0x8c>
 800a96e:	232d      	movs	r3, #45	; 0x2d
 800a970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a974:	4a93      	ldr	r2, [pc, #588]	; (800abc4 <_printf_float+0x2dc>)
 800a976:	4b94      	ldr	r3, [pc, #592]	; (800abc8 <_printf_float+0x2e0>)
 800a978:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a97c:	bf94      	ite	ls
 800a97e:	4690      	movls	r8, r2
 800a980:	4698      	movhi	r8, r3
 800a982:	2303      	movs	r3, #3
 800a984:	6123      	str	r3, [r4, #16]
 800a986:	9b05      	ldr	r3, [sp, #20]
 800a988:	f023 0304 	bic.w	r3, r3, #4
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	f04f 0900 	mov.w	r9, #0
 800a992:	9700      	str	r7, [sp, #0]
 800a994:	4633      	mov	r3, r6
 800a996:	aa0b      	add	r2, sp, #44	; 0x2c
 800a998:	4621      	mov	r1, r4
 800a99a:	4628      	mov	r0, r5
 800a99c:	f000 f9da 	bl	800ad54 <_printf_common>
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	f040 8090 	bne.w	800aac6 <_printf_float+0x1de>
 800a9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9aa:	b00d      	add	sp, #52	; 0x34
 800a9ac:	ecbd 8b02 	vpop	{d8}
 800a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b4:	4642      	mov	r2, r8
 800a9b6:	464b      	mov	r3, r9
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	4649      	mov	r1, r9
 800a9bc:	f7f6 f8de 	bl	8000b7c <__aeabi_dcmpun>
 800a9c0:	b140      	cbz	r0, 800a9d4 <_printf_float+0xec>
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	bfbc      	itt	lt
 800a9c8:	232d      	movlt	r3, #45	; 0x2d
 800a9ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a9ce:	4a7f      	ldr	r2, [pc, #508]	; (800abcc <_printf_float+0x2e4>)
 800a9d0:	4b7f      	ldr	r3, [pc, #508]	; (800abd0 <_printf_float+0x2e8>)
 800a9d2:	e7d1      	b.n	800a978 <_printf_float+0x90>
 800a9d4:	6863      	ldr	r3, [r4, #4]
 800a9d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a9da:	9206      	str	r2, [sp, #24]
 800a9dc:	1c5a      	adds	r2, r3, #1
 800a9de:	d13f      	bne.n	800aa60 <_printf_float+0x178>
 800a9e0:	2306      	movs	r3, #6
 800a9e2:	6063      	str	r3, [r4, #4]
 800a9e4:	9b05      	ldr	r3, [sp, #20]
 800a9e6:	6861      	ldr	r1, [r4, #4]
 800a9e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9303      	str	r3, [sp, #12]
 800a9f0:	ab0a      	add	r3, sp, #40	; 0x28
 800a9f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a9f6:	ab09      	add	r3, sp, #36	; 0x24
 800a9f8:	ec49 8b10 	vmov	d0, r8, r9
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	6022      	str	r2, [r4, #0]
 800aa00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa04:	4628      	mov	r0, r5
 800aa06:	f7ff fecf 	bl	800a7a8 <__cvt>
 800aa0a:	9b06      	ldr	r3, [sp, #24]
 800aa0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa0e:	2b47      	cmp	r3, #71	; 0x47
 800aa10:	4680      	mov	r8, r0
 800aa12:	d108      	bne.n	800aa26 <_printf_float+0x13e>
 800aa14:	1cc8      	adds	r0, r1, #3
 800aa16:	db02      	blt.n	800aa1e <_printf_float+0x136>
 800aa18:	6863      	ldr	r3, [r4, #4]
 800aa1a:	4299      	cmp	r1, r3
 800aa1c:	dd41      	ble.n	800aaa2 <_printf_float+0x1ba>
 800aa1e:	f1ab 0302 	sub.w	r3, fp, #2
 800aa22:	fa5f fb83 	uxtb.w	fp, r3
 800aa26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa2a:	d820      	bhi.n	800aa6e <_printf_float+0x186>
 800aa2c:	3901      	subs	r1, #1
 800aa2e:	465a      	mov	r2, fp
 800aa30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa34:	9109      	str	r1, [sp, #36]	; 0x24
 800aa36:	f7ff ff19 	bl	800a86c <__exponent>
 800aa3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa3c:	1813      	adds	r3, r2, r0
 800aa3e:	2a01      	cmp	r2, #1
 800aa40:	4681      	mov	r9, r0
 800aa42:	6123      	str	r3, [r4, #16]
 800aa44:	dc02      	bgt.n	800aa4c <_printf_float+0x164>
 800aa46:	6822      	ldr	r2, [r4, #0]
 800aa48:	07d2      	lsls	r2, r2, #31
 800aa4a:	d501      	bpl.n	800aa50 <_printf_float+0x168>
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	6123      	str	r3, [r4, #16]
 800aa50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d09c      	beq.n	800a992 <_printf_float+0xaa>
 800aa58:	232d      	movs	r3, #45	; 0x2d
 800aa5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa5e:	e798      	b.n	800a992 <_printf_float+0xaa>
 800aa60:	9a06      	ldr	r2, [sp, #24]
 800aa62:	2a47      	cmp	r2, #71	; 0x47
 800aa64:	d1be      	bne.n	800a9e4 <_printf_float+0xfc>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1bc      	bne.n	800a9e4 <_printf_float+0xfc>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e7b9      	b.n	800a9e2 <_printf_float+0xfa>
 800aa6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aa72:	d118      	bne.n	800aaa6 <_printf_float+0x1be>
 800aa74:	2900      	cmp	r1, #0
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	dd0b      	ble.n	800aa92 <_printf_float+0x1aa>
 800aa7a:	6121      	str	r1, [r4, #16]
 800aa7c:	b913      	cbnz	r3, 800aa84 <_printf_float+0x19c>
 800aa7e:	6822      	ldr	r2, [r4, #0]
 800aa80:	07d0      	lsls	r0, r2, #31
 800aa82:	d502      	bpl.n	800aa8a <_printf_float+0x1a2>
 800aa84:	3301      	adds	r3, #1
 800aa86:	440b      	add	r3, r1
 800aa88:	6123      	str	r3, [r4, #16]
 800aa8a:	65a1      	str	r1, [r4, #88]	; 0x58
 800aa8c:	f04f 0900 	mov.w	r9, #0
 800aa90:	e7de      	b.n	800aa50 <_printf_float+0x168>
 800aa92:	b913      	cbnz	r3, 800aa9a <_printf_float+0x1b2>
 800aa94:	6822      	ldr	r2, [r4, #0]
 800aa96:	07d2      	lsls	r2, r2, #31
 800aa98:	d501      	bpl.n	800aa9e <_printf_float+0x1b6>
 800aa9a:	3302      	adds	r3, #2
 800aa9c:	e7f4      	b.n	800aa88 <_printf_float+0x1a0>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e7f2      	b.n	800aa88 <_printf_float+0x1a0>
 800aaa2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	db05      	blt.n	800aab8 <_printf_float+0x1d0>
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	6121      	str	r1, [r4, #16]
 800aab0:	07d8      	lsls	r0, r3, #31
 800aab2:	d5ea      	bpl.n	800aa8a <_printf_float+0x1a2>
 800aab4:	1c4b      	adds	r3, r1, #1
 800aab6:	e7e7      	b.n	800aa88 <_printf_float+0x1a0>
 800aab8:	2900      	cmp	r1, #0
 800aaba:	bfd4      	ite	le
 800aabc:	f1c1 0202 	rsble	r2, r1, #2
 800aac0:	2201      	movgt	r2, #1
 800aac2:	4413      	add	r3, r2
 800aac4:	e7e0      	b.n	800aa88 <_printf_float+0x1a0>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	055a      	lsls	r2, r3, #21
 800aaca:	d407      	bmi.n	800aadc <_printf_float+0x1f4>
 800aacc:	6923      	ldr	r3, [r4, #16]
 800aace:	4642      	mov	r2, r8
 800aad0:	4631      	mov	r1, r6
 800aad2:	4628      	mov	r0, r5
 800aad4:	47b8      	blx	r7
 800aad6:	3001      	adds	r0, #1
 800aad8:	d12c      	bne.n	800ab34 <_printf_float+0x24c>
 800aada:	e764      	b.n	800a9a6 <_printf_float+0xbe>
 800aadc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aae0:	f240 80e0 	bls.w	800aca4 <_printf_float+0x3bc>
 800aae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aae8:	2200      	movs	r2, #0
 800aaea:	2300      	movs	r3, #0
 800aaec:	f7f6 f814 	bl	8000b18 <__aeabi_dcmpeq>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d034      	beq.n	800ab5e <_printf_float+0x276>
 800aaf4:	4a37      	ldr	r2, [pc, #220]	; (800abd4 <_printf_float+0x2ec>)
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b8      	blx	r7
 800aafe:	3001      	adds	r0, #1
 800ab00:	f43f af51 	beq.w	800a9a6 <_printf_float+0xbe>
 800ab04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	db02      	blt.n	800ab12 <_printf_float+0x22a>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	07d8      	lsls	r0, r3, #31
 800ab10:	d510      	bpl.n	800ab34 <_printf_float+0x24c>
 800ab12:	ee18 3a10 	vmov	r3, s16
 800ab16:	4652      	mov	r2, sl
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	47b8      	blx	r7
 800ab1e:	3001      	adds	r0, #1
 800ab20:	f43f af41 	beq.w	800a9a6 <_printf_float+0xbe>
 800ab24:	f04f 0800 	mov.w	r8, #0
 800ab28:	f104 091a 	add.w	r9, r4, #26
 800ab2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	4543      	cmp	r3, r8
 800ab32:	dc09      	bgt.n	800ab48 <_printf_float+0x260>
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	079b      	lsls	r3, r3, #30
 800ab38:	f100 8107 	bmi.w	800ad4a <_printf_float+0x462>
 800ab3c:	68e0      	ldr	r0, [r4, #12]
 800ab3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab40:	4298      	cmp	r0, r3
 800ab42:	bfb8      	it	lt
 800ab44:	4618      	movlt	r0, r3
 800ab46:	e730      	b.n	800a9aa <_printf_float+0xc2>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	464a      	mov	r2, r9
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	4628      	mov	r0, r5
 800ab50:	47b8      	blx	r7
 800ab52:	3001      	adds	r0, #1
 800ab54:	f43f af27 	beq.w	800a9a6 <_printf_float+0xbe>
 800ab58:	f108 0801 	add.w	r8, r8, #1
 800ab5c:	e7e6      	b.n	800ab2c <_printf_float+0x244>
 800ab5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	dc39      	bgt.n	800abd8 <_printf_float+0x2f0>
 800ab64:	4a1b      	ldr	r2, [pc, #108]	; (800abd4 <_printf_float+0x2ec>)
 800ab66:	2301      	movs	r3, #1
 800ab68:	4631      	mov	r1, r6
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	47b8      	blx	r7
 800ab6e:	3001      	adds	r0, #1
 800ab70:	f43f af19 	beq.w	800a9a6 <_printf_float+0xbe>
 800ab74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	d102      	bne.n	800ab82 <_printf_float+0x29a>
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	07d9      	lsls	r1, r3, #31
 800ab80:	d5d8      	bpl.n	800ab34 <_printf_float+0x24c>
 800ab82:	ee18 3a10 	vmov	r3, s16
 800ab86:	4652      	mov	r2, sl
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	47b8      	blx	r7
 800ab8e:	3001      	adds	r0, #1
 800ab90:	f43f af09 	beq.w	800a9a6 <_printf_float+0xbe>
 800ab94:	f04f 0900 	mov.w	r9, #0
 800ab98:	f104 0a1a 	add.w	sl, r4, #26
 800ab9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9e:	425b      	negs	r3, r3
 800aba0:	454b      	cmp	r3, r9
 800aba2:	dc01      	bgt.n	800aba8 <_printf_float+0x2c0>
 800aba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba6:	e792      	b.n	800aace <_printf_float+0x1e6>
 800aba8:	2301      	movs	r3, #1
 800abaa:	4652      	mov	r2, sl
 800abac:	4631      	mov	r1, r6
 800abae:	4628      	mov	r0, r5
 800abb0:	47b8      	blx	r7
 800abb2:	3001      	adds	r0, #1
 800abb4:	f43f aef7 	beq.w	800a9a6 <_printf_float+0xbe>
 800abb8:	f109 0901 	add.w	r9, r9, #1
 800abbc:	e7ee      	b.n	800ab9c <_printf_float+0x2b4>
 800abbe:	bf00      	nop
 800abc0:	7fefffff 	.word	0x7fefffff
 800abc4:	0800f77c 	.word	0x0800f77c
 800abc8:	0800f780 	.word	0x0800f780
 800abcc:	0800f784 	.word	0x0800f784
 800abd0:	0800f788 	.word	0x0800f788
 800abd4:	0800f78c 	.word	0x0800f78c
 800abd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abdc:	429a      	cmp	r2, r3
 800abde:	bfa8      	it	ge
 800abe0:	461a      	movge	r2, r3
 800abe2:	2a00      	cmp	r2, #0
 800abe4:	4691      	mov	r9, r2
 800abe6:	dc37      	bgt.n	800ac58 <_printf_float+0x370>
 800abe8:	f04f 0b00 	mov.w	fp, #0
 800abec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abf0:	f104 021a 	add.w	r2, r4, #26
 800abf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abf6:	9305      	str	r3, [sp, #20]
 800abf8:	eba3 0309 	sub.w	r3, r3, r9
 800abfc:	455b      	cmp	r3, fp
 800abfe:	dc33      	bgt.n	800ac68 <_printf_float+0x380>
 800ac00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac04:	429a      	cmp	r2, r3
 800ac06:	db3b      	blt.n	800ac80 <_printf_float+0x398>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	07da      	lsls	r2, r3, #31
 800ac0c:	d438      	bmi.n	800ac80 <_printf_float+0x398>
 800ac0e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac12:	eba2 0903 	sub.w	r9, r2, r3
 800ac16:	9b05      	ldr	r3, [sp, #20]
 800ac18:	1ad2      	subs	r2, r2, r3
 800ac1a:	4591      	cmp	r9, r2
 800ac1c:	bfa8      	it	ge
 800ac1e:	4691      	movge	r9, r2
 800ac20:	f1b9 0f00 	cmp.w	r9, #0
 800ac24:	dc35      	bgt.n	800ac92 <_printf_float+0x3aa>
 800ac26:	f04f 0800 	mov.w	r8, #0
 800ac2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac2e:	f104 0a1a 	add.w	sl, r4, #26
 800ac32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac36:	1a9b      	subs	r3, r3, r2
 800ac38:	eba3 0309 	sub.w	r3, r3, r9
 800ac3c:	4543      	cmp	r3, r8
 800ac3e:	f77f af79 	ble.w	800ab34 <_printf_float+0x24c>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4652      	mov	r2, sl
 800ac46:	4631      	mov	r1, r6
 800ac48:	4628      	mov	r0, r5
 800ac4a:	47b8      	blx	r7
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	f43f aeaa 	beq.w	800a9a6 <_printf_float+0xbe>
 800ac52:	f108 0801 	add.w	r8, r8, #1
 800ac56:	e7ec      	b.n	800ac32 <_printf_float+0x34a>
 800ac58:	4613      	mov	r3, r2
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4642      	mov	r2, r8
 800ac5e:	4628      	mov	r0, r5
 800ac60:	47b8      	blx	r7
 800ac62:	3001      	adds	r0, #1
 800ac64:	d1c0      	bne.n	800abe8 <_printf_float+0x300>
 800ac66:	e69e      	b.n	800a9a6 <_printf_float+0xbe>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	9205      	str	r2, [sp, #20]
 800ac70:	47b8      	blx	r7
 800ac72:	3001      	adds	r0, #1
 800ac74:	f43f ae97 	beq.w	800a9a6 <_printf_float+0xbe>
 800ac78:	9a05      	ldr	r2, [sp, #20]
 800ac7a:	f10b 0b01 	add.w	fp, fp, #1
 800ac7e:	e7b9      	b.n	800abf4 <_printf_float+0x30c>
 800ac80:	ee18 3a10 	vmov	r3, s16
 800ac84:	4652      	mov	r2, sl
 800ac86:	4631      	mov	r1, r6
 800ac88:	4628      	mov	r0, r5
 800ac8a:	47b8      	blx	r7
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	d1be      	bne.n	800ac0e <_printf_float+0x326>
 800ac90:	e689      	b.n	800a9a6 <_printf_float+0xbe>
 800ac92:	9a05      	ldr	r2, [sp, #20]
 800ac94:	464b      	mov	r3, r9
 800ac96:	4442      	add	r2, r8
 800ac98:	4631      	mov	r1, r6
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	47b8      	blx	r7
 800ac9e:	3001      	adds	r0, #1
 800aca0:	d1c1      	bne.n	800ac26 <_printf_float+0x33e>
 800aca2:	e680      	b.n	800a9a6 <_printf_float+0xbe>
 800aca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aca6:	2a01      	cmp	r2, #1
 800aca8:	dc01      	bgt.n	800acae <_printf_float+0x3c6>
 800acaa:	07db      	lsls	r3, r3, #31
 800acac:	d53a      	bpl.n	800ad24 <_printf_float+0x43c>
 800acae:	2301      	movs	r3, #1
 800acb0:	4642      	mov	r2, r8
 800acb2:	4631      	mov	r1, r6
 800acb4:	4628      	mov	r0, r5
 800acb6:	47b8      	blx	r7
 800acb8:	3001      	adds	r0, #1
 800acba:	f43f ae74 	beq.w	800a9a6 <_printf_float+0xbe>
 800acbe:	ee18 3a10 	vmov	r3, s16
 800acc2:	4652      	mov	r2, sl
 800acc4:	4631      	mov	r1, r6
 800acc6:	4628      	mov	r0, r5
 800acc8:	47b8      	blx	r7
 800acca:	3001      	adds	r0, #1
 800accc:	f43f ae6b 	beq.w	800a9a6 <_printf_float+0xbe>
 800acd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acd4:	2200      	movs	r2, #0
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800acdc:	f7f5 ff1c 	bl	8000b18 <__aeabi_dcmpeq>
 800ace0:	b9d8      	cbnz	r0, 800ad1a <_printf_float+0x432>
 800ace2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ace6:	f108 0201 	add.w	r2, r8, #1
 800acea:	4631      	mov	r1, r6
 800acec:	4628      	mov	r0, r5
 800acee:	47b8      	blx	r7
 800acf0:	3001      	adds	r0, #1
 800acf2:	d10e      	bne.n	800ad12 <_printf_float+0x42a>
 800acf4:	e657      	b.n	800a9a6 <_printf_float+0xbe>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4652      	mov	r2, sl
 800acfa:	4631      	mov	r1, r6
 800acfc:	4628      	mov	r0, r5
 800acfe:	47b8      	blx	r7
 800ad00:	3001      	adds	r0, #1
 800ad02:	f43f ae50 	beq.w	800a9a6 <_printf_float+0xbe>
 800ad06:	f108 0801 	add.w	r8, r8, #1
 800ad0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	4543      	cmp	r3, r8
 800ad10:	dcf1      	bgt.n	800acf6 <_printf_float+0x40e>
 800ad12:	464b      	mov	r3, r9
 800ad14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad18:	e6da      	b.n	800aad0 <_printf_float+0x1e8>
 800ad1a:	f04f 0800 	mov.w	r8, #0
 800ad1e:	f104 0a1a 	add.w	sl, r4, #26
 800ad22:	e7f2      	b.n	800ad0a <_printf_float+0x422>
 800ad24:	2301      	movs	r3, #1
 800ad26:	4642      	mov	r2, r8
 800ad28:	e7df      	b.n	800acea <_printf_float+0x402>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	464a      	mov	r2, r9
 800ad2e:	4631      	mov	r1, r6
 800ad30:	4628      	mov	r0, r5
 800ad32:	47b8      	blx	r7
 800ad34:	3001      	adds	r0, #1
 800ad36:	f43f ae36 	beq.w	800a9a6 <_printf_float+0xbe>
 800ad3a:	f108 0801 	add.w	r8, r8, #1
 800ad3e:	68e3      	ldr	r3, [r4, #12]
 800ad40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad42:	1a5b      	subs	r3, r3, r1
 800ad44:	4543      	cmp	r3, r8
 800ad46:	dcf0      	bgt.n	800ad2a <_printf_float+0x442>
 800ad48:	e6f8      	b.n	800ab3c <_printf_float+0x254>
 800ad4a:	f04f 0800 	mov.w	r8, #0
 800ad4e:	f104 0919 	add.w	r9, r4, #25
 800ad52:	e7f4      	b.n	800ad3e <_printf_float+0x456>

0800ad54 <_printf_common>:
 800ad54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad58:	4616      	mov	r6, r2
 800ad5a:	4699      	mov	r9, r3
 800ad5c:	688a      	ldr	r2, [r1, #8]
 800ad5e:	690b      	ldr	r3, [r1, #16]
 800ad60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad64:	4293      	cmp	r3, r2
 800ad66:	bfb8      	it	lt
 800ad68:	4613      	movlt	r3, r2
 800ad6a:	6033      	str	r3, [r6, #0]
 800ad6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad70:	4607      	mov	r7, r0
 800ad72:	460c      	mov	r4, r1
 800ad74:	b10a      	cbz	r2, 800ad7a <_printf_common+0x26>
 800ad76:	3301      	adds	r3, #1
 800ad78:	6033      	str	r3, [r6, #0]
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	0699      	lsls	r1, r3, #26
 800ad7e:	bf42      	ittt	mi
 800ad80:	6833      	ldrmi	r3, [r6, #0]
 800ad82:	3302      	addmi	r3, #2
 800ad84:	6033      	strmi	r3, [r6, #0]
 800ad86:	6825      	ldr	r5, [r4, #0]
 800ad88:	f015 0506 	ands.w	r5, r5, #6
 800ad8c:	d106      	bne.n	800ad9c <_printf_common+0x48>
 800ad8e:	f104 0a19 	add.w	sl, r4, #25
 800ad92:	68e3      	ldr	r3, [r4, #12]
 800ad94:	6832      	ldr	r2, [r6, #0]
 800ad96:	1a9b      	subs	r3, r3, r2
 800ad98:	42ab      	cmp	r3, r5
 800ad9a:	dc26      	bgt.n	800adea <_printf_common+0x96>
 800ad9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ada0:	1e13      	subs	r3, r2, #0
 800ada2:	6822      	ldr	r2, [r4, #0]
 800ada4:	bf18      	it	ne
 800ada6:	2301      	movne	r3, #1
 800ada8:	0692      	lsls	r2, r2, #26
 800adaa:	d42b      	bmi.n	800ae04 <_printf_common+0xb0>
 800adac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800adb0:	4649      	mov	r1, r9
 800adb2:	4638      	mov	r0, r7
 800adb4:	47c0      	blx	r8
 800adb6:	3001      	adds	r0, #1
 800adb8:	d01e      	beq.n	800adf8 <_printf_common+0xa4>
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	6922      	ldr	r2, [r4, #16]
 800adbe:	f003 0306 	and.w	r3, r3, #6
 800adc2:	2b04      	cmp	r3, #4
 800adc4:	bf02      	ittt	eq
 800adc6:	68e5      	ldreq	r5, [r4, #12]
 800adc8:	6833      	ldreq	r3, [r6, #0]
 800adca:	1aed      	subeq	r5, r5, r3
 800adcc:	68a3      	ldr	r3, [r4, #8]
 800adce:	bf0c      	ite	eq
 800add0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800add4:	2500      	movne	r5, #0
 800add6:	4293      	cmp	r3, r2
 800add8:	bfc4      	itt	gt
 800adda:	1a9b      	subgt	r3, r3, r2
 800addc:	18ed      	addgt	r5, r5, r3
 800adde:	2600      	movs	r6, #0
 800ade0:	341a      	adds	r4, #26
 800ade2:	42b5      	cmp	r5, r6
 800ade4:	d11a      	bne.n	800ae1c <_printf_common+0xc8>
 800ade6:	2000      	movs	r0, #0
 800ade8:	e008      	b.n	800adfc <_printf_common+0xa8>
 800adea:	2301      	movs	r3, #1
 800adec:	4652      	mov	r2, sl
 800adee:	4649      	mov	r1, r9
 800adf0:	4638      	mov	r0, r7
 800adf2:	47c0      	blx	r8
 800adf4:	3001      	adds	r0, #1
 800adf6:	d103      	bne.n	800ae00 <_printf_common+0xac>
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae00:	3501      	adds	r5, #1
 800ae02:	e7c6      	b.n	800ad92 <_printf_common+0x3e>
 800ae04:	18e1      	adds	r1, r4, r3
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	2030      	movs	r0, #48	; 0x30
 800ae0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae0e:	4422      	add	r2, r4
 800ae10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae18:	3302      	adds	r3, #2
 800ae1a:	e7c7      	b.n	800adac <_printf_common+0x58>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	4622      	mov	r2, r4
 800ae20:	4649      	mov	r1, r9
 800ae22:	4638      	mov	r0, r7
 800ae24:	47c0      	blx	r8
 800ae26:	3001      	adds	r0, #1
 800ae28:	d0e6      	beq.n	800adf8 <_printf_common+0xa4>
 800ae2a:	3601      	adds	r6, #1
 800ae2c:	e7d9      	b.n	800ade2 <_printf_common+0x8e>
	...

0800ae30 <_printf_i>:
 800ae30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae34:	7e0f      	ldrb	r7, [r1, #24]
 800ae36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae38:	2f78      	cmp	r7, #120	; 0x78
 800ae3a:	4691      	mov	r9, r2
 800ae3c:	4680      	mov	r8, r0
 800ae3e:	460c      	mov	r4, r1
 800ae40:	469a      	mov	sl, r3
 800ae42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae46:	d807      	bhi.n	800ae58 <_printf_i+0x28>
 800ae48:	2f62      	cmp	r7, #98	; 0x62
 800ae4a:	d80a      	bhi.n	800ae62 <_printf_i+0x32>
 800ae4c:	2f00      	cmp	r7, #0
 800ae4e:	f000 80d4 	beq.w	800affa <_printf_i+0x1ca>
 800ae52:	2f58      	cmp	r7, #88	; 0x58
 800ae54:	f000 80c0 	beq.w	800afd8 <_printf_i+0x1a8>
 800ae58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae60:	e03a      	b.n	800aed8 <_printf_i+0xa8>
 800ae62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae66:	2b15      	cmp	r3, #21
 800ae68:	d8f6      	bhi.n	800ae58 <_printf_i+0x28>
 800ae6a:	a101      	add	r1, pc, #4	; (adr r1, 800ae70 <_printf_i+0x40>)
 800ae6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae70:	0800aec9 	.word	0x0800aec9
 800ae74:	0800aedd 	.word	0x0800aedd
 800ae78:	0800ae59 	.word	0x0800ae59
 800ae7c:	0800ae59 	.word	0x0800ae59
 800ae80:	0800ae59 	.word	0x0800ae59
 800ae84:	0800ae59 	.word	0x0800ae59
 800ae88:	0800aedd 	.word	0x0800aedd
 800ae8c:	0800ae59 	.word	0x0800ae59
 800ae90:	0800ae59 	.word	0x0800ae59
 800ae94:	0800ae59 	.word	0x0800ae59
 800ae98:	0800ae59 	.word	0x0800ae59
 800ae9c:	0800afe1 	.word	0x0800afe1
 800aea0:	0800af09 	.word	0x0800af09
 800aea4:	0800af9b 	.word	0x0800af9b
 800aea8:	0800ae59 	.word	0x0800ae59
 800aeac:	0800ae59 	.word	0x0800ae59
 800aeb0:	0800b003 	.word	0x0800b003
 800aeb4:	0800ae59 	.word	0x0800ae59
 800aeb8:	0800af09 	.word	0x0800af09
 800aebc:	0800ae59 	.word	0x0800ae59
 800aec0:	0800ae59 	.word	0x0800ae59
 800aec4:	0800afa3 	.word	0x0800afa3
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	1d1a      	adds	r2, r3, #4
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	602a      	str	r2, [r5, #0]
 800aed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aed8:	2301      	movs	r3, #1
 800aeda:	e09f      	b.n	800b01c <_printf_i+0x1ec>
 800aedc:	6820      	ldr	r0, [r4, #0]
 800aede:	682b      	ldr	r3, [r5, #0]
 800aee0:	0607      	lsls	r7, r0, #24
 800aee2:	f103 0104 	add.w	r1, r3, #4
 800aee6:	6029      	str	r1, [r5, #0]
 800aee8:	d501      	bpl.n	800aeee <_printf_i+0xbe>
 800aeea:	681e      	ldr	r6, [r3, #0]
 800aeec:	e003      	b.n	800aef6 <_printf_i+0xc6>
 800aeee:	0646      	lsls	r6, r0, #25
 800aef0:	d5fb      	bpl.n	800aeea <_printf_i+0xba>
 800aef2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aef6:	2e00      	cmp	r6, #0
 800aef8:	da03      	bge.n	800af02 <_printf_i+0xd2>
 800aefa:	232d      	movs	r3, #45	; 0x2d
 800aefc:	4276      	negs	r6, r6
 800aefe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af02:	485a      	ldr	r0, [pc, #360]	; (800b06c <_printf_i+0x23c>)
 800af04:	230a      	movs	r3, #10
 800af06:	e012      	b.n	800af2e <_printf_i+0xfe>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	6820      	ldr	r0, [r4, #0]
 800af0c:	1d19      	adds	r1, r3, #4
 800af0e:	6029      	str	r1, [r5, #0]
 800af10:	0605      	lsls	r5, r0, #24
 800af12:	d501      	bpl.n	800af18 <_printf_i+0xe8>
 800af14:	681e      	ldr	r6, [r3, #0]
 800af16:	e002      	b.n	800af1e <_printf_i+0xee>
 800af18:	0641      	lsls	r1, r0, #25
 800af1a:	d5fb      	bpl.n	800af14 <_printf_i+0xe4>
 800af1c:	881e      	ldrh	r6, [r3, #0]
 800af1e:	4853      	ldr	r0, [pc, #332]	; (800b06c <_printf_i+0x23c>)
 800af20:	2f6f      	cmp	r7, #111	; 0x6f
 800af22:	bf0c      	ite	eq
 800af24:	2308      	moveq	r3, #8
 800af26:	230a      	movne	r3, #10
 800af28:	2100      	movs	r1, #0
 800af2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af2e:	6865      	ldr	r5, [r4, #4]
 800af30:	60a5      	str	r5, [r4, #8]
 800af32:	2d00      	cmp	r5, #0
 800af34:	bfa2      	ittt	ge
 800af36:	6821      	ldrge	r1, [r4, #0]
 800af38:	f021 0104 	bicge.w	r1, r1, #4
 800af3c:	6021      	strge	r1, [r4, #0]
 800af3e:	b90e      	cbnz	r6, 800af44 <_printf_i+0x114>
 800af40:	2d00      	cmp	r5, #0
 800af42:	d04b      	beq.n	800afdc <_printf_i+0x1ac>
 800af44:	4615      	mov	r5, r2
 800af46:	fbb6 f1f3 	udiv	r1, r6, r3
 800af4a:	fb03 6711 	mls	r7, r3, r1, r6
 800af4e:	5dc7      	ldrb	r7, [r0, r7]
 800af50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af54:	4637      	mov	r7, r6
 800af56:	42bb      	cmp	r3, r7
 800af58:	460e      	mov	r6, r1
 800af5a:	d9f4      	bls.n	800af46 <_printf_i+0x116>
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d10b      	bne.n	800af78 <_printf_i+0x148>
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	07de      	lsls	r6, r3, #31
 800af64:	d508      	bpl.n	800af78 <_printf_i+0x148>
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	6861      	ldr	r1, [r4, #4]
 800af6a:	4299      	cmp	r1, r3
 800af6c:	bfde      	ittt	le
 800af6e:	2330      	movle	r3, #48	; 0x30
 800af70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af78:	1b52      	subs	r2, r2, r5
 800af7a:	6122      	str	r2, [r4, #16]
 800af7c:	f8cd a000 	str.w	sl, [sp]
 800af80:	464b      	mov	r3, r9
 800af82:	aa03      	add	r2, sp, #12
 800af84:	4621      	mov	r1, r4
 800af86:	4640      	mov	r0, r8
 800af88:	f7ff fee4 	bl	800ad54 <_printf_common>
 800af8c:	3001      	adds	r0, #1
 800af8e:	d14a      	bne.n	800b026 <_printf_i+0x1f6>
 800af90:	f04f 30ff 	mov.w	r0, #4294967295
 800af94:	b004      	add	sp, #16
 800af96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af9a:	6823      	ldr	r3, [r4, #0]
 800af9c:	f043 0320 	orr.w	r3, r3, #32
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	4833      	ldr	r0, [pc, #204]	; (800b070 <_printf_i+0x240>)
 800afa4:	2778      	movs	r7, #120	; 0x78
 800afa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	6829      	ldr	r1, [r5, #0]
 800afae:	061f      	lsls	r7, r3, #24
 800afb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800afb4:	d402      	bmi.n	800afbc <_printf_i+0x18c>
 800afb6:	065f      	lsls	r7, r3, #25
 800afb8:	bf48      	it	mi
 800afba:	b2b6      	uxthmi	r6, r6
 800afbc:	07df      	lsls	r7, r3, #31
 800afbe:	bf48      	it	mi
 800afc0:	f043 0320 	orrmi.w	r3, r3, #32
 800afc4:	6029      	str	r1, [r5, #0]
 800afc6:	bf48      	it	mi
 800afc8:	6023      	strmi	r3, [r4, #0]
 800afca:	b91e      	cbnz	r6, 800afd4 <_printf_i+0x1a4>
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	f023 0320 	bic.w	r3, r3, #32
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	2310      	movs	r3, #16
 800afd6:	e7a7      	b.n	800af28 <_printf_i+0xf8>
 800afd8:	4824      	ldr	r0, [pc, #144]	; (800b06c <_printf_i+0x23c>)
 800afda:	e7e4      	b.n	800afa6 <_printf_i+0x176>
 800afdc:	4615      	mov	r5, r2
 800afde:	e7bd      	b.n	800af5c <_printf_i+0x12c>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	6826      	ldr	r6, [r4, #0]
 800afe4:	6961      	ldr	r1, [r4, #20]
 800afe6:	1d18      	adds	r0, r3, #4
 800afe8:	6028      	str	r0, [r5, #0]
 800afea:	0635      	lsls	r5, r6, #24
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	d501      	bpl.n	800aff4 <_printf_i+0x1c4>
 800aff0:	6019      	str	r1, [r3, #0]
 800aff2:	e002      	b.n	800affa <_printf_i+0x1ca>
 800aff4:	0670      	lsls	r0, r6, #25
 800aff6:	d5fb      	bpl.n	800aff0 <_printf_i+0x1c0>
 800aff8:	8019      	strh	r1, [r3, #0]
 800affa:	2300      	movs	r3, #0
 800affc:	6123      	str	r3, [r4, #16]
 800affe:	4615      	mov	r5, r2
 800b000:	e7bc      	b.n	800af7c <_printf_i+0x14c>
 800b002:	682b      	ldr	r3, [r5, #0]
 800b004:	1d1a      	adds	r2, r3, #4
 800b006:	602a      	str	r2, [r5, #0]
 800b008:	681d      	ldr	r5, [r3, #0]
 800b00a:	6862      	ldr	r2, [r4, #4]
 800b00c:	2100      	movs	r1, #0
 800b00e:	4628      	mov	r0, r5
 800b010:	f7f5 f906 	bl	8000220 <memchr>
 800b014:	b108      	cbz	r0, 800b01a <_printf_i+0x1ea>
 800b016:	1b40      	subs	r0, r0, r5
 800b018:	6060      	str	r0, [r4, #4]
 800b01a:	6863      	ldr	r3, [r4, #4]
 800b01c:	6123      	str	r3, [r4, #16]
 800b01e:	2300      	movs	r3, #0
 800b020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b024:	e7aa      	b.n	800af7c <_printf_i+0x14c>
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	462a      	mov	r2, r5
 800b02a:	4649      	mov	r1, r9
 800b02c:	4640      	mov	r0, r8
 800b02e:	47d0      	blx	sl
 800b030:	3001      	adds	r0, #1
 800b032:	d0ad      	beq.n	800af90 <_printf_i+0x160>
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	079b      	lsls	r3, r3, #30
 800b038:	d413      	bmi.n	800b062 <_printf_i+0x232>
 800b03a:	68e0      	ldr	r0, [r4, #12]
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	4298      	cmp	r0, r3
 800b040:	bfb8      	it	lt
 800b042:	4618      	movlt	r0, r3
 800b044:	e7a6      	b.n	800af94 <_printf_i+0x164>
 800b046:	2301      	movs	r3, #1
 800b048:	4632      	mov	r2, r6
 800b04a:	4649      	mov	r1, r9
 800b04c:	4640      	mov	r0, r8
 800b04e:	47d0      	blx	sl
 800b050:	3001      	adds	r0, #1
 800b052:	d09d      	beq.n	800af90 <_printf_i+0x160>
 800b054:	3501      	adds	r5, #1
 800b056:	68e3      	ldr	r3, [r4, #12]
 800b058:	9903      	ldr	r1, [sp, #12]
 800b05a:	1a5b      	subs	r3, r3, r1
 800b05c:	42ab      	cmp	r3, r5
 800b05e:	dcf2      	bgt.n	800b046 <_printf_i+0x216>
 800b060:	e7eb      	b.n	800b03a <_printf_i+0x20a>
 800b062:	2500      	movs	r5, #0
 800b064:	f104 0619 	add.w	r6, r4, #25
 800b068:	e7f5      	b.n	800b056 <_printf_i+0x226>
 800b06a:	bf00      	nop
 800b06c:	0800f78e 	.word	0x0800f78e
 800b070:	0800f79f 	.word	0x0800f79f

0800b074 <std>:
 800b074:	2300      	movs	r3, #0
 800b076:	b510      	push	{r4, lr}
 800b078:	4604      	mov	r4, r0
 800b07a:	e9c0 3300 	strd	r3, r3, [r0]
 800b07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b082:	6083      	str	r3, [r0, #8]
 800b084:	8181      	strh	r1, [r0, #12]
 800b086:	6643      	str	r3, [r0, #100]	; 0x64
 800b088:	81c2      	strh	r2, [r0, #14]
 800b08a:	6183      	str	r3, [r0, #24]
 800b08c:	4619      	mov	r1, r3
 800b08e:	2208      	movs	r2, #8
 800b090:	305c      	adds	r0, #92	; 0x5c
 800b092:	f000 f93d 	bl	800b310 <memset>
 800b096:	4b0d      	ldr	r3, [pc, #52]	; (800b0cc <std+0x58>)
 800b098:	6263      	str	r3, [r4, #36]	; 0x24
 800b09a:	4b0d      	ldr	r3, [pc, #52]	; (800b0d0 <std+0x5c>)
 800b09c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b09e:	4b0d      	ldr	r3, [pc, #52]	; (800b0d4 <std+0x60>)
 800b0a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0a2:	4b0d      	ldr	r3, [pc, #52]	; (800b0d8 <std+0x64>)
 800b0a4:	6323      	str	r3, [r4, #48]	; 0x30
 800b0a6:	4b0d      	ldr	r3, [pc, #52]	; (800b0dc <std+0x68>)
 800b0a8:	6224      	str	r4, [r4, #32]
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	d006      	beq.n	800b0bc <std+0x48>
 800b0ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b0b2:	4294      	cmp	r4, r2
 800b0b4:	d002      	beq.n	800b0bc <std+0x48>
 800b0b6:	33d0      	adds	r3, #208	; 0xd0
 800b0b8:	429c      	cmp	r4, r3
 800b0ba:	d105      	bne.n	800b0c8 <std+0x54>
 800b0bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c4:	f000 b9a0 	b.w	800b408 <__retarget_lock_init_recursive>
 800b0c8:	bd10      	pop	{r4, pc}
 800b0ca:	bf00      	nop
 800b0cc:	0800b1f9 	.word	0x0800b1f9
 800b0d0:	0800b21b 	.word	0x0800b21b
 800b0d4:	0800b253 	.word	0x0800b253
 800b0d8:	0800b277 	.word	0x0800b277
 800b0dc:	20001eac 	.word	0x20001eac

0800b0e0 <stdio_exit_handler>:
 800b0e0:	4a02      	ldr	r2, [pc, #8]	; (800b0ec <stdio_exit_handler+0xc>)
 800b0e2:	4903      	ldr	r1, [pc, #12]	; (800b0f0 <stdio_exit_handler+0x10>)
 800b0e4:	4803      	ldr	r0, [pc, #12]	; (800b0f4 <stdio_exit_handler+0x14>)
 800b0e6:	f000 b869 	b.w	800b1bc <_fwalk_sglue>
 800b0ea:	bf00      	nop
 800b0ec:	2000057c 	.word	0x2000057c
 800b0f0:	0800cdd9 	.word	0x0800cdd9
 800b0f4:	20000588 	.word	0x20000588

0800b0f8 <cleanup_stdio>:
 800b0f8:	6841      	ldr	r1, [r0, #4]
 800b0fa:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <cleanup_stdio+0x34>)
 800b0fc:	4299      	cmp	r1, r3
 800b0fe:	b510      	push	{r4, lr}
 800b100:	4604      	mov	r4, r0
 800b102:	d001      	beq.n	800b108 <cleanup_stdio+0x10>
 800b104:	f001 fe68 	bl	800cdd8 <_fflush_r>
 800b108:	68a1      	ldr	r1, [r4, #8]
 800b10a:	4b09      	ldr	r3, [pc, #36]	; (800b130 <cleanup_stdio+0x38>)
 800b10c:	4299      	cmp	r1, r3
 800b10e:	d002      	beq.n	800b116 <cleanup_stdio+0x1e>
 800b110:	4620      	mov	r0, r4
 800b112:	f001 fe61 	bl	800cdd8 <_fflush_r>
 800b116:	68e1      	ldr	r1, [r4, #12]
 800b118:	4b06      	ldr	r3, [pc, #24]	; (800b134 <cleanup_stdio+0x3c>)
 800b11a:	4299      	cmp	r1, r3
 800b11c:	d004      	beq.n	800b128 <cleanup_stdio+0x30>
 800b11e:	4620      	mov	r0, r4
 800b120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b124:	f001 be58 	b.w	800cdd8 <_fflush_r>
 800b128:	bd10      	pop	{r4, pc}
 800b12a:	bf00      	nop
 800b12c:	20001eac 	.word	0x20001eac
 800b130:	20001f14 	.word	0x20001f14
 800b134:	20001f7c 	.word	0x20001f7c

0800b138 <global_stdio_init.part.0>:
 800b138:	b510      	push	{r4, lr}
 800b13a:	4b0b      	ldr	r3, [pc, #44]	; (800b168 <global_stdio_init.part.0+0x30>)
 800b13c:	4c0b      	ldr	r4, [pc, #44]	; (800b16c <global_stdio_init.part.0+0x34>)
 800b13e:	4a0c      	ldr	r2, [pc, #48]	; (800b170 <global_stdio_init.part.0+0x38>)
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	4620      	mov	r0, r4
 800b144:	2200      	movs	r2, #0
 800b146:	2104      	movs	r1, #4
 800b148:	f7ff ff94 	bl	800b074 <std>
 800b14c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b150:	2201      	movs	r2, #1
 800b152:	2109      	movs	r1, #9
 800b154:	f7ff ff8e 	bl	800b074 <std>
 800b158:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b15c:	2202      	movs	r2, #2
 800b15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b162:	2112      	movs	r1, #18
 800b164:	f7ff bf86 	b.w	800b074 <std>
 800b168:	20001fe4 	.word	0x20001fe4
 800b16c:	20001eac 	.word	0x20001eac
 800b170:	0800b0e1 	.word	0x0800b0e1

0800b174 <__sfp_lock_acquire>:
 800b174:	4801      	ldr	r0, [pc, #4]	; (800b17c <__sfp_lock_acquire+0x8>)
 800b176:	f000 b948 	b.w	800b40a <__retarget_lock_acquire_recursive>
 800b17a:	bf00      	nop
 800b17c:	20001fed 	.word	0x20001fed

0800b180 <__sfp_lock_release>:
 800b180:	4801      	ldr	r0, [pc, #4]	; (800b188 <__sfp_lock_release+0x8>)
 800b182:	f000 b943 	b.w	800b40c <__retarget_lock_release_recursive>
 800b186:	bf00      	nop
 800b188:	20001fed 	.word	0x20001fed

0800b18c <__sinit>:
 800b18c:	b510      	push	{r4, lr}
 800b18e:	4604      	mov	r4, r0
 800b190:	f7ff fff0 	bl	800b174 <__sfp_lock_acquire>
 800b194:	6a23      	ldr	r3, [r4, #32]
 800b196:	b11b      	cbz	r3, 800b1a0 <__sinit+0x14>
 800b198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b19c:	f7ff bff0 	b.w	800b180 <__sfp_lock_release>
 800b1a0:	4b04      	ldr	r3, [pc, #16]	; (800b1b4 <__sinit+0x28>)
 800b1a2:	6223      	str	r3, [r4, #32]
 800b1a4:	4b04      	ldr	r3, [pc, #16]	; (800b1b8 <__sinit+0x2c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1f5      	bne.n	800b198 <__sinit+0xc>
 800b1ac:	f7ff ffc4 	bl	800b138 <global_stdio_init.part.0>
 800b1b0:	e7f2      	b.n	800b198 <__sinit+0xc>
 800b1b2:	bf00      	nop
 800b1b4:	0800b0f9 	.word	0x0800b0f9
 800b1b8:	20001fe4 	.word	0x20001fe4

0800b1bc <_fwalk_sglue>:
 800b1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	4688      	mov	r8, r1
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1cc:	f1b9 0901 	subs.w	r9, r9, #1
 800b1d0:	d505      	bpl.n	800b1de <_fwalk_sglue+0x22>
 800b1d2:	6824      	ldr	r4, [r4, #0]
 800b1d4:	2c00      	cmp	r4, #0
 800b1d6:	d1f7      	bne.n	800b1c8 <_fwalk_sglue+0xc>
 800b1d8:	4630      	mov	r0, r6
 800b1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1de:	89ab      	ldrh	r3, [r5, #12]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d907      	bls.n	800b1f4 <_fwalk_sglue+0x38>
 800b1e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	d003      	beq.n	800b1f4 <_fwalk_sglue+0x38>
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	47c0      	blx	r8
 800b1f2:	4306      	orrs	r6, r0
 800b1f4:	3568      	adds	r5, #104	; 0x68
 800b1f6:	e7e9      	b.n	800b1cc <_fwalk_sglue+0x10>

0800b1f8 <__sread>:
 800b1f8:	b510      	push	{r4, lr}
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b200:	f000 f8b4 	bl	800b36c <_read_r>
 800b204:	2800      	cmp	r0, #0
 800b206:	bfab      	itete	ge
 800b208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b20a:	89a3      	ldrhlt	r3, [r4, #12]
 800b20c:	181b      	addge	r3, r3, r0
 800b20e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b212:	bfac      	ite	ge
 800b214:	6563      	strge	r3, [r4, #84]	; 0x54
 800b216:	81a3      	strhlt	r3, [r4, #12]
 800b218:	bd10      	pop	{r4, pc}

0800b21a <__swrite>:
 800b21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b21e:	461f      	mov	r7, r3
 800b220:	898b      	ldrh	r3, [r1, #12]
 800b222:	05db      	lsls	r3, r3, #23
 800b224:	4605      	mov	r5, r0
 800b226:	460c      	mov	r4, r1
 800b228:	4616      	mov	r6, r2
 800b22a:	d505      	bpl.n	800b238 <__swrite+0x1e>
 800b22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b230:	2302      	movs	r3, #2
 800b232:	2200      	movs	r2, #0
 800b234:	f000 f888 	bl	800b348 <_lseek_r>
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b23e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b242:	81a3      	strh	r3, [r4, #12]
 800b244:	4632      	mov	r2, r6
 800b246:	463b      	mov	r3, r7
 800b248:	4628      	mov	r0, r5
 800b24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b24e:	f000 b89f 	b.w	800b390 <_write_r>

0800b252 <__sseek>:
 800b252:	b510      	push	{r4, lr}
 800b254:	460c      	mov	r4, r1
 800b256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25a:	f000 f875 	bl	800b348 <_lseek_r>
 800b25e:	1c43      	adds	r3, r0, #1
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	bf15      	itete	ne
 800b264:	6560      	strne	r0, [r4, #84]	; 0x54
 800b266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b26a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b26e:	81a3      	strheq	r3, [r4, #12]
 800b270:	bf18      	it	ne
 800b272:	81a3      	strhne	r3, [r4, #12]
 800b274:	bd10      	pop	{r4, pc}

0800b276 <__sclose>:
 800b276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b27a:	f000 b855 	b.w	800b328 <_close_r>

0800b27e <_vsniprintf_r>:
 800b27e:	b530      	push	{r4, r5, lr}
 800b280:	4614      	mov	r4, r2
 800b282:	2c00      	cmp	r4, #0
 800b284:	b09b      	sub	sp, #108	; 0x6c
 800b286:	4605      	mov	r5, r0
 800b288:	461a      	mov	r2, r3
 800b28a:	da05      	bge.n	800b298 <_vsniprintf_r+0x1a>
 800b28c:	238b      	movs	r3, #139	; 0x8b
 800b28e:	6003      	str	r3, [r0, #0]
 800b290:	f04f 30ff 	mov.w	r0, #4294967295
 800b294:	b01b      	add	sp, #108	; 0x6c
 800b296:	bd30      	pop	{r4, r5, pc}
 800b298:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b29c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2a0:	bf14      	ite	ne
 800b2a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2a6:	4623      	moveq	r3, r4
 800b2a8:	9302      	str	r3, [sp, #8]
 800b2aa:	9305      	str	r3, [sp, #20]
 800b2ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2b0:	9100      	str	r1, [sp, #0]
 800b2b2:	9104      	str	r1, [sp, #16]
 800b2b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b2b8:	4669      	mov	r1, sp
 800b2ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b2bc:	f001 fc08 	bl	800cad0 <_svfiprintf_r>
 800b2c0:	1c43      	adds	r3, r0, #1
 800b2c2:	bfbc      	itt	lt
 800b2c4:	238b      	movlt	r3, #139	; 0x8b
 800b2c6:	602b      	strlt	r3, [r5, #0]
 800b2c8:	2c00      	cmp	r4, #0
 800b2ca:	d0e3      	beq.n	800b294 <_vsniprintf_r+0x16>
 800b2cc:	9b00      	ldr	r3, [sp, #0]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	701a      	strb	r2, [r3, #0]
 800b2d2:	e7df      	b.n	800b294 <_vsniprintf_r+0x16>

0800b2d4 <vsniprintf>:
 800b2d4:	b507      	push	{r0, r1, r2, lr}
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	460a      	mov	r2, r1
 800b2dc:	4601      	mov	r1, r0
 800b2de:	4803      	ldr	r0, [pc, #12]	; (800b2ec <vsniprintf+0x18>)
 800b2e0:	6800      	ldr	r0, [r0, #0]
 800b2e2:	f7ff ffcc 	bl	800b27e <_vsniprintf_r>
 800b2e6:	b003      	add	sp, #12
 800b2e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2ec:	200005d4 	.word	0x200005d4

0800b2f0 <memcmp>:
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	3901      	subs	r1, #1
 800b2f4:	4402      	add	r2, r0
 800b2f6:	4290      	cmp	r0, r2
 800b2f8:	d101      	bne.n	800b2fe <memcmp+0xe>
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	e005      	b.n	800b30a <memcmp+0x1a>
 800b2fe:	7803      	ldrb	r3, [r0, #0]
 800b300:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b304:	42a3      	cmp	r3, r4
 800b306:	d001      	beq.n	800b30c <memcmp+0x1c>
 800b308:	1b18      	subs	r0, r3, r4
 800b30a:	bd10      	pop	{r4, pc}
 800b30c:	3001      	adds	r0, #1
 800b30e:	e7f2      	b.n	800b2f6 <memcmp+0x6>

0800b310 <memset>:
 800b310:	4402      	add	r2, r0
 800b312:	4603      	mov	r3, r0
 800b314:	4293      	cmp	r3, r2
 800b316:	d100      	bne.n	800b31a <memset+0xa>
 800b318:	4770      	bx	lr
 800b31a:	f803 1b01 	strb.w	r1, [r3], #1
 800b31e:	e7f9      	b.n	800b314 <memset+0x4>

0800b320 <_localeconv_r>:
 800b320:	4800      	ldr	r0, [pc, #0]	; (800b324 <_localeconv_r+0x4>)
 800b322:	4770      	bx	lr
 800b324:	200006c8 	.word	0x200006c8

0800b328 <_close_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d06      	ldr	r5, [pc, #24]	; (800b344 <_close_r+0x1c>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f7f9 fee2 	bl	80050fc <_close>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_close_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_close_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	20001fe8 	.word	0x20001fe8

0800b348 <_lseek_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d07      	ldr	r5, [pc, #28]	; (800b368 <_lseek_r+0x20>)
 800b34c:	4604      	mov	r4, r0
 800b34e:	4608      	mov	r0, r1
 800b350:	4611      	mov	r1, r2
 800b352:	2200      	movs	r2, #0
 800b354:	602a      	str	r2, [r5, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	f7f9 feda 	bl	8005110 <_lseek>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_lseek_r+0x1e>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_lseek_r+0x1e>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20001fe8 	.word	0x20001fe8

0800b36c <_read_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d07      	ldr	r5, [pc, #28]	; (800b38c <_read_r+0x20>)
 800b370:	4604      	mov	r4, r0
 800b372:	4608      	mov	r0, r1
 800b374:	4611      	mov	r1, r2
 800b376:	2200      	movs	r2, #0
 800b378:	602a      	str	r2, [r5, #0]
 800b37a:	461a      	mov	r2, r3
 800b37c:	f7f9 fea4 	bl	80050c8 <_read>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_read_r+0x1e>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b103      	cbz	r3, 800b38a <_read_r+0x1e>
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	20001fe8 	.word	0x20001fe8

0800b390 <_write_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_write_r+0x20>)
 800b394:	4604      	mov	r4, r0
 800b396:	4608      	mov	r0, r1
 800b398:	4611      	mov	r1, r2
 800b39a:	2200      	movs	r2, #0
 800b39c:	602a      	str	r2, [r5, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f7f9 fe9f 	bl	80050e2 <_write>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_write_r+0x1e>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_write_r+0x1e>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	20001fe8 	.word	0x20001fe8

0800b3b4 <__errno>:
 800b3b4:	4b01      	ldr	r3, [pc, #4]	; (800b3bc <__errno+0x8>)
 800b3b6:	6818      	ldr	r0, [r3, #0]
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	200005d4 	.word	0x200005d4

0800b3c0 <__libc_init_array>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	4d0d      	ldr	r5, [pc, #52]	; (800b3f8 <__libc_init_array+0x38>)
 800b3c4:	4c0d      	ldr	r4, [pc, #52]	; (800b3fc <__libc_init_array+0x3c>)
 800b3c6:	1b64      	subs	r4, r4, r5
 800b3c8:	10a4      	asrs	r4, r4, #2
 800b3ca:	2600      	movs	r6, #0
 800b3cc:	42a6      	cmp	r6, r4
 800b3ce:	d109      	bne.n	800b3e4 <__libc_init_array+0x24>
 800b3d0:	4d0b      	ldr	r5, [pc, #44]	; (800b400 <__libc_init_array+0x40>)
 800b3d2:	4c0c      	ldr	r4, [pc, #48]	; (800b404 <__libc_init_array+0x44>)
 800b3d4:	f004 f8a2 	bl	800f51c <_init>
 800b3d8:	1b64      	subs	r4, r4, r5
 800b3da:	10a4      	asrs	r4, r4, #2
 800b3dc:	2600      	movs	r6, #0
 800b3de:	42a6      	cmp	r6, r4
 800b3e0:	d105      	bne.n	800b3ee <__libc_init_array+0x2e>
 800b3e2:	bd70      	pop	{r4, r5, r6, pc}
 800b3e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3e8:	4798      	blx	r3
 800b3ea:	3601      	adds	r6, #1
 800b3ec:	e7ee      	b.n	800b3cc <__libc_init_array+0xc>
 800b3ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f2:	4798      	blx	r3
 800b3f4:	3601      	adds	r6, #1
 800b3f6:	e7f2      	b.n	800b3de <__libc_init_array+0x1e>
 800b3f8:	080100b0 	.word	0x080100b0
 800b3fc:	080100b0 	.word	0x080100b0
 800b400:	080100b0 	.word	0x080100b0
 800b404:	080100b4 	.word	0x080100b4

0800b408 <__retarget_lock_init_recursive>:
 800b408:	4770      	bx	lr

0800b40a <__retarget_lock_acquire_recursive>:
 800b40a:	4770      	bx	lr

0800b40c <__retarget_lock_release_recursive>:
 800b40c:	4770      	bx	lr

0800b40e <memcpy>:
 800b40e:	440a      	add	r2, r1
 800b410:	4291      	cmp	r1, r2
 800b412:	f100 33ff 	add.w	r3, r0, #4294967295
 800b416:	d100      	bne.n	800b41a <memcpy+0xc>
 800b418:	4770      	bx	lr
 800b41a:	b510      	push	{r4, lr}
 800b41c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b420:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b424:	4291      	cmp	r1, r2
 800b426:	d1f9      	bne.n	800b41c <memcpy+0xe>
 800b428:	bd10      	pop	{r4, pc}

0800b42a <quorem>:
 800b42a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42e:	6903      	ldr	r3, [r0, #16]
 800b430:	690c      	ldr	r4, [r1, #16]
 800b432:	42a3      	cmp	r3, r4
 800b434:	4607      	mov	r7, r0
 800b436:	db7e      	blt.n	800b536 <quorem+0x10c>
 800b438:	3c01      	subs	r4, #1
 800b43a:	f101 0814 	add.w	r8, r1, #20
 800b43e:	f100 0514 	add.w	r5, r0, #20
 800b442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b44c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b450:	3301      	adds	r3, #1
 800b452:	429a      	cmp	r2, r3
 800b454:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b458:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b45c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b460:	d331      	bcc.n	800b4c6 <quorem+0x9c>
 800b462:	f04f 0e00 	mov.w	lr, #0
 800b466:	4640      	mov	r0, r8
 800b468:	46ac      	mov	ip, r5
 800b46a:	46f2      	mov	sl, lr
 800b46c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b470:	b293      	uxth	r3, r2
 800b472:	fb06 e303 	mla	r3, r6, r3, lr
 800b476:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b47a:	0c1a      	lsrs	r2, r3, #16
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	ebaa 0303 	sub.w	r3, sl, r3
 800b482:	f8dc a000 	ldr.w	sl, [ip]
 800b486:	fa13 f38a 	uxtah	r3, r3, sl
 800b48a:	fb06 220e 	mla	r2, r6, lr, r2
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	9b00      	ldr	r3, [sp, #0]
 800b492:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b496:	b292      	uxth	r2, r2
 800b498:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b49c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4a4:	4581      	cmp	r9, r0
 800b4a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4aa:	f84c 3b04 	str.w	r3, [ip], #4
 800b4ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4b2:	d2db      	bcs.n	800b46c <quorem+0x42>
 800b4b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4b8:	b92b      	cbnz	r3, 800b4c6 <quorem+0x9c>
 800b4ba:	9b01      	ldr	r3, [sp, #4]
 800b4bc:	3b04      	subs	r3, #4
 800b4be:	429d      	cmp	r5, r3
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	d32c      	bcc.n	800b51e <quorem+0xf4>
 800b4c4:	613c      	str	r4, [r7, #16]
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	f001 f9a8 	bl	800c81c <__mcmp>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	db22      	blt.n	800b516 <quorem+0xec>
 800b4d0:	3601      	adds	r6, #1
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4da:	f8d1 c000 	ldr.w	ip, [r1]
 800b4de:	b293      	uxth	r3, r2
 800b4e0:	1ac3      	subs	r3, r0, r3
 800b4e2:	0c12      	lsrs	r2, r2, #16
 800b4e4:	fa13 f38c 	uxtah	r3, r3, ip
 800b4e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b4ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4f6:	45c1      	cmp	r9, r8
 800b4f8:	f841 3b04 	str.w	r3, [r1], #4
 800b4fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b500:	d2e9      	bcs.n	800b4d6 <quorem+0xac>
 800b502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b50a:	b922      	cbnz	r2, 800b516 <quorem+0xec>
 800b50c:	3b04      	subs	r3, #4
 800b50e:	429d      	cmp	r5, r3
 800b510:	461a      	mov	r2, r3
 800b512:	d30a      	bcc.n	800b52a <quorem+0x100>
 800b514:	613c      	str	r4, [r7, #16]
 800b516:	4630      	mov	r0, r6
 800b518:	b003      	add	sp, #12
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	6812      	ldr	r2, [r2, #0]
 800b520:	3b04      	subs	r3, #4
 800b522:	2a00      	cmp	r2, #0
 800b524:	d1ce      	bne.n	800b4c4 <quorem+0x9a>
 800b526:	3c01      	subs	r4, #1
 800b528:	e7c9      	b.n	800b4be <quorem+0x94>
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	3b04      	subs	r3, #4
 800b52e:	2a00      	cmp	r2, #0
 800b530:	d1f0      	bne.n	800b514 <quorem+0xea>
 800b532:	3c01      	subs	r4, #1
 800b534:	e7eb      	b.n	800b50e <quorem+0xe4>
 800b536:	2000      	movs	r0, #0
 800b538:	e7ee      	b.n	800b518 <quorem+0xee>
 800b53a:	0000      	movs	r0, r0
 800b53c:	0000      	movs	r0, r0
	...

0800b540 <_dtoa_r>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	ed2d 8b04 	vpush	{d8-d9}
 800b548:	69c5      	ldr	r5, [r0, #28]
 800b54a:	b093      	sub	sp, #76	; 0x4c
 800b54c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b550:	ec57 6b10 	vmov	r6, r7, d0
 800b554:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b558:	9107      	str	r1, [sp, #28]
 800b55a:	4604      	mov	r4, r0
 800b55c:	920a      	str	r2, [sp, #40]	; 0x28
 800b55e:	930d      	str	r3, [sp, #52]	; 0x34
 800b560:	b975      	cbnz	r5, 800b580 <_dtoa_r+0x40>
 800b562:	2010      	movs	r0, #16
 800b564:	f000 fe2a 	bl	800c1bc <malloc>
 800b568:	4602      	mov	r2, r0
 800b56a:	61e0      	str	r0, [r4, #28]
 800b56c:	b920      	cbnz	r0, 800b578 <_dtoa_r+0x38>
 800b56e:	4bae      	ldr	r3, [pc, #696]	; (800b828 <_dtoa_r+0x2e8>)
 800b570:	21ef      	movs	r1, #239	; 0xef
 800b572:	48ae      	ldr	r0, [pc, #696]	; (800b82c <_dtoa_r+0x2ec>)
 800b574:	f001 fc82 	bl	800ce7c <__assert_func>
 800b578:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b57c:	6005      	str	r5, [r0, #0]
 800b57e:	60c5      	str	r5, [r0, #12]
 800b580:	69e3      	ldr	r3, [r4, #28]
 800b582:	6819      	ldr	r1, [r3, #0]
 800b584:	b151      	cbz	r1, 800b59c <_dtoa_r+0x5c>
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	604a      	str	r2, [r1, #4]
 800b58a:	2301      	movs	r3, #1
 800b58c:	4093      	lsls	r3, r2
 800b58e:	608b      	str	r3, [r1, #8]
 800b590:	4620      	mov	r0, r4
 800b592:	f000 ff07 	bl	800c3a4 <_Bfree>
 800b596:	69e3      	ldr	r3, [r4, #28]
 800b598:	2200      	movs	r2, #0
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	1e3b      	subs	r3, r7, #0
 800b59e:	bfbb      	ittet	lt
 800b5a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5a4:	9303      	strlt	r3, [sp, #12]
 800b5a6:	2300      	movge	r3, #0
 800b5a8:	2201      	movlt	r2, #1
 800b5aa:	bfac      	ite	ge
 800b5ac:	f8c8 3000 	strge.w	r3, [r8]
 800b5b0:	f8c8 2000 	strlt.w	r2, [r8]
 800b5b4:	4b9e      	ldr	r3, [pc, #632]	; (800b830 <_dtoa_r+0x2f0>)
 800b5b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b5ba:	ea33 0308 	bics.w	r3, r3, r8
 800b5be:	d11b      	bne.n	800b5f8 <_dtoa_r+0xb8>
 800b5c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b5cc:	4333      	orrs	r3, r6
 800b5ce:	f000 8593 	beq.w	800c0f8 <_dtoa_r+0xbb8>
 800b5d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5d4:	b963      	cbnz	r3, 800b5f0 <_dtoa_r+0xb0>
 800b5d6:	4b97      	ldr	r3, [pc, #604]	; (800b834 <_dtoa_r+0x2f4>)
 800b5d8:	e027      	b.n	800b62a <_dtoa_r+0xea>
 800b5da:	4b97      	ldr	r3, [pc, #604]	; (800b838 <_dtoa_r+0x2f8>)
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	3308      	adds	r3, #8
 800b5e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	9800      	ldr	r0, [sp, #0]
 800b5e6:	b013      	add	sp, #76	; 0x4c
 800b5e8:	ecbd 8b04 	vpop	{d8-d9}
 800b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f0:	4b90      	ldr	r3, [pc, #576]	; (800b834 <_dtoa_r+0x2f4>)
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	3303      	adds	r3, #3
 800b5f6:	e7f3      	b.n	800b5e0 <_dtoa_r+0xa0>
 800b5f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	ec51 0b17 	vmov	r0, r1, d7
 800b602:	eeb0 8a47 	vmov.f32	s16, s14
 800b606:	eef0 8a67 	vmov.f32	s17, s15
 800b60a:	2300      	movs	r3, #0
 800b60c:	f7f5 fa84 	bl	8000b18 <__aeabi_dcmpeq>
 800b610:	4681      	mov	r9, r0
 800b612:	b160      	cbz	r0, 800b62e <_dtoa_r+0xee>
 800b614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b616:	2301      	movs	r3, #1
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 8568 	beq.w	800c0f2 <_dtoa_r+0xbb2>
 800b622:	4b86      	ldr	r3, [pc, #536]	; (800b83c <_dtoa_r+0x2fc>)
 800b624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	3b01      	subs	r3, #1
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	e7da      	b.n	800b5e4 <_dtoa_r+0xa4>
 800b62e:	aa10      	add	r2, sp, #64	; 0x40
 800b630:	a911      	add	r1, sp, #68	; 0x44
 800b632:	4620      	mov	r0, r4
 800b634:	eeb0 0a48 	vmov.f32	s0, s16
 800b638:	eef0 0a68 	vmov.f32	s1, s17
 800b63c:	f001 f994 	bl	800c968 <__d2b>
 800b640:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b644:	4682      	mov	sl, r0
 800b646:	2d00      	cmp	r5, #0
 800b648:	d07f      	beq.n	800b74a <_dtoa_r+0x20a>
 800b64a:	ee18 3a90 	vmov	r3, s17
 800b64e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b652:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b656:	ec51 0b18 	vmov	r0, r1, d8
 800b65a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b65e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b662:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b666:	4619      	mov	r1, r3
 800b668:	2200      	movs	r2, #0
 800b66a:	4b75      	ldr	r3, [pc, #468]	; (800b840 <_dtoa_r+0x300>)
 800b66c:	f7f4 fe34 	bl	80002d8 <__aeabi_dsub>
 800b670:	a367      	add	r3, pc, #412	; (adr r3, 800b810 <_dtoa_r+0x2d0>)
 800b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b676:	f7f4 ffe7 	bl	8000648 <__aeabi_dmul>
 800b67a:	a367      	add	r3, pc, #412	; (adr r3, 800b818 <_dtoa_r+0x2d8>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f7f4 fe2c 	bl	80002dc <__adddf3>
 800b684:	4606      	mov	r6, r0
 800b686:	4628      	mov	r0, r5
 800b688:	460f      	mov	r7, r1
 800b68a:	f7f4 ff73 	bl	8000574 <__aeabi_i2d>
 800b68e:	a364      	add	r3, pc, #400	; (adr r3, 800b820 <_dtoa_r+0x2e0>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f7f4 ffd8 	bl	8000648 <__aeabi_dmul>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	4630      	mov	r0, r6
 800b69e:	4639      	mov	r1, r7
 800b6a0:	f7f4 fe1c 	bl	80002dc <__adddf3>
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	f7f5 fa7e 	bl	8000ba8 <__aeabi_d2iz>
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	4683      	mov	fp, r0
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	f7f5 fa39 	bl	8000b2c <__aeabi_dcmplt>
 800b6ba:	b148      	cbz	r0, 800b6d0 <_dtoa_r+0x190>
 800b6bc:	4658      	mov	r0, fp
 800b6be:	f7f4 ff59 	bl	8000574 <__aeabi_i2d>
 800b6c2:	4632      	mov	r2, r6
 800b6c4:	463b      	mov	r3, r7
 800b6c6:	f7f5 fa27 	bl	8000b18 <__aeabi_dcmpeq>
 800b6ca:	b908      	cbnz	r0, 800b6d0 <_dtoa_r+0x190>
 800b6cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6d0:	f1bb 0f16 	cmp.w	fp, #22
 800b6d4:	d857      	bhi.n	800b786 <_dtoa_r+0x246>
 800b6d6:	4b5b      	ldr	r3, [pc, #364]	; (800b844 <_dtoa_r+0x304>)
 800b6d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	ec51 0b18 	vmov	r0, r1, d8
 800b6e4:	f7f5 fa22 	bl	8000b2c <__aeabi_dcmplt>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d04e      	beq.n	800b78a <_dtoa_r+0x24a>
 800b6ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800b6f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6f6:	1b5b      	subs	r3, r3, r5
 800b6f8:	1e5a      	subs	r2, r3, #1
 800b6fa:	bf45      	ittet	mi
 800b6fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800b700:	9305      	strmi	r3, [sp, #20]
 800b702:	2300      	movpl	r3, #0
 800b704:	2300      	movmi	r3, #0
 800b706:	9206      	str	r2, [sp, #24]
 800b708:	bf54      	ite	pl
 800b70a:	9305      	strpl	r3, [sp, #20]
 800b70c:	9306      	strmi	r3, [sp, #24]
 800b70e:	f1bb 0f00 	cmp.w	fp, #0
 800b712:	db3c      	blt.n	800b78e <_dtoa_r+0x24e>
 800b714:	9b06      	ldr	r3, [sp, #24]
 800b716:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b71a:	445b      	add	r3, fp
 800b71c:	9306      	str	r3, [sp, #24]
 800b71e:	2300      	movs	r3, #0
 800b720:	9308      	str	r3, [sp, #32]
 800b722:	9b07      	ldr	r3, [sp, #28]
 800b724:	2b09      	cmp	r3, #9
 800b726:	d868      	bhi.n	800b7fa <_dtoa_r+0x2ba>
 800b728:	2b05      	cmp	r3, #5
 800b72a:	bfc4      	itt	gt
 800b72c:	3b04      	subgt	r3, #4
 800b72e:	9307      	strgt	r3, [sp, #28]
 800b730:	9b07      	ldr	r3, [sp, #28]
 800b732:	f1a3 0302 	sub.w	r3, r3, #2
 800b736:	bfcc      	ite	gt
 800b738:	2500      	movgt	r5, #0
 800b73a:	2501      	movle	r5, #1
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	f200 8085 	bhi.w	800b84c <_dtoa_r+0x30c>
 800b742:	e8df f003 	tbb	[pc, r3]
 800b746:	3b2e      	.short	0x3b2e
 800b748:	5839      	.short	0x5839
 800b74a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b74e:	441d      	add	r5, r3
 800b750:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b754:	2b20      	cmp	r3, #32
 800b756:	bfc1      	itttt	gt
 800b758:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b75c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b760:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b764:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b768:	bfd6      	itet	le
 800b76a:	f1c3 0320 	rsble	r3, r3, #32
 800b76e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b772:	fa06 f003 	lslle.w	r0, r6, r3
 800b776:	f7f4 feed 	bl	8000554 <__aeabi_ui2d>
 800b77a:	2201      	movs	r2, #1
 800b77c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b780:	3d01      	subs	r5, #1
 800b782:	920e      	str	r2, [sp, #56]	; 0x38
 800b784:	e76f      	b.n	800b666 <_dtoa_r+0x126>
 800b786:	2301      	movs	r3, #1
 800b788:	e7b3      	b.n	800b6f2 <_dtoa_r+0x1b2>
 800b78a:	900c      	str	r0, [sp, #48]	; 0x30
 800b78c:	e7b2      	b.n	800b6f4 <_dtoa_r+0x1b4>
 800b78e:	9b05      	ldr	r3, [sp, #20]
 800b790:	eba3 030b 	sub.w	r3, r3, fp
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	f1cb 0300 	rsb	r3, fp, #0
 800b79a:	9308      	str	r3, [sp, #32]
 800b79c:	2300      	movs	r3, #0
 800b79e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7a0:	e7bf      	b.n	800b722 <_dtoa_r+0x1e2>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	dc52      	bgt.n	800b852 <_dtoa_r+0x312>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	9301      	str	r3, [sp, #4]
 800b7b0:	9304      	str	r3, [sp, #16]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	920a      	str	r2, [sp, #40]	; 0x28
 800b7b6:	e00b      	b.n	800b7d0 <_dtoa_r+0x290>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e7f3      	b.n	800b7a4 <_dtoa_r+0x264>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c2:	445b      	add	r3, fp
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	bfb8      	it	lt
 800b7ce:	2301      	movlt	r3, #1
 800b7d0:	69e0      	ldr	r0, [r4, #28]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	2204      	movs	r2, #4
 800b7d6:	f102 0614 	add.w	r6, r2, #20
 800b7da:	429e      	cmp	r6, r3
 800b7dc:	d93d      	bls.n	800b85a <_dtoa_r+0x31a>
 800b7de:	6041      	str	r1, [r0, #4]
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f000 fd9f 	bl	800c324 <_Balloc>
 800b7e6:	9000      	str	r0, [sp, #0]
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d139      	bne.n	800b860 <_dtoa_r+0x320>
 800b7ec:	4b16      	ldr	r3, [pc, #88]	; (800b848 <_dtoa_r+0x308>)
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	f240 11af 	movw	r1, #431	; 0x1af
 800b7f4:	e6bd      	b.n	800b572 <_dtoa_r+0x32>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e7e1      	b.n	800b7be <_dtoa_r+0x27e>
 800b7fa:	2501      	movs	r5, #1
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9307      	str	r3, [sp, #28]
 800b800:	9509      	str	r5, [sp, #36]	; 0x24
 800b802:	f04f 33ff 	mov.w	r3, #4294967295
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	2200      	movs	r2, #0
 800b80c:	2312      	movs	r3, #18
 800b80e:	e7d1      	b.n	800b7b4 <_dtoa_r+0x274>
 800b810:	636f4361 	.word	0x636f4361
 800b814:	3fd287a7 	.word	0x3fd287a7
 800b818:	8b60c8b3 	.word	0x8b60c8b3
 800b81c:	3fc68a28 	.word	0x3fc68a28
 800b820:	509f79fb 	.word	0x509f79fb
 800b824:	3fd34413 	.word	0x3fd34413
 800b828:	0800f7bd 	.word	0x0800f7bd
 800b82c:	0800f7d4 	.word	0x0800f7d4
 800b830:	7ff00000 	.word	0x7ff00000
 800b834:	0800f7b9 	.word	0x0800f7b9
 800b838:	0800f7b0 	.word	0x0800f7b0
 800b83c:	0800f78d 	.word	0x0800f78d
 800b840:	3ff80000 	.word	0x3ff80000
 800b844:	0800f8c0 	.word	0x0800f8c0
 800b848:	0800f82c 	.word	0x0800f82c
 800b84c:	2301      	movs	r3, #1
 800b84e:	9309      	str	r3, [sp, #36]	; 0x24
 800b850:	e7d7      	b.n	800b802 <_dtoa_r+0x2c2>
 800b852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	9304      	str	r3, [sp, #16]
 800b858:	e7ba      	b.n	800b7d0 <_dtoa_r+0x290>
 800b85a:	3101      	adds	r1, #1
 800b85c:	0052      	lsls	r2, r2, #1
 800b85e:	e7ba      	b.n	800b7d6 <_dtoa_r+0x296>
 800b860:	69e3      	ldr	r3, [r4, #28]
 800b862:	9a00      	ldr	r2, [sp, #0]
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	9b04      	ldr	r3, [sp, #16]
 800b868:	2b0e      	cmp	r3, #14
 800b86a:	f200 80a8 	bhi.w	800b9be <_dtoa_r+0x47e>
 800b86e:	2d00      	cmp	r5, #0
 800b870:	f000 80a5 	beq.w	800b9be <_dtoa_r+0x47e>
 800b874:	f1bb 0f00 	cmp.w	fp, #0
 800b878:	dd38      	ble.n	800b8ec <_dtoa_r+0x3ac>
 800b87a:	4bc0      	ldr	r3, [pc, #768]	; (800bb7c <_dtoa_r+0x63c>)
 800b87c:	f00b 020f 	and.w	r2, fp, #15
 800b880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b884:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b888:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b88c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b890:	d019      	beq.n	800b8c6 <_dtoa_r+0x386>
 800b892:	4bbb      	ldr	r3, [pc, #748]	; (800bb80 <_dtoa_r+0x640>)
 800b894:	ec51 0b18 	vmov	r0, r1, d8
 800b898:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b89c:	f7f4 fffe 	bl	800089c <__aeabi_ddiv>
 800b8a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8a4:	f008 080f 	and.w	r8, r8, #15
 800b8a8:	2503      	movs	r5, #3
 800b8aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bb80 <_dtoa_r+0x640>
 800b8ae:	f1b8 0f00 	cmp.w	r8, #0
 800b8b2:	d10a      	bne.n	800b8ca <_dtoa_r+0x38a>
 800b8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8b8:	4632      	mov	r2, r6
 800b8ba:	463b      	mov	r3, r7
 800b8bc:	f7f4 ffee 	bl	800089c <__aeabi_ddiv>
 800b8c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8c4:	e02b      	b.n	800b91e <_dtoa_r+0x3de>
 800b8c6:	2502      	movs	r5, #2
 800b8c8:	e7ef      	b.n	800b8aa <_dtoa_r+0x36a>
 800b8ca:	f018 0f01 	tst.w	r8, #1
 800b8ce:	d008      	beq.n	800b8e2 <_dtoa_r+0x3a2>
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b8d8:	f7f4 feb6 	bl	8000648 <__aeabi_dmul>
 800b8dc:	3501      	adds	r5, #1
 800b8de:	4606      	mov	r6, r0
 800b8e0:	460f      	mov	r7, r1
 800b8e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b8e6:	f109 0908 	add.w	r9, r9, #8
 800b8ea:	e7e0      	b.n	800b8ae <_dtoa_r+0x36e>
 800b8ec:	f000 809f 	beq.w	800ba2e <_dtoa_r+0x4ee>
 800b8f0:	f1cb 0600 	rsb	r6, fp, #0
 800b8f4:	4ba1      	ldr	r3, [pc, #644]	; (800bb7c <_dtoa_r+0x63c>)
 800b8f6:	4fa2      	ldr	r7, [pc, #648]	; (800bb80 <_dtoa_r+0x640>)
 800b8f8:	f006 020f 	and.w	r2, r6, #15
 800b8fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	ec51 0b18 	vmov	r0, r1, d8
 800b908:	f7f4 fe9e 	bl	8000648 <__aeabi_dmul>
 800b90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b910:	1136      	asrs	r6, r6, #4
 800b912:	2300      	movs	r3, #0
 800b914:	2502      	movs	r5, #2
 800b916:	2e00      	cmp	r6, #0
 800b918:	d17e      	bne.n	800ba18 <_dtoa_r+0x4d8>
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1d0      	bne.n	800b8c0 <_dtoa_r+0x380>
 800b91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b920:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 8084 	beq.w	800ba32 <_dtoa_r+0x4f2>
 800b92a:	4b96      	ldr	r3, [pc, #600]	; (800bb84 <_dtoa_r+0x644>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	4640      	mov	r0, r8
 800b930:	4649      	mov	r1, r9
 800b932:	f7f5 f8fb 	bl	8000b2c <__aeabi_dcmplt>
 800b936:	2800      	cmp	r0, #0
 800b938:	d07b      	beq.n	800ba32 <_dtoa_r+0x4f2>
 800b93a:	9b04      	ldr	r3, [sp, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d078      	beq.n	800ba32 <_dtoa_r+0x4f2>
 800b940:	9b01      	ldr	r3, [sp, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	dd39      	ble.n	800b9ba <_dtoa_r+0x47a>
 800b946:	4b90      	ldr	r3, [pc, #576]	; (800bb88 <_dtoa_r+0x648>)
 800b948:	2200      	movs	r2, #0
 800b94a:	4640      	mov	r0, r8
 800b94c:	4649      	mov	r1, r9
 800b94e:	f7f4 fe7b 	bl	8000648 <__aeabi_dmul>
 800b952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b956:	9e01      	ldr	r6, [sp, #4]
 800b958:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b95c:	3501      	adds	r5, #1
 800b95e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b962:	4628      	mov	r0, r5
 800b964:	f7f4 fe06 	bl	8000574 <__aeabi_i2d>
 800b968:	4642      	mov	r2, r8
 800b96a:	464b      	mov	r3, r9
 800b96c:	f7f4 fe6c 	bl	8000648 <__aeabi_dmul>
 800b970:	4b86      	ldr	r3, [pc, #536]	; (800bb8c <_dtoa_r+0x64c>)
 800b972:	2200      	movs	r2, #0
 800b974:	f7f4 fcb2 	bl	80002dc <__adddf3>
 800b978:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b980:	9303      	str	r3, [sp, #12]
 800b982:	2e00      	cmp	r6, #0
 800b984:	d158      	bne.n	800ba38 <_dtoa_r+0x4f8>
 800b986:	4b82      	ldr	r3, [pc, #520]	; (800bb90 <_dtoa_r+0x650>)
 800b988:	2200      	movs	r2, #0
 800b98a:	4640      	mov	r0, r8
 800b98c:	4649      	mov	r1, r9
 800b98e:	f7f4 fca3 	bl	80002d8 <__aeabi_dsub>
 800b992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b996:	4680      	mov	r8, r0
 800b998:	4689      	mov	r9, r1
 800b99a:	f7f5 f8e5 	bl	8000b68 <__aeabi_dcmpgt>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	f040 8296 	bne.w	800bed0 <_dtoa_r+0x990>
 800b9a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	f7f5 f8bc 	bl	8000b2c <__aeabi_dcmplt>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	f040 8289 	bne.w	800becc <_dtoa_r+0x98c>
 800b9ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b9be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f2c0 814e 	blt.w	800bc62 <_dtoa_r+0x722>
 800b9c6:	f1bb 0f0e 	cmp.w	fp, #14
 800b9ca:	f300 814a 	bgt.w	800bc62 <_dtoa_r+0x722>
 800b9ce:	4b6b      	ldr	r3, [pc, #428]	; (800bb7c <_dtoa_r+0x63c>)
 800b9d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b9d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f280 80dc 	bge.w	800bb98 <_dtoa_r+0x658>
 800b9e0:	9b04      	ldr	r3, [sp, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f300 80d8 	bgt.w	800bb98 <_dtoa_r+0x658>
 800b9e8:	f040 826f 	bne.w	800beca <_dtoa_r+0x98a>
 800b9ec:	4b68      	ldr	r3, [pc, #416]	; (800bb90 <_dtoa_r+0x650>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4640      	mov	r0, r8
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	f7f4 fe28 	bl	8000648 <__aeabi_dmul>
 800b9f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9fc:	f7f5 f8aa 	bl	8000b54 <__aeabi_dcmpge>
 800ba00:	9e04      	ldr	r6, [sp, #16]
 800ba02:	4637      	mov	r7, r6
 800ba04:	2800      	cmp	r0, #0
 800ba06:	f040 8245 	bne.w	800be94 <_dtoa_r+0x954>
 800ba0a:	9d00      	ldr	r5, [sp, #0]
 800ba0c:	2331      	movs	r3, #49	; 0x31
 800ba0e:	f805 3b01 	strb.w	r3, [r5], #1
 800ba12:	f10b 0b01 	add.w	fp, fp, #1
 800ba16:	e241      	b.n	800be9c <_dtoa_r+0x95c>
 800ba18:	07f2      	lsls	r2, r6, #31
 800ba1a:	d505      	bpl.n	800ba28 <_dtoa_r+0x4e8>
 800ba1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba20:	f7f4 fe12 	bl	8000648 <__aeabi_dmul>
 800ba24:	3501      	adds	r5, #1
 800ba26:	2301      	movs	r3, #1
 800ba28:	1076      	asrs	r6, r6, #1
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	e773      	b.n	800b916 <_dtoa_r+0x3d6>
 800ba2e:	2502      	movs	r5, #2
 800ba30:	e775      	b.n	800b91e <_dtoa_r+0x3de>
 800ba32:	9e04      	ldr	r6, [sp, #16]
 800ba34:	465f      	mov	r7, fp
 800ba36:	e792      	b.n	800b95e <_dtoa_r+0x41e>
 800ba38:	9900      	ldr	r1, [sp, #0]
 800ba3a:	4b50      	ldr	r3, [pc, #320]	; (800bb7c <_dtoa_r+0x63c>)
 800ba3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba40:	4431      	add	r1, r6
 800ba42:	9102      	str	r1, [sp, #8]
 800ba44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba46:	eeb0 9a47 	vmov.f32	s18, s14
 800ba4a:	eef0 9a67 	vmov.f32	s19, s15
 800ba4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba56:	2900      	cmp	r1, #0
 800ba58:	d044      	beq.n	800bae4 <_dtoa_r+0x5a4>
 800ba5a:	494e      	ldr	r1, [pc, #312]	; (800bb94 <_dtoa_r+0x654>)
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	f7f4 ff1d 	bl	800089c <__aeabi_ddiv>
 800ba62:	ec53 2b19 	vmov	r2, r3, d9
 800ba66:	f7f4 fc37 	bl	80002d8 <__aeabi_dsub>
 800ba6a:	9d00      	ldr	r5, [sp, #0]
 800ba6c:	ec41 0b19 	vmov	d9, r0, r1
 800ba70:	4649      	mov	r1, r9
 800ba72:	4640      	mov	r0, r8
 800ba74:	f7f5 f898 	bl	8000ba8 <__aeabi_d2iz>
 800ba78:	4606      	mov	r6, r0
 800ba7a:	f7f4 fd7b 	bl	8000574 <__aeabi_i2d>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4640      	mov	r0, r8
 800ba84:	4649      	mov	r1, r9
 800ba86:	f7f4 fc27 	bl	80002d8 <__aeabi_dsub>
 800ba8a:	3630      	adds	r6, #48	; 0x30
 800ba8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ba90:	ec53 2b19 	vmov	r2, r3, d9
 800ba94:	4680      	mov	r8, r0
 800ba96:	4689      	mov	r9, r1
 800ba98:	f7f5 f848 	bl	8000b2c <__aeabi_dcmplt>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d164      	bne.n	800bb6a <_dtoa_r+0x62a>
 800baa0:	4642      	mov	r2, r8
 800baa2:	464b      	mov	r3, r9
 800baa4:	4937      	ldr	r1, [pc, #220]	; (800bb84 <_dtoa_r+0x644>)
 800baa6:	2000      	movs	r0, #0
 800baa8:	f7f4 fc16 	bl	80002d8 <__aeabi_dsub>
 800baac:	ec53 2b19 	vmov	r2, r3, d9
 800bab0:	f7f5 f83c 	bl	8000b2c <__aeabi_dcmplt>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	f040 80b6 	bne.w	800bc26 <_dtoa_r+0x6e6>
 800baba:	9b02      	ldr	r3, [sp, #8]
 800babc:	429d      	cmp	r5, r3
 800babe:	f43f af7c 	beq.w	800b9ba <_dtoa_r+0x47a>
 800bac2:	4b31      	ldr	r3, [pc, #196]	; (800bb88 <_dtoa_r+0x648>)
 800bac4:	ec51 0b19 	vmov	r0, r1, d9
 800bac8:	2200      	movs	r2, #0
 800baca:	f7f4 fdbd 	bl	8000648 <__aeabi_dmul>
 800bace:	4b2e      	ldr	r3, [pc, #184]	; (800bb88 <_dtoa_r+0x648>)
 800bad0:	ec41 0b19 	vmov	d9, r0, r1
 800bad4:	2200      	movs	r2, #0
 800bad6:	4640      	mov	r0, r8
 800bad8:	4649      	mov	r1, r9
 800bada:	f7f4 fdb5 	bl	8000648 <__aeabi_dmul>
 800bade:	4680      	mov	r8, r0
 800bae0:	4689      	mov	r9, r1
 800bae2:	e7c5      	b.n	800ba70 <_dtoa_r+0x530>
 800bae4:	ec51 0b17 	vmov	r0, r1, d7
 800bae8:	f7f4 fdae 	bl	8000648 <__aeabi_dmul>
 800baec:	9b02      	ldr	r3, [sp, #8]
 800baee:	9d00      	ldr	r5, [sp, #0]
 800baf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800baf2:	ec41 0b19 	vmov	d9, r0, r1
 800baf6:	4649      	mov	r1, r9
 800baf8:	4640      	mov	r0, r8
 800bafa:	f7f5 f855 	bl	8000ba8 <__aeabi_d2iz>
 800bafe:	4606      	mov	r6, r0
 800bb00:	f7f4 fd38 	bl	8000574 <__aeabi_i2d>
 800bb04:	3630      	adds	r6, #48	; 0x30
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	f7f4 fbe3 	bl	80002d8 <__aeabi_dsub>
 800bb12:	f805 6b01 	strb.w	r6, [r5], #1
 800bb16:	9b02      	ldr	r3, [sp, #8]
 800bb18:	429d      	cmp	r5, r3
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	4689      	mov	r9, r1
 800bb1e:	f04f 0200 	mov.w	r2, #0
 800bb22:	d124      	bne.n	800bb6e <_dtoa_r+0x62e>
 800bb24:	4b1b      	ldr	r3, [pc, #108]	; (800bb94 <_dtoa_r+0x654>)
 800bb26:	ec51 0b19 	vmov	r0, r1, d9
 800bb2a:	f7f4 fbd7 	bl	80002dc <__adddf3>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	4640      	mov	r0, r8
 800bb34:	4649      	mov	r1, r9
 800bb36:	f7f5 f817 	bl	8000b68 <__aeabi_dcmpgt>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d173      	bne.n	800bc26 <_dtoa_r+0x6e6>
 800bb3e:	ec53 2b19 	vmov	r2, r3, d9
 800bb42:	4914      	ldr	r1, [pc, #80]	; (800bb94 <_dtoa_r+0x654>)
 800bb44:	2000      	movs	r0, #0
 800bb46:	f7f4 fbc7 	bl	80002d8 <__aeabi_dsub>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4640      	mov	r0, r8
 800bb50:	4649      	mov	r1, r9
 800bb52:	f7f4 ffeb 	bl	8000b2c <__aeabi_dcmplt>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	f43f af2f 	beq.w	800b9ba <_dtoa_r+0x47a>
 800bb5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb5e:	1e6b      	subs	r3, r5, #1
 800bb60:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb66:	2b30      	cmp	r3, #48	; 0x30
 800bb68:	d0f8      	beq.n	800bb5c <_dtoa_r+0x61c>
 800bb6a:	46bb      	mov	fp, r7
 800bb6c:	e04a      	b.n	800bc04 <_dtoa_r+0x6c4>
 800bb6e:	4b06      	ldr	r3, [pc, #24]	; (800bb88 <_dtoa_r+0x648>)
 800bb70:	f7f4 fd6a 	bl	8000648 <__aeabi_dmul>
 800bb74:	4680      	mov	r8, r0
 800bb76:	4689      	mov	r9, r1
 800bb78:	e7bd      	b.n	800baf6 <_dtoa_r+0x5b6>
 800bb7a:	bf00      	nop
 800bb7c:	0800f8c0 	.word	0x0800f8c0
 800bb80:	0800f898 	.word	0x0800f898
 800bb84:	3ff00000 	.word	0x3ff00000
 800bb88:	40240000 	.word	0x40240000
 800bb8c:	401c0000 	.word	0x401c0000
 800bb90:	40140000 	.word	0x40140000
 800bb94:	3fe00000 	.word	0x3fe00000
 800bb98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb9c:	9d00      	ldr	r5, [sp, #0]
 800bb9e:	4642      	mov	r2, r8
 800bba0:	464b      	mov	r3, r9
 800bba2:	4630      	mov	r0, r6
 800bba4:	4639      	mov	r1, r7
 800bba6:	f7f4 fe79 	bl	800089c <__aeabi_ddiv>
 800bbaa:	f7f4 fffd 	bl	8000ba8 <__aeabi_d2iz>
 800bbae:	9001      	str	r0, [sp, #4]
 800bbb0:	f7f4 fce0 	bl	8000574 <__aeabi_i2d>
 800bbb4:	4642      	mov	r2, r8
 800bbb6:	464b      	mov	r3, r9
 800bbb8:	f7f4 fd46 	bl	8000648 <__aeabi_dmul>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f4 fb88 	bl	80002d8 <__aeabi_dsub>
 800bbc8:	9e01      	ldr	r6, [sp, #4]
 800bbca:	9f04      	ldr	r7, [sp, #16]
 800bbcc:	3630      	adds	r6, #48	; 0x30
 800bbce:	f805 6b01 	strb.w	r6, [r5], #1
 800bbd2:	9e00      	ldr	r6, [sp, #0]
 800bbd4:	1bae      	subs	r6, r5, r6
 800bbd6:	42b7      	cmp	r7, r6
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	d134      	bne.n	800bc48 <_dtoa_r+0x708>
 800bbde:	f7f4 fb7d 	bl	80002dc <__adddf3>
 800bbe2:	4642      	mov	r2, r8
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	460f      	mov	r7, r1
 800bbea:	f7f4 ffbd 	bl	8000b68 <__aeabi_dcmpgt>
 800bbee:	b9c8      	cbnz	r0, 800bc24 <_dtoa_r+0x6e4>
 800bbf0:	4642      	mov	r2, r8
 800bbf2:	464b      	mov	r3, r9
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 ff8e 	bl	8000b18 <__aeabi_dcmpeq>
 800bbfc:	b110      	cbz	r0, 800bc04 <_dtoa_r+0x6c4>
 800bbfe:	9b01      	ldr	r3, [sp, #4]
 800bc00:	07db      	lsls	r3, r3, #31
 800bc02:	d40f      	bmi.n	800bc24 <_dtoa_r+0x6e4>
 800bc04:	4651      	mov	r1, sl
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fbcc 	bl	800c3a4 <_Bfree>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc10:	702b      	strb	r3, [r5, #0]
 800bc12:	f10b 0301 	add.w	r3, fp, #1
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f43f ace2 	beq.w	800b5e4 <_dtoa_r+0xa4>
 800bc20:	601d      	str	r5, [r3, #0]
 800bc22:	e4df      	b.n	800b5e4 <_dtoa_r+0xa4>
 800bc24:	465f      	mov	r7, fp
 800bc26:	462b      	mov	r3, r5
 800bc28:	461d      	mov	r5, r3
 800bc2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc2e:	2a39      	cmp	r2, #57	; 0x39
 800bc30:	d106      	bne.n	800bc40 <_dtoa_r+0x700>
 800bc32:	9a00      	ldr	r2, [sp, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d1f7      	bne.n	800bc28 <_dtoa_r+0x6e8>
 800bc38:	9900      	ldr	r1, [sp, #0]
 800bc3a:	2230      	movs	r2, #48	; 0x30
 800bc3c:	3701      	adds	r7, #1
 800bc3e:	700a      	strb	r2, [r1, #0]
 800bc40:	781a      	ldrb	r2, [r3, #0]
 800bc42:	3201      	adds	r2, #1
 800bc44:	701a      	strb	r2, [r3, #0]
 800bc46:	e790      	b.n	800bb6a <_dtoa_r+0x62a>
 800bc48:	4ba3      	ldr	r3, [pc, #652]	; (800bed8 <_dtoa_r+0x998>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f7f4 fcfc 	bl	8000648 <__aeabi_dmul>
 800bc50:	2200      	movs	r2, #0
 800bc52:	2300      	movs	r3, #0
 800bc54:	4606      	mov	r6, r0
 800bc56:	460f      	mov	r7, r1
 800bc58:	f7f4 ff5e 	bl	8000b18 <__aeabi_dcmpeq>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d09e      	beq.n	800bb9e <_dtoa_r+0x65e>
 800bc60:	e7d0      	b.n	800bc04 <_dtoa_r+0x6c4>
 800bc62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	f000 80ca 	beq.w	800bdfe <_dtoa_r+0x8be>
 800bc6a:	9a07      	ldr	r2, [sp, #28]
 800bc6c:	2a01      	cmp	r2, #1
 800bc6e:	f300 80ad 	bgt.w	800bdcc <_dtoa_r+0x88c>
 800bc72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc74:	2a00      	cmp	r2, #0
 800bc76:	f000 80a5 	beq.w	800bdc4 <_dtoa_r+0x884>
 800bc7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc7e:	9e08      	ldr	r6, [sp, #32]
 800bc80:	9d05      	ldr	r5, [sp, #20]
 800bc82:	9a05      	ldr	r2, [sp, #20]
 800bc84:	441a      	add	r2, r3
 800bc86:	9205      	str	r2, [sp, #20]
 800bc88:	9a06      	ldr	r2, [sp, #24]
 800bc8a:	2101      	movs	r1, #1
 800bc8c:	441a      	add	r2, r3
 800bc8e:	4620      	mov	r0, r4
 800bc90:	9206      	str	r2, [sp, #24]
 800bc92:	f000 fc3d 	bl	800c510 <__i2b>
 800bc96:	4607      	mov	r7, r0
 800bc98:	b165      	cbz	r5, 800bcb4 <_dtoa_r+0x774>
 800bc9a:	9b06      	ldr	r3, [sp, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dd09      	ble.n	800bcb4 <_dtoa_r+0x774>
 800bca0:	42ab      	cmp	r3, r5
 800bca2:	9a05      	ldr	r2, [sp, #20]
 800bca4:	bfa8      	it	ge
 800bca6:	462b      	movge	r3, r5
 800bca8:	1ad2      	subs	r2, r2, r3
 800bcaa:	9205      	str	r2, [sp, #20]
 800bcac:	9a06      	ldr	r2, [sp, #24]
 800bcae:	1aed      	subs	r5, r5, r3
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	9306      	str	r3, [sp, #24]
 800bcb4:	9b08      	ldr	r3, [sp, #32]
 800bcb6:	b1f3      	cbz	r3, 800bcf6 <_dtoa_r+0x7b6>
 800bcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f000 80a3 	beq.w	800be06 <_dtoa_r+0x8c6>
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	dd10      	ble.n	800bce6 <_dtoa_r+0x7a6>
 800bcc4:	4639      	mov	r1, r7
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f000 fce1 	bl	800c690 <__pow5mult>
 800bcce:	4652      	mov	r2, sl
 800bcd0:	4601      	mov	r1, r0
 800bcd2:	4607      	mov	r7, r0
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f000 fc31 	bl	800c53c <__multiply>
 800bcda:	4651      	mov	r1, sl
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 fb60 	bl	800c3a4 <_Bfree>
 800bce4:	46c2      	mov	sl, r8
 800bce6:	9b08      	ldr	r3, [sp, #32]
 800bce8:	1b9a      	subs	r2, r3, r6
 800bcea:	d004      	beq.n	800bcf6 <_dtoa_r+0x7b6>
 800bcec:	4651      	mov	r1, sl
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 fcce 	bl	800c690 <__pow5mult>
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 fc09 	bl	800c510 <__i2b>
 800bcfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	4606      	mov	r6, r0
 800bd04:	f340 8081 	ble.w	800be0a <_dtoa_r+0x8ca>
 800bd08:	461a      	mov	r2, r3
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 fcbf 	bl	800c690 <__pow5mult>
 800bd12:	9b07      	ldr	r3, [sp, #28]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	4606      	mov	r6, r0
 800bd18:	dd7a      	ble.n	800be10 <_dtoa_r+0x8d0>
 800bd1a:	f04f 0800 	mov.w	r8, #0
 800bd1e:	6933      	ldr	r3, [r6, #16]
 800bd20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd24:	6918      	ldr	r0, [r3, #16]
 800bd26:	f000 fba5 	bl	800c474 <__hi0bits>
 800bd2a:	f1c0 0020 	rsb	r0, r0, #32
 800bd2e:	9b06      	ldr	r3, [sp, #24]
 800bd30:	4418      	add	r0, r3
 800bd32:	f010 001f 	ands.w	r0, r0, #31
 800bd36:	f000 8094 	beq.w	800be62 <_dtoa_r+0x922>
 800bd3a:	f1c0 0320 	rsb	r3, r0, #32
 800bd3e:	2b04      	cmp	r3, #4
 800bd40:	f340 8085 	ble.w	800be4e <_dtoa_r+0x90e>
 800bd44:	9b05      	ldr	r3, [sp, #20]
 800bd46:	f1c0 001c 	rsb	r0, r0, #28
 800bd4a:	4403      	add	r3, r0
 800bd4c:	9305      	str	r3, [sp, #20]
 800bd4e:	9b06      	ldr	r3, [sp, #24]
 800bd50:	4403      	add	r3, r0
 800bd52:	4405      	add	r5, r0
 800bd54:	9306      	str	r3, [sp, #24]
 800bd56:	9b05      	ldr	r3, [sp, #20]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	dd05      	ble.n	800bd68 <_dtoa_r+0x828>
 800bd5c:	4651      	mov	r1, sl
 800bd5e:	461a      	mov	r2, r3
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 fcef 	bl	800c744 <__lshift>
 800bd66:	4682      	mov	sl, r0
 800bd68:	9b06      	ldr	r3, [sp, #24]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	dd05      	ble.n	800bd7a <_dtoa_r+0x83a>
 800bd6e:	4631      	mov	r1, r6
 800bd70:	461a      	mov	r2, r3
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 fce6 	bl	800c744 <__lshift>
 800bd78:	4606      	mov	r6, r0
 800bd7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d072      	beq.n	800be66 <_dtoa_r+0x926>
 800bd80:	4631      	mov	r1, r6
 800bd82:	4650      	mov	r0, sl
 800bd84:	f000 fd4a 	bl	800c81c <__mcmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	da6c      	bge.n	800be66 <_dtoa_r+0x926>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4651      	mov	r1, sl
 800bd90:	220a      	movs	r2, #10
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 fb28 	bl	800c3e8 <__multadd>
 800bd98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd9e:	4682      	mov	sl, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 81b0 	beq.w	800c106 <_dtoa_r+0xbc6>
 800bda6:	2300      	movs	r3, #0
 800bda8:	4639      	mov	r1, r7
 800bdaa:	220a      	movs	r2, #10
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fb1b 	bl	800c3e8 <__multadd>
 800bdb2:	9b01      	ldr	r3, [sp, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	4607      	mov	r7, r0
 800bdb8:	f300 8096 	bgt.w	800bee8 <_dtoa_r+0x9a8>
 800bdbc:	9b07      	ldr	r3, [sp, #28]
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	dc59      	bgt.n	800be76 <_dtoa_r+0x936>
 800bdc2:	e091      	b.n	800bee8 <_dtoa_r+0x9a8>
 800bdc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bdca:	e758      	b.n	800bc7e <_dtoa_r+0x73e>
 800bdcc:	9b04      	ldr	r3, [sp, #16]
 800bdce:	1e5e      	subs	r6, r3, #1
 800bdd0:	9b08      	ldr	r3, [sp, #32]
 800bdd2:	42b3      	cmp	r3, r6
 800bdd4:	bfbf      	itttt	lt
 800bdd6:	9b08      	ldrlt	r3, [sp, #32]
 800bdd8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bdda:	9608      	strlt	r6, [sp, #32]
 800bddc:	1af3      	sublt	r3, r6, r3
 800bdde:	bfb4      	ite	lt
 800bde0:	18d2      	addlt	r2, r2, r3
 800bde2:	1b9e      	subge	r6, r3, r6
 800bde4:	9b04      	ldr	r3, [sp, #16]
 800bde6:	bfbc      	itt	lt
 800bde8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bdea:	2600      	movlt	r6, #0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	bfb7      	itett	lt
 800bdf0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bdf4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bdf8:	1a9d      	sublt	r5, r3, r2
 800bdfa:	2300      	movlt	r3, #0
 800bdfc:	e741      	b.n	800bc82 <_dtoa_r+0x742>
 800bdfe:	9e08      	ldr	r6, [sp, #32]
 800be00:	9d05      	ldr	r5, [sp, #20]
 800be02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be04:	e748      	b.n	800bc98 <_dtoa_r+0x758>
 800be06:	9a08      	ldr	r2, [sp, #32]
 800be08:	e770      	b.n	800bcec <_dtoa_r+0x7ac>
 800be0a:	9b07      	ldr	r3, [sp, #28]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	dc19      	bgt.n	800be44 <_dtoa_r+0x904>
 800be10:	9b02      	ldr	r3, [sp, #8]
 800be12:	b9bb      	cbnz	r3, 800be44 <_dtoa_r+0x904>
 800be14:	9b03      	ldr	r3, [sp, #12]
 800be16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be1a:	b99b      	cbnz	r3, 800be44 <_dtoa_r+0x904>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be22:	0d1b      	lsrs	r3, r3, #20
 800be24:	051b      	lsls	r3, r3, #20
 800be26:	b183      	cbz	r3, 800be4a <_dtoa_r+0x90a>
 800be28:	9b05      	ldr	r3, [sp, #20]
 800be2a:	3301      	adds	r3, #1
 800be2c:	9305      	str	r3, [sp, #20]
 800be2e:	9b06      	ldr	r3, [sp, #24]
 800be30:	3301      	adds	r3, #1
 800be32:	9306      	str	r3, [sp, #24]
 800be34:	f04f 0801 	mov.w	r8, #1
 800be38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f47f af6f 	bne.w	800bd1e <_dtoa_r+0x7de>
 800be40:	2001      	movs	r0, #1
 800be42:	e774      	b.n	800bd2e <_dtoa_r+0x7ee>
 800be44:	f04f 0800 	mov.w	r8, #0
 800be48:	e7f6      	b.n	800be38 <_dtoa_r+0x8f8>
 800be4a:	4698      	mov	r8, r3
 800be4c:	e7f4      	b.n	800be38 <_dtoa_r+0x8f8>
 800be4e:	d082      	beq.n	800bd56 <_dtoa_r+0x816>
 800be50:	9a05      	ldr	r2, [sp, #20]
 800be52:	331c      	adds	r3, #28
 800be54:	441a      	add	r2, r3
 800be56:	9205      	str	r2, [sp, #20]
 800be58:	9a06      	ldr	r2, [sp, #24]
 800be5a:	441a      	add	r2, r3
 800be5c:	441d      	add	r5, r3
 800be5e:	9206      	str	r2, [sp, #24]
 800be60:	e779      	b.n	800bd56 <_dtoa_r+0x816>
 800be62:	4603      	mov	r3, r0
 800be64:	e7f4      	b.n	800be50 <_dtoa_r+0x910>
 800be66:	9b04      	ldr	r3, [sp, #16]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dc37      	bgt.n	800bedc <_dtoa_r+0x99c>
 800be6c:	9b07      	ldr	r3, [sp, #28]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	dd34      	ble.n	800bedc <_dtoa_r+0x99c>
 800be72:	9b04      	ldr	r3, [sp, #16]
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	9b01      	ldr	r3, [sp, #4]
 800be78:	b963      	cbnz	r3, 800be94 <_dtoa_r+0x954>
 800be7a:	4631      	mov	r1, r6
 800be7c:	2205      	movs	r2, #5
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 fab2 	bl	800c3e8 <__multadd>
 800be84:	4601      	mov	r1, r0
 800be86:	4606      	mov	r6, r0
 800be88:	4650      	mov	r0, sl
 800be8a:	f000 fcc7 	bl	800c81c <__mcmp>
 800be8e:	2800      	cmp	r0, #0
 800be90:	f73f adbb 	bgt.w	800ba0a <_dtoa_r+0x4ca>
 800be94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be96:	9d00      	ldr	r5, [sp, #0]
 800be98:	ea6f 0b03 	mvn.w	fp, r3
 800be9c:	f04f 0800 	mov.w	r8, #0
 800bea0:	4631      	mov	r1, r6
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 fa7e 	bl	800c3a4 <_Bfree>
 800bea8:	2f00      	cmp	r7, #0
 800beaa:	f43f aeab 	beq.w	800bc04 <_dtoa_r+0x6c4>
 800beae:	f1b8 0f00 	cmp.w	r8, #0
 800beb2:	d005      	beq.n	800bec0 <_dtoa_r+0x980>
 800beb4:	45b8      	cmp	r8, r7
 800beb6:	d003      	beq.n	800bec0 <_dtoa_r+0x980>
 800beb8:	4641      	mov	r1, r8
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 fa72 	bl	800c3a4 <_Bfree>
 800bec0:	4639      	mov	r1, r7
 800bec2:	4620      	mov	r0, r4
 800bec4:	f000 fa6e 	bl	800c3a4 <_Bfree>
 800bec8:	e69c      	b.n	800bc04 <_dtoa_r+0x6c4>
 800beca:	2600      	movs	r6, #0
 800becc:	4637      	mov	r7, r6
 800bece:	e7e1      	b.n	800be94 <_dtoa_r+0x954>
 800bed0:	46bb      	mov	fp, r7
 800bed2:	4637      	mov	r7, r6
 800bed4:	e599      	b.n	800ba0a <_dtoa_r+0x4ca>
 800bed6:	bf00      	nop
 800bed8:	40240000 	.word	0x40240000
 800bedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 80c8 	beq.w	800c074 <_dtoa_r+0xb34>
 800bee4:	9b04      	ldr	r3, [sp, #16]
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	2d00      	cmp	r5, #0
 800beea:	dd05      	ble.n	800bef8 <_dtoa_r+0x9b8>
 800beec:	4639      	mov	r1, r7
 800beee:	462a      	mov	r2, r5
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 fc27 	bl	800c744 <__lshift>
 800bef6:	4607      	mov	r7, r0
 800bef8:	f1b8 0f00 	cmp.w	r8, #0
 800befc:	d05b      	beq.n	800bfb6 <_dtoa_r+0xa76>
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 fa0f 	bl	800c324 <_Balloc>
 800bf06:	4605      	mov	r5, r0
 800bf08:	b928      	cbnz	r0, 800bf16 <_dtoa_r+0x9d6>
 800bf0a:	4b83      	ldr	r3, [pc, #524]	; (800c118 <_dtoa_r+0xbd8>)
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bf12:	f7ff bb2e 	b.w	800b572 <_dtoa_r+0x32>
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	3202      	adds	r2, #2
 800bf1a:	0092      	lsls	r2, r2, #2
 800bf1c:	f107 010c 	add.w	r1, r7, #12
 800bf20:	300c      	adds	r0, #12
 800bf22:	f7ff fa74 	bl	800b40e <memcpy>
 800bf26:	2201      	movs	r2, #1
 800bf28:	4629      	mov	r1, r5
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 fc0a 	bl	800c744 <__lshift>
 800bf30:	9b00      	ldr	r3, [sp, #0]
 800bf32:	3301      	adds	r3, #1
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	9308      	str	r3, [sp, #32]
 800bf3e:	9b02      	ldr	r3, [sp, #8]
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	46b8      	mov	r8, r7
 800bf46:	9306      	str	r3, [sp, #24]
 800bf48:	4607      	mov	r7, r0
 800bf4a:	9b04      	ldr	r3, [sp, #16]
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	4650      	mov	r0, sl
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	f7ff fa69 	bl	800b42a <quorem>
 800bf58:	4641      	mov	r1, r8
 800bf5a:	9002      	str	r0, [sp, #8]
 800bf5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bf60:	4650      	mov	r0, sl
 800bf62:	f000 fc5b 	bl	800c81c <__mcmp>
 800bf66:	463a      	mov	r2, r7
 800bf68:	9005      	str	r0, [sp, #20]
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 fc71 	bl	800c854 <__mdiff>
 800bf72:	68c2      	ldr	r2, [r0, #12]
 800bf74:	4605      	mov	r5, r0
 800bf76:	bb02      	cbnz	r2, 800bfba <_dtoa_r+0xa7a>
 800bf78:	4601      	mov	r1, r0
 800bf7a:	4650      	mov	r0, sl
 800bf7c:	f000 fc4e 	bl	800c81c <__mcmp>
 800bf80:	4602      	mov	r2, r0
 800bf82:	4629      	mov	r1, r5
 800bf84:	4620      	mov	r0, r4
 800bf86:	9209      	str	r2, [sp, #36]	; 0x24
 800bf88:	f000 fa0c 	bl	800c3a4 <_Bfree>
 800bf8c:	9b07      	ldr	r3, [sp, #28]
 800bf8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf90:	9d04      	ldr	r5, [sp, #16]
 800bf92:	ea43 0102 	orr.w	r1, r3, r2
 800bf96:	9b06      	ldr	r3, [sp, #24]
 800bf98:	4319      	orrs	r1, r3
 800bf9a:	d110      	bne.n	800bfbe <_dtoa_r+0xa7e>
 800bf9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bfa0:	d029      	beq.n	800bff6 <_dtoa_r+0xab6>
 800bfa2:	9b05      	ldr	r3, [sp, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	dd02      	ble.n	800bfae <_dtoa_r+0xa6e>
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bfae:	9b01      	ldr	r3, [sp, #4]
 800bfb0:	f883 9000 	strb.w	r9, [r3]
 800bfb4:	e774      	b.n	800bea0 <_dtoa_r+0x960>
 800bfb6:	4638      	mov	r0, r7
 800bfb8:	e7ba      	b.n	800bf30 <_dtoa_r+0x9f0>
 800bfba:	2201      	movs	r2, #1
 800bfbc:	e7e1      	b.n	800bf82 <_dtoa_r+0xa42>
 800bfbe:	9b05      	ldr	r3, [sp, #20]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	db04      	blt.n	800bfce <_dtoa_r+0xa8e>
 800bfc4:	9907      	ldr	r1, [sp, #28]
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	9906      	ldr	r1, [sp, #24]
 800bfca:	430b      	orrs	r3, r1
 800bfcc:	d120      	bne.n	800c010 <_dtoa_r+0xad0>
 800bfce:	2a00      	cmp	r2, #0
 800bfd0:	dded      	ble.n	800bfae <_dtoa_r+0xa6e>
 800bfd2:	4651      	mov	r1, sl
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 fbb4 	bl	800c744 <__lshift>
 800bfdc:	4631      	mov	r1, r6
 800bfde:	4682      	mov	sl, r0
 800bfe0:	f000 fc1c 	bl	800c81c <__mcmp>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	dc03      	bgt.n	800bff0 <_dtoa_r+0xab0>
 800bfe8:	d1e1      	bne.n	800bfae <_dtoa_r+0xa6e>
 800bfea:	f019 0f01 	tst.w	r9, #1
 800bfee:	d0de      	beq.n	800bfae <_dtoa_r+0xa6e>
 800bff0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bff4:	d1d8      	bne.n	800bfa8 <_dtoa_r+0xa68>
 800bff6:	9a01      	ldr	r2, [sp, #4]
 800bff8:	2339      	movs	r3, #57	; 0x39
 800bffa:	7013      	strb	r3, [r2, #0]
 800bffc:	462b      	mov	r3, r5
 800bffe:	461d      	mov	r5, r3
 800c000:	3b01      	subs	r3, #1
 800c002:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c006:	2a39      	cmp	r2, #57	; 0x39
 800c008:	d06c      	beq.n	800c0e4 <_dtoa_r+0xba4>
 800c00a:	3201      	adds	r2, #1
 800c00c:	701a      	strb	r2, [r3, #0]
 800c00e:	e747      	b.n	800bea0 <_dtoa_r+0x960>
 800c010:	2a00      	cmp	r2, #0
 800c012:	dd07      	ble.n	800c024 <_dtoa_r+0xae4>
 800c014:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c018:	d0ed      	beq.n	800bff6 <_dtoa_r+0xab6>
 800c01a:	9a01      	ldr	r2, [sp, #4]
 800c01c:	f109 0301 	add.w	r3, r9, #1
 800c020:	7013      	strb	r3, [r2, #0]
 800c022:	e73d      	b.n	800bea0 <_dtoa_r+0x960>
 800c024:	9b04      	ldr	r3, [sp, #16]
 800c026:	9a08      	ldr	r2, [sp, #32]
 800c028:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d043      	beq.n	800c0b8 <_dtoa_r+0xb78>
 800c030:	4651      	mov	r1, sl
 800c032:	2300      	movs	r3, #0
 800c034:	220a      	movs	r2, #10
 800c036:	4620      	mov	r0, r4
 800c038:	f000 f9d6 	bl	800c3e8 <__multadd>
 800c03c:	45b8      	cmp	r8, r7
 800c03e:	4682      	mov	sl, r0
 800c040:	f04f 0300 	mov.w	r3, #0
 800c044:	f04f 020a 	mov.w	r2, #10
 800c048:	4641      	mov	r1, r8
 800c04a:	4620      	mov	r0, r4
 800c04c:	d107      	bne.n	800c05e <_dtoa_r+0xb1e>
 800c04e:	f000 f9cb 	bl	800c3e8 <__multadd>
 800c052:	4680      	mov	r8, r0
 800c054:	4607      	mov	r7, r0
 800c056:	9b04      	ldr	r3, [sp, #16]
 800c058:	3301      	adds	r3, #1
 800c05a:	9304      	str	r3, [sp, #16]
 800c05c:	e775      	b.n	800bf4a <_dtoa_r+0xa0a>
 800c05e:	f000 f9c3 	bl	800c3e8 <__multadd>
 800c062:	4639      	mov	r1, r7
 800c064:	4680      	mov	r8, r0
 800c066:	2300      	movs	r3, #0
 800c068:	220a      	movs	r2, #10
 800c06a:	4620      	mov	r0, r4
 800c06c:	f000 f9bc 	bl	800c3e8 <__multadd>
 800c070:	4607      	mov	r7, r0
 800c072:	e7f0      	b.n	800c056 <_dtoa_r+0xb16>
 800c074:	9b04      	ldr	r3, [sp, #16]
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	9d00      	ldr	r5, [sp, #0]
 800c07a:	4631      	mov	r1, r6
 800c07c:	4650      	mov	r0, sl
 800c07e:	f7ff f9d4 	bl	800b42a <quorem>
 800c082:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c086:	9b00      	ldr	r3, [sp, #0]
 800c088:	f805 9b01 	strb.w	r9, [r5], #1
 800c08c:	1aea      	subs	r2, r5, r3
 800c08e:	9b01      	ldr	r3, [sp, #4]
 800c090:	4293      	cmp	r3, r2
 800c092:	dd07      	ble.n	800c0a4 <_dtoa_r+0xb64>
 800c094:	4651      	mov	r1, sl
 800c096:	2300      	movs	r3, #0
 800c098:	220a      	movs	r2, #10
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 f9a4 	bl	800c3e8 <__multadd>
 800c0a0:	4682      	mov	sl, r0
 800c0a2:	e7ea      	b.n	800c07a <_dtoa_r+0xb3a>
 800c0a4:	9b01      	ldr	r3, [sp, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	bfc8      	it	gt
 800c0aa:	461d      	movgt	r5, r3
 800c0ac:	9b00      	ldr	r3, [sp, #0]
 800c0ae:	bfd8      	it	le
 800c0b0:	2501      	movle	r5, #1
 800c0b2:	441d      	add	r5, r3
 800c0b4:	f04f 0800 	mov.w	r8, #0
 800c0b8:	4651      	mov	r1, sl
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f000 fb41 	bl	800c744 <__lshift>
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	4682      	mov	sl, r0
 800c0c6:	f000 fba9 	bl	800c81c <__mcmp>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	dc96      	bgt.n	800bffc <_dtoa_r+0xabc>
 800c0ce:	d102      	bne.n	800c0d6 <_dtoa_r+0xb96>
 800c0d0:	f019 0f01 	tst.w	r9, #1
 800c0d4:	d192      	bne.n	800bffc <_dtoa_r+0xabc>
 800c0d6:	462b      	mov	r3, r5
 800c0d8:	461d      	mov	r5, r3
 800c0da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0de:	2a30      	cmp	r2, #48	; 0x30
 800c0e0:	d0fa      	beq.n	800c0d8 <_dtoa_r+0xb98>
 800c0e2:	e6dd      	b.n	800bea0 <_dtoa_r+0x960>
 800c0e4:	9a00      	ldr	r2, [sp, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d189      	bne.n	800bffe <_dtoa_r+0xabe>
 800c0ea:	f10b 0b01 	add.w	fp, fp, #1
 800c0ee:	2331      	movs	r3, #49	; 0x31
 800c0f0:	e796      	b.n	800c020 <_dtoa_r+0xae0>
 800c0f2:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <_dtoa_r+0xbdc>)
 800c0f4:	f7ff ba99 	b.w	800b62a <_dtoa_r+0xea>
 800c0f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f47f aa6d 	bne.w	800b5da <_dtoa_r+0x9a>
 800c100:	4b07      	ldr	r3, [pc, #28]	; (800c120 <_dtoa_r+0xbe0>)
 800c102:	f7ff ba92 	b.w	800b62a <_dtoa_r+0xea>
 800c106:	9b01      	ldr	r3, [sp, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	dcb5      	bgt.n	800c078 <_dtoa_r+0xb38>
 800c10c:	9b07      	ldr	r3, [sp, #28]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	f73f aeb1 	bgt.w	800be76 <_dtoa_r+0x936>
 800c114:	e7b0      	b.n	800c078 <_dtoa_r+0xb38>
 800c116:	bf00      	nop
 800c118:	0800f82c 	.word	0x0800f82c
 800c11c:	0800f78c 	.word	0x0800f78c
 800c120:	0800f7b0 	.word	0x0800f7b0

0800c124 <_free_r>:
 800c124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c126:	2900      	cmp	r1, #0
 800c128:	d044      	beq.n	800c1b4 <_free_r+0x90>
 800c12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c12e:	9001      	str	r0, [sp, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	f1a1 0404 	sub.w	r4, r1, #4
 800c136:	bfb8      	it	lt
 800c138:	18e4      	addlt	r4, r4, r3
 800c13a:	f000 f8e7 	bl	800c30c <__malloc_lock>
 800c13e:	4a1e      	ldr	r2, [pc, #120]	; (800c1b8 <_free_r+0x94>)
 800c140:	9801      	ldr	r0, [sp, #4]
 800c142:	6813      	ldr	r3, [r2, #0]
 800c144:	b933      	cbnz	r3, 800c154 <_free_r+0x30>
 800c146:	6063      	str	r3, [r4, #4]
 800c148:	6014      	str	r4, [r2, #0]
 800c14a:	b003      	add	sp, #12
 800c14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c150:	f000 b8e2 	b.w	800c318 <__malloc_unlock>
 800c154:	42a3      	cmp	r3, r4
 800c156:	d908      	bls.n	800c16a <_free_r+0x46>
 800c158:	6825      	ldr	r5, [r4, #0]
 800c15a:	1961      	adds	r1, r4, r5
 800c15c:	428b      	cmp	r3, r1
 800c15e:	bf01      	itttt	eq
 800c160:	6819      	ldreq	r1, [r3, #0]
 800c162:	685b      	ldreq	r3, [r3, #4]
 800c164:	1949      	addeq	r1, r1, r5
 800c166:	6021      	streq	r1, [r4, #0]
 800c168:	e7ed      	b.n	800c146 <_free_r+0x22>
 800c16a:	461a      	mov	r2, r3
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	b10b      	cbz	r3, 800c174 <_free_r+0x50>
 800c170:	42a3      	cmp	r3, r4
 800c172:	d9fa      	bls.n	800c16a <_free_r+0x46>
 800c174:	6811      	ldr	r1, [r2, #0]
 800c176:	1855      	adds	r5, r2, r1
 800c178:	42a5      	cmp	r5, r4
 800c17a:	d10b      	bne.n	800c194 <_free_r+0x70>
 800c17c:	6824      	ldr	r4, [r4, #0]
 800c17e:	4421      	add	r1, r4
 800c180:	1854      	adds	r4, r2, r1
 800c182:	42a3      	cmp	r3, r4
 800c184:	6011      	str	r1, [r2, #0]
 800c186:	d1e0      	bne.n	800c14a <_free_r+0x26>
 800c188:	681c      	ldr	r4, [r3, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	6053      	str	r3, [r2, #4]
 800c18e:	440c      	add	r4, r1
 800c190:	6014      	str	r4, [r2, #0]
 800c192:	e7da      	b.n	800c14a <_free_r+0x26>
 800c194:	d902      	bls.n	800c19c <_free_r+0x78>
 800c196:	230c      	movs	r3, #12
 800c198:	6003      	str	r3, [r0, #0]
 800c19a:	e7d6      	b.n	800c14a <_free_r+0x26>
 800c19c:	6825      	ldr	r5, [r4, #0]
 800c19e:	1961      	adds	r1, r4, r5
 800c1a0:	428b      	cmp	r3, r1
 800c1a2:	bf04      	itt	eq
 800c1a4:	6819      	ldreq	r1, [r3, #0]
 800c1a6:	685b      	ldreq	r3, [r3, #4]
 800c1a8:	6063      	str	r3, [r4, #4]
 800c1aa:	bf04      	itt	eq
 800c1ac:	1949      	addeq	r1, r1, r5
 800c1ae:	6021      	streq	r1, [r4, #0]
 800c1b0:	6054      	str	r4, [r2, #4]
 800c1b2:	e7ca      	b.n	800c14a <_free_r+0x26>
 800c1b4:	b003      	add	sp, #12
 800c1b6:	bd30      	pop	{r4, r5, pc}
 800c1b8:	20001ff0 	.word	0x20001ff0

0800c1bc <malloc>:
 800c1bc:	4b02      	ldr	r3, [pc, #8]	; (800c1c8 <malloc+0xc>)
 800c1be:	4601      	mov	r1, r0
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	f000 b823 	b.w	800c20c <_malloc_r>
 800c1c6:	bf00      	nop
 800c1c8:	200005d4 	.word	0x200005d4

0800c1cc <sbrk_aligned>:
 800c1cc:	b570      	push	{r4, r5, r6, lr}
 800c1ce:	4e0e      	ldr	r6, [pc, #56]	; (800c208 <sbrk_aligned+0x3c>)
 800c1d0:	460c      	mov	r4, r1
 800c1d2:	6831      	ldr	r1, [r6, #0]
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	b911      	cbnz	r1, 800c1de <sbrk_aligned+0x12>
 800c1d8:	f000 fe40 	bl	800ce5c <_sbrk_r>
 800c1dc:	6030      	str	r0, [r6, #0]
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f000 fe3b 	bl	800ce5c <_sbrk_r>
 800c1e6:	1c43      	adds	r3, r0, #1
 800c1e8:	d00a      	beq.n	800c200 <sbrk_aligned+0x34>
 800c1ea:	1cc4      	adds	r4, r0, #3
 800c1ec:	f024 0403 	bic.w	r4, r4, #3
 800c1f0:	42a0      	cmp	r0, r4
 800c1f2:	d007      	beq.n	800c204 <sbrk_aligned+0x38>
 800c1f4:	1a21      	subs	r1, r4, r0
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	f000 fe30 	bl	800ce5c <_sbrk_r>
 800c1fc:	3001      	adds	r0, #1
 800c1fe:	d101      	bne.n	800c204 <sbrk_aligned+0x38>
 800c200:	f04f 34ff 	mov.w	r4, #4294967295
 800c204:	4620      	mov	r0, r4
 800c206:	bd70      	pop	{r4, r5, r6, pc}
 800c208:	20001ff4 	.word	0x20001ff4

0800c20c <_malloc_r>:
 800c20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c210:	1ccd      	adds	r5, r1, #3
 800c212:	f025 0503 	bic.w	r5, r5, #3
 800c216:	3508      	adds	r5, #8
 800c218:	2d0c      	cmp	r5, #12
 800c21a:	bf38      	it	cc
 800c21c:	250c      	movcc	r5, #12
 800c21e:	2d00      	cmp	r5, #0
 800c220:	4607      	mov	r7, r0
 800c222:	db01      	blt.n	800c228 <_malloc_r+0x1c>
 800c224:	42a9      	cmp	r1, r5
 800c226:	d905      	bls.n	800c234 <_malloc_r+0x28>
 800c228:	230c      	movs	r3, #12
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	2600      	movs	r6, #0
 800c22e:	4630      	mov	r0, r6
 800c230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c234:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c308 <_malloc_r+0xfc>
 800c238:	f000 f868 	bl	800c30c <__malloc_lock>
 800c23c:	f8d8 3000 	ldr.w	r3, [r8]
 800c240:	461c      	mov	r4, r3
 800c242:	bb5c      	cbnz	r4, 800c29c <_malloc_r+0x90>
 800c244:	4629      	mov	r1, r5
 800c246:	4638      	mov	r0, r7
 800c248:	f7ff ffc0 	bl	800c1cc <sbrk_aligned>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	4604      	mov	r4, r0
 800c250:	d155      	bne.n	800c2fe <_malloc_r+0xf2>
 800c252:	f8d8 4000 	ldr.w	r4, [r8]
 800c256:	4626      	mov	r6, r4
 800c258:	2e00      	cmp	r6, #0
 800c25a:	d145      	bne.n	800c2e8 <_malloc_r+0xdc>
 800c25c:	2c00      	cmp	r4, #0
 800c25e:	d048      	beq.n	800c2f2 <_malloc_r+0xe6>
 800c260:	6823      	ldr	r3, [r4, #0]
 800c262:	4631      	mov	r1, r6
 800c264:	4638      	mov	r0, r7
 800c266:	eb04 0903 	add.w	r9, r4, r3
 800c26a:	f000 fdf7 	bl	800ce5c <_sbrk_r>
 800c26e:	4581      	cmp	r9, r0
 800c270:	d13f      	bne.n	800c2f2 <_malloc_r+0xe6>
 800c272:	6821      	ldr	r1, [r4, #0]
 800c274:	1a6d      	subs	r5, r5, r1
 800c276:	4629      	mov	r1, r5
 800c278:	4638      	mov	r0, r7
 800c27a:	f7ff ffa7 	bl	800c1cc <sbrk_aligned>
 800c27e:	3001      	adds	r0, #1
 800c280:	d037      	beq.n	800c2f2 <_malloc_r+0xe6>
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	442b      	add	r3, r5
 800c286:	6023      	str	r3, [r4, #0]
 800c288:	f8d8 3000 	ldr.w	r3, [r8]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d038      	beq.n	800c302 <_malloc_r+0xf6>
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	42a2      	cmp	r2, r4
 800c294:	d12b      	bne.n	800c2ee <_malloc_r+0xe2>
 800c296:	2200      	movs	r2, #0
 800c298:	605a      	str	r2, [r3, #4]
 800c29a:	e00f      	b.n	800c2bc <_malloc_r+0xb0>
 800c29c:	6822      	ldr	r2, [r4, #0]
 800c29e:	1b52      	subs	r2, r2, r5
 800c2a0:	d41f      	bmi.n	800c2e2 <_malloc_r+0xd6>
 800c2a2:	2a0b      	cmp	r2, #11
 800c2a4:	d917      	bls.n	800c2d6 <_malloc_r+0xca>
 800c2a6:	1961      	adds	r1, r4, r5
 800c2a8:	42a3      	cmp	r3, r4
 800c2aa:	6025      	str	r5, [r4, #0]
 800c2ac:	bf18      	it	ne
 800c2ae:	6059      	strne	r1, [r3, #4]
 800c2b0:	6863      	ldr	r3, [r4, #4]
 800c2b2:	bf08      	it	eq
 800c2b4:	f8c8 1000 	streq.w	r1, [r8]
 800c2b8:	5162      	str	r2, [r4, r5]
 800c2ba:	604b      	str	r3, [r1, #4]
 800c2bc:	4638      	mov	r0, r7
 800c2be:	f104 060b 	add.w	r6, r4, #11
 800c2c2:	f000 f829 	bl	800c318 <__malloc_unlock>
 800c2c6:	f026 0607 	bic.w	r6, r6, #7
 800c2ca:	1d23      	adds	r3, r4, #4
 800c2cc:	1af2      	subs	r2, r6, r3
 800c2ce:	d0ae      	beq.n	800c22e <_malloc_r+0x22>
 800c2d0:	1b9b      	subs	r3, r3, r6
 800c2d2:	50a3      	str	r3, [r4, r2]
 800c2d4:	e7ab      	b.n	800c22e <_malloc_r+0x22>
 800c2d6:	42a3      	cmp	r3, r4
 800c2d8:	6862      	ldr	r2, [r4, #4]
 800c2da:	d1dd      	bne.n	800c298 <_malloc_r+0x8c>
 800c2dc:	f8c8 2000 	str.w	r2, [r8]
 800c2e0:	e7ec      	b.n	800c2bc <_malloc_r+0xb0>
 800c2e2:	4623      	mov	r3, r4
 800c2e4:	6864      	ldr	r4, [r4, #4]
 800c2e6:	e7ac      	b.n	800c242 <_malloc_r+0x36>
 800c2e8:	4634      	mov	r4, r6
 800c2ea:	6876      	ldr	r6, [r6, #4]
 800c2ec:	e7b4      	b.n	800c258 <_malloc_r+0x4c>
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	e7cc      	b.n	800c28c <_malloc_r+0x80>
 800c2f2:	230c      	movs	r3, #12
 800c2f4:	603b      	str	r3, [r7, #0]
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	f000 f80e 	bl	800c318 <__malloc_unlock>
 800c2fc:	e797      	b.n	800c22e <_malloc_r+0x22>
 800c2fe:	6025      	str	r5, [r4, #0]
 800c300:	e7dc      	b.n	800c2bc <_malloc_r+0xb0>
 800c302:	605b      	str	r3, [r3, #4]
 800c304:	deff      	udf	#255	; 0xff
 800c306:	bf00      	nop
 800c308:	20001ff0 	.word	0x20001ff0

0800c30c <__malloc_lock>:
 800c30c:	4801      	ldr	r0, [pc, #4]	; (800c314 <__malloc_lock+0x8>)
 800c30e:	f7ff b87c 	b.w	800b40a <__retarget_lock_acquire_recursive>
 800c312:	bf00      	nop
 800c314:	20001fec 	.word	0x20001fec

0800c318 <__malloc_unlock>:
 800c318:	4801      	ldr	r0, [pc, #4]	; (800c320 <__malloc_unlock+0x8>)
 800c31a:	f7ff b877 	b.w	800b40c <__retarget_lock_release_recursive>
 800c31e:	bf00      	nop
 800c320:	20001fec 	.word	0x20001fec

0800c324 <_Balloc>:
 800c324:	b570      	push	{r4, r5, r6, lr}
 800c326:	69c6      	ldr	r6, [r0, #28]
 800c328:	4604      	mov	r4, r0
 800c32a:	460d      	mov	r5, r1
 800c32c:	b976      	cbnz	r6, 800c34c <_Balloc+0x28>
 800c32e:	2010      	movs	r0, #16
 800c330:	f7ff ff44 	bl	800c1bc <malloc>
 800c334:	4602      	mov	r2, r0
 800c336:	61e0      	str	r0, [r4, #28]
 800c338:	b920      	cbnz	r0, 800c344 <_Balloc+0x20>
 800c33a:	4b18      	ldr	r3, [pc, #96]	; (800c39c <_Balloc+0x78>)
 800c33c:	4818      	ldr	r0, [pc, #96]	; (800c3a0 <_Balloc+0x7c>)
 800c33e:	216b      	movs	r1, #107	; 0x6b
 800c340:	f000 fd9c 	bl	800ce7c <__assert_func>
 800c344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c348:	6006      	str	r6, [r0, #0]
 800c34a:	60c6      	str	r6, [r0, #12]
 800c34c:	69e6      	ldr	r6, [r4, #28]
 800c34e:	68f3      	ldr	r3, [r6, #12]
 800c350:	b183      	cbz	r3, 800c374 <_Balloc+0x50>
 800c352:	69e3      	ldr	r3, [r4, #28]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c35a:	b9b8      	cbnz	r0, 800c38c <_Balloc+0x68>
 800c35c:	2101      	movs	r1, #1
 800c35e:	fa01 f605 	lsl.w	r6, r1, r5
 800c362:	1d72      	adds	r2, r6, #5
 800c364:	0092      	lsls	r2, r2, #2
 800c366:	4620      	mov	r0, r4
 800c368:	f000 fda6 	bl	800ceb8 <_calloc_r>
 800c36c:	b160      	cbz	r0, 800c388 <_Balloc+0x64>
 800c36e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c372:	e00e      	b.n	800c392 <_Balloc+0x6e>
 800c374:	2221      	movs	r2, #33	; 0x21
 800c376:	2104      	movs	r1, #4
 800c378:	4620      	mov	r0, r4
 800c37a:	f000 fd9d 	bl	800ceb8 <_calloc_r>
 800c37e:	69e3      	ldr	r3, [r4, #28]
 800c380:	60f0      	str	r0, [r6, #12]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1e4      	bne.n	800c352 <_Balloc+0x2e>
 800c388:	2000      	movs	r0, #0
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
 800c38c:	6802      	ldr	r2, [r0, #0]
 800c38e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c392:	2300      	movs	r3, #0
 800c394:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c398:	e7f7      	b.n	800c38a <_Balloc+0x66>
 800c39a:	bf00      	nop
 800c39c:	0800f7bd 	.word	0x0800f7bd
 800c3a0:	0800f83d 	.word	0x0800f83d

0800c3a4 <_Bfree>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	69c6      	ldr	r6, [r0, #28]
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	b976      	cbnz	r6, 800c3cc <_Bfree+0x28>
 800c3ae:	2010      	movs	r0, #16
 800c3b0:	f7ff ff04 	bl	800c1bc <malloc>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	61e8      	str	r0, [r5, #28]
 800c3b8:	b920      	cbnz	r0, 800c3c4 <_Bfree+0x20>
 800c3ba:	4b09      	ldr	r3, [pc, #36]	; (800c3e0 <_Bfree+0x3c>)
 800c3bc:	4809      	ldr	r0, [pc, #36]	; (800c3e4 <_Bfree+0x40>)
 800c3be:	218f      	movs	r1, #143	; 0x8f
 800c3c0:	f000 fd5c 	bl	800ce7c <__assert_func>
 800c3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3c8:	6006      	str	r6, [r0, #0]
 800c3ca:	60c6      	str	r6, [r0, #12]
 800c3cc:	b13c      	cbz	r4, 800c3de <_Bfree+0x3a>
 800c3ce:	69eb      	ldr	r3, [r5, #28]
 800c3d0:	6862      	ldr	r2, [r4, #4]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3d8:	6021      	str	r1, [r4, #0]
 800c3da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	0800f7bd 	.word	0x0800f7bd
 800c3e4:	0800f83d 	.word	0x0800f83d

0800c3e8 <__multadd>:
 800c3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ec:	690d      	ldr	r5, [r1, #16]
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	461e      	mov	r6, r3
 800c3f4:	f101 0c14 	add.w	ip, r1, #20
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	f8dc 3000 	ldr.w	r3, [ip]
 800c3fe:	b299      	uxth	r1, r3
 800c400:	fb02 6101 	mla	r1, r2, r1, r6
 800c404:	0c1e      	lsrs	r6, r3, #16
 800c406:	0c0b      	lsrs	r3, r1, #16
 800c408:	fb02 3306 	mla	r3, r2, r6, r3
 800c40c:	b289      	uxth	r1, r1
 800c40e:	3001      	adds	r0, #1
 800c410:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c414:	4285      	cmp	r5, r0
 800c416:	f84c 1b04 	str.w	r1, [ip], #4
 800c41a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c41e:	dcec      	bgt.n	800c3fa <__multadd+0x12>
 800c420:	b30e      	cbz	r6, 800c466 <__multadd+0x7e>
 800c422:	68a3      	ldr	r3, [r4, #8]
 800c424:	42ab      	cmp	r3, r5
 800c426:	dc19      	bgt.n	800c45c <__multadd+0x74>
 800c428:	6861      	ldr	r1, [r4, #4]
 800c42a:	4638      	mov	r0, r7
 800c42c:	3101      	adds	r1, #1
 800c42e:	f7ff ff79 	bl	800c324 <_Balloc>
 800c432:	4680      	mov	r8, r0
 800c434:	b928      	cbnz	r0, 800c442 <__multadd+0x5a>
 800c436:	4602      	mov	r2, r0
 800c438:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <__multadd+0x84>)
 800c43a:	480d      	ldr	r0, [pc, #52]	; (800c470 <__multadd+0x88>)
 800c43c:	21ba      	movs	r1, #186	; 0xba
 800c43e:	f000 fd1d 	bl	800ce7c <__assert_func>
 800c442:	6922      	ldr	r2, [r4, #16]
 800c444:	3202      	adds	r2, #2
 800c446:	f104 010c 	add.w	r1, r4, #12
 800c44a:	0092      	lsls	r2, r2, #2
 800c44c:	300c      	adds	r0, #12
 800c44e:	f7fe ffde 	bl	800b40e <memcpy>
 800c452:	4621      	mov	r1, r4
 800c454:	4638      	mov	r0, r7
 800c456:	f7ff ffa5 	bl	800c3a4 <_Bfree>
 800c45a:	4644      	mov	r4, r8
 800c45c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c460:	3501      	adds	r5, #1
 800c462:	615e      	str	r6, [r3, #20]
 800c464:	6125      	str	r5, [r4, #16]
 800c466:	4620      	mov	r0, r4
 800c468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c46c:	0800f82c 	.word	0x0800f82c
 800c470:	0800f83d 	.word	0x0800f83d

0800c474 <__hi0bits>:
 800c474:	0c03      	lsrs	r3, r0, #16
 800c476:	041b      	lsls	r3, r3, #16
 800c478:	b9d3      	cbnz	r3, 800c4b0 <__hi0bits+0x3c>
 800c47a:	0400      	lsls	r0, r0, #16
 800c47c:	2310      	movs	r3, #16
 800c47e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c482:	bf04      	itt	eq
 800c484:	0200      	lsleq	r0, r0, #8
 800c486:	3308      	addeq	r3, #8
 800c488:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c48c:	bf04      	itt	eq
 800c48e:	0100      	lsleq	r0, r0, #4
 800c490:	3304      	addeq	r3, #4
 800c492:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c496:	bf04      	itt	eq
 800c498:	0080      	lsleq	r0, r0, #2
 800c49a:	3302      	addeq	r3, #2
 800c49c:	2800      	cmp	r0, #0
 800c49e:	db05      	blt.n	800c4ac <__hi0bits+0x38>
 800c4a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4a4:	f103 0301 	add.w	r3, r3, #1
 800c4a8:	bf08      	it	eq
 800c4aa:	2320      	moveq	r3, #32
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	4770      	bx	lr
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e7e4      	b.n	800c47e <__hi0bits+0xa>

0800c4b4 <__lo0bits>:
 800c4b4:	6803      	ldr	r3, [r0, #0]
 800c4b6:	f013 0207 	ands.w	r2, r3, #7
 800c4ba:	d00c      	beq.n	800c4d6 <__lo0bits+0x22>
 800c4bc:	07d9      	lsls	r1, r3, #31
 800c4be:	d422      	bmi.n	800c506 <__lo0bits+0x52>
 800c4c0:	079a      	lsls	r2, r3, #30
 800c4c2:	bf49      	itett	mi
 800c4c4:	085b      	lsrmi	r3, r3, #1
 800c4c6:	089b      	lsrpl	r3, r3, #2
 800c4c8:	6003      	strmi	r3, [r0, #0]
 800c4ca:	2201      	movmi	r2, #1
 800c4cc:	bf5c      	itt	pl
 800c4ce:	6003      	strpl	r3, [r0, #0]
 800c4d0:	2202      	movpl	r2, #2
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	4770      	bx	lr
 800c4d6:	b299      	uxth	r1, r3
 800c4d8:	b909      	cbnz	r1, 800c4de <__lo0bits+0x2a>
 800c4da:	0c1b      	lsrs	r3, r3, #16
 800c4dc:	2210      	movs	r2, #16
 800c4de:	b2d9      	uxtb	r1, r3
 800c4e0:	b909      	cbnz	r1, 800c4e6 <__lo0bits+0x32>
 800c4e2:	3208      	adds	r2, #8
 800c4e4:	0a1b      	lsrs	r3, r3, #8
 800c4e6:	0719      	lsls	r1, r3, #28
 800c4e8:	bf04      	itt	eq
 800c4ea:	091b      	lsreq	r3, r3, #4
 800c4ec:	3204      	addeq	r2, #4
 800c4ee:	0799      	lsls	r1, r3, #30
 800c4f0:	bf04      	itt	eq
 800c4f2:	089b      	lsreq	r3, r3, #2
 800c4f4:	3202      	addeq	r2, #2
 800c4f6:	07d9      	lsls	r1, r3, #31
 800c4f8:	d403      	bmi.n	800c502 <__lo0bits+0x4e>
 800c4fa:	085b      	lsrs	r3, r3, #1
 800c4fc:	f102 0201 	add.w	r2, r2, #1
 800c500:	d003      	beq.n	800c50a <__lo0bits+0x56>
 800c502:	6003      	str	r3, [r0, #0]
 800c504:	e7e5      	b.n	800c4d2 <__lo0bits+0x1e>
 800c506:	2200      	movs	r2, #0
 800c508:	e7e3      	b.n	800c4d2 <__lo0bits+0x1e>
 800c50a:	2220      	movs	r2, #32
 800c50c:	e7e1      	b.n	800c4d2 <__lo0bits+0x1e>
	...

0800c510 <__i2b>:
 800c510:	b510      	push	{r4, lr}
 800c512:	460c      	mov	r4, r1
 800c514:	2101      	movs	r1, #1
 800c516:	f7ff ff05 	bl	800c324 <_Balloc>
 800c51a:	4602      	mov	r2, r0
 800c51c:	b928      	cbnz	r0, 800c52a <__i2b+0x1a>
 800c51e:	4b05      	ldr	r3, [pc, #20]	; (800c534 <__i2b+0x24>)
 800c520:	4805      	ldr	r0, [pc, #20]	; (800c538 <__i2b+0x28>)
 800c522:	f240 1145 	movw	r1, #325	; 0x145
 800c526:	f000 fca9 	bl	800ce7c <__assert_func>
 800c52a:	2301      	movs	r3, #1
 800c52c:	6144      	str	r4, [r0, #20]
 800c52e:	6103      	str	r3, [r0, #16]
 800c530:	bd10      	pop	{r4, pc}
 800c532:	bf00      	nop
 800c534:	0800f82c 	.word	0x0800f82c
 800c538:	0800f83d 	.word	0x0800f83d

0800c53c <__multiply>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	4691      	mov	r9, r2
 800c542:	690a      	ldr	r2, [r1, #16]
 800c544:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c548:	429a      	cmp	r2, r3
 800c54a:	bfb8      	it	lt
 800c54c:	460b      	movlt	r3, r1
 800c54e:	460c      	mov	r4, r1
 800c550:	bfbc      	itt	lt
 800c552:	464c      	movlt	r4, r9
 800c554:	4699      	movlt	r9, r3
 800c556:	6927      	ldr	r7, [r4, #16]
 800c558:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c55c:	68a3      	ldr	r3, [r4, #8]
 800c55e:	6861      	ldr	r1, [r4, #4]
 800c560:	eb07 060a 	add.w	r6, r7, sl
 800c564:	42b3      	cmp	r3, r6
 800c566:	b085      	sub	sp, #20
 800c568:	bfb8      	it	lt
 800c56a:	3101      	addlt	r1, #1
 800c56c:	f7ff feda 	bl	800c324 <_Balloc>
 800c570:	b930      	cbnz	r0, 800c580 <__multiply+0x44>
 800c572:	4602      	mov	r2, r0
 800c574:	4b44      	ldr	r3, [pc, #272]	; (800c688 <__multiply+0x14c>)
 800c576:	4845      	ldr	r0, [pc, #276]	; (800c68c <__multiply+0x150>)
 800c578:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c57c:	f000 fc7e 	bl	800ce7c <__assert_func>
 800c580:	f100 0514 	add.w	r5, r0, #20
 800c584:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c588:	462b      	mov	r3, r5
 800c58a:	2200      	movs	r2, #0
 800c58c:	4543      	cmp	r3, r8
 800c58e:	d321      	bcc.n	800c5d4 <__multiply+0x98>
 800c590:	f104 0314 	add.w	r3, r4, #20
 800c594:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c598:	f109 0314 	add.w	r3, r9, #20
 800c59c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5a0:	9202      	str	r2, [sp, #8]
 800c5a2:	1b3a      	subs	r2, r7, r4
 800c5a4:	3a15      	subs	r2, #21
 800c5a6:	f022 0203 	bic.w	r2, r2, #3
 800c5aa:	3204      	adds	r2, #4
 800c5ac:	f104 0115 	add.w	r1, r4, #21
 800c5b0:	428f      	cmp	r7, r1
 800c5b2:	bf38      	it	cc
 800c5b4:	2204      	movcc	r2, #4
 800c5b6:	9201      	str	r2, [sp, #4]
 800c5b8:	9a02      	ldr	r2, [sp, #8]
 800c5ba:	9303      	str	r3, [sp, #12]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d80c      	bhi.n	800c5da <__multiply+0x9e>
 800c5c0:	2e00      	cmp	r6, #0
 800c5c2:	dd03      	ble.n	800c5cc <__multiply+0x90>
 800c5c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d05b      	beq.n	800c684 <__multiply+0x148>
 800c5cc:	6106      	str	r6, [r0, #16]
 800c5ce:	b005      	add	sp, #20
 800c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d4:	f843 2b04 	str.w	r2, [r3], #4
 800c5d8:	e7d8      	b.n	800c58c <__multiply+0x50>
 800c5da:	f8b3 a000 	ldrh.w	sl, [r3]
 800c5de:	f1ba 0f00 	cmp.w	sl, #0
 800c5e2:	d024      	beq.n	800c62e <__multiply+0xf2>
 800c5e4:	f104 0e14 	add.w	lr, r4, #20
 800c5e8:	46a9      	mov	r9, r5
 800c5ea:	f04f 0c00 	mov.w	ip, #0
 800c5ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c5f2:	f8d9 1000 	ldr.w	r1, [r9]
 800c5f6:	fa1f fb82 	uxth.w	fp, r2
 800c5fa:	b289      	uxth	r1, r1
 800c5fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c600:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c604:	f8d9 2000 	ldr.w	r2, [r9]
 800c608:	4461      	add	r1, ip
 800c60a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c60e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c612:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c616:	b289      	uxth	r1, r1
 800c618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c61c:	4577      	cmp	r7, lr
 800c61e:	f849 1b04 	str.w	r1, [r9], #4
 800c622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c626:	d8e2      	bhi.n	800c5ee <__multiply+0xb2>
 800c628:	9a01      	ldr	r2, [sp, #4]
 800c62a:	f845 c002 	str.w	ip, [r5, r2]
 800c62e:	9a03      	ldr	r2, [sp, #12]
 800c630:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c634:	3304      	adds	r3, #4
 800c636:	f1b9 0f00 	cmp.w	r9, #0
 800c63a:	d021      	beq.n	800c680 <__multiply+0x144>
 800c63c:	6829      	ldr	r1, [r5, #0]
 800c63e:	f104 0c14 	add.w	ip, r4, #20
 800c642:	46ae      	mov	lr, r5
 800c644:	f04f 0a00 	mov.w	sl, #0
 800c648:	f8bc b000 	ldrh.w	fp, [ip]
 800c64c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c650:	fb09 220b 	mla	r2, r9, fp, r2
 800c654:	4452      	add	r2, sl
 800c656:	b289      	uxth	r1, r1
 800c658:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c65c:	f84e 1b04 	str.w	r1, [lr], #4
 800c660:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c664:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c668:	f8be 1000 	ldrh.w	r1, [lr]
 800c66c:	fb09 110a 	mla	r1, r9, sl, r1
 800c670:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c674:	4567      	cmp	r7, ip
 800c676:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c67a:	d8e5      	bhi.n	800c648 <__multiply+0x10c>
 800c67c:	9a01      	ldr	r2, [sp, #4]
 800c67e:	50a9      	str	r1, [r5, r2]
 800c680:	3504      	adds	r5, #4
 800c682:	e799      	b.n	800c5b8 <__multiply+0x7c>
 800c684:	3e01      	subs	r6, #1
 800c686:	e79b      	b.n	800c5c0 <__multiply+0x84>
 800c688:	0800f82c 	.word	0x0800f82c
 800c68c:	0800f83d 	.word	0x0800f83d

0800c690 <__pow5mult>:
 800c690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c694:	4615      	mov	r5, r2
 800c696:	f012 0203 	ands.w	r2, r2, #3
 800c69a:	4606      	mov	r6, r0
 800c69c:	460f      	mov	r7, r1
 800c69e:	d007      	beq.n	800c6b0 <__pow5mult+0x20>
 800c6a0:	4c25      	ldr	r4, [pc, #148]	; (800c738 <__pow5mult+0xa8>)
 800c6a2:	3a01      	subs	r2, #1
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6aa:	f7ff fe9d 	bl	800c3e8 <__multadd>
 800c6ae:	4607      	mov	r7, r0
 800c6b0:	10ad      	asrs	r5, r5, #2
 800c6b2:	d03d      	beq.n	800c730 <__pow5mult+0xa0>
 800c6b4:	69f4      	ldr	r4, [r6, #28]
 800c6b6:	b97c      	cbnz	r4, 800c6d8 <__pow5mult+0x48>
 800c6b8:	2010      	movs	r0, #16
 800c6ba:	f7ff fd7f 	bl	800c1bc <malloc>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	61f0      	str	r0, [r6, #28]
 800c6c2:	b928      	cbnz	r0, 800c6d0 <__pow5mult+0x40>
 800c6c4:	4b1d      	ldr	r3, [pc, #116]	; (800c73c <__pow5mult+0xac>)
 800c6c6:	481e      	ldr	r0, [pc, #120]	; (800c740 <__pow5mult+0xb0>)
 800c6c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c6cc:	f000 fbd6 	bl	800ce7c <__assert_func>
 800c6d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6d4:	6004      	str	r4, [r0, #0]
 800c6d6:	60c4      	str	r4, [r0, #12]
 800c6d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c6dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6e0:	b94c      	cbnz	r4, 800c6f6 <__pow5mult+0x66>
 800c6e2:	f240 2171 	movw	r1, #625	; 0x271
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7ff ff12 	bl	800c510 <__i2b>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	6003      	str	r3, [r0, #0]
 800c6f6:	f04f 0900 	mov.w	r9, #0
 800c6fa:	07eb      	lsls	r3, r5, #31
 800c6fc:	d50a      	bpl.n	800c714 <__pow5mult+0x84>
 800c6fe:	4639      	mov	r1, r7
 800c700:	4622      	mov	r2, r4
 800c702:	4630      	mov	r0, r6
 800c704:	f7ff ff1a 	bl	800c53c <__multiply>
 800c708:	4639      	mov	r1, r7
 800c70a:	4680      	mov	r8, r0
 800c70c:	4630      	mov	r0, r6
 800c70e:	f7ff fe49 	bl	800c3a4 <_Bfree>
 800c712:	4647      	mov	r7, r8
 800c714:	106d      	asrs	r5, r5, #1
 800c716:	d00b      	beq.n	800c730 <__pow5mult+0xa0>
 800c718:	6820      	ldr	r0, [r4, #0]
 800c71a:	b938      	cbnz	r0, 800c72c <__pow5mult+0x9c>
 800c71c:	4622      	mov	r2, r4
 800c71e:	4621      	mov	r1, r4
 800c720:	4630      	mov	r0, r6
 800c722:	f7ff ff0b 	bl	800c53c <__multiply>
 800c726:	6020      	str	r0, [r4, #0]
 800c728:	f8c0 9000 	str.w	r9, [r0]
 800c72c:	4604      	mov	r4, r0
 800c72e:	e7e4      	b.n	800c6fa <__pow5mult+0x6a>
 800c730:	4638      	mov	r0, r7
 800c732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c736:	bf00      	nop
 800c738:	0800f988 	.word	0x0800f988
 800c73c:	0800f7bd 	.word	0x0800f7bd
 800c740:	0800f83d 	.word	0x0800f83d

0800c744 <__lshift>:
 800c744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c748:	460c      	mov	r4, r1
 800c74a:	6849      	ldr	r1, [r1, #4]
 800c74c:	6923      	ldr	r3, [r4, #16]
 800c74e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c752:	68a3      	ldr	r3, [r4, #8]
 800c754:	4607      	mov	r7, r0
 800c756:	4691      	mov	r9, r2
 800c758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c75c:	f108 0601 	add.w	r6, r8, #1
 800c760:	42b3      	cmp	r3, r6
 800c762:	db0b      	blt.n	800c77c <__lshift+0x38>
 800c764:	4638      	mov	r0, r7
 800c766:	f7ff fddd 	bl	800c324 <_Balloc>
 800c76a:	4605      	mov	r5, r0
 800c76c:	b948      	cbnz	r0, 800c782 <__lshift+0x3e>
 800c76e:	4602      	mov	r2, r0
 800c770:	4b28      	ldr	r3, [pc, #160]	; (800c814 <__lshift+0xd0>)
 800c772:	4829      	ldr	r0, [pc, #164]	; (800c818 <__lshift+0xd4>)
 800c774:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c778:	f000 fb80 	bl	800ce7c <__assert_func>
 800c77c:	3101      	adds	r1, #1
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	e7ee      	b.n	800c760 <__lshift+0x1c>
 800c782:	2300      	movs	r3, #0
 800c784:	f100 0114 	add.w	r1, r0, #20
 800c788:	f100 0210 	add.w	r2, r0, #16
 800c78c:	4618      	mov	r0, r3
 800c78e:	4553      	cmp	r3, sl
 800c790:	db33      	blt.n	800c7fa <__lshift+0xb6>
 800c792:	6920      	ldr	r0, [r4, #16]
 800c794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c798:	f104 0314 	add.w	r3, r4, #20
 800c79c:	f019 091f 	ands.w	r9, r9, #31
 800c7a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7a8:	d02b      	beq.n	800c802 <__lshift+0xbe>
 800c7aa:	f1c9 0e20 	rsb	lr, r9, #32
 800c7ae:	468a      	mov	sl, r1
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	6818      	ldr	r0, [r3, #0]
 800c7b4:	fa00 f009 	lsl.w	r0, r0, r9
 800c7b8:	4310      	orrs	r0, r2
 800c7ba:	f84a 0b04 	str.w	r0, [sl], #4
 800c7be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c2:	459c      	cmp	ip, r3
 800c7c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c7c8:	d8f3      	bhi.n	800c7b2 <__lshift+0x6e>
 800c7ca:	ebac 0304 	sub.w	r3, ip, r4
 800c7ce:	3b15      	subs	r3, #21
 800c7d0:	f023 0303 	bic.w	r3, r3, #3
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	f104 0015 	add.w	r0, r4, #21
 800c7da:	4584      	cmp	ip, r0
 800c7dc:	bf38      	it	cc
 800c7de:	2304      	movcc	r3, #4
 800c7e0:	50ca      	str	r2, [r1, r3]
 800c7e2:	b10a      	cbz	r2, 800c7e8 <__lshift+0xa4>
 800c7e4:	f108 0602 	add.w	r6, r8, #2
 800c7e8:	3e01      	subs	r6, #1
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	612e      	str	r6, [r5, #16]
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	f7ff fdd8 	bl	800c3a4 <_Bfree>
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7fe:	3301      	adds	r3, #1
 800c800:	e7c5      	b.n	800c78e <__lshift+0x4a>
 800c802:	3904      	subs	r1, #4
 800c804:	f853 2b04 	ldr.w	r2, [r3], #4
 800c808:	f841 2f04 	str.w	r2, [r1, #4]!
 800c80c:	459c      	cmp	ip, r3
 800c80e:	d8f9      	bhi.n	800c804 <__lshift+0xc0>
 800c810:	e7ea      	b.n	800c7e8 <__lshift+0xa4>
 800c812:	bf00      	nop
 800c814:	0800f82c 	.word	0x0800f82c
 800c818:	0800f83d 	.word	0x0800f83d

0800c81c <__mcmp>:
 800c81c:	b530      	push	{r4, r5, lr}
 800c81e:	6902      	ldr	r2, [r0, #16]
 800c820:	690c      	ldr	r4, [r1, #16]
 800c822:	1b12      	subs	r2, r2, r4
 800c824:	d10e      	bne.n	800c844 <__mcmp+0x28>
 800c826:	f100 0314 	add.w	r3, r0, #20
 800c82a:	3114      	adds	r1, #20
 800c82c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c830:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c834:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c838:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c83c:	42a5      	cmp	r5, r4
 800c83e:	d003      	beq.n	800c848 <__mcmp+0x2c>
 800c840:	d305      	bcc.n	800c84e <__mcmp+0x32>
 800c842:	2201      	movs	r2, #1
 800c844:	4610      	mov	r0, r2
 800c846:	bd30      	pop	{r4, r5, pc}
 800c848:	4283      	cmp	r3, r0
 800c84a:	d3f3      	bcc.n	800c834 <__mcmp+0x18>
 800c84c:	e7fa      	b.n	800c844 <__mcmp+0x28>
 800c84e:	f04f 32ff 	mov.w	r2, #4294967295
 800c852:	e7f7      	b.n	800c844 <__mcmp+0x28>

0800c854 <__mdiff>:
 800c854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c858:	460c      	mov	r4, r1
 800c85a:	4606      	mov	r6, r0
 800c85c:	4611      	mov	r1, r2
 800c85e:	4620      	mov	r0, r4
 800c860:	4690      	mov	r8, r2
 800c862:	f7ff ffdb 	bl	800c81c <__mcmp>
 800c866:	1e05      	subs	r5, r0, #0
 800c868:	d110      	bne.n	800c88c <__mdiff+0x38>
 800c86a:	4629      	mov	r1, r5
 800c86c:	4630      	mov	r0, r6
 800c86e:	f7ff fd59 	bl	800c324 <_Balloc>
 800c872:	b930      	cbnz	r0, 800c882 <__mdiff+0x2e>
 800c874:	4b3a      	ldr	r3, [pc, #232]	; (800c960 <__mdiff+0x10c>)
 800c876:	4602      	mov	r2, r0
 800c878:	f240 2137 	movw	r1, #567	; 0x237
 800c87c:	4839      	ldr	r0, [pc, #228]	; (800c964 <__mdiff+0x110>)
 800c87e:	f000 fafd 	bl	800ce7c <__assert_func>
 800c882:	2301      	movs	r3, #1
 800c884:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88c:	bfa4      	itt	ge
 800c88e:	4643      	movge	r3, r8
 800c890:	46a0      	movge	r8, r4
 800c892:	4630      	mov	r0, r6
 800c894:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c898:	bfa6      	itte	ge
 800c89a:	461c      	movge	r4, r3
 800c89c:	2500      	movge	r5, #0
 800c89e:	2501      	movlt	r5, #1
 800c8a0:	f7ff fd40 	bl	800c324 <_Balloc>
 800c8a4:	b920      	cbnz	r0, 800c8b0 <__mdiff+0x5c>
 800c8a6:	4b2e      	ldr	r3, [pc, #184]	; (800c960 <__mdiff+0x10c>)
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	f240 2145 	movw	r1, #581	; 0x245
 800c8ae:	e7e5      	b.n	800c87c <__mdiff+0x28>
 800c8b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c8b4:	6926      	ldr	r6, [r4, #16]
 800c8b6:	60c5      	str	r5, [r0, #12]
 800c8b8:	f104 0914 	add.w	r9, r4, #20
 800c8bc:	f108 0514 	add.w	r5, r8, #20
 800c8c0:	f100 0e14 	add.w	lr, r0, #20
 800c8c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c8c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c8cc:	f108 0210 	add.w	r2, r8, #16
 800c8d0:	46f2      	mov	sl, lr
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c8d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c8dc:	fa11 f88b 	uxtah	r8, r1, fp
 800c8e0:	b299      	uxth	r1, r3
 800c8e2:	0c1b      	lsrs	r3, r3, #16
 800c8e4:	eba8 0801 	sub.w	r8, r8, r1
 800c8e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c8ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c8f0:	fa1f f888 	uxth.w	r8, r8
 800c8f4:	1419      	asrs	r1, r3, #16
 800c8f6:	454e      	cmp	r6, r9
 800c8f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c8fc:	f84a 3b04 	str.w	r3, [sl], #4
 800c900:	d8e8      	bhi.n	800c8d4 <__mdiff+0x80>
 800c902:	1b33      	subs	r3, r6, r4
 800c904:	3b15      	subs	r3, #21
 800c906:	f023 0303 	bic.w	r3, r3, #3
 800c90a:	3304      	adds	r3, #4
 800c90c:	3415      	adds	r4, #21
 800c90e:	42a6      	cmp	r6, r4
 800c910:	bf38      	it	cc
 800c912:	2304      	movcc	r3, #4
 800c914:	441d      	add	r5, r3
 800c916:	4473      	add	r3, lr
 800c918:	469e      	mov	lr, r3
 800c91a:	462e      	mov	r6, r5
 800c91c:	4566      	cmp	r6, ip
 800c91e:	d30e      	bcc.n	800c93e <__mdiff+0xea>
 800c920:	f10c 0203 	add.w	r2, ip, #3
 800c924:	1b52      	subs	r2, r2, r5
 800c926:	f022 0203 	bic.w	r2, r2, #3
 800c92a:	3d03      	subs	r5, #3
 800c92c:	45ac      	cmp	ip, r5
 800c92e:	bf38      	it	cc
 800c930:	2200      	movcc	r2, #0
 800c932:	4413      	add	r3, r2
 800c934:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c938:	b17a      	cbz	r2, 800c95a <__mdiff+0x106>
 800c93a:	6107      	str	r7, [r0, #16]
 800c93c:	e7a4      	b.n	800c888 <__mdiff+0x34>
 800c93e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c942:	fa11 f288 	uxtah	r2, r1, r8
 800c946:	1414      	asrs	r4, r2, #16
 800c948:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c94c:	b292      	uxth	r2, r2
 800c94e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c952:	f84e 2b04 	str.w	r2, [lr], #4
 800c956:	1421      	asrs	r1, r4, #16
 800c958:	e7e0      	b.n	800c91c <__mdiff+0xc8>
 800c95a:	3f01      	subs	r7, #1
 800c95c:	e7ea      	b.n	800c934 <__mdiff+0xe0>
 800c95e:	bf00      	nop
 800c960:	0800f82c 	.word	0x0800f82c
 800c964:	0800f83d 	.word	0x0800f83d

0800c968 <__d2b>:
 800c968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c96c:	460f      	mov	r7, r1
 800c96e:	2101      	movs	r1, #1
 800c970:	ec59 8b10 	vmov	r8, r9, d0
 800c974:	4616      	mov	r6, r2
 800c976:	f7ff fcd5 	bl	800c324 <_Balloc>
 800c97a:	4604      	mov	r4, r0
 800c97c:	b930      	cbnz	r0, 800c98c <__d2b+0x24>
 800c97e:	4602      	mov	r2, r0
 800c980:	4b24      	ldr	r3, [pc, #144]	; (800ca14 <__d2b+0xac>)
 800c982:	4825      	ldr	r0, [pc, #148]	; (800ca18 <__d2b+0xb0>)
 800c984:	f240 310f 	movw	r1, #783	; 0x30f
 800c988:	f000 fa78 	bl	800ce7c <__assert_func>
 800c98c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c994:	bb2d      	cbnz	r5, 800c9e2 <__d2b+0x7a>
 800c996:	9301      	str	r3, [sp, #4]
 800c998:	f1b8 0300 	subs.w	r3, r8, #0
 800c99c:	d026      	beq.n	800c9ec <__d2b+0x84>
 800c99e:	4668      	mov	r0, sp
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	f7ff fd87 	bl	800c4b4 <__lo0bits>
 800c9a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9aa:	b1e8      	cbz	r0, 800c9e8 <__d2b+0x80>
 800c9ac:	f1c0 0320 	rsb	r3, r0, #32
 800c9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9b4:	430b      	orrs	r3, r1
 800c9b6:	40c2      	lsrs	r2, r0
 800c9b8:	6163      	str	r3, [r4, #20]
 800c9ba:	9201      	str	r2, [sp, #4]
 800c9bc:	9b01      	ldr	r3, [sp, #4]
 800c9be:	61a3      	str	r3, [r4, #24]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	bf14      	ite	ne
 800c9c4:	2202      	movne	r2, #2
 800c9c6:	2201      	moveq	r2, #1
 800c9c8:	6122      	str	r2, [r4, #16]
 800c9ca:	b1bd      	cbz	r5, 800c9fc <__d2b+0x94>
 800c9cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c9d0:	4405      	add	r5, r0
 800c9d2:	603d      	str	r5, [r7, #0]
 800c9d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c9d8:	6030      	str	r0, [r6, #0]
 800c9da:	4620      	mov	r0, r4
 800c9dc:	b003      	add	sp, #12
 800c9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9e6:	e7d6      	b.n	800c996 <__d2b+0x2e>
 800c9e8:	6161      	str	r1, [r4, #20]
 800c9ea:	e7e7      	b.n	800c9bc <__d2b+0x54>
 800c9ec:	a801      	add	r0, sp, #4
 800c9ee:	f7ff fd61 	bl	800c4b4 <__lo0bits>
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	6163      	str	r3, [r4, #20]
 800c9f6:	3020      	adds	r0, #32
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	e7e5      	b.n	800c9c8 <__d2b+0x60>
 800c9fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca04:	6038      	str	r0, [r7, #0]
 800ca06:	6918      	ldr	r0, [r3, #16]
 800ca08:	f7ff fd34 	bl	800c474 <__hi0bits>
 800ca0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca10:	e7e2      	b.n	800c9d8 <__d2b+0x70>
 800ca12:	bf00      	nop
 800ca14:	0800f82c 	.word	0x0800f82c
 800ca18:	0800f83d 	.word	0x0800f83d

0800ca1c <__ssputs_r>:
 800ca1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca20:	688e      	ldr	r6, [r1, #8]
 800ca22:	461f      	mov	r7, r3
 800ca24:	42be      	cmp	r6, r7
 800ca26:	680b      	ldr	r3, [r1, #0]
 800ca28:	4682      	mov	sl, r0
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	4690      	mov	r8, r2
 800ca2e:	d82c      	bhi.n	800ca8a <__ssputs_r+0x6e>
 800ca30:	898a      	ldrh	r2, [r1, #12]
 800ca32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca36:	d026      	beq.n	800ca86 <__ssputs_r+0x6a>
 800ca38:	6965      	ldr	r5, [r4, #20]
 800ca3a:	6909      	ldr	r1, [r1, #16]
 800ca3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca40:	eba3 0901 	sub.w	r9, r3, r1
 800ca44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca48:	1c7b      	adds	r3, r7, #1
 800ca4a:	444b      	add	r3, r9
 800ca4c:	106d      	asrs	r5, r5, #1
 800ca4e:	429d      	cmp	r5, r3
 800ca50:	bf38      	it	cc
 800ca52:	461d      	movcc	r5, r3
 800ca54:	0553      	lsls	r3, r2, #21
 800ca56:	d527      	bpl.n	800caa8 <__ssputs_r+0x8c>
 800ca58:	4629      	mov	r1, r5
 800ca5a:	f7ff fbd7 	bl	800c20c <_malloc_r>
 800ca5e:	4606      	mov	r6, r0
 800ca60:	b360      	cbz	r0, 800cabc <__ssputs_r+0xa0>
 800ca62:	6921      	ldr	r1, [r4, #16]
 800ca64:	464a      	mov	r2, r9
 800ca66:	f7fe fcd2 	bl	800b40e <memcpy>
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca74:	81a3      	strh	r3, [r4, #12]
 800ca76:	6126      	str	r6, [r4, #16]
 800ca78:	6165      	str	r5, [r4, #20]
 800ca7a:	444e      	add	r6, r9
 800ca7c:	eba5 0509 	sub.w	r5, r5, r9
 800ca80:	6026      	str	r6, [r4, #0]
 800ca82:	60a5      	str	r5, [r4, #8]
 800ca84:	463e      	mov	r6, r7
 800ca86:	42be      	cmp	r6, r7
 800ca88:	d900      	bls.n	800ca8c <__ssputs_r+0x70>
 800ca8a:	463e      	mov	r6, r7
 800ca8c:	6820      	ldr	r0, [r4, #0]
 800ca8e:	4632      	mov	r2, r6
 800ca90:	4641      	mov	r1, r8
 800ca92:	f000 f9c9 	bl	800ce28 <memmove>
 800ca96:	68a3      	ldr	r3, [r4, #8]
 800ca98:	1b9b      	subs	r3, r3, r6
 800ca9a:	60a3      	str	r3, [r4, #8]
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	4433      	add	r3, r6
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	2000      	movs	r0, #0
 800caa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa8:	462a      	mov	r2, r5
 800caaa:	f000 fa2d 	bl	800cf08 <_realloc_r>
 800caae:	4606      	mov	r6, r0
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d1e0      	bne.n	800ca76 <__ssputs_r+0x5a>
 800cab4:	6921      	ldr	r1, [r4, #16]
 800cab6:	4650      	mov	r0, sl
 800cab8:	f7ff fb34 	bl	800c124 <_free_r>
 800cabc:	230c      	movs	r3, #12
 800cabe:	f8ca 3000 	str.w	r3, [sl]
 800cac2:	89a3      	ldrh	r3, [r4, #12]
 800cac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cac8:	81a3      	strh	r3, [r4, #12]
 800caca:	f04f 30ff 	mov.w	r0, #4294967295
 800cace:	e7e9      	b.n	800caa4 <__ssputs_r+0x88>

0800cad0 <_svfiprintf_r>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	4698      	mov	r8, r3
 800cad6:	898b      	ldrh	r3, [r1, #12]
 800cad8:	061b      	lsls	r3, r3, #24
 800cada:	b09d      	sub	sp, #116	; 0x74
 800cadc:	4607      	mov	r7, r0
 800cade:	460d      	mov	r5, r1
 800cae0:	4614      	mov	r4, r2
 800cae2:	d50e      	bpl.n	800cb02 <_svfiprintf_r+0x32>
 800cae4:	690b      	ldr	r3, [r1, #16]
 800cae6:	b963      	cbnz	r3, 800cb02 <_svfiprintf_r+0x32>
 800cae8:	2140      	movs	r1, #64	; 0x40
 800caea:	f7ff fb8f 	bl	800c20c <_malloc_r>
 800caee:	6028      	str	r0, [r5, #0]
 800caf0:	6128      	str	r0, [r5, #16]
 800caf2:	b920      	cbnz	r0, 800cafe <_svfiprintf_r+0x2e>
 800caf4:	230c      	movs	r3, #12
 800caf6:	603b      	str	r3, [r7, #0]
 800caf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cafc:	e0d0      	b.n	800cca0 <_svfiprintf_r+0x1d0>
 800cafe:	2340      	movs	r3, #64	; 0x40
 800cb00:	616b      	str	r3, [r5, #20]
 800cb02:	2300      	movs	r3, #0
 800cb04:	9309      	str	r3, [sp, #36]	; 0x24
 800cb06:	2320      	movs	r3, #32
 800cb08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb10:	2330      	movs	r3, #48	; 0x30
 800cb12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ccb8 <_svfiprintf_r+0x1e8>
 800cb16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb1a:	f04f 0901 	mov.w	r9, #1
 800cb1e:	4623      	mov	r3, r4
 800cb20:	469a      	mov	sl, r3
 800cb22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb26:	b10a      	cbz	r2, 800cb2c <_svfiprintf_r+0x5c>
 800cb28:	2a25      	cmp	r2, #37	; 0x25
 800cb2a:	d1f9      	bne.n	800cb20 <_svfiprintf_r+0x50>
 800cb2c:	ebba 0b04 	subs.w	fp, sl, r4
 800cb30:	d00b      	beq.n	800cb4a <_svfiprintf_r+0x7a>
 800cb32:	465b      	mov	r3, fp
 800cb34:	4622      	mov	r2, r4
 800cb36:	4629      	mov	r1, r5
 800cb38:	4638      	mov	r0, r7
 800cb3a:	f7ff ff6f 	bl	800ca1c <__ssputs_r>
 800cb3e:	3001      	adds	r0, #1
 800cb40:	f000 80a9 	beq.w	800cc96 <_svfiprintf_r+0x1c6>
 800cb44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb46:	445a      	add	r2, fp
 800cb48:	9209      	str	r2, [sp, #36]	; 0x24
 800cb4a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f000 80a1 	beq.w	800cc96 <_svfiprintf_r+0x1c6>
 800cb54:	2300      	movs	r3, #0
 800cb56:	f04f 32ff 	mov.w	r2, #4294967295
 800cb5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb5e:	f10a 0a01 	add.w	sl, sl, #1
 800cb62:	9304      	str	r3, [sp, #16]
 800cb64:	9307      	str	r3, [sp, #28]
 800cb66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb6a:	931a      	str	r3, [sp, #104]	; 0x68
 800cb6c:	4654      	mov	r4, sl
 800cb6e:	2205      	movs	r2, #5
 800cb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb74:	4850      	ldr	r0, [pc, #320]	; (800ccb8 <_svfiprintf_r+0x1e8>)
 800cb76:	f7f3 fb53 	bl	8000220 <memchr>
 800cb7a:	9a04      	ldr	r2, [sp, #16]
 800cb7c:	b9d8      	cbnz	r0, 800cbb6 <_svfiprintf_r+0xe6>
 800cb7e:	06d0      	lsls	r0, r2, #27
 800cb80:	bf44      	itt	mi
 800cb82:	2320      	movmi	r3, #32
 800cb84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb88:	0711      	lsls	r1, r2, #28
 800cb8a:	bf44      	itt	mi
 800cb8c:	232b      	movmi	r3, #43	; 0x2b
 800cb8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb92:	f89a 3000 	ldrb.w	r3, [sl]
 800cb96:	2b2a      	cmp	r3, #42	; 0x2a
 800cb98:	d015      	beq.n	800cbc6 <_svfiprintf_r+0xf6>
 800cb9a:	9a07      	ldr	r2, [sp, #28]
 800cb9c:	4654      	mov	r4, sl
 800cb9e:	2000      	movs	r0, #0
 800cba0:	f04f 0c0a 	mov.w	ip, #10
 800cba4:	4621      	mov	r1, r4
 800cba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbaa:	3b30      	subs	r3, #48	; 0x30
 800cbac:	2b09      	cmp	r3, #9
 800cbae:	d94d      	bls.n	800cc4c <_svfiprintf_r+0x17c>
 800cbb0:	b1b0      	cbz	r0, 800cbe0 <_svfiprintf_r+0x110>
 800cbb2:	9207      	str	r2, [sp, #28]
 800cbb4:	e014      	b.n	800cbe0 <_svfiprintf_r+0x110>
 800cbb6:	eba0 0308 	sub.w	r3, r0, r8
 800cbba:	fa09 f303 	lsl.w	r3, r9, r3
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	9304      	str	r3, [sp, #16]
 800cbc2:	46a2      	mov	sl, r4
 800cbc4:	e7d2      	b.n	800cb6c <_svfiprintf_r+0x9c>
 800cbc6:	9b03      	ldr	r3, [sp, #12]
 800cbc8:	1d19      	adds	r1, r3, #4
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	9103      	str	r1, [sp, #12]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	bfbb      	ittet	lt
 800cbd2:	425b      	neglt	r3, r3
 800cbd4:	f042 0202 	orrlt.w	r2, r2, #2
 800cbd8:	9307      	strge	r3, [sp, #28]
 800cbda:	9307      	strlt	r3, [sp, #28]
 800cbdc:	bfb8      	it	lt
 800cbde:	9204      	strlt	r2, [sp, #16]
 800cbe0:	7823      	ldrb	r3, [r4, #0]
 800cbe2:	2b2e      	cmp	r3, #46	; 0x2e
 800cbe4:	d10c      	bne.n	800cc00 <_svfiprintf_r+0x130>
 800cbe6:	7863      	ldrb	r3, [r4, #1]
 800cbe8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbea:	d134      	bne.n	800cc56 <_svfiprintf_r+0x186>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	1d1a      	adds	r2, r3, #4
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	9203      	str	r2, [sp, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bfb8      	it	lt
 800cbf8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbfc:	3402      	adds	r4, #2
 800cbfe:	9305      	str	r3, [sp, #20]
 800cc00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ccc8 <_svfiprintf_r+0x1f8>
 800cc04:	7821      	ldrb	r1, [r4, #0]
 800cc06:	2203      	movs	r2, #3
 800cc08:	4650      	mov	r0, sl
 800cc0a:	f7f3 fb09 	bl	8000220 <memchr>
 800cc0e:	b138      	cbz	r0, 800cc20 <_svfiprintf_r+0x150>
 800cc10:	9b04      	ldr	r3, [sp, #16]
 800cc12:	eba0 000a 	sub.w	r0, r0, sl
 800cc16:	2240      	movs	r2, #64	; 0x40
 800cc18:	4082      	lsls	r2, r0
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	3401      	adds	r4, #1
 800cc1e:	9304      	str	r3, [sp, #16]
 800cc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc24:	4825      	ldr	r0, [pc, #148]	; (800ccbc <_svfiprintf_r+0x1ec>)
 800cc26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc2a:	2206      	movs	r2, #6
 800cc2c:	f7f3 faf8 	bl	8000220 <memchr>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d038      	beq.n	800cca6 <_svfiprintf_r+0x1d6>
 800cc34:	4b22      	ldr	r3, [pc, #136]	; (800ccc0 <_svfiprintf_r+0x1f0>)
 800cc36:	bb1b      	cbnz	r3, 800cc80 <_svfiprintf_r+0x1b0>
 800cc38:	9b03      	ldr	r3, [sp, #12]
 800cc3a:	3307      	adds	r3, #7
 800cc3c:	f023 0307 	bic.w	r3, r3, #7
 800cc40:	3308      	adds	r3, #8
 800cc42:	9303      	str	r3, [sp, #12]
 800cc44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc46:	4433      	add	r3, r6
 800cc48:	9309      	str	r3, [sp, #36]	; 0x24
 800cc4a:	e768      	b.n	800cb1e <_svfiprintf_r+0x4e>
 800cc4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc50:	460c      	mov	r4, r1
 800cc52:	2001      	movs	r0, #1
 800cc54:	e7a6      	b.n	800cba4 <_svfiprintf_r+0xd4>
 800cc56:	2300      	movs	r3, #0
 800cc58:	3401      	adds	r4, #1
 800cc5a:	9305      	str	r3, [sp, #20]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	f04f 0c0a 	mov.w	ip, #10
 800cc62:	4620      	mov	r0, r4
 800cc64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc68:	3a30      	subs	r2, #48	; 0x30
 800cc6a:	2a09      	cmp	r2, #9
 800cc6c:	d903      	bls.n	800cc76 <_svfiprintf_r+0x1a6>
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0c6      	beq.n	800cc00 <_svfiprintf_r+0x130>
 800cc72:	9105      	str	r1, [sp, #20]
 800cc74:	e7c4      	b.n	800cc00 <_svfiprintf_r+0x130>
 800cc76:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e7f0      	b.n	800cc62 <_svfiprintf_r+0x192>
 800cc80:	ab03      	add	r3, sp, #12
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	462a      	mov	r2, r5
 800cc86:	4b0f      	ldr	r3, [pc, #60]	; (800ccc4 <_svfiprintf_r+0x1f4>)
 800cc88:	a904      	add	r1, sp, #16
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	f7fd fe2c 	bl	800a8e8 <_printf_float>
 800cc90:	1c42      	adds	r2, r0, #1
 800cc92:	4606      	mov	r6, r0
 800cc94:	d1d6      	bne.n	800cc44 <_svfiprintf_r+0x174>
 800cc96:	89ab      	ldrh	r3, [r5, #12]
 800cc98:	065b      	lsls	r3, r3, #25
 800cc9a:	f53f af2d 	bmi.w	800caf8 <_svfiprintf_r+0x28>
 800cc9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cca0:	b01d      	add	sp, #116	; 0x74
 800cca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca6:	ab03      	add	r3, sp, #12
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	462a      	mov	r2, r5
 800ccac:	4b05      	ldr	r3, [pc, #20]	; (800ccc4 <_svfiprintf_r+0x1f4>)
 800ccae:	a904      	add	r1, sp, #16
 800ccb0:	4638      	mov	r0, r7
 800ccb2:	f7fe f8bd 	bl	800ae30 <_printf_i>
 800ccb6:	e7eb      	b.n	800cc90 <_svfiprintf_r+0x1c0>
 800ccb8:	0800f994 	.word	0x0800f994
 800ccbc:	0800f99e 	.word	0x0800f99e
 800ccc0:	0800a8e9 	.word	0x0800a8e9
 800ccc4:	0800ca1d 	.word	0x0800ca1d
 800ccc8:	0800f99a 	.word	0x0800f99a

0800cccc <__sflush_r>:
 800cccc:	898a      	ldrh	r2, [r1, #12]
 800ccce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	0710      	lsls	r0, r2, #28
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	d458      	bmi.n	800cd8c <__sflush_r+0xc0>
 800ccda:	684b      	ldr	r3, [r1, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	dc05      	bgt.n	800ccec <__sflush_r+0x20>
 800cce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	dc02      	bgt.n	800ccec <__sflush_r+0x20>
 800cce6:	2000      	movs	r0, #0
 800cce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccee:	2e00      	cmp	r6, #0
 800ccf0:	d0f9      	beq.n	800cce6 <__sflush_r+0x1a>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccf8:	682f      	ldr	r7, [r5, #0]
 800ccfa:	6a21      	ldr	r1, [r4, #32]
 800ccfc:	602b      	str	r3, [r5, #0]
 800ccfe:	d032      	beq.n	800cd66 <__sflush_r+0x9a>
 800cd00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd02:	89a3      	ldrh	r3, [r4, #12]
 800cd04:	075a      	lsls	r2, r3, #29
 800cd06:	d505      	bpl.n	800cd14 <__sflush_r+0x48>
 800cd08:	6863      	ldr	r3, [r4, #4]
 800cd0a:	1ac0      	subs	r0, r0, r3
 800cd0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd0e:	b10b      	cbz	r3, 800cd14 <__sflush_r+0x48>
 800cd10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd12:	1ac0      	subs	r0, r0, r3
 800cd14:	2300      	movs	r3, #0
 800cd16:	4602      	mov	r2, r0
 800cd18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd1a:	6a21      	ldr	r1, [r4, #32]
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	47b0      	blx	r6
 800cd20:	1c43      	adds	r3, r0, #1
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	d106      	bne.n	800cd34 <__sflush_r+0x68>
 800cd26:	6829      	ldr	r1, [r5, #0]
 800cd28:	291d      	cmp	r1, #29
 800cd2a:	d82b      	bhi.n	800cd84 <__sflush_r+0xb8>
 800cd2c:	4a29      	ldr	r2, [pc, #164]	; (800cdd4 <__sflush_r+0x108>)
 800cd2e:	410a      	asrs	r2, r1
 800cd30:	07d6      	lsls	r6, r2, #31
 800cd32:	d427      	bmi.n	800cd84 <__sflush_r+0xb8>
 800cd34:	2200      	movs	r2, #0
 800cd36:	6062      	str	r2, [r4, #4]
 800cd38:	04d9      	lsls	r1, r3, #19
 800cd3a:	6922      	ldr	r2, [r4, #16]
 800cd3c:	6022      	str	r2, [r4, #0]
 800cd3e:	d504      	bpl.n	800cd4a <__sflush_r+0x7e>
 800cd40:	1c42      	adds	r2, r0, #1
 800cd42:	d101      	bne.n	800cd48 <__sflush_r+0x7c>
 800cd44:	682b      	ldr	r3, [r5, #0]
 800cd46:	b903      	cbnz	r3, 800cd4a <__sflush_r+0x7e>
 800cd48:	6560      	str	r0, [r4, #84]	; 0x54
 800cd4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd4c:	602f      	str	r7, [r5, #0]
 800cd4e:	2900      	cmp	r1, #0
 800cd50:	d0c9      	beq.n	800cce6 <__sflush_r+0x1a>
 800cd52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd56:	4299      	cmp	r1, r3
 800cd58:	d002      	beq.n	800cd60 <__sflush_r+0x94>
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	f7ff f9e2 	bl	800c124 <_free_r>
 800cd60:	2000      	movs	r0, #0
 800cd62:	6360      	str	r0, [r4, #52]	; 0x34
 800cd64:	e7c0      	b.n	800cce8 <__sflush_r+0x1c>
 800cd66:	2301      	movs	r3, #1
 800cd68:	4628      	mov	r0, r5
 800cd6a:	47b0      	blx	r6
 800cd6c:	1c41      	adds	r1, r0, #1
 800cd6e:	d1c8      	bne.n	800cd02 <__sflush_r+0x36>
 800cd70:	682b      	ldr	r3, [r5, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d0c5      	beq.n	800cd02 <__sflush_r+0x36>
 800cd76:	2b1d      	cmp	r3, #29
 800cd78:	d001      	beq.n	800cd7e <__sflush_r+0xb2>
 800cd7a:	2b16      	cmp	r3, #22
 800cd7c:	d101      	bne.n	800cd82 <__sflush_r+0xb6>
 800cd7e:	602f      	str	r7, [r5, #0]
 800cd80:	e7b1      	b.n	800cce6 <__sflush_r+0x1a>
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd88:	81a3      	strh	r3, [r4, #12]
 800cd8a:	e7ad      	b.n	800cce8 <__sflush_r+0x1c>
 800cd8c:	690f      	ldr	r7, [r1, #16]
 800cd8e:	2f00      	cmp	r7, #0
 800cd90:	d0a9      	beq.n	800cce6 <__sflush_r+0x1a>
 800cd92:	0793      	lsls	r3, r2, #30
 800cd94:	680e      	ldr	r6, [r1, #0]
 800cd96:	bf08      	it	eq
 800cd98:	694b      	ldreq	r3, [r1, #20]
 800cd9a:	600f      	str	r7, [r1, #0]
 800cd9c:	bf18      	it	ne
 800cd9e:	2300      	movne	r3, #0
 800cda0:	eba6 0807 	sub.w	r8, r6, r7
 800cda4:	608b      	str	r3, [r1, #8]
 800cda6:	f1b8 0f00 	cmp.w	r8, #0
 800cdaa:	dd9c      	ble.n	800cce6 <__sflush_r+0x1a>
 800cdac:	6a21      	ldr	r1, [r4, #32]
 800cdae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cdb0:	4643      	mov	r3, r8
 800cdb2:	463a      	mov	r2, r7
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	47b0      	blx	r6
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	dc06      	bgt.n	800cdca <__sflush_r+0xfe>
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc2:	81a3      	strh	r3, [r4, #12]
 800cdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc8:	e78e      	b.n	800cce8 <__sflush_r+0x1c>
 800cdca:	4407      	add	r7, r0
 800cdcc:	eba8 0800 	sub.w	r8, r8, r0
 800cdd0:	e7e9      	b.n	800cda6 <__sflush_r+0xda>
 800cdd2:	bf00      	nop
 800cdd4:	dfbffffe 	.word	0xdfbffffe

0800cdd8 <_fflush_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	690b      	ldr	r3, [r1, #16]
 800cddc:	4605      	mov	r5, r0
 800cdde:	460c      	mov	r4, r1
 800cde0:	b913      	cbnz	r3, 800cde8 <_fflush_r+0x10>
 800cde2:	2500      	movs	r5, #0
 800cde4:	4628      	mov	r0, r5
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	b118      	cbz	r0, 800cdf2 <_fflush_r+0x1a>
 800cdea:	6a03      	ldr	r3, [r0, #32]
 800cdec:	b90b      	cbnz	r3, 800cdf2 <_fflush_r+0x1a>
 800cdee:	f7fe f9cd 	bl	800b18c <__sinit>
 800cdf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d0f3      	beq.n	800cde2 <_fflush_r+0xa>
 800cdfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdfc:	07d0      	lsls	r0, r2, #31
 800cdfe:	d404      	bmi.n	800ce0a <_fflush_r+0x32>
 800ce00:	0599      	lsls	r1, r3, #22
 800ce02:	d402      	bmi.n	800ce0a <_fflush_r+0x32>
 800ce04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce06:	f7fe fb00 	bl	800b40a <__retarget_lock_acquire_recursive>
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	4621      	mov	r1, r4
 800ce0e:	f7ff ff5d 	bl	800cccc <__sflush_r>
 800ce12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce14:	07da      	lsls	r2, r3, #31
 800ce16:	4605      	mov	r5, r0
 800ce18:	d4e4      	bmi.n	800cde4 <_fflush_r+0xc>
 800ce1a:	89a3      	ldrh	r3, [r4, #12]
 800ce1c:	059b      	lsls	r3, r3, #22
 800ce1e:	d4e1      	bmi.n	800cde4 <_fflush_r+0xc>
 800ce20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce22:	f7fe faf3 	bl	800b40c <__retarget_lock_release_recursive>
 800ce26:	e7dd      	b.n	800cde4 <_fflush_r+0xc>

0800ce28 <memmove>:
 800ce28:	4288      	cmp	r0, r1
 800ce2a:	b510      	push	{r4, lr}
 800ce2c:	eb01 0402 	add.w	r4, r1, r2
 800ce30:	d902      	bls.n	800ce38 <memmove+0x10>
 800ce32:	4284      	cmp	r4, r0
 800ce34:	4623      	mov	r3, r4
 800ce36:	d807      	bhi.n	800ce48 <memmove+0x20>
 800ce38:	1e43      	subs	r3, r0, #1
 800ce3a:	42a1      	cmp	r1, r4
 800ce3c:	d008      	beq.n	800ce50 <memmove+0x28>
 800ce3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce46:	e7f8      	b.n	800ce3a <memmove+0x12>
 800ce48:	4402      	add	r2, r0
 800ce4a:	4601      	mov	r1, r0
 800ce4c:	428a      	cmp	r2, r1
 800ce4e:	d100      	bne.n	800ce52 <memmove+0x2a>
 800ce50:	bd10      	pop	{r4, pc}
 800ce52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce5a:	e7f7      	b.n	800ce4c <memmove+0x24>

0800ce5c <_sbrk_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4d06      	ldr	r5, [pc, #24]	; (800ce78 <_sbrk_r+0x1c>)
 800ce60:	2300      	movs	r3, #0
 800ce62:	4604      	mov	r4, r0
 800ce64:	4608      	mov	r0, r1
 800ce66:	602b      	str	r3, [r5, #0]
 800ce68:	f7f8 f954 	bl	8005114 <_sbrk>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d102      	bne.n	800ce76 <_sbrk_r+0x1a>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	b103      	cbz	r3, 800ce76 <_sbrk_r+0x1a>
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	20001fe8 	.word	0x20001fe8

0800ce7c <__assert_func>:
 800ce7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce7e:	4614      	mov	r4, r2
 800ce80:	461a      	mov	r2, r3
 800ce82:	4b09      	ldr	r3, [pc, #36]	; (800cea8 <__assert_func+0x2c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4605      	mov	r5, r0
 800ce88:	68d8      	ldr	r0, [r3, #12]
 800ce8a:	b14c      	cbz	r4, 800cea0 <__assert_func+0x24>
 800ce8c:	4b07      	ldr	r3, [pc, #28]	; (800ceac <__assert_func+0x30>)
 800ce8e:	9100      	str	r1, [sp, #0]
 800ce90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce94:	4906      	ldr	r1, [pc, #24]	; (800ceb0 <__assert_func+0x34>)
 800ce96:	462b      	mov	r3, r5
 800ce98:	f000 f872 	bl	800cf80 <fiprintf>
 800ce9c:	f000 f882 	bl	800cfa4 <abort>
 800cea0:	4b04      	ldr	r3, [pc, #16]	; (800ceb4 <__assert_func+0x38>)
 800cea2:	461c      	mov	r4, r3
 800cea4:	e7f3      	b.n	800ce8e <__assert_func+0x12>
 800cea6:	bf00      	nop
 800cea8:	200005d4 	.word	0x200005d4
 800ceac:	0800f9af 	.word	0x0800f9af
 800ceb0:	0800f9bc 	.word	0x0800f9bc
 800ceb4:	0800f9ea 	.word	0x0800f9ea

0800ceb8 <_calloc_r>:
 800ceb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ceba:	fba1 2402 	umull	r2, r4, r1, r2
 800cebe:	b94c      	cbnz	r4, 800ced4 <_calloc_r+0x1c>
 800cec0:	4611      	mov	r1, r2
 800cec2:	9201      	str	r2, [sp, #4]
 800cec4:	f7ff f9a2 	bl	800c20c <_malloc_r>
 800cec8:	9a01      	ldr	r2, [sp, #4]
 800ceca:	4605      	mov	r5, r0
 800cecc:	b930      	cbnz	r0, 800cedc <_calloc_r+0x24>
 800cece:	4628      	mov	r0, r5
 800ced0:	b003      	add	sp, #12
 800ced2:	bd30      	pop	{r4, r5, pc}
 800ced4:	220c      	movs	r2, #12
 800ced6:	6002      	str	r2, [r0, #0]
 800ced8:	2500      	movs	r5, #0
 800ceda:	e7f8      	b.n	800cece <_calloc_r+0x16>
 800cedc:	4621      	mov	r1, r4
 800cede:	f7fe fa17 	bl	800b310 <memset>
 800cee2:	e7f4      	b.n	800cece <_calloc_r+0x16>

0800cee4 <__ascii_mbtowc>:
 800cee4:	b082      	sub	sp, #8
 800cee6:	b901      	cbnz	r1, 800ceea <__ascii_mbtowc+0x6>
 800cee8:	a901      	add	r1, sp, #4
 800ceea:	b142      	cbz	r2, 800cefe <__ascii_mbtowc+0x1a>
 800ceec:	b14b      	cbz	r3, 800cf02 <__ascii_mbtowc+0x1e>
 800ceee:	7813      	ldrb	r3, [r2, #0]
 800cef0:	600b      	str	r3, [r1, #0]
 800cef2:	7812      	ldrb	r2, [r2, #0]
 800cef4:	1e10      	subs	r0, r2, #0
 800cef6:	bf18      	it	ne
 800cef8:	2001      	movne	r0, #1
 800cefa:	b002      	add	sp, #8
 800cefc:	4770      	bx	lr
 800cefe:	4610      	mov	r0, r2
 800cf00:	e7fb      	b.n	800cefa <__ascii_mbtowc+0x16>
 800cf02:	f06f 0001 	mvn.w	r0, #1
 800cf06:	e7f8      	b.n	800cefa <__ascii_mbtowc+0x16>

0800cf08 <_realloc_r>:
 800cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0c:	4680      	mov	r8, r0
 800cf0e:	4614      	mov	r4, r2
 800cf10:	460e      	mov	r6, r1
 800cf12:	b921      	cbnz	r1, 800cf1e <_realloc_r+0x16>
 800cf14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf18:	4611      	mov	r1, r2
 800cf1a:	f7ff b977 	b.w	800c20c <_malloc_r>
 800cf1e:	b92a      	cbnz	r2, 800cf2c <_realloc_r+0x24>
 800cf20:	f7ff f900 	bl	800c124 <_free_r>
 800cf24:	4625      	mov	r5, r4
 800cf26:	4628      	mov	r0, r5
 800cf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2c:	f000 f841 	bl	800cfb2 <_malloc_usable_size_r>
 800cf30:	4284      	cmp	r4, r0
 800cf32:	4607      	mov	r7, r0
 800cf34:	d802      	bhi.n	800cf3c <_realloc_r+0x34>
 800cf36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf3a:	d812      	bhi.n	800cf62 <_realloc_r+0x5a>
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	4640      	mov	r0, r8
 800cf40:	f7ff f964 	bl	800c20c <_malloc_r>
 800cf44:	4605      	mov	r5, r0
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d0ed      	beq.n	800cf26 <_realloc_r+0x1e>
 800cf4a:	42bc      	cmp	r4, r7
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4631      	mov	r1, r6
 800cf50:	bf28      	it	cs
 800cf52:	463a      	movcs	r2, r7
 800cf54:	f7fe fa5b 	bl	800b40e <memcpy>
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	f7ff f8e2 	bl	800c124 <_free_r>
 800cf60:	e7e1      	b.n	800cf26 <_realloc_r+0x1e>
 800cf62:	4635      	mov	r5, r6
 800cf64:	e7df      	b.n	800cf26 <_realloc_r+0x1e>

0800cf66 <__ascii_wctomb>:
 800cf66:	b149      	cbz	r1, 800cf7c <__ascii_wctomb+0x16>
 800cf68:	2aff      	cmp	r2, #255	; 0xff
 800cf6a:	bf85      	ittet	hi
 800cf6c:	238a      	movhi	r3, #138	; 0x8a
 800cf6e:	6003      	strhi	r3, [r0, #0]
 800cf70:	700a      	strbls	r2, [r1, #0]
 800cf72:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf76:	bf98      	it	ls
 800cf78:	2001      	movls	r0, #1
 800cf7a:	4770      	bx	lr
 800cf7c:	4608      	mov	r0, r1
 800cf7e:	4770      	bx	lr

0800cf80 <fiprintf>:
 800cf80:	b40e      	push	{r1, r2, r3}
 800cf82:	b503      	push	{r0, r1, lr}
 800cf84:	4601      	mov	r1, r0
 800cf86:	ab03      	add	r3, sp, #12
 800cf88:	4805      	ldr	r0, [pc, #20]	; (800cfa0 <fiprintf+0x20>)
 800cf8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf8e:	6800      	ldr	r0, [r0, #0]
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	f000 f83f 	bl	800d014 <_vfiprintf_r>
 800cf96:	b002      	add	sp, #8
 800cf98:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf9c:	b003      	add	sp, #12
 800cf9e:	4770      	bx	lr
 800cfa0:	200005d4 	.word	0x200005d4

0800cfa4 <abort>:
 800cfa4:	b508      	push	{r3, lr}
 800cfa6:	2006      	movs	r0, #6
 800cfa8:	f000 fa0c 	bl	800d3c4 <raise>
 800cfac:	2001      	movs	r0, #1
 800cfae:	f7f8 f885 	bl	80050bc <_exit>

0800cfb2 <_malloc_usable_size_r>:
 800cfb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb6:	1f18      	subs	r0, r3, #4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	bfbc      	itt	lt
 800cfbc:	580b      	ldrlt	r3, [r1, r0]
 800cfbe:	18c0      	addlt	r0, r0, r3
 800cfc0:	4770      	bx	lr

0800cfc2 <__sfputc_r>:
 800cfc2:	6893      	ldr	r3, [r2, #8]
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	b410      	push	{r4}
 800cfca:	6093      	str	r3, [r2, #8]
 800cfcc:	da08      	bge.n	800cfe0 <__sfputc_r+0x1e>
 800cfce:	6994      	ldr	r4, [r2, #24]
 800cfd0:	42a3      	cmp	r3, r4
 800cfd2:	db01      	blt.n	800cfd8 <__sfputc_r+0x16>
 800cfd4:	290a      	cmp	r1, #10
 800cfd6:	d103      	bne.n	800cfe0 <__sfputc_r+0x1e>
 800cfd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfdc:	f000 b934 	b.w	800d248 <__swbuf_r>
 800cfe0:	6813      	ldr	r3, [r2, #0]
 800cfe2:	1c58      	adds	r0, r3, #1
 800cfe4:	6010      	str	r0, [r2, #0]
 800cfe6:	7019      	strb	r1, [r3, #0]
 800cfe8:	4608      	mov	r0, r1
 800cfea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <__sfputs_r>:
 800cff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff2:	4606      	mov	r6, r0
 800cff4:	460f      	mov	r7, r1
 800cff6:	4614      	mov	r4, r2
 800cff8:	18d5      	adds	r5, r2, r3
 800cffa:	42ac      	cmp	r4, r5
 800cffc:	d101      	bne.n	800d002 <__sfputs_r+0x12>
 800cffe:	2000      	movs	r0, #0
 800d000:	e007      	b.n	800d012 <__sfputs_r+0x22>
 800d002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d006:	463a      	mov	r2, r7
 800d008:	4630      	mov	r0, r6
 800d00a:	f7ff ffda 	bl	800cfc2 <__sfputc_r>
 800d00e:	1c43      	adds	r3, r0, #1
 800d010:	d1f3      	bne.n	800cffa <__sfputs_r+0xa>
 800d012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d014 <_vfiprintf_r>:
 800d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	460d      	mov	r5, r1
 800d01a:	b09d      	sub	sp, #116	; 0x74
 800d01c:	4614      	mov	r4, r2
 800d01e:	4698      	mov	r8, r3
 800d020:	4606      	mov	r6, r0
 800d022:	b118      	cbz	r0, 800d02c <_vfiprintf_r+0x18>
 800d024:	6a03      	ldr	r3, [r0, #32]
 800d026:	b90b      	cbnz	r3, 800d02c <_vfiprintf_r+0x18>
 800d028:	f7fe f8b0 	bl	800b18c <__sinit>
 800d02c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d02e:	07d9      	lsls	r1, r3, #31
 800d030:	d405      	bmi.n	800d03e <_vfiprintf_r+0x2a>
 800d032:	89ab      	ldrh	r3, [r5, #12]
 800d034:	059a      	lsls	r2, r3, #22
 800d036:	d402      	bmi.n	800d03e <_vfiprintf_r+0x2a>
 800d038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d03a:	f7fe f9e6 	bl	800b40a <__retarget_lock_acquire_recursive>
 800d03e:	89ab      	ldrh	r3, [r5, #12]
 800d040:	071b      	lsls	r3, r3, #28
 800d042:	d501      	bpl.n	800d048 <_vfiprintf_r+0x34>
 800d044:	692b      	ldr	r3, [r5, #16]
 800d046:	b99b      	cbnz	r3, 800d070 <_vfiprintf_r+0x5c>
 800d048:	4629      	mov	r1, r5
 800d04a:	4630      	mov	r0, r6
 800d04c:	f000 f93a 	bl	800d2c4 <__swsetup_r>
 800d050:	b170      	cbz	r0, 800d070 <_vfiprintf_r+0x5c>
 800d052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d054:	07dc      	lsls	r4, r3, #31
 800d056:	d504      	bpl.n	800d062 <_vfiprintf_r+0x4e>
 800d058:	f04f 30ff 	mov.w	r0, #4294967295
 800d05c:	b01d      	add	sp, #116	; 0x74
 800d05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d062:	89ab      	ldrh	r3, [r5, #12]
 800d064:	0598      	lsls	r0, r3, #22
 800d066:	d4f7      	bmi.n	800d058 <_vfiprintf_r+0x44>
 800d068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d06a:	f7fe f9cf 	bl	800b40c <__retarget_lock_release_recursive>
 800d06e:	e7f3      	b.n	800d058 <_vfiprintf_r+0x44>
 800d070:	2300      	movs	r3, #0
 800d072:	9309      	str	r3, [sp, #36]	; 0x24
 800d074:	2320      	movs	r3, #32
 800d076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d07a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d07e:	2330      	movs	r3, #48	; 0x30
 800d080:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d234 <_vfiprintf_r+0x220>
 800d084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d088:	f04f 0901 	mov.w	r9, #1
 800d08c:	4623      	mov	r3, r4
 800d08e:	469a      	mov	sl, r3
 800d090:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d094:	b10a      	cbz	r2, 800d09a <_vfiprintf_r+0x86>
 800d096:	2a25      	cmp	r2, #37	; 0x25
 800d098:	d1f9      	bne.n	800d08e <_vfiprintf_r+0x7a>
 800d09a:	ebba 0b04 	subs.w	fp, sl, r4
 800d09e:	d00b      	beq.n	800d0b8 <_vfiprintf_r+0xa4>
 800d0a0:	465b      	mov	r3, fp
 800d0a2:	4622      	mov	r2, r4
 800d0a4:	4629      	mov	r1, r5
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	f7ff ffa2 	bl	800cff0 <__sfputs_r>
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	f000 80a9 	beq.w	800d204 <_vfiprintf_r+0x1f0>
 800d0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0b4:	445a      	add	r2, fp
 800d0b6:	9209      	str	r2, [sp, #36]	; 0x24
 800d0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f000 80a1 	beq.w	800d204 <_vfiprintf_r+0x1f0>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0cc:	f10a 0a01 	add.w	sl, sl, #1
 800d0d0:	9304      	str	r3, [sp, #16]
 800d0d2:	9307      	str	r3, [sp, #28]
 800d0d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0d8:	931a      	str	r3, [sp, #104]	; 0x68
 800d0da:	4654      	mov	r4, sl
 800d0dc:	2205      	movs	r2, #5
 800d0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e2:	4854      	ldr	r0, [pc, #336]	; (800d234 <_vfiprintf_r+0x220>)
 800d0e4:	f7f3 f89c 	bl	8000220 <memchr>
 800d0e8:	9a04      	ldr	r2, [sp, #16]
 800d0ea:	b9d8      	cbnz	r0, 800d124 <_vfiprintf_r+0x110>
 800d0ec:	06d1      	lsls	r1, r2, #27
 800d0ee:	bf44      	itt	mi
 800d0f0:	2320      	movmi	r3, #32
 800d0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0f6:	0713      	lsls	r3, r2, #28
 800d0f8:	bf44      	itt	mi
 800d0fa:	232b      	movmi	r3, #43	; 0x2b
 800d0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d100:	f89a 3000 	ldrb.w	r3, [sl]
 800d104:	2b2a      	cmp	r3, #42	; 0x2a
 800d106:	d015      	beq.n	800d134 <_vfiprintf_r+0x120>
 800d108:	9a07      	ldr	r2, [sp, #28]
 800d10a:	4654      	mov	r4, sl
 800d10c:	2000      	movs	r0, #0
 800d10e:	f04f 0c0a 	mov.w	ip, #10
 800d112:	4621      	mov	r1, r4
 800d114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d118:	3b30      	subs	r3, #48	; 0x30
 800d11a:	2b09      	cmp	r3, #9
 800d11c:	d94d      	bls.n	800d1ba <_vfiprintf_r+0x1a6>
 800d11e:	b1b0      	cbz	r0, 800d14e <_vfiprintf_r+0x13a>
 800d120:	9207      	str	r2, [sp, #28]
 800d122:	e014      	b.n	800d14e <_vfiprintf_r+0x13a>
 800d124:	eba0 0308 	sub.w	r3, r0, r8
 800d128:	fa09 f303 	lsl.w	r3, r9, r3
 800d12c:	4313      	orrs	r3, r2
 800d12e:	9304      	str	r3, [sp, #16]
 800d130:	46a2      	mov	sl, r4
 800d132:	e7d2      	b.n	800d0da <_vfiprintf_r+0xc6>
 800d134:	9b03      	ldr	r3, [sp, #12]
 800d136:	1d19      	adds	r1, r3, #4
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	9103      	str	r1, [sp, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	bfbb      	ittet	lt
 800d140:	425b      	neglt	r3, r3
 800d142:	f042 0202 	orrlt.w	r2, r2, #2
 800d146:	9307      	strge	r3, [sp, #28]
 800d148:	9307      	strlt	r3, [sp, #28]
 800d14a:	bfb8      	it	lt
 800d14c:	9204      	strlt	r2, [sp, #16]
 800d14e:	7823      	ldrb	r3, [r4, #0]
 800d150:	2b2e      	cmp	r3, #46	; 0x2e
 800d152:	d10c      	bne.n	800d16e <_vfiprintf_r+0x15a>
 800d154:	7863      	ldrb	r3, [r4, #1]
 800d156:	2b2a      	cmp	r3, #42	; 0x2a
 800d158:	d134      	bne.n	800d1c4 <_vfiprintf_r+0x1b0>
 800d15a:	9b03      	ldr	r3, [sp, #12]
 800d15c:	1d1a      	adds	r2, r3, #4
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	9203      	str	r2, [sp, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	bfb8      	it	lt
 800d166:	f04f 33ff 	movlt.w	r3, #4294967295
 800d16a:	3402      	adds	r4, #2
 800d16c:	9305      	str	r3, [sp, #20]
 800d16e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d244 <_vfiprintf_r+0x230>
 800d172:	7821      	ldrb	r1, [r4, #0]
 800d174:	2203      	movs	r2, #3
 800d176:	4650      	mov	r0, sl
 800d178:	f7f3 f852 	bl	8000220 <memchr>
 800d17c:	b138      	cbz	r0, 800d18e <_vfiprintf_r+0x17a>
 800d17e:	9b04      	ldr	r3, [sp, #16]
 800d180:	eba0 000a 	sub.w	r0, r0, sl
 800d184:	2240      	movs	r2, #64	; 0x40
 800d186:	4082      	lsls	r2, r0
 800d188:	4313      	orrs	r3, r2
 800d18a:	3401      	adds	r4, #1
 800d18c:	9304      	str	r3, [sp, #16]
 800d18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d192:	4829      	ldr	r0, [pc, #164]	; (800d238 <_vfiprintf_r+0x224>)
 800d194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d198:	2206      	movs	r2, #6
 800d19a:	f7f3 f841 	bl	8000220 <memchr>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d03f      	beq.n	800d222 <_vfiprintf_r+0x20e>
 800d1a2:	4b26      	ldr	r3, [pc, #152]	; (800d23c <_vfiprintf_r+0x228>)
 800d1a4:	bb1b      	cbnz	r3, 800d1ee <_vfiprintf_r+0x1da>
 800d1a6:	9b03      	ldr	r3, [sp, #12]
 800d1a8:	3307      	adds	r3, #7
 800d1aa:	f023 0307 	bic.w	r3, r3, #7
 800d1ae:	3308      	adds	r3, #8
 800d1b0:	9303      	str	r3, [sp, #12]
 800d1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b4:	443b      	add	r3, r7
 800d1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b8:	e768      	b.n	800d08c <_vfiprintf_r+0x78>
 800d1ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1be:	460c      	mov	r4, r1
 800d1c0:	2001      	movs	r0, #1
 800d1c2:	e7a6      	b.n	800d112 <_vfiprintf_r+0xfe>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	3401      	adds	r4, #1
 800d1c8:	9305      	str	r3, [sp, #20]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	f04f 0c0a 	mov.w	ip, #10
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1d6:	3a30      	subs	r2, #48	; 0x30
 800d1d8:	2a09      	cmp	r2, #9
 800d1da:	d903      	bls.n	800d1e4 <_vfiprintf_r+0x1d0>
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d0c6      	beq.n	800d16e <_vfiprintf_r+0x15a>
 800d1e0:	9105      	str	r1, [sp, #20]
 800d1e2:	e7c4      	b.n	800d16e <_vfiprintf_r+0x15a>
 800d1e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e7f0      	b.n	800d1d0 <_vfiprintf_r+0x1bc>
 800d1ee:	ab03      	add	r3, sp, #12
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	462a      	mov	r2, r5
 800d1f4:	4b12      	ldr	r3, [pc, #72]	; (800d240 <_vfiprintf_r+0x22c>)
 800d1f6:	a904      	add	r1, sp, #16
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	f7fd fb75 	bl	800a8e8 <_printf_float>
 800d1fe:	4607      	mov	r7, r0
 800d200:	1c78      	adds	r0, r7, #1
 800d202:	d1d6      	bne.n	800d1b2 <_vfiprintf_r+0x19e>
 800d204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d206:	07d9      	lsls	r1, r3, #31
 800d208:	d405      	bmi.n	800d216 <_vfiprintf_r+0x202>
 800d20a:	89ab      	ldrh	r3, [r5, #12]
 800d20c:	059a      	lsls	r2, r3, #22
 800d20e:	d402      	bmi.n	800d216 <_vfiprintf_r+0x202>
 800d210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d212:	f7fe f8fb 	bl	800b40c <__retarget_lock_release_recursive>
 800d216:	89ab      	ldrh	r3, [r5, #12]
 800d218:	065b      	lsls	r3, r3, #25
 800d21a:	f53f af1d 	bmi.w	800d058 <_vfiprintf_r+0x44>
 800d21e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d220:	e71c      	b.n	800d05c <_vfiprintf_r+0x48>
 800d222:	ab03      	add	r3, sp, #12
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	462a      	mov	r2, r5
 800d228:	4b05      	ldr	r3, [pc, #20]	; (800d240 <_vfiprintf_r+0x22c>)
 800d22a:	a904      	add	r1, sp, #16
 800d22c:	4630      	mov	r0, r6
 800d22e:	f7fd fdff 	bl	800ae30 <_printf_i>
 800d232:	e7e4      	b.n	800d1fe <_vfiprintf_r+0x1ea>
 800d234:	0800f994 	.word	0x0800f994
 800d238:	0800f99e 	.word	0x0800f99e
 800d23c:	0800a8e9 	.word	0x0800a8e9
 800d240:	0800cff1 	.word	0x0800cff1
 800d244:	0800f99a 	.word	0x0800f99a

0800d248 <__swbuf_r>:
 800d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24a:	460e      	mov	r6, r1
 800d24c:	4614      	mov	r4, r2
 800d24e:	4605      	mov	r5, r0
 800d250:	b118      	cbz	r0, 800d25a <__swbuf_r+0x12>
 800d252:	6a03      	ldr	r3, [r0, #32]
 800d254:	b90b      	cbnz	r3, 800d25a <__swbuf_r+0x12>
 800d256:	f7fd ff99 	bl	800b18c <__sinit>
 800d25a:	69a3      	ldr	r3, [r4, #24]
 800d25c:	60a3      	str	r3, [r4, #8]
 800d25e:	89a3      	ldrh	r3, [r4, #12]
 800d260:	071a      	lsls	r2, r3, #28
 800d262:	d525      	bpl.n	800d2b0 <__swbuf_r+0x68>
 800d264:	6923      	ldr	r3, [r4, #16]
 800d266:	b31b      	cbz	r3, 800d2b0 <__swbuf_r+0x68>
 800d268:	6823      	ldr	r3, [r4, #0]
 800d26a:	6922      	ldr	r2, [r4, #16]
 800d26c:	1a98      	subs	r0, r3, r2
 800d26e:	6963      	ldr	r3, [r4, #20]
 800d270:	b2f6      	uxtb	r6, r6
 800d272:	4283      	cmp	r3, r0
 800d274:	4637      	mov	r7, r6
 800d276:	dc04      	bgt.n	800d282 <__swbuf_r+0x3a>
 800d278:	4621      	mov	r1, r4
 800d27a:	4628      	mov	r0, r5
 800d27c:	f7ff fdac 	bl	800cdd8 <_fflush_r>
 800d280:	b9e0      	cbnz	r0, 800d2bc <__swbuf_r+0x74>
 800d282:	68a3      	ldr	r3, [r4, #8]
 800d284:	3b01      	subs	r3, #1
 800d286:	60a3      	str	r3, [r4, #8]
 800d288:	6823      	ldr	r3, [r4, #0]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	6022      	str	r2, [r4, #0]
 800d28e:	701e      	strb	r6, [r3, #0]
 800d290:	6962      	ldr	r2, [r4, #20]
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	429a      	cmp	r2, r3
 800d296:	d004      	beq.n	800d2a2 <__swbuf_r+0x5a>
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	07db      	lsls	r3, r3, #31
 800d29c:	d506      	bpl.n	800d2ac <__swbuf_r+0x64>
 800d29e:	2e0a      	cmp	r6, #10
 800d2a0:	d104      	bne.n	800d2ac <__swbuf_r+0x64>
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f7ff fd97 	bl	800cdd8 <_fflush_r>
 800d2aa:	b938      	cbnz	r0, 800d2bc <__swbuf_r+0x74>
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f000 f806 	bl	800d2c4 <__swsetup_r>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d0d5      	beq.n	800d268 <__swbuf_r+0x20>
 800d2bc:	f04f 37ff 	mov.w	r7, #4294967295
 800d2c0:	e7f4      	b.n	800d2ac <__swbuf_r+0x64>
	...

0800d2c4 <__swsetup_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4b2a      	ldr	r3, [pc, #168]	; (800d370 <__swsetup_r+0xac>)
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	6818      	ldr	r0, [r3, #0]
 800d2cc:	460c      	mov	r4, r1
 800d2ce:	b118      	cbz	r0, 800d2d8 <__swsetup_r+0x14>
 800d2d0:	6a03      	ldr	r3, [r0, #32]
 800d2d2:	b90b      	cbnz	r3, 800d2d8 <__swsetup_r+0x14>
 800d2d4:	f7fd ff5a 	bl	800b18c <__sinit>
 800d2d8:	89a3      	ldrh	r3, [r4, #12]
 800d2da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2de:	0718      	lsls	r0, r3, #28
 800d2e0:	d422      	bmi.n	800d328 <__swsetup_r+0x64>
 800d2e2:	06d9      	lsls	r1, r3, #27
 800d2e4:	d407      	bmi.n	800d2f6 <__swsetup_r+0x32>
 800d2e6:	2309      	movs	r3, #9
 800d2e8:	602b      	str	r3, [r5, #0]
 800d2ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2ee:	81a3      	strh	r3, [r4, #12]
 800d2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f4:	e034      	b.n	800d360 <__swsetup_r+0x9c>
 800d2f6:	0758      	lsls	r0, r3, #29
 800d2f8:	d512      	bpl.n	800d320 <__swsetup_r+0x5c>
 800d2fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2fc:	b141      	cbz	r1, 800d310 <__swsetup_r+0x4c>
 800d2fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d302:	4299      	cmp	r1, r3
 800d304:	d002      	beq.n	800d30c <__swsetup_r+0x48>
 800d306:	4628      	mov	r0, r5
 800d308:	f7fe ff0c 	bl	800c124 <_free_r>
 800d30c:	2300      	movs	r3, #0
 800d30e:	6363      	str	r3, [r4, #52]	; 0x34
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d316:	81a3      	strh	r3, [r4, #12]
 800d318:	2300      	movs	r3, #0
 800d31a:	6063      	str	r3, [r4, #4]
 800d31c:	6923      	ldr	r3, [r4, #16]
 800d31e:	6023      	str	r3, [r4, #0]
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	f043 0308 	orr.w	r3, r3, #8
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	b94b      	cbnz	r3, 800d340 <__swsetup_r+0x7c>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d336:	d003      	beq.n	800d340 <__swsetup_r+0x7c>
 800d338:	4621      	mov	r1, r4
 800d33a:	4628      	mov	r0, r5
 800d33c:	f000 f884 	bl	800d448 <__smakebuf_r>
 800d340:	89a0      	ldrh	r0, [r4, #12]
 800d342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d346:	f010 0301 	ands.w	r3, r0, #1
 800d34a:	d00a      	beq.n	800d362 <__swsetup_r+0x9e>
 800d34c:	2300      	movs	r3, #0
 800d34e:	60a3      	str	r3, [r4, #8]
 800d350:	6963      	ldr	r3, [r4, #20]
 800d352:	425b      	negs	r3, r3
 800d354:	61a3      	str	r3, [r4, #24]
 800d356:	6923      	ldr	r3, [r4, #16]
 800d358:	b943      	cbnz	r3, 800d36c <__swsetup_r+0xa8>
 800d35a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d35e:	d1c4      	bne.n	800d2ea <__swsetup_r+0x26>
 800d360:	bd38      	pop	{r3, r4, r5, pc}
 800d362:	0781      	lsls	r1, r0, #30
 800d364:	bf58      	it	pl
 800d366:	6963      	ldrpl	r3, [r4, #20]
 800d368:	60a3      	str	r3, [r4, #8]
 800d36a:	e7f4      	b.n	800d356 <__swsetup_r+0x92>
 800d36c:	2000      	movs	r0, #0
 800d36e:	e7f7      	b.n	800d360 <__swsetup_r+0x9c>
 800d370:	200005d4 	.word	0x200005d4

0800d374 <_raise_r>:
 800d374:	291f      	cmp	r1, #31
 800d376:	b538      	push	{r3, r4, r5, lr}
 800d378:	4604      	mov	r4, r0
 800d37a:	460d      	mov	r5, r1
 800d37c:	d904      	bls.n	800d388 <_raise_r+0x14>
 800d37e:	2316      	movs	r3, #22
 800d380:	6003      	str	r3, [r0, #0]
 800d382:	f04f 30ff 	mov.w	r0, #4294967295
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d38a:	b112      	cbz	r2, 800d392 <_raise_r+0x1e>
 800d38c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d390:	b94b      	cbnz	r3, 800d3a6 <_raise_r+0x32>
 800d392:	4620      	mov	r0, r4
 800d394:	f000 f830 	bl	800d3f8 <_getpid_r>
 800d398:	462a      	mov	r2, r5
 800d39a:	4601      	mov	r1, r0
 800d39c:	4620      	mov	r0, r4
 800d39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3a2:	f000 b817 	b.w	800d3d4 <_kill_r>
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d00a      	beq.n	800d3c0 <_raise_r+0x4c>
 800d3aa:	1c59      	adds	r1, r3, #1
 800d3ac:	d103      	bne.n	800d3b6 <_raise_r+0x42>
 800d3ae:	2316      	movs	r3, #22
 800d3b0:	6003      	str	r3, [r0, #0]
 800d3b2:	2001      	movs	r0, #1
 800d3b4:	e7e7      	b.n	800d386 <_raise_r+0x12>
 800d3b6:	2400      	movs	r4, #0
 800d3b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3bc:	4628      	mov	r0, r5
 800d3be:	4798      	blx	r3
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	e7e0      	b.n	800d386 <_raise_r+0x12>

0800d3c4 <raise>:
 800d3c4:	4b02      	ldr	r3, [pc, #8]	; (800d3d0 <raise+0xc>)
 800d3c6:	4601      	mov	r1, r0
 800d3c8:	6818      	ldr	r0, [r3, #0]
 800d3ca:	f7ff bfd3 	b.w	800d374 <_raise_r>
 800d3ce:	bf00      	nop
 800d3d0:	200005d4 	.word	0x200005d4

0800d3d4 <_kill_r>:
 800d3d4:	b538      	push	{r3, r4, r5, lr}
 800d3d6:	4d07      	ldr	r5, [pc, #28]	; (800d3f4 <_kill_r+0x20>)
 800d3d8:	2300      	movs	r3, #0
 800d3da:	4604      	mov	r4, r0
 800d3dc:	4608      	mov	r0, r1
 800d3de:	4611      	mov	r1, r2
 800d3e0:	602b      	str	r3, [r5, #0]
 800d3e2:	f7f7 fe63 	bl	80050ac <_kill>
 800d3e6:	1c43      	adds	r3, r0, #1
 800d3e8:	d102      	bne.n	800d3f0 <_kill_r+0x1c>
 800d3ea:	682b      	ldr	r3, [r5, #0]
 800d3ec:	b103      	cbz	r3, 800d3f0 <_kill_r+0x1c>
 800d3ee:	6023      	str	r3, [r4, #0]
 800d3f0:	bd38      	pop	{r3, r4, r5, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20001fe8 	.word	0x20001fe8

0800d3f8 <_getpid_r>:
 800d3f8:	f7f7 be56 	b.w	80050a8 <_getpid>

0800d3fc <__swhatbuf_r>:
 800d3fc:	b570      	push	{r4, r5, r6, lr}
 800d3fe:	460c      	mov	r4, r1
 800d400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d404:	2900      	cmp	r1, #0
 800d406:	b096      	sub	sp, #88	; 0x58
 800d408:	4615      	mov	r5, r2
 800d40a:	461e      	mov	r6, r3
 800d40c:	da0d      	bge.n	800d42a <__swhatbuf_r+0x2e>
 800d40e:	89a3      	ldrh	r3, [r4, #12]
 800d410:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d414:	f04f 0100 	mov.w	r1, #0
 800d418:	bf0c      	ite	eq
 800d41a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d41e:	2340      	movne	r3, #64	; 0x40
 800d420:	2000      	movs	r0, #0
 800d422:	6031      	str	r1, [r6, #0]
 800d424:	602b      	str	r3, [r5, #0]
 800d426:	b016      	add	sp, #88	; 0x58
 800d428:	bd70      	pop	{r4, r5, r6, pc}
 800d42a:	466a      	mov	r2, sp
 800d42c:	f000 f848 	bl	800d4c0 <_fstat_r>
 800d430:	2800      	cmp	r0, #0
 800d432:	dbec      	blt.n	800d40e <__swhatbuf_r+0x12>
 800d434:	9901      	ldr	r1, [sp, #4]
 800d436:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d43a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d43e:	4259      	negs	r1, r3
 800d440:	4159      	adcs	r1, r3
 800d442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d446:	e7eb      	b.n	800d420 <__swhatbuf_r+0x24>

0800d448 <__smakebuf_r>:
 800d448:	898b      	ldrh	r3, [r1, #12]
 800d44a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d44c:	079d      	lsls	r5, r3, #30
 800d44e:	4606      	mov	r6, r0
 800d450:	460c      	mov	r4, r1
 800d452:	d507      	bpl.n	800d464 <__smakebuf_r+0x1c>
 800d454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	6123      	str	r3, [r4, #16]
 800d45c:	2301      	movs	r3, #1
 800d45e:	6163      	str	r3, [r4, #20]
 800d460:	b002      	add	sp, #8
 800d462:	bd70      	pop	{r4, r5, r6, pc}
 800d464:	ab01      	add	r3, sp, #4
 800d466:	466a      	mov	r2, sp
 800d468:	f7ff ffc8 	bl	800d3fc <__swhatbuf_r>
 800d46c:	9900      	ldr	r1, [sp, #0]
 800d46e:	4605      	mov	r5, r0
 800d470:	4630      	mov	r0, r6
 800d472:	f7fe fecb 	bl	800c20c <_malloc_r>
 800d476:	b948      	cbnz	r0, 800d48c <__smakebuf_r+0x44>
 800d478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d47c:	059a      	lsls	r2, r3, #22
 800d47e:	d4ef      	bmi.n	800d460 <__smakebuf_r+0x18>
 800d480:	f023 0303 	bic.w	r3, r3, #3
 800d484:	f043 0302 	orr.w	r3, r3, #2
 800d488:	81a3      	strh	r3, [r4, #12]
 800d48a:	e7e3      	b.n	800d454 <__smakebuf_r+0xc>
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	6020      	str	r0, [r4, #0]
 800d490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d494:	81a3      	strh	r3, [r4, #12]
 800d496:	9b00      	ldr	r3, [sp, #0]
 800d498:	6163      	str	r3, [r4, #20]
 800d49a:	9b01      	ldr	r3, [sp, #4]
 800d49c:	6120      	str	r0, [r4, #16]
 800d49e:	b15b      	cbz	r3, 800d4b8 <__smakebuf_r+0x70>
 800d4a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	f000 f81d 	bl	800d4e4 <_isatty_r>
 800d4aa:	b128      	cbz	r0, 800d4b8 <__smakebuf_r+0x70>
 800d4ac:	89a3      	ldrh	r3, [r4, #12]
 800d4ae:	f023 0303 	bic.w	r3, r3, #3
 800d4b2:	f043 0301 	orr.w	r3, r3, #1
 800d4b6:	81a3      	strh	r3, [r4, #12]
 800d4b8:	89a3      	ldrh	r3, [r4, #12]
 800d4ba:	431d      	orrs	r5, r3
 800d4bc:	81a5      	strh	r5, [r4, #12]
 800d4be:	e7cf      	b.n	800d460 <__smakebuf_r+0x18>

0800d4c0 <_fstat_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	4d07      	ldr	r5, [pc, #28]	; (800d4e0 <_fstat_r+0x20>)
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	4608      	mov	r0, r1
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	602b      	str	r3, [r5, #0]
 800d4ce:	f7f7 fe18 	bl	8005102 <_fstat>
 800d4d2:	1c43      	adds	r3, r0, #1
 800d4d4:	d102      	bne.n	800d4dc <_fstat_r+0x1c>
 800d4d6:	682b      	ldr	r3, [r5, #0]
 800d4d8:	b103      	cbz	r3, 800d4dc <_fstat_r+0x1c>
 800d4da:	6023      	str	r3, [r4, #0]
 800d4dc:	bd38      	pop	{r3, r4, r5, pc}
 800d4de:	bf00      	nop
 800d4e0:	20001fe8 	.word	0x20001fe8

0800d4e4 <_isatty_r>:
 800d4e4:	b538      	push	{r3, r4, r5, lr}
 800d4e6:	4d06      	ldr	r5, [pc, #24]	; (800d500 <_isatty_r+0x1c>)
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	4608      	mov	r0, r1
 800d4ee:	602b      	str	r3, [r5, #0]
 800d4f0:	f7f7 fe0c 	bl	800510c <_isatty>
 800d4f4:	1c43      	adds	r3, r0, #1
 800d4f6:	d102      	bne.n	800d4fe <_isatty_r+0x1a>
 800d4f8:	682b      	ldr	r3, [r5, #0]
 800d4fa:	b103      	cbz	r3, 800d4fe <_isatty_r+0x1a>
 800d4fc:	6023      	str	r3, [r4, #0]
 800d4fe:	bd38      	pop	{r3, r4, r5, pc}
 800d500:	20001fe8 	.word	0x20001fe8

0800d504 <fmod>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	ed2d 8b02 	vpush	{d8}
 800d50a:	ec57 6b10 	vmov	r6, r7, d0
 800d50e:	ec55 4b11 	vmov	r4, r5, d1
 800d512:	f000 fba3 	bl	800dc5c <__ieee754_fmod>
 800d516:	4622      	mov	r2, r4
 800d518:	462b      	mov	r3, r5
 800d51a:	4630      	mov	r0, r6
 800d51c:	4639      	mov	r1, r7
 800d51e:	eeb0 8a40 	vmov.f32	s16, s0
 800d522:	eef0 8a60 	vmov.f32	s17, s1
 800d526:	f7f3 fb29 	bl	8000b7c <__aeabi_dcmpun>
 800d52a:	b990      	cbnz	r0, 800d552 <fmod+0x4e>
 800d52c:	2200      	movs	r2, #0
 800d52e:	2300      	movs	r3, #0
 800d530:	4620      	mov	r0, r4
 800d532:	4629      	mov	r1, r5
 800d534:	f7f3 faf0 	bl	8000b18 <__aeabi_dcmpeq>
 800d538:	b158      	cbz	r0, 800d552 <fmod+0x4e>
 800d53a:	f7fd ff3b 	bl	800b3b4 <__errno>
 800d53e:	2321      	movs	r3, #33	; 0x21
 800d540:	6003      	str	r3, [r0, #0]
 800d542:	2200      	movs	r2, #0
 800d544:	2300      	movs	r3, #0
 800d546:	4610      	mov	r0, r2
 800d548:	4619      	mov	r1, r3
 800d54a:	f7f3 f9a7 	bl	800089c <__aeabi_ddiv>
 800d54e:	ec41 0b18 	vmov	d8, r0, r1
 800d552:	eeb0 0a48 	vmov.f32	s0, s16
 800d556:	eef0 0a68 	vmov.f32	s1, s17
 800d55a:	ecbd 8b02 	vpop	{d8}
 800d55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d560 <sqrt>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	ed2d 8b02 	vpush	{d8}
 800d566:	ec55 4b10 	vmov	r4, r5, d0
 800d56a:	f000 f917 	bl	800d79c <__ieee754_sqrt>
 800d56e:	4622      	mov	r2, r4
 800d570:	462b      	mov	r3, r5
 800d572:	4620      	mov	r0, r4
 800d574:	4629      	mov	r1, r5
 800d576:	eeb0 8a40 	vmov.f32	s16, s0
 800d57a:	eef0 8a60 	vmov.f32	s17, s1
 800d57e:	f7f3 fafd 	bl	8000b7c <__aeabi_dcmpun>
 800d582:	b990      	cbnz	r0, 800d5aa <sqrt+0x4a>
 800d584:	2200      	movs	r2, #0
 800d586:	2300      	movs	r3, #0
 800d588:	4620      	mov	r0, r4
 800d58a:	4629      	mov	r1, r5
 800d58c:	f7f3 face 	bl	8000b2c <__aeabi_dcmplt>
 800d590:	b158      	cbz	r0, 800d5aa <sqrt+0x4a>
 800d592:	f7fd ff0f 	bl	800b3b4 <__errno>
 800d596:	2321      	movs	r3, #33	; 0x21
 800d598:	6003      	str	r3, [r0, #0]
 800d59a:	2200      	movs	r2, #0
 800d59c:	2300      	movs	r3, #0
 800d59e:	4610      	mov	r0, r2
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f7f3 f97b 	bl	800089c <__aeabi_ddiv>
 800d5a6:	ec41 0b18 	vmov	d8, r0, r1
 800d5aa:	eeb0 0a48 	vmov.f32	s0, s16
 800d5ae:	eef0 0a68 	vmov.f32	s1, s17
 800d5b2:	ecbd 8b02 	vpop	{d8}
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}

0800d5b8 <cos>:
 800d5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5ba:	ec53 2b10 	vmov	r2, r3, d0
 800d5be:	4826      	ldr	r0, [pc, #152]	; (800d658 <cos+0xa0>)
 800d5c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d5c4:	4281      	cmp	r1, r0
 800d5c6:	dc06      	bgt.n	800d5d6 <cos+0x1e>
 800d5c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d650 <cos+0x98>
 800d5cc:	b005      	add	sp, #20
 800d5ce:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d2:	f000 b9bd 	b.w	800d950 <__kernel_cos>
 800d5d6:	4821      	ldr	r0, [pc, #132]	; (800d65c <cos+0xa4>)
 800d5d8:	4281      	cmp	r1, r0
 800d5da:	dd09      	ble.n	800d5f0 <cos+0x38>
 800d5dc:	ee10 0a10 	vmov	r0, s0
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	f7f2 fe79 	bl	80002d8 <__aeabi_dsub>
 800d5e6:	ec41 0b10 	vmov	d0, r0, r1
 800d5ea:	b005      	add	sp, #20
 800d5ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5f0:	4668      	mov	r0, sp
 800d5f2:	f000 fc41 	bl	800de78 <__ieee754_rem_pio2>
 800d5f6:	f000 0003 	and.w	r0, r0, #3
 800d5fa:	2801      	cmp	r0, #1
 800d5fc:	d00b      	beq.n	800d616 <cos+0x5e>
 800d5fe:	2802      	cmp	r0, #2
 800d600:	d016      	beq.n	800d630 <cos+0x78>
 800d602:	b9e0      	cbnz	r0, 800d63e <cos+0x86>
 800d604:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d608:	ed9d 0b00 	vldr	d0, [sp]
 800d60c:	f000 f9a0 	bl	800d950 <__kernel_cos>
 800d610:	ec51 0b10 	vmov	r0, r1, d0
 800d614:	e7e7      	b.n	800d5e6 <cos+0x2e>
 800d616:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d61a:	ed9d 0b00 	vldr	d0, [sp]
 800d61e:	f000 fa5f 	bl	800dae0 <__kernel_sin>
 800d622:	ec53 2b10 	vmov	r2, r3, d0
 800d626:	ee10 0a10 	vmov	r0, s0
 800d62a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d62e:	e7da      	b.n	800d5e6 <cos+0x2e>
 800d630:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d634:	ed9d 0b00 	vldr	d0, [sp]
 800d638:	f000 f98a 	bl	800d950 <__kernel_cos>
 800d63c:	e7f1      	b.n	800d622 <cos+0x6a>
 800d63e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d642:	ed9d 0b00 	vldr	d0, [sp]
 800d646:	2001      	movs	r0, #1
 800d648:	f000 fa4a 	bl	800dae0 <__kernel_sin>
 800d64c:	e7e0      	b.n	800d610 <cos+0x58>
 800d64e:	bf00      	nop
	...
 800d658:	3fe921fb 	.word	0x3fe921fb
 800d65c:	7fefffff 	.word	0x7fefffff

0800d660 <sin>:
 800d660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d662:	ec53 2b10 	vmov	r2, r3, d0
 800d666:	4828      	ldr	r0, [pc, #160]	; (800d708 <sin+0xa8>)
 800d668:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d66c:	4281      	cmp	r1, r0
 800d66e:	dc07      	bgt.n	800d680 <sin+0x20>
 800d670:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d700 <sin+0xa0>
 800d674:	2000      	movs	r0, #0
 800d676:	b005      	add	sp, #20
 800d678:	f85d eb04 	ldr.w	lr, [sp], #4
 800d67c:	f000 ba30 	b.w	800dae0 <__kernel_sin>
 800d680:	4822      	ldr	r0, [pc, #136]	; (800d70c <sin+0xac>)
 800d682:	4281      	cmp	r1, r0
 800d684:	dd09      	ble.n	800d69a <sin+0x3a>
 800d686:	ee10 0a10 	vmov	r0, s0
 800d68a:	4619      	mov	r1, r3
 800d68c:	f7f2 fe24 	bl	80002d8 <__aeabi_dsub>
 800d690:	ec41 0b10 	vmov	d0, r0, r1
 800d694:	b005      	add	sp, #20
 800d696:	f85d fb04 	ldr.w	pc, [sp], #4
 800d69a:	4668      	mov	r0, sp
 800d69c:	f000 fbec 	bl	800de78 <__ieee754_rem_pio2>
 800d6a0:	f000 0003 	and.w	r0, r0, #3
 800d6a4:	2801      	cmp	r0, #1
 800d6a6:	d00c      	beq.n	800d6c2 <sin+0x62>
 800d6a8:	2802      	cmp	r0, #2
 800d6aa:	d011      	beq.n	800d6d0 <sin+0x70>
 800d6ac:	b9f0      	cbnz	r0, 800d6ec <sin+0x8c>
 800d6ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6b2:	ed9d 0b00 	vldr	d0, [sp]
 800d6b6:	2001      	movs	r0, #1
 800d6b8:	f000 fa12 	bl	800dae0 <__kernel_sin>
 800d6bc:	ec51 0b10 	vmov	r0, r1, d0
 800d6c0:	e7e6      	b.n	800d690 <sin+0x30>
 800d6c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6c6:	ed9d 0b00 	vldr	d0, [sp]
 800d6ca:	f000 f941 	bl	800d950 <__kernel_cos>
 800d6ce:	e7f5      	b.n	800d6bc <sin+0x5c>
 800d6d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6d4:	ed9d 0b00 	vldr	d0, [sp]
 800d6d8:	2001      	movs	r0, #1
 800d6da:	f000 fa01 	bl	800dae0 <__kernel_sin>
 800d6de:	ec53 2b10 	vmov	r2, r3, d0
 800d6e2:	ee10 0a10 	vmov	r0, s0
 800d6e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d6ea:	e7d1      	b.n	800d690 <sin+0x30>
 800d6ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6f0:	ed9d 0b00 	vldr	d0, [sp]
 800d6f4:	f000 f92c 	bl	800d950 <__kernel_cos>
 800d6f8:	e7f1      	b.n	800d6de <sin+0x7e>
 800d6fa:	bf00      	nop
 800d6fc:	f3af 8000 	nop.w
	...
 800d708:	3fe921fb 	.word	0x3fe921fb
 800d70c:	7fefffff 	.word	0x7fefffff

0800d710 <sinf>:
 800d710:	ee10 3a10 	vmov	r3, s0
 800d714:	b507      	push	{r0, r1, r2, lr}
 800d716:	4a1f      	ldr	r2, [pc, #124]	; (800d794 <sinf+0x84>)
 800d718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d71c:	4293      	cmp	r3, r2
 800d71e:	dc07      	bgt.n	800d730 <sinf+0x20>
 800d720:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800d798 <sinf+0x88>
 800d724:	2000      	movs	r0, #0
 800d726:	b003      	add	sp, #12
 800d728:	f85d eb04 	ldr.w	lr, [sp], #4
 800d72c:	f000 be12 	b.w	800e354 <__kernel_sinf>
 800d730:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d734:	db04      	blt.n	800d740 <sinf+0x30>
 800d736:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d73a:	b003      	add	sp, #12
 800d73c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d740:	4668      	mov	r0, sp
 800d742:	f000 fe4f 	bl	800e3e4 <__ieee754_rem_pio2f>
 800d746:	f000 0003 	and.w	r0, r0, #3
 800d74a:	2801      	cmp	r0, #1
 800d74c:	d00a      	beq.n	800d764 <sinf+0x54>
 800d74e:	2802      	cmp	r0, #2
 800d750:	d00f      	beq.n	800d772 <sinf+0x62>
 800d752:	b9c0      	cbnz	r0, 800d786 <sinf+0x76>
 800d754:	eddd 0a01 	vldr	s1, [sp, #4]
 800d758:	ed9d 0a00 	vldr	s0, [sp]
 800d75c:	2001      	movs	r0, #1
 800d75e:	f000 fdf9 	bl	800e354 <__kernel_sinf>
 800d762:	e7ea      	b.n	800d73a <sinf+0x2a>
 800d764:	eddd 0a01 	vldr	s1, [sp, #4]
 800d768:	ed9d 0a00 	vldr	s0, [sp]
 800d76c:	f000 fd94 	bl	800e298 <__kernel_cosf>
 800d770:	e7e3      	b.n	800d73a <sinf+0x2a>
 800d772:	eddd 0a01 	vldr	s1, [sp, #4]
 800d776:	ed9d 0a00 	vldr	s0, [sp]
 800d77a:	2001      	movs	r0, #1
 800d77c:	f000 fdea 	bl	800e354 <__kernel_sinf>
 800d780:	eeb1 0a40 	vneg.f32	s0, s0
 800d784:	e7d9      	b.n	800d73a <sinf+0x2a>
 800d786:	eddd 0a01 	vldr	s1, [sp, #4]
 800d78a:	ed9d 0a00 	vldr	s0, [sp]
 800d78e:	f000 fd83 	bl	800e298 <__kernel_cosf>
 800d792:	e7f5      	b.n	800d780 <sinf+0x70>
 800d794:	3f490fd8 	.word	0x3f490fd8
 800d798:	00000000 	.word	0x00000000

0800d79c <__ieee754_sqrt>:
 800d79c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a0:	ec55 4b10 	vmov	r4, r5, d0
 800d7a4:	4e67      	ldr	r6, [pc, #412]	; (800d944 <__ieee754_sqrt+0x1a8>)
 800d7a6:	43ae      	bics	r6, r5
 800d7a8:	ee10 0a10 	vmov	r0, s0
 800d7ac:	ee10 2a10 	vmov	r2, s0
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	462b      	mov	r3, r5
 800d7b4:	d10d      	bne.n	800d7d2 <__ieee754_sqrt+0x36>
 800d7b6:	f7f2 ff47 	bl	8000648 <__aeabi_dmul>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7f2 fd8b 	bl	80002dc <__adddf3>
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	460d      	mov	r5, r1
 800d7ca:	ec45 4b10 	vmov	d0, r4, r5
 800d7ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d2:	2d00      	cmp	r5, #0
 800d7d4:	dc0b      	bgt.n	800d7ee <__ieee754_sqrt+0x52>
 800d7d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d7da:	4326      	orrs	r6, r4
 800d7dc:	d0f5      	beq.n	800d7ca <__ieee754_sqrt+0x2e>
 800d7de:	b135      	cbz	r5, 800d7ee <__ieee754_sqrt+0x52>
 800d7e0:	f7f2 fd7a 	bl	80002d8 <__aeabi_dsub>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	f7f3 f858 	bl	800089c <__aeabi_ddiv>
 800d7ec:	e7eb      	b.n	800d7c6 <__ieee754_sqrt+0x2a>
 800d7ee:	1509      	asrs	r1, r1, #20
 800d7f0:	f000 808d 	beq.w	800d90e <__ieee754_sqrt+0x172>
 800d7f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7f8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d7fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d800:	07c9      	lsls	r1, r1, #31
 800d802:	bf5c      	itt	pl
 800d804:	005b      	lslpl	r3, r3, #1
 800d806:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d80a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d80e:	bf58      	it	pl
 800d810:	0052      	lslpl	r2, r2, #1
 800d812:	2500      	movs	r5, #0
 800d814:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d818:	1076      	asrs	r6, r6, #1
 800d81a:	0052      	lsls	r2, r2, #1
 800d81c:	f04f 0e16 	mov.w	lr, #22
 800d820:	46ac      	mov	ip, r5
 800d822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d826:	eb0c 0001 	add.w	r0, ip, r1
 800d82a:	4298      	cmp	r0, r3
 800d82c:	bfde      	ittt	le
 800d82e:	1a1b      	suble	r3, r3, r0
 800d830:	eb00 0c01 	addle.w	ip, r0, r1
 800d834:	186d      	addle	r5, r5, r1
 800d836:	005b      	lsls	r3, r3, #1
 800d838:	f1be 0e01 	subs.w	lr, lr, #1
 800d83c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d840:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d844:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d848:	d1ed      	bne.n	800d826 <__ieee754_sqrt+0x8a>
 800d84a:	4674      	mov	r4, lr
 800d84c:	2720      	movs	r7, #32
 800d84e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d852:	4563      	cmp	r3, ip
 800d854:	eb01 000e 	add.w	r0, r1, lr
 800d858:	dc02      	bgt.n	800d860 <__ieee754_sqrt+0xc4>
 800d85a:	d113      	bne.n	800d884 <__ieee754_sqrt+0xe8>
 800d85c:	4290      	cmp	r0, r2
 800d85e:	d811      	bhi.n	800d884 <__ieee754_sqrt+0xe8>
 800d860:	2800      	cmp	r0, #0
 800d862:	eb00 0e01 	add.w	lr, r0, r1
 800d866:	da57      	bge.n	800d918 <__ieee754_sqrt+0x17c>
 800d868:	f1be 0f00 	cmp.w	lr, #0
 800d86c:	db54      	blt.n	800d918 <__ieee754_sqrt+0x17c>
 800d86e:	f10c 0801 	add.w	r8, ip, #1
 800d872:	eba3 030c 	sub.w	r3, r3, ip
 800d876:	4290      	cmp	r0, r2
 800d878:	bf88      	it	hi
 800d87a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d87e:	1a12      	subs	r2, r2, r0
 800d880:	440c      	add	r4, r1
 800d882:	46c4      	mov	ip, r8
 800d884:	005b      	lsls	r3, r3, #1
 800d886:	3f01      	subs	r7, #1
 800d888:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d88c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d890:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d894:	d1dd      	bne.n	800d852 <__ieee754_sqrt+0xb6>
 800d896:	4313      	orrs	r3, r2
 800d898:	d01b      	beq.n	800d8d2 <__ieee754_sqrt+0x136>
 800d89a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d948 <__ieee754_sqrt+0x1ac>
 800d89e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d94c <__ieee754_sqrt+0x1b0>
 800d8a2:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8a6:	e9db 2300 	ldrd	r2, r3, [fp]
 800d8aa:	f7f2 fd15 	bl	80002d8 <__aeabi_dsub>
 800d8ae:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	4640      	mov	r0, r8
 800d8b8:	4649      	mov	r1, r9
 800d8ba:	f7f3 f941 	bl	8000b40 <__aeabi_dcmple>
 800d8be:	b140      	cbz	r0, 800d8d2 <__ieee754_sqrt+0x136>
 800d8c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d8c4:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8c8:	e9db 2300 	ldrd	r2, r3, [fp]
 800d8cc:	d126      	bne.n	800d91c <__ieee754_sqrt+0x180>
 800d8ce:	3501      	adds	r5, #1
 800d8d0:	463c      	mov	r4, r7
 800d8d2:	106a      	asrs	r2, r5, #1
 800d8d4:	0863      	lsrs	r3, r4, #1
 800d8d6:	07e9      	lsls	r1, r5, #31
 800d8d8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d8dc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d8e0:	bf48      	it	mi
 800d8e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d8e6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d8ea:	461c      	mov	r4, r3
 800d8ec:	e76d      	b.n	800d7ca <__ieee754_sqrt+0x2e>
 800d8ee:	0ad3      	lsrs	r3, r2, #11
 800d8f0:	3815      	subs	r0, #21
 800d8f2:	0552      	lsls	r2, r2, #21
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d0fa      	beq.n	800d8ee <__ieee754_sqrt+0x152>
 800d8f8:	02dc      	lsls	r4, r3, #11
 800d8fa:	d50a      	bpl.n	800d912 <__ieee754_sqrt+0x176>
 800d8fc:	f1c1 0420 	rsb	r4, r1, #32
 800d900:	fa22 f404 	lsr.w	r4, r2, r4
 800d904:	1e4d      	subs	r5, r1, #1
 800d906:	408a      	lsls	r2, r1
 800d908:	4323      	orrs	r3, r4
 800d90a:	1b41      	subs	r1, r0, r5
 800d90c:	e772      	b.n	800d7f4 <__ieee754_sqrt+0x58>
 800d90e:	4608      	mov	r0, r1
 800d910:	e7f0      	b.n	800d8f4 <__ieee754_sqrt+0x158>
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	3101      	adds	r1, #1
 800d916:	e7ef      	b.n	800d8f8 <__ieee754_sqrt+0x15c>
 800d918:	46e0      	mov	r8, ip
 800d91a:	e7aa      	b.n	800d872 <__ieee754_sqrt+0xd6>
 800d91c:	f7f2 fcde 	bl	80002dc <__adddf3>
 800d920:	e9da 8900 	ldrd	r8, r9, [sl]
 800d924:	4602      	mov	r2, r0
 800d926:	460b      	mov	r3, r1
 800d928:	4640      	mov	r0, r8
 800d92a:	4649      	mov	r1, r9
 800d92c:	f7f3 f8fe 	bl	8000b2c <__aeabi_dcmplt>
 800d930:	b120      	cbz	r0, 800d93c <__ieee754_sqrt+0x1a0>
 800d932:	1ca0      	adds	r0, r4, #2
 800d934:	bf08      	it	eq
 800d936:	3501      	addeq	r5, #1
 800d938:	3402      	adds	r4, #2
 800d93a:	e7ca      	b.n	800d8d2 <__ieee754_sqrt+0x136>
 800d93c:	3401      	adds	r4, #1
 800d93e:	f024 0401 	bic.w	r4, r4, #1
 800d942:	e7c6      	b.n	800d8d2 <__ieee754_sqrt+0x136>
 800d944:	7ff00000 	.word	0x7ff00000
 800d948:	20000748 	.word	0x20000748
 800d94c:	20000750 	.word	0x20000750

0800d950 <__kernel_cos>:
 800d950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	ec57 6b10 	vmov	r6, r7, d0
 800d958:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d95c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d960:	ed8d 1b00 	vstr	d1, [sp]
 800d964:	da07      	bge.n	800d976 <__kernel_cos+0x26>
 800d966:	ee10 0a10 	vmov	r0, s0
 800d96a:	4639      	mov	r1, r7
 800d96c:	f7f3 f91c 	bl	8000ba8 <__aeabi_d2iz>
 800d970:	2800      	cmp	r0, #0
 800d972:	f000 8088 	beq.w	800da86 <__kernel_cos+0x136>
 800d976:	4632      	mov	r2, r6
 800d978:	463b      	mov	r3, r7
 800d97a:	4630      	mov	r0, r6
 800d97c:	4639      	mov	r1, r7
 800d97e:	f7f2 fe63 	bl	8000648 <__aeabi_dmul>
 800d982:	4b51      	ldr	r3, [pc, #324]	; (800dac8 <__kernel_cos+0x178>)
 800d984:	2200      	movs	r2, #0
 800d986:	4604      	mov	r4, r0
 800d988:	460d      	mov	r5, r1
 800d98a:	f7f2 fe5d 	bl	8000648 <__aeabi_dmul>
 800d98e:	a340      	add	r3, pc, #256	; (adr r3, 800da90 <__kernel_cos+0x140>)
 800d990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d994:	4682      	mov	sl, r0
 800d996:	468b      	mov	fp, r1
 800d998:	4620      	mov	r0, r4
 800d99a:	4629      	mov	r1, r5
 800d99c:	f7f2 fe54 	bl	8000648 <__aeabi_dmul>
 800d9a0:	a33d      	add	r3, pc, #244	; (adr r3, 800da98 <__kernel_cos+0x148>)
 800d9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a6:	f7f2 fc99 	bl	80002dc <__adddf3>
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	462b      	mov	r3, r5
 800d9ae:	f7f2 fe4b 	bl	8000648 <__aeabi_dmul>
 800d9b2:	a33b      	add	r3, pc, #236	; (adr r3, 800daa0 <__kernel_cos+0x150>)
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	f7f2 fc8e 	bl	80002d8 <__aeabi_dsub>
 800d9bc:	4622      	mov	r2, r4
 800d9be:	462b      	mov	r3, r5
 800d9c0:	f7f2 fe42 	bl	8000648 <__aeabi_dmul>
 800d9c4:	a338      	add	r3, pc, #224	; (adr r3, 800daa8 <__kernel_cos+0x158>)
 800d9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ca:	f7f2 fc87 	bl	80002dc <__adddf3>
 800d9ce:	4622      	mov	r2, r4
 800d9d0:	462b      	mov	r3, r5
 800d9d2:	f7f2 fe39 	bl	8000648 <__aeabi_dmul>
 800d9d6:	a336      	add	r3, pc, #216	; (adr r3, 800dab0 <__kernel_cos+0x160>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f2 fc7c 	bl	80002d8 <__aeabi_dsub>
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	462b      	mov	r3, r5
 800d9e4:	f7f2 fe30 	bl	8000648 <__aeabi_dmul>
 800d9e8:	a333      	add	r3, pc, #204	; (adr r3, 800dab8 <__kernel_cos+0x168>)
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	f7f2 fc75 	bl	80002dc <__adddf3>
 800d9f2:	4622      	mov	r2, r4
 800d9f4:	462b      	mov	r3, r5
 800d9f6:	f7f2 fe27 	bl	8000648 <__aeabi_dmul>
 800d9fa:	4622      	mov	r2, r4
 800d9fc:	462b      	mov	r3, r5
 800d9fe:	f7f2 fe23 	bl	8000648 <__aeabi_dmul>
 800da02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da06:	4604      	mov	r4, r0
 800da08:	460d      	mov	r5, r1
 800da0a:	4630      	mov	r0, r6
 800da0c:	4639      	mov	r1, r7
 800da0e:	f7f2 fe1b 	bl	8000648 <__aeabi_dmul>
 800da12:	460b      	mov	r3, r1
 800da14:	4602      	mov	r2, r0
 800da16:	4629      	mov	r1, r5
 800da18:	4620      	mov	r0, r4
 800da1a:	f7f2 fc5d 	bl	80002d8 <__aeabi_dsub>
 800da1e:	4b2b      	ldr	r3, [pc, #172]	; (800dacc <__kernel_cos+0x17c>)
 800da20:	4598      	cmp	r8, r3
 800da22:	4606      	mov	r6, r0
 800da24:	460f      	mov	r7, r1
 800da26:	dc10      	bgt.n	800da4a <__kernel_cos+0xfa>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	4650      	mov	r0, sl
 800da2e:	4659      	mov	r1, fp
 800da30:	f7f2 fc52 	bl	80002d8 <__aeabi_dsub>
 800da34:	460b      	mov	r3, r1
 800da36:	4926      	ldr	r1, [pc, #152]	; (800dad0 <__kernel_cos+0x180>)
 800da38:	4602      	mov	r2, r0
 800da3a:	2000      	movs	r0, #0
 800da3c:	f7f2 fc4c 	bl	80002d8 <__aeabi_dsub>
 800da40:	ec41 0b10 	vmov	d0, r0, r1
 800da44:	b003      	add	sp, #12
 800da46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da4a:	4b22      	ldr	r3, [pc, #136]	; (800dad4 <__kernel_cos+0x184>)
 800da4c:	4920      	ldr	r1, [pc, #128]	; (800dad0 <__kernel_cos+0x180>)
 800da4e:	4598      	cmp	r8, r3
 800da50:	bfcc      	ite	gt
 800da52:	4d21      	ldrgt	r5, [pc, #132]	; (800dad8 <__kernel_cos+0x188>)
 800da54:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800da58:	2400      	movs	r4, #0
 800da5a:	4622      	mov	r2, r4
 800da5c:	462b      	mov	r3, r5
 800da5e:	2000      	movs	r0, #0
 800da60:	f7f2 fc3a 	bl	80002d8 <__aeabi_dsub>
 800da64:	4622      	mov	r2, r4
 800da66:	4680      	mov	r8, r0
 800da68:	4689      	mov	r9, r1
 800da6a:	462b      	mov	r3, r5
 800da6c:	4650      	mov	r0, sl
 800da6e:	4659      	mov	r1, fp
 800da70:	f7f2 fc32 	bl	80002d8 <__aeabi_dsub>
 800da74:	4632      	mov	r2, r6
 800da76:	463b      	mov	r3, r7
 800da78:	f7f2 fc2e 	bl	80002d8 <__aeabi_dsub>
 800da7c:	4602      	mov	r2, r0
 800da7e:	460b      	mov	r3, r1
 800da80:	4640      	mov	r0, r8
 800da82:	4649      	mov	r1, r9
 800da84:	e7da      	b.n	800da3c <__kernel_cos+0xec>
 800da86:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dac0 <__kernel_cos+0x170>
 800da8a:	e7db      	b.n	800da44 <__kernel_cos+0xf4>
 800da8c:	f3af 8000 	nop.w
 800da90:	be8838d4 	.word	0xbe8838d4
 800da94:	bda8fae9 	.word	0xbda8fae9
 800da98:	bdb4b1c4 	.word	0xbdb4b1c4
 800da9c:	3e21ee9e 	.word	0x3e21ee9e
 800daa0:	809c52ad 	.word	0x809c52ad
 800daa4:	3e927e4f 	.word	0x3e927e4f
 800daa8:	19cb1590 	.word	0x19cb1590
 800daac:	3efa01a0 	.word	0x3efa01a0
 800dab0:	16c15177 	.word	0x16c15177
 800dab4:	3f56c16c 	.word	0x3f56c16c
 800dab8:	5555554c 	.word	0x5555554c
 800dabc:	3fa55555 	.word	0x3fa55555
 800dac0:	00000000 	.word	0x00000000
 800dac4:	3ff00000 	.word	0x3ff00000
 800dac8:	3fe00000 	.word	0x3fe00000
 800dacc:	3fd33332 	.word	0x3fd33332
 800dad0:	3ff00000 	.word	0x3ff00000
 800dad4:	3fe90000 	.word	0x3fe90000
 800dad8:	3fd20000 	.word	0x3fd20000
 800dadc:	00000000 	.word	0x00000000

0800dae0 <__kernel_sin>:
 800dae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae4:	ed2d 8b04 	vpush	{d8-d9}
 800dae8:	eeb0 8a41 	vmov.f32	s16, s2
 800daec:	eef0 8a61 	vmov.f32	s17, s3
 800daf0:	ec55 4b10 	vmov	r4, r5, d0
 800daf4:	b083      	sub	sp, #12
 800daf6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dafa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dafe:	9001      	str	r0, [sp, #4]
 800db00:	da06      	bge.n	800db10 <__kernel_sin+0x30>
 800db02:	ee10 0a10 	vmov	r0, s0
 800db06:	4629      	mov	r1, r5
 800db08:	f7f3 f84e 	bl	8000ba8 <__aeabi_d2iz>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d051      	beq.n	800dbb4 <__kernel_sin+0xd4>
 800db10:	4622      	mov	r2, r4
 800db12:	462b      	mov	r3, r5
 800db14:	4620      	mov	r0, r4
 800db16:	4629      	mov	r1, r5
 800db18:	f7f2 fd96 	bl	8000648 <__aeabi_dmul>
 800db1c:	4682      	mov	sl, r0
 800db1e:	468b      	mov	fp, r1
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4620      	mov	r0, r4
 800db26:	4629      	mov	r1, r5
 800db28:	f7f2 fd8e 	bl	8000648 <__aeabi_dmul>
 800db2c:	a341      	add	r3, pc, #260	; (adr r3, 800dc34 <__kernel_sin+0x154>)
 800db2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db32:	4680      	mov	r8, r0
 800db34:	4689      	mov	r9, r1
 800db36:	4650      	mov	r0, sl
 800db38:	4659      	mov	r1, fp
 800db3a:	f7f2 fd85 	bl	8000648 <__aeabi_dmul>
 800db3e:	a33f      	add	r3, pc, #252	; (adr r3, 800dc3c <__kernel_sin+0x15c>)
 800db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db44:	f7f2 fbc8 	bl	80002d8 <__aeabi_dsub>
 800db48:	4652      	mov	r2, sl
 800db4a:	465b      	mov	r3, fp
 800db4c:	f7f2 fd7c 	bl	8000648 <__aeabi_dmul>
 800db50:	a33c      	add	r3, pc, #240	; (adr r3, 800dc44 <__kernel_sin+0x164>)
 800db52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db56:	f7f2 fbc1 	bl	80002dc <__adddf3>
 800db5a:	4652      	mov	r2, sl
 800db5c:	465b      	mov	r3, fp
 800db5e:	f7f2 fd73 	bl	8000648 <__aeabi_dmul>
 800db62:	a33a      	add	r3, pc, #232	; (adr r3, 800dc4c <__kernel_sin+0x16c>)
 800db64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db68:	f7f2 fbb6 	bl	80002d8 <__aeabi_dsub>
 800db6c:	4652      	mov	r2, sl
 800db6e:	465b      	mov	r3, fp
 800db70:	f7f2 fd6a 	bl	8000648 <__aeabi_dmul>
 800db74:	a337      	add	r3, pc, #220	; (adr r3, 800dc54 <__kernel_sin+0x174>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	f7f2 fbaf 	bl	80002dc <__adddf3>
 800db7e:	9b01      	ldr	r3, [sp, #4]
 800db80:	4606      	mov	r6, r0
 800db82:	460f      	mov	r7, r1
 800db84:	b9eb      	cbnz	r3, 800dbc2 <__kernel_sin+0xe2>
 800db86:	4602      	mov	r2, r0
 800db88:	460b      	mov	r3, r1
 800db8a:	4650      	mov	r0, sl
 800db8c:	4659      	mov	r1, fp
 800db8e:	f7f2 fd5b 	bl	8000648 <__aeabi_dmul>
 800db92:	a325      	add	r3, pc, #148	; (adr r3, 800dc28 <__kernel_sin+0x148>)
 800db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db98:	f7f2 fb9e 	bl	80002d8 <__aeabi_dsub>
 800db9c:	4642      	mov	r2, r8
 800db9e:	464b      	mov	r3, r9
 800dba0:	f7f2 fd52 	bl	8000648 <__aeabi_dmul>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	4620      	mov	r0, r4
 800dbaa:	4629      	mov	r1, r5
 800dbac:	f7f2 fb96 	bl	80002dc <__adddf3>
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	ec45 4b10 	vmov	d0, r4, r5
 800dbb8:	b003      	add	sp, #12
 800dbba:	ecbd 8b04 	vpop	{d8-d9}
 800dbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc2:	4b1b      	ldr	r3, [pc, #108]	; (800dc30 <__kernel_sin+0x150>)
 800dbc4:	ec51 0b18 	vmov	r0, r1, d8
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f7f2 fd3d 	bl	8000648 <__aeabi_dmul>
 800dbce:	4632      	mov	r2, r6
 800dbd0:	ec41 0b19 	vmov	d9, r0, r1
 800dbd4:	463b      	mov	r3, r7
 800dbd6:	4640      	mov	r0, r8
 800dbd8:	4649      	mov	r1, r9
 800dbda:	f7f2 fd35 	bl	8000648 <__aeabi_dmul>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	ec51 0b19 	vmov	r0, r1, d9
 800dbe6:	f7f2 fb77 	bl	80002d8 <__aeabi_dsub>
 800dbea:	4652      	mov	r2, sl
 800dbec:	465b      	mov	r3, fp
 800dbee:	f7f2 fd2b 	bl	8000648 <__aeabi_dmul>
 800dbf2:	ec53 2b18 	vmov	r2, r3, d8
 800dbf6:	f7f2 fb6f 	bl	80002d8 <__aeabi_dsub>
 800dbfa:	a30b      	add	r3, pc, #44	; (adr r3, 800dc28 <__kernel_sin+0x148>)
 800dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc00:	4606      	mov	r6, r0
 800dc02:	460f      	mov	r7, r1
 800dc04:	4640      	mov	r0, r8
 800dc06:	4649      	mov	r1, r9
 800dc08:	f7f2 fd1e 	bl	8000648 <__aeabi_dmul>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4630      	mov	r0, r6
 800dc12:	4639      	mov	r1, r7
 800dc14:	f7f2 fb62 	bl	80002dc <__adddf3>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	4629      	mov	r1, r5
 800dc20:	f7f2 fb5a 	bl	80002d8 <__aeabi_dsub>
 800dc24:	e7c4      	b.n	800dbb0 <__kernel_sin+0xd0>
 800dc26:	bf00      	nop
 800dc28:	55555549 	.word	0x55555549
 800dc2c:	3fc55555 	.word	0x3fc55555
 800dc30:	3fe00000 	.word	0x3fe00000
 800dc34:	5acfd57c 	.word	0x5acfd57c
 800dc38:	3de5d93a 	.word	0x3de5d93a
 800dc3c:	8a2b9ceb 	.word	0x8a2b9ceb
 800dc40:	3e5ae5e6 	.word	0x3e5ae5e6
 800dc44:	57b1fe7d 	.word	0x57b1fe7d
 800dc48:	3ec71de3 	.word	0x3ec71de3
 800dc4c:	19c161d5 	.word	0x19c161d5
 800dc50:	3f2a01a0 	.word	0x3f2a01a0
 800dc54:	1110f8a6 	.word	0x1110f8a6
 800dc58:	3f811111 	.word	0x3f811111

0800dc5c <__ieee754_fmod>:
 800dc5c:	ec53 2b11 	vmov	r2, r3, d1
 800dc60:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800dc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc68:	ea5c 0402 	orrs.w	r4, ip, r2
 800dc6c:	ec51 0b10 	vmov	r0, r1, d0
 800dc70:	ee11 7a10 	vmov	r7, s2
 800dc74:	ee11 ea10 	vmov	lr, s2
 800dc78:	461e      	mov	r6, r3
 800dc7a:	d00c      	beq.n	800dc96 <__ieee754_fmod+0x3a>
 800dc7c:	4c78      	ldr	r4, [pc, #480]	; (800de60 <__ieee754_fmod+0x204>)
 800dc7e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800dc82:	45a0      	cmp	r8, r4
 800dc84:	4689      	mov	r9, r1
 800dc86:	dc06      	bgt.n	800dc96 <__ieee754_fmod+0x3a>
 800dc88:	4254      	negs	r4, r2
 800dc8a:	4d76      	ldr	r5, [pc, #472]	; (800de64 <__ieee754_fmod+0x208>)
 800dc8c:	4314      	orrs	r4, r2
 800dc8e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800dc92:	42ac      	cmp	r4, r5
 800dc94:	d909      	bls.n	800dcaa <__ieee754_fmod+0x4e>
 800dc96:	f7f2 fcd7 	bl	8000648 <__aeabi_dmul>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	f7f2 fdfd 	bl	800089c <__aeabi_ddiv>
 800dca2:	ec41 0b10 	vmov	d0, r0, r1
 800dca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcaa:	45e0      	cmp	r8, ip
 800dcac:	ee10 aa10 	vmov	sl, s0
 800dcb0:	ee10 4a10 	vmov	r4, s0
 800dcb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dcb8:	dc09      	bgt.n	800dcce <__ieee754_fmod+0x72>
 800dcba:	dbf2      	blt.n	800dca2 <__ieee754_fmod+0x46>
 800dcbc:	4290      	cmp	r0, r2
 800dcbe:	d3f0      	bcc.n	800dca2 <__ieee754_fmod+0x46>
 800dcc0:	d105      	bne.n	800dcce <__ieee754_fmod+0x72>
 800dcc2:	4b69      	ldr	r3, [pc, #420]	; (800de68 <__ieee754_fmod+0x20c>)
 800dcc4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800dcc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dccc:	e7e9      	b.n	800dca2 <__ieee754_fmod+0x46>
 800dcce:	4a65      	ldr	r2, [pc, #404]	; (800de64 <__ieee754_fmod+0x208>)
 800dcd0:	ea19 0f02 	tst.w	r9, r2
 800dcd4:	d148      	bne.n	800dd68 <__ieee754_fmod+0x10c>
 800dcd6:	f1b8 0f00 	cmp.w	r8, #0
 800dcda:	d13d      	bne.n	800dd58 <__ieee754_fmod+0xfc>
 800dcdc:	4963      	ldr	r1, [pc, #396]	; (800de6c <__ieee754_fmod+0x210>)
 800dcde:	4653      	mov	r3, sl
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	dc36      	bgt.n	800dd52 <__ieee754_fmod+0xf6>
 800dce4:	4216      	tst	r6, r2
 800dce6:	d14f      	bne.n	800dd88 <__ieee754_fmod+0x12c>
 800dce8:	f1bc 0f00 	cmp.w	ip, #0
 800dcec:	d144      	bne.n	800dd78 <__ieee754_fmod+0x11c>
 800dcee:	4a5f      	ldr	r2, [pc, #380]	; (800de6c <__ieee754_fmod+0x210>)
 800dcf0:	463b      	mov	r3, r7
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	dc3d      	bgt.n	800dd72 <__ieee754_fmod+0x116>
 800dcf6:	485e      	ldr	r0, [pc, #376]	; (800de70 <__ieee754_fmod+0x214>)
 800dcf8:	4281      	cmp	r1, r0
 800dcfa:	db4a      	blt.n	800dd92 <__ieee754_fmod+0x136>
 800dcfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd04:	485a      	ldr	r0, [pc, #360]	; (800de70 <__ieee754_fmod+0x214>)
 800dd06:	4282      	cmp	r2, r0
 800dd08:	db57      	blt.n	800ddba <__ieee754_fmod+0x15e>
 800dd0a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800dd0e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800dd12:	1a89      	subs	r1, r1, r2
 800dd14:	1b98      	subs	r0, r3, r6
 800dd16:	eba4 070e 	sub.w	r7, r4, lr
 800dd1a:	2900      	cmp	r1, #0
 800dd1c:	d162      	bne.n	800dde4 <__ieee754_fmod+0x188>
 800dd1e:	4574      	cmp	r4, lr
 800dd20:	bf38      	it	cc
 800dd22:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800dd26:	2800      	cmp	r0, #0
 800dd28:	bfa4      	itt	ge
 800dd2a:	463c      	movge	r4, r7
 800dd2c:	4603      	movge	r3, r0
 800dd2e:	ea53 0104 	orrs.w	r1, r3, r4
 800dd32:	d0c6      	beq.n	800dcc2 <__ieee754_fmod+0x66>
 800dd34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd38:	db69      	blt.n	800de0e <__ieee754_fmod+0x1b2>
 800dd3a:	494d      	ldr	r1, [pc, #308]	; (800de70 <__ieee754_fmod+0x214>)
 800dd3c:	428a      	cmp	r2, r1
 800dd3e:	db6c      	blt.n	800de1a <__ieee754_fmod+0x1be>
 800dd40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd44:	432b      	orrs	r3, r5
 800dd46:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800dd4a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dd4e:	4620      	mov	r0, r4
 800dd50:	e7a7      	b.n	800dca2 <__ieee754_fmod+0x46>
 800dd52:	3901      	subs	r1, #1
 800dd54:	005b      	lsls	r3, r3, #1
 800dd56:	e7c3      	b.n	800dce0 <__ieee754_fmod+0x84>
 800dd58:	4945      	ldr	r1, [pc, #276]	; (800de70 <__ieee754_fmod+0x214>)
 800dd5a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	ddc0      	ble.n	800dce4 <__ieee754_fmod+0x88>
 800dd62:	3901      	subs	r1, #1
 800dd64:	005b      	lsls	r3, r3, #1
 800dd66:	e7fa      	b.n	800dd5e <__ieee754_fmod+0x102>
 800dd68:	ea4f 5128 	mov.w	r1, r8, asr #20
 800dd6c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dd70:	e7b8      	b.n	800dce4 <__ieee754_fmod+0x88>
 800dd72:	3a01      	subs	r2, #1
 800dd74:	005b      	lsls	r3, r3, #1
 800dd76:	e7bc      	b.n	800dcf2 <__ieee754_fmod+0x96>
 800dd78:	4a3d      	ldr	r2, [pc, #244]	; (800de70 <__ieee754_fmod+0x214>)
 800dd7a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	ddb9      	ble.n	800dcf6 <__ieee754_fmod+0x9a>
 800dd82:	3a01      	subs	r2, #1
 800dd84:	005b      	lsls	r3, r3, #1
 800dd86:	e7fa      	b.n	800dd7e <__ieee754_fmod+0x122>
 800dd88:	ea4f 522c 	mov.w	r2, ip, asr #20
 800dd8c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dd90:	e7b1      	b.n	800dcf6 <__ieee754_fmod+0x9a>
 800dd92:	1a40      	subs	r0, r0, r1
 800dd94:	281f      	cmp	r0, #31
 800dd96:	dc0a      	bgt.n	800ddae <__ieee754_fmod+0x152>
 800dd98:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800dd9c:	fa08 f800 	lsl.w	r8, r8, r0
 800dda0:	fa2a f303 	lsr.w	r3, sl, r3
 800dda4:	ea43 0308 	orr.w	r3, r3, r8
 800dda8:	fa0a f400 	lsl.w	r4, sl, r0
 800ddac:	e7aa      	b.n	800dd04 <__ieee754_fmod+0xa8>
 800ddae:	4b31      	ldr	r3, [pc, #196]	; (800de74 <__ieee754_fmod+0x218>)
 800ddb0:	1a5b      	subs	r3, r3, r1
 800ddb2:	fa0a f303 	lsl.w	r3, sl, r3
 800ddb6:	2400      	movs	r4, #0
 800ddb8:	e7a4      	b.n	800dd04 <__ieee754_fmod+0xa8>
 800ddba:	1a80      	subs	r0, r0, r2
 800ddbc:	281f      	cmp	r0, #31
 800ddbe:	dc0a      	bgt.n	800ddd6 <__ieee754_fmod+0x17a>
 800ddc0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800ddc4:	fa0c fc00 	lsl.w	ip, ip, r0
 800ddc8:	fa27 f606 	lsr.w	r6, r7, r6
 800ddcc:	ea46 060c 	orr.w	r6, r6, ip
 800ddd0:	fa07 fe00 	lsl.w	lr, r7, r0
 800ddd4:	e79d      	b.n	800dd12 <__ieee754_fmod+0xb6>
 800ddd6:	4e27      	ldr	r6, [pc, #156]	; (800de74 <__ieee754_fmod+0x218>)
 800ddd8:	1ab6      	subs	r6, r6, r2
 800ddda:	fa07 f606 	lsl.w	r6, r7, r6
 800ddde:	f04f 0e00 	mov.w	lr, #0
 800dde2:	e796      	b.n	800dd12 <__ieee754_fmod+0xb6>
 800dde4:	4574      	cmp	r4, lr
 800dde6:	bf38      	it	cc
 800dde8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800ddec:	2800      	cmp	r0, #0
 800ddee:	da05      	bge.n	800ddfc <__ieee754_fmod+0x1a0>
 800ddf0:	0fe0      	lsrs	r0, r4, #31
 800ddf2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ddf6:	0064      	lsls	r4, r4, #1
 800ddf8:	3901      	subs	r1, #1
 800ddfa:	e78b      	b.n	800dd14 <__ieee754_fmod+0xb8>
 800ddfc:	ea50 0307 	orrs.w	r3, r0, r7
 800de00:	f43f af5f 	beq.w	800dcc2 <__ieee754_fmod+0x66>
 800de04:	0ffb      	lsrs	r3, r7, #31
 800de06:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800de0a:	007c      	lsls	r4, r7, #1
 800de0c:	e7f4      	b.n	800ddf8 <__ieee754_fmod+0x19c>
 800de0e:	0fe1      	lsrs	r1, r4, #31
 800de10:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800de14:	0064      	lsls	r4, r4, #1
 800de16:	3a01      	subs	r2, #1
 800de18:	e78c      	b.n	800dd34 <__ieee754_fmod+0xd8>
 800de1a:	1a89      	subs	r1, r1, r2
 800de1c:	2914      	cmp	r1, #20
 800de1e:	dc0a      	bgt.n	800de36 <__ieee754_fmod+0x1da>
 800de20:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800de24:	fa03 f202 	lsl.w	r2, r3, r2
 800de28:	40cc      	lsrs	r4, r1
 800de2a:	4322      	orrs	r2, r4
 800de2c:	410b      	asrs	r3, r1
 800de2e:	ea43 0105 	orr.w	r1, r3, r5
 800de32:	4610      	mov	r0, r2
 800de34:	e735      	b.n	800dca2 <__ieee754_fmod+0x46>
 800de36:	291f      	cmp	r1, #31
 800de38:	dc07      	bgt.n	800de4a <__ieee754_fmod+0x1ee>
 800de3a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800de3e:	40cc      	lsrs	r4, r1
 800de40:	fa03 f202 	lsl.w	r2, r3, r2
 800de44:	4322      	orrs	r2, r4
 800de46:	462b      	mov	r3, r5
 800de48:	e7f1      	b.n	800de2e <__ieee754_fmod+0x1d2>
 800de4a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800de4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de52:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800de56:	32e2      	adds	r2, #226	; 0xe2
 800de58:	fa43 f202 	asr.w	r2, r3, r2
 800de5c:	e7f3      	b.n	800de46 <__ieee754_fmod+0x1ea>
 800de5e:	bf00      	nop
 800de60:	7fefffff 	.word	0x7fefffff
 800de64:	7ff00000 	.word	0x7ff00000
 800de68:	0800faf0 	.word	0x0800faf0
 800de6c:	fffffbed 	.word	0xfffffbed
 800de70:	fffffc02 	.word	0xfffffc02
 800de74:	fffffbe2 	.word	0xfffffbe2

0800de78 <__ieee754_rem_pio2>:
 800de78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	ed2d 8b02 	vpush	{d8}
 800de80:	ec55 4b10 	vmov	r4, r5, d0
 800de84:	4bca      	ldr	r3, [pc, #808]	; (800e1b0 <__ieee754_rem_pio2+0x338>)
 800de86:	b08b      	sub	sp, #44	; 0x2c
 800de88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800de8c:	4598      	cmp	r8, r3
 800de8e:	4682      	mov	sl, r0
 800de90:	9502      	str	r5, [sp, #8]
 800de92:	dc08      	bgt.n	800dea6 <__ieee754_rem_pio2+0x2e>
 800de94:	2200      	movs	r2, #0
 800de96:	2300      	movs	r3, #0
 800de98:	ed80 0b00 	vstr	d0, [r0]
 800de9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dea0:	f04f 0b00 	mov.w	fp, #0
 800dea4:	e028      	b.n	800def8 <__ieee754_rem_pio2+0x80>
 800dea6:	4bc3      	ldr	r3, [pc, #780]	; (800e1b4 <__ieee754_rem_pio2+0x33c>)
 800dea8:	4598      	cmp	r8, r3
 800deaa:	dc78      	bgt.n	800df9e <__ieee754_rem_pio2+0x126>
 800deac:	9b02      	ldr	r3, [sp, #8]
 800deae:	4ec2      	ldr	r6, [pc, #776]	; (800e1b8 <__ieee754_rem_pio2+0x340>)
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	ee10 0a10 	vmov	r0, s0
 800deb6:	a3b0      	add	r3, pc, #704	; (adr r3, 800e178 <__ieee754_rem_pio2+0x300>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	4629      	mov	r1, r5
 800debe:	dd39      	ble.n	800df34 <__ieee754_rem_pio2+0xbc>
 800dec0:	f7f2 fa0a 	bl	80002d8 <__aeabi_dsub>
 800dec4:	45b0      	cmp	r8, r6
 800dec6:	4604      	mov	r4, r0
 800dec8:	460d      	mov	r5, r1
 800deca:	d01b      	beq.n	800df04 <__ieee754_rem_pio2+0x8c>
 800decc:	a3ac      	add	r3, pc, #688	; (adr r3, 800e180 <__ieee754_rem_pio2+0x308>)
 800dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded2:	f7f2 fa01 	bl	80002d8 <__aeabi_dsub>
 800ded6:	4602      	mov	r2, r0
 800ded8:	460b      	mov	r3, r1
 800deda:	e9ca 2300 	strd	r2, r3, [sl]
 800dede:	4620      	mov	r0, r4
 800dee0:	4629      	mov	r1, r5
 800dee2:	f7f2 f9f9 	bl	80002d8 <__aeabi_dsub>
 800dee6:	a3a6      	add	r3, pc, #664	; (adr r3, 800e180 <__ieee754_rem_pio2+0x308>)
 800dee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deec:	f7f2 f9f4 	bl	80002d8 <__aeabi_dsub>
 800def0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800def4:	f04f 0b01 	mov.w	fp, #1
 800def8:	4658      	mov	r0, fp
 800defa:	b00b      	add	sp, #44	; 0x2c
 800defc:	ecbd 8b02 	vpop	{d8}
 800df00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df04:	a3a0      	add	r3, pc, #640	; (adr r3, 800e188 <__ieee754_rem_pio2+0x310>)
 800df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0a:	f7f2 f9e5 	bl	80002d8 <__aeabi_dsub>
 800df0e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e190 <__ieee754_rem_pio2+0x318>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	4604      	mov	r4, r0
 800df16:	460d      	mov	r5, r1
 800df18:	f7f2 f9de 	bl	80002d8 <__aeabi_dsub>
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	e9ca 2300 	strd	r2, r3, [sl]
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f7f2 f9d6 	bl	80002d8 <__aeabi_dsub>
 800df2c:	a398      	add	r3, pc, #608	; (adr r3, 800e190 <__ieee754_rem_pio2+0x318>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	e7db      	b.n	800deec <__ieee754_rem_pio2+0x74>
 800df34:	f7f2 f9d2 	bl	80002dc <__adddf3>
 800df38:	45b0      	cmp	r8, r6
 800df3a:	4604      	mov	r4, r0
 800df3c:	460d      	mov	r5, r1
 800df3e:	d016      	beq.n	800df6e <__ieee754_rem_pio2+0xf6>
 800df40:	a38f      	add	r3, pc, #572	; (adr r3, 800e180 <__ieee754_rem_pio2+0x308>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	f7f2 f9c9 	bl	80002dc <__adddf3>
 800df4a:	4602      	mov	r2, r0
 800df4c:	460b      	mov	r3, r1
 800df4e:	e9ca 2300 	strd	r2, r3, [sl]
 800df52:	4620      	mov	r0, r4
 800df54:	4629      	mov	r1, r5
 800df56:	f7f2 f9bf 	bl	80002d8 <__aeabi_dsub>
 800df5a:	a389      	add	r3, pc, #548	; (adr r3, 800e180 <__ieee754_rem_pio2+0x308>)
 800df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df60:	f7f2 f9bc 	bl	80002dc <__adddf3>
 800df64:	f04f 3bff 	mov.w	fp, #4294967295
 800df68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df6c:	e7c4      	b.n	800def8 <__ieee754_rem_pio2+0x80>
 800df6e:	a386      	add	r3, pc, #536	; (adr r3, 800e188 <__ieee754_rem_pio2+0x310>)
 800df70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df74:	f7f2 f9b2 	bl	80002dc <__adddf3>
 800df78:	a385      	add	r3, pc, #532	; (adr r3, 800e190 <__ieee754_rem_pio2+0x318>)
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	4604      	mov	r4, r0
 800df80:	460d      	mov	r5, r1
 800df82:	f7f2 f9ab 	bl	80002dc <__adddf3>
 800df86:	4602      	mov	r2, r0
 800df88:	460b      	mov	r3, r1
 800df8a:	e9ca 2300 	strd	r2, r3, [sl]
 800df8e:	4620      	mov	r0, r4
 800df90:	4629      	mov	r1, r5
 800df92:	f7f2 f9a1 	bl	80002d8 <__aeabi_dsub>
 800df96:	a37e      	add	r3, pc, #504	; (adr r3, 800e190 <__ieee754_rem_pio2+0x318>)
 800df98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9c:	e7e0      	b.n	800df60 <__ieee754_rem_pio2+0xe8>
 800df9e:	4b87      	ldr	r3, [pc, #540]	; (800e1bc <__ieee754_rem_pio2+0x344>)
 800dfa0:	4598      	cmp	r8, r3
 800dfa2:	f300 80d8 	bgt.w	800e156 <__ieee754_rem_pio2+0x2de>
 800dfa6:	f000 f96d 	bl	800e284 <fabs>
 800dfaa:	ec55 4b10 	vmov	r4, r5, d0
 800dfae:	ee10 0a10 	vmov	r0, s0
 800dfb2:	a379      	add	r3, pc, #484	; (adr r3, 800e198 <__ieee754_rem_pio2+0x320>)
 800dfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb8:	4629      	mov	r1, r5
 800dfba:	f7f2 fb45 	bl	8000648 <__aeabi_dmul>
 800dfbe:	4b80      	ldr	r3, [pc, #512]	; (800e1c0 <__ieee754_rem_pio2+0x348>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f7f2 f98b 	bl	80002dc <__adddf3>
 800dfc6:	f7f2 fdef 	bl	8000ba8 <__aeabi_d2iz>
 800dfca:	4683      	mov	fp, r0
 800dfcc:	f7f2 fad2 	bl	8000574 <__aeabi_i2d>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	ec43 2b18 	vmov	d8, r2, r3
 800dfd8:	a367      	add	r3, pc, #412	; (adr r3, 800e178 <__ieee754_rem_pio2+0x300>)
 800dfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfde:	f7f2 fb33 	bl	8000648 <__aeabi_dmul>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	4629      	mov	r1, r5
 800dfea:	f7f2 f975 	bl	80002d8 <__aeabi_dsub>
 800dfee:	a364      	add	r3, pc, #400	; (adr r3, 800e180 <__ieee754_rem_pio2+0x308>)
 800dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff4:	4606      	mov	r6, r0
 800dff6:	460f      	mov	r7, r1
 800dff8:	ec51 0b18 	vmov	r0, r1, d8
 800dffc:	f7f2 fb24 	bl	8000648 <__aeabi_dmul>
 800e000:	f1bb 0f1f 	cmp.w	fp, #31
 800e004:	4604      	mov	r4, r0
 800e006:	460d      	mov	r5, r1
 800e008:	dc0d      	bgt.n	800e026 <__ieee754_rem_pio2+0x1ae>
 800e00a:	4b6e      	ldr	r3, [pc, #440]	; (800e1c4 <__ieee754_rem_pio2+0x34c>)
 800e00c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e014:	4543      	cmp	r3, r8
 800e016:	d006      	beq.n	800e026 <__ieee754_rem_pio2+0x1ae>
 800e018:	4622      	mov	r2, r4
 800e01a:	462b      	mov	r3, r5
 800e01c:	4630      	mov	r0, r6
 800e01e:	4639      	mov	r1, r7
 800e020:	f7f2 f95a 	bl	80002d8 <__aeabi_dsub>
 800e024:	e00e      	b.n	800e044 <__ieee754_rem_pio2+0x1cc>
 800e026:	462b      	mov	r3, r5
 800e028:	4622      	mov	r2, r4
 800e02a:	4630      	mov	r0, r6
 800e02c:	4639      	mov	r1, r7
 800e02e:	f7f2 f953 	bl	80002d8 <__aeabi_dsub>
 800e032:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e036:	9303      	str	r3, [sp, #12]
 800e038:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e03c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e040:	2b10      	cmp	r3, #16
 800e042:	dc02      	bgt.n	800e04a <__ieee754_rem_pio2+0x1d2>
 800e044:	e9ca 0100 	strd	r0, r1, [sl]
 800e048:	e039      	b.n	800e0be <__ieee754_rem_pio2+0x246>
 800e04a:	a34f      	add	r3, pc, #316	; (adr r3, 800e188 <__ieee754_rem_pio2+0x310>)
 800e04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e050:	ec51 0b18 	vmov	r0, r1, d8
 800e054:	f7f2 faf8 	bl	8000648 <__aeabi_dmul>
 800e058:	4604      	mov	r4, r0
 800e05a:	460d      	mov	r5, r1
 800e05c:	4602      	mov	r2, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	4630      	mov	r0, r6
 800e062:	4639      	mov	r1, r7
 800e064:	f7f2 f938 	bl	80002d8 <__aeabi_dsub>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4680      	mov	r8, r0
 800e06e:	4689      	mov	r9, r1
 800e070:	4630      	mov	r0, r6
 800e072:	4639      	mov	r1, r7
 800e074:	f7f2 f930 	bl	80002d8 <__aeabi_dsub>
 800e078:	4622      	mov	r2, r4
 800e07a:	462b      	mov	r3, r5
 800e07c:	f7f2 f92c 	bl	80002d8 <__aeabi_dsub>
 800e080:	a343      	add	r3, pc, #268	; (adr r3, 800e190 <__ieee754_rem_pio2+0x318>)
 800e082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e086:	4604      	mov	r4, r0
 800e088:	460d      	mov	r5, r1
 800e08a:	ec51 0b18 	vmov	r0, r1, d8
 800e08e:	f7f2 fadb 	bl	8000648 <__aeabi_dmul>
 800e092:	4622      	mov	r2, r4
 800e094:	462b      	mov	r3, r5
 800e096:	f7f2 f91f 	bl	80002d8 <__aeabi_dsub>
 800e09a:	4602      	mov	r2, r0
 800e09c:	460b      	mov	r3, r1
 800e09e:	4604      	mov	r4, r0
 800e0a0:	460d      	mov	r5, r1
 800e0a2:	4640      	mov	r0, r8
 800e0a4:	4649      	mov	r1, r9
 800e0a6:	f7f2 f917 	bl	80002d8 <__aeabi_dsub>
 800e0aa:	9a03      	ldr	r2, [sp, #12]
 800e0ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	2b31      	cmp	r3, #49	; 0x31
 800e0b4:	dc24      	bgt.n	800e100 <__ieee754_rem_pio2+0x288>
 800e0b6:	e9ca 0100 	strd	r0, r1, [sl]
 800e0ba:	4646      	mov	r6, r8
 800e0bc:	464f      	mov	r7, r9
 800e0be:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	4642      	mov	r2, r8
 800e0c6:	464b      	mov	r3, r9
 800e0c8:	4639      	mov	r1, r7
 800e0ca:	f7f2 f905 	bl	80002d8 <__aeabi_dsub>
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	f7f2 f901 	bl	80002d8 <__aeabi_dsub>
 800e0d6:	9b02      	ldr	r3, [sp, #8]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e0de:	f6bf af0b 	bge.w	800def8 <__ieee754_rem_pio2+0x80>
 800e0e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e0e6:	f8ca 3004 	str.w	r3, [sl, #4]
 800e0ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0ee:	f8ca 8000 	str.w	r8, [sl]
 800e0f2:	f8ca 0008 	str.w	r0, [sl, #8]
 800e0f6:	f8ca 300c 	str.w	r3, [sl, #12]
 800e0fa:	f1cb 0b00 	rsb	fp, fp, #0
 800e0fe:	e6fb      	b.n	800def8 <__ieee754_rem_pio2+0x80>
 800e100:	a327      	add	r3, pc, #156	; (adr r3, 800e1a0 <__ieee754_rem_pio2+0x328>)
 800e102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e106:	ec51 0b18 	vmov	r0, r1, d8
 800e10a:	f7f2 fa9d 	bl	8000648 <__aeabi_dmul>
 800e10e:	4604      	mov	r4, r0
 800e110:	460d      	mov	r5, r1
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	4640      	mov	r0, r8
 800e118:	4649      	mov	r1, r9
 800e11a:	f7f2 f8dd 	bl	80002d8 <__aeabi_dsub>
 800e11e:	4602      	mov	r2, r0
 800e120:	460b      	mov	r3, r1
 800e122:	4606      	mov	r6, r0
 800e124:	460f      	mov	r7, r1
 800e126:	4640      	mov	r0, r8
 800e128:	4649      	mov	r1, r9
 800e12a:	f7f2 f8d5 	bl	80002d8 <__aeabi_dsub>
 800e12e:	4622      	mov	r2, r4
 800e130:	462b      	mov	r3, r5
 800e132:	f7f2 f8d1 	bl	80002d8 <__aeabi_dsub>
 800e136:	a31c      	add	r3, pc, #112	; (adr r3, 800e1a8 <__ieee754_rem_pio2+0x330>)
 800e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13c:	4604      	mov	r4, r0
 800e13e:	460d      	mov	r5, r1
 800e140:	ec51 0b18 	vmov	r0, r1, d8
 800e144:	f7f2 fa80 	bl	8000648 <__aeabi_dmul>
 800e148:	4622      	mov	r2, r4
 800e14a:	462b      	mov	r3, r5
 800e14c:	f7f2 f8c4 	bl	80002d8 <__aeabi_dsub>
 800e150:	4604      	mov	r4, r0
 800e152:	460d      	mov	r5, r1
 800e154:	e760      	b.n	800e018 <__ieee754_rem_pio2+0x1a0>
 800e156:	4b1c      	ldr	r3, [pc, #112]	; (800e1c8 <__ieee754_rem_pio2+0x350>)
 800e158:	4598      	cmp	r8, r3
 800e15a:	dd37      	ble.n	800e1cc <__ieee754_rem_pio2+0x354>
 800e15c:	ee10 2a10 	vmov	r2, s0
 800e160:	462b      	mov	r3, r5
 800e162:	4620      	mov	r0, r4
 800e164:	4629      	mov	r1, r5
 800e166:	f7f2 f8b7 	bl	80002d8 <__aeabi_dsub>
 800e16a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e16e:	e9ca 0100 	strd	r0, r1, [sl]
 800e172:	e695      	b.n	800dea0 <__ieee754_rem_pio2+0x28>
 800e174:	f3af 8000 	nop.w
 800e178:	54400000 	.word	0x54400000
 800e17c:	3ff921fb 	.word	0x3ff921fb
 800e180:	1a626331 	.word	0x1a626331
 800e184:	3dd0b461 	.word	0x3dd0b461
 800e188:	1a600000 	.word	0x1a600000
 800e18c:	3dd0b461 	.word	0x3dd0b461
 800e190:	2e037073 	.word	0x2e037073
 800e194:	3ba3198a 	.word	0x3ba3198a
 800e198:	6dc9c883 	.word	0x6dc9c883
 800e19c:	3fe45f30 	.word	0x3fe45f30
 800e1a0:	2e000000 	.word	0x2e000000
 800e1a4:	3ba3198a 	.word	0x3ba3198a
 800e1a8:	252049c1 	.word	0x252049c1
 800e1ac:	397b839a 	.word	0x397b839a
 800e1b0:	3fe921fb 	.word	0x3fe921fb
 800e1b4:	4002d97b 	.word	0x4002d97b
 800e1b8:	3ff921fb 	.word	0x3ff921fb
 800e1bc:	413921fb 	.word	0x413921fb
 800e1c0:	3fe00000 	.word	0x3fe00000
 800e1c4:	0800fb00 	.word	0x0800fb00
 800e1c8:	7fefffff 	.word	0x7fefffff
 800e1cc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e1d0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e1d4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e1d8:	4620      	mov	r0, r4
 800e1da:	460d      	mov	r5, r1
 800e1dc:	f7f2 fce4 	bl	8000ba8 <__aeabi_d2iz>
 800e1e0:	f7f2 f9c8 	bl	8000574 <__aeabi_i2d>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	4629      	mov	r1, r5
 800e1ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e1f0:	f7f2 f872 	bl	80002d8 <__aeabi_dsub>
 800e1f4:	4b21      	ldr	r3, [pc, #132]	; (800e27c <__ieee754_rem_pio2+0x404>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f7f2 fa26 	bl	8000648 <__aeabi_dmul>
 800e1fc:	460d      	mov	r5, r1
 800e1fe:	4604      	mov	r4, r0
 800e200:	f7f2 fcd2 	bl	8000ba8 <__aeabi_d2iz>
 800e204:	f7f2 f9b6 	bl	8000574 <__aeabi_i2d>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4620      	mov	r0, r4
 800e20e:	4629      	mov	r1, r5
 800e210:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e214:	f7f2 f860 	bl	80002d8 <__aeabi_dsub>
 800e218:	4b18      	ldr	r3, [pc, #96]	; (800e27c <__ieee754_rem_pio2+0x404>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	f7f2 fa14 	bl	8000648 <__aeabi_dmul>
 800e220:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e224:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e228:	2703      	movs	r7, #3
 800e22a:	2400      	movs	r4, #0
 800e22c:	2500      	movs	r5, #0
 800e22e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e232:	4622      	mov	r2, r4
 800e234:	462b      	mov	r3, r5
 800e236:	46b9      	mov	r9, r7
 800e238:	3f01      	subs	r7, #1
 800e23a:	f7f2 fc6d 	bl	8000b18 <__aeabi_dcmpeq>
 800e23e:	2800      	cmp	r0, #0
 800e240:	d1f5      	bne.n	800e22e <__ieee754_rem_pio2+0x3b6>
 800e242:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <__ieee754_rem_pio2+0x408>)
 800e244:	9301      	str	r3, [sp, #4]
 800e246:	2302      	movs	r3, #2
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	4632      	mov	r2, r6
 800e24c:	464b      	mov	r3, r9
 800e24e:	4651      	mov	r1, sl
 800e250:	a804      	add	r0, sp, #16
 800e252:	f000 f9fd 	bl	800e650 <__kernel_rem_pio2>
 800e256:	9b02      	ldr	r3, [sp, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	4683      	mov	fp, r0
 800e25c:	f6bf ae4c 	bge.w	800def8 <__ieee754_rem_pio2+0x80>
 800e260:	e9da 2100 	ldrd	r2, r1, [sl]
 800e264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e268:	e9ca 2300 	strd	r2, r3, [sl]
 800e26c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e274:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e278:	e73f      	b.n	800e0fa <__ieee754_rem_pio2+0x282>
 800e27a:	bf00      	nop
 800e27c:	41700000 	.word	0x41700000
 800e280:	0800fb80 	.word	0x0800fb80

0800e284 <fabs>:
 800e284:	ec51 0b10 	vmov	r0, r1, d0
 800e288:	ee10 2a10 	vmov	r2, s0
 800e28c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e290:	ec43 2b10 	vmov	d0, r2, r3
 800e294:	4770      	bx	lr
	...

0800e298 <__kernel_cosf>:
 800e298:	ee10 3a10 	vmov	r3, s0
 800e29c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2a0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e2a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2a8:	da05      	bge.n	800e2b6 <__kernel_cosf+0x1e>
 800e2aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e2ae:	ee17 2a90 	vmov	r2, s15
 800e2b2:	2a00      	cmp	r2, #0
 800e2b4:	d03b      	beq.n	800e32e <__kernel_cosf+0x96>
 800e2b6:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e2ba:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e334 <__kernel_cosf+0x9c>
 800e2be:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800e338 <__kernel_cosf+0xa0>
 800e2c2:	4a1e      	ldr	r2, [pc, #120]	; (800e33c <__kernel_cosf+0xa4>)
 800e2c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800e340 <__kernel_cosf+0xa8>
 800e2ce:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e2d2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800e344 <__kernel_cosf+0xac>
 800e2d6:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e2da:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800e348 <__kernel_cosf+0xb0>
 800e2de:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e2e2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800e34c <__kernel_cosf+0xb4>
 800e2e6:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e2ea:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800e2ee:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e2f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e2f6:	eee7 0a06 	vfma.f32	s1, s14, s12
 800e2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2fe:	dc04      	bgt.n	800e30a <__kernel_cosf+0x72>
 800e300:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e304:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800e308:	4770      	bx	lr
 800e30a:	4a11      	ldr	r2, [pc, #68]	; (800e350 <__kernel_cosf+0xb8>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	bfda      	itte	le
 800e310:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800e314:	ee07 3a10 	vmovle	s14, r3
 800e318:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800e31c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e320:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800e324:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e328:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e32c:	4770      	bx	lr
 800e32e:	eeb0 0a66 	vmov.f32	s0, s13
 800e332:	4770      	bx	lr
 800e334:	ad47d74e 	.word	0xad47d74e
 800e338:	310f74f6 	.word	0x310f74f6
 800e33c:	3e999999 	.word	0x3e999999
 800e340:	b493f27c 	.word	0xb493f27c
 800e344:	37d00d01 	.word	0x37d00d01
 800e348:	bab60b61 	.word	0xbab60b61
 800e34c:	3d2aaaab 	.word	0x3d2aaaab
 800e350:	3f480000 	.word	0x3f480000

0800e354 <__kernel_sinf>:
 800e354:	ee10 3a10 	vmov	r3, s0
 800e358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e35c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e360:	da04      	bge.n	800e36c <__kernel_sinf+0x18>
 800e362:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e366:	ee17 3a90 	vmov	r3, s15
 800e36a:	b35b      	cbz	r3, 800e3c4 <__kernel_sinf+0x70>
 800e36c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e370:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e3c8 <__kernel_sinf+0x74>
 800e374:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e3cc <__kernel_sinf+0x78>
 800e378:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e37c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e3d0 <__kernel_sinf+0x7c>
 800e380:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e384:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e3d4 <__kernel_sinf+0x80>
 800e388:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e38c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e3d8 <__kernel_sinf+0x84>
 800e390:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e394:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e398:	b930      	cbnz	r0, 800e3a8 <__kernel_sinf+0x54>
 800e39a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800e3dc <__kernel_sinf+0x88>
 800e39e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e3a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e3a6:	4770      	bx	lr
 800e3a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e3ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e3b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e3b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e3b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e3e0 <__kernel_sinf+0x8c>
 800e3bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e3c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	2f2ec9d3 	.word	0x2f2ec9d3
 800e3cc:	b2d72f34 	.word	0xb2d72f34
 800e3d0:	3638ef1b 	.word	0x3638ef1b
 800e3d4:	b9500d01 	.word	0xb9500d01
 800e3d8:	3c088889 	.word	0x3c088889
 800e3dc:	be2aaaab 	.word	0xbe2aaaab
 800e3e0:	3e2aaaab 	.word	0x3e2aaaab

0800e3e4 <__ieee754_rem_pio2f>:
 800e3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3e6:	ee10 6a10 	vmov	r6, s0
 800e3ea:	4b86      	ldr	r3, [pc, #536]	; (800e604 <__ieee754_rem_pio2f+0x220>)
 800e3ec:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e3f0:	429d      	cmp	r5, r3
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	dc05      	bgt.n	800e404 <__ieee754_rem_pio2f+0x20>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	ed80 0a00 	vstr	s0, [r0]
 800e3fe:	6043      	str	r3, [r0, #4]
 800e400:	2000      	movs	r0, #0
 800e402:	e020      	b.n	800e446 <__ieee754_rem_pio2f+0x62>
 800e404:	4b80      	ldr	r3, [pc, #512]	; (800e608 <__ieee754_rem_pio2f+0x224>)
 800e406:	429d      	cmp	r5, r3
 800e408:	dc38      	bgt.n	800e47c <__ieee754_rem_pio2f+0x98>
 800e40a:	2e00      	cmp	r6, #0
 800e40c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800e60c <__ieee754_rem_pio2f+0x228>
 800e410:	4b7f      	ldr	r3, [pc, #508]	; (800e610 <__ieee754_rem_pio2f+0x22c>)
 800e412:	f025 050f 	bic.w	r5, r5, #15
 800e416:	dd18      	ble.n	800e44a <__ieee754_rem_pio2f+0x66>
 800e418:	429d      	cmp	r5, r3
 800e41a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e41e:	bf09      	itett	eq
 800e420:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800e614 <__ieee754_rem_pio2f+0x230>
 800e424:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800e618 <__ieee754_rem_pio2f+0x234>
 800e428:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e42c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800e61c <__ieee754_rem_pio2f+0x238>
 800e430:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e434:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e438:	edc0 6a00 	vstr	s13, [r0]
 800e43c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e440:	edc0 7a01 	vstr	s15, [r0, #4]
 800e444:	2001      	movs	r0, #1
 800e446:	b007      	add	sp, #28
 800e448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e44a:	429d      	cmp	r5, r3
 800e44c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e450:	bf09      	itett	eq
 800e452:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800e614 <__ieee754_rem_pio2f+0x230>
 800e456:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800e618 <__ieee754_rem_pio2f+0x234>
 800e45a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e45e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800e61c <__ieee754_rem_pio2f+0x238>
 800e462:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e466:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e46a:	edc0 6a00 	vstr	s13, [r0]
 800e46e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e472:	edc0 7a01 	vstr	s15, [r0, #4]
 800e476:	f04f 30ff 	mov.w	r0, #4294967295
 800e47a:	e7e4      	b.n	800e446 <__ieee754_rem_pio2f+0x62>
 800e47c:	4b68      	ldr	r3, [pc, #416]	; (800e620 <__ieee754_rem_pio2f+0x23c>)
 800e47e:	429d      	cmp	r5, r3
 800e480:	dc71      	bgt.n	800e566 <__ieee754_rem_pio2f+0x182>
 800e482:	f000 f8db 	bl	800e63c <fabsf>
 800e486:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e624 <__ieee754_rem_pio2f+0x240>
 800e48a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e48e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e49a:	ee17 0a90 	vmov	r0, s15
 800e49e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e60c <__ieee754_rem_pio2f+0x228>
 800e4a2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e4a6:	281f      	cmp	r0, #31
 800e4a8:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e618 <__ieee754_rem_pio2f+0x234>
 800e4ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4b0:	eeb1 6a47 	vneg.f32	s12, s14
 800e4b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e4b8:	ee16 2a90 	vmov	r2, s13
 800e4bc:	dc1c      	bgt.n	800e4f8 <__ieee754_rem_pio2f+0x114>
 800e4be:	495a      	ldr	r1, [pc, #360]	; (800e628 <__ieee754_rem_pio2f+0x244>)
 800e4c0:	1e47      	subs	r7, r0, #1
 800e4c2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e4c6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e4ca:	428b      	cmp	r3, r1
 800e4cc:	d014      	beq.n	800e4f8 <__ieee754_rem_pio2f+0x114>
 800e4ce:	6022      	str	r2, [r4, #0]
 800e4d0:	ed94 7a00 	vldr	s14, [r4]
 800e4d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e4d8:	2e00      	cmp	r6, #0
 800e4da:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e4de:	ed84 0a01 	vstr	s0, [r4, #4]
 800e4e2:	dab0      	bge.n	800e446 <__ieee754_rem_pio2f+0x62>
 800e4e4:	eeb1 7a47 	vneg.f32	s14, s14
 800e4e8:	eeb1 0a40 	vneg.f32	s0, s0
 800e4ec:	ed84 7a00 	vstr	s14, [r4]
 800e4f0:	ed84 0a01 	vstr	s0, [r4, #4]
 800e4f4:	4240      	negs	r0, r0
 800e4f6:	e7a6      	b.n	800e446 <__ieee754_rem_pio2f+0x62>
 800e4f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e4fc:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800e500:	2908      	cmp	r1, #8
 800e502:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e506:	dde2      	ble.n	800e4ce <__ieee754_rem_pio2f+0xea>
 800e508:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e614 <__ieee754_rem_pio2f+0x230>
 800e50c:	eef0 6a40 	vmov.f32	s13, s0
 800e510:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e514:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e518:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e51c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e61c <__ieee754_rem_pio2f+0x238>
 800e520:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e524:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e528:	ee15 2a90 	vmov	r2, s11
 800e52c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e530:	1a5b      	subs	r3, r3, r1
 800e532:	2b19      	cmp	r3, #25
 800e534:	dc04      	bgt.n	800e540 <__ieee754_rem_pio2f+0x15c>
 800e536:	edc4 5a00 	vstr	s11, [r4]
 800e53a:	eeb0 0a66 	vmov.f32	s0, s13
 800e53e:	e7c7      	b.n	800e4d0 <__ieee754_rem_pio2f+0xec>
 800e540:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e62c <__ieee754_rem_pio2f+0x248>
 800e544:	eeb0 0a66 	vmov.f32	s0, s13
 800e548:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e54c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e550:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e630 <__ieee754_rem_pio2f+0x24c>
 800e554:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e558:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e55c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e560:	ed84 7a00 	vstr	s14, [r4]
 800e564:	e7b4      	b.n	800e4d0 <__ieee754_rem_pio2f+0xec>
 800e566:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e56a:	db06      	blt.n	800e57a <__ieee754_rem_pio2f+0x196>
 800e56c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e570:	edc0 7a01 	vstr	s15, [r0, #4]
 800e574:	edc0 7a00 	vstr	s15, [r0]
 800e578:	e742      	b.n	800e400 <__ieee754_rem_pio2f+0x1c>
 800e57a:	15ea      	asrs	r2, r5, #23
 800e57c:	3a86      	subs	r2, #134	; 0x86
 800e57e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e582:	ee07 3a90 	vmov	s15, r3
 800e586:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e58a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800e634 <__ieee754_rem_pio2f+0x250>
 800e58e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e592:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e596:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e59a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e59e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e5a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e5a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5aa:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e5ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ba:	edcd 7a05 	vstr	s15, [sp, #20]
 800e5be:	d11e      	bne.n	800e5fe <__ieee754_rem_pio2f+0x21a>
 800e5c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c8:	bf14      	ite	ne
 800e5ca:	2302      	movne	r3, #2
 800e5cc:	2301      	moveq	r3, #1
 800e5ce:	491a      	ldr	r1, [pc, #104]	; (800e638 <__ieee754_rem_pio2f+0x254>)
 800e5d0:	9101      	str	r1, [sp, #4]
 800e5d2:	2102      	movs	r1, #2
 800e5d4:	9100      	str	r1, [sp, #0]
 800e5d6:	a803      	add	r0, sp, #12
 800e5d8:	4621      	mov	r1, r4
 800e5da:	f000 fb87 	bl	800ecec <__kernel_rem_pio2f>
 800e5de:	2e00      	cmp	r6, #0
 800e5e0:	f6bf af31 	bge.w	800e446 <__ieee754_rem_pio2f+0x62>
 800e5e4:	edd4 7a00 	vldr	s15, [r4]
 800e5e8:	eef1 7a67 	vneg.f32	s15, s15
 800e5ec:	edc4 7a00 	vstr	s15, [r4]
 800e5f0:	edd4 7a01 	vldr	s15, [r4, #4]
 800e5f4:	eef1 7a67 	vneg.f32	s15, s15
 800e5f8:	edc4 7a01 	vstr	s15, [r4, #4]
 800e5fc:	e77a      	b.n	800e4f4 <__ieee754_rem_pio2f+0x110>
 800e5fe:	2303      	movs	r3, #3
 800e600:	e7e5      	b.n	800e5ce <__ieee754_rem_pio2f+0x1ea>
 800e602:	bf00      	nop
 800e604:	3f490fd8 	.word	0x3f490fd8
 800e608:	4016cbe3 	.word	0x4016cbe3
 800e60c:	3fc90f80 	.word	0x3fc90f80
 800e610:	3fc90fd0 	.word	0x3fc90fd0
 800e614:	37354400 	.word	0x37354400
 800e618:	37354443 	.word	0x37354443
 800e61c:	2e85a308 	.word	0x2e85a308
 800e620:	43490f80 	.word	0x43490f80
 800e624:	3f22f984 	.word	0x3f22f984
 800e628:	0800fc88 	.word	0x0800fc88
 800e62c:	2e85a300 	.word	0x2e85a300
 800e630:	248d3132 	.word	0x248d3132
 800e634:	43800000 	.word	0x43800000
 800e638:	0800fd08 	.word	0x0800fd08

0800e63c <fabsf>:
 800e63c:	ee10 3a10 	vmov	r3, s0
 800e640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e644:	ee00 3a10 	vmov	s0, r3
 800e648:	4770      	bx	lr
 800e64a:	0000      	movs	r0, r0
 800e64c:	0000      	movs	r0, r0
	...

0800e650 <__kernel_rem_pio2>:
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	ed2d 8b02 	vpush	{d8}
 800e658:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e65c:	f112 0f14 	cmn.w	r2, #20
 800e660:	9306      	str	r3, [sp, #24]
 800e662:	9104      	str	r1, [sp, #16]
 800e664:	4bc2      	ldr	r3, [pc, #776]	; (800e970 <__kernel_rem_pio2+0x320>)
 800e666:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e668:	9009      	str	r0, [sp, #36]	; 0x24
 800e66a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	9b06      	ldr	r3, [sp, #24]
 800e672:	f103 33ff 	add.w	r3, r3, #4294967295
 800e676:	bfa8      	it	ge
 800e678:	1ed4      	subge	r4, r2, #3
 800e67a:	9305      	str	r3, [sp, #20]
 800e67c:	bfb2      	itee	lt
 800e67e:	2400      	movlt	r4, #0
 800e680:	2318      	movge	r3, #24
 800e682:	fb94 f4f3 	sdivge	r4, r4, r3
 800e686:	f06f 0317 	mvn.w	r3, #23
 800e68a:	fb04 3303 	mla	r3, r4, r3, r3
 800e68e:	eb03 0a02 	add.w	sl, r3, r2
 800e692:	9b00      	ldr	r3, [sp, #0]
 800e694:	9a05      	ldr	r2, [sp, #20]
 800e696:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e960 <__kernel_rem_pio2+0x310>
 800e69a:	eb03 0802 	add.w	r8, r3, r2
 800e69e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e6a0:	1aa7      	subs	r7, r4, r2
 800e6a2:	ae20      	add	r6, sp, #128	; 0x80
 800e6a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e6a8:	2500      	movs	r5, #0
 800e6aa:	4545      	cmp	r5, r8
 800e6ac:	dd13      	ble.n	800e6d6 <__kernel_rem_pio2+0x86>
 800e6ae:	9b06      	ldr	r3, [sp, #24]
 800e6b0:	aa20      	add	r2, sp, #128	; 0x80
 800e6b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e6b6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e6ba:	f04f 0800 	mov.w	r8, #0
 800e6be:	9b00      	ldr	r3, [sp, #0]
 800e6c0:	4598      	cmp	r8, r3
 800e6c2:	dc31      	bgt.n	800e728 <__kernel_rem_pio2+0xd8>
 800e6c4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e960 <__kernel_rem_pio2+0x310>
 800e6c8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e6cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e6d0:	462f      	mov	r7, r5
 800e6d2:	2600      	movs	r6, #0
 800e6d4:	e01b      	b.n	800e70e <__kernel_rem_pio2+0xbe>
 800e6d6:	42ef      	cmn	r7, r5
 800e6d8:	d407      	bmi.n	800e6ea <__kernel_rem_pio2+0x9a>
 800e6da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e6de:	f7f1 ff49 	bl	8000574 <__aeabi_i2d>
 800e6e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e6e6:	3501      	adds	r5, #1
 800e6e8:	e7df      	b.n	800e6aa <__kernel_rem_pio2+0x5a>
 800e6ea:	ec51 0b18 	vmov	r0, r1, d8
 800e6ee:	e7f8      	b.n	800e6e2 <__kernel_rem_pio2+0x92>
 800e6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e6f8:	f7f1 ffa6 	bl	8000648 <__aeabi_dmul>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e704:	f7f1 fdea 	bl	80002dc <__adddf3>
 800e708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e70c:	3601      	adds	r6, #1
 800e70e:	9b05      	ldr	r3, [sp, #20]
 800e710:	429e      	cmp	r6, r3
 800e712:	f1a7 0708 	sub.w	r7, r7, #8
 800e716:	ddeb      	ble.n	800e6f0 <__kernel_rem_pio2+0xa0>
 800e718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e71c:	f108 0801 	add.w	r8, r8, #1
 800e720:	ecab 7b02 	vstmia	fp!, {d7}
 800e724:	3508      	adds	r5, #8
 800e726:	e7ca      	b.n	800e6be <__kernel_rem_pio2+0x6e>
 800e728:	9b00      	ldr	r3, [sp, #0]
 800e72a:	aa0c      	add	r2, sp, #48	; 0x30
 800e72c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e730:	930b      	str	r3, [sp, #44]	; 0x2c
 800e732:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e734:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e738:	9c00      	ldr	r4, [sp, #0]
 800e73a:	930a      	str	r3, [sp, #40]	; 0x28
 800e73c:	00e3      	lsls	r3, r4, #3
 800e73e:	9308      	str	r3, [sp, #32]
 800e740:	ab98      	add	r3, sp, #608	; 0x260
 800e742:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e746:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e74a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e74e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e750:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e754:	46c3      	mov	fp, r8
 800e756:	46a1      	mov	r9, r4
 800e758:	f1b9 0f00 	cmp.w	r9, #0
 800e75c:	f1a5 0508 	sub.w	r5, r5, #8
 800e760:	dc77      	bgt.n	800e852 <__kernel_rem_pio2+0x202>
 800e762:	ec47 6b10 	vmov	d0, r6, r7
 800e766:	4650      	mov	r0, sl
 800e768:	f000 fd32 	bl	800f1d0 <scalbn>
 800e76c:	ec57 6b10 	vmov	r6, r7, d0
 800e770:	2200      	movs	r2, #0
 800e772:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e776:	ee10 0a10 	vmov	r0, s0
 800e77a:	4639      	mov	r1, r7
 800e77c:	f7f1 ff64 	bl	8000648 <__aeabi_dmul>
 800e780:	ec41 0b10 	vmov	d0, r0, r1
 800e784:	f000 fe08 	bl	800f398 <floor>
 800e788:	4b7a      	ldr	r3, [pc, #488]	; (800e974 <__kernel_rem_pio2+0x324>)
 800e78a:	ec51 0b10 	vmov	r0, r1, d0
 800e78e:	2200      	movs	r2, #0
 800e790:	f7f1 ff5a 	bl	8000648 <__aeabi_dmul>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4630      	mov	r0, r6
 800e79a:	4639      	mov	r1, r7
 800e79c:	f7f1 fd9c 	bl	80002d8 <__aeabi_dsub>
 800e7a0:	460f      	mov	r7, r1
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	f7f2 fa00 	bl	8000ba8 <__aeabi_d2iz>
 800e7a8:	9002      	str	r0, [sp, #8]
 800e7aa:	f7f1 fee3 	bl	8000574 <__aeabi_i2d>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	4639      	mov	r1, r7
 800e7b6:	f7f1 fd8f 	bl	80002d8 <__aeabi_dsub>
 800e7ba:	f1ba 0f00 	cmp.w	sl, #0
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460f      	mov	r7, r1
 800e7c2:	dd6d      	ble.n	800e8a0 <__kernel_rem_pio2+0x250>
 800e7c4:	1e61      	subs	r1, r4, #1
 800e7c6:	ab0c      	add	r3, sp, #48	; 0x30
 800e7c8:	9d02      	ldr	r5, [sp, #8]
 800e7ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7ce:	f1ca 0018 	rsb	r0, sl, #24
 800e7d2:	fa43 f200 	asr.w	r2, r3, r0
 800e7d6:	4415      	add	r5, r2
 800e7d8:	4082      	lsls	r2, r0
 800e7da:	1a9b      	subs	r3, r3, r2
 800e7dc:	aa0c      	add	r2, sp, #48	; 0x30
 800e7de:	9502      	str	r5, [sp, #8]
 800e7e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e7e4:	f1ca 0217 	rsb	r2, sl, #23
 800e7e8:	fa43 fb02 	asr.w	fp, r3, r2
 800e7ec:	f1bb 0f00 	cmp.w	fp, #0
 800e7f0:	dd65      	ble.n	800e8be <__kernel_rem_pio2+0x26e>
 800e7f2:	9b02      	ldr	r3, [sp, #8]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	9302      	str	r3, [sp, #8]
 800e7fa:	4615      	mov	r5, r2
 800e7fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e800:	4294      	cmp	r4, r2
 800e802:	f300 809f 	bgt.w	800e944 <__kernel_rem_pio2+0x2f4>
 800e806:	f1ba 0f00 	cmp.w	sl, #0
 800e80a:	dd07      	ble.n	800e81c <__kernel_rem_pio2+0x1cc>
 800e80c:	f1ba 0f01 	cmp.w	sl, #1
 800e810:	f000 80c1 	beq.w	800e996 <__kernel_rem_pio2+0x346>
 800e814:	f1ba 0f02 	cmp.w	sl, #2
 800e818:	f000 80c7 	beq.w	800e9aa <__kernel_rem_pio2+0x35a>
 800e81c:	f1bb 0f02 	cmp.w	fp, #2
 800e820:	d14d      	bne.n	800e8be <__kernel_rem_pio2+0x26e>
 800e822:	4632      	mov	r2, r6
 800e824:	463b      	mov	r3, r7
 800e826:	4954      	ldr	r1, [pc, #336]	; (800e978 <__kernel_rem_pio2+0x328>)
 800e828:	2000      	movs	r0, #0
 800e82a:	f7f1 fd55 	bl	80002d8 <__aeabi_dsub>
 800e82e:	4606      	mov	r6, r0
 800e830:	460f      	mov	r7, r1
 800e832:	2d00      	cmp	r5, #0
 800e834:	d043      	beq.n	800e8be <__kernel_rem_pio2+0x26e>
 800e836:	4650      	mov	r0, sl
 800e838:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e968 <__kernel_rem_pio2+0x318>
 800e83c:	f000 fcc8 	bl	800f1d0 <scalbn>
 800e840:	4630      	mov	r0, r6
 800e842:	4639      	mov	r1, r7
 800e844:	ec53 2b10 	vmov	r2, r3, d0
 800e848:	f7f1 fd46 	bl	80002d8 <__aeabi_dsub>
 800e84c:	4606      	mov	r6, r0
 800e84e:	460f      	mov	r7, r1
 800e850:	e035      	b.n	800e8be <__kernel_rem_pio2+0x26e>
 800e852:	4b4a      	ldr	r3, [pc, #296]	; (800e97c <__kernel_rem_pio2+0x32c>)
 800e854:	2200      	movs	r2, #0
 800e856:	4630      	mov	r0, r6
 800e858:	4639      	mov	r1, r7
 800e85a:	f7f1 fef5 	bl	8000648 <__aeabi_dmul>
 800e85e:	f7f2 f9a3 	bl	8000ba8 <__aeabi_d2iz>
 800e862:	f7f1 fe87 	bl	8000574 <__aeabi_i2d>
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	ec43 2b18 	vmov	d8, r2, r3
 800e86e:	4b44      	ldr	r3, [pc, #272]	; (800e980 <__kernel_rem_pio2+0x330>)
 800e870:	2200      	movs	r2, #0
 800e872:	f7f1 fee9 	bl	8000648 <__aeabi_dmul>
 800e876:	4602      	mov	r2, r0
 800e878:	460b      	mov	r3, r1
 800e87a:	4630      	mov	r0, r6
 800e87c:	4639      	mov	r1, r7
 800e87e:	f7f1 fd2b 	bl	80002d8 <__aeabi_dsub>
 800e882:	f7f2 f991 	bl	8000ba8 <__aeabi_d2iz>
 800e886:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e88a:	f84b 0b04 	str.w	r0, [fp], #4
 800e88e:	ec51 0b18 	vmov	r0, r1, d8
 800e892:	f7f1 fd23 	bl	80002dc <__adddf3>
 800e896:	f109 39ff 	add.w	r9, r9, #4294967295
 800e89a:	4606      	mov	r6, r0
 800e89c:	460f      	mov	r7, r1
 800e89e:	e75b      	b.n	800e758 <__kernel_rem_pio2+0x108>
 800e8a0:	d106      	bne.n	800e8b0 <__kernel_rem_pio2+0x260>
 800e8a2:	1e63      	subs	r3, r4, #1
 800e8a4:	aa0c      	add	r2, sp, #48	; 0x30
 800e8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8aa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e8ae:	e79d      	b.n	800e7ec <__kernel_rem_pio2+0x19c>
 800e8b0:	4b34      	ldr	r3, [pc, #208]	; (800e984 <__kernel_rem_pio2+0x334>)
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f7f2 f94e 	bl	8000b54 <__aeabi_dcmpge>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d140      	bne.n	800e93e <__kernel_rem_pio2+0x2ee>
 800e8bc:	4683      	mov	fp, r0
 800e8be:	2200      	movs	r2, #0
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	f7f2 f927 	bl	8000b18 <__aeabi_dcmpeq>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	f000 80c1 	beq.w	800ea52 <__kernel_rem_pio2+0x402>
 800e8d0:	1e65      	subs	r5, r4, #1
 800e8d2:	462b      	mov	r3, r5
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	9900      	ldr	r1, [sp, #0]
 800e8d8:	428b      	cmp	r3, r1
 800e8da:	da6d      	bge.n	800e9b8 <__kernel_rem_pio2+0x368>
 800e8dc:	2a00      	cmp	r2, #0
 800e8de:	f000 808a 	beq.w	800e9f6 <__kernel_rem_pio2+0x3a6>
 800e8e2:	ab0c      	add	r3, sp, #48	; 0x30
 800e8e4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e8e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	f000 80ae 	beq.w	800ea4e <__kernel_rem_pio2+0x3fe>
 800e8f2:	4650      	mov	r0, sl
 800e8f4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e968 <__kernel_rem_pio2+0x318>
 800e8f8:	f000 fc6a 	bl	800f1d0 <scalbn>
 800e8fc:	1c6b      	adds	r3, r5, #1
 800e8fe:	00da      	lsls	r2, r3, #3
 800e900:	9205      	str	r2, [sp, #20]
 800e902:	ec57 6b10 	vmov	r6, r7, d0
 800e906:	aa70      	add	r2, sp, #448	; 0x1c0
 800e908:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e97c <__kernel_rem_pio2+0x32c>
 800e90c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e910:	462c      	mov	r4, r5
 800e912:	f04f 0800 	mov.w	r8, #0
 800e916:	2c00      	cmp	r4, #0
 800e918:	f280 80d4 	bge.w	800eac4 <__kernel_rem_pio2+0x474>
 800e91c:	462c      	mov	r4, r5
 800e91e:	2c00      	cmp	r4, #0
 800e920:	f2c0 8102 	blt.w	800eb28 <__kernel_rem_pio2+0x4d8>
 800e924:	4b18      	ldr	r3, [pc, #96]	; (800e988 <__kernel_rem_pio2+0x338>)
 800e926:	461e      	mov	r6, r3
 800e928:	ab70      	add	r3, sp, #448	; 0x1c0
 800e92a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e92e:	1b2b      	subs	r3, r5, r4
 800e930:	f04f 0900 	mov.w	r9, #0
 800e934:	f04f 0a00 	mov.w	sl, #0
 800e938:	2700      	movs	r7, #0
 800e93a:	9306      	str	r3, [sp, #24]
 800e93c:	e0e6      	b.n	800eb0c <__kernel_rem_pio2+0x4bc>
 800e93e:	f04f 0b02 	mov.w	fp, #2
 800e942:	e756      	b.n	800e7f2 <__kernel_rem_pio2+0x1a2>
 800e944:	f8d8 3000 	ldr.w	r3, [r8]
 800e948:	bb05      	cbnz	r5, 800e98c <__kernel_rem_pio2+0x33c>
 800e94a:	b123      	cbz	r3, 800e956 <__kernel_rem_pio2+0x306>
 800e94c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e950:	f8c8 3000 	str.w	r3, [r8]
 800e954:	2301      	movs	r3, #1
 800e956:	3201      	adds	r2, #1
 800e958:	f108 0804 	add.w	r8, r8, #4
 800e95c:	461d      	mov	r5, r3
 800e95e:	e74f      	b.n	800e800 <__kernel_rem_pio2+0x1b0>
	...
 800e96c:	3ff00000 	.word	0x3ff00000
 800e970:	08010060 	.word	0x08010060
 800e974:	40200000 	.word	0x40200000
 800e978:	3ff00000 	.word	0x3ff00000
 800e97c:	3e700000 	.word	0x3e700000
 800e980:	41700000 	.word	0x41700000
 800e984:	3fe00000 	.word	0x3fe00000
 800e988:	08010020 	.word	0x08010020
 800e98c:	1acb      	subs	r3, r1, r3
 800e98e:	f8c8 3000 	str.w	r3, [r8]
 800e992:	462b      	mov	r3, r5
 800e994:	e7df      	b.n	800e956 <__kernel_rem_pio2+0x306>
 800e996:	1e62      	subs	r2, r4, #1
 800e998:	ab0c      	add	r3, sp, #48	; 0x30
 800e99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e99e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e9a2:	a90c      	add	r1, sp, #48	; 0x30
 800e9a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e9a8:	e738      	b.n	800e81c <__kernel_rem_pio2+0x1cc>
 800e9aa:	1e62      	subs	r2, r4, #1
 800e9ac:	ab0c      	add	r3, sp, #48	; 0x30
 800e9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e9b6:	e7f4      	b.n	800e9a2 <__kernel_rem_pio2+0x352>
 800e9b8:	a90c      	add	r1, sp, #48	; 0x30
 800e9ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	430a      	orrs	r2, r1
 800e9c2:	e788      	b.n	800e8d6 <__kernel_rem_pio2+0x286>
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e9ca:	2900      	cmp	r1, #0
 800e9cc:	d0fa      	beq.n	800e9c4 <__kernel_rem_pio2+0x374>
 800e9ce:	9a08      	ldr	r2, [sp, #32]
 800e9d0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e9d4:	446a      	add	r2, sp
 800e9d6:	3a98      	subs	r2, #152	; 0x98
 800e9d8:	9208      	str	r2, [sp, #32]
 800e9da:	9a06      	ldr	r2, [sp, #24]
 800e9dc:	a920      	add	r1, sp, #128	; 0x80
 800e9de:	18a2      	adds	r2, r4, r2
 800e9e0:	18e3      	adds	r3, r4, r3
 800e9e2:	f104 0801 	add.w	r8, r4, #1
 800e9e6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e9ea:	9302      	str	r3, [sp, #8]
 800e9ec:	9b02      	ldr	r3, [sp, #8]
 800e9ee:	4543      	cmp	r3, r8
 800e9f0:	da04      	bge.n	800e9fc <__kernel_rem_pio2+0x3ac>
 800e9f2:	461c      	mov	r4, r3
 800e9f4:	e6a2      	b.n	800e73c <__kernel_rem_pio2+0xec>
 800e9f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	e7e4      	b.n	800e9c6 <__kernel_rem_pio2+0x376>
 800e9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ea02:	f7f1 fdb7 	bl	8000574 <__aeabi_i2d>
 800ea06:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ea0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea0c:	46ab      	mov	fp, r5
 800ea0e:	461c      	mov	r4, r3
 800ea10:	f04f 0900 	mov.w	r9, #0
 800ea14:	2600      	movs	r6, #0
 800ea16:	2700      	movs	r7, #0
 800ea18:	9b05      	ldr	r3, [sp, #20]
 800ea1a:	4599      	cmp	r9, r3
 800ea1c:	dd06      	ble.n	800ea2c <__kernel_rem_pio2+0x3dc>
 800ea1e:	9b08      	ldr	r3, [sp, #32]
 800ea20:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ea24:	f108 0801 	add.w	r8, r8, #1
 800ea28:	9308      	str	r3, [sp, #32]
 800ea2a:	e7df      	b.n	800e9ec <__kernel_rem_pio2+0x39c>
 800ea2c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ea30:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ea34:	f7f1 fe08 	bl	8000648 <__aeabi_dmul>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	4639      	mov	r1, r7
 800ea40:	f7f1 fc4c 	bl	80002dc <__adddf3>
 800ea44:	f109 0901 	add.w	r9, r9, #1
 800ea48:	4606      	mov	r6, r0
 800ea4a:	460f      	mov	r7, r1
 800ea4c:	e7e4      	b.n	800ea18 <__kernel_rem_pio2+0x3c8>
 800ea4e:	3d01      	subs	r5, #1
 800ea50:	e747      	b.n	800e8e2 <__kernel_rem_pio2+0x292>
 800ea52:	ec47 6b10 	vmov	d0, r6, r7
 800ea56:	f1ca 0000 	rsb	r0, sl, #0
 800ea5a:	f000 fbb9 	bl	800f1d0 <scalbn>
 800ea5e:	ec57 6b10 	vmov	r6, r7, d0
 800ea62:	4ba0      	ldr	r3, [pc, #640]	; (800ece4 <__kernel_rem_pio2+0x694>)
 800ea64:	ee10 0a10 	vmov	r0, s0
 800ea68:	2200      	movs	r2, #0
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	f7f2 f872 	bl	8000b54 <__aeabi_dcmpge>
 800ea70:	b1f8      	cbz	r0, 800eab2 <__kernel_rem_pio2+0x462>
 800ea72:	4b9d      	ldr	r3, [pc, #628]	; (800ece8 <__kernel_rem_pio2+0x698>)
 800ea74:	2200      	movs	r2, #0
 800ea76:	4630      	mov	r0, r6
 800ea78:	4639      	mov	r1, r7
 800ea7a:	f7f1 fde5 	bl	8000648 <__aeabi_dmul>
 800ea7e:	f7f2 f893 	bl	8000ba8 <__aeabi_d2iz>
 800ea82:	4680      	mov	r8, r0
 800ea84:	f7f1 fd76 	bl	8000574 <__aeabi_i2d>
 800ea88:	4b96      	ldr	r3, [pc, #600]	; (800ece4 <__kernel_rem_pio2+0x694>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f7f1 fddc 	bl	8000648 <__aeabi_dmul>
 800ea90:	460b      	mov	r3, r1
 800ea92:	4602      	mov	r2, r0
 800ea94:	4639      	mov	r1, r7
 800ea96:	4630      	mov	r0, r6
 800ea98:	f7f1 fc1e 	bl	80002d8 <__aeabi_dsub>
 800ea9c:	f7f2 f884 	bl	8000ba8 <__aeabi_d2iz>
 800eaa0:	1c65      	adds	r5, r4, #1
 800eaa2:	ab0c      	add	r3, sp, #48	; 0x30
 800eaa4:	f10a 0a18 	add.w	sl, sl, #24
 800eaa8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eaac:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800eab0:	e71f      	b.n	800e8f2 <__kernel_rem_pio2+0x2a2>
 800eab2:	4630      	mov	r0, r6
 800eab4:	4639      	mov	r1, r7
 800eab6:	f7f2 f877 	bl	8000ba8 <__aeabi_d2iz>
 800eaba:	ab0c      	add	r3, sp, #48	; 0x30
 800eabc:	4625      	mov	r5, r4
 800eabe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eac2:	e716      	b.n	800e8f2 <__kernel_rem_pio2+0x2a2>
 800eac4:	ab0c      	add	r3, sp, #48	; 0x30
 800eac6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eaca:	f7f1 fd53 	bl	8000574 <__aeabi_i2d>
 800eace:	4632      	mov	r2, r6
 800ead0:	463b      	mov	r3, r7
 800ead2:	f7f1 fdb9 	bl	8000648 <__aeabi_dmul>
 800ead6:	4642      	mov	r2, r8
 800ead8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800eadc:	464b      	mov	r3, r9
 800eade:	4630      	mov	r0, r6
 800eae0:	4639      	mov	r1, r7
 800eae2:	f7f1 fdb1 	bl	8000648 <__aeabi_dmul>
 800eae6:	3c01      	subs	r4, #1
 800eae8:	4606      	mov	r6, r0
 800eaea:	460f      	mov	r7, r1
 800eaec:	e713      	b.n	800e916 <__kernel_rem_pio2+0x2c6>
 800eaee:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800eaf2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800eaf6:	f7f1 fda7 	bl	8000648 <__aeabi_dmul>
 800eafa:	4602      	mov	r2, r0
 800eafc:	460b      	mov	r3, r1
 800eafe:	4648      	mov	r0, r9
 800eb00:	4651      	mov	r1, sl
 800eb02:	f7f1 fbeb 	bl	80002dc <__adddf3>
 800eb06:	3701      	adds	r7, #1
 800eb08:	4681      	mov	r9, r0
 800eb0a:	468a      	mov	sl, r1
 800eb0c:	9b00      	ldr	r3, [sp, #0]
 800eb0e:	429f      	cmp	r7, r3
 800eb10:	dc02      	bgt.n	800eb18 <__kernel_rem_pio2+0x4c8>
 800eb12:	9b06      	ldr	r3, [sp, #24]
 800eb14:	429f      	cmp	r7, r3
 800eb16:	ddea      	ble.n	800eaee <__kernel_rem_pio2+0x49e>
 800eb18:	9a06      	ldr	r2, [sp, #24]
 800eb1a:	ab48      	add	r3, sp, #288	; 0x120
 800eb1c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800eb20:	e9c6 9a00 	strd	r9, sl, [r6]
 800eb24:	3c01      	subs	r4, #1
 800eb26:	e6fa      	b.n	800e91e <__kernel_rem_pio2+0x2ce>
 800eb28:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800eb2a:	2b02      	cmp	r3, #2
 800eb2c:	dc0b      	bgt.n	800eb46 <__kernel_rem_pio2+0x4f6>
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	dc39      	bgt.n	800eba6 <__kernel_rem_pio2+0x556>
 800eb32:	d05d      	beq.n	800ebf0 <__kernel_rem_pio2+0x5a0>
 800eb34:	9b02      	ldr	r3, [sp, #8]
 800eb36:	f003 0007 	and.w	r0, r3, #7
 800eb3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800eb3e:	ecbd 8b02 	vpop	{d8}
 800eb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb46:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800eb48:	2b03      	cmp	r3, #3
 800eb4a:	d1f3      	bne.n	800eb34 <__kernel_rem_pio2+0x4e4>
 800eb4c:	9b05      	ldr	r3, [sp, #20]
 800eb4e:	9500      	str	r5, [sp, #0]
 800eb50:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800eb54:	eb0d 0403 	add.w	r4, sp, r3
 800eb58:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800eb5c:	46a2      	mov	sl, r4
 800eb5e:	9b00      	ldr	r3, [sp, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	f1aa 0a08 	sub.w	sl, sl, #8
 800eb66:	dc69      	bgt.n	800ec3c <__kernel_rem_pio2+0x5ec>
 800eb68:	46aa      	mov	sl, r5
 800eb6a:	f1ba 0f01 	cmp.w	sl, #1
 800eb6e:	f1a4 0408 	sub.w	r4, r4, #8
 800eb72:	f300 8083 	bgt.w	800ec7c <__kernel_rem_pio2+0x62c>
 800eb76:	9c05      	ldr	r4, [sp, #20]
 800eb78:	ab48      	add	r3, sp, #288	; 0x120
 800eb7a:	441c      	add	r4, r3
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	2100      	movs	r1, #0
 800eb80:	2d01      	cmp	r5, #1
 800eb82:	f300 809a 	bgt.w	800ecba <__kernel_rem_pio2+0x66a>
 800eb86:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800eb8a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800eb8e:	f1bb 0f00 	cmp.w	fp, #0
 800eb92:	f040 8098 	bne.w	800ecc6 <__kernel_rem_pio2+0x676>
 800eb96:	9b04      	ldr	r3, [sp, #16]
 800eb98:	e9c3 7800 	strd	r7, r8, [r3]
 800eb9c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800eba0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800eba4:	e7c6      	b.n	800eb34 <__kernel_rem_pio2+0x4e4>
 800eba6:	9e05      	ldr	r6, [sp, #20]
 800eba8:	ab48      	add	r3, sp, #288	; 0x120
 800ebaa:	441e      	add	r6, r3
 800ebac:	462c      	mov	r4, r5
 800ebae:	2000      	movs	r0, #0
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	2c00      	cmp	r4, #0
 800ebb4:	da33      	bge.n	800ec1e <__kernel_rem_pio2+0x5ce>
 800ebb6:	f1bb 0f00 	cmp.w	fp, #0
 800ebba:	d036      	beq.n	800ec2a <__kernel_rem_pio2+0x5da>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebc2:	9c04      	ldr	r4, [sp, #16]
 800ebc4:	e9c4 2300 	strd	r2, r3, [r4]
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ebd0:	f7f1 fb82 	bl	80002d8 <__aeabi_dsub>
 800ebd4:	ae4a      	add	r6, sp, #296	; 0x128
 800ebd6:	2401      	movs	r4, #1
 800ebd8:	42a5      	cmp	r5, r4
 800ebda:	da29      	bge.n	800ec30 <__kernel_rem_pio2+0x5e0>
 800ebdc:	f1bb 0f00 	cmp.w	fp, #0
 800ebe0:	d002      	beq.n	800ebe8 <__kernel_rem_pio2+0x598>
 800ebe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	9b04      	ldr	r3, [sp, #16]
 800ebea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ebee:	e7a1      	b.n	800eb34 <__kernel_rem_pio2+0x4e4>
 800ebf0:	9c05      	ldr	r4, [sp, #20]
 800ebf2:	ab48      	add	r3, sp, #288	; 0x120
 800ebf4:	441c      	add	r4, r3
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	2d00      	cmp	r5, #0
 800ebfc:	da09      	bge.n	800ec12 <__kernel_rem_pio2+0x5c2>
 800ebfe:	f1bb 0f00 	cmp.w	fp, #0
 800ec02:	d002      	beq.n	800ec0a <__kernel_rem_pio2+0x5ba>
 800ec04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec08:	4619      	mov	r1, r3
 800ec0a:	9b04      	ldr	r3, [sp, #16]
 800ec0c:	e9c3 0100 	strd	r0, r1, [r3]
 800ec10:	e790      	b.n	800eb34 <__kernel_rem_pio2+0x4e4>
 800ec12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ec16:	f7f1 fb61 	bl	80002dc <__adddf3>
 800ec1a:	3d01      	subs	r5, #1
 800ec1c:	e7ed      	b.n	800ebfa <__kernel_rem_pio2+0x5aa>
 800ec1e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ec22:	f7f1 fb5b 	bl	80002dc <__adddf3>
 800ec26:	3c01      	subs	r4, #1
 800ec28:	e7c3      	b.n	800ebb2 <__kernel_rem_pio2+0x562>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	e7c8      	b.n	800ebc2 <__kernel_rem_pio2+0x572>
 800ec30:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ec34:	f7f1 fb52 	bl	80002dc <__adddf3>
 800ec38:	3401      	adds	r4, #1
 800ec3a:	e7cd      	b.n	800ebd8 <__kernel_rem_pio2+0x588>
 800ec3c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec40:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ec44:	9b00      	ldr	r3, [sp, #0]
 800ec46:	3b01      	subs	r3, #1
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	4632      	mov	r2, r6
 800ec4c:	463b      	mov	r3, r7
 800ec4e:	4640      	mov	r0, r8
 800ec50:	4649      	mov	r1, r9
 800ec52:	f7f1 fb43 	bl	80002dc <__adddf3>
 800ec56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	4640      	mov	r0, r8
 800ec60:	4649      	mov	r1, r9
 800ec62:	f7f1 fb39 	bl	80002d8 <__aeabi_dsub>
 800ec66:	4632      	mov	r2, r6
 800ec68:	463b      	mov	r3, r7
 800ec6a:	f7f1 fb37 	bl	80002dc <__adddf3>
 800ec6e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ec72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec76:	ed8a 7b00 	vstr	d7, [sl]
 800ec7a:	e770      	b.n	800eb5e <__kernel_rem_pio2+0x50e>
 800ec7c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ec80:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ec84:	4640      	mov	r0, r8
 800ec86:	4632      	mov	r2, r6
 800ec88:	463b      	mov	r3, r7
 800ec8a:	4649      	mov	r1, r9
 800ec8c:	f7f1 fb26 	bl	80002dc <__adddf3>
 800ec90:	e9cd 0100 	strd	r0, r1, [sp]
 800ec94:	4602      	mov	r2, r0
 800ec96:	460b      	mov	r3, r1
 800ec98:	4640      	mov	r0, r8
 800ec9a:	4649      	mov	r1, r9
 800ec9c:	f7f1 fb1c 	bl	80002d8 <__aeabi_dsub>
 800eca0:	4632      	mov	r2, r6
 800eca2:	463b      	mov	r3, r7
 800eca4:	f7f1 fb1a 	bl	80002dc <__adddf3>
 800eca8:	ed9d 7b00 	vldr	d7, [sp]
 800ecac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ecb0:	ed84 7b00 	vstr	d7, [r4]
 800ecb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecb8:	e757      	b.n	800eb6a <__kernel_rem_pio2+0x51a>
 800ecba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ecbe:	f7f1 fb0d 	bl	80002dc <__adddf3>
 800ecc2:	3d01      	subs	r5, #1
 800ecc4:	e75c      	b.n	800eb80 <__kernel_rem_pio2+0x530>
 800ecc6:	9b04      	ldr	r3, [sp, #16]
 800ecc8:	9a04      	ldr	r2, [sp, #16]
 800ecca:	601f      	str	r7, [r3, #0]
 800eccc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ecd0:	605c      	str	r4, [r3, #4]
 800ecd2:	609d      	str	r5, [r3, #8]
 800ecd4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ecd8:	60d3      	str	r3, [r2, #12]
 800ecda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecde:	6110      	str	r0, [r2, #16]
 800ece0:	6153      	str	r3, [r2, #20]
 800ece2:	e727      	b.n	800eb34 <__kernel_rem_pio2+0x4e4>
 800ece4:	41700000 	.word	0x41700000
 800ece8:	3e700000 	.word	0x3e700000

0800ecec <__kernel_rem_pio2f>:
 800ecec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf0:	ed2d 8b04 	vpush	{d8-d9}
 800ecf4:	b0d9      	sub	sp, #356	; 0x164
 800ecf6:	4688      	mov	r8, r1
 800ecf8:	9002      	str	r0, [sp, #8]
 800ecfa:	49b8      	ldr	r1, [pc, #736]	; (800efdc <__kernel_rem_pio2f+0x2f0>)
 800ecfc:	9866      	ldr	r0, [sp, #408]	; 0x198
 800ecfe:	9301      	str	r3, [sp, #4]
 800ed00:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800ed04:	9901      	ldr	r1, [sp, #4]
 800ed06:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800ed08:	f101 3bff 	add.w	fp, r1, #4294967295
 800ed0c:	1d11      	adds	r1, r2, #4
 800ed0e:	db25      	blt.n	800ed5c <__kernel_rem_pio2f+0x70>
 800ed10:	1ed0      	subs	r0, r2, #3
 800ed12:	bf48      	it	mi
 800ed14:	1d10      	addmi	r0, r2, #4
 800ed16:	10c0      	asrs	r0, r0, #3
 800ed18:	1c45      	adds	r5, r0, #1
 800ed1a:	00e9      	lsls	r1, r5, #3
 800ed1c:	eba0 070b 	sub.w	r7, r0, fp
 800ed20:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800efec <__kernel_rem_pio2f+0x300>
 800ed24:	9103      	str	r1, [sp, #12]
 800ed26:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800ed2a:	eb0a 0c0b 	add.w	ip, sl, fp
 800ed2e:	ae1c      	add	r6, sp, #112	; 0x70
 800ed30:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800ed34:	2400      	movs	r4, #0
 800ed36:	4564      	cmp	r4, ip
 800ed38:	dd12      	ble.n	800ed60 <__kernel_rem_pio2f+0x74>
 800ed3a:	9901      	ldr	r1, [sp, #4]
 800ed3c:	ac1c      	add	r4, sp, #112	; 0x70
 800ed3e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800ed42:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800ed46:	f04f 0c00 	mov.w	ip, #0
 800ed4a:	45d4      	cmp	ip, sl
 800ed4c:	dc27      	bgt.n	800ed9e <__kernel_rem_pio2f+0xb2>
 800ed4e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ed52:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800efec <__kernel_rem_pio2f+0x300>
 800ed56:	4627      	mov	r7, r4
 800ed58:	2600      	movs	r6, #0
 800ed5a:	e016      	b.n	800ed8a <__kernel_rem_pio2f+0x9e>
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	e7db      	b.n	800ed18 <__kernel_rem_pio2f+0x2c>
 800ed60:	42e7      	cmn	r7, r4
 800ed62:	bf5d      	ittte	pl
 800ed64:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800ed68:	ee07 1a90 	vmovpl	s15, r1
 800ed6c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ed70:	eef0 7a47 	vmovmi.f32	s15, s14
 800ed74:	ece6 7a01 	vstmia	r6!, {s15}
 800ed78:	3401      	adds	r4, #1
 800ed7a:	e7dc      	b.n	800ed36 <__kernel_rem_pio2f+0x4a>
 800ed7c:	ecfe 6a01 	vldmia	lr!, {s13}
 800ed80:	ed97 7a00 	vldr	s14, [r7]
 800ed84:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ed88:	3601      	adds	r6, #1
 800ed8a:	455e      	cmp	r6, fp
 800ed8c:	f1a7 0704 	sub.w	r7, r7, #4
 800ed90:	ddf4      	ble.n	800ed7c <__kernel_rem_pio2f+0x90>
 800ed92:	ece9 7a01 	vstmia	r9!, {s15}
 800ed96:	f10c 0c01 	add.w	ip, ip, #1
 800ed9a:	3404      	adds	r4, #4
 800ed9c:	e7d5      	b.n	800ed4a <__kernel_rem_pio2f+0x5e>
 800ed9e:	a908      	add	r1, sp, #32
 800eda0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eda4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800eda8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800efe8 <__kernel_rem_pio2f+0x2fc>
 800edac:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800efe4 <__kernel_rem_pio2f+0x2f8>
 800edb0:	9105      	str	r1, [sp, #20]
 800edb2:	9304      	str	r3, [sp, #16]
 800edb4:	4656      	mov	r6, sl
 800edb6:	00b3      	lsls	r3, r6, #2
 800edb8:	9306      	str	r3, [sp, #24]
 800edba:	ab58      	add	r3, sp, #352	; 0x160
 800edbc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800edc0:	ac08      	add	r4, sp, #32
 800edc2:	ab44      	add	r3, sp, #272	; 0x110
 800edc4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800edc8:	46a4      	mov	ip, r4
 800edca:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800edce:	4637      	mov	r7, r6
 800edd0:	2f00      	cmp	r7, #0
 800edd2:	f1a0 0004 	sub.w	r0, r0, #4
 800edd6:	dc4a      	bgt.n	800ee6e <__kernel_rem_pio2f+0x182>
 800edd8:	4628      	mov	r0, r5
 800edda:	9207      	str	r2, [sp, #28]
 800eddc:	f000 fa76 	bl	800f2cc <scalbnf>
 800ede0:	eeb0 8a40 	vmov.f32	s16, s0
 800ede4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ede8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800edec:	f000 fb54 	bl	800f498 <floorf>
 800edf0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800edf4:	eea0 8a67 	vfms.f32	s16, s0, s15
 800edf8:	2d00      	cmp	r5, #0
 800edfa:	9a07      	ldr	r2, [sp, #28]
 800edfc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ee00:	ee17 9a90 	vmov	r9, s15
 800ee04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee08:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ee0c:	dd41      	ble.n	800ee92 <__kernel_rem_pio2f+0x1a6>
 800ee0e:	f106 3cff 	add.w	ip, r6, #4294967295
 800ee12:	ab08      	add	r3, sp, #32
 800ee14:	f1c5 0e08 	rsb	lr, r5, #8
 800ee18:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800ee1c:	fa47 f00e 	asr.w	r0, r7, lr
 800ee20:	4481      	add	r9, r0
 800ee22:	fa00 f00e 	lsl.w	r0, r0, lr
 800ee26:	1a3f      	subs	r7, r7, r0
 800ee28:	f1c5 0007 	rsb	r0, r5, #7
 800ee2c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800ee30:	4107      	asrs	r7, r0
 800ee32:	2f00      	cmp	r7, #0
 800ee34:	dd3c      	ble.n	800eeb0 <__kernel_rem_pio2f+0x1c4>
 800ee36:	f04f 0e00 	mov.w	lr, #0
 800ee3a:	f109 0901 	add.w	r9, r9, #1
 800ee3e:	4671      	mov	r1, lr
 800ee40:	4576      	cmp	r6, lr
 800ee42:	dc67      	bgt.n	800ef14 <__kernel_rem_pio2f+0x228>
 800ee44:	2d00      	cmp	r5, #0
 800ee46:	dd03      	ble.n	800ee50 <__kernel_rem_pio2f+0x164>
 800ee48:	2d01      	cmp	r5, #1
 800ee4a:	d074      	beq.n	800ef36 <__kernel_rem_pio2f+0x24a>
 800ee4c:	2d02      	cmp	r5, #2
 800ee4e:	d07b      	beq.n	800ef48 <__kernel_rem_pio2f+0x25c>
 800ee50:	2f02      	cmp	r7, #2
 800ee52:	d12d      	bne.n	800eeb0 <__kernel_rem_pio2f+0x1c4>
 800ee54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ee58:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ee5c:	b341      	cbz	r1, 800eeb0 <__kernel_rem_pio2f+0x1c4>
 800ee5e:	4628      	mov	r0, r5
 800ee60:	9207      	str	r2, [sp, #28]
 800ee62:	f000 fa33 	bl	800f2cc <scalbnf>
 800ee66:	9a07      	ldr	r2, [sp, #28]
 800ee68:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ee6c:	e020      	b.n	800eeb0 <__kernel_rem_pio2f+0x1c4>
 800ee6e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ee72:	3f01      	subs	r7, #1
 800ee74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee7c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ee80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ee84:	ecac 0a01 	vstmia	ip!, {s0}
 800ee88:	ed90 0a00 	vldr	s0, [r0]
 800ee8c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ee90:	e79e      	b.n	800edd0 <__kernel_rem_pio2f+0xe4>
 800ee92:	d105      	bne.n	800eea0 <__kernel_rem_pio2f+0x1b4>
 800ee94:	1e70      	subs	r0, r6, #1
 800ee96:	ab08      	add	r3, sp, #32
 800ee98:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ee9c:	11ff      	asrs	r7, r7, #7
 800ee9e:	e7c8      	b.n	800ee32 <__kernel_rem_pio2f+0x146>
 800eea0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eea4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800eea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeac:	da30      	bge.n	800ef10 <__kernel_rem_pio2f+0x224>
 800eeae:	2700      	movs	r7, #0
 800eeb0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800eeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb8:	f040 809a 	bne.w	800eff0 <__kernel_rem_pio2f+0x304>
 800eebc:	1e74      	subs	r4, r6, #1
 800eebe:	46a4      	mov	ip, r4
 800eec0:	2100      	movs	r1, #0
 800eec2:	45d4      	cmp	ip, sl
 800eec4:	da47      	bge.n	800ef56 <__kernel_rem_pio2f+0x26a>
 800eec6:	2900      	cmp	r1, #0
 800eec8:	d063      	beq.n	800ef92 <__kernel_rem_pio2f+0x2a6>
 800eeca:	ab08      	add	r3, sp, #32
 800eecc:	3d08      	subs	r5, #8
 800eece:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d07f      	beq.n	800efd6 <__kernel_rem_pio2f+0x2ea>
 800eed6:	4628      	mov	r0, r5
 800eed8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eedc:	f000 f9f6 	bl	800f2cc <scalbnf>
 800eee0:	1c63      	adds	r3, r4, #1
 800eee2:	aa44      	add	r2, sp, #272	; 0x110
 800eee4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800efe8 <__kernel_rem_pio2f+0x2fc>
 800eee8:	0099      	lsls	r1, r3, #2
 800eeea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eeee:	4623      	mov	r3, r4
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	f280 80ad 	bge.w	800f050 <__kernel_rem_pio2f+0x364>
 800eef6:	4623      	mov	r3, r4
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f2c0 80cb 	blt.w	800f094 <__kernel_rem_pio2f+0x3a8>
 800eefe:	aa44      	add	r2, sp, #272	; 0x110
 800ef00:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ef04:	4e36      	ldr	r6, [pc, #216]	; (800efe0 <__kernel_rem_pio2f+0x2f4>)
 800ef06:	eddf 7a39 	vldr	s15, [pc, #228]	; 800efec <__kernel_rem_pio2f+0x300>
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	1ae2      	subs	r2, r4, r3
 800ef0e:	e0b6      	b.n	800f07e <__kernel_rem_pio2f+0x392>
 800ef10:	2702      	movs	r7, #2
 800ef12:	e790      	b.n	800ee36 <__kernel_rem_pio2f+0x14a>
 800ef14:	6820      	ldr	r0, [r4, #0]
 800ef16:	b949      	cbnz	r1, 800ef2c <__kernel_rem_pio2f+0x240>
 800ef18:	b118      	cbz	r0, 800ef22 <__kernel_rem_pio2f+0x236>
 800ef1a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ef1e:	6020      	str	r0, [r4, #0]
 800ef20:	2001      	movs	r0, #1
 800ef22:	f10e 0e01 	add.w	lr, lr, #1
 800ef26:	3404      	adds	r4, #4
 800ef28:	4601      	mov	r1, r0
 800ef2a:	e789      	b.n	800ee40 <__kernel_rem_pio2f+0x154>
 800ef2c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ef30:	6020      	str	r0, [r4, #0]
 800ef32:	4608      	mov	r0, r1
 800ef34:	e7f5      	b.n	800ef22 <__kernel_rem_pio2f+0x236>
 800ef36:	1e74      	subs	r4, r6, #1
 800ef38:	ab08      	add	r3, sp, #32
 800ef3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ef3e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ef42:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ef46:	e783      	b.n	800ee50 <__kernel_rem_pio2f+0x164>
 800ef48:	1e74      	subs	r4, r6, #1
 800ef4a:	ab08      	add	r3, sp, #32
 800ef4c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ef50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ef54:	e7f5      	b.n	800ef42 <__kernel_rem_pio2f+0x256>
 800ef56:	ab08      	add	r3, sp, #32
 800ef58:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800ef5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ef60:	4301      	orrs	r1, r0
 800ef62:	e7ae      	b.n	800eec2 <__kernel_rem_pio2f+0x1d6>
 800ef64:	3001      	adds	r0, #1
 800ef66:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800ef6a:	2f00      	cmp	r7, #0
 800ef6c:	d0fa      	beq.n	800ef64 <__kernel_rem_pio2f+0x278>
 800ef6e:	9b06      	ldr	r3, [sp, #24]
 800ef70:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ef74:	eb0d 0403 	add.w	r4, sp, r3
 800ef78:	9b01      	ldr	r3, [sp, #4]
 800ef7a:	18f7      	adds	r7, r6, r3
 800ef7c:	ab1c      	add	r3, sp, #112	; 0x70
 800ef7e:	f106 0c01 	add.w	ip, r6, #1
 800ef82:	3c4c      	subs	r4, #76	; 0x4c
 800ef84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef88:	4430      	add	r0, r6
 800ef8a:	4560      	cmp	r0, ip
 800ef8c:	da04      	bge.n	800ef98 <__kernel_rem_pio2f+0x2ac>
 800ef8e:	4606      	mov	r6, r0
 800ef90:	e711      	b.n	800edb6 <__kernel_rem_pio2f+0xca>
 800ef92:	9c05      	ldr	r4, [sp, #20]
 800ef94:	2001      	movs	r0, #1
 800ef96:	e7e6      	b.n	800ef66 <__kernel_rem_pio2f+0x27a>
 800ef98:	9b04      	ldr	r3, [sp, #16]
 800ef9a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ef9e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800efa2:	9306      	str	r3, [sp, #24]
 800efa4:	ee07 3a90 	vmov	s15, r3
 800efa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efac:	2600      	movs	r6, #0
 800efae:	ece7 7a01 	vstmia	r7!, {s15}
 800efb2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800efec <__kernel_rem_pio2f+0x300>
 800efb6:	46b9      	mov	r9, r7
 800efb8:	455e      	cmp	r6, fp
 800efba:	dd04      	ble.n	800efc6 <__kernel_rem_pio2f+0x2da>
 800efbc:	ece4 7a01 	vstmia	r4!, {s15}
 800efc0:	f10c 0c01 	add.w	ip, ip, #1
 800efc4:	e7e1      	b.n	800ef8a <__kernel_rem_pio2f+0x29e>
 800efc6:	ecfe 6a01 	vldmia	lr!, {s13}
 800efca:	ed39 7a01 	vldmdb	r9!, {s14}
 800efce:	3601      	adds	r6, #1
 800efd0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800efd4:	e7f0      	b.n	800efb8 <__kernel_rem_pio2f+0x2cc>
 800efd6:	3c01      	subs	r4, #1
 800efd8:	e777      	b.n	800eeca <__kernel_rem_pio2f+0x1de>
 800efda:	bf00      	nop
 800efdc:	0801009c 	.word	0x0801009c
 800efe0:	08010070 	.word	0x08010070
 800efe4:	43800000 	.word	0x43800000
 800efe8:	3b800000 	.word	0x3b800000
 800efec:	00000000 	.word	0x00000000
 800eff0:	9b03      	ldr	r3, [sp, #12]
 800eff2:	eeb0 0a48 	vmov.f32	s0, s16
 800eff6:	1a98      	subs	r0, r3, r2
 800eff8:	f000 f968 	bl	800f2cc <scalbnf>
 800effc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800efe4 <__kernel_rem_pio2f+0x2f8>
 800f000:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f008:	db19      	blt.n	800f03e <__kernel_rem_pio2f+0x352>
 800f00a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800efe8 <__kernel_rem_pio2f+0x2fc>
 800f00e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f012:	aa08      	add	r2, sp, #32
 800f014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f018:	1c74      	adds	r4, r6, #1
 800f01a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f01e:	3508      	adds	r5, #8
 800f020:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f028:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f02c:	ee10 3a10 	vmov	r3, s0
 800f030:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f034:	ee17 3a90 	vmov	r3, s15
 800f038:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f03c:	e74b      	b.n	800eed6 <__kernel_rem_pio2f+0x1ea>
 800f03e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f042:	aa08      	add	r2, sp, #32
 800f044:	ee10 3a10 	vmov	r3, s0
 800f048:	4634      	mov	r4, r6
 800f04a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f04e:	e742      	b.n	800eed6 <__kernel_rem_pio2f+0x1ea>
 800f050:	a808      	add	r0, sp, #32
 800f052:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800f056:	9001      	str	r0, [sp, #4]
 800f058:	ee07 0a90 	vmov	s15, r0
 800f05c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f060:	3b01      	subs	r3, #1
 800f062:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f066:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f06a:	ed62 7a01 	vstmdb	r2!, {s15}
 800f06e:	e73f      	b.n	800eef0 <__kernel_rem_pio2f+0x204>
 800f070:	ecf6 6a01 	vldmia	r6!, {s13}
 800f074:	ecb5 7a01 	vldmia	r5!, {s14}
 800f078:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f07c:	3001      	adds	r0, #1
 800f07e:	4550      	cmp	r0, sl
 800f080:	dc01      	bgt.n	800f086 <__kernel_rem_pio2f+0x39a>
 800f082:	4290      	cmp	r0, r2
 800f084:	ddf4      	ble.n	800f070 <__kernel_rem_pio2f+0x384>
 800f086:	a858      	add	r0, sp, #352	; 0x160
 800f088:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f08c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800f090:	3b01      	subs	r3, #1
 800f092:	e731      	b.n	800eef8 <__kernel_rem_pio2f+0x20c>
 800f094:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800f096:	2b02      	cmp	r3, #2
 800f098:	dc09      	bgt.n	800f0ae <__kernel_rem_pio2f+0x3c2>
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	dc2b      	bgt.n	800f0f6 <__kernel_rem_pio2f+0x40a>
 800f09e:	d044      	beq.n	800f12a <__kernel_rem_pio2f+0x43e>
 800f0a0:	f009 0007 	and.w	r0, r9, #7
 800f0a4:	b059      	add	sp, #356	; 0x164
 800f0a6:	ecbd 8b04 	vpop	{d8-d9}
 800f0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ae:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800f0b0:	2b03      	cmp	r3, #3
 800f0b2:	d1f5      	bne.n	800f0a0 <__kernel_rem_pio2f+0x3b4>
 800f0b4:	aa30      	add	r2, sp, #192	; 0xc0
 800f0b6:	1f0b      	subs	r3, r1, #4
 800f0b8:	4413      	add	r3, r2
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	4620      	mov	r0, r4
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	f1a2 0204 	sub.w	r2, r2, #4
 800f0c4:	dc52      	bgt.n	800f16c <__kernel_rem_pio2f+0x480>
 800f0c6:	4622      	mov	r2, r4
 800f0c8:	2a01      	cmp	r2, #1
 800f0ca:	f1a3 0304 	sub.w	r3, r3, #4
 800f0ce:	dc5d      	bgt.n	800f18c <__kernel_rem_pio2f+0x4a0>
 800f0d0:	ab30      	add	r3, sp, #192	; 0xc0
 800f0d2:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800efec <__kernel_rem_pio2f+0x300>
 800f0d6:	440b      	add	r3, r1
 800f0d8:	2c01      	cmp	r4, #1
 800f0da:	dc67      	bgt.n	800f1ac <__kernel_rem_pio2f+0x4c0>
 800f0dc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f0e0:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800f0e4:	2f00      	cmp	r7, #0
 800f0e6:	d167      	bne.n	800f1b8 <__kernel_rem_pio2f+0x4cc>
 800f0e8:	edc8 6a00 	vstr	s13, [r8]
 800f0ec:	ed88 7a01 	vstr	s14, [r8, #4]
 800f0f0:	edc8 7a02 	vstr	s15, [r8, #8]
 800f0f4:	e7d4      	b.n	800f0a0 <__kernel_rem_pio2f+0x3b4>
 800f0f6:	ab30      	add	r3, sp, #192	; 0xc0
 800f0f8:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800efec <__kernel_rem_pio2f+0x300>
 800f0fc:	440b      	add	r3, r1
 800f0fe:	4622      	mov	r2, r4
 800f100:	2a00      	cmp	r2, #0
 800f102:	da24      	bge.n	800f14e <__kernel_rem_pio2f+0x462>
 800f104:	b34f      	cbz	r7, 800f15a <__kernel_rem_pio2f+0x46e>
 800f106:	eef1 7a47 	vneg.f32	s15, s14
 800f10a:	edc8 7a00 	vstr	s15, [r8]
 800f10e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800f112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f116:	aa31      	add	r2, sp, #196	; 0xc4
 800f118:	2301      	movs	r3, #1
 800f11a:	429c      	cmp	r4, r3
 800f11c:	da20      	bge.n	800f160 <__kernel_rem_pio2f+0x474>
 800f11e:	b10f      	cbz	r7, 800f124 <__kernel_rem_pio2f+0x438>
 800f120:	eef1 7a67 	vneg.f32	s15, s15
 800f124:	edc8 7a01 	vstr	s15, [r8, #4]
 800f128:	e7ba      	b.n	800f0a0 <__kernel_rem_pio2f+0x3b4>
 800f12a:	ab30      	add	r3, sp, #192	; 0xc0
 800f12c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800efec <__kernel_rem_pio2f+0x300>
 800f130:	440b      	add	r3, r1
 800f132:	2c00      	cmp	r4, #0
 800f134:	da05      	bge.n	800f142 <__kernel_rem_pio2f+0x456>
 800f136:	b10f      	cbz	r7, 800f13c <__kernel_rem_pio2f+0x450>
 800f138:	eef1 7a67 	vneg.f32	s15, s15
 800f13c:	edc8 7a00 	vstr	s15, [r8]
 800f140:	e7ae      	b.n	800f0a0 <__kernel_rem_pio2f+0x3b4>
 800f142:	ed33 7a01 	vldmdb	r3!, {s14}
 800f146:	3c01      	subs	r4, #1
 800f148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f14c:	e7f1      	b.n	800f132 <__kernel_rem_pio2f+0x446>
 800f14e:	ed73 7a01 	vldmdb	r3!, {s15}
 800f152:	3a01      	subs	r2, #1
 800f154:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f158:	e7d2      	b.n	800f100 <__kernel_rem_pio2f+0x414>
 800f15a:	eef0 7a47 	vmov.f32	s15, s14
 800f15e:	e7d4      	b.n	800f10a <__kernel_rem_pio2f+0x41e>
 800f160:	ecb2 7a01 	vldmia	r2!, {s14}
 800f164:	3301      	adds	r3, #1
 800f166:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f16a:	e7d6      	b.n	800f11a <__kernel_rem_pio2f+0x42e>
 800f16c:	edd2 7a00 	vldr	s15, [r2]
 800f170:	edd2 6a01 	vldr	s13, [r2, #4]
 800f174:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f178:	3801      	subs	r0, #1
 800f17a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f17e:	ed82 7a00 	vstr	s14, [r2]
 800f182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f186:	edc2 7a01 	vstr	s15, [r2, #4]
 800f18a:	e798      	b.n	800f0be <__kernel_rem_pio2f+0x3d2>
 800f18c:	edd3 7a00 	vldr	s15, [r3]
 800f190:	edd3 6a01 	vldr	s13, [r3, #4]
 800f194:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f198:	3a01      	subs	r2, #1
 800f19a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f19e:	ed83 7a00 	vstr	s14, [r3]
 800f1a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1a6:	edc3 7a01 	vstr	s15, [r3, #4]
 800f1aa:	e78d      	b.n	800f0c8 <__kernel_rem_pio2f+0x3dc>
 800f1ac:	ed33 7a01 	vldmdb	r3!, {s14}
 800f1b0:	3c01      	subs	r4, #1
 800f1b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1b6:	e78f      	b.n	800f0d8 <__kernel_rem_pio2f+0x3ec>
 800f1b8:	eef1 6a66 	vneg.f32	s13, s13
 800f1bc:	eeb1 7a47 	vneg.f32	s14, s14
 800f1c0:	edc8 6a00 	vstr	s13, [r8]
 800f1c4:	ed88 7a01 	vstr	s14, [r8, #4]
 800f1c8:	eef1 7a67 	vneg.f32	s15, s15
 800f1cc:	e790      	b.n	800f0f0 <__kernel_rem_pio2f+0x404>
 800f1ce:	bf00      	nop

0800f1d0 <scalbn>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	ec55 4b10 	vmov	r4, r5, d0
 800f1d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f1da:	4606      	mov	r6, r0
 800f1dc:	462b      	mov	r3, r5
 800f1de:	b999      	cbnz	r1, 800f208 <scalbn+0x38>
 800f1e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f1e4:	4323      	orrs	r3, r4
 800f1e6:	d03f      	beq.n	800f268 <scalbn+0x98>
 800f1e8:	4b35      	ldr	r3, [pc, #212]	; (800f2c0 <scalbn+0xf0>)
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	ee10 0a10 	vmov	r0, s0
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f7f1 fa29 	bl	8000648 <__aeabi_dmul>
 800f1f6:	4b33      	ldr	r3, [pc, #204]	; (800f2c4 <scalbn+0xf4>)
 800f1f8:	429e      	cmp	r6, r3
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	460d      	mov	r5, r1
 800f1fe:	da10      	bge.n	800f222 <scalbn+0x52>
 800f200:	a327      	add	r3, pc, #156	; (adr r3, 800f2a0 <scalbn+0xd0>)
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	e01f      	b.n	800f248 <scalbn+0x78>
 800f208:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f20c:	4291      	cmp	r1, r2
 800f20e:	d10c      	bne.n	800f22a <scalbn+0x5a>
 800f210:	ee10 2a10 	vmov	r2, s0
 800f214:	4620      	mov	r0, r4
 800f216:	4629      	mov	r1, r5
 800f218:	f7f1 f860 	bl	80002dc <__adddf3>
 800f21c:	4604      	mov	r4, r0
 800f21e:	460d      	mov	r5, r1
 800f220:	e022      	b.n	800f268 <scalbn+0x98>
 800f222:	460b      	mov	r3, r1
 800f224:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f228:	3936      	subs	r1, #54	; 0x36
 800f22a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f22e:	4296      	cmp	r6, r2
 800f230:	dd0d      	ble.n	800f24e <scalbn+0x7e>
 800f232:	2d00      	cmp	r5, #0
 800f234:	a11c      	add	r1, pc, #112	; (adr r1, 800f2a8 <scalbn+0xd8>)
 800f236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f23a:	da02      	bge.n	800f242 <scalbn+0x72>
 800f23c:	a11c      	add	r1, pc, #112	; (adr r1, 800f2b0 <scalbn+0xe0>)
 800f23e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f242:	a319      	add	r3, pc, #100	; (adr r3, 800f2a8 <scalbn+0xd8>)
 800f244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f248:	f7f1 f9fe 	bl	8000648 <__aeabi_dmul>
 800f24c:	e7e6      	b.n	800f21c <scalbn+0x4c>
 800f24e:	1872      	adds	r2, r6, r1
 800f250:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f254:	428a      	cmp	r2, r1
 800f256:	dcec      	bgt.n	800f232 <scalbn+0x62>
 800f258:	2a00      	cmp	r2, #0
 800f25a:	dd08      	ble.n	800f26e <scalbn+0x9e>
 800f25c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f260:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f264:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f268:	ec45 4b10 	vmov	d0, r4, r5
 800f26c:	bd70      	pop	{r4, r5, r6, pc}
 800f26e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f272:	da08      	bge.n	800f286 <scalbn+0xb6>
 800f274:	2d00      	cmp	r5, #0
 800f276:	a10a      	add	r1, pc, #40	; (adr r1, 800f2a0 <scalbn+0xd0>)
 800f278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f27c:	dac0      	bge.n	800f200 <scalbn+0x30>
 800f27e:	a10e      	add	r1, pc, #56	; (adr r1, 800f2b8 <scalbn+0xe8>)
 800f280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f284:	e7bc      	b.n	800f200 <scalbn+0x30>
 800f286:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f28a:	3236      	adds	r2, #54	; 0x36
 800f28c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f290:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f294:	4620      	mov	r0, r4
 800f296:	4b0c      	ldr	r3, [pc, #48]	; (800f2c8 <scalbn+0xf8>)
 800f298:	2200      	movs	r2, #0
 800f29a:	e7d5      	b.n	800f248 <scalbn+0x78>
 800f29c:	f3af 8000 	nop.w
 800f2a0:	c2f8f359 	.word	0xc2f8f359
 800f2a4:	01a56e1f 	.word	0x01a56e1f
 800f2a8:	8800759c 	.word	0x8800759c
 800f2ac:	7e37e43c 	.word	0x7e37e43c
 800f2b0:	8800759c 	.word	0x8800759c
 800f2b4:	fe37e43c 	.word	0xfe37e43c
 800f2b8:	c2f8f359 	.word	0xc2f8f359
 800f2bc:	81a56e1f 	.word	0x81a56e1f
 800f2c0:	43500000 	.word	0x43500000
 800f2c4:	ffff3cb0 	.word	0xffff3cb0
 800f2c8:	3c900000 	.word	0x3c900000

0800f2cc <scalbnf>:
 800f2cc:	ee10 3a10 	vmov	r3, s0
 800f2d0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f2d4:	d02b      	beq.n	800f32e <scalbnf+0x62>
 800f2d6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f2da:	d302      	bcc.n	800f2e2 <scalbnf+0x16>
 800f2dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f2e0:	4770      	bx	lr
 800f2e2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f2e6:	d123      	bne.n	800f330 <scalbnf+0x64>
 800f2e8:	4b24      	ldr	r3, [pc, #144]	; (800f37c <scalbnf+0xb0>)
 800f2ea:	eddf 7a25 	vldr	s15, [pc, #148]	; 800f380 <scalbnf+0xb4>
 800f2ee:	4298      	cmp	r0, r3
 800f2f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f2f4:	db17      	blt.n	800f326 <scalbnf+0x5a>
 800f2f6:	ee10 3a10 	vmov	r3, s0
 800f2fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f2fe:	3a19      	subs	r2, #25
 800f300:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f304:	4288      	cmp	r0, r1
 800f306:	dd15      	ble.n	800f334 <scalbnf+0x68>
 800f308:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f384 <scalbnf+0xb8>
 800f30c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800f388 <scalbnf+0xbc>
 800f310:	ee10 3a10 	vmov	r3, s0
 800f314:	eeb0 7a67 	vmov.f32	s14, s15
 800f318:	2b00      	cmp	r3, #0
 800f31a:	bfb8      	it	lt
 800f31c:	eef0 7a66 	vmovlt.f32	s15, s13
 800f320:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f324:	4770      	bx	lr
 800f326:	eddf 7a19 	vldr	s15, [pc, #100]	; 800f38c <scalbnf+0xc0>
 800f32a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f32e:	4770      	bx	lr
 800f330:	0dd2      	lsrs	r2, r2, #23
 800f332:	e7e5      	b.n	800f300 <scalbnf+0x34>
 800f334:	4410      	add	r0, r2
 800f336:	28fe      	cmp	r0, #254	; 0xfe
 800f338:	dce6      	bgt.n	800f308 <scalbnf+0x3c>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	dd06      	ble.n	800f34c <scalbnf+0x80>
 800f33e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f342:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f346:	ee00 3a10 	vmov	s0, r3
 800f34a:	4770      	bx	lr
 800f34c:	f110 0f16 	cmn.w	r0, #22
 800f350:	da09      	bge.n	800f366 <scalbnf+0x9a>
 800f352:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800f38c <scalbnf+0xc0>
 800f356:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800f390 <scalbnf+0xc4>
 800f35a:	ee10 3a10 	vmov	r3, s0
 800f35e:	eeb0 7a67 	vmov.f32	s14, s15
 800f362:	2b00      	cmp	r3, #0
 800f364:	e7d9      	b.n	800f31a <scalbnf+0x4e>
 800f366:	3019      	adds	r0, #25
 800f368:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f36c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f370:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800f394 <scalbnf+0xc8>
 800f374:	ee07 3a90 	vmov	s15, r3
 800f378:	e7d7      	b.n	800f32a <scalbnf+0x5e>
 800f37a:	bf00      	nop
 800f37c:	ffff3cb0 	.word	0xffff3cb0
 800f380:	4c000000 	.word	0x4c000000
 800f384:	7149f2ca 	.word	0x7149f2ca
 800f388:	f149f2ca 	.word	0xf149f2ca
 800f38c:	0da24260 	.word	0x0da24260
 800f390:	8da24260 	.word	0x8da24260
 800f394:	33000000 	.word	0x33000000

0800f398 <floor>:
 800f398:	ec51 0b10 	vmov	r0, r1, d0
 800f39c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f3a8:	2e13      	cmp	r6, #19
 800f3aa:	ee10 5a10 	vmov	r5, s0
 800f3ae:	ee10 8a10 	vmov	r8, s0
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	dc31      	bgt.n	800f41a <floor+0x82>
 800f3b6:	2e00      	cmp	r6, #0
 800f3b8:	da14      	bge.n	800f3e4 <floor+0x4c>
 800f3ba:	a333      	add	r3, pc, #204	; (adr r3, 800f488 <floor+0xf0>)
 800f3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c0:	f7f0 ff8c 	bl	80002dc <__adddf3>
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	f7f1 fbce 	bl	8000b68 <__aeabi_dcmpgt>
 800f3cc:	b138      	cbz	r0, 800f3de <floor+0x46>
 800f3ce:	2c00      	cmp	r4, #0
 800f3d0:	da53      	bge.n	800f47a <floor+0xe2>
 800f3d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f3d6:	4325      	orrs	r5, r4
 800f3d8:	d052      	beq.n	800f480 <floor+0xe8>
 800f3da:	4c2d      	ldr	r4, [pc, #180]	; (800f490 <floor+0xf8>)
 800f3dc:	2500      	movs	r5, #0
 800f3de:	4621      	mov	r1, r4
 800f3e0:	4628      	mov	r0, r5
 800f3e2:	e024      	b.n	800f42e <floor+0x96>
 800f3e4:	4f2b      	ldr	r7, [pc, #172]	; (800f494 <floor+0xfc>)
 800f3e6:	4137      	asrs	r7, r6
 800f3e8:	ea01 0307 	and.w	r3, r1, r7
 800f3ec:	4303      	orrs	r3, r0
 800f3ee:	d01e      	beq.n	800f42e <floor+0x96>
 800f3f0:	a325      	add	r3, pc, #148	; (adr r3, 800f488 <floor+0xf0>)
 800f3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f6:	f7f0 ff71 	bl	80002dc <__adddf3>
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	f7f1 fbb3 	bl	8000b68 <__aeabi_dcmpgt>
 800f402:	2800      	cmp	r0, #0
 800f404:	d0eb      	beq.n	800f3de <floor+0x46>
 800f406:	2c00      	cmp	r4, #0
 800f408:	bfbe      	ittt	lt
 800f40a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f40e:	4133      	asrlt	r3, r6
 800f410:	18e4      	addlt	r4, r4, r3
 800f412:	ea24 0407 	bic.w	r4, r4, r7
 800f416:	2500      	movs	r5, #0
 800f418:	e7e1      	b.n	800f3de <floor+0x46>
 800f41a:	2e33      	cmp	r6, #51	; 0x33
 800f41c:	dd0b      	ble.n	800f436 <floor+0x9e>
 800f41e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f422:	d104      	bne.n	800f42e <floor+0x96>
 800f424:	ee10 2a10 	vmov	r2, s0
 800f428:	460b      	mov	r3, r1
 800f42a:	f7f0 ff57 	bl	80002dc <__adddf3>
 800f42e:	ec41 0b10 	vmov	d0, r0, r1
 800f432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f436:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f43a:	f04f 37ff 	mov.w	r7, #4294967295
 800f43e:	40df      	lsrs	r7, r3
 800f440:	4238      	tst	r0, r7
 800f442:	d0f4      	beq.n	800f42e <floor+0x96>
 800f444:	a310      	add	r3, pc, #64	; (adr r3, 800f488 <floor+0xf0>)
 800f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44a:	f7f0 ff47 	bl	80002dc <__adddf3>
 800f44e:	2200      	movs	r2, #0
 800f450:	2300      	movs	r3, #0
 800f452:	f7f1 fb89 	bl	8000b68 <__aeabi_dcmpgt>
 800f456:	2800      	cmp	r0, #0
 800f458:	d0c1      	beq.n	800f3de <floor+0x46>
 800f45a:	2c00      	cmp	r4, #0
 800f45c:	da0a      	bge.n	800f474 <floor+0xdc>
 800f45e:	2e14      	cmp	r6, #20
 800f460:	d101      	bne.n	800f466 <floor+0xce>
 800f462:	3401      	adds	r4, #1
 800f464:	e006      	b.n	800f474 <floor+0xdc>
 800f466:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f46a:	2301      	movs	r3, #1
 800f46c:	40b3      	lsls	r3, r6
 800f46e:	441d      	add	r5, r3
 800f470:	45a8      	cmp	r8, r5
 800f472:	d8f6      	bhi.n	800f462 <floor+0xca>
 800f474:	ea25 0507 	bic.w	r5, r5, r7
 800f478:	e7b1      	b.n	800f3de <floor+0x46>
 800f47a:	2500      	movs	r5, #0
 800f47c:	462c      	mov	r4, r5
 800f47e:	e7ae      	b.n	800f3de <floor+0x46>
 800f480:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f484:	e7ab      	b.n	800f3de <floor+0x46>
 800f486:	bf00      	nop
 800f488:	8800759c 	.word	0x8800759c
 800f48c:	7e37e43c 	.word	0x7e37e43c
 800f490:	bff00000 	.word	0xbff00000
 800f494:	000fffff 	.word	0x000fffff

0800f498 <floorf>:
 800f498:	ee10 3a10 	vmov	r3, s0
 800f49c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f4a0:	3a7f      	subs	r2, #127	; 0x7f
 800f4a2:	2a16      	cmp	r2, #22
 800f4a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f4a8:	dc2a      	bgt.n	800f500 <floorf+0x68>
 800f4aa:	2a00      	cmp	r2, #0
 800f4ac:	da11      	bge.n	800f4d2 <floorf+0x3a>
 800f4ae:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f510 <floorf+0x78>
 800f4b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f4b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4be:	dd05      	ble.n	800f4cc <floorf+0x34>
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	da23      	bge.n	800f50c <floorf+0x74>
 800f4c4:	4a13      	ldr	r2, [pc, #76]	; (800f514 <floorf+0x7c>)
 800f4c6:	2900      	cmp	r1, #0
 800f4c8:	bf18      	it	ne
 800f4ca:	4613      	movne	r3, r2
 800f4cc:	ee00 3a10 	vmov	s0, r3
 800f4d0:	4770      	bx	lr
 800f4d2:	4911      	ldr	r1, [pc, #68]	; (800f518 <floorf+0x80>)
 800f4d4:	4111      	asrs	r1, r2
 800f4d6:	420b      	tst	r3, r1
 800f4d8:	d0fa      	beq.n	800f4d0 <floorf+0x38>
 800f4da:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f510 <floorf+0x78>
 800f4de:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f4e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ea:	ddef      	ble.n	800f4cc <floorf+0x34>
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	bfbe      	ittt	lt
 800f4f0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f4f4:	fa40 f202 	asrlt.w	r2, r0, r2
 800f4f8:	189b      	addlt	r3, r3, r2
 800f4fa:	ea23 0301 	bic.w	r3, r3, r1
 800f4fe:	e7e5      	b.n	800f4cc <floorf+0x34>
 800f500:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f504:	d3e4      	bcc.n	800f4d0 <floorf+0x38>
 800f506:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f50a:	4770      	bx	lr
 800f50c:	2300      	movs	r3, #0
 800f50e:	e7dd      	b.n	800f4cc <floorf+0x34>
 800f510:	7149f2ca 	.word	0x7149f2ca
 800f514:	bf800000 	.word	0xbf800000
 800f518:	007fffff 	.word	0x007fffff

0800f51c <_init>:
 800f51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f51e:	bf00      	nop
 800f520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f522:	bc08      	pop	{r3}
 800f524:	469e      	mov	lr, r3
 800f526:	4770      	bx	lr

0800f528 <_fini>:
 800f528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52a:	bf00      	nop
 800f52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f52e:	bc08      	pop	{r3}
 800f530:	469e      	mov	lr, r3
 800f532:	4770      	bx	lr
