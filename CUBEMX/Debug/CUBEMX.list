
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd8  08008bd8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008be0  08008be0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008be4  08008be4  00018be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000010  08008bf8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08008bf8  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fcc7  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004180  00000000  00000000  0003fd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a50  00000000  00000000  00043ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001440  00000000  00000000  00045920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023abb  00000000  00000000  00046d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002312f  00000000  00000000  0006a81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5d03  00000000  00000000  0008d94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f90  00000000  00000000  00173650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0017a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008b70 	.word	0x08008b70

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008b70 	.word	0x08008b70

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Current_IRQ>:
//PID
//CAN_PID PID_Current;
//CAN_PID PID_Velocity;
//CAN_PID PID_Angle;
//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d008      	beq.n	8000534 <Current_IRQ+0x20>
 8000522:	2210      	movs	r2, #16
 8000524:	6879      	ldr	r1, [r7, #4]
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <Current_IRQ+0x28>)
 8000528:	f008 fb14 	bl	8008b54 <memcpy>
    else return;
    Current_Callback_flag = 1;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <Current_IRQ+0x2c>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e000      	b.n	8000536 <Current_IRQ+0x22>
    else return;
 8000534:	bf00      	nop
}
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000030 	.word	0x20000030
 8000540:	2000002c 	.word	0x2000002c

08000544 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 800054c:	2208      	movs	r2, #8
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <Voltage_Temp_IRQ+0x1c>)
 8000552:	f008 faff 	bl	8008b54 <memcpy>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000040 	.word	0x20000040

08000564 <BLDC_main>:
//	//memcpy(&Status, ptr, sizeof(CAN_Status));
//}


//------------------------MAIN-------------------------
void BLDC_main(void){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8000568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056c:	f001 fcac 	bl	8001ec8 <HAL_Delay>

	//setup current
	current_init((void*)&Current_IRQ);
 8000570:	4816      	ldr	r0, [pc, #88]	; (80005cc <BLDC_main+0x68>)
 8000572:	f000 fa3b 	bl	80009ec <current_init>
	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 8000576:	4816      	ldr	r0, [pc, #88]	; (80005d0 <BLDC_main+0x6c>)
 8000578:	f000 fa52 	bl	8000a20 <voltage_temperature_init>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 800057c:	4815      	ldr	r0, [pc, #84]	; (80005d4 <BLDC_main+0x70>)
 800057e:	f000 fc6f 	bl	8000e60 <FDCAN_Start>

	//--------------setup PWM------------------

	while(1){
		HAL_Delay(10);
 8000582:	200a      	movs	r0, #10
 8000584:	f001 fca0 	bl	8001ec8 <HAL_Delay>

		Status_send.setpoint = IRQ_Voltage_Temp.V_Bat*2-360000;
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <BLDC_main+0x74>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <BLDC_main+0x78>)
 800058e:	4413      	add	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	461a      	mov	r2, r3
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <BLDC_main+0x7c>)
 8000596:	609a      	str	r2, [r3, #8]

		if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin))Status_send.setpoint = 0;
 8000598:	2101      	movs	r1, #1
 800059a:	4812      	ldr	r0, [pc, #72]	; (80005e4 <BLDC_main+0x80>)
 800059c:	f005 fb9c 	bl	8005cd8 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d003      	beq.n	80005ae <BLDC_main+0x4a>
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <BLDC_main+0x7c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	e002      	b.n	80005b4 <BLDC_main+0x50>
		else Status_send.setpoint = 360000*5;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <BLDC_main+0x7c>)
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <BLDC_main+0x84>)
 80005b2:	609a      	str	r2, [r3, #8]
		Status_send.status = INPUT_START;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <BLDC_main+0x7c>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]

//		if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin))Status_send.status = INPUT_STOP_WITH_BREAK;
//		else Status_send.status = INPUT_START;
		Status_send.reset_faults = 0;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <BLDC_main+0x7c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]

		FDCAN_sendData(&hfdcan1, (CAN_STATUS_ID << 8) | (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Status_send);
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <BLDC_main+0x7c>)
 80005c2:	2136      	movs	r1, #54	; 0x36
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <BLDC_main+0x70>)
 80005c6:	f000 fc66 	bl	8000e96 <FDCAN_sendData>
		HAL_Delay(10);
 80005ca:	e7da      	b.n	8000582 <BLDC_main+0x1e>
 80005cc:	08000515 	.word	0x08000515
 80005d0:	08000545 	.word	0x08000545
 80005d4:	200002fc 	.word	0x200002fc
 80005d8:	20000040 	.word	0x20000040
 80005dc:	7ffd40e0 	.word	0x7ffd40e0
 80005e0:	20000048 	.word	0x20000048
 80005e4:	48000400 	.word	0x48000400
 80005e8:	001b7740 	.word	0x001b7740

080005ec <ADC_CAL_init>:
VT_Callback VT_IRQ_callback;
Voltage_Temp VT_data;

#define Vref 3000

int32_t ADC_CAL_init(ADC_HandleTypeDef *hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef HAL_status;
	ADC_HandleTypeDef *adc_handle_CAL;

	//check if pointer is NULL
	if(hadc == NULL)return -1; //null pointer error
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <ADC_CAL_init+0x14>
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	e1dc      	b.n	80009ba <ADC_CAL_init+0x3ce>

	//copy pointer
	adc_handle_CAL = hadc;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48

	//do a calibration
	HAL_status = HAL_ADCEx_Calibration_Start(adc_handle_CAL, ADC_SINGLE_ENDED);
 8000604:	217f      	movs	r1, #127	; 0x7f
 8000606:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000608:	f003 fba8 	bl	8003d5c <HAL_ADCEx_Calibration_Start>
 800060c:	4603      	mov	r3, r0
 800060e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (HAL_status != HAL_OK)return -2; //ADC calibration failed
 8000612:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <ADC_CAL_init+0x34>
 800061a:	f06f 0301 	mvn.w	r3, #1
 800061e:	e1cc      	b.n	80009ba <ADC_CAL_init+0x3ce>

	//start ADC
	uint16_t calibrating = number_of_calibration_points;
 8000620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000624:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	volatile uint32_t Voltage_offset_temp[3] = {0};
 8000628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2220      	movs	r2, #32
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f008 fa5d 	bl	8008afc <memset>

	calibrating = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	while(calibrating){
 8000648:	e19c      	b.n	8000984 <ADC_CAL_init+0x398>
		sConfig.Channel = ADC_CHANNEL_0;
 800064a:	2301      	movs	r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	4619      	mov	r1, r3
 8000654:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000656:	f002 fd2d 	bl	80030b4 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8000660:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <ADC_CAL_init+0x82>
 8000668:	f06f 0302 	mvn.w	r3, #2
 800066c:	e1a5      	b.n	80009ba <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 800066e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000670:	f002 f868 	bl	8002744 <HAL_ADC_Start>
 8000674:	4603      	mov	r3, r0
 8000676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 800067a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <ADC_CAL_init+0x9c>
 8000682:	f06f 0302 	mvn.w	r3, #2
 8000686:	e198      	b.n	80009ba <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8000688:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800068c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800068e:	f002 f949 	bl	8002924 <HAL_ADC_PollForConversion>
 8000692:	4603      	mov	r3, r0
 8000694:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8000698:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800069c:	2b03      	cmp	r3, #3
 800069e:	d102      	bne.n	80006a6 <ADC_CAL_init+0xba>
 80006a0:	f06f 0303 	mvn.w	r3, #3
 80006a4:	e189      	b.n	80009ba <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 80006a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <ADC_CAL_init+0xc8>
 80006ae:	f06f 0304 	mvn.w	r3, #4
 80006b2:	e182      	b.n	80009ba <ADC_CAL_init+0x3ce>
		uint32_t M3_raw = HAL_ADC_GetValue(adc_handle_CAL);
 80006b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80006b6:	f002 fac1 	bl	8002c3c <HAL_ADC_GetValue>
 80006ba:	6438      	str	r0, [r7, #64]	; 0x40
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 80006bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80006be:	f002 f8fd 	bl	80028bc <HAL_ADC_Stop>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 80006c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <ADC_CAL_init+0xea>
 80006d0:	f06f 0305 	mvn.w	r3, #5
 80006d4:	e171      	b.n	80009ba <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_1;
 80006d6:	4bbb      	ldr	r3, [pc, #748]	; (80009c4 <ADC_CAL_init+0x3d8>)
 80006d8:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80006e2:	f002 fce7 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 80006ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <ADC_CAL_init+0x10e>
 80006f4:	f06f 0302 	mvn.w	r3, #2
 80006f8:	e15f      	b.n	80009ba <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 80006fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80006fc:	f002 f822 	bl	8002744 <HAL_ADC_Start>
 8000700:	4603      	mov	r3, r0
 8000702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8000706:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <ADC_CAL_init+0x128>
 800070e:	f06f 0302 	mvn.w	r3, #2
 8000712:	e152      	b.n	80009ba <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8000714:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000718:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800071a:	f002 f903 	bl	8002924 <HAL_ADC_PollForConversion>
 800071e:	4603      	mov	r3, r0
 8000720:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8000724:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000728:	2b03      	cmp	r3, #3
 800072a:	d102      	bne.n	8000732 <ADC_CAL_init+0x146>
 800072c:	f06f 0303 	mvn.w	r3, #3
 8000730:	e143      	b.n	80009ba <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8000732:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <ADC_CAL_init+0x154>
 800073a:	f06f 0304 	mvn.w	r3, #4
 800073e:	e13c      	b.n	80009ba <ADC_CAL_init+0x3ce>
		uint32_t M2_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8000740:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000742:	f002 fa7b 	bl	8002c3c <HAL_ADC_GetValue>
 8000746:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8000748:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800074a:	f002 f8b7 	bl	80028bc <HAL_ADC_Stop>
 800074e:	4603      	mov	r3, r0
 8000750:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8000754:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <ADC_CAL_init+0x176>
 800075c:	f06f 0305 	mvn.w	r3, #5
 8000760:	e12b      	b.n	80009ba <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_2;
 8000762:	4b99      	ldr	r3, [pc, #612]	; (80009c8 <ADC_CAL_init+0x3dc>)
 8000764:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	4619      	mov	r1, r3
 800076c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800076e:	f002 fca1 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8000778:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <ADC_CAL_init+0x19a>
 8000780:	f06f 0302 	mvn.w	r3, #2
 8000784:	e119      	b.n	80009ba <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8000786:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000788:	f001 ffdc 	bl	8002744 <HAL_ADC_Start>
 800078c:	4603      	mov	r3, r0
 800078e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8000792:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <ADC_CAL_init+0x1b4>
 800079a:	f06f 0302 	mvn.w	r3, #2
 800079e:	e10c      	b.n	80009ba <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 80007a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007a6:	f002 f8bd 	bl	8002924 <HAL_ADC_PollForConversion>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 80007b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d102      	bne.n	80007be <ADC_CAL_init+0x1d2>
 80007b8:	f06f 0303 	mvn.w	r3, #3
 80007bc:	e0fd      	b.n	80009ba <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 80007be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <ADC_CAL_init+0x1e0>
 80007c6:	f06f 0304 	mvn.w	r3, #4
 80007ca:	e0f6      	b.n	80009ba <ADC_CAL_init+0x3ce>
		uint32_t M1_raw = HAL_ADC_GetValue(adc_handle_CAL);
 80007cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007ce:	f002 fa35 	bl	8002c3c <HAL_ADC_GetValue>
 80007d2:	63b8      	str	r0, [r7, #56]	; 0x38
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 80007d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007d6:	f002 f871 	bl	80028bc <HAL_ADC_Stop>
 80007da:	4603      	mov	r3, r0
 80007dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 80007e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <ADC_CAL_init+0x202>
 80007e8:	f06f 0305 	mvn.w	r3, #5
 80007ec:	e0e5      	b.n	80009ba <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_3;
 80007ee:	4b77      	ldr	r3, [pc, #476]	; (80009cc <ADC_CAL_init+0x3e0>)
 80007f0:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4619      	mov	r1, r3
 80007f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007fa:	f002 fc5b 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8000804:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <ADC_CAL_init+0x226>
 800080c:	f06f 0302 	mvn.w	r3, #2
 8000810:	e0d3      	b.n	80009ba <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8000812:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000814:	f001 ff96 	bl	8002744 <HAL_ADC_Start>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 800081e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <ADC_CAL_init+0x240>
 8000826:	f06f 0302 	mvn.w	r3, #2
 800082a:	e0c6      	b.n	80009ba <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 800082c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000830:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000832:	f002 f877 	bl	8002924 <HAL_ADC_PollForConversion>
 8000836:	4603      	mov	r3, r0
 8000838:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 800083c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000840:	2b03      	cmp	r3, #3
 8000842:	d102      	bne.n	800084a <ADC_CAL_init+0x25e>
 8000844:	f06f 0303 	mvn.w	r3, #3
 8000848:	e0b7      	b.n	80009ba <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 800084a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <ADC_CAL_init+0x26c>
 8000852:	f06f 0304 	mvn.w	r3, #4
 8000856:	e0b0      	b.n	80009ba <ADC_CAL_init+0x3ce>
		uint32_t vdda_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8000858:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800085a:	f002 f9ef 	bl	8002c3c <HAL_ADC_GetValue>
 800085e:	6378      	str	r0, [r7, #52]	; 0x34
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8000860:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000862:	f002 f82b 	bl	80028bc <HAL_ADC_Stop>
 8000866:	4603      	mov	r3, r0
 8000868:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 800086c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <ADC_CAL_init+0x28e>
 8000874:	f06f 0305 	mvn.w	r3, #5
 8000878:	e09f      	b.n	80009ba <ADC_CAL_init+0x3ce>


		//get current samples;
		VDDA = (int16_t)3000*(*vrefint)/(vdda_raw/number_of_oversample);
 800087a:	4b55      	ldr	r3, [pc, #340]	; (80009d0 <ADC_CAL_init+0x3e4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	461a      	mov	r2, r3
 800088c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088e:	091b      	lsrs	r3, r3, #4
 8000890:	fbb2 f3f3 	udiv	r3, r2, r3
 8000894:	b21a      	sxth	r2, r3
 8000896:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <ADC_CAL_init+0x3e8>)
 8000898:	801a      	strh	r2, [r3, #0]
		Voltage_offset_temp[0] += (int32_t)((M1_raw/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 800089a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800089c:	091b      	lsrs	r3, r3, #4
 800089e:	4a4d      	ldr	r2, [pc, #308]	; (80009d4 <ADC_CAL_init+0x3e8>)
 80008a0:	8812      	ldrh	r2, [r2, #0]
 80008a2:	b212      	sxth	r2, r2
 80008a4:	fb03 f202 	mul.w	r2, r3, r2
 80008a8:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <ADC_CAL_init+0x3ec>)
 80008aa:	fba3 1302 	umull	r1, r3, r3, r2
 80008ae:	1ad2      	subs	r2, r2, r3
 80008b0:	0852      	lsrs	r2, r2, #1
 80008b2:	4413      	add	r3, r2
 80008b4:	0adb      	lsrs	r3, r3, #11
 80008b6:	461a      	mov	r2, r3
 80008b8:	4613      	mov	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	4413      	add	r3, r2
 80008be:	011a      	lsls	r2, r3, #4
 80008c0:	4413      	add	r3, r2
 80008c2:	4a46      	ldr	r2, [pc, #280]	; (80009dc <ADC_CAL_init+0x3f0>)
 80008c4:	fb82 1203 	smull	r1, r2, r2, r3
 80008c8:	1152      	asrs	r2, r2, #5
 80008ca:	17db      	asrs	r3, r3, #31
 80008cc:	1ad2      	subs	r2, r2, r3
 80008ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d0:	4413      	add	r3, r2
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
		Voltage_offset_temp[1] += (int32_t)((M2_raw/number_of_oversample*VDDA)/4095)*153/100;
 80008d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d6:	091b      	lsrs	r3, r3, #4
 80008d8:	4a3e      	ldr	r2, [pc, #248]	; (80009d4 <ADC_CAL_init+0x3e8>)
 80008da:	8812      	ldrh	r2, [r2, #0]
 80008dc:	b212      	sxth	r2, r2
 80008de:	fb03 f202 	mul.w	r2, r3, r2
 80008e2:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <ADC_CAL_init+0x3ec>)
 80008e4:	fba3 1302 	umull	r1, r3, r3, r2
 80008e8:	1ad2      	subs	r2, r2, r3
 80008ea:	0852      	lsrs	r2, r2, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	0adb      	lsrs	r3, r3, #11
 80008f0:	461a      	mov	r2, r3
 80008f2:	4613      	mov	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	4413      	add	r3, r2
 80008f8:	011a      	lsls	r2, r3, #4
 80008fa:	4413      	add	r3, r2
 80008fc:	4a37      	ldr	r2, [pc, #220]	; (80009dc <ADC_CAL_init+0x3f0>)
 80008fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000902:	1152      	asrs	r2, r2, #5
 8000904:	17db      	asrs	r3, r3, #31
 8000906:	1ad2      	subs	r2, r2, r3
 8000908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090a:	4413      	add	r3, r2
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
		Voltage_offset_temp[2] += (int32_t)((M3_raw/number_of_oversample*VDDA)/4095)*153/100;
 800090e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	4a30      	ldr	r2, [pc, #192]	; (80009d4 <ADC_CAL_init+0x3e8>)
 8000914:	8812      	ldrh	r2, [r2, #0]
 8000916:	b212      	sxth	r2, r2
 8000918:	fb03 f202 	mul.w	r2, r3, r2
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <ADC_CAL_init+0x3ec>)
 800091e:	fba3 1302 	umull	r1, r3, r3, r2
 8000922:	1ad2      	subs	r2, r2, r3
 8000924:	0852      	lsrs	r2, r2, #1
 8000926:	4413      	add	r3, r2
 8000928:	0adb      	lsrs	r3, r3, #11
 800092a:	461a      	mov	r2, r3
 800092c:	4613      	mov	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	4413      	add	r3, r2
 8000932:	011a      	lsls	r2, r3, #4
 8000934:	4413      	add	r3, r2
 8000936:	4a29      	ldr	r2, [pc, #164]	; (80009dc <ADC_CAL_init+0x3f0>)
 8000938:	fb82 1203 	smull	r1, r2, r2, r3
 800093c:	1152      	asrs	r2, r2, #5
 800093e:	17db      	asrs	r3, r3, #31
 8000940:	1ad2      	subs	r2, r2, r3
 8000942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000944:	4413      	add	r3, r2
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
		calibrating--;
 8000948:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800094c:	3b01      	subs	r3, #1
 800094e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		if(!calibrating){
 8000952:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000956:	2b00      	cmp	r3, #0
 8000958:	d114      	bne.n	8000984 <ADC_CAL_init+0x398>
			Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 800095a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <ADC_CAL_init+0x3f4>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	099b      	lsrs	r3, r3, #6
 8000964:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <ADC_CAL_init+0x3f8>)
 8000966:	6013      	str	r3, [r2, #0]
			Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8000968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096a:	4a1d      	ldr	r2, [pc, #116]	; (80009e0 <ADC_CAL_init+0x3f4>)
 800096c:	fba2 2303 	umull	r2, r3, r2, r3
 8000970:	099b      	lsrs	r3, r3, #6
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <ADC_CAL_init+0x3f8>)
 8000974:	6053      	str	r3, [r2, #4]
			Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8000976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000978:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <ADC_CAL_init+0x3f4>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	099b      	lsrs	r3, r3, #6
 8000980:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <ADC_CAL_init+0x3f8>)
 8000982:	6093      	str	r3, [r2, #8]
	while(calibrating){
 8000984:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000988:	2b00      	cmp	r3, #0
 800098a:	f47f ae5e 	bne.w	800064a <ADC_CAL_init+0x5e>

		}
	}
	Voltage_offset[0] = 2400;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <ADC_CAL_init+0x3f8>)
 8000990:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000994:	601a      	str	r2, [r3, #0]
	Voltage_offset[1] = 2400;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <ADC_CAL_init+0x3f8>)
 8000998:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800099c:	605a      	str	r2, [r3, #4]
	Voltage_offset[2] = 2400;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <ADC_CAL_init+0x3f8>)
 80009a0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80009a4:	609a      	str	r2, [r3, #8]


	//---------------DAC DEBUG-------------
	HAL_DAC_Init(&hdac1);
 80009a6:	4810      	ldr	r0, [pc, #64]	; (80009e8 <ADC_CAL_init+0x3fc>)
 80009a8:	f003 fc1f 	bl	80041ea <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80009ac:	2100      	movs	r1, #0
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <ADC_CAL_init+0x3fc>)
 80009b0:	f003 fc3d 	bl	800422e <HAL_DAC_Start>


	return VDDA; //success
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <ADC_CAL_init+0x3e8>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3750      	adds	r7, #80	; 0x50
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	04300002 	.word	0x04300002
 80009c8:	08600004 	.word	0x08600004
 80009cc:	0c900008 	.word	0x0c900008
 80009d0:	20000000 	.word	0x20000000
 80009d4:	200000d4 	.word	0x200000d4
 80009d8:	00100101 	.word	0x00100101
 80009dc:	51eb851f 	.word	0x51eb851f
 80009e0:	10624dd3 	.word	0x10624dd3
 80009e4:	200000c8 	.word	0x200000c8
 80009e8:	200002e8 	.word	0x200002e8

080009ec <current_init>:

void current_init(Current_Callback __IRQ_callback){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	ADC_CAL_init(&hadc1);
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <current_init+0x28>)
 80009f6:	f7ff fdf9 	bl	80005ec <ADC_CAL_init>

	Curent_IRQ_callback = __IRQ_callback;
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <current_init+0x2c>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8000a00:	2208      	movs	r2, #8
 8000a02:	4906      	ldr	r1, [pc, #24]	; (8000a1c <current_init+0x30>)
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <current_init+0x28>)
 8000a06:	f002 f865 	bl	8002ad4 <HAL_ADC_Start_DMA>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000014c 	.word	0x2000014c
 8000a18:	200000d8 	.word	0x200000d8
 8000a1c:	20000088 	.word	0x20000088

08000a20 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8000a28:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <voltage_temperature_init+0x20>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8000a2e:	2208      	movs	r2, #8
 8000a30:	4904      	ldr	r1, [pc, #16]	; (8000a44 <voltage_temperature_init+0x24>)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <voltage_temperature_init+0x28>)
 8000a34:	f002 f84e 	bl	8002ad4 <HAL_ADC_Start_DMA>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000ec 	.word	0x200000ec
 8000a44:	200000a8 	.word	0x200000a8
 8000a48:	200001b8 	.word	0x200001b8

08000a4c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a6d      	ldr	r2, [pc, #436]	; (8000c0c <HAL_ADC_ConvHalfCpltCallback+0x1c0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	f040 8093 	bne.w	8000b84 <HAL_ADC_ConvHalfCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8000a5e:	4b6c      	ldr	r3, [pc, #432]	; (8000c10 <HAL_ADC_ConvHalfCpltCallback+0x1c4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b68      	ldr	r3, [pc, #416]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	091b      	lsrs	r3, r3, #4
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	4b66      	ldr	r3, [pc, #408]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000a7e:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8000a80:	4b64      	ldr	r3, [pc, #400]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	091b      	lsrs	r3, r3, #4
 8000a86:	4a64      	ldr	r2, [pc, #400]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000a88:	8812      	ldrh	r2, [r2, #0]
 8000a8a:	b212      	sxth	r2, r2
 8000a8c:	fb03 f202 	mul.w	r2, r3, r2
 8000a90:	4b62      	ldr	r3, [pc, #392]	; (8000c1c <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000a92:	fba3 1302 	umull	r1, r3, r3, r2
 8000a96:	1ad2      	subs	r2, r2, r3
 8000a98:	0852      	lsrs	r2, r2, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	0ada      	lsrs	r2, r3, #11
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	4413      	add	r3, r2
 8000aa4:	011a      	lsls	r2, r3, #4
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a5d      	ldr	r2, [pc, #372]	; (8000c20 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8000aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000aae:	095a      	lsrs	r2, r3, #5
 8000ab0:	4b5c      	ldr	r3, [pc, #368]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000abc:	fb02 f303 	mul.w	r3, r2, r3
 8000ac0:	4a59      	ldr	r2, [pc, #356]	; (8000c28 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000ac2:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8000ac4:	4b53      	ldr	r3, [pc, #332]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	091b      	lsrs	r3, r3, #4
 8000aca:	4a53      	ldr	r2, [pc, #332]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000acc:	8812      	ldrh	r2, [r2, #0]
 8000ace:	b212      	sxth	r2, r2
 8000ad0:	fb03 f202 	mul.w	r2, r3, r2
 8000ad4:	4b51      	ldr	r3, [pc, #324]	; (8000c1c <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8000ada:	1ad2      	subs	r2, r2, r3
 8000adc:	0852      	lsrs	r2, r2, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	0ada      	lsrs	r2, r3, #11
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	011a      	lsls	r2, r3, #4
 8000aea:	4413      	add	r3, r2
 8000aec:	4a4c      	ldr	r2, [pc, #304]	; (8000c20 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	095a      	lsrs	r2, r3, #5
 8000af4:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000b00:	fb02 f303 	mul.w	r3, r2, r3
 8000b04:	4a48      	ldr	r2, [pc, #288]	; (8000c28 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b06:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8000b08:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	4a42      	ldr	r2, [pc, #264]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000b10:	8812      	ldrh	r2, [r2, #0]
 8000b12:	b212      	sxth	r2, r2
 8000b14:	fb03 f202 	mul.w	r2, r3, r2
 8000b18:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b1e:	1ad2      	subs	r2, r2, r3
 8000b20:	0852      	lsrs	r2, r2, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	0ada      	lsrs	r2, r3, #11
 8000b26:	4613      	mov	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4413      	add	r3, r2
 8000b2c:	011a      	lsls	r2, r3, #4
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a3b      	ldr	r2, [pc, #236]	; (8000c20 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	095a      	lsrs	r2, r3, #5
 8000b38:	4b3a      	ldr	r3, [pc, #232]	; (8000c24 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000b44:	fb02 f303 	mul.w	r3, r2, r3
 8000b48:	4a37      	ldr	r2, [pc, #220]	; (8000c28 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b4a:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8000b4c:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b54:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b58:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bfb8      	it	lt
 8000b60:	425b      	neglt	r3, r3
 8000b62:	441a      	add	r2, r3
 8000b64:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bfb8      	it	lt
 8000b6c:	425b      	neglt	r3, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	0fda      	lsrs	r2, r3, #31
 8000b72:	4413      	add	r3, r2
 8000b74:	105b      	asrs	r3, r3, #1
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b7a:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4829      	ldr	r0, [pc, #164]	; (8000c28 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8000b82:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d13b      	bne.n	8000c04 <HAL_ADC_ConvHalfCpltCallback+0x1b8>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000b94:	8812      	ldrh	r2, [r2, #0]
 8000b96:	b212      	sxth	r2, r2
 8000b98:	fb03 f202 	mul.w	r2, r3, r2
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000b9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba2:	1ad2      	subs	r2, r2, r3
 8000ba4:	0852      	lsrs	r2, r2, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	0adb      	lsrs	r3, r3, #11
 8000baa:	b25a      	sxtb	r2, r3
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8000bae:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000bb8:	8812      	ldrh	r2, [r2, #0]
 8000bba:	b212      	sxth	r2, r2
 8000bbc:	fb03 f202 	mul.w	r2, r3, r2
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8000bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	0852      	lsrs	r2, r2, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	0adb      	lsrs	r3, r3, #11
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8000bd2:	71da      	strb	r2, [r3, #7]
//		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*360/3.3)/ADC_RES;
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	091b      	lsrs	r3, r3, #4
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	b212      	sxth	r2, r2
 8000be0:	fb03 f202 	mul.w	r2, r3, r2
 8000be4:	4613      	mov	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	4413      	add	r3, r2
 8000bee:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	0bdb      	lsrs	r3, r3, #15
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8000bfa:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8000c02:	4798      	blx	r3
	}
//	dac_value(data.Current_DC);
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000014c 	.word	0x2000014c
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000088 	.word	0x20000088
 8000c18:	200000d4 	.word	0x200000d4
 8000c1c:	00100101 	.word	0x00100101
 8000c20:	51eb851f 	.word	0x51eb851f
 8000c24:	200000c8 	.word	0x200000c8
 8000c28:	200000dc 	.word	0x200000dc
 8000c2c:	200000d8 	.word	0x200000d8
 8000c30:	200001b8 	.word	0x200001b8
 8000c34:	200000a8 	.word	0x200000a8
 8000c38:	200000f0 	.word	0x200000f0
 8000c3c:	ccd99a67 	.word	0xccd99a67
 8000c40:	200000ec 	.word	0x200000ec

08000c44 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a75      	ldr	r2, [pc, #468]	; (8000e24 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	f040 8093 	bne.w	8000d7c <HAL_ADC_ConvCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8000c56:	4b74      	ldr	r3, [pc, #464]	; (8000e28 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c62:	fb02 f303 	mul.w	r3, r2, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b70      	ldr	r3, [pc, #448]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	091b      	lsrs	r3, r3, #4
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	4b6e      	ldr	r3, [pc, #440]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000c76:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8000c78:	4b6c      	ldr	r3, [pc, #432]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	4a6c      	ldr	r2, [pc, #432]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000c80:	8812      	ldrh	r2, [r2, #0]
 8000c82:	b212      	sxth	r2, r2
 8000c84:	fb03 f202 	mul.w	r2, r3, r2
 8000c88:	4b6a      	ldr	r3, [pc, #424]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c8e:	1ad2      	subs	r2, r2, r3
 8000c90:	0852      	lsrs	r2, r2, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	0ada      	lsrs	r2, r3, #11
 8000c96:	4613      	mov	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	011a      	lsls	r2, r3, #4
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a65      	ldr	r2, [pc, #404]	; (8000e38 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	095a      	lsrs	r2, r3, #5
 8000ca8:	4b64      	ldr	r3, [pc, #400]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	4a61      	ldr	r2, [pc, #388]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000cba:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8000cbc:	4b5b      	ldr	r3, [pc, #364]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	091b      	lsrs	r3, r3, #4
 8000cc2:	4a5b      	ldr	r2, [pc, #364]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000cc4:	8812      	ldrh	r2, [r2, #0]
 8000cc6:	b212      	sxth	r2, r2
 8000cc8:	fb03 f202 	mul.w	r2, r3, r2
 8000ccc:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000cce:	fba3 1302 	umull	r1, r3, r3, r2
 8000cd2:	1ad2      	subs	r2, r2, r3
 8000cd4:	0852      	lsrs	r2, r2, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	0ada      	lsrs	r2, r3, #11
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	4413      	add	r3, r2
 8000ce0:	011a      	lsls	r2, r3, #4
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a54      	ldr	r2, [pc, #336]	; (8000e38 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	095a      	lsrs	r2, r3, #5
 8000cec:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	4a50      	ldr	r2, [pc, #320]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000cfe:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8000d00:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000d08:	8812      	ldrh	r2, [r2, #0]
 8000d0a:	b212      	sxth	r2, r2
 8000d0c:	fb03 f202 	mul.w	r2, r3, r2
 8000d10:	4b48      	ldr	r3, [pc, #288]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000d12:	fba3 1302 	umull	r1, r3, r3, r2
 8000d16:	1ad2      	subs	r2, r2, r3
 8000d18:	0852      	lsrs	r2, r2, #1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	0ada      	lsrs	r2, r3, #11
 8000d1e:	4613      	mov	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4413      	add	r3, r2
 8000d24:	011a      	lsls	r2, r3, #4
 8000d26:	4413      	add	r3, r2
 8000d28:	4a43      	ldr	r2, [pc, #268]	; (8000e38 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	095a      	lsrs	r2, r3, #5
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000d3c:	fb02 f303 	mul.w	r3, r2, r3
 8000d40:	4a3f      	ldr	r2, [pc, #252]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d42:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8000d44:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d4c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d50:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bfb8      	it	lt
 8000d58:	425b      	neglt	r3, r3
 8000d5a:	441a      	add	r2, r3
 8000d5c:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bfb8      	it	lt
 8000d64:	425b      	neglt	r3, r3
 8000d66:	4413      	add	r3, r2
 8000d68:	0fda      	lsrs	r2, r3, #31
 8000d6a:	4413      	add	r3, r2
 8000d6c:	105b      	asrs	r3, r3, #1
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d72:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8000d74:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <HAL_ADC_ConvCpltCallback+0x200>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4831      	ldr	r0, [pc, #196]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000d7a:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <HAL_ADC_ConvCpltCallback+0x204>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d14a      	bne.n	8000e1a <HAL_ADC_ConvCpltCallback+0x1d6>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 8000d84:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x208>)
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000d8c:	8812      	ldrh	r2, [r2, #0]
 8000d8e:	b212      	sxth	r2, r2
 8000d90:	fb03 f202 	mul.w	r2, r3, r2
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000d96:	fba3 1302 	umull	r1, r3, r3, r2
 8000d9a:	1ad2      	subs	r2, r2, r3
 8000d9c:	0852      	lsrs	r2, r2, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	0adb      	lsrs	r3, r3, #11
 8000da2:	b25a      	sxtb	r2, r3
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000da6:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x208>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000db0:	8812      	ldrh	r2, [r2, #0]
 8000db2:	b212      	sxth	r2, r2
 8000db4:	fb03 f202 	mul.w	r2, r3, r2
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000dba:	fba3 1302 	umull	r1, r3, r3, r2
 8000dbe:	1ad2      	subs	r2, r2, r3
 8000dc0:	0852      	lsrs	r2, r2, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	0adb      	lsrs	r3, r3, #11
 8000dc6:	b25a      	sxtb	r2, r3
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000dca:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*360000)/ADC_RES;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x208>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <HAL_ADC_ConvCpltCallback+0x210>)
 8000dd4:	fb03 f202 	mul.w	r2, r3, r2
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000dda:	fba3 1302 	umull	r1, r3, r3, r2
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	0852      	lsrs	r2, r2, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	0adb      	lsrs	r3, r3, #11
 8000de6:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000de8:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x208>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000df2:	8812      	ldrh	r2, [r2, #0]
 8000df4:	b212      	sxth	r2, r2
 8000df6:	fb03 f202 	mul.w	r2, r3, r2
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	4413      	add	r3, r2
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_ADC_ConvCpltCallback+0x214>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	0bdb      	lsrs	r3, r3, #15
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000e10:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_ADC_ConvCpltCallback+0x218>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000e18:	4798      	blx	r3
	}
//	 dac_value(data.Current_DC);

}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000014c 	.word	0x2000014c
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000088 	.word	0x20000088
 8000e30:	200000d4 	.word	0x200000d4
 8000e34:	00100101 	.word	0x00100101
 8000e38:	51eb851f 	.word	0x51eb851f
 8000e3c:	200000c8 	.word	0x200000c8
 8000e40:	200000dc 	.word	0x200000dc
 8000e44:	200000d8 	.word	0x200000d8
 8000e48:	200001b8 	.word	0x200001b8
 8000e4c:	200000a8 	.word	0x200000a8
 8000e50:	200000f0 	.word	0x200000f0
 8000e54:	00057e40 	.word	0x00057e40
 8000e58:	ccd99a67 	.word	0xccd99a67
 8000e5c:	200000ec 	.word	0x200000ec

08000e60 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f004 f867 	bl	8004f3c <HAL_FDCAN_Start>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e00a      	b.n	8000e8e <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f004 f9a3 	bl	80051c8 <HAL_FDCAN_ActivateNotification>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <FDCAN_sendData>:

  return FDCAN_STATUS_OK;
}

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b08e      	sub	sp, #56	; 0x38
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8000ea6:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8000eaa:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000eb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000ebe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f004 f859 	bl	8004f8c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3738      	adds	r7, #56	; 0x38
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09e      	sub	sp, #120	; 0x78
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000f02:	2140      	movs	r1, #64	; 0x40
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f004 f885 	bl	8005014 <HAL_FDCAN_GetRxMessage>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8000f10:	f000 fd42 	bl	8001998 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	677b      	str	r3, [r7, #116]	; 0x74
 8000f18:	e012      	b.n	8000f40 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4413      	add	r3, r2
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d107      	bne.n	8000f3a <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f32:	f107 020c 	add.w	r2, r7, #12
 8000f36:	4610      	mov	r0, r2
 8000f38:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8000f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	677b      	str	r3, [r7, #116]	; 0x74
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3e7      	bcc.n	8000f1a <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3778      	adds	r7, #120	; 0x78
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000f8 	.word	0x200000f8
 8000f58:	20000148 	.word	0x20000148

08000f5c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2220      	movs	r2, #32
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 fdc1 	bl	8008afc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000f7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f82:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000f84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8a:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f90:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f96:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f9c:	4b44      	ldr	r3, [pc, #272]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fa2:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa8:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc8:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000fe6:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fe8:	220c      	movs	r2, #12
 8000fea:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000fec:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <MX_ADC1_Init+0x154>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffe:	482c      	ldr	r0, [pc, #176]	; (80010b0 <MX_ADC1_Init+0x154>)
 8001000:	f001 fa16 	bl	8002430 <HAL_ADC_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800100a:	f000 fcc5 	bl	8001998 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	4825      	ldr	r0, [pc, #148]	; (80010b0 <MX_ADC1_Init+0x154>)
 800101a:	f002 ff33 	bl	8003e84 <HAL_ADCEx_MultiModeConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001024:	f000 fcb8 	bl	8001998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_ADC1_Init+0x158>)
 800102a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800102c:	2306      	movs	r3, #6
 800102e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001030:	2303      	movs	r3, #3
 8001032:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001034:	237f      	movs	r3, #127	; 0x7f
 8001036:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001038:	2304      	movs	r3, #4
 800103a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	481a      	ldr	r0, [pc, #104]	; (80010b0 <MX_ADC1_Init+0x154>)
 8001046:	f002 f835 	bl	80030b4 <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001050:	f000 fca2 	bl	8001998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_ADC1_Init+0x15c>)
 8001056:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001058:	230c      	movs	r3, #12
 800105a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <MX_ADC1_Init+0x154>)
 8001062:	f002 f827 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800106c:	f000 fc94 	bl	8001998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_ADC1_Init+0x160>)
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001074:	2312      	movs	r3, #18
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_ADC1_Init+0x154>)
 800107e:	f002 f819 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8001088:	f000 fc86 	bl	8001998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_ADC1_Init+0x164>)
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001090:	2318      	movs	r3, #24
 8001092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_ADC1_Init+0x154>)
 800109a:	f002 f80b 	bl	80030b4 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 80010a4:	f000 fc78 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	; 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000014c 	.word	0x2000014c
 80010b4:	04300002 	.word	0x04300002
 80010b8:	08600004 	.word	0x08600004
 80010bc:	0c900008 	.word	0x0c900008
 80010c0:	cb840000 	.word	0xcb840000

080010c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2220      	movs	r2, #32
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f007 fd13 	bl	8008afc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <MX_ADC2_Init+0x130>)
 80010d8:	4a47      	ldr	r2, [pc, #284]	; (80011f8 <MX_ADC2_Init+0x134>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <MX_ADC2_Init+0x130>)
 80010de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <MX_ADC2_Init+0x130>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ea:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <MX_ADC2_Init+0x130>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010f0:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <MX_ADC2_Init+0x130>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010f6:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <MX_ADC2_Init+0x130>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <MX_ADC2_Init+0x130>)
 80010fe:	2204      	movs	r2, #4
 8001100:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001102:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <MX_ADC2_Init+0x130>)
 8001104:	2200      	movs	r2, #0
 8001106:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <MX_ADC2_Init+0x130>)
 800110a:	2201      	movs	r2, #1
 800110c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 800110e:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <MX_ADC2_Init+0x130>)
 8001110:	2204      	movs	r2, #4
 8001112:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001114:	4b37      	ldr	r3, [pc, #220]	; (80011f4 <MX_ADC2_Init+0x130>)
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <MX_ADC2_Init+0x130>)
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <MX_ADC2_Init+0x130>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001128:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <MX_ADC2_Init+0x130>)
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_ADC2_Init+0x130>)
 8001132:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <MX_ADC2_Init+0x130>)
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001140:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <MX_ADC2_Init+0x130>)
 8001142:	220c      	movs	r2, #12
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <MX_ADC2_Init+0x130>)
 8001148:	2200      	movs	r2, #0
 800114a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <MX_ADC2_Init+0x130>)
 800114e:	2200      	movs	r2, #0
 8001150:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <MX_ADC2_Init+0x130>)
 8001154:	2201      	movs	r2, #1
 8001156:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001158:	4826      	ldr	r0, [pc, #152]	; (80011f4 <MX_ADC2_Init+0x130>)
 800115a:	f001 f969 	bl	8002430 <HAL_ADC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8001164:	f000 fc18 	bl	8001998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_ADC2_Init+0x138>)
 800116a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116c:	2306      	movs	r3, #6
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001170:	2307      	movs	r3, #7
 8001172:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001174:	237f      	movs	r3, #127	; 0x7f
 8001176:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001178:	2304      	movs	r3, #4
 800117a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_ADC2_Init+0x130>)
 8001186:	f001 ff95 	bl	80030b4 <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8001190:	f000 fc02 	bl	8001998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_ADC2_Init+0x13c>)
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001198:	230c      	movs	r3, #12
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	4813      	ldr	r0, [pc, #76]	; (80011f4 <MX_ADC2_Init+0x130>)
 80011a6:	f001 ff85 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80011b0:	f000 fbf2 	bl	8001998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_ADC2_Init+0x140>)
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011b8:	2312      	movs	r3, #18
 80011ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_ADC2_Init+0x130>)
 80011c2:	f001 ff77 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 80011cc:	f000 fbe4 	bl	8001998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_ADC2_Init+0x144>)
 80011d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011d4:	2318      	movs	r3, #24
 80011d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_ADC2_Init+0x130>)
 80011de:	f001 ff69 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80011e8:	f000 fbd6 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001b8 	.word	0x200001b8
 80011f8:	50000100 	.word	0x50000100
 80011fc:	32601000 	.word	0x32601000
 8001200:	3ac04000 	.word	0x3ac04000
 8001204:	36902000 	.word	0x36902000
 8001208:	0c900008 	.word	0x0c900008

0800120c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09e      	sub	sp, #120	; 0x78
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2244      	movs	r2, #68	; 0x44
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f007 fc65 	bl	8008afc <memset>
  if(adcHandle->Instance==ADC1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800123a:	d171      	bne.n	8001320 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800123c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001240:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001242:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4618      	mov	r0, r3
 800124e:	f005 fb9d 	bl	800698c <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001258:	f000 fb9e 	bl	8001998 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800125c:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <HAL_ADC_MspInit+0x23c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a79      	ldr	r2, [pc, #484]	; (8001448 <HAL_ADC_MspInit+0x23c>)
 8001264:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001266:	4b78      	ldr	r3, [pc, #480]	; (8001448 <HAL_ADC_MspInit+0x23c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d10b      	bne.n	8001286 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800126e:	4b77      	ldr	r3, [pc, #476]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a76      	ldr	r2, [pc, #472]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001274:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b74      	ldr	r3, [pc, #464]	; (800144c <HAL_ADC_MspInit+0x240>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b71      	ldr	r3, [pc, #452]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a70      	ldr	r2, [pc, #448]	; (800144c <HAL_ADC_MspInit+0x240>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 800129e:	2307      	movs	r3, #7
 80012a0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b4:	f004 fb8e 	bl	80059d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012b8:	4b65      	ldr	r3, [pc, #404]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012ba:	4a66      	ldr	r2, [pc, #408]	; (8001454 <HAL_ADC_MspInit+0x248>)
 80012bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012be:	4b64      	ldr	r3, [pc, #400]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012c0:	2205      	movs	r2, #5
 80012c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c4:	4b62      	ldr	r3, [pc, #392]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ca:	4b61      	ldr	r3, [pc, #388]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012d0:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012d6:	4b5e      	ldr	r3, [pc, #376]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e6:	4b5a      	ldr	r3, [pc, #360]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012e8:	2220      	movs	r2, #32
 80012ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ec:	4b58      	ldr	r3, [pc, #352]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f2:	4857      	ldr	r0, [pc, #348]	; (8001450 <HAL_ADC_MspInit+0x244>)
 80012f4:	f003 f996 	bl	8004624 <HAL_DMA_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80012fe:	f000 fb4b 	bl	8001998 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_ADC_MspInit+0x244>)
 8001306:	655a      	str	r2, [r3, #84]	; 0x54
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_ADC_MspInit+0x244>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2012      	movs	r0, #18
 8001314:	f002 ff35 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001318:	2012      	movs	r0, #18
 800131a:	f002 ff4c 	bl	80041b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800131e:	e08f      	b.n	8001440 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a4c      	ldr	r2, [pc, #304]	; (8001458 <HAL_ADC_MspInit+0x24c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	f040 808a 	bne.w	8001440 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800132c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001330:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001332:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001336:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	4618      	mov	r0, r3
 800133e:	f005 fb25 	bl	800698c <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8001348:	f000 fb26 	bl	8001998 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <HAL_ADC_MspInit+0x23c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a3d      	ldr	r2, [pc, #244]	; (8001448 <HAL_ADC_MspInit+0x23c>)
 8001354:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001356:	4b3c      	ldr	r3, [pc, #240]	; (8001448 <HAL_ADC_MspInit+0x23c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d10b      	bne.n	8001376 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a3a      	ldr	r2, [pc, #232]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001364:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_ADC_MspInit+0x240>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a34      	ldr	r2, [pc, #208]	; (800144c <HAL_ADC_MspInit+0x240>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b32      	ldr	r3, [pc, #200]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a2e      	ldr	r2, [pc, #184]	; (800144c <HAL_ADC_MspInit+0x240>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_ADC_MspInit+0x240>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 80013a6:	2360      	movs	r3, #96	; 0x60
 80013a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f004 fb0a 	bl	80059d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 80013c0:	f640 0304 	movw	r3, #2052	; 0x804
 80013c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013d2:	4619      	mov	r1, r3
 80013d4:	4821      	ldr	r0, [pc, #132]	; (800145c <HAL_ADC_MspInit+0x250>)
 80013d6:	f004 fafd 	bl	80059d4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_ADC_MspInit+0x254>)
 80013dc:	4a21      	ldr	r2, [pc, #132]	; (8001464 <HAL_ADC_MspInit+0x258>)
 80013de:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <HAL_ADC_MspInit+0x254>)
 80013e2:	2224      	movs	r2, #36	; 0x24
 80013e4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_ADC_MspInit+0x254>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_ADC_MspInit+0x254>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_ADC_MspInit+0x254>)
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_ADC_MspInit+0x254>)
 80013fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_ADC_MspInit+0x254>)
 8001402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001406:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_ADC_MspInit+0x254>)
 800140a:	2220      	movs	r2, #32
 800140c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_ADC_MspInit+0x254>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001414:	4812      	ldr	r0, [pc, #72]	; (8001460 <HAL_ADC_MspInit+0x254>)
 8001416:	f003 f905 	bl	8004624 <HAL_DMA_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8001420:	f000 faba 	bl	8001998 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_ADC_MspInit+0x254>)
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
 800142a:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <HAL_ADC_MspInit+0x254>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2012      	movs	r0, #18
 8001436:	f002 fea4 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800143a:	2012      	movs	r0, #18
 800143c:	f002 febb 	bl	80041b6 <HAL_NVIC_EnableIRQ>
}
 8001440:	bf00      	nop
 8001442:	3778      	adds	r7, #120	; 0x78
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200002e4 	.word	0x200002e4
 800144c:	40021000 	.word	0x40021000
 8001450:	20000224 	.word	0x20000224
 8001454:	40020008 	.word	0x40020008
 8001458:	50000100 	.word	0x50000100
 800145c:	48000400 	.word	0x48000400
 8001460:	20000284 	.word	0x20000284
 8001464:	4002001c 	.word	0x4002001c

08001468 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2230      	movs	r2, #48	; 0x30
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f007 fb41 	bl	8008afc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_DAC1_Init+0x6c>)
 800147c:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <MX_DAC1_Init+0x70>)
 800147e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001480:	4814      	ldr	r0, [pc, #80]	; (80014d4 <MX_DAC1_Init+0x6c>)
 8001482:	f002 feb2 	bl	80041ea <HAL_DAC_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800148c:	f000 fa84 	bl	8001998 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_DAC1_Init+0x6c>)
 80014bc:	f002 ff0a 	bl	80042d4 <HAL_DAC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80014c6:	f000 fa67 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3730      	adds	r7, #48	; 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200002e8 	.word	0x200002e8
 80014d8:	50000800 	.word	0x50000800

080014dc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_DAC_MspInit+0x74>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d124      	bne.n	8001548 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_DAC_MspInit+0x78>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_DAC_MspInit+0x78>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_DAC_MspInit+0x78>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_DAC_MspInit+0x78>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_DAC_MspInit+0x78>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_DAC_MspInit+0x78>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800152e:	2310      	movs	r3, #16
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001532:	2303      	movs	r3, #3
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f004 fa46 	bl	80059d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	50000800 	.word	0x50000800
 8001554:	40021000 	.word	0x40021000

08001558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <MX_DMA_Init+0x88>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <MX_DMA_Init+0x88>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6493      	str	r3, [r2, #72]	; 0x48
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_DMA_Init+0x88>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_DMA_Init+0x88>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <MX_DMA_Init+0x88>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6493      	str	r3, [r2, #72]	; 0x48
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_DMA_Init+0x88>)
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_DMA_Init+0x88>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_DMA_Init+0x88>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6493      	str	r3, [r2, #72]	; 0x48
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_DMA_Init+0x88>)
 800159c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	200b      	movs	r0, #11
 80015ac:	f002 fde9 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015b0:	200b      	movs	r0, #11
 80015b2:	f002 fe00 	bl	80041b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	200c      	movs	r0, #12
 80015bc:	f002 fde1 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015c0:	200c      	movs	r0, #12
 80015c2:	f002 fdf8 	bl	80041b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	203a      	movs	r0, #58	; 0x3a
 80015cc:	f002 fdd9 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80015d0:	203a      	movs	r0, #58	; 0x3a
 80015d2:	f002 fdf0 	bl	80041b6 <HAL_NVIC_EnableIRQ>

}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <MX_FDCAN1_Init+0x88>)
 80015ea:	4a21      	ldr	r2, [pc, #132]	; (8001670 <MX_FDCAN1_Init+0x8c>)
 80015ec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <MX_FDCAN1_Init+0x88>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_FDCAN1_Init+0x88>)
 80015f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015fa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_FDCAN1_Init+0x88>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001604:	2200      	movs	r2, #0
 8001606:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_FDCAN1_Init+0x88>)
 800160a:	2200      	movs	r2, #0
 800160c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001610:	2200      	movs	r2, #0
 8001612:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001616:	2201      	movs	r2, #1
 8001618:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_FDCAN1_Init+0x88>)
 800161c:	2207      	movs	r2, #7
 800161e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001622:	222a      	movs	r2, #42	; 0x2a
 8001624:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001628:	2207      	movs	r2, #7
 800162a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_FDCAN1_Init+0x88>)
 800162e:	2201      	movs	r2, #1
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001634:	2209      	movs	r2, #9
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_FDCAN1_Init+0x88>)
 800163a:	220a      	movs	r2, #10
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001640:	2209      	movs	r2, #9
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001646:	2200      	movs	r2, #0
 8001648:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_FDCAN1_Init+0x88>)
 800164c:	2200      	movs	r2, #0
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001652:	2200      	movs	r2, #0
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_FDCAN1_Init+0x88>)
 8001658:	f003 fb16 	bl	8004c88 <HAL_FDCAN_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001662:	f000 f999 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200002fc 	.word	0x200002fc
 8001670:	40006400 	.word	0x40006400

08001674 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b09a      	sub	sp, #104	; 0x68
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2244      	movs	r2, #68	; 0x44
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f007 fa31 	bl	8008afc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a24      	ldr	r2, [pc, #144]	; (8001730 <HAL_FDCAN_MspInit+0xbc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d141      	bne.n	8001728 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80016aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 f969 	bl	800698c <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80016c0:	f000 f96a 	bl	8001998 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_FDCAN_MspInit+0xc0>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <HAL_FDCAN_MspInit+0xc0>)
 80016ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_FDCAN_MspInit+0xc0>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_FDCAN_MspInit+0xc0>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_FDCAN_MspInit+0xc0>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_FDCAN_MspInit+0xc0>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016f8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001706:	2309      	movs	r3, #9
 8001708:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f004 f95e 	bl	80059d4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2015      	movs	r0, #21
 800171e:	f002 fd30 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001722:	2015      	movs	r0, #21
 8001724:	f002 fd47 	bl	80041b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001728:	bf00      	nop
 800172a:	3768      	adds	r7, #104	; 0x68
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40006400 	.word	0x40006400
 8001734:	40021000 	.word	0x40021000

08001738 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_FMAC_Init+0x20>)
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <MX_FMAC_Init+0x24>)
 8001740:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_FMAC_Init+0x20>)
 8001744:	f004 f89a 	bl	800587c <HAL_FMAC_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800174e:	f000 f923 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000360 	.word	0x20000360
 800175c:	40021400 	.word	0x40021400

08001760 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_FMAC_MspInit+0x38>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10b      	bne.n	800178a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_FMAC_MspInit+0x3c>)
 8001774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_FMAC_MspInit+0x3c>)
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	6493      	str	r3, [r2, #72]	; 0x48
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_FMAC_MspInit+0x3c>)
 8001780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40021400 	.word	0x40021400
 800179c:	40021000 	.word	0x40021000

080017a0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b6:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <MX_GPIO_Init+0x110>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4a3d      	ldr	r2, [pc, #244]	; (80018b0 <MX_GPIO_Init+0x110>)
 80017bc:	f043 0320 	orr.w	r3, r3, #32
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <MX_GPIO_Init+0x110>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f003 0320 	and.w	r3, r3, #32
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <MX_GPIO_Init+0x110>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a37      	ldr	r2, [pc, #220]	; (80018b0 <MX_GPIO_Init+0x110>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <MX_GPIO_Init+0x110>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <MX_GPIO_Init+0x110>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a31      	ldr	r2, [pc, #196]	; (80018b0 <MX_GPIO_Init+0x110>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <MX_GPIO_Init+0x110>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <MX_GPIO_Init+0x110>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a2b      	ldr	r2, [pc, #172]	; (80018b0 <MX_GPIO_Init+0x110>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <MX_GPIO_Init+0x110>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	21c0      	movs	r1, #192	; 0xc0
 800181a:	4826      	ldr	r0, [pc, #152]	; (80018b4 <MX_GPIO_Init+0x114>)
 800181c:	f004 fa74 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182a:	f004 fa6d 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800182e:	2301      	movs	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	481d      	ldr	r0, [pc, #116]	; (80018b8 <MX_GPIO_Init+0x118>)
 8001842:	f004 f8c7 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8001846:	23c0      	movs	r3, #192	; 0xc0
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4815      	ldr	r0, [pc, #84]	; (80018b4 <MX_GPIO_Init+0x114>)
 800185e:	f004 f8b9 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001882:	f004 f8a7 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8001886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f004 f897 	bl	80059d4 <HAL_GPIO_Init>

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000800 	.word	0x48000800
 80018b8:	48000400 	.word	0x48000400

080018bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c0:	f000 fa91 	bl	8001de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c4:	f000 f815 	bl	80018f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c8:	f7ff ff6a 	bl	80017a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80018cc:	f7ff fe44 	bl	8001558 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80018d0:	f7ff fe88 	bl	80015e4 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 80018d4:	f7ff fb42 	bl	8000f5c <MX_ADC1_Init>
  MX_ADC2_Init();
 80018d8:	f7ff fbf4 	bl	80010c4 <MX_ADC2_Init>
  MX_DAC1_Init();
 80018dc:	f7ff fdc4 	bl	8001468 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80018e0:	f000 f97e 	bl	8001be0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80018e4:	f000 f908 	bl	8001af8 <MX_TIM3_Init>
  MX_FMAC_Init();
 80018e8:	f7ff ff26 	bl	8001738 <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 80018ec:	f7fe fe3a 	bl	8000564 <BLDC_main>
 80018f0:	e7fc      	b.n	80018ec <main+0x30>

080018f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b094      	sub	sp, #80	; 0x50
 80018f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	2238      	movs	r2, #56	; 0x38
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f007 f8fb 	bl	8008afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001914:	2000      	movs	r0, #0
 8001916:	f004 fa0f 	bl	8005d38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001924:	2340      	movs	r3, #64	; 0x40
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001928:	2302      	movs	r3, #2
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800192c:	2302      	movs	r3, #2
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001930:	2304      	movs	r3, #4
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001934:	2350      	movs	r3, #80	; 0x50
 8001936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001938:	2302      	movs	r3, #2
 800193a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800193c:	2308      	movs	r3, #8
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001940:	2302      	movs	r3, #2
 8001942:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	4618      	mov	r0, r3
 800194a:	f004 faa9 	bl	8005ea0 <HAL_RCC_OscConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001954:	f000 f820 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001958:	230f      	movs	r3, #15
 800195a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195c:	2303      	movs	r3, #3
 800195e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2104      	movs	r1, #4
 8001970:	4618      	mov	r0, r3
 8001972:	f004 fdad 	bl	80064d0 <HAL_RCC_ClockConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800197c:	f000 f80c 	bl	8001998 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8001980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001984:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8001988:	f44f 7080 	mov.w	r0, #256	; 0x100
 800198c:	f004 fedc 	bl	8006748 <HAL_RCC_MCOConfig>
}
 8001990:	bf00      	nop
 8001992:	3750      	adds	r7, #80	; 0x50
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <Error_Handler+0x8>
	...

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_MspInit+0x44>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <HAL_MspInit+0x44>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6613      	str	r3, [r2, #96]	; 0x60
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_MspInit+0x44>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_MspInit+0x44>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_MspInit+0x44>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6593      	str	r3, [r2, #88]	; 0x58
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_MspInit+0x44>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019da:	f004 fa51 	bl	8005e80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 fa28 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <DMA1_Channel1_IRQHandler+0x10>)
 8001a46:	f002 ffd0 	bl	80049ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000224 	.word	0x20000224

08001a54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <DMA1_Channel2_IRQHandler+0x10>)
 8001a5a:	f002 ffc6 	bl	80049ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000284 	.word	0x20000284

08001a68 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <ADC1_2_IRQHandler+0x14>)
 8001a6e:	f001 f8f3 	bl	8002c58 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <ADC1_2_IRQHandler+0x18>)
 8001a74:	f001 f8f0 	bl	8002c58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000014c 	.word	0x2000014c
 8001a80:	200001b8 	.word	0x200001b8

08001a84 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <FDCAN1_IT0_IRQHandler+0x10>)
 8001a8a:	f003 fc83 	bl	8005394 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002fc 	.word	0x200002fc

08001a98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <TIM3_IRQHandler+0x10>)
 8001a9e:	f005 f9bc 	bl	8006e1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000398 	.word	0x20000398

08001aac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <USART1_IRQHandler+0x10>)
 8001ab2:	f005 fea1 	bl	80077f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200003e4 	.word	0x200003e4

08001ac0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <DMA2_Channel3_IRQHandler+0x10>)
 8001ac6:	f002 ff90 	bl	80049ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000474 	.word	0x20000474

08001ad4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <SystemInit+0x20>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <SystemInit+0x20>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0310 	add.w	r3, r7, #16
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b18:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b1e:	2203      	movs	r2, #3
 8001b20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b2a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001b2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b3c:	4813      	ldr	r0, [pc, #76]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b3e:	f005 f915 	bl	8006d6c <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b48:	f7ff ff26 	bl	8001998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b52:	f107 0310 	add.w	r3, r7, #16
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b5a:	f005 fadd 	bl	8007118 <HAL_TIM_ConfigClockSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b64:	f7ff ff18 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b76:	f005 fd27 	bl	80075c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b80:	f7ff ff0a 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000398 	.word	0x20000398
 8001b90:	40000400 	.word	0x40000400

08001b94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_TIM_Base_MspInit+0x44>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d113      	bne.n	8001bce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_TIM_Base_MspInit+0x48>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <HAL_TIM_Base_MspInit+0x48>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_TIM_Base_MspInit+0x48>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	201d      	movs	r0, #29
 8001bc4:	f002 fadd 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bc8:	201d      	movs	r0, #29
 8001bca:	f002 faf4 	bl	80041b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	40021000 	.word	0x40021000

08001be0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001be6:	4a23      	ldr	r2, [pc, #140]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001bec:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c06:	220c      	movs	r2, #12
 8001c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c28:	4811      	ldr	r0, [pc, #68]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c2a:	f005 fd95 	bl	8007758 <HAL_UART_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c34:	f7ff feb0 	bl	8001998 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c38:	2100      	movs	r1, #0
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c3c:	f006 fe93 	bl	8008966 <HAL_UARTEx_SetTxFifoThreshold>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c46:	f7ff fea7 	bl	8001998 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4808      	ldr	r0, [pc, #32]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c4e:	f006 fec8 	bl	80089e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c58:	f7ff fe9e 	bl	8001998 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c5c:	4804      	ldr	r0, [pc, #16]	; (8001c70 <MX_USART1_UART_Init+0x90>)
 8001c5e:	f006 fe49 	bl	80088f4 <HAL_UARTEx_DisableFifoMode>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c68:	f7ff fe96 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200003e4 	.word	0x200003e4
 8001c74:	40013800 	.word	0x40013800

08001c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b09a      	sub	sp, #104	; 0x68
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2244      	movs	r2, #68	; 0x44
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f006 ff2f 	bl	8008afc <memset>
  if(uartHandle->Instance==USART1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a37      	ldr	r2, [pc, #220]	; (8001d80 <HAL_UART_MspInit+0x108>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d166      	bne.n	8001d76 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 fe69 	bl	800698c <HAL_RCCEx_PeriphCLKConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cc0:	f7ff fe6a 	bl	8001998 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc4:	4b2f      	ldr	r3, [pc, #188]	; (8001d84 <HAL_UART_MspInit+0x10c>)
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc8:	4a2e      	ldr	r2, [pc, #184]	; (8001d84 <HAL_UART_MspInit+0x10c>)
 8001cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cce:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <HAL_UART_MspInit+0x10c>)
 8001cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <HAL_UART_MspInit+0x10c>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce0:	4a28      	ldr	r2, [pc, #160]	; (8001d84 <HAL_UART_MspInit+0x10c>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <HAL_UART_MspInit+0x10c>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cf4:	2330      	movs	r3, #48	; 0x30
 8001cf6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d04:	2307      	movs	r3, #7
 8001d06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481e      	ldr	r0, [pc, #120]	; (8001d88 <HAL_UART_MspInit+0x110>)
 8001d10:	f003 fe60 	bl	80059d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <HAL_UART_MspInit+0x118>)
 8001d18:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d1c:	2219      	movs	r2, #25
 8001d1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d22:	2210      	movs	r2, #16
 8001d24:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d4a:	4810      	ldr	r0, [pc, #64]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d4c:	f002 fc6a 	bl	8004624 <HAL_DMA_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8001d56:	f7ff fe1f 	bl	8001998 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d5e:	679a      	str	r2, [r3, #120]	; 0x78
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_UART_MspInit+0x114>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2025      	movs	r0, #37	; 0x25
 8001d6c:	f002 fa09 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d70:	2025      	movs	r0, #37	; 0x25
 8001d72:	f002 fa20 	bl	80041b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d76:	bf00      	nop
 8001d78:	3768      	adds	r7, #104	; 0x68
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40021000 	.word	0x40021000
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	20000474 	.word	0x20000474
 8001d90:	40020430 	.word	0x40020430

08001d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d9a:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <LoopForever+0xe>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db0:	4c0b      	ldr	r4, [pc, #44]	; (8001de0 <LoopForever+0x16>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dbe:	f7ff fe89 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f006 fea3 	bl	8008b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc6:	f7ff fd79 	bl	80018bc <main>

08001dca <LoopForever>:

LoopForever:
    b LoopForever
 8001dca:	e7fe      	b.n	8001dca <LoopForever>
  ldr   r0, =_estack
 8001dcc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001dd8:	08008be8 	.word	0x08008be8
  ldr r2, =_sbss
 8001ddc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001de0:	200004d8 	.word	0x200004d8

08001de4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <COMP1_2_3_IRQHandler>

08001de6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f002 f9bb 	bl	800416c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df6:	200f      	movs	r0, #15
 8001df8:	f000 f80e 	bl	8001e18 <HAL_InitTick>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	e001      	b.n	8001e0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e08:	f7ff fdcc 	bl	80019a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e0c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_InitTick+0x68>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d022      	beq.n	8001e72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_InitTick+0x6c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_InitTick+0x68>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 f9c6 	bl	80041d2 <HAL_SYSTICK_Config>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10f      	bne.n	8001e6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	d809      	bhi.n	8001e66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e52:	2200      	movs	r2, #0
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5a:	f002 f992 	bl	8004182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_InitTick+0x70>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e004      	b.n	8001e76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e001      	b.n	8001e76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	2000000c 	.word	0x2000000c
 8001e84:	20000004 	.word	0x20000004
 8001e88:	20000008 	.word	0x20000008

08001e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x1c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_IncTick+0x20>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_IncTick+0x1c>)
 8001e9c:	6013      	str	r3, [r2, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	200004d4 	.word	0x200004d4
 8001eac:	2000000c 	.word	0x2000000c

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_GetTick+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	200004d4 	.word	0x200004d4

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff ffee 	bl	8001eb0 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d004      	beq.n	8001eec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_Delay+0x40>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eec:	bf00      	nop
 8001eee:	f7ff ffdf 	bl	8001eb0 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d8f7      	bhi.n	8001eee <HAL_Delay+0x26>
  {
  }
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3360      	adds	r3, #96	; 0x60
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <LL_ADC_SetOffset+0x44>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fac:	bf00      	nop
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	03fff000 	.word	0x03fff000

08001fbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3360      	adds	r3, #96	; 0x60
 8001fca:	461a      	mov	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3360      	adds	r3, #96	; 0x60
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800201e:	b480      	push	{r7}
 8002020:	b087      	sub	sp, #28
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3360      	adds	r3, #96	; 0x60
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	431a      	orrs	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002048:	bf00      	nop
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3360      	adds	r3, #96	; 0x60
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	431a      	orrs	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	615a      	str	r2, [r3, #20]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3330      	adds	r3, #48	; 0x30
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	4413      	add	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	211f      	movs	r1, #31
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	401a      	ands	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	f003 011f 	and.w	r1, r3, #31
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002122:	bf00      	nop
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3314      	adds	r3, #20
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	0e5b      	lsrs	r3, r3, #25
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0d1b      	lsrs	r3, r3, #20
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2107      	movs	r1, #7
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	401a      	ands	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	0d1b      	lsrs	r3, r3, #20
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d10a      	bne.n	80021d6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021cc:	431a      	orrs	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80021d4:	e00a      	b.n	80021ec <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	43db      	mvns	r3, r3
 80021e4:	401a      	ands	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	407f0000 	.word	0x407f0000

080021fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 031f 	and.w	r3, r3, #31
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6093      	str	r3, [r2, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800226c:	d101      	bne.n	8002272 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002290:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002294:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022bc:	d101      	bne.n	80022c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800230c:	f043 0202 	orr.w	r2, r3, #2
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <LL_ADC_IsEnabled+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_ADC_IsEnabled+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b02      	cmp	r3, #2
 8002358:	d101      	bne.n	800235e <LL_ADC_IsDisableOngoing+0x18>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_ADC_IsDisableOngoing+0x1a>
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800237c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a8:	f043 0210 	orr.w	r2, r3, #16
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d101      	bne.n	80023d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023f6:	f043 0220 	orr.w	r2, r3, #32
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b08      	cmp	r3, #8
 800241c:	d101      	bne.n	8002422 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e177      	b.n	800273a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fe fed7 	bl	800120c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fef1 	bl	8002258 <LL_ADC_IsDeepPowerDownEnabled>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fed7 	bl	8002234 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff0c 	bl	80022a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d115      	bne.n	80024c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fef0 	bl	8002280 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024a0:	4b9c      	ldr	r3, [pc, #624]	; (8002714 <HAL_ADC_Init+0x2e4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	4a9c      	ldr	r2, [pc, #624]	; (8002718 <HAL_ADC_Init+0x2e8>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	3301      	adds	r3, #1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff feee 	bl	80022a8 <LL_ADC_IsInternalRegulatorEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff62 	bl	80023bc <LL_ADC_REG_IsConversionOngoing>
 80024f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 8110 	bne.w	8002728 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 810c 	bne.w	8002728 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002518:	f043 0202 	orr.w	r2, r3, #2
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fefb 	bl	8002320 <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d111      	bne.n	8002554 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002530:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002534:	f7ff fef4 	bl	8002320 <LL_ADC_IsEnabled>
 8002538:	4604      	mov	r4, r0
 800253a:	4878      	ldr	r0, [pc, #480]	; (800271c <HAL_ADC_Init+0x2ec>)
 800253c:	f7ff fef0 	bl	8002320 <LL_ADC_IsEnabled>
 8002540:	4603      	mov	r3, r0
 8002542:	4323      	orrs	r3, r4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4619      	mov	r1, r3
 800254e:	4874      	ldr	r0, [pc, #464]	; (8002720 <HAL_ADC_Init+0x2f0>)
 8002550:	f7ff fcdc 	bl	8001f0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7f5b      	ldrb	r3, [r3, #29]
 8002558:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800255e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002564:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800256a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002572:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800257e:	2b01      	cmp	r3, #1
 8002580:	d106      	bne.n	8002590 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	045b      	lsls	r3, r3, #17
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d009      	beq.n	80025ac <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	4b5c      	ldr	r3, [pc, #368]	; (8002724 <HAL_ADC_Init+0x2f4>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	430b      	orrs	r3, r1
 80025be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff feee 	bl	80023bc <LL_ADC_REG_IsConversionOngoing>
 80025e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff0f 	bl	800240a <LL_ADC_INJ_IsConversionOngoing>
 80025ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d16d      	bne.n	80026d0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d16a      	bne.n	80026d0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002606:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002616:	f023 0302 	bic.w	r3, r3, #2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	430b      	orrs	r3, r1
 8002622:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d017      	beq.n	800265c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800263a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002644:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6911      	ldr	r1, [r2, #16]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	430b      	orrs	r3, r1
 8002656:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800265a:	e013      	b.n	8002684 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800266a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800267c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002680:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268a:	2b01      	cmp	r3, #1
 800268c:	d118      	bne.n	80026c0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026aa:	4311      	orrs	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026b0:	430a      	orrs	r2, r1
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	e007      	b.n	80026d0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d10c      	bne.n	80026f2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f023 010f 	bic.w	r1, r3, #15
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
 80026f0:	e007      	b.n	8002702 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 020f 	bic.w	r2, r2, #15
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	65da      	str	r2, [r3, #92]	; 0x5c
 8002712:	e011      	b.n	8002738 <HAL_ADC_Init+0x308>
 8002714:	20000004 	.word	0x20000004
 8002718:	053e2d63 	.word	0x053e2d63
 800271c:	50000100 	.word	0x50000100
 8002720:	50000300 	.word	0x50000300
 8002724:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	f043 0210 	orr.w	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002738:	7ffb      	ldrb	r3, [r7, #31]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd90      	pop	{r4, r7, pc}
 8002742:	bf00      	nop

08002744 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800274c:	4859      	ldr	r0, [pc, #356]	; (80028b4 <HAL_ADC_Start+0x170>)
 800274e:	f7ff fd55 	bl	80021fc <LL_ADC_GetMultimode>
 8002752:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fe2f 	bl	80023bc <LL_ADC_REG_IsConversionOngoing>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 809f 	bne.w	80028a4 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_ADC_Start+0x30>
 8002770:	2302      	movs	r3, #2
 8002772:	e09a      	b.n	80028aa <HAL_ADC_Start+0x166>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f001 f945 	bl	8003a0c <ADC_Enable>
 8002782:	4603      	mov	r3, r0
 8002784:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 8086 	bne.w	800289a <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a44      	ldr	r2, [pc, #272]	; (80028b8 <HAL_ADC_Start+0x174>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d002      	beq.n	80027b2 <HAL_ADC_Start+0x6e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	e001      	b.n	80027b6 <HAL_ADC_Start+0x72>
 80027b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d002      	beq.n	80027c4 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027dc:	d106      	bne.n	80027ec <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e2:	f023 0206 	bic.w	r2, r3, #6
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	661a      	str	r2, [r3, #96]	; 0x60
 80027ea:	e002      	b.n	80027f2 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	221c      	movs	r2, #28
 80027f8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <HAL_ADC_Start+0x174>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d002      	beq.n	8002812 <HAL_ADC_Start+0xce>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	e001      	b.n	8002816 <HAL_ADC_Start+0xd2>
 8002812:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	4293      	cmp	r3, r2
 800281c:	d008      	beq.n	8002830 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b05      	cmp	r3, #5
 8002828:	d002      	beq.n	8002830 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b09      	cmp	r3, #9
 800282e:	d114      	bne.n	800285a <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fd8a 	bl	800236c <LL_ADC_REG_StartConversion>
 8002858:	e026      	b.n	80028a8 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_ADC_Start+0x174>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d002      	beq.n	8002876 <HAL_ADC_Start+0x132>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e001      	b.n	800287a <HAL_ADC_Start+0x136>
 8002876:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800287a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00f      	beq.n	80028a8 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002890:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	65da      	str	r2, [r3, #92]	; 0x5c
 8002898:	e006      	b.n	80028a8 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80028a2:	e001      	b.n	80028a8 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
 80028a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	50000300 	.word	0x50000300
 80028b8:	50000100 	.word	0x50000100

080028bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_Stop+0x16>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e023      	b.n	800291a <HAL_ADC_Stop+0x5e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028da:	2103      	movs	r1, #3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 ffd9 	bl	8003894 <ADC_ConversionStop>
 80028e2:	4603      	mov	r3, r0
 80028e4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f001 f8ef 	bl	8003ad0 <ADC_Disable>
 80028f2:	4603      	mov	r3, r0
 80028f4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800292e:	4867      	ldr	r0, [pc, #412]	; (8002acc <HAL_ADC_PollForConversion+0x1a8>)
 8002930:	f7ff fc64 	bl	80021fc <LL_ADC_GetMultimode>
 8002934:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d102      	bne.n	8002944 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800293e:	2308      	movs	r3, #8
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	e02a      	b.n	800299a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d002      	beq.n	8002956 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2b09      	cmp	r3, #9
 8002954:	d111      	bne.n	800297a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0a6      	b.n	8002ac2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002974:	2304      	movs	r3, #4
 8002976:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002978:	e00f      	b.n	800299a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800297a:	4854      	ldr	r0, [pc, #336]	; (8002acc <HAL_ADC_PollForConversion+0x1a8>)
 800297c:	f7ff fc4c 	bl	8002218 <LL_ADC_GetMultiDMATransfer>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e095      	b.n	8002ac2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002996:	2304      	movs	r3, #4
 8002998:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800299a:	f7ff fa89 	bl	8001eb0 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029a0:	e021      	b.n	80029e6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d01d      	beq.n	80029e6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80029aa:	f7ff fa81 	bl	8001eb0 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d302      	bcc.n	80029c0 <HAL_ADC_PollForConversion+0x9c>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d112      	bne.n	80029e6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10b      	bne.n	80029e6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	f043 0204 	orr.w	r2, r3, #4
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e06d      	b.n	8002ac2 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0d6      	beq.n	80029a2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fb53 	bl	80020b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01c      	beq.n	8002a4a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7f5b      	ldrb	r3, [r3, #29]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d118      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d111      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_ADC_PollForConversion+0x1ac>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d002      	beq.n	8002a5a <HAL_ADC_PollForConversion+0x136>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	e001      	b.n	8002a5e <HAL_ADC_PollForConversion+0x13a>
 8002a5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d008      	beq.n	8002a78 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d002      	beq.n	8002a78 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d104      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	e00d      	b.n	8002a9e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <HAL_ADC_PollForConversion+0x1ac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d002      	beq.n	8002a92 <HAL_ADC_PollForConversion+0x16e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	e001      	b.n	8002a96 <HAL_ADC_PollForConversion+0x172>
 8002a92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a96:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d104      	bne.n	8002aae <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e008      	b.n	8002ac0 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	220c      	movs	r2, #12
 8002abe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	50000300 	.word	0x50000300
 8002ad0:	50000100 	.word	0x50000100

08002ad4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ae0:	4851      	ldr	r0, [pc, #324]	; (8002c28 <HAL_ADC_Start_DMA+0x154>)
 8002ae2:	f7ff fb8b 	bl	80021fc <LL_ADC_GetMultimode>
 8002ae6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fc65 	bl	80023bc <LL_ADC_REG_IsConversionOngoing>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 808f 	bne.w	8002c18 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_Start_DMA+0x34>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e08a      	b.n	8002c1e <HAL_ADC_Start_DMA+0x14a>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d002      	beq.n	8002b22 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b09      	cmp	r3, #9
 8002b20:	d173      	bne.n	8002c0a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 ff72 	bl	8003a0c <ADC_Enable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d166      	bne.n	8002c00 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a38      	ldr	r2, [pc, #224]	; (8002c2c <HAL_ADC_Start_DMA+0x158>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d002      	beq.n	8002b56 <HAL_ADC_Start_DMA+0x82>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	e001      	b.n	8002b5a <HAL_ADC_Start_DMA+0x86>
 8002b56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d002      	beq.n	8002b68 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b84:	f023 0206 	bic.w	r2, r3, #6
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60
 8002b8c:	e002      	b.n	8002b94 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <HAL_ADC_Start_DMA+0x15c>)
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <HAL_ADC_Start_DMA+0x160>)
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <HAL_ADC_Start_DMA+0x164>)
 8002baa:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	221c      	movs	r2, #28
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0210 	orr.w	r2, r2, #16
 8002bca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3340      	adds	r3, #64	; 0x40
 8002be6:	4619      	mov	r1, r3
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f001 fdc2 	bl	8004774 <HAL_DMA_Start_IT>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fbb7 	bl	800236c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002bfe:	e00d      	b.n	8002c1c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002c08:	e008      	b.n	8002c1c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002c16:	e001      	b.n	8002c1c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	50000300 	.word	0x50000300
 8002c2c:	50000100 	.word	0x50000100
 8002c30:	08003b8f 	.word	0x08003b8f
 8002c34:	08003c67 	.word	0x08003c67
 8002c38:	08003c83 	.word	0x08003c83

08002c3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c74:	4883      	ldr	r0, [pc, #524]	; (8002e84 <HAL_ADC_IRQHandler+0x22c>)
 8002c76:	f7ff fac1 	bl	80021fc <LL_ADC_GetMultimode>
 8002c7a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x5e>
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f001 f8e1 	bl	8003e70 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_ADC_IRQHandler+0x72>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8085 	beq.w	8002de0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d07f      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f9d7 	bl	80020b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d064      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a5e      	ldr	r2, [pc, #376]	; (8002e88 <HAL_ADC_IRQHandler+0x230>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d002      	beq.n	8002d18 <HAL_ADC_IRQHandler+0xc0>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e001      	b.n	8002d1c <HAL_ADC_IRQHandler+0xc4>
 8002d18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d008      	beq.n	8002d36 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d002      	beq.n	8002d36 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d104      	bne.n	8002d40 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	623b      	str	r3, [r7, #32]
 8002d3e:	e00d      	b.n	8002d5c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a50      	ldr	r2, [pc, #320]	; (8002e88 <HAL_ADC_IRQHandler+0x230>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d002      	beq.n	8002d50 <HAL_ADC_IRQHandler+0xf8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	e001      	b.n	8002d54 <HAL_ADC_IRQHandler+0xfc>
 8002d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d54:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d135      	bne.n	8002dd2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d12e      	bne.n	8002dd2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fb1f 	bl	80023bc <LL_ADC_REG_IsConversionOngoing>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d11a      	bne.n	8002dba <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 020c 	bic.w	r2, r2, #12
 8002d92:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d112      	bne.n	8002dd2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db8:	e00b      	b.n	8002dd2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	f043 0210 	orr.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fd ff36 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	220c      	movs	r2, #12
 8002dde:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <HAL_ADC_IRQHandler+0x19c>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10b      	bne.n	8002e0c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 809e 	beq.w	8002f3c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8098 	beq.w	8002f3c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f980 	bl	800212e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e2e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff f93b 	bl	80020b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e3a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a11      	ldr	r2, [pc, #68]	; (8002e88 <HAL_ADC_IRQHandler+0x230>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d002      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x1f4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	e001      	b.n	8002e50 <HAL_ADC_IRQHandler+0x1f8>
 8002e4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d008      	beq.n	8002e6a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d002      	beq.n	8002e6a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b07      	cmp	r3, #7
 8002e68:	d104      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	e011      	b.n	8002e98 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_ADC_IRQHandler+0x230>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d006      	beq.n	8002e8c <HAL_ADC_IRQHandler+0x234>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	e005      	b.n	8002e90 <HAL_ADC_IRQHandler+0x238>
 8002e84:	50000300 	.word	0x50000300
 8002e88:	50000100 	.word	0x50000100
 8002e8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e90:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d047      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <HAL_ADC_IRQHandler+0x260>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03f      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d13a      	bne.n	8002f2e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d133      	bne.n	8002f2e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d12e      	bne.n	8002f2e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fa98 	bl	800240a <LL_ADC_INJ_IsConversionOngoing>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11a      	bne.n	8002f16 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002eee:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d112      	bne.n	8002f2e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f14:	e00b      	b.n	8002f2e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	f043 0210 	orr.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 ff76 	bl	8003e20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2260      	movs	r2, #96	; 0x60
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d011      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x312>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00c      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f895 	bl	800308c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x342>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 ff5c 	bl	8003e48 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d012      	beq.n	8002fca <HAL_ADC_IRQHandler+0x372>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 ff4e 	bl	8003e5c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d036      	beq.n	8003042 <HAL_ADC_IRQHandler+0x3ea>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d031      	beq.n	8003042 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	e014      	b.n	8003016 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ff2:	4825      	ldr	r0, [pc, #148]	; (8003088 <HAL_ADC_IRQHandler+0x430>)
 8002ff4:	f7ff f910 	bl	8002218 <LL_ADC_GetMultiDMATransfer>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002ffe:	2301      	movs	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	e008      	b.n	8003016 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003012:	2301      	movs	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10e      	bne.n	800303a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302c:	f043 0202 	orr.w	r2, r3, #2
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f833 	bl	80030a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2210      	movs	r2, #16
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003048:	2b00      	cmp	r3, #0
 800304a:	d018      	beq.n	800307e <HAL_ADC_IRQHandler+0x426>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003052:	2b00      	cmp	r3, #0
 8003054:	d013      	beq.n	800307e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	f043 0208 	orr.w	r2, r3, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003076:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fedb 	bl	8003e34 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800307e:	bf00      	nop
 8003080:	3728      	adds	r7, #40	; 0x28
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	50000300 	.word	0x50000300

0800308c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0b6      	sub	sp, #216	; 0xd8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x22>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e3c8      	b.n	8003868 <HAL_ADC_ConfigChannel+0x7b4>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f96a 	bl	80023bc <LL_ADC_REG_IsConversionOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 83ad 	bne.w	800384a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f7fe ffea 	bl	80020d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f958 	bl	80023bc <LL_ADC_REG_IsConversionOngoing>
 800310c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f978 	bl	800240a <LL_ADC_INJ_IsConversionOngoing>
 800311a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800311e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003122:	2b00      	cmp	r3, #0
 8003124:	f040 81d9 	bne.w	80034da <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 81d4 	bne.w	80034da <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800313a:	d10f      	bne.n	800315c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2200      	movs	r2, #0
 8003146:	4619      	mov	r1, r3
 8003148:	f7ff f804 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe ff98 	bl	800208a <LL_ADC_SetSamplingTimeCommonConfig>
 800315a:	e00e      	b.n	800317a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	461a      	mov	r2, r3
 800316a:	f7fe fff3 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe ff88 	bl	800208a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	08db      	lsrs	r3, r3, #3
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d022      	beq.n	80031e2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6919      	ldr	r1, [r3, #16]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031ac:	f7fe fee2 	bl	8001f74 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6919      	ldr	r1, [r3, #16]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	461a      	mov	r2, r3
 80031be:	f7fe ff2e 	bl	800201e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6919      	ldr	r1, [r3, #16]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	7f1b      	ldrb	r3, [r3, #28]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d102      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x124>
 80031d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d6:	e000      	b.n	80031da <HAL_ADC_ConfigChannel+0x126>
 80031d8:	2300      	movs	r3, #0
 80031da:	461a      	mov	r2, r3
 80031dc:	f7fe ff3a 	bl	8002054 <LL_ADC_SetOffsetSaturation>
 80031e0:	e17b      	b.n	80034da <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe fee7 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <HAL_ADC_ConfigChannel+0x15a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fedc 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8003204:	4603      	mov	r3, r0
 8003206:	0e9b      	lsrs	r3, r3, #26
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	e01e      	b.n	800324c <HAL_ADC_ConfigChannel+0x198>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe fed1 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 800321a:	4603      	mov	r3, r0
 800321c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800322c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003230:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	e004      	b.n	800324a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1b0>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	e018      	b.n	8003296 <HAL_ADC_ConfigChannel+0x1e2>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800327c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003288:	2320      	movs	r3, #32
 800328a:	e004      	b.n	8003296 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800328c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003296:	429a      	cmp	r2, r3
 8003298:	d106      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fea0 	bl	8001fe8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fe84 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x220>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe fe79 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 80032ca:	4603      	mov	r3, r0
 80032cc:	0e9b      	lsrs	r3, r3, #26
 80032ce:	f003 021f 	and.w	r2, r3, #31
 80032d2:	e01e      	b.n	8003312 <HAL_ADC_ConfigChannel+0x25e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2101      	movs	r1, #1
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fe6e 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003302:	2320      	movs	r3, #32
 8003304:	e004      	b.n	8003310 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331a:	2b00      	cmp	r3, #0
 800331c:	d105      	bne.n	800332a <HAL_ADC_ConfigChannel+0x276>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	e018      	b.n	800335c <HAL_ADC_ConfigChannel+0x2a8>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800333e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800334e:	2320      	movs	r3, #32
 8003350:	e004      	b.n	800335c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003352:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800335c:	429a      	cmp	r2, r3
 800335e:	d106      	bne.n	800336e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2200      	movs	r2, #0
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe fe3d 	bl	8001fe8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2102      	movs	r1, #2
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fe21 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 800337a:	4603      	mov	r3, r0
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_ADC_ConfigChannel+0x2e6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2102      	movs	r1, #2
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fe16 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8003390:	4603      	mov	r3, r0
 8003392:	0e9b      	lsrs	r3, r3, #26
 8003394:	f003 021f 	and.w	r2, r3, #31
 8003398:	e01e      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x324>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fe fe0b 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	e004      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80033cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x33c>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	e016      	b.n	800341e <HAL_ADC_ConfigChannel+0x36a>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003402:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003410:	2320      	movs	r3, #32
 8003412:	e004      	b.n	800341e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800341e:	429a      	cmp	r2, r3
 8003420:	d106      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	2102      	movs	r1, #2
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fddc 	bl	8001fe8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2103      	movs	r1, #3
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe fdc0 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10a      	bne.n	800345c <HAL_ADC_ConfigChannel+0x3a8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2103      	movs	r1, #3
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fdb5 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8003452:	4603      	mov	r3, r0
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	f003 021f 	and.w	r2, r3, #31
 800345a:	e017      	b.n	800348c <HAL_ADC_ConfigChannel+0x3d8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2103      	movs	r1, #3
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe fdaa 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8003468:	4603      	mov	r3, r0
 800346a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003476:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800347e:	2320      	movs	r3, #32
 8003480:	e003      	b.n	800348a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x3f0>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	e011      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x414>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e003      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80034c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d106      	bne.n	80034da <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2103      	movs	r1, #3
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe fd87 	bl	8001fe8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe ff1e 	bl	8002320 <LL_ADC_IsEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 8140 	bne.w	800376c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f7fe fe57 	bl	80021ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	4a8f      	ldr	r2, [pc, #572]	; (8003740 <HAL_ADC_ConfigChannel+0x68c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	f040 8131 	bne.w	800376c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10b      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x47e>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	0e9b      	lsrs	r3, r3, #26
 8003520:	3301      	adds	r3, #1
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2b09      	cmp	r3, #9
 8003528:	bf94      	ite	ls
 800352a:	2301      	movls	r3, #1
 800352c:	2300      	movhi	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e019      	b.n	8003566 <HAL_ADC_ConfigChannel+0x4b2>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003542:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800354a:	2320      	movs	r3, #32
 800354c:	e003      	b.n	8003556 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800354e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	3301      	adds	r3, #1
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2b09      	cmp	r3, #9
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003566:	2b00      	cmp	r3, #0
 8003568:	d079      	beq.n	800365e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003572:	2b00      	cmp	r3, #0
 8003574:	d107      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x4d2>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0e9b      	lsrs	r3, r3, #26
 800357c:	3301      	adds	r3, #1
 800357e:	069b      	lsls	r3, r3, #26
 8003580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003584:	e015      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x4fe>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003596:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800359e:	2320      	movs	r3, #32
 80035a0:	e003      	b.n	80035aa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	3301      	adds	r3, #1
 80035ac:	069b      	lsls	r3, r3, #26
 80035ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x51e>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	0e9b      	lsrs	r3, r3, #26
 80035c4:	3301      	adds	r3, #1
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	e017      	b.n	8003602 <HAL_ADC_ConfigChannel+0x54e>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80035ea:	2320      	movs	r3, #32
 80035ec:	e003      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80035ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2101      	movs	r1, #1
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	ea42 0103 	orr.w	r1, r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10a      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x574>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	3301      	adds	r3, #1
 800361a:	f003 021f 	and.w	r2, r3, #31
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	051b      	lsls	r3, r3, #20
 8003626:	e018      	b.n	800365a <HAL_ADC_ConfigChannel+0x5a6>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e003      	b.n	800364c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	f003 021f 	and.w	r2, r3, #31
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800365a:	430b      	orrs	r3, r1
 800365c:	e081      	b.n	8003762 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_ADC_ConfigChannel+0x5c6>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0e9b      	lsrs	r3, r3, #26
 8003670:	3301      	adds	r3, #1
 8003672:	069b      	lsls	r3, r3, #26
 8003674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003678:	e015      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x5f2>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003692:	2320      	movs	r3, #32
 8003694:	e003      	b.n	800369e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	069b      	lsls	r3, r3, #26
 80036a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x612>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0e9b      	lsrs	r3, r3, #26
 80036b8:	3301      	adds	r3, #1
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	e017      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x642>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	61fb      	str	r3, [r7, #28]
  return result;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80036de:	2320      	movs	r3, #32
 80036e0:	e003      	b.n	80036ea <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	ea42 0103 	orr.w	r1, r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10d      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x66e>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0e9b      	lsrs	r3, r3, #26
 800370c:	3301      	adds	r3, #1
 800370e:	f003 021f 	and.w	r2, r3, #31
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	3b1e      	subs	r3, #30
 800371a:	051b      	lsls	r3, r3, #20
 800371c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003720:	e01e      	b.n	8003760 <HAL_ADC_ConfigChannel+0x6ac>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	613b      	str	r3, [r7, #16]
  return result;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800373a:	2320      	movs	r3, #32
 800373c:	e006      	b.n	800374c <HAL_ADC_ConfigChannel+0x698>
 800373e:	bf00      	nop
 8003740:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f003 021f 	and.w	r2, r3, #31
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	3b1e      	subs	r3, #30
 800375a:	051b      	lsls	r3, r3, #20
 800375c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003760:	430b      	orrs	r3, r1
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	6892      	ldr	r2, [r2, #8]
 8003766:	4619      	mov	r1, r3
 8003768:	f7fe fcf4 	bl	8002154 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <HAL_ADC_ConfigChannel+0x7bc>)
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d071      	beq.n	800385c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003778:	483e      	ldr	r0, [pc, #248]	; (8003874 <HAL_ADC_ConfigChannel+0x7c0>)
 800377a:	f7fe fbed 	bl	8001f58 <LL_ADC_GetCommonPathInternalCh>
 800377e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a3c      	ldr	r2, [pc, #240]	; (8003878 <HAL_ADC_ConfigChannel+0x7c4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d004      	beq.n	8003796 <HAL_ADC_ConfigChannel+0x6e2>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3a      	ldr	r2, [pc, #232]	; (800387c <HAL_ADC_ConfigChannel+0x7c8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d127      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800379a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d121      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037aa:	d157      	bne.n	800385c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037b4:	4619      	mov	r1, r3
 80037b6:	482f      	ldr	r0, [pc, #188]	; (8003874 <HAL_ADC_ConfigChannel+0x7c0>)
 80037b8:	f7fe fbbb 	bl	8001f32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037bc:	4b30      	ldr	r3, [pc, #192]	; (8003880 <HAL_ADC_ConfigChannel+0x7cc>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	4a30      	ldr	r2, [pc, #192]	; (8003884 <HAL_ADC_ConfigChannel+0x7d0>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037d6:	e002      	b.n	80037de <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3b01      	subs	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f9      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e4:	e03a      	b.n	800385c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a27      	ldr	r2, [pc, #156]	; (8003888 <HAL_ADC_ConfigChannel+0x7d4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d113      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x764>
 80037f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10d      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a22      	ldr	r2, [pc, #136]	; (800388c <HAL_ADC_ConfigChannel+0x7d8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d02a      	beq.n	800385c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800380a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800380e:	4619      	mov	r1, r3
 8003810:	4818      	ldr	r0, [pc, #96]	; (8003874 <HAL_ADC_ConfigChannel+0x7c0>)
 8003812:	f7fe fb8e 	bl	8001f32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003816:	e021      	b.n	800385c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_ADC_ConfigChannel+0x7dc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d11c      	bne.n	800385c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <HAL_ADC_ConfigChannel+0x7d8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d011      	beq.n	800385c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800383c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003840:	4619      	mov	r1, r3
 8003842:	480c      	ldr	r0, [pc, #48]	; (8003874 <HAL_ADC_ConfigChannel+0x7c0>)
 8003844:	f7fe fb75 	bl	8001f32 <LL_ADC_SetCommonPathInternalCh>
 8003848:	e008      	b.n	800385c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	f043 0220 	orr.w	r2, r3, #32
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003864:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003868:	4618      	mov	r0, r3
 800386a:	37d8      	adds	r7, #216	; 0xd8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	80080000 	.word	0x80080000
 8003874:	50000300 	.word	0x50000300
 8003878:	c3210000 	.word	0xc3210000
 800387c:	90c00010 	.word	0x90c00010
 8003880:	20000004 	.word	0x20000004
 8003884:	053e2d63 	.word	0x053e2d63
 8003888:	c7520000 	.word	0xc7520000
 800388c:	50000100 	.word	0x50000100
 8003890:	cb840000 	.word	0xcb840000

08003894 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fd86 	bl	80023bc <LL_ADC_REG_IsConversionOngoing>
 80038b0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fda7 	bl	800240a <LL_ADC_INJ_IsConversionOngoing>
 80038bc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d103      	bne.n	80038cc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8098 	beq.w	80039fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d02a      	beq.n	8003930 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7f5b      	ldrb	r3, [r3, #29]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d126      	bne.n	8003930 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	7f1b      	ldrb	r3, [r3, #28]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d122      	bne.n	8003930 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038ee:	e014      	b.n	800391a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4a45      	ldr	r2, [pc, #276]	; (8003a08 <ADC_ConversionStop+0x174>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d90d      	bls.n	8003914 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	f043 0210 	orr.w	r2, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e074      	b.n	80039fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3301      	adds	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b40      	cmp	r3, #64	; 0x40
 8003926:	d1e3      	bne.n	80038f0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2240      	movs	r2, #64	; 0x40
 800392e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d014      	beq.n	8003960 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fd3e 	bl	80023bc <LL_ADC_REG_IsConversionOngoing>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fcfb 	bl	8002346 <LL_ADC_IsDisableOngoing>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fd1a 	bl	8002394 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d014      	beq.n	8003990 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fd4d 	bl	800240a <LL_ADC_INJ_IsConversionOngoing>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fce3 	bl	8002346 <LL_ADC_IsDisableOngoing>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fd29 	bl	80023e2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d005      	beq.n	80039a2 <ADC_ConversionStop+0x10e>
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d105      	bne.n	80039a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800399c:	230c      	movs	r3, #12
 800399e:	617b      	str	r3, [r7, #20]
        break;
 80039a0:	e005      	b.n	80039ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80039a2:	2308      	movs	r3, #8
 80039a4:	617b      	str	r3, [r7, #20]
        break;
 80039a6:	e002      	b.n	80039ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80039a8:	2304      	movs	r3, #4
 80039aa:	617b      	str	r3, [r7, #20]
        break;
 80039ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80039ae:	f7fe fa7f 	bl	8001eb0 <HAL_GetTick>
 80039b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039b4:	e01b      	b.n	80039ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039b6:	f7fe fa7b 	bl	8001eb0 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d914      	bls.n	80039ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e007      	b.n	80039fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1dc      	bne.n	80039b6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	a33fffff 	.word	0xa33fffff

08003a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe fc81 	bl	8002320 <LL_ADC_IsEnabled>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d14d      	bne.n	8003ac0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <ADC_Enable+0xc0>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	f043 0210 	orr.w	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e039      	b.n	8003ac2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fc3c 	bl	80022d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a58:	f7fe fa2a 	bl	8001eb0 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a5e:	e028      	b.n	8003ab2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe fc5b 	bl	8002320 <LL_ADC_IsEnabled>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fc2b 	bl	80022d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a7a:	f7fe fa19 	bl	8001eb0 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d914      	bls.n	8003ab2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d00d      	beq.n	8003ab2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	f043 0210 	orr.w	r2, r3, #16
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e007      	b.n	8003ac2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d1cf      	bne.n	8003a60 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	8000003f 	.word	0x8000003f

08003ad0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fc32 	bl	8002346 <LL_ADC_IsDisableOngoing>
 8003ae2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fc19 	bl	8002320 <LL_ADC_IsEnabled>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d047      	beq.n	8003b84 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d144      	bne.n	8003b84 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030d 	and.w	r3, r3, #13
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10c      	bne.n	8003b22 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe fbf3 	bl	80022f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2203      	movs	r2, #3
 8003b18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b1a:	f7fe f9c9 	bl	8001eb0 <HAL_GetTick>
 8003b1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b20:	e029      	b.n	8003b76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e023      	b.n	8003b86 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b3e:	f7fe f9b7 	bl	8001eb0 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d914      	bls.n	8003b76 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00d      	beq.n	8003b76 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	f043 0210 	orr.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e007      	b.n	8003b86 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1dc      	bne.n	8003b3e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d14b      	bne.n	8003c40 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d021      	beq.n	8003c06 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fa72 	bl	80020b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d032      	beq.n	8003c38 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d12b      	bne.n	8003c38 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11f      	bne.n	8003c38 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f043 0201 	orr.w	r2, r3, #1
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c04:	e018      	b.n	8003c38 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d111      	bne.n	8003c38 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7fd f803 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c3e:	e00e      	b.n	8003c5e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff fa27 	bl	80030a0 <HAL_ADC_ErrorCallback>
}
 8003c52:	e004      	b.n	8003c5e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7fc fee9 	bl	8000a4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca0:	f043 0204 	orr.w	r2, r3, #4
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff f9f9 	bl	80030a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <LL_ADC_IsEnabled>:
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <LL_ADC_IsEnabled+0x18>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <LL_ADC_IsEnabled+0x1a>
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_StartCalibration>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003cee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_ADC_IsCalibrationOnGoing>:
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d22:	d101      	bne.n	8003d28 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d101      	bne.n	8003d4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e04d      	b.n	8003e14 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fea5 	bl	8003ad0 <ADC_Disable>
 8003d86:	4603      	mov	r3, r0
 8003d88:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d136      	bne.n	8003dfe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d98:	f023 0302 	bic.w	r3, r3, #2
 8003d9c:	f043 0202 	orr.w	r2, r3, #2
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff96 	bl	8003cdc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003db0:	e014      	b.n	8003ddc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d90d      	bls.n	8003ddc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	f023 0312 	bic.w	r3, r3, #18
 8003dc8:	f043 0210 	orr.w	r2, r3, #16
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e01b      	b.n	8003e14 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff94 	bl	8003d0e <LL_ADC_IsCalibrationOnGoing>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e2      	bne.n	8003db2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	f023 0303 	bic.w	r3, r3, #3
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dfc:	e005      	b.n	8003e0a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e02:	f043 0210 	orr.w	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	0004de01 	.word	0x0004de01

08003e20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b0a1      	sub	sp, #132	; 0x84
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e08b      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eba:	d102      	bne.n	8003ec2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ebc:	4b41      	ldr	r3, [pc, #260]	; (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	e001      	b.n	8003ec6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	f043 0220 	orr.w	r2, r3, #32
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e06a      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff25 	bl	8003d36 <LL_ADC_REG_IsConversionOngoing>
 8003eec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ff1f 	bl	8003d36 <LL_ADC_REG_IsConversionOngoing>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d14c      	bne.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d149      	bne.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f04:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003f06:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d028      	beq.n	8003f62 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f22:	035b      	lsls	r3, r3, #13
 8003f24:	430b      	orrs	r3, r1
 8003f26:	431a      	orrs	r2, r3
 8003f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f30:	f7ff fec1 	bl	8003cb6 <LL_ADC_IsEnabled>
 8003f34:	4604      	mov	r4, r0
 8003f36:	4823      	ldr	r0, [pc, #140]	; (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f38:	f7ff febd 	bl	8003cb6 <LL_ADC_IsEnabled>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4323      	orrs	r3, r4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d133      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f4c:	f023 030f 	bic.w	r3, r3, #15
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	6811      	ldr	r1, [r2, #0]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	6892      	ldr	r2, [r2, #8]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f5e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f60:	e024      	b.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f6c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f6e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f72:	f7ff fea0 	bl	8003cb6 <LL_ADC_IsEnabled>
 8003f76:	4604      	mov	r4, r0
 8003f78:	4812      	ldr	r0, [pc, #72]	; (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f7a:	f7ff fe9c 	bl	8003cb6 <LL_ADC_IsEnabled>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4323      	orrs	r3, r4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d112      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f8e:	f023 030f 	bic.w	r3, r3, #15
 8003f92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f94:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f96:	e009      	b.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003faa:	e000      	b.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fb6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3784      	adds	r7, #132	; 0x84
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd90      	pop	{r4, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	50000100 	.word	0x50000100
 8003fc8:	50000300 	.word	0x50000300

08003fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffe:	4a04      	ldr	r2, [pc, #16]	; (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	60d3      	str	r3, [r2, #12]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <__NVIC_GetPriorityGrouping+0x18>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	f003 0307 	and.w	r3, r3, #7
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	2b00      	cmp	r3, #0
 8004040:	db0b      	blt.n	800405a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	4907      	ldr	r1, [pc, #28]	; (8004068 <__NVIC_EnableIRQ+0x38>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2001      	movs	r0, #1
 8004052:	fa00 f202 	lsl.w	r2, r0, r2
 8004056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000e100 	.word	0xe000e100

0800406c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db0a      	blt.n	8004096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	490c      	ldr	r1, [pc, #48]	; (80040b8 <__NVIC_SetPriority+0x4c>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	0112      	lsls	r2, r2, #4
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	440b      	add	r3, r1
 8004090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004094:	e00a      	b.n	80040ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4908      	ldr	r1, [pc, #32]	; (80040bc <__NVIC_SetPriority+0x50>)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	3b04      	subs	r3, #4
 80040a4:	0112      	lsls	r2, r2, #4
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	440b      	add	r3, r1
 80040aa:	761a      	strb	r2, [r3, #24]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000e100 	.word	0xe000e100
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f1c3 0307 	rsb	r3, r3, #7
 80040da:	2b04      	cmp	r3, #4
 80040dc:	bf28      	it	cs
 80040de:	2304      	movcs	r3, #4
 80040e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d902      	bls.n	80040f0 <NVIC_EncodePriority+0x30>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3b03      	subs	r3, #3
 80040ee:	e000      	b.n	80040f2 <NVIC_EncodePriority+0x32>
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43da      	mvns	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	401a      	ands	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004108:	f04f 31ff 	mov.w	r1, #4294967295
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	43d9      	mvns	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004118:	4313      	orrs	r3, r2
         );
}
 800411a:	4618      	mov	r0, r3
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3b01      	subs	r3, #1
 8004134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004138:	d301      	bcc.n	800413e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800413a:	2301      	movs	r3, #1
 800413c:	e00f      	b.n	800415e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <SysTick_Config+0x40>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004146:	210f      	movs	r1, #15
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	f7ff ff8e 	bl	800406c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <SysTick_Config+0x40>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <SysTick_Config+0x40>)
 8004158:	2207      	movs	r2, #7
 800415a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	e000e010 	.word	0xe000e010

0800416c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff29 	bl	8003fcc <__NVIC_SetPriorityGrouping>
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b086      	sub	sp, #24
 8004186:	af00      	add	r7, sp, #0
 8004188:	4603      	mov	r3, r0
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004190:	f7ff ff40 	bl	8004014 <__NVIC_GetPriorityGrouping>
 8004194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f7ff ff90 	bl	80040c0 <NVIC_EncodePriority>
 80041a0:	4602      	mov	r2, r0
 80041a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a6:	4611      	mov	r1, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ff5f 	bl	800406c <__NVIC_SetPriority>
}
 80041ae:	bf00      	nop
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff ff33 	bl	8004030 <__NVIC_EnableIRQ>
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ffa4 	bl	8004128 <SysTick_Config>
 80041e0:	4603      	mov	r3, r0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e014      	b.n	8004226 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7fd f965 	bl	80014dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	795b      	ldrb	r3, [r3, #5]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_DAC_Start+0x16>
 8004240:	2302      	movs	r3, #2
 8004242:	e043      	b.n	80042cc <HAL_DAC_Start+0x9e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2201      	movs	r2, #1
 800425e:	409a      	lsls	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004268:	2001      	movs	r0, #1
 800426a:	f7fd fe2d 	bl	8001ec8 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10f      	bne.n	8004294 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800427e:	2b02      	cmp	r3, #2
 8004280:	d11d      	bne.n	80042be <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	e014      	b.n	80042be <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2102      	movs	r1, #2
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d107      	bne.n	80042be <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0202 	orr.w	r2, r2, #2
 80042bc:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	795b      	ldrb	r3, [r3, #5]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_DAC_ConfigChannel+0x18>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e192      	b.n	8004612 <HAL_DAC_ConfigChannel+0x33e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2202      	movs	r2, #2
 80042f6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d174      	bne.n	80043ea <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004300:	f7fd fdd6 	bl	8001eb0 <HAL_GetTick>
 8004304:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d134      	bne.n	8004376 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800430c:	e011      	b.n	8004332 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800430e:	f7fd fdcf 	bl	8001eb0 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d90a      	bls.n	8004332 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f043 0208 	orr.w	r2, r3, #8
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2203      	movs	r2, #3
 800432c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e16f      	b.n	8004612 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e6      	bne.n	800430e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004340:	2001      	movs	r0, #1
 8004342:	f7fd fdc1 	bl	8001ec8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800434e:	641a      	str	r2, [r3, #64]	; 0x40
 8004350:	e01e      	b.n	8004390 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004352:	f7fd fdad 	bl	8001eb0 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d90a      	bls.n	8004376 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f043 0208 	orr.w	r2, r3, #8
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2203      	movs	r2, #3
 8004370:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e14d      	b.n	8004612 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437c:	2b00      	cmp	r3, #0
 800437e:	dbe8      	blt.n	8004352 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004380:	2001      	movs	r0, #1
 8004382:	f7fd fda1 	bl	8001ec8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800438e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	ea02 0103 	and.w	r1, r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	409a      	lsls	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	21ff      	movs	r1, #255	; 0xff
 80043cc:	fa01 f303 	lsl.w	r3, r1, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	ea02 0103 	and.w	r1, r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d11d      	bne.n	800442e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	221f      	movs	r2, #31
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440a:	4013      	ands	r3, r2
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004422:	4313      	orrs	r3, r2
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2207      	movs	r2, #7
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004446:	4013      	ands	r3, r2
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d102      	bne.n	8004458 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004452:	2300      	movs	r3, #0
 8004454:	623b      	str	r3, [r7, #32]
 8004456:	e00f      	b.n	8004478 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d102      	bne.n	8004466 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004460:	2301      	movs	r3, #1
 8004462:	623b      	str	r3, [r7, #32]
 8004464:	e008      	b.n	8004478 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800446e:	2301      	movs	r3, #1
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	e001      	b.n	8004478 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004474:	2300      	movs	r3, #0
 8004476:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	6a3a      	ldr	r2, [r7, #32]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	4013      	ands	r3, r2
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	791b      	ldrb	r3, [r3, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d102      	bne.n	80044ac <HAL_DAC_ConfigChannel+0x1d8>
 80044a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044aa:	e000      	b.n	80044ae <HAL_DAC_ConfigChannel+0x1da>
 80044ac:	2300      	movs	r3, #0
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	4013      	ands	r3, r2
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	795b      	ldrb	r3, [r3, #5]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d102      	bne.n	80044d8 <HAL_DAC_ConfigChannel+0x204>
 80044d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d6:	e000      	b.n	80044da <HAL_DAC_ConfigChannel+0x206>
 80044d8:	2300      	movs	r3, #0
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d114      	bne.n	800451a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80044f0:	f002 f9d0 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80044f4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	4a48      	ldr	r2, [pc, #288]	; (800461c <HAL_DAC_ConfigChannel+0x348>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d904      	bls.n	8004508 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
 8004506:	e00f      	b.n	8004528 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	4a45      	ldr	r2, [pc, #276]	; (8004620 <HAL_DAC_ConfigChannel+0x34c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d90a      	bls.n	8004526 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
 8004518:	e006      	b.n	8004528 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	4313      	orrs	r3, r2
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
 8004524:	e000      	b.n	8004528 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004526:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004536:	4313      	orrs	r3, r2
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6819      	ldr	r1, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43da      	mvns	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	400a      	ands	r2, r1
 800455e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457a:	4013      	ands	r3, r2
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004592:	4313      	orrs	r3, r2
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	22c0      	movs	r2, #192	; 0xc0
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43da      	mvns	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	400a      	ands	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	089b      	lsrs	r3, r3, #2
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	ea02 0103 	and.w	r1, r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	409a      	lsls	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3728      	adds	r7, #40	; 0x28
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	09896800 	.word	0x09896800
 8004620:	04c4b400 	.word	0x04c4b400

08004624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e08d      	b.n	8004752 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	4b47      	ldr	r3, [pc, #284]	; (800475c <HAL_DMA_Init+0x138>)
 800463e:	429a      	cmp	r2, r3
 8004640:	d80f      	bhi.n	8004662 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	4b45      	ldr	r3, [pc, #276]	; (8004760 <HAL_DMA_Init+0x13c>)
 800464a:	4413      	add	r3, r2
 800464c:	4a45      	ldr	r2, [pc, #276]	; (8004764 <HAL_DMA_Init+0x140>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	009a      	lsls	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a42      	ldr	r2, [pc, #264]	; (8004768 <HAL_DMA_Init+0x144>)
 800465e:	641a      	str	r2, [r3, #64]	; 0x40
 8004660:	e00e      	b.n	8004680 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	4b40      	ldr	r3, [pc, #256]	; (800476c <HAL_DMA_Init+0x148>)
 800466a:	4413      	add	r3, r2
 800466c:	4a3d      	ldr	r2, [pc, #244]	; (8004764 <HAL_DMA_Init+0x140>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	009a      	lsls	r2, r3, #2
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a3c      	ldr	r2, [pc, #240]	; (8004770 <HAL_DMA_Init+0x14c>)
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fa76 	bl	8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e0:	d102      	bne.n	80046e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d010      	beq.n	8004728 <HAL_DMA_Init+0x104>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d80c      	bhi.n	8004728 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa96 	bl	8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	e008      	b.n	800473a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40020407 	.word	0x40020407
 8004760:	bffdfff8 	.word	0xbffdfff8
 8004764:	cccccccd 	.word	0xcccccccd
 8004768:	40020000 	.word	0x40020000
 800476c:	bffdfbf8 	.word	0xbffdfbf8
 8004770:	40020400 	.word	0x40020400

08004774 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_DMA_Start_IT+0x20>
 8004790:	2302      	movs	r3, #2
 8004792:	e066      	b.n	8004862 <HAL_DMA_Start_IT+0xee>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d155      	bne.n	8004854 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f9bb 	bl	8004b48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 020e 	orr.w	r2, r2, #14
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e00f      	b.n	800480c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 020a 	orr.w	r2, r2, #10
 800480a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004828:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004840:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e005      	b.n	8004860 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800485c:	2302      	movs	r3, #2
 800485e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800486a:	b480      	push	{r7}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d005      	beq.n	800488e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2204      	movs	r2, #4
 8004886:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e037      	b.n	80048fe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 020e 	bic.w	r2, r2, #14
 800489c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	f003 021f 	and.w	r2, r3, #31
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2101      	movs	r1, #1
 80048cc:	fa01 f202 	lsl.w	r2, r1, r2
 80048d0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048da:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048f2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048fc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d00d      	beq.n	8004950 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2204      	movs	r2, #4
 8004938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	e047      	b.n	80049e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 020e 	bic.w	r2, r2, #14
 800495e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800497e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	f003 021f 	and.w	r2, r3, #31
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f202 	lsl.w	r2, r1, r2
 8004992:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800499c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
    }
  }
  return status;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d026      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x7a>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d021      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d107      	bne.n	8004a3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0204 	bic.w	r2, r2, #4
 8004a3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	f003 021f 	and.w	r2, r3, #31
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d071      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a62:	e06c      	b.n	8004b3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02e      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d029      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10b      	bne.n	8004aa8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 020a 	bic.w	r2, r2, #10
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d038      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ad4:	e033      	b.n	8004b3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2208      	movs	r2, #8
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d02a      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d025      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 020e 	bic.w	r2, r2, #14
 8004b02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f003 021f 	and.w	r2, r3, #31
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	2101      	movs	r1, #1
 8004b12:	fa01 f202 	lsl.w	r2, r1, r2
 8004b16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
}
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f003 021f 	and.w	r2, r3, #31
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d108      	bne.n	8004ba8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ba6:	e007      	b.n	8004bb8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	60da      	str	r2, [r3, #12]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d802      	bhi.n	8004bde <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e001      	b.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004be0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	3b08      	subs	r3, #8
 8004bee:	4a12      	ldr	r2, [pc, #72]	; (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	089b      	lsrs	r3, r3, #2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a0b      	ldr	r2, [pc, #44]	; (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2201      	movs	r2, #1
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40020407 	.word	0x40020407
 8004c30:	40020800 	.word	0x40020800
 8004c34:	40020820 	.word	0x40020820
 8004c38:	cccccccd 	.word	0xcccccccd
 8004c3c:	40020880 	.word	0x40020880

08004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c62:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	1000823f 	.word	0x1000823f
 8004c84:	40020940 	.word	0x40020940

08004c88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e147      	b.n	8004f2a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc fce0 	bl	8001674 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0210 	bic.w	r2, r2, #16
 8004cc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cc4:	f7fd f8f4 	bl	8001eb0 <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cca:	e012      	b.n	8004cf2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ccc:	f7fd f8f0 	bl	8001eb0 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b0a      	cmp	r3, #10
 8004cd8:	d90b      	bls.n	8004cf2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	f043 0201 	orr.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2203      	movs	r2, #3
 8004cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e11b      	b.n	8004f2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d0e5      	beq.n	8004ccc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d10:	f7fd f8ce 	bl	8001eb0 <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d16:	e012      	b.n	8004d3e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d18:	f7fd f8ca 	bl	8001eb0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b0a      	cmp	r3, #10
 8004d24:	d90b      	bls.n	8004d3e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	f043 0201 	orr.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2203      	movs	r2, #3
 8004d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0f5      	b.n	8004f2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0e5      	beq.n	8004d18 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0202 	orr.w	r2, r2, #2
 8004d5a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a74      	ldr	r2, [pc, #464]	; (8004f34 <HAL_FDCAN_Init+0x2ac>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d103      	bne.n	8004d6e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004d66:	4a74      	ldr	r2, [pc, #464]	; (8004f38 <HAL_FDCAN_Init+0x2b0>)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	7c1b      	ldrb	r3, [r3, #16]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d108      	bne.n	8004d88 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d84:	619a      	str	r2, [r3, #24]
 8004d86:	e007      	b.n	8004d98 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d96:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7c5b      	ldrb	r3, [r3, #17]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d108      	bne.n	8004db2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dae:	619a      	str	r2, [r3, #24]
 8004db0:	e007      	b.n	8004dc2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dc0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7c9b      	ldrb	r3, [r3, #18]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d108      	bne.n	8004ddc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699a      	ldr	r2, [r3, #24]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dd8:	619a      	str	r2, [r3, #24]
 8004dda:	e007      	b.n	8004dec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004e10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0210 	bic.w	r2, r2, #16
 8004e20:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d108      	bne.n	8004e3c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0204 	orr.w	r2, r2, #4
 8004e38:	619a      	str	r2, [r3, #24]
 8004e3a:	e02c      	b.n	8004e96 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d028      	beq.n	8004e96 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d01c      	beq.n	8004e86 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e5a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0210 	orr.w	r2, r2, #16
 8004e6a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d110      	bne.n	8004e96 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0220 	orr.w	r2, r2, #32
 8004e82:	619a      	str	r2, [r3, #24]
 8004e84:	e007      	b.n	8004e96 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699a      	ldr	r2, [r3, #24]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0220 	orr.w	r2, r2, #32
 8004e94:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ea6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004eae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ebe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ec0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eca:	d115      	bne.n	8004ef8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004eda:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ee4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	3b01      	subs	r3, #1
 8004eee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ef4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ef6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fbe2 	bl	80056d8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40006400 	.word	0x40006400
 8004f38:	40006500 	.word	0x40006500

08004f3c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d110      	bne.n	8004f72 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0201 	bic.w	r2, r2, #1
 8004f66:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e006      	b.n	8004f80 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f76:	f043 0204 	orr.w	r2, r3, #4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
  }
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d12c      	bne.n	8004ffe <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e023      	b.n	800500c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004fcc:	0c1b      	lsrs	r3, r3, #16
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fbd2 	bl	8005784 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e006      	b.n	800500c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005002:	f043 0208 	orr.w	r2, r3, #8
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
  }
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005014:	b480      	push	{r7}
 8005016:	b08b      	sub	sp, #44	; 0x2c
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005028:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800502a:	7efb      	ldrb	r3, [r7, #27]
 800502c:	2b02      	cmp	r3, #2
 800502e:	f040 80bc 	bne.w	80051aa <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d121      	bne.n	800507c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0af      	b.n	80051b8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	0a1b      	lsrs	r3, r3, #8
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	440b      	add	r3, r1
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
 800507a:	e020      	b.n	80050be <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	2b00      	cmp	r3, #0
 800508a:	d107      	bne.n	800509c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005090:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e08d      	b.n	80051b8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a4:	0a1b      	lsrs	r3, r3, #8
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	4613      	mov	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4413      	add	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	440b      	add	r3, r1
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	0c9b      	lsrs	r3, r3, #18
 80050d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	e005      	b.n	80050ee <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	3304      	adds	r3, #4
 800510a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	0e1b      	lsrs	r3, r3, #24
 8005140:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	0fda      	lsrs	r2, r3, #31
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	3304      	adds	r3, #4
 8005156:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800515c:	2300      	movs	r3, #0
 800515e:	623b      	str	r3, [r7, #32]
 8005160:	e00a      	b.n	8005178 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	441a      	add	r2, r3
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	440b      	add	r3, r1
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	3301      	adds	r3, #1
 8005176:	623b      	str	r3, [r7, #32]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	4a11      	ldr	r2, [pc, #68]	; (80051c4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8005180:	5cd3      	ldrb	r3, [r2, r3]
 8005182:	461a      	mov	r2, r3
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	4293      	cmp	r3, r2
 8005188:	d3eb      	bcc.n	8005162 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d105      	bne.n	800519c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800519a:	e004      	b.n	80051a6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e006      	b.n	80051b8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ae:	f043 0208 	orr.w	r2, r3, #8
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
  }
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	372c      	adds	r7, #44	; 0x2c
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	08008ba0 	.word	0x08008ba0

080051c8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051da:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d003      	beq.n	80051ea <HAL_FDCAN_ActivateNotification+0x22>
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f040 80c8 	bne.w	800537a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d03b      	beq.n	800527e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d031      	beq.n	800527e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d027      	beq.n	800527e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01d      	beq.n	800527e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	2b00      	cmp	r3, #0
 8005254:	d013      	beq.n	800527e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00c      	beq.n	800528e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d107      	bne.n	800528e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d13b      	bne.n	800531a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d131      	bne.n	800531a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d127      	bne.n	800531a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11d      	bne.n	800531a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d113      	bne.n	800531a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00c      	beq.n	800532a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0202 	orr.w	r2, r2, #2
 8005328:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b00      	cmp	r3, #0
 8005332:	d009      	beq.n	8005348 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	430a      	orrs	r2, r1
 8005344:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	430a      	orrs	r2, r1
 8005362:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	430a      	orrs	r2, r1
 8005374:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e006      	b.n	8005388 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537e:	f043 0202 	orr.w	r2, r3, #2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
  }
}
 8005388:	4618      	mov	r0, r3
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b0:	4013      	ands	r3, r2
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	6a3a      	ldr	r2, [r7, #32]
 80053c8:	4013      	ands	r3, r2
 80053ca:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053d6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	4013      	ands	r3, r2
 80053e2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ea:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80053ee:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005402:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005406:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4013      	ands	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00d      	beq.n	800543e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2240      	movs	r2, #64	; 0x40
 8005436:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f92e 	bl	800569a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01b      	beq.n	8005484 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d014      	beq.n	8005484 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005462:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800547a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800547c:	6939      	ldr	r1, [r7, #16]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8ec 	bl	800565c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f8b6 	bl	8005606 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80054a8:	6a39      	ldr	r1, [r7, #32]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fb fd20 	bl	8000ef0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80054be:	69f9      	ldr	r1, [r7, #28]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f8ab 	bl	800561c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00e      	beq.n	80054f2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f8a0 	bl	8005632 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01a      	beq.n	8005536 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b00      	cmp	r3, #0
 800550c:	d013      	beq.n	8005536 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005516:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4013      	ands	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2280      	movs	r2, #128	; 0x80
 800552c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f888 	bl	8005646 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800555a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f888 	bl	8005672 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00e      	beq.n	800558e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005586:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f87c 	bl	8005686 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d011      	beq.n	80055c0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80055ce:	6979      	ldr	r1, [r7, #20]
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f876 	bl	80056c2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f858 	bl	80056ae <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80055fe:	bf00      	nop
 8005600:	3728      	adds	r7, #40	; 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80056e0:	4b27      	ldr	r3, [pc, #156]	; (8005780 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80056e2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	041a      	lsls	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005718:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	061a      	lsls	r2, r3, #24
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e005      	b.n	8005766 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3304      	adds	r3, #4
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	429a      	cmp	r2, r3
 8005770:	d3f3      	bcc.n	800575a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	4000a400 	.word	0x4000a400

08005784 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005784:	b480      	push	{r7}
 8005786:	b089      	sub	sp, #36	; 0x24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80057a2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e00a      	b.n	80057c6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80057b8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80057be:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80057c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80057d0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80057d6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80057dc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	3304      	adds	r3, #4
 8005802:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	3304      	adds	r3, #4
 800580e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e020      	b.n	8005858 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	3303      	adds	r3, #3
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	3302      	adds	r3, #2
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	440b      	add	r3, r1
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800582e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	3301      	adds	r3, #1
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	440b      	add	r3, r1
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800583c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	440a      	add	r2, r1
 8005844:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005846:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	3304      	adds	r3, #4
 8005850:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	3304      	adds	r3, #4
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	0c1b      	lsrs	r3, r3, #16
 800585e:	4a06      	ldr	r2, [pc, #24]	; (8005878 <FDCAN_CopyMessageToRAM+0xf4>)
 8005860:	5cd3      	ldrb	r3, [r2, r3]
 8005862:	461a      	mov	r2, r3
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4293      	cmp	r3, r2
 8005868:	d3d5      	bcc.n	8005816 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	3724      	adds	r7, #36	; 0x24
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	08008ba0 	.word	0x08008ba0

0800587c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e033      	b.n	80058f6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fb ff5c 	bl	8001760 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f854 	bl	800595c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f822 	bl	80058fe <FMAC_Reset>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d10c      	bne.n	80058da <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	f043 0210 	orr.w	r2, r3, #16
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	22a0      	movs	r2, #160	; 0xa0
 80058d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
 80058d8:	e008      	b.n	80058ec <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005906:	f7fc fad3 	bl	8001eb0 <HAL_GetTick>
 800590a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800591a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800591c:	e00f      	b.n	800593e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800591e:	f7fc fac7 	bl	8001eb0 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800592c:	d907      	bls.n	800593e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e00a      	b.n	8005954 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e8      	bne.n	800591e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f807 	bl	8005978 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f81b 	bl	80059a6 <FMAC_ResetOutputStateAndDataPointers>
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059e2:	e15a      	b.n	8005c9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	2101      	movs	r1, #1
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	4013      	ands	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 814c 	beq.w	8005c94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d005      	beq.n	8005a14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d130      	bne.n	8005a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	2203      	movs	r2, #3
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4013      	ands	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	f003 0201 	and.w	r2, r3, #1
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d017      	beq.n	8005ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4013      	ands	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d123      	bne.n	8005b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	08da      	lsrs	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3208      	adds	r2, #8
 8005ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	220f      	movs	r2, #15
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	08da      	lsrs	r2, r3, #3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3208      	adds	r2, #8
 8005b00:	6939      	ldr	r1, [r7, #16]
 8005b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	2203      	movs	r2, #3
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	43db      	mvns	r3, r3
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f003 0203 	and.w	r2, r3, #3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80a6 	beq.w	8005c94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b48:	4b5b      	ldr	r3, [pc, #364]	; (8005cb8 <HAL_GPIO_Init+0x2e4>)
 8005b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4c:	4a5a      	ldr	r2, [pc, #360]	; (8005cb8 <HAL_GPIO_Init+0x2e4>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6613      	str	r3, [r2, #96]	; 0x60
 8005b54:	4b58      	ldr	r3, [pc, #352]	; (8005cb8 <HAL_GPIO_Init+0x2e4>)
 8005b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b60:	4a56      	ldr	r2, [pc, #344]	; (8005cbc <HAL_GPIO_Init+0x2e8>)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	089b      	lsrs	r3, r3, #2
 8005b66:	3302      	adds	r3, #2
 8005b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	220f      	movs	r2, #15
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b8a:	d01f      	beq.n	8005bcc <HAL_GPIO_Init+0x1f8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a4c      	ldr	r2, [pc, #304]	; (8005cc0 <HAL_GPIO_Init+0x2ec>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d019      	beq.n	8005bc8 <HAL_GPIO_Init+0x1f4>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a4b      	ldr	r2, [pc, #300]	; (8005cc4 <HAL_GPIO_Init+0x2f0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <HAL_GPIO_Init+0x1f0>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a4a      	ldr	r2, [pc, #296]	; (8005cc8 <HAL_GPIO_Init+0x2f4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00d      	beq.n	8005bc0 <HAL_GPIO_Init+0x1ec>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a49      	ldr	r2, [pc, #292]	; (8005ccc <HAL_GPIO_Init+0x2f8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <HAL_GPIO_Init+0x1e8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a48      	ldr	r2, [pc, #288]	; (8005cd0 <HAL_GPIO_Init+0x2fc>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_GPIO_Init+0x1e4>
 8005bb4:	2305      	movs	r3, #5
 8005bb6:	e00a      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bb8:	2306      	movs	r3, #6
 8005bba:	e008      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	e006      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e004      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e002      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	f002 0203 	and.w	r2, r2, #3
 8005bd4:	0092      	lsls	r2, r2, #2
 8005bd6:	4093      	lsls	r3, r2
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bde:	4937      	ldr	r1, [pc, #220]	; (8005cbc <HAL_GPIO_Init+0x2e8>)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	3302      	adds	r3, #2
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bec:	4b39      	ldr	r3, [pc, #228]	; (8005cd4 <HAL_GPIO_Init+0x300>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c10:	4a30      	ldr	r2, [pc, #192]	; (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c16:	4b2f      	ldr	r3, [pc, #188]	; (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4013      	ands	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c3a:	4a26      	ldr	r2, [pc, #152]	; (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c40:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c64:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c6a:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c8e:	4a11      	ldr	r2, [pc, #68]	; (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	3301      	adds	r3, #1
 8005c98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f47f ae9d 	bne.w	80059e4 <HAL_GPIO_Init+0x10>
  }
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	48000400 	.word	0x48000400
 8005cc4:	48000800 	.word	0x48000800
 8005cc8:	48000c00 	.word	0x48000c00
 8005ccc:	48001000 	.word	0x48001000
 8005cd0:	48001400 	.word	0x48001400
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	887b      	ldrh	r3, [r7, #2]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
 8005cf4:	e001      	b.n	8005cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	807b      	strh	r3, [r7, #2]
 8005d14:	4613      	mov	r3, r2
 8005d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d18:	787b      	ldrb	r3, [r7, #1]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d1e:	887a      	ldrh	r2, [r7, #2]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d24:	e002      	b.n	8005d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d26:	887a      	ldrh	r2, [r7, #2]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d141      	bne.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d46:	4b4b      	ldr	r3, [pc, #300]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d52:	d131      	bne.n	8005db8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d54:	4b47      	ldr	r3, [pc, #284]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d5a:	4a46      	ldr	r2, [pc, #280]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d64:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d6c:	4a41      	ldr	r2, [pc, #260]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d74:	4b40      	ldr	r3, [pc, #256]	; (8005e78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2232      	movs	r2, #50	; 0x32
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	4a3f      	ldr	r2, [pc, #252]	; (8005e7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	0c9b      	lsrs	r3, r3, #18
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d8a:	e002      	b.n	8005d92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d92:	4b38      	ldr	r3, [pc, #224]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9e:	d102      	bne.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f2      	bne.n	8005d8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005da6:	4b33      	ldr	r3, [pc, #204]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db2:	d158      	bne.n	8005e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e057      	b.n	8005e68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005db8:	4b2e      	ldr	r3, [pc, #184]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dbe:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005dc8:	e04d      	b.n	8005e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd0:	d141      	bne.n	8005e56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dd2:	4b28      	ldr	r3, [pc, #160]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d131      	bne.n	8005e44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005de0:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de6:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005df8:	4a1e      	ldr	r2, [pc, #120]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e00:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2232      	movs	r2, #50	; 0x32
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	4a1c      	ldr	r2, [pc, #112]	; (8005e7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	0c9b      	lsrs	r3, r3, #18
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e16:	e002      	b.n	8005e1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e1e:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2a:	d102      	bne.n	8005e32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f2      	bne.n	8005e18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3e:	d112      	bne.n	8005e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e011      	b.n	8005e68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e4a:	4a0a      	ldr	r2, [pc, #40]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e54:	e007      	b.n	8005e66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e56:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e5e:	4a05      	ldr	r2, [pc, #20]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40007000 	.word	0x40007000
 8005e78:	20000004 	.word	0x20000004
 8005e7c:	431bde83 	.word	0x431bde83

08005e80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a04      	ldr	r2, [pc, #16]	; (8005e9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e8e:	6093      	str	r3, [r2, #8]
}
 8005e90:	bf00      	nop
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40007000 	.word	0x40007000

08005ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e306      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d075      	beq.n	8005faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ebe:	4b97      	ldr	r3, [pc, #604]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec8:	4b94      	ldr	r3, [pc, #592]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b0c      	cmp	r3, #12
 8005ed6:	d102      	bne.n	8005ede <HAL_RCC_OscConfig+0x3e>
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d002      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x44>
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d10b      	bne.n	8005efc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee4:	4b8d      	ldr	r3, [pc, #564]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d05b      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x108>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d157      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e2e1      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f04:	d106      	bne.n	8005f14 <HAL_RCC_OscConfig+0x74>
 8005f06:	4b85      	ldr	r3, [pc, #532]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a84      	ldr	r2, [pc, #528]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e01d      	b.n	8005f50 <HAL_RCC_OscConfig+0xb0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x98>
 8005f1e:	4b7f      	ldr	r3, [pc, #508]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a7e      	ldr	r2, [pc, #504]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	4b7c      	ldr	r3, [pc, #496]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a7b      	ldr	r2, [pc, #492]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e00b      	b.n	8005f50 <HAL_RCC_OscConfig+0xb0>
 8005f38:	4b78      	ldr	r3, [pc, #480]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a77      	ldr	r2, [pc, #476]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	4b75      	ldr	r3, [pc, #468]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a74      	ldr	r2, [pc, #464]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d013      	beq.n	8005f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f58:	f7fb ffaa 	bl	8001eb0 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f60:	f7fb ffa6 	bl	8001eb0 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b64      	cmp	r3, #100	; 0x64
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e2a6      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f72:	4b6a      	ldr	r3, [pc, #424]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0xc0>
 8005f7e:	e014      	b.n	8005faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fb ff96 	bl	8001eb0 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fb ff92 	bl	8001eb0 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	; 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e292      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f9a:	4b60      	ldr	r3, [pc, #384]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0xe8>
 8005fa6:	e000      	b.n	8005faa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d075      	beq.n	80060a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb6:	4b59      	ldr	r3, [pc, #356]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
 8005fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fc0:	4b56      	ldr	r3, [pc, #344]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b0c      	cmp	r3, #12
 8005fce:	d102      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x136>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d002      	beq.n	8005fdc <HAL_RCC_OscConfig+0x13c>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d11f      	bne.n	800601c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fdc:	4b4f      	ldr	r3, [pc, #316]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x154>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e265      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff4:	4b49      	ldr	r3, [pc, #292]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	4946      	ldr	r1, [pc, #280]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8006004:	4313      	orrs	r3, r2
 8006006:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006008:	4b45      	ldr	r3, [pc, #276]	; (8006120 <HAL_RCC_OscConfig+0x280>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f7fb ff03 	bl	8001e18 <HAL_InitTick>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d043      	beq.n	80060a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e251      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d023      	beq.n	800606c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006024:	4b3d      	ldr	r3, [pc, #244]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a3c      	ldr	r2, [pc, #240]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 800602a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800602e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fb ff3e 	bl	8001eb0 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006038:	f7fb ff3a 	bl	8001eb0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e23a      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800604a:	4b34      	ldr	r3, [pc, #208]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006056:	4b31      	ldr	r3, [pc, #196]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	061b      	lsls	r3, r3, #24
 8006064:	492d      	ldr	r1, [pc, #180]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	604b      	str	r3, [r1, #4]
 800606a:	e01a      	b.n	80060a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800606c:	4b2b      	ldr	r3, [pc, #172]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a2a      	ldr	r2, [pc, #168]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8006072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fb ff1a 	bl	8001eb0 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006080:	f7fb ff16 	bl	8001eb0 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e216      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006092:	4b22      	ldr	r3, [pc, #136]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0x1e0>
 800609e:	e000      	b.n	80060a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d041      	beq.n	8006132 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01c      	beq.n	80060f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060b6:	4b19      	ldr	r3, [pc, #100]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 80060b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060bc:	4a17      	ldr	r2, [pc, #92]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c6:	f7fb fef3 	bl	8001eb0 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ce:	f7fb feef 	bl	8001eb0 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e1ef      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060e0:	4b0e      	ldr	r3, [pc, #56]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 80060e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0ef      	beq.n	80060ce <HAL_RCC_OscConfig+0x22e>
 80060ee:	e020      	b.n	8006132 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 80060f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <HAL_RCC_OscConfig+0x27c>)
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006100:	f7fb fed6 	bl	8001eb0 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006106:	e00d      	b.n	8006124 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006108:	f7fb fed2 	bl	8001eb0 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d906      	bls.n	8006124 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e1d2      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
 800611a:	bf00      	nop
 800611c:	40021000 	.word	0x40021000
 8006120:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006124:	4b8c      	ldr	r3, [pc, #560]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1ea      	bne.n	8006108 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80a6 	beq.w	800628c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006140:	2300      	movs	r3, #0
 8006142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006144:	4b84      	ldr	r3, [pc, #528]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_RCC_OscConfig+0x2b4>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <HAL_RCC_OscConfig+0x2b6>
 8006154:	2300      	movs	r3, #0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00d      	beq.n	8006176 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800615a:	4b7f      	ldr	r3, [pc, #508]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 800615c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615e:	4a7e      	ldr	r2, [pc, #504]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006164:	6593      	str	r3, [r2, #88]	; 0x58
 8006166:	4b7c      	ldr	r3, [pc, #496]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006172:	2301      	movs	r3, #1
 8006174:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006176:	4b79      	ldr	r3, [pc, #484]	; (800635c <HAL_RCC_OscConfig+0x4bc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d118      	bne.n	80061b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006182:	4b76      	ldr	r3, [pc, #472]	; (800635c <HAL_RCC_OscConfig+0x4bc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a75      	ldr	r2, [pc, #468]	; (800635c <HAL_RCC_OscConfig+0x4bc>)
 8006188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618e:	f7fb fe8f 	bl	8001eb0 <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006196:	f7fb fe8b 	bl	8001eb0 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e18b      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061a8:	4b6c      	ldr	r3, [pc, #432]	; (800635c <HAL_RCC_OscConfig+0x4bc>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0f0      	beq.n	8006196 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d108      	bne.n	80061ce <HAL_RCC_OscConfig+0x32e>
 80061bc:	4b66      	ldr	r3, [pc, #408]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c2:	4a65      	ldr	r2, [pc, #404]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061cc:	e024      	b.n	8006218 <HAL_RCC_OscConfig+0x378>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	d110      	bne.n	80061f8 <HAL_RCC_OscConfig+0x358>
 80061d6:	4b60      	ldr	r3, [pc, #384]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80061d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061dc:	4a5e      	ldr	r2, [pc, #376]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80061de:	f043 0304 	orr.w	r3, r3, #4
 80061e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061e6:	4b5c      	ldr	r3, [pc, #368]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ec:	4a5a      	ldr	r2, [pc, #360]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061f6:	e00f      	b.n	8006218 <HAL_RCC_OscConfig+0x378>
 80061f8:	4b57      	ldr	r3, [pc, #348]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	4a56      	ldr	r2, [pc, #344]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006208:	4b53      	ldr	r3, [pc, #332]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 800620a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620e:	4a52      	ldr	r2, [pc, #328]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006210:	f023 0304 	bic.w	r3, r3, #4
 8006214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d016      	beq.n	800624e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006220:	f7fb fe46 	bl	8001eb0 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006226:	e00a      	b.n	800623e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006228:	f7fb fe42 	bl	8001eb0 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f241 3288 	movw	r2, #5000	; 0x1388
 8006236:	4293      	cmp	r3, r2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e140      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800623e:	4b46      	ldr	r3, [pc, #280]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0ed      	beq.n	8006228 <HAL_RCC_OscConfig+0x388>
 800624c:	e015      	b.n	800627a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624e:	f7fb fe2f 	bl	8001eb0 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006254:	e00a      	b.n	800626c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006256:	f7fb fe2b 	bl	8001eb0 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f241 3288 	movw	r2, #5000	; 0x1388
 8006264:	4293      	cmp	r3, r2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e129      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800626c:	4b3a      	ldr	r3, [pc, #232]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1ed      	bne.n	8006256 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800627a:	7ffb      	ldrb	r3, [r7, #31]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d105      	bne.n	800628c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006280:	4b35      	ldr	r3, [pc, #212]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006284:	4a34      	ldr	r2, [pc, #208]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800628a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d03c      	beq.n	8006312 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01c      	beq.n	80062da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062a0:	4b2d      	ldr	r3, [pc, #180]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80062a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062a6:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b0:	f7fb fdfe 	bl	8001eb0 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062b8:	f7fb fdfa 	bl	8001eb0 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e0fa      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062ca:	4b23      	ldr	r3, [pc, #140]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80062cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ef      	beq.n	80062b8 <HAL_RCC_OscConfig+0x418>
 80062d8:	e01b      	b.n	8006312 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062da:	4b1f      	ldr	r3, [pc, #124]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80062dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062e0:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ea:	f7fb fde1 	bl	8001eb0 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062f2:	f7fb fddd 	bl	8001eb0 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e0dd      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006304:	4b14      	ldr	r3, [pc, #80]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1ef      	bne.n	80062f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 80d1 	beq.w	80064be <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800631c:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 030c 	and.w	r3, r3, #12
 8006324:	2b0c      	cmp	r3, #12
 8006326:	f000 808b 	beq.w	8006440 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d15e      	bne.n	80063f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006332:	4b09      	ldr	r3, [pc, #36]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a08      	ldr	r2, [pc, #32]	; (8006358 <HAL_RCC_OscConfig+0x4b8>)
 8006338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800633c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633e:	f7fb fdb7 	bl	8001eb0 <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006344:	e00c      	b.n	8006360 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006346:	f7fb fdb3 	bl	8001eb0 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d905      	bls.n	8006360 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e0b3      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
 8006358:	40021000 	.word	0x40021000
 800635c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006360:	4b59      	ldr	r3, [pc, #356]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1ec      	bne.n	8006346 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800636c:	4b56      	ldr	r3, [pc, #344]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	4b56      	ldr	r3, [pc, #344]	; (80064cc <HAL_RCC_OscConfig+0x62c>)
 8006372:	4013      	ands	r3, r2
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6a11      	ldr	r1, [r2, #32]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800637c:	3a01      	subs	r2, #1
 800637e:	0112      	lsls	r2, r2, #4
 8006380:	4311      	orrs	r1, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006386:	0212      	lsls	r2, r2, #8
 8006388:	4311      	orrs	r1, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800638e:	0852      	lsrs	r2, r2, #1
 8006390:	3a01      	subs	r2, #1
 8006392:	0552      	lsls	r2, r2, #21
 8006394:	4311      	orrs	r1, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800639a:	0852      	lsrs	r2, r2, #1
 800639c:	3a01      	subs	r2, #1
 800639e:	0652      	lsls	r2, r2, #25
 80063a0:	4311      	orrs	r1, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063a6:	06d2      	lsls	r2, r2, #27
 80063a8:	430a      	orrs	r2, r1
 80063aa:	4947      	ldr	r1, [pc, #284]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063b0:	4b45      	ldr	r3, [pc, #276]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a44      	ldr	r2, [pc, #272]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 80063b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063bc:	4b42      	ldr	r3, [pc, #264]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	4a41      	ldr	r2, [pc, #260]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 80063c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c8:	f7fb fd72 	bl	8001eb0 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d0:	f7fb fd6e 	bl	8001eb0 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e06e      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063e2:	4b39      	ldr	r3, [pc, #228]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0x530>
 80063ee:	e066      	b.n	80064be <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f0:	4b35      	ldr	r3, [pc, #212]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a34      	ldr	r2, [pc, #208]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 80063f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80063fc:	4b32      	ldr	r3, [pc, #200]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	4a31      	ldr	r2, [pc, #196]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006408:	4b2f      	ldr	r3, [pc, #188]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4a2e      	ldr	r2, [pc, #184]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 800640e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006416:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006418:	f7fb fd4a 	bl	8001eb0 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006420:	f7fb fd46 	bl	8001eb0 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e046      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006432:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f0      	bne.n	8006420 <HAL_RCC_OscConfig+0x580>
 800643e:	e03e      	b.n	80064be <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e039      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800644c:	4b1e      	ldr	r3, [pc, #120]	; (80064c8 <HAL_RCC_OscConfig+0x628>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 0203 	and.w	r2, r3, #3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	429a      	cmp	r2, r3
 800645e:	d12c      	bne.n	80064ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	3b01      	subs	r3, #1
 800646c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646e:	429a      	cmp	r2, r3
 8006470:	d123      	bne.n	80064ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800647e:	429a      	cmp	r2, r3
 8006480:	d11b      	bne.n	80064ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800648e:	429a      	cmp	r2, r3
 8006490:	d113      	bne.n	80064ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	085b      	lsrs	r3, r3, #1
 800649e:	3b01      	subs	r3, #1
 80064a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d109      	bne.n	80064ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	3b01      	subs	r3, #1
 80064b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d001      	beq.n	80064be <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40021000 	.word	0x40021000
 80064cc:	019f800c 	.word	0x019f800c

080064d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e11e      	b.n	8006726 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064e8:	4b91      	ldr	r3, [pc, #580]	; (8006730 <HAL_RCC_ClockConfig+0x260>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d910      	bls.n	8006518 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f6:	4b8e      	ldr	r3, [pc, #568]	; (8006730 <HAL_RCC_ClockConfig+0x260>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f023 020f 	bic.w	r2, r3, #15
 80064fe:	498c      	ldr	r1, [pc, #560]	; (8006730 <HAL_RCC_ClockConfig+0x260>)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	4313      	orrs	r3, r2
 8006504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006506:	4b8a      	ldr	r3, [pc, #552]	; (8006730 <HAL_RCC_ClockConfig+0x260>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d001      	beq.n	8006518 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e106      	b.n	8006726 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d073      	beq.n	800660c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d129      	bne.n	8006580 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800652c:	4b81      	ldr	r3, [pc, #516]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e0f4      	b.n	8006726 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800653c:	f000 f9e2 	bl	8006904 <RCC_GetSysClockFreqFromPLLSource>
 8006540:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4a7c      	ldr	r2, [pc, #496]	; (8006738 <HAL_RCC_ClockConfig+0x268>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d93f      	bls.n	80065ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800654a:	4b7a      	ldr	r3, [pc, #488]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800655e:	2b00      	cmp	r3, #0
 8006560:	d033      	beq.n	80065ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006566:	2b00      	cmp	r3, #0
 8006568:	d12f      	bne.n	80065ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800656a:	4b72      	ldr	r3, [pc, #456]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006572:	4a70      	ldr	r2, [pc, #448]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 8006574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006578:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800657a:	2380      	movs	r3, #128	; 0x80
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	e024      	b.n	80065ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d107      	bne.n	8006598 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006588:	4b6a      	ldr	r3, [pc, #424]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e0c6      	b.n	8006726 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006598:	4b66      	ldr	r3, [pc, #408]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0be      	b.n	8006726 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80065a8:	f000 f914 	bl	80067d4 <HAL_RCC_GetSysClockFreq>
 80065ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	4a61      	ldr	r2, [pc, #388]	; (8006738 <HAL_RCC_ClockConfig+0x268>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d909      	bls.n	80065ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065b6:	4b5f      	ldr	r3, [pc, #380]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065be:	4a5d      	ldr	r2, [pc, #372]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 80065c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065ca:	4b5a      	ldr	r3, [pc, #360]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f023 0203 	bic.w	r2, r3, #3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	4957      	ldr	r1, [pc, #348]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065dc:	f7fb fc68 	bl	8001eb0 <HAL_GetTick>
 80065e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e2:	e00a      	b.n	80065fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e4:	f7fb fc64 	bl	8001eb0 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e095      	b.n	8006726 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065fa:	4b4e      	ldr	r3, [pc, #312]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 020c 	and.w	r2, r3, #12
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	429a      	cmp	r2, r3
 800660a:	d1eb      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d023      	beq.n	8006660 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006624:	4b43      	ldr	r3, [pc, #268]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	4a42      	ldr	r2, [pc, #264]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800662a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800662e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800663c:	4b3d      	ldr	r3, [pc, #244]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006644:	4a3b      	ldr	r2, [pc, #236]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 8006646:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800664a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800664c:	4b39      	ldr	r3, [pc, #228]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	4936      	ldr	r1, [pc, #216]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
 800665e:	e008      	b.n	8006672 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2b80      	cmp	r3, #128	; 0x80
 8006664:	d105      	bne.n	8006672 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006666:	4b33      	ldr	r3, [pc, #204]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	4a32      	ldr	r2, [pc, #200]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 800666c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006670:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006672:	4b2f      	ldr	r3, [pc, #188]	; (8006730 <HAL_RCC_ClockConfig+0x260>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d21d      	bcs.n	80066bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006680:	4b2b      	ldr	r3, [pc, #172]	; (8006730 <HAL_RCC_ClockConfig+0x260>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f023 020f 	bic.w	r2, r3, #15
 8006688:	4929      	ldr	r1, [pc, #164]	; (8006730 <HAL_RCC_ClockConfig+0x260>)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	4313      	orrs	r3, r2
 800668e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006690:	f7fb fc0e 	bl	8001eb0 <HAL_GetTick>
 8006694:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006696:	e00a      	b.n	80066ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006698:	f7fb fc0a 	bl	8001eb0 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e03b      	b.n	8006726 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ae:	4b20      	ldr	r3, [pc, #128]	; (8006730 <HAL_RCC_ClockConfig+0x260>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d1ed      	bne.n	8006698 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066c8:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	4917      	ldr	r1, [pc, #92]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	490f      	ldr	r1, [pc, #60]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066fa:	f000 f86b 	bl	80067d4 <HAL_RCC_GetSysClockFreq>
 80066fe:	4602      	mov	r2, r0
 8006700:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <HAL_RCC_ClockConfig+0x264>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	091b      	lsrs	r3, r3, #4
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	490c      	ldr	r1, [pc, #48]	; (800673c <HAL_RCC_ClockConfig+0x26c>)
 800670c:	5ccb      	ldrb	r3, [r1, r3]
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	fa22 f303 	lsr.w	r3, r2, r3
 8006716:	4a0a      	ldr	r2, [pc, #40]	; (8006740 <HAL_RCC_ClockConfig+0x270>)
 8006718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <HAL_RCC_ClockConfig+0x274>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f7fb fb7a 	bl	8001e18 <HAL_InitTick>
 8006724:	4603      	mov	r3, r0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	40022000 	.word	0x40022000
 8006734:	40021000 	.word	0x40021000
 8006738:	04c4b400 	.word	0x04c4b400
 800673c:	08008b88 	.word	0x08008b88
 8006740:	20000004 	.word	0x20000004
 8006744:	20000008 	.word	0x20000008

08006748 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08c      	sub	sp, #48	; 0x30
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8006754:	2302      	movs	r3, #2
 8006756:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006758:	2303      	movs	r3, #3
 800675a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 800675c:	2300      	movs	r3, #0
 800675e:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006766:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8006774:	029b      	lsls	r3, r3, #10
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	0c1b      	lsrs	r3, r3, #16
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <HAL_RCC_MCOConfig+0x88>)
 8006784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006786:	2101      	movs	r1, #1
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	fa01 f303 	lsl.w	r3, r1, r3
 800678e:	4910      	ldr	r1, [pc, #64]	; (80067d0 <HAL_RCC_MCOConfig+0x88>)
 8006790:	4313      	orrs	r3, r2
 8006792:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	b29b      	uxth	r3, r3
 8006798:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	0d1b      	lsrs	r3, r3, #20
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80067a2:	f107 0310 	add.w	r3, r7, #16
 80067a6:	4619      	mov	r1, r3
 80067a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067aa:	f7ff f913 	bl	80059d4 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80067ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <HAL_RCC_MCOConfig+0x88>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	430b      	orrs	r3, r1
 80067c2:	4903      	ldr	r1, [pc, #12]	; (80067d0 <HAL_RCC_MCOConfig+0x88>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	608b      	str	r3, [r1, #8]
  }
}
 80067c8:	bf00      	nop
 80067ca:	3730      	adds	r7, #48	; 0x30
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40021000 	.word	0x40021000

080067d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80067da:	4b2c      	ldr	r3, [pc, #176]	; (800688c <HAL_RCC_GetSysClockFreq+0xb8>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 030c 	and.w	r3, r3, #12
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d102      	bne.n	80067ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067e6:	4b2a      	ldr	r3, [pc, #168]	; (8006890 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	e047      	b.n	800687c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80067ec:	4b27      	ldr	r3, [pc, #156]	; (800688c <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 030c 	and.w	r3, r3, #12
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d102      	bne.n	80067fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067f8:	4b25      	ldr	r3, [pc, #148]	; (8006890 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	e03e      	b.n	800687c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80067fe:	4b23      	ldr	r3, [pc, #140]	; (800688c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 030c 	and.w	r3, r3, #12
 8006806:	2b0c      	cmp	r3, #12
 8006808:	d136      	bne.n	8006878 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800680a:	4b20      	ldr	r3, [pc, #128]	; (800688c <HAL_RCC_GetSysClockFreq+0xb8>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006814:	4b1d      	ldr	r3, [pc, #116]	; (800688c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	3301      	adds	r3, #1
 8006820:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b03      	cmp	r3, #3
 8006826:	d10c      	bne.n	8006842 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006828:	4a19      	ldr	r2, [pc, #100]	; (8006890 <HAL_RCC_GetSysClockFreq+0xbc>)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006830:	4a16      	ldr	r2, [pc, #88]	; (800688c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006832:	68d2      	ldr	r2, [r2, #12]
 8006834:	0a12      	lsrs	r2, r2, #8
 8006836:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800683a:	fb02 f303 	mul.w	r3, r2, r3
 800683e:	617b      	str	r3, [r7, #20]
      break;
 8006840:	e00c      	b.n	800685c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006842:	4a13      	ldr	r2, [pc, #76]	; (8006890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	fbb2 f3f3 	udiv	r3, r2, r3
 800684a:	4a10      	ldr	r2, [pc, #64]	; (800688c <HAL_RCC_GetSysClockFreq+0xb8>)
 800684c:	68d2      	ldr	r2, [r2, #12]
 800684e:	0a12      	lsrs	r2, r2, #8
 8006850:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006854:	fb02 f303 	mul.w	r3, r2, r3
 8006858:	617b      	str	r3, [r7, #20]
      break;
 800685a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_RCC_GetSysClockFreq+0xb8>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	0e5b      	lsrs	r3, r3, #25
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	3301      	adds	r3, #1
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	fbb2 f3f3 	udiv	r3, r2, r3
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	e001      	b.n	800687c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800687c:	693b      	ldr	r3, [r7, #16]
}
 800687e:	4618      	mov	r0, r3
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000
 8006890:	00f42400 	.word	0x00f42400

08006894 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006898:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20000004 	.word	0x20000004

080068ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068b0:	f7ff fff0 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80068b4:	4602      	mov	r2, r0
 80068b6:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4904      	ldr	r1, [pc, #16]	; (80068d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068c2:	5ccb      	ldrb	r3, [r1, r3]
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40021000 	.word	0x40021000
 80068d4:	08008b98 	.word	0x08008b98

080068d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068dc:	f7ff ffda 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80068e0:	4602      	mov	r2, r0
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	0adb      	lsrs	r3, r3, #11
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	4904      	ldr	r1, [pc, #16]	; (8006900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068ee:	5ccb      	ldrb	r3, [r1, r3]
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40021000 	.word	0x40021000
 8006900:	08008b98 	.word	0x08008b98

08006904 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800690a:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006914:	4b1b      	ldr	r3, [pc, #108]	; (8006984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b03      	cmp	r3, #3
 8006926:	d10c      	bne.n	8006942 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006928:	4a17      	ldr	r2, [pc, #92]	; (8006988 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	4a14      	ldr	r2, [pc, #80]	; (8006984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006932:	68d2      	ldr	r2, [r2, #12]
 8006934:	0a12      	lsrs	r2, r2, #8
 8006936:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	617b      	str	r3, [r7, #20]
    break;
 8006940:	e00c      	b.n	800695c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006942:	4a11      	ldr	r2, [pc, #68]	; (8006988 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	4a0e      	ldr	r2, [pc, #56]	; (8006984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800694c:	68d2      	ldr	r2, [r2, #12]
 800694e:	0a12      	lsrs	r2, r2, #8
 8006950:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006954:	fb02 f303 	mul.w	r3, r2, r3
 8006958:	617b      	str	r3, [r7, #20]
    break;
 800695a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800695c:	4b09      	ldr	r3, [pc, #36]	; (8006984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	0e5b      	lsrs	r3, r3, #25
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	3301      	adds	r3, #1
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	fbb2 f3f3 	udiv	r3, r2, r3
 8006974:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006976:	687b      	ldr	r3, [r7, #4]
}
 8006978:	4618      	mov	r0, r3
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40021000 	.word	0x40021000
 8006988:	00f42400 	.word	0x00f42400

0800698c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006994:	2300      	movs	r3, #0
 8006996:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006998:	2300      	movs	r3, #0
 800699a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8098 	beq.w	8006ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069aa:	2300      	movs	r3, #0
 80069ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ae:	4b43      	ldr	r3, [pc, #268]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10d      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ba:	4b40      	ldr	r3, [pc, #256]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	4a3f      	ldr	r2, [pc, #252]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c4:	6593      	str	r3, [r2, #88]	; 0x58
 80069c6:	4b3d      	ldr	r3, [pc, #244]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069d2:	2301      	movs	r3, #1
 80069d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d6:	4b3a      	ldr	r3, [pc, #232]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a39      	ldr	r2, [pc, #228]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069e2:	f7fb fa65 	bl	8001eb0 <HAL_GetTick>
 80069e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069e8:	e009      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ea:	f7fb fa61 	bl	8001eb0 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d902      	bls.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	74fb      	strb	r3, [r7, #19]
        break;
 80069fc:	e005      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069fe:	4b30      	ldr	r3, [pc, #192]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0ef      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a0a:	7cfb      	ldrb	r3, [r7, #19]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d159      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a10:	4b2a      	ldr	r3, [pc, #168]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01e      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d019      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a2c:	4b23      	ldr	r3, [pc, #140]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a38:	4b20      	ldr	r3, [pc, #128]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3e:	4a1f      	ldr	r2, [pc, #124]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a48:	4b1c      	ldr	r3, [pc, #112]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4e:	4a1b      	ldr	r2, [pc, #108]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a58:	4a18      	ldr	r2, [pc, #96]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d016      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6a:	f7fb fa21 	bl	8001eb0 <HAL_GetTick>
 8006a6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a70:	e00b      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a72:	f7fb fa1d 	bl	8001eb0 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d902      	bls.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	74fb      	strb	r3, [r7, #19]
            break;
 8006a88:	e006      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8a:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0ec      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a98:	7cfb      	ldrb	r3, [r7, #19]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a9e:	4b07      	ldr	r3, [pc, #28]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	4903      	ldr	r1, [pc, #12]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ab6:	7cfb      	ldrb	r3, [r7, #19]
 8006ab8:	74bb      	strb	r3, [r7, #18]
 8006aba:	e005      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	7cfb      	ldrb	r3, [r7, #19]
 8006ac6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ac8:	7c7b      	ldrb	r3, [r7, #17]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d105      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ace:	4ba6      	ldr	r3, [pc, #664]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	4aa5      	ldr	r2, [pc, #660]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ae6:	4ba0      	ldr	r3, [pc, #640]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f023 0203 	bic.w	r2, r3, #3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	499c      	ldr	r1, [pc, #624]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b08:	4b97      	ldr	r3, [pc, #604]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	f023 020c 	bic.w	r2, r3, #12
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	4994      	ldr	r1, [pc, #592]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b2a:	4b8f      	ldr	r3, [pc, #572]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	498b      	ldr	r1, [pc, #556]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b4c:	4b86      	ldr	r3, [pc, #536]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	4983      	ldr	r1, [pc, #524]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b6e:	4b7e      	ldr	r3, [pc, #504]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	497a      	ldr	r1, [pc, #488]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b90:	4b75      	ldr	r3, [pc, #468]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	4972      	ldr	r1, [pc, #456]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bb2:	4b6d      	ldr	r3, [pc, #436]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	4969      	ldr	r1, [pc, #420]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bd4:	4b64      	ldr	r3, [pc, #400]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	4961      	ldr	r1, [pc, #388]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bf6:	4b5c      	ldr	r3, [pc, #368]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	4958      	ldr	r1, [pc, #352]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d015      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c18:	4b53      	ldr	r3, [pc, #332]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	4950      	ldr	r1, [pc, #320]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c36:	d105      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c38:	4b4b      	ldr	r3, [pc, #300]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4a4a      	ldr	r2, [pc, #296]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d015      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c50:	4b45      	ldr	r3, [pc, #276]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5e:	4942      	ldr	r1, [pc, #264]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c6e:	d105      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c70:	4b3d      	ldr	r3, [pc, #244]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4a3c      	ldr	r2, [pc, #240]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d015      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c88:	4b37      	ldr	r3, [pc, #220]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	4934      	ldr	r1, [pc, #208]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ca6:	d105      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ca8:	4b2f      	ldr	r3, [pc, #188]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a2e      	ldr	r2, [pc, #184]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d015      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cc0:	4b29      	ldr	r3, [pc, #164]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cce:	4926      	ldr	r1, [pc, #152]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cde:	d105      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce0:	4b21      	ldr	r3, [pc, #132]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	4918      	ldr	r1, [pc, #96]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d16:	d105      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d18:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4a12      	ldr	r2, [pc, #72]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d015      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d30:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	490a      	ldr	r1, [pc, #40]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4e:	d105      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d50:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	4a04      	ldr	r2, [pc, #16]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40021000 	.word	0x40021000

08006d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e049      	b.n	8006e12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fa fefe 	bl	8001b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3304      	adds	r3, #4
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f000 fae0 	bl	8007370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d122      	bne.n	8006e76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d11b      	bne.n	8006e76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f06f 0202 	mvn.w	r2, #2
 8006e46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fa69 	bl	8007334 <HAL_TIM_IC_CaptureCallback>
 8006e62:	e005      	b.n	8006e70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fa5b 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa6c 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d122      	bne.n	8006eca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d11b      	bne.n	8006eca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f06f 0204 	mvn.w	r2, #4
 8006e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fa3f 	bl	8007334 <HAL_TIM_IC_CaptureCallback>
 8006eb6:	e005      	b.n	8006ec4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fa31 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa42 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d122      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 0308 	and.w	r3, r3, #8
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d11b      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f06f 0208 	mvn.w	r2, #8
 8006eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2204      	movs	r2, #4
 8006ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	f003 0303 	and.w	r3, r3, #3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fa15 	bl	8007334 <HAL_TIM_IC_CaptureCallback>
 8006f0a:	e005      	b.n	8006f18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fa07 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa18 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d122      	bne.n	8006f72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b10      	cmp	r3, #16
 8006f38:	d11b      	bne.n	8006f72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f06f 0210 	mvn.w	r2, #16
 8006f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2208      	movs	r2, #8
 8006f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f9eb 	bl	8007334 <HAL_TIM_IC_CaptureCallback>
 8006f5e:	e005      	b.n	8006f6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f9dd 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9ee 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d10e      	bne.n	8006f9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d107      	bne.n	8006f9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f06f 0201 	mvn.w	r2, #1
 8006f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f9b7 	bl	800730c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa8:	2b80      	cmp	r3, #128	; 0x80
 8006faa:	d10e      	bne.n	8006fca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb6:	2b80      	cmp	r3, #128	; 0x80
 8006fb8:	d107      	bne.n	8006fca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fb8b 	bl	80076e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd8:	d10e      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe4:	2b80      	cmp	r3, #128	; 0x80
 8006fe6:	d107      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb7e 	bl	80076f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007002:	2b40      	cmp	r3, #64	; 0x40
 8007004:	d10e      	bne.n	8007024 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d107      	bne.n	8007024 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800701c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f99c 	bl	800735c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b20      	cmp	r3, #32
 8007030:	d10e      	bne.n	8007050 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b20      	cmp	r3, #32
 800703e:	d107      	bne.n	8007050 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0220 	mvn.w	r2, #32
 8007048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fb3e 	bl	80076cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800705a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705e:	d10f      	bne.n	8007080 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800706e:	d107      	bne.n	8007080 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fb44 	bl	8007708 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800708a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800708e:	d10f      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800709a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800709e:	d107      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80070a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fb36 	bl	800771c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070be:	d10f      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ce:	d107      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80070d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fb28 	bl	8007730 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ee:	d10f      	bne.n	8007110 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070fe:	d107      	bne.n	8007110 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fb1a 	bl	8007744 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_TIM_ConfigClockSource+0x1c>
 8007130:	2302      	movs	r3, #2
 8007132:	e0de      	b.n	80072f2 <HAL_TIM_ConfigClockSource+0x1da>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007152:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800715e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a63      	ldr	r2, [pc, #396]	; (80072fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800716e:	4293      	cmp	r3, r2
 8007170:	f000 80a9 	beq.w	80072c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007174:	4a61      	ldr	r2, [pc, #388]	; (80072fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	f200 80ae 	bhi.w	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800717c:	4a60      	ldr	r2, [pc, #384]	; (8007300 <HAL_TIM_ConfigClockSource+0x1e8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	f000 80a1 	beq.w	80072c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007184:	4a5e      	ldr	r2, [pc, #376]	; (8007300 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	f200 80a6 	bhi.w	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800718c:	4a5d      	ldr	r2, [pc, #372]	; (8007304 <HAL_TIM_ConfigClockSource+0x1ec>)
 800718e:	4293      	cmp	r3, r2
 8007190:	f000 8099 	beq.w	80072c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007194:	4a5b      	ldr	r2, [pc, #364]	; (8007304 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007196:	4293      	cmp	r3, r2
 8007198:	f200 809e 	bhi.w	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800719c:	4a5a      	ldr	r2, [pc, #360]	; (8007308 <HAL_TIM_ConfigClockSource+0x1f0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	f000 8091 	beq.w	80072c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80071a4:	4a58      	ldr	r2, [pc, #352]	; (8007308 <HAL_TIM_ConfigClockSource+0x1f0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	f200 8096 	bhi.w	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80071ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071b0:	f000 8089 	beq.w	80072c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80071b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071b8:	f200 808e 	bhi.w	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80071bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c0:	d03e      	beq.n	8007240 <HAL_TIM_ConfigClockSource+0x128>
 80071c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c6:	f200 8087 	bhi.w	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80071ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ce:	f000 8086 	beq.w	80072de <HAL_TIM_ConfigClockSource+0x1c6>
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d6:	d87f      	bhi.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80071d8:	2b70      	cmp	r3, #112	; 0x70
 80071da:	d01a      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0xfa>
 80071dc:	2b70      	cmp	r3, #112	; 0x70
 80071de:	d87b      	bhi.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80071e0:	2b60      	cmp	r3, #96	; 0x60
 80071e2:	d050      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x16e>
 80071e4:	2b60      	cmp	r3, #96	; 0x60
 80071e6:	d877      	bhi.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80071e8:	2b50      	cmp	r3, #80	; 0x50
 80071ea:	d03c      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x14e>
 80071ec:	2b50      	cmp	r3, #80	; 0x50
 80071ee:	d873      	bhi.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d058      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x18e>
 80071f4:	2b40      	cmp	r3, #64	; 0x40
 80071f6:	d86f      	bhi.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80071f8:	2b30      	cmp	r3, #48	; 0x30
 80071fa:	d064      	beq.n	80072c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80071fc:	2b30      	cmp	r3, #48	; 0x30
 80071fe:	d86b      	bhi.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007200:	2b20      	cmp	r3, #32
 8007202:	d060      	beq.n	80072c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007204:	2b20      	cmp	r3, #32
 8007206:	d867      	bhi.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d05c      	beq.n	80072c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800720c:	2b10      	cmp	r3, #16
 800720e:	d05a      	beq.n	80072c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007210:	e062      	b.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6899      	ldr	r1, [r3, #8]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f000 f9b1 	bl	8007588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007234:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	609a      	str	r2, [r3, #8]
      break;
 800723e:	e04f      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	6899      	ldr	r1, [r3, #8]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f000 f99a 	bl	8007588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007262:	609a      	str	r2, [r3, #8]
      break;
 8007264:	e03c      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6859      	ldr	r1, [r3, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	461a      	mov	r2, r3
 8007274:	f000 f90c 	bl	8007490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2150      	movs	r1, #80	; 0x50
 800727e:	4618      	mov	r0, r3
 8007280:	f000 f965 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8007284:	e02c      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	6859      	ldr	r1, [r3, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	461a      	mov	r2, r3
 8007294:	f000 f92b 	bl	80074ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2160      	movs	r1, #96	; 0x60
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f955 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 80072a4:	e01c      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	6859      	ldr	r1, [r3, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f000 f8ec 	bl	8007490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2140      	movs	r1, #64	; 0x40
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 f945 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 80072c4:	e00c      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4619      	mov	r1, r3
 80072d0:	4610      	mov	r0, r2
 80072d2:	f000 f93c 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 80072d6:	e003      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
      break;
 80072dc:	e000      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80072de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	00100070 	.word	0x00100070
 8007300:	00100040 	.word	0x00100040
 8007304:	00100030 	.word	0x00100030
 8007308:	00100020 	.word	0x00100020

0800730c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a3c      	ldr	r2, [pc, #240]	; (8007474 <TIM_Base_SetConfig+0x104>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00f      	beq.n	80073a8 <TIM_Base_SetConfig+0x38>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738e:	d00b      	beq.n	80073a8 <TIM_Base_SetConfig+0x38>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a39      	ldr	r2, [pc, #228]	; (8007478 <TIM_Base_SetConfig+0x108>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d007      	beq.n	80073a8 <TIM_Base_SetConfig+0x38>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a38      	ldr	r2, [pc, #224]	; (800747c <TIM_Base_SetConfig+0x10c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d003      	beq.n	80073a8 <TIM_Base_SetConfig+0x38>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a37      	ldr	r2, [pc, #220]	; (8007480 <TIM_Base_SetConfig+0x110>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d108      	bne.n	80073ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a2d      	ldr	r2, [pc, #180]	; (8007474 <TIM_Base_SetConfig+0x104>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01b      	beq.n	80073fa <TIM_Base_SetConfig+0x8a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c8:	d017      	beq.n	80073fa <TIM_Base_SetConfig+0x8a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a2a      	ldr	r2, [pc, #168]	; (8007478 <TIM_Base_SetConfig+0x108>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <TIM_Base_SetConfig+0x8a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a29      	ldr	r2, [pc, #164]	; (800747c <TIM_Base_SetConfig+0x10c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00f      	beq.n	80073fa <TIM_Base_SetConfig+0x8a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a28      	ldr	r2, [pc, #160]	; (8007480 <TIM_Base_SetConfig+0x110>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00b      	beq.n	80073fa <TIM_Base_SetConfig+0x8a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a27      	ldr	r2, [pc, #156]	; (8007484 <TIM_Base_SetConfig+0x114>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d007      	beq.n	80073fa <TIM_Base_SetConfig+0x8a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a26      	ldr	r2, [pc, #152]	; (8007488 <TIM_Base_SetConfig+0x118>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_Base_SetConfig+0x8a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a25      	ldr	r2, [pc, #148]	; (800748c <TIM_Base_SetConfig+0x11c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d108      	bne.n	800740c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a10      	ldr	r2, [pc, #64]	; (8007474 <TIM_Base_SetConfig+0x104>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00f      	beq.n	8007458 <TIM_Base_SetConfig+0xe8>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a11      	ldr	r2, [pc, #68]	; (8007480 <TIM_Base_SetConfig+0x110>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00b      	beq.n	8007458 <TIM_Base_SetConfig+0xe8>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a10      	ldr	r2, [pc, #64]	; (8007484 <TIM_Base_SetConfig+0x114>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d007      	beq.n	8007458 <TIM_Base_SetConfig+0xe8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a0f      	ldr	r2, [pc, #60]	; (8007488 <TIM_Base_SetConfig+0x118>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_Base_SetConfig+0xe8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a0e      	ldr	r2, [pc, #56]	; (800748c <TIM_Base_SetConfig+0x11c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d103      	bne.n	8007460 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	615a      	str	r2, [r3, #20]
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40012c00 	.word	0x40012c00
 8007478:	40000400 	.word	0x40000400
 800747c:	40000800 	.word	0x40000800
 8007480:	40013400 	.word	0x40013400
 8007484:	40014000 	.word	0x40014000
 8007488:	40014400 	.word	0x40014400
 800748c:	40014800 	.word	0x40014800

08007490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	f023 0201 	bic.w	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f023 030a 	bic.w	r3, r3, #10
 80074cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	621a      	str	r2, [r3, #32]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b087      	sub	sp, #28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f023 0210 	bic.w	r2, r3, #16
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	031b      	lsls	r3, r3, #12
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800752a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	f043 0307 	orr.w	r3, r3, #7
 8007574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	609a      	str	r2, [r3, #8]
}
 800757c:	bf00      	nop
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	021a      	lsls	r2, r3, #8
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	431a      	orrs	r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	609a      	str	r2, [r3, #8]
}
 80075bc:	bf00      	nop
 80075be:	371c      	adds	r7, #28
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075dc:	2302      	movs	r3, #2
 80075de:	e065      	b.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a2c      	ldr	r2, [pc, #176]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d004      	beq.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2b      	ldr	r2, [pc, #172]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d108      	bne.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800761a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800762c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1b      	ldr	r2, [pc, #108]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d018      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007656:	d013      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00e      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d009      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a12      	ldr	r2, [pc, #72]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d10c      	bne.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	4313      	orrs	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40013400 	.word	0x40013400
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40014000 	.word	0x40014000

080076cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e042      	b.n	80077f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7fa fa7b 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2224      	movs	r2, #36	; 0x24
 8007786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0201 	bic.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fb64 	bl	8007e68 <UART_SetConfig>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e022      	b.n	80077f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fe24 	bl	8008400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 feab 	bl	8008544 <UART_CheckIdleState>
 80077ee:	4603      	mov	r3, r0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b0ba      	sub	sp, #232	; 0xe8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800781e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007822:	f640 030f 	movw	r3, #2063	; 0x80f
 8007826:	4013      	ands	r3, r2
 8007828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800782c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007830:	2b00      	cmp	r3, #0
 8007832:	d11b      	bne.n	800786c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d015      	beq.n	800786c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	d105      	bne.n	8007858 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800784c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d009      	beq.n	800786c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 82d6 	beq.w	8007e0e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
      }
      return;
 800786a:	e2d0      	b.n	8007e0e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800786c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 811f 	beq.w	8007ab4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007876:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800787a:	4b8b      	ldr	r3, [pc, #556]	; (8007aa8 <HAL_UART_IRQHandler+0x2b0>)
 800787c:	4013      	ands	r3, r2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007882:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007886:	4b89      	ldr	r3, [pc, #548]	; (8007aac <HAL_UART_IRQHandler+0x2b4>)
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 8112 	beq.w	8007ab4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d011      	beq.n	80078c0 <HAL_UART_IRQHandler+0xc8>
 800789c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2201      	movs	r2, #1
 80078ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b6:	f043 0201 	orr.w	r2, r3, #1
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d011      	beq.n	80078f0 <HAL_UART_IRQHandler+0xf8>
 80078cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2202      	movs	r2, #2
 80078de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e6:	f043 0204 	orr.w	r2, r3, #4
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d011      	beq.n	8007920 <HAL_UART_IRQHandler+0x128>
 80078fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2204      	movs	r2, #4
 800790e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007916:	f043 0202 	orr.w	r2, r3, #2
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d017      	beq.n	800795c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800792c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007938:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800793c:	4b5a      	ldr	r3, [pc, #360]	; (8007aa8 <HAL_UART_IRQHandler+0x2b0>)
 800793e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2208      	movs	r2, #8
 800794a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007952:	f043 0208 	orr.w	r2, r3, #8
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007964:	2b00      	cmp	r3, #0
 8007966:	d012      	beq.n	800798e <HAL_UART_IRQHandler+0x196>
 8007968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00c      	beq.n	800798e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800797c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007984:	f043 0220 	orr.w	r2, r3, #32
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 823c 	beq.w	8007e12 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800799a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d013      	beq.n	80079ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d105      	bne.n	80079be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d005      	beq.n	80079f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d04f      	beq.n	8007a92 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 feb9 	bl	800876a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d141      	bne.n	8007a8a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1d9      	bne.n	8007a06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d013      	beq.n	8007a82 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5e:	4a14      	ldr	r2, [pc, #80]	; (8007ab0 <HAL_UART_IRQHandler+0x2b8>)
 8007a60:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fc ff58 	bl	800491c <HAL_DMA_Abort_IT>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d017      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a80:	e00f      	b.n	8007aa2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f9da 	bl	8007e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a88:	e00b      	b.n	8007aa2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f9d6 	bl	8007e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a90:	e007      	b.n	8007aa2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9d2 	bl	8007e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007aa0:	e1b7      	b.n	8007e12 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa2:	bf00      	nop
    return;
 8007aa4:	e1b5      	b.n	8007e12 <HAL_UART_IRQHandler+0x61a>
 8007aa6:	bf00      	nop
 8007aa8:	10000001 	.word	0x10000001
 8007aac:	04000120 	.word	0x04000120
 8007ab0:	08008837 	.word	0x08008837

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	f040 814a 	bne.w	8007d52 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 8143 	beq.w	8007d52 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 813c 	beq.w	8007d52 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2210      	movs	r2, #16
 8007ae0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b40      	cmp	r3, #64	; 0x40
 8007aee:	f040 80b5 	bne.w	8007c5c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007afe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8187 	beq.w	8007e16 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b12:	429a      	cmp	r2, r3
 8007b14:	f080 817f 	bcs.w	8007e16 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f040 8086 	bne.w	8007c40 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1da      	bne.n	8007b34 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b90:	f023 0301 	bic.w	r3, r3, #1
 8007b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ba2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e1      	bne.n	8007b7e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007be0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007be4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e3      	bne.n	8007bba <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c10:	f023 0310 	bic.w	r3, r3, #16
 8007c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e4      	bne.n	8007c00 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fc fe15 	bl	800486a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f8fb 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c5a:	e0dc      	b.n	8007e16 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 80ce 	beq.w	8007e1a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80c9 	beq.w	8007e1a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007caa:	647b      	str	r3, [r7, #68]	; 0x44
 8007cac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e4      	bne.n	8007c88 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cd4:	f023 0301 	bic.w	r3, r3, #1
 8007cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ce6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e1      	bne.n	8007cbe <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0310 	bic.w	r3, r3, #16
 8007d22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	69b9      	ldr	r1, [r7, #24]
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e4      	bne.n	8007d0e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f880 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d50:	e063      	b.n	8007e1a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00e      	beq.n	8007d7c <HAL_UART_IRQHandler+0x584>
 8007d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d008      	beq.n	8007d7c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fd9f 	bl	80088b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d7a:	e051      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d014      	beq.n	8007db2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d105      	bne.n	8007da0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d03a      	beq.n	8007e1e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
    }
    return;
 8007db0:	e035      	b.n	8007e1e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x5da>
 8007dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fd49 	bl	8008862 <UART_EndTransmit_IT>
    return;
 8007dd0:	e026      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <HAL_UART_IRQHandler+0x5fa>
 8007dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007de2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fd78 	bl	80088e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007df0:	e016      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <HAL_UART_IRQHandler+0x628>
 8007dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	da0c      	bge.n	8007e20 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fd60 	bl	80088cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e0c:	e008      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
      return;
 8007e0e:	bf00      	nop
 8007e10:	e006      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
    return;
 8007e12:	bf00      	nop
 8007e14:	e004      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
      return;
 8007e16:	bf00      	nop
 8007e18:	e002      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
      return;
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
    return;
 8007e1e:	bf00      	nop
  }
}
 8007e20:	37e8      	adds	r7, #232	; 0xe8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop

08007e28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e6c:	b08c      	sub	sp, #48	; 0x30
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4bab      	ldr	r3, [pc, #684]	; (8008144 <UART_SetConfig+0x2dc>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4aa0      	ldr	r2, [pc, #640]	; (8008148 <UART_SetConfig+0x2e0>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d004      	beq.n	8007ed4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ede:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	f023 010f 	bic.w	r1, r3, #15
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a91      	ldr	r2, [pc, #580]	; (800814c <UART_SetConfig+0x2e4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d125      	bne.n	8007f58 <UART_SetConfig+0xf0>
 8007f0c:	4b90      	ldr	r3, [pc, #576]	; (8008150 <UART_SetConfig+0x2e8>)
 8007f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d81a      	bhi.n	8007f50 <UART_SetConfig+0xe8>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <UART_SetConfig+0xb8>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f41 	.word	0x08007f41
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f49 	.word	0x08007f49
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f36:	e0d6      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3e:	e0d2      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f40:	2304      	movs	r3, #4
 8007f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f46:	e0ce      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f48:	2308      	movs	r3, #8
 8007f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f4e:	e0ca      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f50:	2310      	movs	r3, #16
 8007f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f56:	e0c6      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a7d      	ldr	r2, [pc, #500]	; (8008154 <UART_SetConfig+0x2ec>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d138      	bne.n	8007fd4 <UART_SetConfig+0x16c>
 8007f62:	4b7b      	ldr	r3, [pc, #492]	; (8008150 <UART_SetConfig+0x2e8>)
 8007f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f68:	f003 030c 	and.w	r3, r3, #12
 8007f6c:	2b0c      	cmp	r3, #12
 8007f6e:	d82d      	bhi.n	8007fcc <UART_SetConfig+0x164>
 8007f70:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <UART_SetConfig+0x110>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007fad 	.word	0x08007fad
 8007f7c:	08007fcd 	.word	0x08007fcd
 8007f80:	08007fcd 	.word	0x08007fcd
 8007f84:	08007fcd 	.word	0x08007fcd
 8007f88:	08007fbd 	.word	0x08007fbd
 8007f8c:	08007fcd 	.word	0x08007fcd
 8007f90:	08007fcd 	.word	0x08007fcd
 8007f94:	08007fcd 	.word	0x08007fcd
 8007f98:	08007fb5 	.word	0x08007fb5
 8007f9c:	08007fcd 	.word	0x08007fcd
 8007fa0:	08007fcd 	.word	0x08007fcd
 8007fa4:	08007fcd 	.word	0x08007fcd
 8007fa8:	08007fc5 	.word	0x08007fc5
 8007fac:	2300      	movs	r3, #0
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb2:	e098      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fba:	e094      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fbc:	2304      	movs	r3, #4
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc2:	e090      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fca:	e08c      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fcc:	2310      	movs	r3, #16
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd2:	e088      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a5f      	ldr	r2, [pc, #380]	; (8008158 <UART_SetConfig+0x2f0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d125      	bne.n	800802a <UART_SetConfig+0x1c2>
 8007fde:	4b5c      	ldr	r3, [pc, #368]	; (8008150 <UART_SetConfig+0x2e8>)
 8007fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fe8:	2b30      	cmp	r3, #48	; 0x30
 8007fea:	d016      	beq.n	800801a <UART_SetConfig+0x1b2>
 8007fec:	2b30      	cmp	r3, #48	; 0x30
 8007fee:	d818      	bhi.n	8008022 <UART_SetConfig+0x1ba>
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d00a      	beq.n	800800a <UART_SetConfig+0x1a2>
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	d814      	bhi.n	8008022 <UART_SetConfig+0x1ba>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <UART_SetConfig+0x19a>
 8007ffc:	2b10      	cmp	r3, #16
 8007ffe:	d008      	beq.n	8008012 <UART_SetConfig+0x1aa>
 8008000:	e00f      	b.n	8008022 <UART_SetConfig+0x1ba>
 8008002:	2300      	movs	r3, #0
 8008004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008008:	e06d      	b.n	80080e6 <UART_SetConfig+0x27e>
 800800a:	2302      	movs	r3, #2
 800800c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008010:	e069      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008012:	2304      	movs	r3, #4
 8008014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008018:	e065      	b.n	80080e6 <UART_SetConfig+0x27e>
 800801a:	2308      	movs	r3, #8
 800801c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008020:	e061      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008022:	2310      	movs	r3, #16
 8008024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008028:	e05d      	b.n	80080e6 <UART_SetConfig+0x27e>
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a4b      	ldr	r2, [pc, #300]	; (800815c <UART_SetConfig+0x2f4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d125      	bne.n	8008080 <UART_SetConfig+0x218>
 8008034:	4b46      	ldr	r3, [pc, #280]	; (8008150 <UART_SetConfig+0x2e8>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800803e:	2bc0      	cmp	r3, #192	; 0xc0
 8008040:	d016      	beq.n	8008070 <UART_SetConfig+0x208>
 8008042:	2bc0      	cmp	r3, #192	; 0xc0
 8008044:	d818      	bhi.n	8008078 <UART_SetConfig+0x210>
 8008046:	2b80      	cmp	r3, #128	; 0x80
 8008048:	d00a      	beq.n	8008060 <UART_SetConfig+0x1f8>
 800804a:	2b80      	cmp	r3, #128	; 0x80
 800804c:	d814      	bhi.n	8008078 <UART_SetConfig+0x210>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <UART_SetConfig+0x1f0>
 8008052:	2b40      	cmp	r3, #64	; 0x40
 8008054:	d008      	beq.n	8008068 <UART_SetConfig+0x200>
 8008056:	e00f      	b.n	8008078 <UART_SetConfig+0x210>
 8008058:	2300      	movs	r3, #0
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805e:	e042      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008060:	2302      	movs	r3, #2
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008066:	e03e      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008068:	2304      	movs	r3, #4
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806e:	e03a      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008070:	2308      	movs	r3, #8
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008076:	e036      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008078:	2310      	movs	r3, #16
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807e:	e032      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a30      	ldr	r2, [pc, #192]	; (8008148 <UART_SetConfig+0x2e0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d12a      	bne.n	80080e0 <UART_SetConfig+0x278>
 800808a:	4b31      	ldr	r3, [pc, #196]	; (8008150 <UART_SetConfig+0x2e8>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008098:	d01a      	beq.n	80080d0 <UART_SetConfig+0x268>
 800809a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800809e:	d81b      	bhi.n	80080d8 <UART_SetConfig+0x270>
 80080a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080a4:	d00c      	beq.n	80080c0 <UART_SetConfig+0x258>
 80080a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080aa:	d815      	bhi.n	80080d8 <UART_SetConfig+0x270>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <UART_SetConfig+0x250>
 80080b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b4:	d008      	beq.n	80080c8 <UART_SetConfig+0x260>
 80080b6:	e00f      	b.n	80080d8 <UART_SetConfig+0x270>
 80080b8:	2300      	movs	r3, #0
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e012      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080c0:	2302      	movs	r3, #2
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e00e      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080c8:	2304      	movs	r3, #4
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e00a      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080d0:	2308      	movs	r3, #8
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d6:	e006      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080d8:	2310      	movs	r3, #16
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080de:	e002      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080e0:	2310      	movs	r3, #16
 80080e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a17      	ldr	r2, [pc, #92]	; (8008148 <UART_SetConfig+0x2e0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	f040 80a8 	bne.w	8008242 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080f6:	2b08      	cmp	r3, #8
 80080f8:	d834      	bhi.n	8008164 <UART_SetConfig+0x2fc>
 80080fa:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <UART_SetConfig+0x298>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008125 	.word	0x08008125
 8008104:	08008165 	.word	0x08008165
 8008108:	0800812d 	.word	0x0800812d
 800810c:	08008165 	.word	0x08008165
 8008110:	08008133 	.word	0x08008133
 8008114:	08008165 	.word	0x08008165
 8008118:	08008165 	.word	0x08008165
 800811c:	08008165 	.word	0x08008165
 8008120:	0800813b 	.word	0x0800813b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008124:	f7fe fbc2 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 8008128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800812a:	e021      	b.n	8008170 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800812c:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <UART_SetConfig+0x2f8>)
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008130:	e01e      	b.n	8008170 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008132:	f7fe fb4f 	bl	80067d4 <HAL_RCC_GetSysClockFreq>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008138:	e01a      	b.n	8008170 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800813a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008140:	e016      	b.n	8008170 <UART_SetConfig+0x308>
 8008142:	bf00      	nop
 8008144:	cfff69f3 	.word	0xcfff69f3
 8008148:	40008000 	.word	0x40008000
 800814c:	40013800 	.word	0x40013800
 8008150:	40021000 	.word	0x40021000
 8008154:	40004400 	.word	0x40004400
 8008158:	40004800 	.word	0x40004800
 800815c:	40004c00 	.word	0x40004c00
 8008160:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800816e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 812a 	beq.w	80083cc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	4a9e      	ldr	r2, [pc, #632]	; (80083f8 <UART_SetConfig+0x590>)
 800817e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008182:	461a      	mov	r2, r3
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	fbb3 f3f2 	udiv	r3, r3, r2
 800818a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	4613      	mov	r3, r2
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	4413      	add	r3, r2
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	429a      	cmp	r2, r3
 800819a:	d305      	bcc.n	80081a8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d903      	bls.n	80081b0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081ae:	e10d      	b.n	80083cc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	2200      	movs	r2, #0
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	60fa      	str	r2, [r7, #12]
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	4a8e      	ldr	r2, [pc, #568]	; (80083f8 <UART_SetConfig+0x590>)
 80081be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2200      	movs	r2, #0
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081d2:	f7f8 f821 	bl	8000218 <__aeabi_uldivmod>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4610      	mov	r0, r2
 80081dc:	4619      	mov	r1, r3
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	020b      	lsls	r3, r1, #8
 80081e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081ec:	0202      	lsls	r2, r0, #8
 80081ee:	6979      	ldr	r1, [r7, #20]
 80081f0:	6849      	ldr	r1, [r1, #4]
 80081f2:	0849      	lsrs	r1, r1, #1
 80081f4:	2000      	movs	r0, #0
 80081f6:	460c      	mov	r4, r1
 80081f8:	4605      	mov	r5, r0
 80081fa:	eb12 0804 	adds.w	r8, r2, r4
 80081fe:	eb43 0905 	adc.w	r9, r3, r5
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	469a      	mov	sl, r3
 800820a:	4693      	mov	fp, r2
 800820c:	4652      	mov	r2, sl
 800820e:	465b      	mov	r3, fp
 8008210:	4640      	mov	r0, r8
 8008212:	4649      	mov	r1, r9
 8008214:	f7f8 f800 	bl	8000218 <__aeabi_uldivmod>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4613      	mov	r3, r2
 800821e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008226:	d308      	bcc.n	800823a <UART_SetConfig+0x3d2>
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800822e:	d204      	bcs.n	800823a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6a3a      	ldr	r2, [r7, #32]
 8008236:	60da      	str	r2, [r3, #12]
 8008238:	e0c8      	b.n	80083cc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008240:	e0c4      	b.n	80083cc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800824a:	d167      	bne.n	800831c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800824c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008250:	2b08      	cmp	r3, #8
 8008252:	d828      	bhi.n	80082a6 <UART_SetConfig+0x43e>
 8008254:	a201      	add	r2, pc, #4	; (adr r2, 800825c <UART_SetConfig+0x3f4>)
 8008256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825a:	bf00      	nop
 800825c:	08008281 	.word	0x08008281
 8008260:	08008289 	.word	0x08008289
 8008264:	08008291 	.word	0x08008291
 8008268:	080082a7 	.word	0x080082a7
 800826c:	08008297 	.word	0x08008297
 8008270:	080082a7 	.word	0x080082a7
 8008274:	080082a7 	.word	0x080082a7
 8008278:	080082a7 	.word	0x080082a7
 800827c:	0800829f 	.word	0x0800829f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008280:	f7fe fb14 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 8008284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008286:	e014      	b.n	80082b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008288:	f7fe fb26 	bl	80068d8 <HAL_RCC_GetPCLK2Freq>
 800828c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800828e:	e010      	b.n	80082b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008290:	4b5a      	ldr	r3, [pc, #360]	; (80083fc <UART_SetConfig+0x594>)
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008294:	e00d      	b.n	80082b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008296:	f7fe fa9d 	bl	80067d4 <HAL_RCC_GetSysClockFreq>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800829c:	e009      	b.n	80082b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082a4:	e005      	b.n	80082b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8089 	beq.w	80083cc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	4a4e      	ldr	r2, [pc, #312]	; (80083f8 <UART_SetConfig+0x590>)
 80082c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c4:	461a      	mov	r2, r3
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082cc:	005a      	lsls	r2, r3, #1
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	085b      	lsrs	r3, r3, #1
 80082d4:	441a      	add	r2, r3
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	fbb2 f3f3 	udiv	r3, r2, r3
 80082de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	2b0f      	cmp	r3, #15
 80082e4:	d916      	bls.n	8008314 <UART_SetConfig+0x4ac>
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ec:	d212      	bcs.n	8008314 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f023 030f 	bic.w	r3, r3, #15
 80082f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	b29a      	uxth	r2, r3
 8008304:	8bfb      	ldrh	r3, [r7, #30]
 8008306:	4313      	orrs	r3, r2
 8008308:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	8bfa      	ldrh	r2, [r7, #30]
 8008310:	60da      	str	r2, [r3, #12]
 8008312:	e05b      	b.n	80083cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800831a:	e057      	b.n	80083cc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800831c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008320:	2b08      	cmp	r3, #8
 8008322:	d828      	bhi.n	8008376 <UART_SetConfig+0x50e>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <UART_SetConfig+0x4c4>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	08008377 	.word	0x08008377
 800833c:	08008367 	.word	0x08008367
 8008340:	08008377 	.word	0x08008377
 8008344:	08008377 	.word	0x08008377
 8008348:	08008377 	.word	0x08008377
 800834c:	0800836f 	.word	0x0800836f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008350:	f7fe faac 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 8008354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008356:	e014      	b.n	8008382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008358:	f7fe fabe 	bl	80068d8 <HAL_RCC_GetPCLK2Freq>
 800835c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800835e:	e010      	b.n	8008382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008360:	4b26      	ldr	r3, [pc, #152]	; (80083fc <UART_SetConfig+0x594>)
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008364:	e00d      	b.n	8008382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008366:	f7fe fa35 	bl	80067d4 <HAL_RCC_GetSysClockFreq>
 800836a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800836c:	e009      	b.n	8008382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008374:	e005      	b.n	8008382 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008380:	bf00      	nop
    }

    if (pclk != 0U)
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d021      	beq.n	80083cc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4a1a      	ldr	r2, [pc, #104]	; (80083f8 <UART_SetConfig+0x590>)
 800838e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008392:	461a      	mov	r2, r3
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	fbb3 f2f2 	udiv	r2, r3, r2
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	441a      	add	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	2b0f      	cmp	r3, #15
 80083b0:	d909      	bls.n	80083c6 <UART_SetConfig+0x55e>
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b8:	d205      	bcs.n	80083c6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	e002      	b.n	80083cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2200      	movs	r2, #0
 80083e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2200      	movs	r2, #0
 80083e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80083e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3730      	adds	r7, #48	; 0x30
 80083f0:	46bd      	mov	sp, r7
 80083f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083f6:	bf00      	nop
 80083f8:	08008bb0 	.word	0x08008bb0
 80083fc:	00f42400 	.word	0x00f42400

08008400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00a      	beq.n	800846e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008472:	f003 0308 	and.w	r3, r3, #8
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01a      	beq.n	8008516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084fe:	d10a      	bne.n	8008516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	605a      	str	r2, [r3, #4]
  }
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af02      	add	r7, sp, #8
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008554:	f7f9 fcac 	bl	8001eb0 <HAL_GetTick>
 8008558:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b08      	cmp	r3, #8
 8008566:	d10e      	bne.n	8008586 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f82f 	bl	80085da <UART_WaitOnFlagUntilTimeout>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e025      	b.n	80085d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b04      	cmp	r3, #4
 8008592:	d10e      	bne.n	80085b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f819 	bl	80085da <UART_WaitOnFlagUntilTimeout>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e00f      	b.n	80085d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2220      	movs	r2, #32
 80085be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b09c      	sub	sp, #112	; 0x70
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	603b      	str	r3, [r7, #0]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ea:	e0a9      	b.n	8008740 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	f000 80a5 	beq.w	8008740 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f6:	f7f9 fc5b 	bl	8001eb0 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <UART_WaitOnFlagUntilTimeout+0x32>
 8008606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008608:	2b00      	cmp	r3, #0
 800860a:	d140      	bne.n	800868e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800861a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008620:	667b      	str	r3, [r7, #100]	; 0x64
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800862a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800862c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008630:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e6      	bne.n	800860c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3308      	adds	r3, #8
 8008644:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	f023 0301 	bic.w	r3, r3, #1
 8008654:	663b      	str	r3, [r7, #96]	; 0x60
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800865e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008660:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800866c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e5      	bne.n	800863e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e069      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b00      	cmp	r3, #0
 800869a:	d051      	beq.n	8008740 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086aa:	d149      	bne.n	8008740 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	461a      	mov	r2, r3
 80086d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
 80086d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e6      	bne.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3308      	adds	r3, #8
 80086ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	613b      	str	r3, [r7, #16]
   return(result);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f023 0301 	bic.w	r3, r3, #1
 80086fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3308      	adds	r3, #8
 8008706:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008708:	623a      	str	r2, [r7, #32]
 800870a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	69f9      	ldr	r1, [r7, #28]
 800870e:	6a3a      	ldr	r2, [r7, #32]
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	61bb      	str	r3, [r7, #24]
   return(result);
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e5      	bne.n	80086e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2220      	movs	r2, #32
 8008720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2220      	movs	r2, #32
 8008728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2220      	movs	r2, #32
 8008730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e010      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69da      	ldr	r2, [r3, #28]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4013      	ands	r3, r2
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	429a      	cmp	r2, r3
 800874e:	bf0c      	ite	eq
 8008750:	2301      	moveq	r3, #1
 8008752:	2300      	movne	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	429a      	cmp	r2, r3
 800875c:	f43f af46 	beq.w	80085ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3770      	adds	r7, #112	; 0x70
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800876a:	b480      	push	{r7}
 800876c:	b095      	sub	sp, #84	; 0x54
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008790:	643b      	str	r3, [r7, #64]	; 0x40
 8008792:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e6      	bne.n	8008772 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e3      	bne.n	80087a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d118      	bne.n	8008816 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f023 0310 	bic.w	r3, r3, #16
 80087f8:	647b      	str	r3, [r7, #68]	; 0x44
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6979      	ldr	r1, [r7, #20]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	613b      	str	r3, [r7, #16]
   return(result);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e6      	bne.n	80087e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	671a      	str	r2, [r3, #112]	; 0x70
}
 800882a:	bf00      	nop
 800882c:	3754      	adds	r7, #84	; 0x54
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff faf1 	bl	8007e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	60bb      	str	r3, [r7, #8]
   return(result);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6979      	ldr	r1, [r7, #20]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	613b      	str	r3, [r7, #16]
   return(result);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e6      	bne.n	800886a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fabc 	bl	8007e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b0:	bf00      	nop
 80088b2:	3720      	adds	r7, #32
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008902:	2b01      	cmp	r3, #1
 8008904:	d101      	bne.n	800890a <HAL_UARTEx_DisableFifoMode+0x16>
 8008906:	2302      	movs	r3, #2
 8008908:	e027      	b.n	800895a <HAL_UARTEx_DisableFifoMode+0x66>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2224      	movs	r2, #36	; 0x24
 8008916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0201 	bic.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008938:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2220      	movs	r2, #32
 800894c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800897a:	2302      	movs	r3, #2
 800897c:	e02d      	b.n	80089da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2224      	movs	r2, #36	; 0x24
 800898a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0201 	bic.w	r2, r2, #1
 80089a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f850 	bl	8008a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e02d      	b.n	8008a56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2224      	movs	r2, #36	; 0x24
 8008a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0201 	bic.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f812 	bl	8008a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d108      	bne.n	8008a82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a80:	e031      	b.n	8008ae6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a82:	2308      	movs	r3, #8
 8008a84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a86:	2308      	movs	r3, #8
 8008a88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	0e5b      	lsrs	r3, r3, #25
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 0307 	and.w	r3, r3, #7
 8008a98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	0f5b      	lsrs	r3, r3, #29
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	7b3a      	ldrb	r2, [r7, #12]
 8008aae:	4911      	ldr	r1, [pc, #68]	; (8008af4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ab0:	5c8a      	ldrb	r2, [r1, r2]
 8008ab2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ab6:	7b3a      	ldrb	r2, [r7, #12]
 8008ab8:	490f      	ldr	r1, [pc, #60]	; (8008af8 <UARTEx_SetNbDataToProcess+0x98>)
 8008aba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	7b7a      	ldrb	r2, [r7, #13]
 8008acc:	4909      	ldr	r1, [pc, #36]	; (8008af4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ace:	5c8a      	ldrb	r2, [r1, r2]
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ad4:	7b7a      	ldrb	r2, [r7, #13]
 8008ad6:	4908      	ldr	r1, [pc, #32]	; (8008af8 <UARTEx_SetNbDataToProcess+0x98>)
 8008ad8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ada:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	08008bc8 	.word	0x08008bc8
 8008af8:	08008bd0 	.word	0x08008bd0

08008afc <memset>:
 8008afc:	4402      	add	r2, r0
 8008afe:	4603      	mov	r3, r0
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d100      	bne.n	8008b06 <memset+0xa>
 8008b04:	4770      	bx	lr
 8008b06:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0a:	e7f9      	b.n	8008b00 <memset+0x4>

08008b0c <__libc_init_array>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	4d0d      	ldr	r5, [pc, #52]	; (8008b44 <__libc_init_array+0x38>)
 8008b10:	4c0d      	ldr	r4, [pc, #52]	; (8008b48 <__libc_init_array+0x3c>)
 8008b12:	1b64      	subs	r4, r4, r5
 8008b14:	10a4      	asrs	r4, r4, #2
 8008b16:	2600      	movs	r6, #0
 8008b18:	42a6      	cmp	r6, r4
 8008b1a:	d109      	bne.n	8008b30 <__libc_init_array+0x24>
 8008b1c:	4d0b      	ldr	r5, [pc, #44]	; (8008b4c <__libc_init_array+0x40>)
 8008b1e:	4c0c      	ldr	r4, [pc, #48]	; (8008b50 <__libc_init_array+0x44>)
 8008b20:	f000 f826 	bl	8008b70 <_init>
 8008b24:	1b64      	subs	r4, r4, r5
 8008b26:	10a4      	asrs	r4, r4, #2
 8008b28:	2600      	movs	r6, #0
 8008b2a:	42a6      	cmp	r6, r4
 8008b2c:	d105      	bne.n	8008b3a <__libc_init_array+0x2e>
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b34:	4798      	blx	r3
 8008b36:	3601      	adds	r6, #1
 8008b38:	e7ee      	b.n	8008b18 <__libc_init_array+0xc>
 8008b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3e:	4798      	blx	r3
 8008b40:	3601      	adds	r6, #1
 8008b42:	e7f2      	b.n	8008b2a <__libc_init_array+0x1e>
 8008b44:	08008be0 	.word	0x08008be0
 8008b48:	08008be0 	.word	0x08008be0
 8008b4c:	08008be0 	.word	0x08008be0
 8008b50:	08008be4 	.word	0x08008be4

08008b54 <memcpy>:
 8008b54:	440a      	add	r2, r1
 8008b56:	4291      	cmp	r1, r2
 8008b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b5c:	d100      	bne.n	8008b60 <memcpy+0xc>
 8008b5e:	4770      	bx	lr
 8008b60:	b510      	push	{r4, lr}
 8008b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b6a:	4291      	cmp	r1, r2
 8008b6c:	d1f9      	bne.n	8008b62 <memcpy+0xe>
 8008b6e:	bd10      	pop	{r4, pc}

08008b70 <_init>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	bf00      	nop
 8008b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b76:	bc08      	pop	{r3}
 8008b78:	469e      	mov	lr, r3
 8008b7a:	4770      	bx	lr

08008b7c <_fini>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr
