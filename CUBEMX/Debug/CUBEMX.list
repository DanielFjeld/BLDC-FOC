
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f20c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  0800f3f0  0800f3f0  0001f3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd30  0800fd30  00020780  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd30  0800fd30  0001fd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd38  0800fd38  00020780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd38  0800fd38  0001fd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd3c  0800fd3c  0001fd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000780  20000000  0800fd40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001658  20000780  080104c0  00020780  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd8  080104c0  00021dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020780  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000207b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003278e  00000000  00000000  000207f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066e9  00000000  00000000  00052f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  00059670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019cb  00000000  00000000  0005b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002825b  00000000  00000000  0005cdf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a4ff  00000000  00000000  0008504e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed0d4  00000000  00000000  000bf54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062e0  00000000  00000000  001ac624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00013318  00000000  00000000  001b2904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001c5c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000780 	.word	0x20000780
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f3d4 	.word	0x0800f3d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000784 	.word	0x20000784
 800021c:	0800f3d4 	.word	0x0800f3d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 15
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 8000fde:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8000fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	f240 73e8 	movw	r3, #2024	; 0x7e8
 8000fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
	float temp = 0.0f;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	e01c      	b.n	800103e <Update_FIR_filter+0x6a>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 8001004:	f240 0300 	movw	r3, #0
 8001008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4413      	add	r3, r2
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	f240 73e8 	movw	r3, #2024	; 0x7e8
 800101a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4413      	add	r3, r2
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001034:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3301      	adds	r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b0e      	cmp	r3, #14
 8001042:	dddf      	ble.n	8001004 <Update_FIR_filter+0x30>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 8001044:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8001048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b0d      	cmp	r3, #13
 8001050:	d80c      	bhi.n	800106c <Update_FIR_filter+0x98>
 8001052:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8001056:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8001064:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e005      	b.n	8001078 <Update_FIR_filter+0xa4>
	else FIR_index = 0;
 800106c:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8001070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
	return temp;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <Update_FIR_filter2>:

#define FIR_FILTER_LENGTH2 15
uint8_t FIR_index2 = 0;
float FIR_Values2[FIR_FILTER_LENGTH2] = {0};
float FIR2_value = 0;
float Update_FIR_filter2(float input){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR2_value -= FIR_Values2[FIR_index2];
 8001096:	f640 0364 	movw	r3, #2148	; 0x864
 800109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109e:	ed93 7a00 	vldr	s14, [r3]
 80010a2:	f640 0324 	movw	r3, #2084	; 0x824
 80010a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	f640 0328 	movw	r3, #2088	; 0x828
 80010b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c2:	f640 0364 	movw	r3, #2148	; 0x864
 80010c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ca:	edc3 7a00 	vstr	s15, [r3]
	FIR_Values2[FIR_index2] = input/FIR_FILTER_LENGTH2;
 80010ce:	f640 0324 	movw	r3, #2084	; 0x824
 80010d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	ed97 7a01 	vldr	s14, [r7, #4]
 80010de:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	f640 0328 	movw	r3, #2088	; 0x828
 80010ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	edc3 7a00 	vstr	s15, [r3]
	FIR2_value += FIR_Values2[FIR_index2] ;
 80010f6:	f640 0324 	movw	r3, #2084	; 0x824
 80010fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	f640 0328 	movw	r3, #2088	; 0x828
 8001106:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	4413      	add	r3, r2
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	f640 0364 	movw	r3, #2148	; 0x864
 8001116:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001122:	f640 0364 	movw	r3, #2148	; 0x864
 8001126:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800112a:	edc3 7a00 	vstr	s15, [r3]
	if(FIR_index2 < FIR_FILTER_LENGTH2-1)FIR_index2++;
 800112e:	f640 0324 	movw	r3, #2084	; 0x824
 8001132:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b0d      	cmp	r3, #13
 800113a:	d80c      	bhi.n	8001156 <Update_FIR_filter2+0xca>
 800113c:	f640 0324 	movw	r3, #2084	; 0x824
 8001140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	f640 0324 	movw	r3, #2084	; 0x824
 800114e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e005      	b.n	8001162 <Update_FIR_filter2+0xd6>
	else FIR_index2 = 0;
 8001156:	f640 0324 	movw	r3, #2084	; 0x824
 800115a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
	return FIR2_value;
 8001162:	f640 0364 	movw	r3, #2148	; 0x864
 8001166:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	ee07 3a90 	vmov	s15, r3
}
 8001170:	eeb0 0a67 	vmov.f32	s0, s15
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG2
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif


    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00e      	beq.n	80011aa <Current_IRQ+0x2c>
 800118c:	2210      	movs	r2, #16
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f240 70ac 	movw	r0, #1964	; 0x7ac
 8001194:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001198:	f00b f8e3 	bl	800c362 <memcpy>
    else return;
    Current_Callback_flag = 1;
 800119c:	f240 739c 	movw	r3, #1948	; 0x79c
 80011a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e000      	b.n	80011ac <Current_IRQ+0x2e>
    else return;
 80011aa:	bf00      	nop
}
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 80011ba:	220c      	movs	r2, #12
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	f240 70bc 	movw	r0, #1980	; 0x7bc
 80011c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011c6:	f00b f8cc 	bl	800c362 <memcpy>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 80011da:	221c      	movs	r2, #28
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	f240 70c8 	movw	r0, #1992	; 0x7c8
 80011e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011e6:	f00b f8bc 	bl	800c362 <memcpy>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 80011fa:	2208      	movs	r2, #8
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	f640 0068 	movw	r0, #2152	; 0x868
 8001202:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001206:	f00b f8ac 	bl	800c362 <memcpy>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <check_value>:
	.max_warning = NAN,
	.min_warning = NAN,
};

//check value OK
void check_value(CAN_LIMITS* ptr, float value, uint32_t *warning_ptr, uint32_t *error_ptr, uint8_t bit_pos){
 8001212:	b480      	push	{r7}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
 8001218:	6178      	str	r0, [r7, #20]
 800121a:	ed87 0a04 	vstr	s0, [r7, #16]
 800121e:	60f9      	str	r1, [r7, #12]
 8001220:	60ba      	str	r2, [r7, #8]
 8001222:	71fb      	strb	r3, [r7, #7]
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	edd3 7a03 	vldr	s15, [r3, #12]
 800122a:	ed97 7a04 	vldr	s14, [r7, #16]
 800122e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	da09      	bge.n	800124c <check_value+0x3a>
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	edd3 7a01 	vldr	s15, [r3, #4]
 800123e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	d808      	bhi.n	800125e <check_value+0x4c>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	431a      	orrs	r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	601a      	str	r2, [r3, #0]
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	edd3 7a02 	vldr	s15, [r3, #8]
 8001264:	ed97 7a04 	vldr	s14, [r7, #16]
 8001268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	da0a      	bge.n	8001288 <check_value+0x76>
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ed97 7a04 	vldr	s14, [r7, #16]
 800127c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	d900      	bls.n	8001288 <check_value+0x76>
}
 8001286:	e008      	b.n	800129a <check_value+0x88>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	2101      	movs	r1, #1
 8001290:	fa01 f202 	lsl.w	r2, r1, r2
 8001294:	431a      	orrs	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <sqrtI>:

uint32_t sqrtI(uint32_t sqrtArg)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b087      	sub	sp, #28
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
uint32_t answer, x;
uint32_t temp;
if ( sqrtArg == 0 ) return 0; // undefined result
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <sqrtI+0x12>
 80012b4:	2300      	movs	r3, #0
 80012b6:	e027      	b.n	8001308 <sqrtI+0x62>
if ( sqrtArg == 1 ) return 1; // identity
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <sqrtI+0x1c>
 80012be:	2301      	movs	r3, #1
 80012c0:	e022      	b.n	8001308 <sqrtI+0x62>
answer = 0; // integer square root
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 80012c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	e016      	b.n	80012fc <sqrtI+0x56>
{ // 16 bit shift
answer |= x; // possible bit in root
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]
temp = answer * answer; // fast unsigned multiply
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fb03 f303 	mul.w	r3, r3, r3
 80012dc:	60fb      	str	r3, [r7, #12]
if (temp == sqrtArg) break; // exact, found it
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d00e      	beq.n	8001304 <sqrtI+0x5e>
if (temp > sqrtArg) answer ^= x; // too large, reverse bit
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d903      	bls.n	80012f6 <sqrtI+0x50>
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4053      	eors	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e5      	bne.n	80012ce <sqrtI+0x28>
 8001302:	e000      	b.n	8001306 <sqrtI+0x60>
if (temp == sqrtArg) break; // exact, found it
 8001304:	bf00      	nop
}
return answer; // approximate root
 8001306:	697b      	ldr	r3, [r7, #20]
}
 8001308:	4618      	mov	r0, r3
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <atan2_approximation2>:
#define PI_FLOAT     3.14159265f
#define PIBY2_FLOAT  1.5707963f
// |error| < 0.005
float atan2_approximation2( float y, float x )
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
 800131e:	edc7 0a00 	vstr	s1, [r7]
	if ( x == 0.0f )
 8001322:	edd7 7a00 	vldr	s15, [r7]
 8001326:	eef5 7a40 	vcmp.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d11f      	bne.n	8001370 <atan2_approximation2+0x5c>
	{
		if ( y > 0.0f ) return PIBY2_FLOAT;
 8001330:	edd7 7a01 	vldr	s15, [r7, #4]
 8001334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	dd06      	ble.n	800134c <atan2_approximation2+0x38>
 800133e:	f640 73da 	movw	r3, #4058	; 0xfda
 8001342:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	e08e      	b.n	800146a <atan2_approximation2+0x156>
		if ( y == 0.0f ) return 0.0f;
 800134c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001350:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d103      	bne.n	8001362 <atan2_approximation2+0x4e>
 800135a:	2300      	movs	r3, #0
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	e083      	b.n	800146a <atan2_approximation2+0x156>
		return -PIBY2_FLOAT;
 8001362:	f640 73da 	movw	r3, #4058	; 0xfda
 8001366:	f6cb 73c9 	movt	r3, #49097	; 0xbfc9
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	e07c      	b.n	800146a <atan2_approximation2+0x156>
	}
	float atan;
	float z = y/x;
 8001370:	edd7 6a01 	vldr	s13, [r7, #4]
 8001374:	ed97 7a00 	vldr	s14, [r7]
 8001378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800137c:	edc7 7a02 	vstr	s15, [r7, #8]
	if ( fabs( z ) < 1.0f )
 8001380:	edd7 7a02 	vldr	s15, [r7, #8]
 8001384:	eef0 7ae7 	vabs.f32	s15, s15
 8001388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800138c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	d53b      	bpl.n	800140e <atan2_approximation2+0xfa>
	{
		atan = z/(1.0f + 0.28f*z*z);
 8001396:	edd7 7a02 	vldr	s15, [r7, #8]
 800139a:	f645 4329 	movw	r3, #23593	; 0x5c29
 800139e:	f6c3 638f 	movt	r3, #16015	; 0x3e8f
 80013a2:	ee07 3a10 	vmov	s14, r3
 80013a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013ba:	edd7 6a02 	vldr	s13, [r7, #8]
 80013be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c2:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( x < 0.0f )
 80013c6:	edd7 7a00 	vldr	s15, [r7]
 80013ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d548      	bpl.n	8001466 <atan2_approximation2+0x152>
		{
			if ( y < 0.0f ) return atan - PI_FLOAT;
 80013d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	d50a      	bpl.n	80013f8 <atan2_approximation2+0xe4>
 80013e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e6:	f640 73db 	movw	r3, #4059	; 0xfdb
 80013ea:	f2c4 0349 	movt	r3, #16457	; 0x4049
 80013ee:	ee07 3a10 	vmov	s14, r3
 80013f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013f6:	e038      	b.n	800146a <atan2_approximation2+0x156>
			return atan + PI_FLOAT;
 80013f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013fc:	f640 73db 	movw	r3, #4059	; 0xfdb
 8001400:	f2c4 0349 	movt	r3, #16457	; 0x4049
 8001404:	ee07 3a10 	vmov	s14, r3
 8001408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800140c:	e02d      	b.n	800146a <atan2_approximation2+0x156>
		}
	}
	else
	{
		atan = PIBY2_FLOAT - z/(z*z + 0.28f);
 800140e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001412:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001416:	f645 4329 	movw	r3, #23593	; 0x5c29
 800141a:	f6c3 638f 	movt	r3, #16015	; 0x3e8f
 800141e:	ee07 3a10 	vmov	s14, r3
 8001422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001426:	edd7 6a02 	vldr	s13, [r7, #8]
 800142a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800142e:	f640 73da 	movw	r3, #4058	; 0xfda
 8001432:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 8001436:	ee07 3a10 	vmov	s14, r3
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( y < 0.0f ) return atan - PI_FLOAT;
 8001442:	edd7 7a01 	vldr	s15, [r7, #4]
 8001446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d50a      	bpl.n	8001466 <atan2_approximation2+0x152>
 8001450:	edd7 7a03 	vldr	s15, [r7, #12]
 8001454:	f640 73db 	movw	r3, #4059	; 0xfdb
 8001458:	f2c4 0349 	movt	r3, #16457	; 0x4049
 800145c:	ee07 3a10 	vmov	s14, r3
 8001460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001464:	e001      	b.n	800146a <atan2_approximation2+0x156>
	}
	return atan;
 8001466:	edd7 7a03 	vldr	s15, [r7, #12]
}
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <BLDC_main>:


Flash *storage;

#define PID_TIMING 10
void BLDC_main(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	Flash_init();
 800147e:	f002 fb7a 	bl	8003b76 <Flash_init>
	storage = Flash_get_values();
 8001482:	f002 fbc3 	bl	8003c0c <Flash_get_values>
 8001486:	4602      	mov	r2, r0
 8001488:	f640 2300 	movw	r3, #2560	; 0xa00
 800148c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001490:	601a      	str	r2, [r3, #0]

	HAL_Delay(100);
 8001492:	2064      	movs	r0, #100	; 0x64
 8001494:	f004 fd66 	bl	8005f64 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, PID_TIMING); //40us = 25kHz
 8001498:	210a      	movs	r1, #10
 800149a:	f640 00f0 	movw	r0, #2288	; 0x8f0
 800149e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014a2:	f002 fd2c 	bl	8003efe <SetSampleTime>
	SetTunings(&Current_PID, storage->Current_kp, storage->Current_ki, storage->Current_kd, 1);
 80014a6:	f640 2300 	movw	r3, #2560	; 0xa00
 80014aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80014b4:	f640 2300 	movw	r3, #2560	; 0xa00
 80014b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80014c2:	f640 2300 	movw	r3, #2560	; 0xa00
 80014c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80014d0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80014d4:	eeb0 1a66 	vmov.f32	s2, s13
 80014d8:	eef0 0a47 	vmov.f32	s1, s14
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	f640 00f0 	movw	r0, #2288	; 0x8f0
 80014e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014e8:	f002 fc4c 	bl	8003d84 <SetTunings>
	SetOutputLimits(&Current_PID, -1500, 1500);
 80014ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f0:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
 80014f4:	ee00 3a90 	vmov	s1, r3
 80014f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014fc:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
 8001500:	ee00 3a10 	vmov	s0, r3
 8001504:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001508:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800150c:	f002 fd2b 	bl	8003f66 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 8001510:	2100      	movs	r1, #0
 8001512:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001516:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800151a:	f002 fdd4 	bl	80040c6 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 800151e:	2101      	movs	r1, #1
 8001520:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001524:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001528:	f002 fd79 	bl	800401e <SetMode>
	Initialize(&Current_PID);
 800152c:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001530:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001534:	f002 fd95 	bl	8004062 <Initialize>

	SetSampleTime(&Velocity_PID, PID_TIMING); //100s = 10kHz
 8001538:	210a      	movs	r1, #10
 800153a:	f640 1030 	movw	r0, #2352	; 0x930
 800153e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001542:	f002 fcdc 	bl	8003efe <SetSampleTime>
	SetTunings(&Velocity_PID, storage->Velocity_kp, storage->Velocity_ki, storage->Velocity_kd, 1);
 8001546:	f640 2300 	movw	r3, #2560	; 0xa00
 800154a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001554:	f640 2300 	movw	r3, #2560	; 0xa00
 8001558:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001562:	f640 2300 	movw	r3, #2560	; 0xa00
 8001566:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001570:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001574:	eeb0 1a66 	vmov.f32	s2, s13
 8001578:	eef0 0a47 	vmov.f32	s1, s14
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	f640 1030 	movw	r0, #2352	; 0x930
 8001584:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001588:	f002 fbfc 	bl	8003d84 <SetTunings>
	SetOutputLimits(&Velocity_PID, (storage->Current_limit*-1.0f), (storage->Current_limit));
 800158c:	f640 2300 	movw	r3, #2560	; 0xa00
 8001590:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a0:	eef1 7a67 	vneg.f32	s15, s15
 80015a4:	f640 2300 	movw	r3, #2560	; 0xa00
 80015a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b0:	ee07 3a10 	vmov	s14, r3
 80015b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80015b8:	eef0 0a47 	vmov.f32	s1, s14
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	f640 1030 	movw	r0, #2352	; 0x930
 80015c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015c8:	f002 fccd 	bl	8003f66 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80015cc:	2100      	movs	r1, #0
 80015ce:	f640 1030 	movw	r0, #2352	; 0x930
 80015d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015d6:	f002 fd76 	bl	80040c6 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80015da:	2101      	movs	r1, #1
 80015dc:	f640 1030 	movw	r0, #2352	; 0x930
 80015e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015e4:	f002 fd1b 	bl	800401e <SetMode>
	Initialize(&Velocity_PID);
 80015e8:	f640 1030 	movw	r0, #2352	; 0x930
 80015ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015f0:	f002 fd37 	bl	8004062 <Initialize>

	SetSampleTime(&Angle_PID, PID_TIMING); //100s = 10kHz
 80015f4:	210a      	movs	r1, #10
 80015f6:	f640 1070 	movw	r0, #2416	; 0x970
 80015fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015fe:	f002 fc7e 	bl	8003efe <SetSampleTime>
	SetTunings(&Angle_PID, storage->Angle_kp, storage->Angle_ki, storage->Angle_kd, 1);
 8001602:	f640 2300 	movw	r3, #2560	; 0xa00
 8001606:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001610:	f640 2300 	movw	r3, #2560	; 0xa00
 8001614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800161e:	f640 2300 	movw	r3, #2560	; 0xa00
 8001622:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800162c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001630:	eeb0 1a66 	vmov.f32	s2, s13
 8001634:	eef0 0a47 	vmov.f32	s1, s14
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	f640 1070 	movw	r0, #2416	; 0x970
 8001640:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001644:	f002 fb9e 	bl	8003d84 <SetTunings>
	SetOutputLimits(&Angle_PID, (storage->Velocity_limit*-1.0f), (storage->Velocity_limit));
 8001648:	f640 2300 	movw	r3, #2560	; 0xa00
 800164c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165c:	eef1 7a67 	vneg.f32	s15, s15
 8001660:	f640 2300 	movw	r3, #2560	; 0xa00
 8001664:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	ee07 3a10 	vmov	s14, r3
 8001670:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001674:	eef0 0a47 	vmov.f32	s1, s14
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	f640 1070 	movw	r0, #2416	; 0x970
 8001680:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001684:	f002 fc6f 	bl	8003f66 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8001688:	2100      	movs	r1, #0
 800168a:	f640 1070 	movw	r0, #2416	; 0x970
 800168e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001692:	f002 fd18 	bl	80040c6 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8001696:	2101      	movs	r1, #1
 8001698:	f640 1070 	movw	r0, #2416	; 0x970
 800169c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016a0:	f002 fcbd 	bl	800401e <SetMode>
	Initialize(&Angle_PID);
 80016a4:	f640 1070 	movw	r0, #2416	; 0x970
 80016a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016ac:	f002 fcd9 	bl	8004062 <Initialize>

	SetSampleTime(&Current_PID_offset, PID_TIMING); //100s = 10kHz
 80016b0:	210a      	movs	r1, #10
 80016b2:	f640 00b0 	movw	r0, #2224	; 0x8b0
 80016b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016ba:	f002 fc20 	bl	8003efe <SetSampleTime>
	SetTunings(&Current_PID_offset, storage->Current_offset_kp, storage->Current_offset_ki, storage->Current_offset_kd, 1);
 80016be:	f640 2300 	movw	r3, #2560	; 0xa00
 80016c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016cc:	f640 2300 	movw	r3, #2560	; 0xa00
 80016d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80016da:	f640 2300 	movw	r3, #2560	; 0xa00
 80016de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80016e8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80016ec:	eeb0 1a66 	vmov.f32	s2, s13
 80016f0:	eef0 0a47 	vmov.f32	s1, s14
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	f640 00b0 	movw	r0, #2224	; 0x8b0
 80016fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001700:	f002 fb40 	bl	8003d84 <SetTunings>
	SetOutputLimits(&Current_PID_offset, -1500, 1500);
 8001704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001708:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
 800170c:	ee00 3a90 	vmov	s1, r3
 8001710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001714:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
 8001718:	ee00 3a10 	vmov	s0, r3
 800171c:	f640 00b0 	movw	r0, #2224	; 0x8b0
 8001720:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001724:	f002 fc1f 	bl	8003f66 <SetOutputLimits>
	SetControllerDirection(&Current_PID_offset, DIRECT);
 8001728:	2100      	movs	r1, #0
 800172a:	f640 00b0 	movw	r0, #2224	; 0x8b0
 800172e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001732:	f002 fcc8 	bl	80040c6 <SetControllerDirection>
	SetMode(&Current_PID_offset,  AUTOMATIC);
 8001736:	2101      	movs	r1, #1
 8001738:	f640 00b0 	movw	r0, #2224	; 0x8b0
 800173c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001740:	f002 fc6d 	bl	800401e <SetMode>
	Initialize(&Current_PID_offset);
 8001744:	f640 00b0 	movw	r0, #2224	; 0x8b0
 8001748:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800174c:	f002 fc89 	bl	8004062 <Initialize>


	//setup current
	current_init((void*)&Current_IRQ);
 8001750:	f241 107f 	movw	r0, #4479	; 0x117f
 8001754:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001758:	f002 fe0c 	bl	8004374 <current_init>
	HAL_Delay(1000);
 800175c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001760:	f004 fc00 	bl	8005f64 <HAL_Delay>
	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 8001764:	f241 10d3 	movw	r0, #4563	; 0x11d3
 8001768:	f6c0 0000 	movt	r0, #2048	; 0x800
 800176c:	f001 ff9a 	bl	80036a4 <ORBIS_init>

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 8001770:	f241 10b3 	movw	r0, #4531	; 0x11b3
 8001774:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001778:	f002 fe29 	bl	80043ce <voltage_temperature_init>
	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 800177c:	f241 12f3 	movw	r2, #4595	; 0x11f3
 8001780:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001784:	2136      	movs	r1, #54	; 0x36
 8001786:	f641 0018 	movw	r0, #6168	; 0x1818
 800178a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800178e:	f003 f9a5 	bl	8004adc <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_IRQ);

	FDCAN_Start(&hfdcan1);
 8001792:	f641 0018 	movw	r0, #6168	; 0x1818
 8001796:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800179a:	f003 f984 	bl	8004aa6 <FDCAN_Start>

	//--------------setup PWM------------------
	electrical_offset = storage->electrical_offset;
 800179e:	f640 2300 	movw	r3, #2560	; 0xa00
 80017a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017aa:	f640 634c 	movw	r3, #3660	; 0xe4c
 80017ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017b2:	601a      	str	r2, [r3, #0]
	PHASE_ORDER = storage->PHASE_ORDER;
 80017b4:	f640 2300 	movw	r3, #2560	; 0xa00
 80017b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80017c2:	f640 6348 	movw	r3, #3656	; 0xe48
 80017c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017ca:	701a      	strb	r2, [r3, #0]
	mech_offset = storage->mech_offset;//storage->mech_offset;
 80017cc:	f640 2300 	movw	r3, #2560	; 0xa00
 80017d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 24a8 	ldrh.w	r2, [r3, #1192]	; 0x4a8
 80017da:	f640 13b0 	movw	r3, #2480	; 0x9b0
 80017de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017e2:	801a      	strh	r2, [r3, #0]
	if(mech_offset > 400)mech_offset = 0;
 80017e4:	f640 13b0 	movw	r3, #2480	; 0x9b0
 80017e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80017f2:	d905      	bls.n	8001800 <BLDC_main+0x388>
 80017f4:	f640 13b0 	movw	r3, #2480	; 0x9b0
 80017f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017fc:	2200      	movs	r2, #0
 80017fe:	801a      	strh	r2, [r3, #0]
	flash_nan = 0;
 8001800:	f640 13b2 	movw	r3, #2482	; 0x9b2
 8001804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SIZE*NPP; i++){
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	e018      	b.n	8001844 <BLDC_main+0x3cc>
		if (isnan(storage->error_filt[i]))flash_nan = 1;
 8001812:	f640 2300 	movw	r3, #2560	; 0xa00
 8001816:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	331a      	adds	r3, #26
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	eef4 7a67 	vcmp.f32	s15, s15
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	d705      	bvc.n	800183e <BLDC_main+0x3c6>
 8001832:	f640 13b2 	movw	r3, #2482	; 0x9b2
 8001836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SIZE*NPP; i++){
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3301      	adds	r3, #1
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800184a:	dbe2      	blt.n	8001812 <BLDC_main+0x39a>
	}
	if(!flash_nan)memcpy(error_filt, storage->error_filt,sizeof(error_filt));
 800184c:	f640 13b2 	movw	r3, #2482	; 0x9b2
 8001850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10e      	bne.n	8001878 <BLDC_main+0x400>
 800185a:	f640 2300 	movw	r3, #2560	; 0xa00
 800185e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3368      	adds	r3, #104	; 0x68
 8001866:	f44f 6288 	mov.w	r2, #1088	; 0x440
 800186a:	4619      	mov	r1, r3
 800186c:	f640 2008 	movw	r0, #2568	; 0xa08
 8001870:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001874:	f00a fd75 	bl	800c362 <memcpy>


	uint32_t test = 1499;
 8001878:	f240 53db 	movw	r3, #1499	; 0x5db
 800187c:	603b      	str	r3, [r7, #0]
	CTRL_init_PWM(&test);
 800187e:	463b      	mov	r3, r7
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fe6b 	bl	800255c <CTRL_init_PWM>
	Status = BLDC_CALIBRATING_ENCODER;
	#endif


	while(1){
		if (Status == BLDC_CALIBRATING_ENCODER){
 8001886:	f640 13f4 	movw	r3, #2548	; 0x9f4
 800188a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d1f8      	bne.n	8001886 <BLDC_main+0x40e>
			HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001894:	2201      	movs	r2, #1
 8001896:	2140      	movs	r1, #64	; 0x40
 8001898:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800189c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80018a0:	f006 fc7c 	bl	800819c <HAL_GPIO_WritePin>
			order_phases(&IRQ_Encoders, &IRQ_Current);
 80018a4:	f240 71ac 	movw	r1, #1964	; 0x7ac
 80018a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80018ac:	f240 70c8 	movw	r0, #1992	; 0x7c8
 80018b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80018b4:	f001 f889 	bl	80029ca <order_phases>
			calibrate(&IRQ_Encoders, &IRQ_Current);
 80018b8:	f240 71ac 	movw	r1, #1964	; 0x7ac
 80018bc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80018c0:	f240 70c8 	movw	r0, #1992	; 0x7c8
 80018c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80018c8:	f001 fa16 	bl	8002cf8 <calibrate>

			//start calibration
			storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 80018cc:	f240 73c8 	movw	r3, #1992	; 0x7c8
 80018d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80018da:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80018de:	fba3 2302 	umull	r2, r3, r3, r2
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	f246 02b7 	movw	r2, #24759	; 0x60b7
 80018ea:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 80018ee:	fb82 1203 	smull	r1, r2, r2, r3
 80018f2:	441a      	add	r2, r3
 80018f4:	1211      	asrs	r1, r2, #8
 80018f6:	17da      	asrs	r2, r3, #31
 80018f8:	1a8a      	subs	r2, r1, r2
 80018fa:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80018fe:	fb01 f202 	mul.w	r2, r1, r2
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	b21a      	sxth	r2, r3
 8001906:	f640 2300 	movw	r3, #2560	; 0xa00
 800190a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b292      	uxth	r2, r2
 8001912:	f8a3 24a8 	strh.w	r2, [r3, #1192]	; 0x4a8
			storage->electrical_offset = electrical_offset;
 8001916:	f640 2300 	movw	r3, #2560	; 0xa00
 800191a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	f640 634c 	movw	r3, #3660	; 0xe4c
 8001924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6653      	str	r3, [r2, #100]	; 0x64
			storage->PHASE_ORDER = PHASE_ORDER;
 800192c:	f640 2300 	movw	r3, #2560	; 0xa00
 8001930:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f640 6348 	movw	r3, #3656	; 0xe48
 800193a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
			memcpy(storage->error_filt,error_filt,sizeof(error_filt));
 8001944:	f640 2300 	movw	r3, #2560	; 0xa00
 8001948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3368      	adds	r3, #104	; 0x68
 8001950:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001954:	f640 2108 	movw	r1, #2568	; 0xa08
 8001958:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800195c:	4618      	mov	r0, r3
 800195e:	f00a fd00 	bl	800c362 <memcpy>
			Flash_save();
 8001962:	f002 f946 	bl	8003bf2 <Flash_save>
			Status = BLDC_STOPPED_WITH_BREAK;
 8001966:	f640 13f4 	movw	r3, #2548	; 0x9f4
 800196a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
		if (Status == BLDC_CALIBRATING_ENCODER){
 8001972:	e788      	b.n	8001886 <BLDC_main+0x40e>

08001974 <run>:
		}
	}
}

void run(){
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af02      	add	r7, sp, #8
	#ifdef RUNNING_LED_DEBUG
//	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
//	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
	#endif

	memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 800197a:	f640 12b4 	movw	r2, #2484	; 0x9b4
 800197e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001982:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001986:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800198a:	4614      	mov	r4, r2
 800198c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800198e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8001992:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001996:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800199a:	f240 73bc 	movw	r3, #1980	; 0x7bc
 800199e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019a2:	4614      	mov	r4, r2
 80019a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 80019ac:	f640 12d0 	movw	r2, #2512	; 0x9d0
 80019b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019b4:	f240 73c8 	movw	r3, #1992	; 0x7c8
 80019b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019bc:	4614      	mov	r4, r2
 80019be:	461d      	mov	r5, r3
 80019c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 80019cc:	f640 12ec 	movw	r2, #2540	; 0x9ec
 80019d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019d4:	f640 0368 	movw	r3, #2152	; 0x868
 80019d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019e0:	e882 0003 	stmia.w	r2, {r0, r1}

	//FSM
	if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 80019e4:	f640 13f4 	movw	r3, #2548	; 0x9f4
 80019e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10d      	bne.n	8001a0e <run+0x9a>
 80019f2:	f640 13ec 	movw	r3, #2540	; 0x9ec
 80019f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d106      	bne.n	8001a0e <run+0x9a>
 8001a00:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8001a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a08:	2202      	movs	r2, #2
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e07c      	b.n	8001b08 <run+0x194>
	else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8001a0e:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8001a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10d      	bne.n	8001a38 <run+0xc4>
 8001a1c:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8001a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d106      	bne.n	8001a38 <run+0xc4>
 8001a2a:	f240 73a8 	movw	r3, #1960	; 0x7a8
 8001a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e067      	b.n	8001b08 <run+0x194>
	else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 8001a38:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8001a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d122      	bne.n	8001a8c <run+0x118>
 8001a46:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8001a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d11b      	bne.n	8001a8c <run+0x118>
		Status = BLDC_RUNNING;
 8001a54:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8001a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	701a      	strb	r2, [r3, #0]
		SetMode(&Current_PID,  AUTOMATIC);
 8001a60:	2101      	movs	r1, #1
 8001a62:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001a66:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001a6a:	f002 fad8 	bl	800401e <SetMode>
		SetMode(&Velocity_PID,  AUTOMATIC);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	f640 1030 	movw	r0, #2352	; 0x930
 8001a74:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001a78:	f002 fad1 	bl	800401e <SetMode>
		SetMode(&Angle_PID,  AUTOMATIC);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	f640 1070 	movw	r0, #2416	; 0x970
 8001a82:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001a86:	f002 faca 	bl	800401e <SetMode>
 8001a8a:	e03d      	b.n	8001b08 <run+0x194>
	}
	else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 8001a8c:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8001a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d122      	bne.n	8001ae0 <run+0x16c>
 8001a9a:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8001a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d11b      	bne.n	8001ae0 <run+0x16c>
		Status = BLDC_STOPPED_WITH_BREAK;
 8001aa8:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8001aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
		SetMode(&Current_PID,  MANUAL);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001aba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001abe:	f002 faae 	bl	800401e <SetMode>
		SetMode(&Velocity_PID,  MANUAL);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	f640 1030 	movw	r0, #2352	; 0x930
 8001ac8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001acc:	f002 faa7 	bl	800401e <SetMode>
		SetMode(&Angle_PID,  MANUAL);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f640 1070 	movw	r0, #2416	; 0x970
 8001ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001ada:	f002 faa0 	bl	800401e <SetMode>
 8001ade:	e013      	b.n	8001b08 <run+0x194>
	}
	else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8001ae0:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8001ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d10c      	bne.n	8001b08 <run+0x194>
 8001aee:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8001af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <run+0x194>
 8001afc:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8001b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]


	//----------------------position-----------------
	if (last_pos_enc > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8001b08:	f640 13f8 	movw	r3, #2552	; 0x9f8
 8001b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f641 63b0 	movw	r3, #7856	; 0x1eb0
 8001b16:	f2c0 0304 	movt	r3, #4
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d916      	bls.n	8001b4c <run+0x1d8>
 8001b1e:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f645 738f 	movw	r3, #24463	; 0x5f8f
 8001b2c:	f2c0 0301 	movt	r3, #1
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d80b      	bhi.n	8001b4c <run+0x1d8>
 8001b34:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e020      	b.n	8001b8e <run+0x21a>
	else if (last_pos_enc < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8001b4c:	f640 13f8 	movw	r3, #2552	; 0x9f8
 8001b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f645 738f 	movw	r3, #24463	; 0x5f8f
 8001b5a:	f2c0 0301 	movt	r3, #1
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d815      	bhi.n	8001b8e <run+0x21a>
 8001b62:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f641 63b0 	movw	r3, #7856	; 0x1eb0
 8001b70:	f2c0 0304 	movt	r3, #4
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d90a      	bls.n	8001b8e <run+0x21a>
 8001b78:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b8c:	601a      	str	r2, [r3, #0]
	last_pos_enc = IRQ_Encoders_BUFF.Encoder1_pos;
 8001b8e:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	f640 13f8 	movw	r3, #2552	; 0x9f8
 8001b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ba0:	601a      	str	r2, [r3, #0]

	//------------------calculate PID----------------------- 6.52us
	float d;
	float q;
	int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 8001ba2:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001bb0:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8001bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	f246 02b7 	movw	r2, #24759	; 0x60b7
 8001bc0:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 8001bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc8:	441a      	add	r2, r3
 8001bca:	1211      	asrs	r1, r2, #8
 8001bcc:	17da      	asrs	r2, r3, #31
 8001bce:	1a8a      	subs	r2, r1, r2
 8001bd0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001bd4:	fb01 f202 	mul.w	r2, r1, r2
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 8001bdc:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001be0:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8001be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bf0:	f246 02b7 	movw	r2, #24759	; 0x60b7
 8001bf4:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 8001bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bfc:	441a      	add	r2, r3
 8001bfe:	1211      	asrs	r1, r2, #8
 8001c00:	17da      	asrs	r2, r3, #31
 8001c02:	1a8a      	subs	r2, r1, r2
 8001c04:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001c08:	fb01 f202 	mul.w	r2, r1, r2
 8001c0c:	1a9a      	subs	r2, r3, r2
 8001c0e:	4613      	mov	r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	461a      	mov	r2, r3
 8001c18:	f246 03b7 	movw	r3, #24759	; 0x60b7
 8001c1c:	f2cb 630b 	movt	r3, #46603	; 0xb60b
 8001c20:	fb83 1302 	smull	r1, r3, r3, r2
 8001c24:	4413      	add	r3, r2
 8001c26:	1219      	asrs	r1, r3, #8
 8001c28:	17d3      	asrs	r3, r2, #31
 8001c2a:	1aca      	subs	r2, r1, r3
 8001c2c:	f647 0379 	movw	r3, #30841	; 0x7879
 8001c30:	f6c7 0378 	movt	r3, #30840	; 0x7878
 8001c34:	fb83 1302 	smull	r1, r3, r3, r2
 8001c38:	11d9      	asrs	r1, r3, #7
 8001c3a:	17d3      	asrs	r3, r2, #31
 8001c3c:	1ac9      	subs	r1, r1, r3
 8001c3e:	460b      	mov	r3, r1
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	440b      	add	r3, r1
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	1ad1      	subs	r1, r2, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	853b      	strh	r3, [r7, #40]	; 0x28
	int32_t error_pos = (int32_t)(((error_filt[index_error2] - error_filt[0])/**NPP*/)); //((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 8001c4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c4e:	f640 2308 	movw	r3, #2568	; 0xa08
 8001c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	f640 2308 	movw	r3, #2568	; 0xa08
 8001c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c72:	ee17 3a90 	vmov	r3, s15
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24

	//mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0) + (int32_t)electrical_offset
	int16_t angle = (mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)  + error_pos  + (int32_t)electrical_offset + 2*360)%360;
 8001c78:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fbd7 	bl	8002438 <mech_to_el_deg>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	441a      	add	r2, r3
 8001c92:	f640 634c 	movw	r3, #3660	; 0xe4c
 8001c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca2:	ee17 3a90 	vmov	r3, s15
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001cac:	f246 02b7 	movw	r2, #24759	; 0x60b7
 8001cb0:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 8001cb4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb8:	441a      	add	r2, r3
 8001cba:	1211      	asrs	r1, r2, #8
 8001cbc:	17da      	asrs	r2, r3, #31
 8001cbe:	1a8a      	subs	r2, r1, r2
 8001cc0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001cc4:	fb01 f202 	mul.w	r2, r1, r2
 8001cc8:	1a9a      	subs	r2, r3, r2
 8001cca:	4613      	mov	r3, r2
 8001ccc:	847b      	strh	r3, [r7, #34]	; 0x22
	dq0((float)angle*3.14159264f/180.0f, ((float)IRQ_Current_BUFF.Current_M3/1000.0f), ((float)IRQ_Current_BUFF.Current_M2/1000.0f), ((float)IRQ_Current_BUFF.Current_M1/1000.0f), &d, &q);
 8001cce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cda:	f640 73db 	movw	r3, #4059	; 0xfdb
 8001cde:	f2c4 0349 	movt	r3, #16457	; 0x4049
 8001ce2:	ee07 3a10 	vmov	s14, r3
 8001ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cea:	2300      	movs	r3, #0
 8001cec:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8001cf0:	ee06 3a90 	vmov	s13, r3
 8001cf4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cf8:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001d10:	ee06 3a10 	vmov	s12, r3
 8001d14:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d18:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001d30:	ee05 3a90 	vmov	s11, r3
 8001d34:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001d38:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001d50:	ee05 3a10 	vmov	s10, r3
 8001d54:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8001d58:	1d3a      	adds	r2, r7, #4
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	eef0 1a65 	vmov.f32	s3, s11
 8001d66:	eeb0 1a46 	vmov.f32	s2, s12
 8001d6a:	eef0 0a66 	vmov.f32	s1, s13
 8001d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d72:	f002 fdf7 	bl	8004964 <dq0>

	float q_lpf = Update_FIR_filter(q);
 8001d76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7e:	f7ff f929 	bl	8000fd4 <Update_FIR_filter>
 8001d82:	ed87 0a07 	vstr	s0, [r7, #28]
	float d_lpf = Update_FIR_filter2(d);
 8001d86:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8e:	f7ff f97d 	bl	800108c <Update_FIR_filter2>
 8001d92:	ed87 0a06 	vstr	s0, [r7, #24]

	//------------------calculate PID----------------------- 6.52us
	Angle_PID.Input = ((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000.0f + position_overflow*360.0f + storage->Encoder1_offset;
 8001d96:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da8:	2300      	movs	r3, #0
 8001daa:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001dae:	ee06 3a90 	vmov	s13, r3
 8001db2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001db6:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 8001dce:	ee06 3a90 	vmov	s13, r3
 8001dd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dda:	f640 2300 	movw	r3, #2560	; 0xa00
 8001dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dec:	f640 1370 	movw	r3, #2416	; 0x970
 8001df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001df4:	edc3 7a00 	vstr	s15, [r3]
	Velocity_PID.Input = ((float)(IRQ_Encoders_BUFF.Velocity))/1000.0f;
 8001df8:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001e10:	ee06 3a90 	vmov	s13, r3
 8001e14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e18:	f640 1330 	movw	r3, #2352	; 0x930
 8001e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e20:	edc3 7a00 	vstr	s15, [r3]
	Current_PID.Input = q_lpf;
 8001e24:	f640 03f0 	movw	r3, #2288	; 0x8f0
 8001e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	601a      	str	r2, [r3, #0]
	Current_PID_offset.Input = d_lpf;
 8001e30:	f640 03b0 	movw	r3, #2224	; 0x8b0
 8001e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	601a      	str	r2, [r3, #0]

	Angle_PID.Setpoint = 5*360;
 8001e3c:	f640 1370 	movw	r3, #2416	; 0x970
 8001e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e44:	2200      	movs	r2, #0
 8001e46:	f2c4 42e1 	movt	r2, #17633	; 0x44e1
 8001e4a:	609a      	str	r2, [r3, #8]
//	Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
	Compute(&Angle_PID);
 8001e4c:	f640 1070 	movw	r0, #2416	; 0x970
 8001e50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001e54:	f001 fee5 	bl	8003c22 <Compute>

//	Velocity_PID.Setpoint = 20.0;
	Velocity_PID.Setpoint = Angle_PID.Output;
 8001e58:	f640 1370 	movw	r3, #2416	; 0x970
 8001e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	f640 1330 	movw	r3, #2352	; 0x930
 8001e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e6a:	609a      	str	r2, [r3, #8]
	Compute(&Velocity_PID);
 8001e6c:	f640 1030 	movw	r0, #2352	; 0x930
 8001e70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001e74:	f001 fed5 	bl	8003c22 <Compute>
	float weight = 5.2; //amps at 90 degrees;
	Current_PID.Setpoint = weight*(sinf((((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000+storage->Encoder1_offset)*3.14159264/180));
	#else

//		Current_PID.Setpoint = 0.3;
	Current_PID.Setpoint = Velocity_PID.Output;
 8001e78:	f640 1330 	movw	r3, #2352	; 0x930
 8001e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	f640 03f0 	movw	r3, #2288	; 0x8f0
 8001e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e8a:	609a      	str	r2, [r3, #8]

	#endif
	Compute(&Current_PID);
 8001e8c:	f640 00f0 	movw	r0, #2288	; 0x8f0
 8001e90:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001e94:	f001 fec5 	bl	8003c22 <Compute>

	Current_PID_offset.Setpoint = 0;
 8001e98:	f640 03b0 	movw	r3, #2224	; 0x8b0
 8001e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
	Compute(&Current_PID_offset);
 8001ea4:	f640 00b0 	movw	r0, #2224	; 0x8b0
 8001ea8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001eac:	f001 feb9 	bl	8003c22 <Compute>



	//-----------------set PWM--------------------- 3.12us
	float V_d = Current_PID_offset.Output;
 8001eb0:	f640 03b0 	movw	r3, #2224	; 0x8b0
 8001eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	617b      	str	r3, [r7, #20]
	float V_q = Current_PID.Output;
 8001ebc:	f640 03f0 	movw	r3, #2288	; 0x8f0
 8001ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	613b      	str	r3, [r7, #16]
	float theta = atan2_approximation2(V_q, V_d)*180.0f/3.14159264f;
 8001ec8:	edd7 0a05 	vldr	s1, [r7, #20]
 8001ecc:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ed0:	f7ff fa20 	bl	8001314 <atan2_approximation2>
 8001ed4:	eef0 7a40 	vmov.f32	s15, s0
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8001ede:	ee07 3a10 	vmov	s14, r3
 8001ee2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ee6:	f640 73db 	movw	r3, #4059	; 0xfdb
 8001eea:	f2c4 0349 	movt	r3, #16457	; 0x4049
 8001eee:	ee06 3a90 	vmov	s13, r3
 8001ef2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef6:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t mag = sqrtI((uint32_t)(V_q*V_q+V_d*V_d));
 8001efa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001efe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f12:	ee17 0a90 	vmov	r0, s15
 8001f16:	f7ff f9c6 	bl	80012a6 <sqrtI>
 8001f1a:	62f8      	str	r0, [r7, #44]	; 0x2c
	mag *= 0.7;
 8001f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f1e:	f7fe fb19 	bl	8000554 <__aeabi_ui2d>
 8001f22:	f04f 3266 	mov.w	r2, #1717986918	; 0x66666666
 8001f26:	f246 6366 	movw	r3, #26214	; 0x6666
 8001f2a:	f6c3 73e6 	movt	r3, #16358	; 0x3fe6
 8001f2e:	f7fe fb8b 	bl	8000648 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fe5d 	bl	8000bf8 <__aeabi_d2uiz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (mag > 1499)mag = 1499;
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	f240 52db 	movw	r2, #1499	; 0x5db
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d902      	bls.n	8001f52 <run+0x5de>
 8001f4c:	f240 53db 	movw	r3, #1499	; 0x5db
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c

	//----------------error check---------------
	uint32_t warning = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
	check_value(&LIMIT_Current, (float)q_lpf, &warning, &error, 0);
 8001f56:	4639      	mov	r1, r7
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f240 72a8 	movw	r2, #1960	; 0x7a8
 8001f5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001f62:	ed97 0a07 	vldr	s0, [r7, #28]
 8001f66:	f240 008c 	movw	r0, #140	; 0x8c
 8001f6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f6e:	f7ff f950 	bl	8001212 <check_value>
	check_value(&LIMIT_Current, (float)d_lpf, &warning, &error, 0);
 8001f72:	4639      	mov	r1, r7
 8001f74:	2300      	movs	r3, #0
 8001f76:	f240 72a8 	movw	r2, #1960	; 0x7a8
 8001f7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001f7e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f82:	f240 008c 	movw	r0, #140	; 0x8c
 8001f86:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f8a:	f7ff f942 	bl	8001212 <check_value>
	check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos, &warning, &error, 1);
 8001f8e:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa0:	4639      	mov	r1, r7
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f240 72a8 	movw	r2, #1960	; 0x7a8
 8001fa8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001fac:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb0:	f240 003c 	movw	r0, #60	; 0x3c
 8001fb4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001fb8:	f7ff f92b 	bl	8001212 <check_value>
	check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos, &warning, &error, 2);
 8001fbc:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fce:	4639      	mov	r1, r7
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f240 72a8 	movw	r2, #1960	; 0x7a8
 8001fd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001fda:	eeb0 0a67 	vmov.f32	s0, s15
 8001fde:	f240 004c 	movw	r0, #76	; 0x4c
 8001fe2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001fe6:	f7ff f914 	bl	8001212 <check_value>
	check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity, &warning, &error, 3);
 8001fea:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffc:	4639      	mov	r1, r7
 8001ffe:	2303      	movs	r3, #3
 8002000:	f240 72a8 	movw	r2, #1960	; 0x7a8
 8002004:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	f240 009c 	movw	r0, #156	; 0x9c
 8002010:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002014:	f7ff f8fd 	bl	8001212 <check_value>
	check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux, &warning, &error, 4);
 8002018:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800201c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002020:	889b      	ldrh	r3, [r3, #4]
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	4639      	mov	r1, r7
 800202c:	2304      	movs	r3, #4
 800202e:	f240 72a8 	movw	r2, #1960	; 0x7a8
 8002032:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002036:	eeb0 0a67 	vmov.f32	s0, s15
 800203a:	f240 006c 	movw	r0, #108	; 0x6c
 800203e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002042:	f7ff f8e6 	bl	8001212 <check_value>
	check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat, &warning, &error, 5);
 8002046:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800204a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002058:	4639      	mov	r1, r7
 800205a:	2305      	movs	r3, #5
 800205c:	f240 72a8 	movw	r2, #1960	; 0x7a8
 8002060:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002064:	eeb0 0a67 	vmov.f32	s0, s15
 8002068:	f240 005c 	movw	r0, #92	; 0x5c
 800206c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002070:	f7ff f8cf 	bl	8001212 <check_value>
	check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1, &warning, &error, 6);
 8002074:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002078:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800207c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002088:	4639      	mov	r1, r7
 800208a:	2306      	movs	r3, #6
 800208c:	f240 72a8 	movw	r2, #1960	; 0x7a8
 8002090:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002094:	eeb0 0a67 	vmov.f32	s0, s15
 8002098:	f240 007c 	movw	r0, #124	; 0x7c
 800209c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80020a0:	f7ff f8b7 	bl	8001212 <check_value>
	check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2, &warning, &error, 7);
 80020a4:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80020a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b8:	4639      	mov	r1, r7
 80020ba:	2307      	movs	r3, #7
 80020bc:	f240 72a8 	movw	r2, #1960	; 0x7a8
 80020c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020c4:	eeb0 0a67 	vmov.f32	s0, s15
 80020c8:	f240 007c 	movw	r0, #124	; 0x7c
 80020cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80020d0:	f7ff f89f 	bl	8001212 <check_value>

	//-----------------set PWM---------------------
	if(error){
 80020d4:	f240 73a8 	movw	r3, #1960	; 0x7a8
 80020d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <run+0x780>
		Status = BLDC_ERROR;
 80020e2:	f640 13f4 	movw	r3, #2548	; 0x9f4
 80020e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020ea:	2204      	movs	r2, #4
 80020ec:	701a      	strb	r2, [r3, #0]
		shutoff();
 80020ee:	f000 fc1f 	bl	8002930 <shutoff>
 80020f2:	e065      	b.n	80021c0 <run+0x84c>
	}
	else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 80020f4:	f640 13f4 	movw	r3, #2548	; 0x9f4
 80020f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d104      	bne.n	800210c <run+0x798>
		shutoff();
 8002102:	f000 fc15 	bl	8002930 <shutoff>
		shutdown();
 8002106:	f000 fc2c 	bl	8002962 <shutdown>
 800210a:	e059      	b.n	80021c0 <run+0x84c>
	}
	else if (Status == BLDC_STOPPED_WITH_BREAK){
 800210c:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8002110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <run+0x7d8>
//			shutoff();
		inverter(angle + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 800211a:	edd7 7a03 	vldr	s15, [r7, #12]
 800211e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002122:	ee17 3a90 	vmov	r3, s15
 8002126:	b29a      	uxth	r2, r3
 8002128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800212a:	4413      	add	r3, r2
 800212c:	b29b      	uxth	r3, r3
 800212e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8002132:	b29b      	uxth	r3, r3
 8002134:	b218      	sxth	r0, r3
 8002136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002138:	b299      	uxth	r1, r3
 800213a:	f640 6348 	movw	r3, #3656	; 0xe48
 800213e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	f000 fa77 	bl	8002638 <inverter>
 800214a:	e039      	b.n	80021c0 <run+0x84c>
		}
	else if (Status == BLDC_RUNNING){
 800214c:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8002150:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d132      	bne.n	80021c0 <run+0x84c>
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 800215a:	f640 13d0 	movw	r3, #2512	; 0x9d0
 800215e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f966 	bl	8002438 <mech_to_el_deg>
 800216c:	4603      	mov	r3, r0
 800216e:	b29a      	uxth	r2, r3
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	b29b      	uxth	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	b29a      	uxth	r2, r3
 8002178:	f640 634c 	movw	r3, #3660	; 0xe4c
 800217c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002188:	ee17 3a90 	vmov	r3, s15
 800218c:	b29b      	uxth	r3, r3
 800218e:	4413      	add	r3, r2
 8002190:	b29a      	uxth	r2, r3
 8002192:	edd7 7a03 	vldr	s15, [r7, #12]
 8002196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219a:	ee17 3a90 	vmov	r3, s15
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b218      	sxth	r0, r3
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ae:	b299      	uxth	r1, r3
 80021b0:	f640 6348 	movw	r3, #3656	; 0xe48
 80021b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	f000 fa3c 	bl	8002638 <inverter>
	}
	//--------------send can message------------------ 1us
	//time keepers
	timing_CAN_feedback++;
 80021c0:	f240 73a0 	movw	r3, #1952	; 0x7a0
 80021c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	f240 73a0 	movw	r3, #1952	; 0x7a0
 80021d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021d4:	601a      	str	r2, [r3, #0]
	running_LED_timing++;
 80021d6:	f240 73a4 	movw	r3, #1956	; 0x7a4
 80021da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	f240 73a4 	movw	r3, #1956	; 0x7a4
 80021e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021ea:	601a      	str	r2, [r3, #0]

	if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 80021ec:	f240 73a0 	movw	r3, #1952	; 0x7a0
 80021f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b95      	cmp	r3, #149	; 0x95
 80021f8:	f240 8104 	bls.w	8002404 <run+0xa90>
		timing_CAN_feedback = 0;
 80021fc:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8002200:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
		Feedback.Status_warning = warning;
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	f640 0370 	movw	r3, #2160	; 0x870
 800220e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002212:	605a      	str	r2, [r3, #4]
		Feedback.Status_faults = error;
 8002214:	f240 73a8 	movw	r3, #1960	; 0x7a8
 8002218:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f640 0370 	movw	r3, #2160	; 0x870
 8002222:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002226:	609a      	str	r2, [r3, #8]
		Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8002228:	f640 13ec 	movw	r3, #2540	; 0x9ec
 800222c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	f640 0370 	movw	r3, #2160	; 0x870
 8002236:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800223a:	60da      	str	r2, [r3, #12]
		Feedback.Status_mode = Status;
 800223c:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8002240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	f640 0370 	movw	r3, #2160	; 0x870
 800224c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002250:	601a      	str	r2, [r3, #0]

		Feedback.Current_Q = q_lpf;
 8002252:	f640 0370 	movw	r3, #2160	; 0x870
 8002256:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	621a      	str	r2, [r3, #32]
		Feedback.Current_D = d_lpf;
 800225e:	f640 0370 	movw	r3, #2160	; 0x870
 8002262:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

		Feedback.Voltage_AUX = ((float)IRQ_Voltage_Temp_BUFF.V_aux)/1000;
 800226a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800226e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002272:	889b      	ldrh	r3, [r3, #4]
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800227c:	2300      	movs	r3, #0
 800227e:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002282:	ee06 3a90 	vmov	s13, r3
 8002286:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800228a:	f640 0370 	movw	r3, #2160	; 0x870
 800228e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002292:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		Feedback.Voltage_BAT = ((float)IRQ_Voltage_Temp_BUFF.V_Bat)/1000;
 8002296:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800229a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a8:	2300      	movs	r3, #0
 80022aa:	f2c4 437a 	movt	r3, #17530	; 0x447a
 80022ae:	ee06 3a90 	vmov	s13, r3
 80022b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b6:	f640 0370 	movw	r3, #2160	; 0x870
 80022ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022be:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		Feedback.Temp_ENCODER1 = IRQ_Encoders_BUFF.Encoder1_temp_x10/10;
 80022c2:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80022c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ca:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80022ce:	f246 6367 	movw	r3, #26215	; 0x6667
 80022d2:	f2c6 6366 	movt	r3, #26214	; 0x6666
 80022d6:	fb83 1302 	smull	r1, r3, r3, r2
 80022da:	1099      	asrs	r1, r3, #2
 80022dc:	17d3      	asrs	r3, r2, #31
 80022de:	1acb      	subs	r3, r1, r3
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	f640 0370 	movw	r3, #2160	; 0x870
 80022e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ea:	851a      	strh	r2, [r3, #40]	; 0x28
		Feedback.Temp_ENCODER2 = IRQ_Encoders_BUFF.Encoder2_temp_x10/10;
 80022ec:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80022f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022f4:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 80022f8:	f246 6367 	movw	r3, #26215	; 0x6667
 80022fc:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8002300:	fb83 1302 	smull	r1, r3, r3, r2
 8002304:	1099      	asrs	r1, r3, #2
 8002306:	17d3      	asrs	r3, r2, #31
 8002308:	1acb      	subs	r3, r1, r3
 800230a:	b21a      	sxth	r2, r3
 800230c:	f640 0370 	movw	r3, #2160	; 0x870
 8002310:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a

		Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos/1000.0f;
 8002316:	f640 13d0 	movw	r3, #2512	; 0x9d0
 800231a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002328:	2300      	movs	r3, #0
 800232a:	f2c4 437a 	movt	r3, #17530	; 0x447a
 800232e:	ee06 3a90 	vmov	s13, r3
 8002332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002336:	f640 0370 	movw	r3, #2160	; 0x870
 800233a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800233e:	edc3 7a04 	vstr	s15, [r3, #16]
		Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos/1000.0f;
 8002342:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8002346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002354:	2300      	movs	r3, #0
 8002356:	f2c4 437a 	movt	r3, #17530	; 0x447a
 800235a:	ee06 3a90 	vmov	s13, r3
 800235e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002362:	f640 0370 	movw	r3, #2160	; 0x870
 8002366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800236a:	edc3 7a05 	vstr	s15, [r3, #20]
		Feedback.Position_Calculated_pos = Angle_PID.Input;
 800236e:	f640 1370 	movw	r3, #2416	; 0x970
 8002372:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	f640 0370 	movw	r3, #2160	; 0x870
 800237c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002380:	619a      	str	r2, [r3, #24]
		Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity/1000.0f;
 8002382:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8002386:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002394:	2300      	movs	r3, #0
 8002396:	f2c4 437a 	movt	r3, #17530	; 0x447a
 800239a:	ee06 3a90 	vmov	s13, r3
 800239e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a2:	f640 0370 	movw	r3, #2160	; 0x870
 80023a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023aa:	edc3 7a07 	vstr	s15, [r3, #28]
		FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 80023ae:	f640 0270 	movw	r2, #2160	; 0x870
 80023b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80023b6:	f240 4136 	movw	r1, #1078	; 0x436
 80023ba:	f641 0018 	movw	r0, #6168	; 0x1818
 80023be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80023c2:	f002 fbdb 	bl	8004b7c <FDCAN_sendData>
				#endif
				#ifdef Status_debug
				, status_sting[Feedback.Status_mode], Feedback.Status_setpoint, Feedback.Status_warning, Feedback.Status_faults
					#endif
				#ifdef Position_debug
				, (int32_t)Feedback.Position_Velocity, (int32_t)(q_lpf), angle/*Feedback.Position_Calculated_pos*/, (int32_t)(d_lpf)//Velocity_PID.Setpoint
 80023c6:	f640 0370 	movw	r3, #2160	; 0x870
 80023ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023ce:	edd3 7a07 	vldr	s15, [r3, #28]
		PrintServerPrintf(
 80023d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80023d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80023da:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80023de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80023e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ea:	ee17 2a90 	vmov	r2, s15
 80023ee:	9200      	str	r2, [sp, #0]
 80023f0:	ee16 2a90 	vmov	r2, s13
 80023f4:	ee17 1a10 	vmov	r1, s14
 80023f8:	f24f 30f0 	movw	r0, #62448	; 0xf3f0
 80023fc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002400:	f001 fe6f 	bl	80040e2 <PrintServerPrintf>
	}
	#endif

	//-----------------update dac---------------------------
	#ifdef DAC_DEBUG
	dac_value(q/10 +1500);
 8002404:	ed97 7a01 	vldr	s14, [r7, #4]
 8002408:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800240c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002414:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
 8002418:	ee07 3a10 	vmov	s14, r3
 800241c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002424:	ee17 3a90 	vmov	r3, s15
 8002428:	b29b      	uxth	r3, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f001 fe86 	bl	800413c <dac_value>
	#endif
}
 8002430:	bf00      	nop
 8002432:	3730      	adds	r7, #48	; 0x30
 8002434:	46bd      	mov	sp, r7
 8002436:	bdb0      	pop	{r4, r5, r7, pc}

08002438 <mech_to_el_deg>:

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	float temp = (float)(angle_deg-offset_deg+360000*2);
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800244c:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002458:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360000) temp = temp-360000;
 800245c:	e00b      	b.n	8002476 <mech_to_el_deg+0x3e>
 800245e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002462:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002466:	f6c4 03af 	movt	r3, #18607	; 0x48af
 800246a:	ee07 3a10 	vmov	s14, r3
 800246e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002472:	edc7 7a03 	vstr	s15, [r7, #12]
 8002476:	edd7 7a03 	vldr	s15, [r7, #12]
 800247a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800247e:	f6c4 03af 	movt	r3, #18607	; 0x48af
 8002482:	ee07 3a10 	vmov	s14, r3
 8002486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	dce6      	bgt.n	800245e <mech_to_el_deg+0x26>
	while (temp > (360000/17)) temp = temp-deg_pr_pole;
 8002490:	e00b      	b.n	80024aa <mech_to_el_deg+0x72>
 8002492:	edd7 7a03 	vldr	s15, [r7, #12]
 8002496:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800249a:	f2c4 63a5 	movt	r3, #18085	; 0x46a5
 800249e:	ee07 3a10 	vmov	s14, r3
 80024a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024a6:	edc7 7a03 	vstr	s15, [r7, #12]
 80024aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ae:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80024b2:	f2c4 63a5 	movt	r3, #18085	; 0x46a5
 80024b6:	ee07 3a10 	vmov	s14, r3
 80024ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	dce6      	bgt.n	8002492 <mech_to_el_deg+0x5a>
	temp = temp*17/1000;
 80024c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c8:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80024cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024d0:	2300      	movs	r3, #0
 80024d2:	f2c4 437a 	movt	r3, #17530	; 0x447a
 80024d6:	ee06 3a90 	vmov	s13, r3
 80024da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024de:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360) temp -= 360;
 80024e2:	e00a      	b.n	80024fa <mech_to_el_deg+0xc2>
 80024e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e8:	2300      	movs	r3, #0
 80024ea:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 80024ee:	ee07 3a10 	vmov	s14, r3
 80024f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024f6:	edc7 7a03 	vstr	s15, [r7, #12]
 80024fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80024fe:	2300      	movs	r3, #0
 8002500:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 8002504:	ee07 3a10 	vmov	s14, r3
 8002508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	dce8      	bgt.n	80024e4 <mech_to_el_deg+0xac>
	if(temp < 0) return 0;
 8002512:	edd7 7a03 	vldr	s15, [r7, #12]
 8002516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	d501      	bpl.n	8002524 <mech_to_el_deg+0xec>
 8002520:	2300      	movs	r3, #0
 8002522:	e015      	b.n	8002550 <mech_to_el_deg+0x118>
	else if(temp > 360) return 360;
 8002524:	edd7 7a03 	vldr	s15, [r7, #12]
 8002528:	2300      	movs	r3, #0
 800252a:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 800252e:	ee07 3a10 	vmov	s14, r3
 8002532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	dd02      	ble.n	8002542 <mech_to_el_deg+0x10a>
 800253c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002540:	e006      	b.n	8002550 <mech_to_el_deg+0x118>
	else return (int16_t)temp;
 8002542:	edd7 7a03 	vldr	s15, [r7, #12]
 8002546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800254a:	ee17 3a90 	vmov	r3, s15
 800254e:	b21b      	sxth	r3, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <CTRL_init_PWM>:
#define duty_max 1499
#define pi 3.1415926535

uint32_t *V_bat = 0;

void CTRL_init_PWM(uint32_t *V_bat_ptr){
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	V_bat = V_bat_ptr;
 8002564:	f640 2304 	movw	r3, #2564	; 0xa04
 8002568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	601a      	str	r2, [r3, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8002570:	2100      	movs	r1, #0
 8002572:	f641 3000 	movw	r0, #6912	; 0x1b00
 8002576:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800257a:	f007 ff87 	bl	800a48c <HAL_TIM_PWM_Start>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <CTRL_init_PWM+0x2c>
 8002584:	f002 ffff 	bl	8005586 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8002588:	2100      	movs	r1, #0
 800258a:	f641 3000 	movw	r0, #6912	; 0x1b00
 800258e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002592:	f008 f8d1 	bl	800a738 <HAL_TIMEx_PWMN_Start>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <CTRL_init_PWM+0x44>
 800259c:	f002 fff3 	bl	8005586 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80025a0:	2104      	movs	r1, #4
 80025a2:	f641 3000 	movw	r0, #6912	; 0x1b00
 80025a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025aa:	f007 ff6f 	bl	800a48c <HAL_TIM_PWM_Start>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <CTRL_init_PWM+0x5c>
 80025b4:	f002 ffe7 	bl	8005586 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80025b8:	2104      	movs	r1, #4
 80025ba:	f641 3000 	movw	r0, #6912	; 0x1b00
 80025be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025c2:	f008 f8b9 	bl	800a738 <HAL_TIMEx_PWMN_Start>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <CTRL_init_PWM+0x74>
 80025cc:	f002 ffdb 	bl	8005586 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80025d0:	2108      	movs	r1, #8
 80025d2:	f641 3000 	movw	r0, #6912	; 0x1b00
 80025d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025da:	f007 ff57 	bl	800a48c <HAL_TIM_PWM_Start>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <CTRL_init_PWM+0x8c>
 80025e4:	f002 ffcf 	bl	8005586 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80025e8:	2108      	movs	r1, #8
 80025ea:	f641 3000 	movw	r0, #6912	; 0x1b00
 80025ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025f2:	f008 f8a1 	bl	800a738 <HAL_TIMEx_PWMN_Start>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <CTRL_init_PWM+0xa4>
 80025fc:	f002 ffc3 	bl	8005586 <Error_Handler>

	TIM1->CCR1 = 0;
 8002600:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002604:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002608:	2200      	movs	r2, #0
 800260a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800260c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002610:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002614:	2200      	movs	r2, #0
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8002618:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800261c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002620:	2200      	movs	r2, #0
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 8002624:	f641 304c 	movw	r0, #6988	; 0x1b4c
 8002628:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800262c:	f007 fad9 	bl	8009be2 <HAL_TIM_Base_Start_IT>
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage, uint8_t direction){
 8002638:	b480      	push	{r7}
 800263a:	b08b      	sub	sp, #44	; 0x2c
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
 8002642:	460b      	mov	r3, r1
 8002644:	80bb      	strh	r3, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	70fb      	strb	r3, [r7, #3]
	angle = (angle+360*2)%360;
 800264a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800264e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8002652:	f246 02b7 	movw	r2, #24759	; 0x60b7
 8002656:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 800265a:	fb82 1203 	smull	r1, r2, r2, r3
 800265e:	441a      	add	r2, r3
 8002660:	1211      	asrs	r1, r2, #8
 8002662:	17da      	asrs	r2, r3, #31
 8002664:	1a8a      	subs	r2, r1, r2
 8002666:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800266a:	fb01 f202 	mul.w	r2, r1, r2
 800266e:	1a9a      	subs	r2, r3, r2
 8002670:	4613      	mov	r3, r2
 8002672:	80fb      	strh	r3, [r7, #6]

//	if(V_bat == NULL){
//		shutoff();
//		return;
//	}
	uint16_t duty = voltage; //(voltage * duty_max)/ (*V_bat);
 8002674:	88bb      	ldrh	r3, [r7, #4]
 8002676:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(duty > duty_max)duty = duty_max;
 8002678:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800267a:	f240 52db 	movw	r2, #1499	; 0x5db
 800267e:	4293      	cmp	r3, r2
 8002680:	d902      	bls.n	8002688 <inverter+0x50>
 8002682:	f240 53db 	movw	r3, #1499	; 0x5db
 8002686:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint32_t compare_M1 = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
	uint32_t compare_M2 = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M3 = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	61bb      	str	r3, [r7, #24]

	float deg = (float)(angle%60);
 8002694:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002698:	f648 0389 	movw	r3, #34953	; 0x8889
 800269c:	f6c8 0388 	movt	r3, #34952	; 0x8888
 80026a0:	fb83 1302 	smull	r1, r3, r3, r2
 80026a4:	4413      	add	r3, r2
 80026a6:	1159      	asrs	r1, r3, #5
 80026a8:	17d3      	asrs	r3, r2, #31
 80026aa:	1ac9      	subs	r1, r1, r3
 80026ac:	460b      	mov	r3, r1
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a5b      	subs	r3, r3, r1
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c0:	edc7 7a05 	vstr	s15, [r7, #20]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 80026c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ce:	2300      	movs	r3, #0
 80026d0:	f2c4 2370 	movt	r3, #17008	; 0x4270
 80026d4:	ee06 3a90 	vmov	s13, r3
 80026d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80026dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80026e0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80026e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026e8:	2300      	movs	r3, #0
 80026ea:	f2c4 2370 	movt	r3, #17008	; 0x4270
 80026ee:	ee06 3a10 	vmov	s12, r3
 80026f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026fa:	2300      	movs	r3, #0
 80026fc:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8002700:	ee06 3a10 	vmov	s12, r3
 8002704:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002708:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800270c:	2300      	movs	r3, #0
 800270e:	f2c4 2370 	movt	r3, #17008	; 0x4270
 8002712:	ee06 3a90 	vmov	s13, r3
 8002716:	edd7 7a05 	vldr	s15, [r7, #20]
 800271a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800271e:	2300      	movs	r3, #0
 8002720:	f2c4 2370 	movt	r3, #17008	; 0x4270
 8002724:	ee05 3a90 	vmov	s11, r3
 8002728:	edd7 7a05 	vldr	s15, [r7, #20]
 800272c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002730:	2300      	movs	r3, #0
 8002732:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8002736:	ee05 3a90 	vmov	s11, r3
 800273a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002746:	f2c4 731e 	movt	r3, #18206	; 0x471e
 800274a:	ee06 3a90 	vmov	s13, r3
 800274e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002752:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800275e:	ee17 3a90 	vmov	r3, s15
 8002762:	827b      	strh	r3, [r7, #18]
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8002764:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800276e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002772:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002776:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800277a:	2300      	movs	r3, #0
 800277c:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8002780:	ee06 3a10 	vmov	s12, r3
 8002784:	edd7 7a05 	vldr	s15, [r7, #20]
 8002788:	ee76 7a67 	vsub.f32	s15, s12, s15
 800278c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002790:	2300      	movs	r3, #0
 8002792:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8002796:	ee06 3a90 	vmov	s13, r3
 800279a:	edd7 7a05 	vldr	s15, [r7, #20]
 800279e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80027ae:	f2c4 731e 	movt	r3, #18206	; 0x471e
 80027b2:	ee06 3a90 	vmov	s13, r3
 80027b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c6:	ee17 3a90 	vmov	r3, s15
 80027ca:	823b      	strh	r3, [r7, #16]
	uint16_t T0 = (duty_max-T1-T2)/2;
 80027cc:	8a7b      	ldrh	r3, [r7, #18]
 80027ce:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80027d2:	3303      	adds	r3, #3
 80027d4:	8a3a      	ldrh	r2, [r7, #16]
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	0fda      	lsrs	r2, r3, #31
 80027da:	4413      	add	r3, r2
 80027dc:	105b      	asrs	r3, r3, #1
 80027de:	81fb      	strh	r3, [r7, #14]

	if(angle >= 0 && angle < 60){
 80027e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db10      	blt.n	800280a <inverter+0x1d2>
 80027e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ec:	2b3b      	cmp	r3, #59	; 0x3b
 80027ee:	dc0c      	bgt.n	800280a <inverter+0x1d2>
		compare_M1 = T0;
 80027f0:	89fb      	ldrh	r3, [r7, #14]
 80027f2:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T2;
 80027f4:	89fa      	ldrh	r2, [r7, #14]
 80027f6:	8a3b      	ldrh	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 80027fc:	89fa      	ldrh	r2, [r7, #14]
 80027fe:	8a7b      	ldrh	r3, [r7, #18]
 8002800:	441a      	add	r2, r3
 8002802:	8a3b      	ldrh	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	e06a      	b.n	80028e0 <inverter+0x2a8>
		}
	else if(angle >= 60 && angle < 120){
 800280a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280e:	2b3b      	cmp	r3, #59	; 0x3b
 8002810:	dd10      	ble.n	8002834 <inverter+0x1fc>
 8002812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002816:	2b77      	cmp	r3, #119	; 0x77
 8002818:	dc0c      	bgt.n	8002834 <inverter+0x1fc>
		compare_M1 = T0;
 800281a:	89fb      	ldrh	r3, [r7, #14]
 800281c:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 800281e:	89fa      	ldrh	r2, [r7, #14]
 8002820:	8a7b      	ldrh	r3, [r7, #18]
 8002822:	441a      	add	r2, r3
 8002824:	8a3b      	ldrh	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1;
 800282a:	89fa      	ldrh	r2, [r7, #14]
 800282c:	8a7b      	ldrh	r3, [r7, #18]
 800282e:	4413      	add	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e055      	b.n	80028e0 <inverter+0x2a8>
		}
	else if(angle >= 120 && angle < 180){
 8002834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002838:	2b77      	cmp	r3, #119	; 0x77
 800283a:	dd10      	ble.n	800285e <inverter+0x226>
 800283c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002840:	2bb3      	cmp	r3, #179	; 0xb3
 8002842:	dc0c      	bgt.n	800285e <inverter+0x226>
		compare_M1 = T0+T2;
 8002844:	89fa      	ldrh	r2, [r7, #14]
 8002846:	8a3b      	ldrh	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 800284c:	89fa      	ldrh	r2, [r7, #14]
 800284e:	8a7b      	ldrh	r3, [r7, #18]
 8002850:	441a      	add	r2, r3
 8002852:	8a3b      	ldrh	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	e040      	b.n	80028e0 <inverter+0x2a8>
		}
	else if(angle >= 180 && angle < 240){
 800285e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002862:	2bb3      	cmp	r3, #179	; 0xb3
 8002864:	dd10      	ble.n	8002888 <inverter+0x250>
 8002866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800286a:	2bef      	cmp	r3, #239	; 0xef
 800286c:	dc0c      	bgt.n	8002888 <inverter+0x250>
		compare_M1 = T0+T1+T2;
 800286e:	89fa      	ldrh	r2, [r7, #14]
 8002870:	8a7b      	ldrh	r3, [r7, #18]
 8002872:	441a      	add	r2, r3
 8002874:	8a3b      	ldrh	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1;
 800287a:	89fa      	ldrh	r2, [r7, #14]
 800287c:	8a7b      	ldrh	r3, [r7, #18]
 800287e:	4413      	add	r3, r2
 8002880:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 8002882:	89fb      	ldrh	r3, [r7, #14]
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	e02b      	b.n	80028e0 <inverter+0x2a8>
		}
	else if(angle >= 240 && angle < 300){
 8002888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288c:	2bef      	cmp	r3, #239	; 0xef
 800288e:	dd11      	ble.n	80028b4 <inverter+0x27c>
 8002890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002894:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002898:	da0c      	bge.n	80028b4 <inverter+0x27c>
		compare_M1 = T0+T1+T2;
 800289a:	89fa      	ldrh	r2, [r7, #14]
 800289c:	8a7b      	ldrh	r3, [r7, #18]
 800289e:	441a      	add	r2, r3
 80028a0:	8a3b      	ldrh	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T2;
 80028aa:	89fa      	ldrh	r2, [r7, #14]
 80028ac:	8a3b      	ldrh	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e015      	b.n	80028e0 <inverter+0x2a8>
		}
	else if(angle >= 300 && angle <= 360){
 80028b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80028bc:	db10      	blt.n	80028e0 <inverter+0x2a8>
 80028be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80028c6:	dc0b      	bgt.n	80028e0 <inverter+0x2a8>
		compare_M1 = T0+T1;
 80028c8:	89fa      	ldrh	r2, [r7, #14]
 80028ca:	8a7b      	ldrh	r3, [r7, #18]
 80028cc:	4413      	add	r3, r2
 80028ce:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 80028d0:	89fb      	ldrh	r3, [r7, #14]
 80028d2:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 80028d4:	89fa      	ldrh	r2, [r7, #14]
 80028d6:	8a7b      	ldrh	r3, [r7, #18]
 80028d8:	441a      	add	r2, r3
 80028da:	8a3b      	ldrh	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 80028e0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80028e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80028e8:	6a3a      	ldr	r2, [r7, #32]
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34
	if(direction){
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <inverter+0x2d4>
		TIM1->CCR2 = compare_M3;
 80028f2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80028f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = compare_M2;
 80028fe:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002902:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	63da      	str	r2, [r3, #60]	; 0x3c
	}


//	dac_value(angle*8+200);

}
 800290a:	e00b      	b.n	8002924 <inverter+0x2ec>
		TIM1->CCR2 = compare_M2;
 800290c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002910:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = compare_M3;
 8002918:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800291c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002924:	bf00      	nop
 8002926:	372c      	adds	r7, #44	; 0x2c
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <shutoff>:
void shutoff(void){
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8002934:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002938:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800293c:	2200      	movs	r2, #0
 800293e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8002940:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002944:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002948:	2200      	movs	r2, #0
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800294c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002950:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002954:	2200      	movs	r2, #0
 8002956:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <shutdown>:
void shutdown(void){
 8002962:	b580      	push	{r7, lr}
 8002964:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8002966:	2100      	movs	r1, #0
 8002968:	f641 3000 	movw	r0, #6912	; 0x1b00
 800296c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002970:	f007 fe6a 	bl	800a648 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8002974:	2100      	movs	r1, #0
 8002976:	f641 3000 	movw	r0, #6912	; 0x1b00
 800297a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800297e:	f007 ff53 	bl	800a828 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8002982:	2104      	movs	r1, #4
 8002984:	f641 3000 	movw	r0, #6912	; 0x1b00
 8002988:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800298c:	f007 fe5c 	bl	800a648 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8002990:	2104      	movs	r1, #4
 8002992:	f641 3000 	movw	r0, #6912	; 0x1b00
 8002996:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800299a:	f007 ff45 	bl	800a828 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 800299e:	2108      	movs	r1, #8
 80029a0:	f641 3000 	movw	r0, #6912	; 0x1b00
 80029a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80029a8:	f007 fe4e 	bl	800a648 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 80029ac:	2108      	movs	r1, #8
 80029ae:	f641 3000 	movw	r0, #6912	; 0x1b00
 80029b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80029b6:	f007 ff37 	bl	800a828 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 80029ba:	f641 3000 	movw	r0, #6912	; 0x1b00
 80029be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80029c2:	f007 f8fa 	bl	8009bba <HAL_TIM_Base_Stop>
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}

080029ca <order_phases>:
float electrical_offset = 0;
float pi = 3.14159265f;

uint32_t motor_lut[LUT_SIZE];

void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 80029ca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029ce:	b090      	sub	sp, #64	; 0x40
 80029d0:	af04      	add	r7, sp, #16
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]

    ///Checks phase order, to ensure that positive Q current produces
    ///torque in the positive direction wrt the position sensor.
	PrintServerPrintf("\n\r Checking phase ordering\n\r");
 80029d6:	f24f 4024 	movw	r0, #62500	; 0xf424
 80029da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80029de:	f001 fb80 	bl	80040e2 <PrintServerPrintf>
    float theta_ref = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    float theta_actual = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    int sample_counter = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28

    float d;
    float q;

    PHASE_ORDER = 0;
 80029ee:	f640 6348 	movw	r3, #3656	; 0xe48
 80029f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]

    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 80029fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a02:	ee17 3a90 	vmov	r3, s15
 8002a06:	b218      	sxth	r0, r3
 8002a08:	f640 6348 	movw	r3, #3656	; 0xe48
 8002a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	2164      	movs	r1, #100	; 0x64
 8002a16:	f7ff fe0f 	bl	8002638 <inverter>
    HAL_Delay(1000);
 8002a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a1e:	f003 faa1 	bl	8005f64 <HAL_Delay>
    //float theta_start = ps->GetMechPositionFixed();                                  //get initial rotor position
    float theta_start;

    //current d and q
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8002a22:	f240 03ac 	movw	r3, #172	; 0xac
 8002a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a2a:	ed93 7a00 	vldr	s14, [r3]
 8002a2e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a36:	2300      	movs	r3, #0
 8002a38:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8002a3c:	ee06 3a90 	vmov	s13, r3
 8002a40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a50:	2300      	movs	r3, #0
 8002a52:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002a56:	ee06 3a10 	vmov	s12, r3
 8002a5a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002a70:	ee05 3a90 	vmov	s11, r3
 8002a74:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a84:	2300      	movs	r3, #0
 8002a86:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002a8a:	ee05 3a10 	vmov	s10, r3
 8002a8e:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002a92:	f107 020c 	add.w	r2, r7, #12
 8002a96:	f107 0310 	add.w	r3, r7, #16
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	eef0 1a65 	vmov.f32	s3, s11
 8002aa2:	eeb0 1a46 	vmov.f32	s2, s12
 8002aa6:	eef0 0a66 	vmov.f32	s1, s13
 8002aaa:	eeb0 0a47 	vmov.f32	s0, s14
 8002aae:	f001 ff59 	bl	8004964 <dq0>
//    controller->i_b = I_SCALE*(float)(controller->adc2_raw - controller->adc2_offset);    //Calculate phase currents from ADC readings
//    controller->i_c = I_SCALE*(float)(controller->adc1_raw - controller->adc1_offset);
//    controller->i_a = -controller->i_b - controller->i_c;
//    dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
    float current = sqrt((d*d + q*q));
 8002ab2:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002abe:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ace:	ee17 0a90 	vmov	r0, s15
 8002ad2:	f7fd fd61 	bl	8000598 <__aeabi_f2d>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	ec43 2b10 	vmov	d0, r2, r3
 8002ade:	f00b fce7 	bl	800e4b0 <sqrt>
 8002ae2:	ec53 2b10 	vmov	r2, r3, d0
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7fe f8a5 	bl	8000c38 <__aeabi_d2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	61bb      	str	r3, [r7, #24]
    PrintServerPrintf("\n\rCurrent\n\r");
 8002af2:	f24f 4044 	movw	r0, #62532	; 0xf444
 8002af6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002afa:	f001 faf2 	bl	80040e2 <PrintServerPrintf>
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fd49 	bl	8000598 <__aeabi_f2d>
 8002b06:	4680      	mov	r8, r0
 8002b08:	4689      	mov	r9, r1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fd43 	bl	8000598 <__aeabi_f2d>
 8002b12:	4604      	mov	r4, r0
 8002b14:	460d      	mov	r5, r1
 8002b16:	69b8      	ldr	r0, [r7, #24]
 8002b18:	f7fd fd3e 	bl	8000598 <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b24:	e9cd 4500 	strd	r4, r5, [sp]
 8002b28:	4642      	mov	r2, r8
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	f24f 4050 	movw	r0, #62544	; 0xf450
 8002b30:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b34:	f001 fad5 	bl	80040e2 <PrintServerPrintf>
    /// Rotate voltage angle
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002b38:	e04e      	b.n	8002bd8 <order_phases+0x20e>
    	inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002b3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b42:	ee17 3a90 	vmov	r3, s15
 8002b46:	b218      	sxth	r0, r3
 8002b48:	f640 6348 	movw	r3, #3656	; 0xe48
 8002b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	2164      	movs	r1, #100	; 0x64
 8002b56:	f7ff fd6f 	bl	8002638 <inverter>
    	HAL_Delay(1);
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f003 fa02 	bl	8005f64 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002b72:	ee06 3a90 	vmov	s13, r3
 8002b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b7a:	edc7 7a07 	vstr	s15, [r7, #28]
       if(theta_ref==0){theta_start = theta_actual;}
 8002b7e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	d101      	bne.n	8002b90 <order_phases+0x1c6>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
       if(sample_counter >= 1){
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	dd15      	ble.n	8002bc2 <order_phases+0x1f8>
           sample_counter = 0 ;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
           PrintServerPrintf("%.4f %.4f\n\r", (float)theta_ref, theta_actual);
 8002b9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b9c:	f7fd fcfc 	bl	8000598 <__aeabi_f2d>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	460d      	mov	r5, r1
 8002ba4:	69f8      	ldr	r0, [r7, #28]
 8002ba6:	f7fd fcf7 	bl	8000598 <__aeabi_f2d>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	e9cd 2300 	strd	r2, r3, [sp]
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	f24f 4060 	movw	r0, #62560	; 0xf460
 8002bba:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002bbe:	f001 fa90 	bl	80040e2 <PrintServerPrintf>
        }
        sample_counter++;
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
       theta_ref += 1;
 8002bc8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bd4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002bd8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f2c4 4334 	movt	r3, #17460	; 0x4434
 8002be2:	ee07 3a10 	vmov	s14, r3
 8002be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	d4a4      	bmi.n	8002b3a <order_phases+0x170>
        }
    float theta_end = (float)ps->Encoder1_pos/1000;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002c02:	ee06 3a90 	vmov	s13, r3
 8002c06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c0a:	edc7 7a05 	vstr	s15, [r7, #20]
    int direction = (theta_end - theta_start)>0;
 8002c0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	bfcc      	ite	gt
 8002c24:	2301      	movgt	r3, #1
 8002c26:	2300      	movle	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) > 180) direction = 0;
 8002c2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8002c3e:	ee07 3a10 	vmov	s14, r3
 8002c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4a:	dd01      	ble.n	8002c50 <order_phases+0x286>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) < -180) direction = 1;
 8002c50:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f2cc 3334 	movt	r3, #49972	; 0xc334
 8002c62:	ee07 3a10 	vmov	s14, r3
 8002c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6e:	d501      	bpl.n	8002c74 <order_phases+0x2aa>
 8002c70:	2301      	movs	r3, #1
 8002c72:	623b      	str	r3, [r7, #32]
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 8002c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c76:	f7fd fc8f 	bl	8000598 <__aeabi_f2d>
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	460d      	mov	r5, r1
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7fd fc8a 	bl	8000598 <__aeabi_f2d>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	e9cd 2300 	strd	r2, r3, [sp]
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	462b      	mov	r3, r5
 8002c90:	f24f 406c 	movw	r0, #62572	; 0xf46c
 8002c94:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c98:	f001 fa23 	bl	80040e2 <PrintServerPrintf>
    PrintServerPrintf("Direction:  %d\n\r", direction);
 8002c9c:	6a39      	ldr	r1, [r7, #32]
 8002c9e:	f24f 4094 	movw	r0, #62612	; 0xf494
 8002ca2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002ca6:	f001 fa1c 	bl	80040e2 <PrintServerPrintf>
    if(direction){PrintServerPrintf("Phasing correct\n\r");}
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <order_phases+0x2f4>
 8002cb0:	f24f 40a8 	movw	r0, #62632	; 0xf4a8
 8002cb4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002cb8:	f001 fa13 	bl	80040e2 <PrintServerPrintf>
 8002cbc:	e008      	b.n	8002cd0 <order_phases+0x306>
    else if(!direction){PrintServerPrintf("Phasing incorrect.  Swapping phases V and W\n\r");}
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <order_phases+0x306>
 8002cc4:	f24f 40bc 	movw	r0, #62652	; 0xf4bc
 8002cc8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002ccc:	f001 fa09 	bl	80040e2 <PrintServerPrintf>
    PHASE_ORDER = !direction;
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f640 6348 	movw	r3, #3656	; 0xe48
 8002ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ce6:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 8002ce8:	200a      	movs	r0, #10
 8002cea:	f003 f93b 	bl	8005f64 <HAL_Delay>
    }
 8002cee:	bf00      	nop
 8002cf0:	3730      	adds	r7, #48	; 0x30
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002cf8 <calibrate>:


void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8002cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfc:	b0cb      	sub	sp, #300	; 0x12c
 8002cfe:	af04      	add	r7, sp, #16
 8002d00:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002d02:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d04:	466b      	mov	r3, sp
 8002d06:	461e      	mov	r6, r3
    /// Measures the electrical angle offset of the position sensor
    /// and (in the future) corrects nonlinearity due to position sensor eccentricity
	PrintServerPrintf("Starting calibration procedure\n\r");
 8002d08:	f24f 40ec 	movw	r0, #62700	; 0xf4ec
 8002d0c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002d10:	f001 f9e7 	bl	80040e2 <PrintServerPrintf>

   const int n = SIZE*NPP;                                                      // number of positions to be sampled per mechanical rotation.  Multiple of NPP for filtering reasons (see later)
 8002d14:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002d18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   const int n2 = 40;                                                          // increments between saved samples (for smoothing motion)
 8002d1c:	2328      	movs	r3, #40	; 0x28
 8002d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   float delta = 360.0f*NPP/(n*n2);                                              // change in angle between samples
 8002d22:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d3a:	f2c4 53bf 	movt	r3, #17855	; 0x45bf
 8002d3e:	ee06 3a90 	vmov	s13, r3
 8002d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d46:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
   const int  n_lut =  SIZE*NPP;
 8002d4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   const int window = WINDOW_SIZE;
 8002d52:	2310      	movs	r3, #16
 8002d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   float cogging_current[WINDOW_SIZE] = {0};
 8002d58:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002d5c:	2340      	movs	r3, #64	; 0x40
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2100      	movs	r1, #0
 8002d62:	f009 fa7f 	bl	800c264 <memset>


   float theta_ref = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   float theta_actual = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

   float d;
   float q;


    float error_f[n];
 8002d72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d76:	3b01      	subs	r3, #1
 8002d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d80:	2200      	movs	r2, #0
 8002d82:	461c      	mov	r4, r3
 8002d84:	4615      	mov	r5, r2
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	016b      	lsls	r3, r5, #5
 8002d90:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002d94:	0162      	lsls	r2, r4, #5
 8002d96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	4698      	mov	r8, r3
 8002d9e:	4691      	mov	r9, r2
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002dac:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002db0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	3307      	adds	r3, #7
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	ebad 0d03 	sub.w	sp, sp, r3
 8002dc4:	ab04      	add	r3, sp, #16
 8002dc6:	3303      	adds	r3, #3
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    float error_b[n];
 8002dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dde:	2200      	movs	r2, #0
 8002de0:	469a      	mov	sl, r3
 8002de2:	4693      	mov	fp, r2
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002df0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002df4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002df8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8002e00:	647a      	str	r2, [r7, #68]	; 0x44
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002e0e:	4629      	mov	r1, r5
 8002e10:	014b      	lsls	r3, r1, #5
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002e18:	4621      	mov	r1, r4
 8002e1a:	014a      	lsls	r2, r1, #5
 8002e1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	3307      	adds	r3, #7
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	ebad 0d03 	sub.w	sp, sp, r3
 8002e2c:	ab04      	add	r3, sp, #16
 8002e2e:	3303      	adds	r3, #3
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int lut[n];
 8002e38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e46:	2200      	movs	r2, #0
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e4a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002e58:	4629      	mov	r1, r5
 8002e5a:	014b      	lsls	r3, r1, #5
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002e62:	4621      	mov	r1, r4
 8002e64:	014a      	lsls	r2, r1, #5
 8002e66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	014b      	lsls	r3, r1, #5
 8002e80:	4621      	mov	r1, r4
 8002e82:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002e86:	4621      	mov	r1, r4
 8002e88:	014a      	lsls	r2, r1, #5
 8002e8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	3307      	adds	r3, #7
 8002e92:	08db      	lsrs	r3, r3, #3
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	ebad 0d03 	sub.w	sp, sp, r3
 8002e9a:	ab04      	add	r3, sp, #16
 8002e9c:	3303      	adds	r3, #3
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    int raw_f[n];
 8002ea6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002eb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	014b      	lsls	r3, r1, #5
 8002eca:	4621      	mov	r1, r4
 8002ecc:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	014a      	lsls	r2, r1, #5
 8002ed4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ed8:	2200      	movs	r2, #0
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	627a      	str	r2, [r7, #36]	; 0x24
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002eea:	4629      	mov	r1, r5
 8002eec:	014b      	lsls	r3, r1, #5
 8002eee:	4621      	mov	r1, r4
 8002ef0:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	014a      	lsls	r2, r1, #5
 8002ef8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	3307      	adds	r3, #7
 8002f00:	08db      	lsrs	r3, r3, #3
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	ebad 0d03 	sub.w	sp, sp, r3
 8002f08:	ab04      	add	r3, sp, #16
 8002f0a:	3303      	adds	r3, #3
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    int raw_b[n];
 8002f14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f22:	2200      	movs	r2, #0
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	61fa      	str	r2, [r7, #28]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002f34:	4629      	mov	r1, r5
 8002f36:	014b      	lsls	r3, r1, #5
 8002f38:	4621      	mov	r1, r4
 8002f3a:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002f3e:	4621      	mov	r1, r4
 8002f40:	014a      	lsls	r2, r1, #5
 8002f42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f46:	2200      	movs	r2, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	617a      	str	r2, [r7, #20]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f58:	4629      	mov	r1, r5
 8002f5a:	014b      	lsls	r3, r1, #5
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002f62:	4621      	mov	r1, r4
 8002f64:	014a      	lsls	r2, r1, #5
 8002f66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	3307      	adds	r3, #7
 8002f6e:	08db      	lsrs	r3, r3, #3
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	ebad 0d03 	sub.w	sp, sp, r3
 8002f76:	ab04      	add	r3, sp, #16
 8002f78:	3303      	adds	r3, #3
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float error[n];
 8002f82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f86:	3b01      	subs	r3, #1
 8002f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f90:	2200      	movs	r2, #0
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	60fa      	str	r2, [r7, #12]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	014b      	lsls	r3, r1, #5
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002fac:	4621      	mov	r1, r4
 8002fae:	014a      	lsls	r2, r1, #5
 8002fb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	014b      	lsls	r3, r1, #5
 8002fca:	4621      	mov	r1, r4
 8002fcc:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	014a      	lsls	r2, r1, #5
 8002fd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	3307      	adds	r3, #7
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	ebad 0d03 	sub.w	sp, sp, r3
 8002fe4:	ab04      	add	r3, sp, #16
 8002fe6:	3303      	adds	r3, #3
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4




    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002ff0:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ff8:	ee17 3a90 	vmov	r3, s15
 8002ffc:	b218      	sxth	r0, r3
 8002ffe:	f640 6348 	movw	r3, #3656	; 0xe48
 8003002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	2164      	movs	r1, #100	; 0x64
 800300c:	f7ff fb14 	bl	8002638 <inverter>
    HAL_Delay(1000);
 8003010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003014:	f002 ffa6 	bl	8005f64 <HAL_Delay>

    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8003018:	f240 03ac 	movw	r3, #172	; 0xac
 800301c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003020:	ed93 7a00 	vldr	s14, [r3]
 8003024:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8003028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302c:	2300      	movs	r3, #0
 800302e:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8003032:	ee06 3a90 	vmov	s13, r3
 8003036:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800303a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003046:	2300      	movs	r3, #0
 8003048:	f2c4 437a 	movt	r3, #17530	; 0x447a
 800304c:	ee06 3a10 	vmov	s12, r3
 8003050:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003060:	2300      	movs	r3, #0
 8003062:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8003066:	ee05 3a90 	vmov	s11, r3
 800306a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800306e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307a:	2300      	movs	r3, #0
 800307c:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8003080:	ee05 3a10 	vmov	s10, r3
 8003084:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8003088:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800308c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	eef0 1a65 	vmov.f32	s3, s11
 8003098:	eeb0 1a46 	vmov.f32	s2, s12
 800309c:	eef0 0a66 	vmov.f32	s1, s13
 80030a0:	eeb0 0a47 	vmov.f32	s0, s14
 80030a4:	f001 fc5e 	bl	8004964 <dq0>
    float current = sqrt((d*d + q*q));
 80030a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80030ac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80030b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80030b8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80030bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c4:	ee17 0a90 	vmov	r0, s15
 80030c8:	f7fd fa66 	bl	8000598 <__aeabi_f2d>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	ec43 2b10 	vmov	d0, r2, r3
 80030d4:	f00b f9ec 	bl	800e4b0 <sqrt>
 80030d8:	ec53 2b10 	vmov	r2, r3, d0
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fd fdaa 	bl	8000c38 <__aeabi_d2f>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    PrintServerPrintf("Current Angle : Rotor Angle : Raw Encoder \n\r\n\r");
 80030ea:	f24f 5010 	movw	r0, #62736	; 0xf510
 80030ee:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030f2:	f000 fff6 	bl	80040e2 <PrintServerPrintf>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80030fc:	e0a0      	b.n	8003240 <calibrate+0x548>
       for(int j = 0; j<n2; j++){
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003104:	e090      	b.n	8003228 <calibrate+0x530>
        theta_ref += delta;
 8003106:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 800310a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800310e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003112:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
        inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8003116:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800311a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800311e:	ee17 3a90 	vmov	r3, s15
 8003122:	b218      	sxth	r0, r3
 8003124:	f640 6348 	movw	r3, #3656	; 0xe48
 8003128:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	2164      	movs	r1, #100	; 0x64
 8003132:	f7ff fa81 	bl	8002638 <inverter>
        HAL_Delay(1);
 8003136:	2001      	movs	r0, #1
 8003138:	f002 ff14 	bl	8005f64 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 800313c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003148:	2300      	movs	r3, #0
 800314a:	f2c4 437a 	movt	r3, #17530	; 0x447a
 800314e:	ee06 3a90 	vmov	s13, r3
 8003152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003156:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
       error_f[i] = theta_ref/NPP - theta_actual;
 800315a:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800315e:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8003162:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003166:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800316a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003172:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	edc3 7a00 	vstr	s15, [r3]
	   if(error_f[i] < 0)error_f [i] = error_f[i]+ 360.0f;
 800317e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003182:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	d516      	bpl.n	80031c6 <calibrate+0x4ce>
 8003198:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800319c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	2300      	movs	r3, #0
 80031aa:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 80031ae:	ee07 3a10 	vmov	s14, r3
 80031b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80031ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	edc3 7a00 	vstr	s15, [r3]
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
 80031c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4619      	mov	r1, r3
 80031cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80031d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 80031d8:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 80031dc:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80031e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031e4:	ee16 0a90 	vmov	r0, s13
 80031e8:	f7fd f9d6 	bl	8000598 <__aeabi_f2d>
 80031ec:	4604      	mov	r4, r0
 80031ee:	460d      	mov	r5, r1
 80031f0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80031f4:	f7fd f9d0 	bl	8000598 <__aeabi_f2d>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003200:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003204:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003208:	9102      	str	r1, [sp, #8]
 800320a:	e9cd 2300 	strd	r2, r3, [sp]
 800320e:	4622      	mov	r2, r4
 8003210:	462b      	mov	r3, r5
 8003212:	f24f 5040 	movw	r0, #62784	; 0xf540
 8003216:	f6c0 0000 	movt	r0, #2048	; 0x800
 800321a:	f000 ff62 	bl	80040e2 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 800321e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003222:	3301      	adds	r3, #1
 8003224:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003228:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800322c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003230:	429a      	cmp	r2, r3
 8003232:	f6ff af68 	blt.w	8003106 <calibrate+0x40e>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8003236:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800323a:	3301      	adds	r3, #1
 800323c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003240:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003244:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003248:	429a      	cmp	r2, r3
 800324a:	f6ff af58 	blt.w	80030fe <calibrate+0x406>
        }
    }

    for(int i = 0; i<n; i++){                                                   // rotate backwards
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003254:	e0a0      	b.n	8003398 <calibrate+0x6a0>
       for(int j = 0; j<n2; j++){
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800325c:	e090      	b.n	8003380 <calibrate+0x688>
       theta_ref -= delta;
 800325e:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8003262:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326a:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
       inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 800326e:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8003272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003276:	ee17 3a90 	vmov	r3, s15
 800327a:	b218      	sxth	r0, r3
 800327c:	f640 6348 	movw	r3, #3656	; 0xe48
 8003280:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	2164      	movs	r1, #100	; 0x64
 800328a:	f7ff f9d5 	bl	8002638 <inverter>
       HAL_Delay(1);                                                         // sample position sensor
 800328e:	2001      	movs	r0, #1
 8003290:	f002 fe68 	bl	8005f64 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 8003294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032a0:	2300      	movs	r3, #0
 80032a2:	f2c4 437a 	movt	r3, #17530	; 0x447a
 80032a6:	ee06 3a90 	vmov	s13, r3
 80032aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032ae:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
       error_b[i] = theta_ref/NPP - theta_actual;
 80032b2:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 80032b6:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 80032ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032be:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80032c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	edc3 7a00 	vstr	s15, [r3]
       if(error_b[i] < 0)error_b[i] = error_b[i]+ 360.0f;
 80032d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ee:	d516      	bpl.n	800331e <calibrate+0x626>
 80032f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	2300      	movs	r3, #0
 8003302:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 8003306:	ee07 3a10 	vmov	s14, r3
 800330a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800330e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003312:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	edc3 7a00 	vstr	s15, [r3]
       raw_b[i] =  ps->Encoder1_pos_raw;
 800331e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4619      	mov	r1, r3
 8003324:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003328:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800332c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 8003330:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8003334:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8003338:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800333c:	ee16 0a90 	vmov	r0, s13
 8003340:	f7fd f92a 	bl	8000598 <__aeabi_f2d>
 8003344:	4604      	mov	r4, r0
 8003346:	460d      	mov	r5, r1
 8003348:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800334c:	f7fd f924 	bl	8000598 <__aeabi_f2d>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003358:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800335c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003360:	9102      	str	r1, [sp, #8]
 8003362:	e9cd 2300 	strd	r2, r3, [sp]
 8003366:	4622      	mov	r2, r4
 8003368:	462b      	mov	r3, r5
 800336a:	f24f 5050 	movw	r0, #62800	; 0xf550
 800336e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003372:	f000 feb6 	bl	80040e2 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8003376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800337a:	3301      	adds	r3, #1
 800337c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003380:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003388:	429a      	cmp	r2, r3
 800338a:	f6ff af68 	blt.w	800325e <calibrate+0x566>
    for(int i = 0; i<n; i++){                                                   // rotate backwards
 800338e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003392:	3301      	adds	r3, #1
 8003394:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003398:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800339c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f6ff af58 	blt.w	8003256 <calibrate+0x55e>
       //theta_ref -= delta;
        }
    }

        electrical_offset = 0;
 80033a6:	f640 634c 	movw	r3, #3660	; 0xe4c
 80033aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
        for(int i = 0; i<n; i++){
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80033b8:	e032      	b.n	8003420 <calibrate+0x728>
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 80033ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80033be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	ed93 7a00 	vldr	s14, [r3]
 80033ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033ce:	1e5a      	subs	r2, r3, #1
 80033d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80033e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	f640 634c 	movw	r3, #3660	; 0xe4c
 80033fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340a:	f640 634c 	movw	r3, #3660	; 0xe4c
 800340e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003412:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i<n; i++){
 8003416:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800341a:	3301      	adds	r3, #1
 800341c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003420:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003424:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003428:	429a      	cmp	r2, r3
 800342a:	dbc6      	blt.n	80033ba <calibrate+0x6c2>
            }
        electrical_offset = fmod(electrical_offset*NPP, 360);                                        // convert mechanical angle to electrical angle
 800342c:	f640 634c 	movw	r3, #3660	; 0xe4c
 8003430:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800343c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003440:	ee17 0a90 	vmov	r0, s15
 8003444:	f7fd f8a8 	bl	8000598 <__aeabi_f2d>
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003450:	f2c4 0376 	movt	r3, #16502	; 0x4076
 8003454:	ec43 2b17 	vmov	d7, r2, r3
 8003458:	eeb0 1a47 	vmov.f32	s2, s14
 800345c:	eef0 1a67 	vmov.f32	s3, s15
 8003460:	ec41 0b10 	vmov	d0, r0, r1
 8003464:	f00a fff6 	bl	800e454 <fmod>
 8003468:	ec53 2b10 	vmov	r2, r3, d0
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f7fd fbe2 	bl	8000c38 <__aeabi_d2f>
 8003474:	4602      	mov	r2, r0
 8003476:	f640 634c 	movw	r3, #3660	; 0xe4c
 800347a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800347e:	601a      	str	r2, [r3, #0]
        /// FIR n-sample average, where n = number of samples in one electrical cycle
        /// This filter has zero gain at electrical frequency and all integer multiples
        /// So cogging effects should be completely filtered out.


        float mean = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800348c:	e026      	b.n	80034dc <calibrate+0x7e4>
            error[i] = 0.5f*(error_f[i] + error_b[n-i-1]);
 800348e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	ed93 7a00 	vldr	s14, [r3]
 800349e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80034a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80034c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 80034d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034d6:	3301      	adds	r3, #1
 80034d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80034dc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80034e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034e4:	429a      	cmp	r2, r3
 80034e6:	dbd2      	blt.n	800348e <calibrate+0x796>
            }
        for (int i = 0; i<n; i++){
 80034e8:	2300      	movs	r3, #0
 80034ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80034ee:	e0ab      	b.n	8003648 <calibrate+0x950>
            for(int j = 0; j<window; j++){
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80034f6:	e052      	b.n	800359e <calibrate+0x8a6>
                int ind = -window/2 + j + i;                                    // Indexes from -window/2 to + window/2
 80034f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034fc:	0fda      	lsrs	r2, r3, #31
 80034fe:	4413      	add	r3, r2
 8003500:	105b      	asrs	r3, r3, #1
 8003502:	425b      	negs	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800350a:	4413      	add	r3, r2
 800350c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003510:	4413      	add	r3, r2
 8003512:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                if(ind<0){
 8003516:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800351a:	2b00      	cmp	r3, #0
 800351c:	da07      	bge.n	800352e <calibrate+0x836>
                    ind += n;}                                                  // Moving average wraps around
 800351e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003522:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003526:	4413      	add	r3, r2
 8003528:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800352c:	e00c      	b.n	8003548 <calibrate+0x850>
                else if(ind > n-1) {
 800352e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003532:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003536:	429a      	cmp	r2, r3
 8003538:	dc06      	bgt.n	8003548 <calibrate+0x850>
                    ind -= n;}
 800353a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800353e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                if(error[ind] == NAN)while(1);
                error_filt[i] += error[ind]/(float)window;
 8003548:	f640 2308 	movw	r3, #2568	; 0xa08
 800354c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003550:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003554:	0092      	lsls	r2, r2, #2
 8003556:	4413      	add	r3, r2
 8003558:	ed93 7a00 	vldr	s14, [r3]
 800355c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003560:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	ed93 6a00 	vldr	s12, [r3]
 800356c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003578:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800357c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003580:	f640 2308 	movw	r3, #2568	; 0xa08
 8003584:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003588:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800358c:	0092      	lsls	r2, r2, #2
 800358e:	4413      	add	r3, r2
 8003590:	edc3 7a00 	vstr	s15, [r3]
            for(int j = 0; j<window; j++){
 8003594:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003598:	3301      	adds	r3, #1
 800359a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800359e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80035a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035a6:	429a      	cmp	r2, r3
 80035a8:	dba6      	blt.n	80034f8 <calibrate+0x800>
                if(error_filt[i] == NAN)while(1);
                }
            if(i<window){
 80035aa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80035ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035b2:	429a      	cmp	r2, r3
 80035b4:	da2b      	bge.n	800360e <calibrate+0x916>
                cogging_current[i] = current*sinf((error[i] - error_filt[i])*NPP);
 80035b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80035ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	ed93 7a00 	vldr	s14, [r3]
 80035c6:	f640 2308 	movw	r3, #2568	; 0xa08
 80035ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035de:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80035e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035e6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ea:	f00a ffd1 	bl	800e590 <sinf>
 80035ee:	eeb0 7a40 	vmov.f32	s14, s0
 80035f2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	33d0      	adds	r3, #208	; 0xd0
 8003602:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003606:	4413      	add	r3, r2
 8003608:	3bbc      	subs	r3, #188	; 0xbc
 800360a:	edc3 7a00 	vstr	s15, [r3]
                }
//            PrintServerPrintf("%.4f   %4f    %.4f   %.4f\n\r", error[i], error_filt[i], error_f[i], error_b[i]);
//            HAL_Delay(10);
            mean += error_filt[i]/n;
 800360e:	f640 2308 	movw	r3, #2568	; 0xa08
 8003612:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003616:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800361a:	0092      	lsls	r2, r2, #2
 800361c:	4413      	add	r3, r2
 800361e:	edd3 6a00 	vldr	s13, [r3]
 8003622:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800362e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003632:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 8003636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800363a:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
        for (int i = 0; i<n; i++){
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003642:	3301      	adds	r3, #1
 8003644:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003648:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800364c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003650:	429a      	cmp	r2, r3
 8003652:	f6ff af4d 	blt.w	80034f0 <calibrate+0x7f8>
            }
        int raw_offset = (raw_f[0] + raw_b[n-1])/2;                             //Insensitive to errors in this direction, so 2 points is plenty
 8003656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003660:	1e59      	subs	r1, r3, #1
 8003662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003666:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800366a:	4413      	add	r3, r2
 800366c:	0fda      	lsrs	r2, r3, #31
 800366e:	4413      	add	r3, r2
 8003670:	105b      	asrs	r3, r3, #1
 8003672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

//        ps->WriteLUT(lut);                                                      // write lookup table to position sensor object
        //memcpy(controller->cogging, cogging_current, sizeof(controller->cogging));  //compensation doesn't actually work yet....

//        memcpy(&ENCODER_LUT, lut, 128*4);                                 // copy the lookup table to the flash array
        PrintServerPrintf("\n\rEncoder Electrical Offset (deg) %f\n\r",  electrical_offset);
 8003676:	f640 634c 	movw	r3, #3660	; 0xe4c
 800367a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc ff89 	bl	8000598 <__aeabi_f2d>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	f24f 5060 	movw	r0, #62816	; 0xf560
 800368e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003692:	f000 fd26 	bl	80040e2 <PrintServerPrintf>
 8003696:	46b5      	mov	sp, r6
//        for (int i = 0; i<LUT_SIZE; i++){
//        	float wanted_pos = i *360.0f / LUT_SIZE;
//        	motor_lut[i] = find_closest(error_test, SIZE*NPP, wanted_pos);
//        	PrintServerPrintf("%d\n\r", motor_lut[i]);
//        }
    }
 8003698:	bf00      	nop
 800369a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800369e:	46bd      	mov	sp, r7
 80036a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080036a4 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80036ac:	2201      	movs	r2, #1
 80036ae:	2140      	movs	r1, #64	; 0x40
 80036b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80036b4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80036b8:	f004 fd70 	bl	800819c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 80036bc:	2201      	movs	r2, #1
 80036be:	2104      	movs	r1, #4
 80036c0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80036c4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80036c8:	f004 fd68 	bl	800819c <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 80036cc:	f640 6370 	movw	r3, #3696	; 0xe70
 80036d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	601a      	str	r2, [r3, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 80036d8:	f640 6350 	movw	r3, #3664	; 0xe50
 80036dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036e0:	2274      	movs	r2, #116	; 0x74
 80036e2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2140      	movs	r1, #64	; 0x40
 80036e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80036ec:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80036f0:	f004 fd54 	bl	800819c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 80036f4:	2200      	movs	r2, #0
 80036f6:	2104      	movs	r1, #4
 80036f8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80036fc:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003700:	f004 fd4c 	bl	800819c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8003704:	2305      	movs	r3, #5
 8003706:	f640 6258 	movw	r2, #3672	; 0xe58
 800370a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800370e:	f640 6150 	movw	r1, #3664	; 0xe50
 8003712:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003716:	f641 2034 	movw	r0, #6708	; 0x1a34
 800371a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800371e:	f005 fea1 	bl	8009464 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8003722:	2305      	movs	r3, #5
 8003724:	f640 6268 	movw	r2, #3688	; 0xe68
 8003728:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800372c:	f640 6160 	movw	r1, #3680	; 0xe60
 8003730:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003734:	f641 2098 	movw	r0, #6808	; 0x1a98
 8003738:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800373c:	f005 fe92 	bl	8009464 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 8003740:	f641 304c 	movw	r0, #6988	; 0x1b4c
 8003744:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003748:	f006 fa4b 	bl	8009be2 <HAL_TIM_Base_Start_IT>

}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	f641 2334 	movw	r3, #6708	; 0x1a34
 8003762:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003766:	429a      	cmp	r2, r3
 8003768:	f040 813f 	bne.w	80039ea <HAL_SPI_TxRxCpltCallback+0x296>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 800376c:	2201      	movs	r2, #1
 800376e:	2140      	movs	r1, #64	; 0x40
 8003770:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003774:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003778:	f004 fd10 	bl	800819c <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 800377c:	f640 6358 	movw	r3, #3672	; 0xe58
 8003780:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	f640 6374 	movw	r3, #3700	; 0xe74
 800378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003790:	611a      	str	r2, [r3, #16]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 8003792:	f640 6358 	movw	r3, #3672	; 0xe58
 8003796:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	019b      	lsls	r3, r3, #6
 800379e:	461a      	mov	r2, r3
 80037a0:	f640 6358 	movw	r3, #3672	; 0xe58
 80037a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037a8:	785b      	ldrb	r3, [r3, #1]
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	0a1a      	lsrs	r2, r3, #8
 80037ba:	f640 6374 	movw	r3, #3700	; 0xe74
 80037be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037c2:	601a      	str	r2, [r3, #0]
		data_encoders.Encoder1_pos_raw = (uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2);
 80037c4:	f640 6358 	movw	r3, #3672	; 0xe58
 80037c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	019b      	lsls	r3, r3, #6
 80037d0:	461a      	mov	r2, r3
 80037d2:	f640 6358 	movw	r3, #3672	; 0xe58
 80037d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037da:	785b      	ldrb	r3, [r3, #1]
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	431a      	orrs	r2, r3
 80037e2:	f640 6374 	movw	r3, #3700	; 0xe74
 80037e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037ea:	609a      	str	r2, [r3, #8]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80037ec:	f640 6374 	movw	r3, #3700	; 0xe74
 80037f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f640 6394 	movw	r3, #3732	; 0xe94
 80037fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	1ad2      	subs	r2, r2, r3
 8003804:	f64b 7320 	movw	r3, #48928	; 0xbf20
 8003808:	f2c0 0302 	movt	r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	dd16      	ble.n	800383e <HAL_SPI_TxRxCpltCallback+0xea>
 8003810:	f640 6374 	movw	r3, #3700	; 0xe74
 8003814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	f640 6394 	movw	r3, #3732	; 0xe94
 8003820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 800382c:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003838:	edc7 7a03 	vstr	s15, [r7, #12]
 800383c:	e03a      	b.n	80038b4 <HAL_SPI_TxRxCpltCallback+0x160>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 800383e:	f640 6374 	movw	r3, #3700	; 0xe74
 8003842:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	f640 6394 	movw	r3, #3732	; 0xe94
 800384e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	f244 03e0 	movw	r3, #16608	; 0x40e0
 800385a:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
 800385e:	429a      	cmp	r2, r3
 8003860:	da16      	bge.n	8003890 <HAL_SPI_TxRxCpltCallback+0x13c>
 8003862:	f640 6374 	movw	r3, #3700	; 0xe74
 8003866:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	f640 6394 	movw	r3, #3732	; 0xe94
 8003872:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 800387e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800388a:	edc7 7a03 	vstr	s15, [r7, #12]
 800388e:	e011      	b.n	80038b4 <HAL_SPI_TxRxCpltCallback+0x160>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 8003890:	f640 6374 	movw	r3, #3700	; 0xe74
 8003894:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	f640 6394 	movw	r3, #3732	; 0xe94
 80038a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b0:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 80038b4:	f640 6374 	movw	r3, #3700	; 0xe74
 80038b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	f640 6394 	movw	r3, #3732	; 0xe94
 80038c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038c8:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 80038ca:	f640 6390 	movw	r3, #3728	; 0xe90
 80038ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038d2:	ed93 7a00 	vldr	s14, [r3]
 80038d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	f640 6390 	movw	r3, #3728	; 0xe90
 80038e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038e6:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 80038ea:	f640 6390 	movw	r3, #3728	; 0xe90
 80038ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038f2:	ed93 7a00 	vldr	s14, [r3]
 80038f6:	f640 6398 	movw	r3, #3736	; 0xe98
 80038fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	f640 639c 	movw	r3, #3740	; 0xe9c
 8003906:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	4413      	add	r3, r2
 800390e:	edd3 7a00 	vldr	s15, [r3]
 8003912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003916:	f640 6390 	movw	r3, #3728	; 0xe90
 800391a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800391e:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 8003922:	f640 6398 	movw	r3, #3736	; 0xe98
 8003926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	f640 639c 	movw	r3, #3740	; 0xe9c
 8003932:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003936:	0092      	lsls	r2, r2, #2
 8003938:	4413      	add	r3, r2
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]
		velocity_index++;
 800393e:	f640 6398 	movw	r3, #3736	; 0xe98
 8003942:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	3301      	adds	r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	f640 6398 	movw	r3, #3736	; 0xe98
 8003950:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003954:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 8003956:	f640 6398 	movw	r3, #3736	; 0xe98
 800395a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d105      	bne.n	8003970 <HAL_SPI_TxRxCpltCallback+0x21c>
 8003964:	f640 6398 	movw	r3, #3736	; 0xe98
 8003968:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 8003970:	f640 6390 	movw	r3, #3728	; 0xe90
 8003974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003980:	f2c4 631c 	movt	r3, #17948	; 0x461c
 8003984:	ee07 3a10 	vmov	s14, r3
 8003988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800398c:	2300      	movs	r3, #0
 800398e:	f2c4 2370 	movt	r3, #17008	; 0x4270
 8003992:	ee07 3a10 	vmov	s14, r3
 8003996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800399a:	2300      	movs	r3, #0
 800399c:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 80039a0:	ee06 3a90 	vmov	s13, r3
 80039a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039a8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80039ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b4:	ee17 2a90 	vmov	r2, s15
 80039b8:	f640 6374 	movw	r3, #3700	; 0xe74
 80039bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039c0:	615a      	str	r2, [r3, #20]
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
 80039c2:	f640 6358 	movw	r3, #3672	; 0xe58
 80039c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039ca:	789b      	ldrb	r3, [r3, #2]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	b21a      	sxth	r2, r3
 80039d0:	f640 6358 	movw	r3, #3672	; 0xe58
 80039d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039d8:	78db      	ldrb	r3, [r3, #3]
 80039da:	b21b      	sxth	r3, r3
 80039dc:	4313      	orrs	r3, r2
 80039de:	b21a      	sxth	r2, r3
 80039e0:	f640 6374 	movw	r3, #3700	; 0xe74
 80039e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039e8:	831a      	strh	r2, [r3, #24]
	}
	if (hspi == &hspi3) {
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	f641 2398 	movw	r3, #6808	; 0x1a98
 80039f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d12f      	bne.n	8003a58 <HAL_SPI_TxRxCpltCallback+0x304>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 80039f8:	2201      	movs	r2, #1
 80039fa:	2104      	movs	r1, #4
 80039fc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003a00:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003a04:	f004 fbca 	bl	800819c <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 8003a08:	f640 6368 	movw	r3, #3688	; 0xe68
 8003a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a10:	78db      	ldrb	r3, [r3, #3]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	b21a      	sxth	r2, r3
 8003a16:	f640 6368 	movw	r3, #3688	; 0xe68
 8003a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a1e:	789b      	ldrb	r3, [r3, #2]
 8003a20:	b21b      	sxth	r3, r3
 8003a22:	4313      	orrs	r3, r2
 8003a24:	b21a      	sxth	r2, r3
 8003a26:	f640 6374 	movw	r3, #3700	; 0xe74
 8003a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a2e:	835a      	strh	r2, [r3, #26]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8003a30:	f640 6368 	movw	r3, #3688	; 0xe68
 8003a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	019a      	lsls	r2, r3, #6
 8003a3c:	f640 6368 	movw	r3, #3688	; 0xe68
 8003a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a44:	785b      	ldrb	r3, [r3, #1]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f640 6374 	movw	r3, #3700	; 0xe74
 8003a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a56:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8003a58:	f640 6370 	movw	r3, #3696	; 0xe70
 8003a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f640 6074 	movw	r0, #3700	; 0xe74
 8003a66:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003a6a:	4798      	blx	r3
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2140      	movs	r1, #64	; 0x40
 8003a80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a84:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003a88:	f004 fb88 	bl	800819c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2104      	movs	r1, #4
 8003a90:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003a94:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003a98:	f004 fb80 	bl	800819c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8003a9c:	2305      	movs	r3, #5
 8003a9e:	f640 6258 	movw	r2, #3672	; 0xe58
 8003aa2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003aa6:	f640 6150 	movw	r1, #3664	; 0xe50
 8003aaa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003aae:	f641 2034 	movw	r0, #6708	; 0x1a34
 8003ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ab6:	f005 fcd5 	bl	8009464 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8003aba:	2305      	movs	r3, #5
 8003abc:	f640 6268 	movw	r2, #3688	; 0xe68
 8003ac0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003ac4:	f640 6160 	movw	r1, #3680	; 0xe60
 8003ac8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003acc:	f641 2098 	movw	r0, #6808	; 0x1a98
 8003ad0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ad4:	f005 fcc6 	bl	8009464 <HAL_SPI_TransmitReceive_DMA>

	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae2:	f004 fb5b 	bl	800819c <HAL_GPIO_WritePin>
	run();
 8003ae6:	f7fd ff45 	bl	8001974 <run>
	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af4:	f004 fb52 	bl	800819c <HAL_GPIO_WritePin>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <flash_write>:

Flash* flash_read(uint32_t address){
    return (Flash*)address;
}

void flash_write(uint32_t page, uint64_t data[], uint32_t size){
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
	uint32_t PageError;
	FLASH_EraseInitTypeDef pEraseInit = {
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	2301      	movs	r3, #1
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	623b      	str	r3, [r7, #32]
			.NbPages = 1,
			.Page = page,
			.TypeErase = FLASH_TYPEERASE_PAGES
	};

	HAL_FLASH_Unlock();
 8003b1c:	f004 f81f 	bl	8007b5e <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8003b20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f004 f933 	bl	8007d96 <HAL_FLASHEx_Erase>

    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8003b30:	2300      	movs	r3, #0
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b34:	e014      	b.n	8003b60 <flash_write+0x60>
    	uint32_t address = FLASH_BASE + PAGE_SIZE*page + i*sizeof(uint64_t);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b54:	2000      	movs	r0, #0
 8003b56:	f004 f865 	bl	8007c24 <HAL_FLASH_Program>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	08da      	lsrs	r2, r3, #3
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d8e5      	bhi.n	8003b36 <flash_write+0x36>
    }
    HAL_FLASH_Lock();
 8003b6a:	f004 f812 	bl	8007b92 <HAL_FLASH_Lock>
}
 8003b6e:	bf00      	nop
 8003b70:	3730      	adds	r7, #48	; 0x30
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <Flash_init>:

void Flash_init(){
 8003b76:	b580      	push	{r7, lr}
 8003b78:	af00      	add	r7, sp, #0
	if (memcmp(ptr, &RAM, RAM_COMPARE)){
 8003b7a:	f240 03b0 	movw	r3, #176	; 0xb0
 8003b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	225e      	movs	r2, #94	; 0x5e
 8003b86:	f240 01b8 	movw	r1, #184	; 0xb8
 8003b8a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f008 fb58 	bl	800c244 <memcmp>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01b      	beq.n	8003bd2 <Flash_init+0x5c>
		memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 8003b9a:	f240 03b0 	movw	r3, #176	; 0xb0
 8003b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f640 60b0 	movw	r0, #3760	; 0xeb0
 8003bae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003bb2:	f008 fbd6 	bl	800c362 <memcpy>
		memcpy(&Stored_in_RAM, &RAM, RAM_COMPARE);
 8003bb6:	225e      	movs	r2, #94	; 0x5e
 8003bb8:	f240 01b8 	movw	r1, #184	; 0xb8
 8003bbc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003bc0:	f640 60b0 	movw	r0, #3760	; 0xeb0
 8003bc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003bc8:	f008 fbcb 	bl	800c362 <memcpy>
		Flash_save();
 8003bcc:	f000 f811 	bl	8003bf2 <Flash_save>
	}
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
}
 8003bd0:	e00d      	b.n	8003bee <Flash_init+0x78>
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 8003bd2:	f240 03b0 	movw	r3, #176	; 0xb0
 8003bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003be0:	4619      	mov	r1, r3
 8003be2:	f640 60b0 	movw	r0, #3760	; 0xeb0
 8003be6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003bea:	f008 fbba 	bl	800c362 <memcpy>
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <Flash_save>:

void Flash_save(){
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	af00      	add	r7, sp, #0
	flash_write(PAGE_NUMBER, (uint64_t*)&Stored_in_RAM, sizeof(Flash));
 8003bf6:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003bfa:	f640 61b0 	movw	r1, #3760	; 0xeb0
 8003bfe:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003c02:	203f      	movs	r0, #63	; 0x3f
 8003c04:	f7ff ff7c 	bl	8003b00 <flash_write>
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <Flash_get_values>:

Flash *Flash_get_values(){
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
	return &Stored_in_RAM; //*ptr;// = flash_read(FLASH_BASE + PAGE_SIZE*PAGE_NUMBER);
 8003c10:	f640 63b0 	movw	r3, #3760	; 0xeb0
 8003c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80a1 	beq.w	8003d78 <Compute+0x156>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c46:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	ed93 7a00 	vldr	s14, [r3]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c5a:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	edd3 6a06 	vldr	s13, [r3, #24]
 8003c6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00e      	beq.n	8003ca4 <Compute+0x82>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	ed93 7a03 	vldr	s14, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb8:	dd04      	ble.n	8003cc4 <Compute+0xa2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e00e      	b.n	8003ce2 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	ed93 7a03 	vldr	s14, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	edd3 7a08 	vldr	s15, [r3, #32]
 8003cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd8:	d503      	bpl.n	8003ce2 <Compute+0xc0>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1a      	ldr	r2, [r3, #32]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <Compute+0xe0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	edc3 7a01 	vstr	s15, [r3, #4]
 8003d00:	e002      	b.n	8003d08 <Compute+0xe6>
	else val->Output = 0;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	edd3 6a03 	vldr	s13, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	ed93 6a07 	vldr	s12, [r3, #28]
 8003d1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	dd04      	ble.n	8003d50 <Compute+0x12e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	e00e      	b.n	8003d6e <Compute+0x14c>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d64:	d503      	bpl.n	8003d6e <Compute+0x14c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	e000      	b.n	8003d7a <Compute+0x158>
	if(!val->inAuto) return;
 8003d78:	bf00      	nop
}
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b089      	sub	sp, #36	; 0x24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6178      	str	r0, [r7, #20]
 8003d8c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003d90:	edc7 0a03 	vstr	s1, [r7, #12]
 8003d94:	ed87 1a02 	vstr	s2, [r7, #8]
 8003d98:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8003d9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003da0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da8:	f100 80a3 	bmi.w	8003ef2 <SetTunings+0x16e>
 8003dac:	edd7 7a03 	vldr	s15, [r7, #12]
 8003db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	f100 809b 	bmi.w	8003ef2 <SetTunings+0x16e>
 8003dbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc8:	f100 8093 	bmi.w	8003ef2 <SetTunings+0x16e>
 8003dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	f100 808b 	bmi.w	8003ef2 <SetTunings+0x16e>
 8003ddc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dec:	f300 8081 	bgt.w	8003ef2 <SetTunings+0x16e>

   val->pOnE = pOn>0; //some p on error is desired;
 8003df0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	bfcc      	ite	gt
 8003dfe:	2301      	movgt	r3, #1
 8003e00:	2300      	movle	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 8003e0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1c:	bf4c      	ite	mi
 8003e1e:	2301      	movmi	r3, #1
 8003e20:	2300      	movpl	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e38:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003e3c:	f6c4 1374 	movt	r3, #18804	; 0x4974
 8003e40:	ee06 3a90 	vmov	s13, r3
 8003e44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e48:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8003e52:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e56:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 8003e64:	edd7 6a02 	vldr	s13, [r7, #8]
 8003e68:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d120      	bne.n	8003ec0 <SetTunings+0x13c>
   {
	  val->kp = (0 - val->kp);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e84:	2300      	movs	r3, #0
 8003e86:	ee07 3a10 	vmov	s14, r3
 8003e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	ee07 3a10 	vmov	s14, r3
 8003ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	edd3 7a07 	vldr	s15, [r3, #28]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	ee07 3a10 	vmov	s14, r3
 8003eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ec6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8003ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8003ef0:	e000      	b.n	8003ef4 <SetTunings+0x170>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8003ef2:	bf00      	nop
}
 8003ef4:	3724      	adds	r7, #36	; 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b085      	sub	sp, #20
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	dd25      	ble.n	8003f5a <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8003f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f28:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	edd3 6a07 	vldr	s13, [r3, #28]
 8003f46:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f72:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8003f76:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f86:	dc44      	bgt.n	8004012 <SetOutputLimits+0xac>
   val->outMin = Min;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa8:	dd04      	ble.n	8003fb4 <SetOutputLimits+0x4e>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	e00e      	b.n	8003fd2 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	edd3 7a08 	vldr	s15, [r3, #32]
 8003fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc8:	d503      	bpl.n	8003fd2 <SetOutputLimits+0x6c>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1a      	ldr	r2, [r3, #32]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe6:	dd04      	ble.n	8003ff2 <SetOutputLimits+0x8c>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	60da      	str	r2, [r3, #12]
 8003ff0:	e010      	b.n	8004014 <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	d505      	bpl.n	8004014 <SetOutputLimits+0xae>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	e000      	b.n	8004014 <SetOutputLimits+0xae>
   if(Min > Max) return;
 8004012:	bf00      	nop
}
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b01      	cmp	r3, #1
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800403e:	2a00      	cmp	r2, #0
 8004040:	bf0c      	ite	eq
 8004042:	2201      	moveq	r2, #1
 8004044:	2200      	movne	r2, #0
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	4293      	cmp	r3, r2
 800404a:	d102      	bne.n	8004052 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f808 	bl	8004062 <Initialize>
    }
    val->inAuto = newAuto;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <Initialize>:

void Initialize(PID_instance *val)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800408a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408e:	dd04      	ble.n	800409a <Initialize+0x38>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8004098:	e00f      	b.n	80040ba <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	ed93 7a03 	vldr	s14, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80040a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ae:	d400      	bmi.n	80040b2 <Initialize+0x50>
}
 80040b0:	e003      	b.n	80040ba <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 80040e2:	b40f      	push	{r0, r1, r2, r3}
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 80040ea:	f107 031c 	add.w	r3, r7, #28
 80040ee:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040f8:	f241 3068 	movw	r0, #4968	; 0x1368
 80040fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004100:	f008 f892 	bl	800c228 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8004104:	f240 5370 	movw	r3, #1392	; 0x570
 8004108:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800410c:	681c      	ldr	r4, [r3, #0]
 800410e:	f241 3068 	movw	r0, #4968	; 0x1368
 8004112:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004116:	f7fc f8d3 	bl	80002c0 <strlen>
 800411a:	4603      	mov	r3, r0
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	f241 3168 	movw	r1, #4968	; 0x1368
 8004124:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004128:	4620      	mov	r0, r4
 800412a:	f006 fcbe 	bl	800aaaa <HAL_UART_Transmit_DMA>
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004138:	b004      	add	sp, #16
 800413a:	4770      	bx	lr

0800413c <dac_value>:
#define Vref 3000

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};

void dac_value(uint16_t V_dac){
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	4613      	mov	r3, r2
 800414a:	031b      	lsls	r3, r3, #12
 800414c:	1a9a      	subs	r2, r3, r2
 800414e:	f241 53b4 	movw	r3, #5556	; 0x15b4
 8004152:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b21b      	sxth	r3, r3
 800415a:	fb92 f3f3 	sdiv	r3, r2, r3
 800415e:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8004160:	89fb      	ldrh	r3, [r7, #14]
 8004162:	2200      	movs	r2, #0
 8004164:	2100      	movs	r1, #0
 8004166:	f641 0004 	movw	r0, #6148	; 0x1804
 800416a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800416e:	f002 fe6c 	bl	8006e4a <HAL_DAC_SetValue>
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <ADC_CAL>:

void ADC_CAL(){
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 800417e:	f240 5374 	movw	r3, #1396	; 0x574
 8004182:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004190:	fb02 f303 	mul.w	r3, r2, r3
 8004194:	461a      	mov	r2, r3
 8004196:	f241 5368 	movw	r3, #5480	; 0x1568
 800419a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	b21a      	sxth	r2, r3
 80041a8:	f241 53b4 	movw	r3, #5556	; 0x15b4
 80041ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041b0:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 80041b2:	f241 5368 	movw	r3, #5480	; 0x1568
 80041b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	091a      	lsrs	r2, r3, #4
 80041be:	f241 53b4 	movw	r3, #5556	; 0x15b4
 80041c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b21b      	sxth	r3, r3
 80041ca:	fb03 f202 	mul.w	r2, r3, r2
 80041ce:	f240 1301 	movw	r3, #257	; 0x101
 80041d2:	f2c0 0310 	movt	r3, #16
 80041d6:	fba3 1302 	umull	r1, r3, r3, r2
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	0852      	lsrs	r2, r2, #1
 80041de:	4413      	add	r3, r2
 80041e0:	0adb      	lsrs	r3, r3, #11
 80041e2:	461a      	mov	r2, r3
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	011a      	lsls	r2, r3, #4
 80041ec:	441a      	add	r2, r3
 80041ee:	f248 531f 	movw	r3, #34079	; 0x851f
 80041f2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80041f6:	fb83 1302 	smull	r1, r3, r3, r2
 80041fa:	1159      	asrs	r1, r3, #5
 80041fc:	17d3      	asrs	r3, r2, #31
 80041fe:	1aca      	subs	r2, r1, r3
 8004200:	f241 53e0 	movw	r3, #5600	; 0x15e0
 8004204:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	441a      	add	r2, r3
 800420c:	f241 53e0 	movw	r3, #5600	; 0x15e0
 8004210:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004214:	601a      	str	r2, [r3, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8004216:	f241 5368 	movw	r3, #5480	; 0x1568
 800421a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	091a      	lsrs	r2, r3, #4
 8004222:	f241 53b4 	movw	r3, #5556	; 0x15b4
 8004226:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b21b      	sxth	r3, r3
 800422e:	fb03 f202 	mul.w	r2, r3, r2
 8004232:	f240 1301 	movw	r3, #257	; 0x101
 8004236:	f2c0 0310 	movt	r3, #16
 800423a:	fba3 1302 	umull	r1, r3, r3, r2
 800423e:	1ad2      	subs	r2, r2, r3
 8004240:	0852      	lsrs	r2, r2, #1
 8004242:	4413      	add	r3, r2
 8004244:	0adb      	lsrs	r3, r3, #11
 8004246:	461a      	mov	r2, r3
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	011a      	lsls	r2, r3, #4
 8004250:	441a      	add	r2, r3
 8004252:	f248 531f 	movw	r3, #34079	; 0x851f
 8004256:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800425a:	fb83 1302 	smull	r1, r3, r3, r2
 800425e:	1159      	asrs	r1, r3, #5
 8004260:	17d3      	asrs	r3, r2, #31
 8004262:	1aca      	subs	r2, r1, r3
 8004264:	f241 53e0 	movw	r3, #5600	; 0x15e0
 8004268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	441a      	add	r2, r3
 8004270:	f241 53e0 	movw	r3, #5600	; 0x15e0
 8004274:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004278:	605a      	str	r2, [r3, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 800427a:	f241 5368 	movw	r3, #5480	; 0x1568
 800427e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	091a      	lsrs	r2, r3, #4
 8004286:	f241 53b4 	movw	r3, #5556	; 0x15b4
 800428a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b21b      	sxth	r3, r3
 8004292:	fb03 f202 	mul.w	r2, r3, r2
 8004296:	f240 1301 	movw	r3, #257	; 0x101
 800429a:	f2c0 0310 	movt	r3, #16
 800429e:	fba3 1302 	umull	r1, r3, r3, r2
 80042a2:	1ad2      	subs	r2, r2, r3
 80042a4:	0852      	lsrs	r2, r2, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	0adb      	lsrs	r3, r3, #11
 80042aa:	461a      	mov	r2, r3
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	011a      	lsls	r2, r3, #4
 80042b4:	441a      	add	r2, r3
 80042b6:	f248 531f 	movw	r3, #34079	; 0x851f
 80042ba:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80042be:	fb83 1302 	smull	r1, r3, r3, r2
 80042c2:	1159      	asrs	r1, r3, #5
 80042c4:	17d3      	asrs	r3, r2, #31
 80042c6:	1aca      	subs	r2, r1, r3
 80042c8:	f241 53e0 	movw	r3, #5600	; 0x15e0
 80042cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	441a      	add	r2, r3
 80042d4:	f241 53e0 	movw	r3, #5600	; 0x15e0
 80042d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042dc:	609a      	str	r2, [r3, #8]
	calibrating--;
 80042de:	f241 53dc 	movw	r3, #5596	; 0x15dc
 80042e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	f241 53dc 	movw	r3, #5596	; 0x15dc
 80042f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042f4:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 80042f6:	f241 53dc 	movw	r3, #5596	; 0x15dc
 80042fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d132      	bne.n	800436a <ADC_CAL+0x1f0>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8004304:	f241 53e0 	movw	r3, #5600	; 0x15e0
 8004308:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8004312:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8004316:	fba3 2302 	umull	r2, r3, r3, r2
 800431a:	099a      	lsrs	r2, r3, #6
 800431c:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8004320:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004324:	601a      	str	r2, [r3, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8004326:	f241 53e0 	movw	r3, #5600	; 0x15e0
 800432a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8004334:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8004338:	fba3 2302 	umull	r2, r3, r3, r2
 800433c:	099a      	lsrs	r2, r3, #6
 800433e:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8004342:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004346:	605a      	str	r2, [r3, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8004348:	f241 53e0 	movw	r3, #5600	; 0x15e0
 800434c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8004356:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800435a:	fba3 2302 	umull	r2, r3, r3, r2
 800435e:	099a      	lsrs	r2, r3, #6
 8004360:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8004364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004368:	609a      	str	r2, [r3, #8]
	}
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 800437c:	f241 53dc 	movw	r3, #5596	; 0x15dc
 8004380:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004388:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 800438a:	f241 53b8 	movw	r3, #5560	; 0x15b8
 800438e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8004396:	2208      	movs	r2, #8
 8004398:	f241 5168 	movw	r1, #5480	; 0x1568
 800439c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80043a0:	f241 6044 	movw	r0, #5700	; 0x1644
 80043a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80043a8:	f002 fb75 	bl	8006a96 <HAL_ADC_Start_DMA>


	HAL_DAC_Init(&hdac1);
 80043ac:	f641 0004 	movw	r0, #6148	; 0x1804
 80043b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80043b4:	f002 fd03 	bl	8006dbe <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80043b8:	2100      	movs	r1, #0
 80043ba:	f641 0004 	movw	r0, #6148	; 0x1804
 80043be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80043c2:	f002 fd0e 	bl	8006de2 <HAL_DAC_Start>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 80043d6:	f241 53cc 	movw	r3, #5580	; 0x15cc
 80043da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 80043e2:	2208      	movs	r2, #8
 80043e4:	f241 5188 	movw	r1, #5512	; 0x1588
 80043e8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80043ec:	f241 60b0 	movw	r0, #5808	; 0x16b0
 80043f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80043f4:	f002 fb4f 	bl	8006a96 <HAL_ADC_Start_DMA>
}
 80043f8:	bf00      	nop
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	f241 6344 	movw	r3, #5700	; 0x1644
 800440e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004412:	429a      	cmp	r2, r3
 8004414:	f040 80d6 	bne.w	80045c4 <HAL_ADC_ConvHalfCpltCallback+0x1c4>
		if(calibrating)ADC_CAL();
 8004418:	f241 53dc 	movw	r3, #5596	; 0x15dc
 800441c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_ADC_ConvHalfCpltCallback+0x2c>
 8004426:	f7ff fea8 	bl	800417a <ADC_CAL>
 800442a:	e0cb      	b.n	80045c4 <HAL_ADC_ConvHalfCpltCallback+0x1c4>
		else {
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 800442c:	f240 5374 	movw	r3, #1396	; 0x574
 8004430:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	461a      	mov	r2, r3
 8004444:	f241 5368 	movw	r3, #5480	; 0x1568
 8004448:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	b21a      	sxth	r2, r3
 8004456:	f241 53b4 	movw	r3, #5556	; 0x15b4
 800445a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800445e:	801a      	strh	r2, [r3, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8004460:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8004464:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4619      	mov	r1, r3
 800446c:	f241 5368 	movw	r3, #5480	; 0x1568
 8004470:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	da00      	bge.n	800447c <HAL_ADC_ConvHalfCpltCallback+0x7c>
 800447a:	330f      	adds	r3, #15
 800447c:	111b      	asrs	r3, r3, #4
 800447e:	461a      	mov	r2, r3
 8004480:	f241 53b4 	movw	r3, #5556	; 0x15b4
 8004484:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b21b      	sxth	r3, r3
 800448c:	fb02 f303 	mul.w	r3, r2, r3
 8004490:	2281      	movs	r2, #129	; 0x81
 8004492:	f2c8 0208 	movt	r2, #32776	; 0x8008
 8004496:	fb82 0203 	smull	r0, r2, r2, r3
 800449a:	441a      	add	r2, r3
 800449c:	12d2      	asrs	r2, r2, #11
 800449e:	17db      	asrs	r3, r3, #31
 80044a0:	1ad2      	subs	r2, r2, r3
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	011a      	lsls	r2, r3, #4
 80044aa:	441a      	add	r2, r3
 80044ac:	f248 531f 	movw	r3, #34079	; 0x851f
 80044b0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80044b4:	fb83 0302 	smull	r0, r3, r3, r2
 80044b8:	115b      	asrs	r3, r3, #5
 80044ba:	17d2      	asrs	r2, r2, #31
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	440b      	add	r3, r1
 80044c0:	2232      	movs	r2, #50	; 0x32
 80044c2:	fb03 f202 	mul.w	r2, r3, r2
 80044c6:	f241 53bc 	movw	r3, #5564	; 0x15bc
 80044ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044ce:	601a      	str	r2, [r3, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80044d0:	f241 53a8 	movw	r3, #5544	; 0x15a8
 80044d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4619      	mov	r1, r3
 80044dc:	f241 5368 	movw	r3, #5480	; 0x1568
 80044e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	da00      	bge.n	80044ec <HAL_ADC_ConvHalfCpltCallback+0xec>
 80044ea:	330f      	adds	r3, #15
 80044ec:	111b      	asrs	r3, r3, #4
 80044ee:	461a      	mov	r2, r3
 80044f0:	f241 53b4 	movw	r3, #5556	; 0x15b4
 80044f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b21b      	sxth	r3, r3
 80044fc:	fb02 f303 	mul.w	r3, r2, r3
 8004500:	2281      	movs	r2, #129	; 0x81
 8004502:	f2c8 0208 	movt	r2, #32776	; 0x8008
 8004506:	fb82 0203 	smull	r0, r2, r2, r3
 800450a:	441a      	add	r2, r3
 800450c:	12d2      	asrs	r2, r2, #11
 800450e:	17db      	asrs	r3, r3, #31
 8004510:	1ad2      	subs	r2, r2, r3
 8004512:	4613      	mov	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4413      	add	r3, r2
 8004518:	011a      	lsls	r2, r3, #4
 800451a:	441a      	add	r2, r3
 800451c:	f248 531f 	movw	r3, #34079	; 0x851f
 8004520:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004524:	fb83 0302 	smull	r0, r3, r3, r2
 8004528:	115b      	asrs	r3, r3, #5
 800452a:	17d2      	asrs	r2, r2, #31
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	440b      	add	r3, r1
 8004530:	2232      	movs	r2, #50	; 0x32
 8004532:	fb03 f202 	mul.w	r2, r3, r2
 8004536:	f241 53bc 	movw	r3, #5564	; 0x15bc
 800453a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800453e:	605a      	str	r2, [r3, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8004540:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8004544:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	4619      	mov	r1, r3
 800454c:	f241 5368 	movw	r3, #5480	; 0x1568
 8004550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	da00      	bge.n	800455c <HAL_ADC_ConvHalfCpltCallback+0x15c>
 800455a:	330f      	adds	r3, #15
 800455c:	111b      	asrs	r3, r3, #4
 800455e:	461a      	mov	r2, r3
 8004560:	f241 53b4 	movw	r3, #5556	; 0x15b4
 8004564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b21b      	sxth	r3, r3
 800456c:	fb02 f303 	mul.w	r3, r2, r3
 8004570:	2281      	movs	r2, #129	; 0x81
 8004572:	f2c8 0208 	movt	r2, #32776	; 0x8008
 8004576:	fb82 0203 	smull	r0, r2, r2, r3
 800457a:	441a      	add	r2, r3
 800457c:	12d2      	asrs	r2, r2, #11
 800457e:	17db      	asrs	r3, r3, #31
 8004580:	1ad2      	subs	r2, r2, r3
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4413      	add	r3, r2
 8004588:	011a      	lsls	r2, r3, #4
 800458a:	441a      	add	r2, r3
 800458c:	f248 531f 	movw	r3, #34079	; 0x851f
 8004590:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004594:	fb83 0302 	smull	r0, r3, r3, r2
 8004598:	115b      	asrs	r3, r3, #5
 800459a:	17d2      	asrs	r2, r2, #31
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	440b      	add	r3, r1
 80045a0:	2232      	movs	r2, #50	; 0x32
 80045a2:	fb03 f202 	mul.w	r2, r3, r2
 80045a6:	f241 53bc 	movw	r3, #5564	; 0x15bc
 80045aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045ae:	609a      	str	r2, [r3, #8]
			Curent_IRQ_callback(&data);
 80045b0:	f241 53b8 	movw	r3, #5560	; 0x15b8
 80045b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f241 50bc 	movw	r0, #5564	; 0x15bc
 80045be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80045c2:	4798      	blx	r3
		}
	}
	if (hadc == &hadc2){
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	f241 63b0 	movw	r3, #5808	; 0x16b0
 80045ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d169      	bne.n	80046a6 <HAL_ADC_ConvHalfCpltCallback+0x2a6>
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 80045d2:	f241 5388 	movw	r3, #5512	; 0x1588
 80045d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	091a      	lsrs	r2, r3, #4
 80045de:	f241 53b4 	movw	r3, #5556	; 0x15b4
 80045e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b21b      	sxth	r3, r3
 80045ea:	fb03 f202 	mul.w	r2, r3, r2
 80045ee:	f240 1301 	movw	r3, #257	; 0x101
 80045f2:	f2c0 0310 	movt	r3, #16
 80045f6:	fba3 1302 	umull	r1, r3, r3, r2
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	4413      	add	r3, r2
 8004600:	0adb      	lsrs	r3, r3, #11
 8004602:	b21a      	sxth	r2, r3
 8004604:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8004608:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800460c:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 800460e:	f241 5388 	movw	r3, #5512	; 0x1588
 8004612:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	091a      	lsrs	r2, r3, #4
 800461a:	f241 53b4 	movw	r3, #5556	; 0x15b4
 800461e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b21b      	sxth	r3, r3
 8004626:	fb03 f202 	mul.w	r2, r3, r2
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	4413      	add	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	461a      	mov	r2, r3
 8004634:	f240 1301 	movw	r3, #257	; 0x101
 8004638:	f2c0 0310 	movt	r3, #16
 800463c:	fba3 1302 	umull	r1, r3, r3, r2
 8004640:	1ad2      	subs	r2, r2, r3
 8004642:	0852      	lsrs	r2, r2, #1
 8004644:	4413      	add	r3, r2
 8004646:	0ada      	lsrs	r2, r3, #11
 8004648:	f241 53d0 	movw	r3, #5584	; 0x15d0
 800464c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004650:	601a      	str	r2, [r3, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8004652:	f241 5388 	movw	r3, #5512	; 0x1588
 8004656:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	091a      	lsrs	r2, r3, #4
 800465e:	f241 53b4 	movw	r3, #5556	; 0x15b4
 8004662:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b21b      	sxth	r3, r3
 800466a:	fb03 f202 	mul.w	r2, r3, r2
 800466e:	4613      	mov	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	441a      	add	r2, r3
 8004678:	f649 2367 	movw	r3, #39527	; 0x9a67
 800467c:	f6cc 43d9 	movt	r3, #52441	; 0xccd9
 8004680:	fba3 2302 	umull	r2, r3, r3, r2
 8004684:	0bdb      	lsrs	r3, r3, #15
 8004686:	b29a      	uxth	r2, r3
 8004688:	f241 53d0 	movw	r3, #5584	; 0x15d0
 800468c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004690:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8004692:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8004696:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f241 50d0 	movw	r0, #5584	; 0x15d0
 80046a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80046a4:	4798      	blx	r3
	}
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	f241 6344 	movw	r3, #5700	; 0x1644
 80046bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046c0:	429a      	cmp	r2, r3
 80046c2:	f040 80d4 	bne.w	800486e <HAL_ADC_ConvCpltCallback+0x1c0>
 80046c6:	f241 53dc 	movw	r3, #5596	; 0x15dc
 80046ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 80cc 	bne.w	800486e <HAL_ADC_ConvCpltCallback+0x1c0>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 80046d6:	f240 5374 	movw	r3, #1396	; 0x574
 80046da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	f241 5368 	movw	r3, #5480	; 0x1568
 80046f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	b21a      	sxth	r2, r3
 8004700:	f241 53b4 	movw	r3, #5556	; 0x15b4
 8004704:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004708:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 800470a:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800470e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4619      	mov	r1, r3
 8004716:	f241 5368 	movw	r3, #5480	; 0x1568
 800471a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	da00      	bge.n	8004726 <HAL_ADC_ConvCpltCallback+0x78>
 8004724:	330f      	adds	r3, #15
 8004726:	111b      	asrs	r3, r3, #4
 8004728:	461a      	mov	r2, r3
 800472a:	f241 53b4 	movw	r3, #5556	; 0x15b4
 800472e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b21b      	sxth	r3, r3
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	2281      	movs	r2, #129	; 0x81
 800473c:	f2c8 0208 	movt	r2, #32776	; 0x8008
 8004740:	fb82 0203 	smull	r0, r2, r2, r3
 8004744:	441a      	add	r2, r3
 8004746:	12d2      	asrs	r2, r2, #11
 8004748:	17db      	asrs	r3, r3, #31
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	011a      	lsls	r2, r3, #4
 8004754:	441a      	add	r2, r3
 8004756:	f248 531f 	movw	r3, #34079	; 0x851f
 800475a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800475e:	fb83 0302 	smull	r0, r3, r3, r2
 8004762:	115b      	asrs	r3, r3, #5
 8004764:	17d2      	asrs	r2, r2, #31
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	440b      	add	r3, r1
 800476a:	2232      	movs	r2, #50	; 0x32
 800476c:	fb03 f202 	mul.w	r2, r3, r2
 8004770:	f241 53bc 	movw	r3, #5564	; 0x15bc
 8004774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004778:	601a      	str	r2, [r3, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 800477a:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800477e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4619      	mov	r1, r3
 8004786:	f241 5368 	movw	r3, #5480	; 0x1568
 800478a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	da00      	bge.n	8004796 <HAL_ADC_ConvCpltCallback+0xe8>
 8004794:	330f      	adds	r3, #15
 8004796:	111b      	asrs	r3, r3, #4
 8004798:	461a      	mov	r2, r3
 800479a:	f241 53b4 	movw	r3, #5556	; 0x15b4
 800479e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	2281      	movs	r2, #129	; 0x81
 80047ac:	f2c8 0208 	movt	r2, #32776	; 0x8008
 80047b0:	fb82 0203 	smull	r0, r2, r2, r3
 80047b4:	441a      	add	r2, r3
 80047b6:	12d2      	asrs	r2, r2, #11
 80047b8:	17db      	asrs	r3, r3, #31
 80047ba:	1ad2      	subs	r2, r2, r3
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	011a      	lsls	r2, r3, #4
 80047c4:	441a      	add	r2, r3
 80047c6:	f248 531f 	movw	r3, #34079	; 0x851f
 80047ca:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80047ce:	fb83 0302 	smull	r0, r3, r3, r2
 80047d2:	115b      	asrs	r3, r3, #5
 80047d4:	17d2      	asrs	r2, r2, #31
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	440b      	add	r3, r1
 80047da:	2232      	movs	r2, #50	; 0x32
 80047dc:	fb03 f202 	mul.w	r2, r3, r2
 80047e0:	f241 53bc 	movw	r3, #5564	; 0x15bc
 80047e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047e8:	605a      	str	r2, [r3, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80047ea:	f241 53a8 	movw	r3, #5544	; 0x15a8
 80047ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4619      	mov	r1, r3
 80047f6:	f241 5368 	movw	r3, #5480	; 0x1568
 80047fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	da00      	bge.n	8004806 <HAL_ADC_ConvCpltCallback+0x158>
 8004804:	330f      	adds	r3, #15
 8004806:	111b      	asrs	r3, r3, #4
 8004808:	461a      	mov	r2, r3
 800480a:	f241 53b4 	movw	r3, #5556	; 0x15b4
 800480e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b21b      	sxth	r3, r3
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	2281      	movs	r2, #129	; 0x81
 800481c:	f2c8 0208 	movt	r2, #32776	; 0x8008
 8004820:	fb82 0203 	smull	r0, r2, r2, r3
 8004824:	441a      	add	r2, r3
 8004826:	12d2      	asrs	r2, r2, #11
 8004828:	17db      	asrs	r3, r3, #31
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4413      	add	r3, r2
 8004832:	011a      	lsls	r2, r3, #4
 8004834:	441a      	add	r2, r3
 8004836:	f248 531f 	movw	r3, #34079	; 0x851f
 800483a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800483e:	fb83 0302 	smull	r0, r3, r3, r2
 8004842:	115b      	asrs	r3, r3, #5
 8004844:	17d2      	asrs	r2, r2, #31
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	440b      	add	r3, r1
 800484a:	2232      	movs	r2, #50	; 0x32
 800484c:	fb03 f202 	mul.w	r2, r3, r2
 8004850:	f241 53bc 	movw	r3, #5564	; 0x15bc
 8004854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004858:	609a      	str	r2, [r3, #8]
		Curent_IRQ_callback(&data);
 800485a:	f241 53b8 	movw	r3, #5560	; 0x15b8
 800485e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f241 50bc 	movw	r0, #5564	; 0x15bc
 8004868:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800486c:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	f241 63b0 	movw	r3, #5808	; 0x16b0
 8004874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004878:	429a      	cmp	r2, r3
 800487a:	d16f      	bne.n	800495c <HAL_ADC_ConvCpltCallback+0x2ae>
		VT_data.Temp_NTC1 = 0; //(VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES * ;
 800487c:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8004880:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004884:	2200      	movs	r2, #0
 8004886:	80da      	strh	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8004888:	f241 5388 	movw	r3, #5512	; 0x1588
 800488c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	091a      	lsrs	r2, r3, #4
 8004894:	f241 53b4 	movw	r3, #5556	; 0x15b4
 8004898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b21b      	sxth	r3, r3
 80048a0:	fb03 f202 	mul.w	r2, r3, r2
 80048a4:	f240 1301 	movw	r3, #257	; 0x101
 80048a8:	f2c0 0310 	movt	r3, #16
 80048ac:	fba3 1302 	umull	r1, r3, r3, r2
 80048b0:	1ad2      	subs	r2, r2, r3
 80048b2:	0852      	lsrs	r2, r2, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	0adb      	lsrs	r3, r3, #11
 80048b8:	b21a      	sxth	r2, r3
 80048ba:	f241 53d0 	movw	r3, #5584	; 0x15d0
 80048be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048c2:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 80048c4:	f241 5388 	movw	r3, #5512	; 0x1588
 80048c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	091a      	lsrs	r2, r3, #4
 80048d0:	f241 53b4 	movw	r3, #5556	; 0x15b4
 80048d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b21b      	sxth	r3, r3
 80048dc:	fb03 f202 	mul.w	r2, r3, r2
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	4413      	add	r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	461a      	mov	r2, r3
 80048ea:	f240 1301 	movw	r3, #257	; 0x101
 80048ee:	f2c0 0310 	movt	r3, #16
 80048f2:	fba3 1302 	umull	r1, r3, r3, r2
 80048f6:	1ad2      	subs	r2, r2, r3
 80048f8:	0852      	lsrs	r2, r2, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	0ada      	lsrs	r2, r3, #11
 80048fe:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8004902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004906:	601a      	str	r2, [r3, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8004908:	f241 5388 	movw	r3, #5512	; 0x1588
 800490c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	091a      	lsrs	r2, r3, #4
 8004914:	f241 53b4 	movw	r3, #5556	; 0x15b4
 8004918:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b21b      	sxth	r3, r3
 8004920:	fb03 f202 	mul.w	r2, r3, r2
 8004924:	4613      	mov	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	441a      	add	r2, r3
 800492e:	f649 2367 	movw	r3, #39527	; 0x9a67
 8004932:	f6cc 43d9 	movt	r3, #52441	; 0xccd9
 8004936:	fba3 2302 	umull	r2, r3, r3, r2
 800493a:	0bdb      	lsrs	r3, r3, #15
 800493c:	b29a      	uxth	r2, r3
 800493e:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8004942:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004946:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8004948:	f241 53cc 	movw	r3, #5580	; 0x15cc
 800494c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f241 50d0 	movw	r0, #5584	; 0x15d0
 8004956:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800495a:	4798      	blx	r3
	}
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <dq0>:

void dq0(float theta, float a, float b, float c, float *d, float *q){
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	ed87 0a05 	vstr	s0, [r7, #20]
 800496e:	edc7 0a04 	vstr	s1, [r7, #16]
 8004972:	ed87 1a03 	vstr	s2, [r7, #12]
 8004976:	edc7 1a02 	vstr	s3, [r7, #8]
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	float cf = cosf(theta);
 800497e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004982:	f009 fdc1 	bl	800e508 <cosf>
 8004986:	ed87 0a07 	vstr	s0, [r7, #28]
	float sf = sinf(theta);
 800498a:	ed97 0a05 	vldr	s0, [r7, #20]
 800498e:	f009 fdff 	bl	800e590 <sinf>
 8004992:	ed87 0a06 	vstr	s0, [r7, #24]
//	RunCordic(theta, &cf, &sf);

    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8004996:	ed97 7a07 	vldr	s14, [r7, #28]
 800499a:	edd7 7a04 	vldr	s15, [r7, #16]
 800499e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80049a6:	f24b 33d7 	movw	r3, #46039	; 0xb3d7
 80049aa:	f6c3 735d 	movt	r3, #16221	; 0x3f5d
 80049ae:	ee06 3a90 	vmov	s13, r3
 80049b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80049b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80049ba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80049be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80049c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80049c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80049ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80049d6:	f24b 33d7 	movw	r3, #46039	; 0xb3d7
 80049da:	f6cb 735d 	movt	r3, #48989	; 0xbf5d
 80049de:	ee06 3a90 	vmov	s13, r3
 80049e2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80049e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80049ea:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80049ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80049f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80049f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80049fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a02:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8004a06:	f6c3 732a 	movt	r3, #16170	; 0x3f2a
 8004a0a:	ee07 3a10 	vmov	s14, r3
 8004a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 8004a18:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a1c:	eeb1 7a67 	vneg.f32	s14, s15
 8004a20:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a28:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a2c:	f24b 33d7 	movw	r3, #46039	; 0xb3d7
 8004a30:	f6cb 735d 	movt	r3, #48989	; 0xbf5d
 8004a34:	ee06 3a90 	vmov	s13, r3
 8004a38:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004a3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004a44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a58:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a5c:	f24b 33d7 	movw	r3, #46039	; 0xb3d7
 8004a60:	f6c3 735d 	movt	r3, #16221	; 0x3f5d
 8004a64:	ee06 3a90 	vmov	s13, r3
 8004a68:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004a6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a70:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004a74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a88:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8004a8c:	f6c3 732a 	movt	r3, #16170	; 0x3f2a
 8004a90:	ee07 3a10 	vmov	s14, r3
 8004a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	edc3 7a00 	vstr	s15, [r3]
    }
 8004a9e:	bf00      	nop
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f002 fdd9 	bl	8007666 <HAL_FDCAN_Start>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e00a      	b.n	8004ad4 <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f002 feda 	bl	800787c <HAL_FDCAN_ActivateNotification>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	; 0x24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 8004ae8:	f241 633c 	movw	r3, #5692	; 0x163c
 8004aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b09      	cmp	r3, #9
 8004af4:	d901      	bls.n	8004afa <FDCAN_addCallback+0x1e>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e03a      	b.n	8004b70 <FDCAN_addCallback+0x94>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	e00f      	b.n	8004b20 <FDCAN_addCallback+0x44>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8004b00:	f241 52ec 	movw	r2, #5612	; 0x15ec
 8004b04:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d101      	bne.n	8004b1a <FDCAN_addCallback+0x3e>
          return FDCAN_STATUS_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e02a      	b.n	8004b70 <FDCAN_addCallback+0x94>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	f241 633c 	movw	r3, #5692	; 0x163c
 8004b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d3e7      	bcc.n	8004b00 <FDCAN_addCallback+0x24>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8004b30:	f241 633c 	movw	r3, #5692	; 0x163c
 8004b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b38:	6819      	ldr	r1, [r3, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	f241 53ec 	movw	r3, #5612	; 0x15ec
 8004b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b44:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
 8004b48:	f241 52ec 	movw	r2, #5612	; 0x15ec
 8004b4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b50:	00cb      	lsls	r3, r1, #3
 8004b52:	4413      	add	r3, r2
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8004b58:	f241 633c 	movw	r3, #5692	; 0x163c
 8004b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	f241 633c 	movw	r3, #5692	; 0x163c
 8004b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b6c:	601a      	str	r2, [r3, #0]

  return FDCAN_STATUS_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3724      	adds	r7, #36	; 0x24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08e      	sub	sp, #56	; 0x38
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8004b8c:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8004b90:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004b9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8004ba4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004baa:	2300      	movs	r3, #0
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8004bb2:	f107 0314 	add.w	r3, r7, #20
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f002 fd6a 	bl	8007694 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3738      	adds	r7, #56	; 0x38
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b09e      	sub	sp, #120	; 0x78
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8004bde:	f107 030c 	add.w	r3, r7, #12
 8004be2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004be6:	2140      	movs	r1, #64	; 0x40
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f002 fdbc 	bl	8007766 <HAL_FDCAN_GetRxMessage>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8004bf4:	f000 fcc7 	bl	8005586 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	677b      	str	r3, [r7, #116]	; 0x74
 8004bfc:	e018      	b.n	8004c30 <HAL_FDCAN_RxFifo0Callback+0x5c>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8004bfe:	f241 52ec 	movw	r2, #5612	; 0x15ec
 8004c02:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d10a      	bne.n	8004c2a <HAL_FDCAN_RxFifo0Callback+0x56>
          FDCAN_listCallbacks[i].fp(RxData);
 8004c14:	f241 53ec 	movw	r3, #5612	; 0x15ec
 8004c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c1e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004c22:	f107 020c 	add.w	r2, r7, #12
 8004c26:	4610      	mov	r0, r2
 8004c28:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	677b      	str	r3, [r7, #116]	; 0x74
 8004c30:	f241 633c 	movw	r3, #5692	; 0x163c
 8004c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d3de      	bcc.n	8004bfe <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	3778      	adds	r7, #120	; 0x78
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004c4e:	2400      	movs	r4, #0
 8004c50:	9409      	str	r4, [sp, #36]	; 0x24
 8004c52:	940a      	str	r4, [sp, #40]	; 0x28
 8004c54:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c56:	2220      	movs	r2, #32
 8004c58:	4621      	mov	r1, r4
 8004c5a:	a801      	add	r0, sp, #4
 8004c5c:	f007 fb02 	bl	800c264 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004c60:	f241 6044 	movw	r0, #5700	; 0x1644
 8004c64:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004c68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c6c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c6e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004c72:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c74:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c76:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8004c78:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004c7e:	2208      	movs	r2, #8
 8004c80:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004c82:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004c84:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 4;
 8004c86:	2204      	movs	r2, #4
 8004c88:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c8a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c8e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c90:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c92:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004c96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c9a:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8004c9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004ca0:	220c      	movs	r2, #12
 8004ca2:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8004ca4:	6484      	str	r4, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004ca6:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004ca8:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004caa:	f001 f96f 	bl	8005f8c <HAL_ADC_Init>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d14c      	bne.n	8004d4c <MX_ADC1_Init+0x102>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004cb6:	a909      	add	r1, sp, #36	; 0x24
 8004cb8:	f241 6044 	movw	r0, #5700	; 0x1644
 8004cbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004cc0:	f001 ff6f 	bl	8006ba2 <HAL_ADCEx_MultiModeConfigChannel>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d144      	bne.n	8004d52 <MX_ADC1_Init+0x108>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	f2c0 4330 	movt	r3, #1072	; 0x430
 8004cce:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004cd0:	2306      	movs	r3, #6
 8004cd2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004cd8:	237f      	movs	r3, #127	; 0x7f
 8004cda:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004cdc:	2304      	movs	r3, #4
 8004cde:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ce4:	a901      	add	r1, sp, #4
 8004ce6:	f241 6044 	movw	r0, #5700	; 0x1644
 8004cea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004cee:	f001 fc07 	bl	8006500 <HAL_ADC_ConfigChannel>
 8004cf2:	bb88      	cbnz	r0, 8004d58 <MX_ADC1_Init+0x10e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	f6c0 0360 	movt	r3, #2144	; 0x860
 8004cfa:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d00:	a901      	add	r1, sp, #4
 8004d02:	f241 6044 	movw	r0, #5700	; 0x1644
 8004d06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d0a:	f001 fbf9 	bl	8006500 <HAL_ADC_ConfigChannel>
 8004d0e:	bb30      	cbnz	r0, 8004d5e <MX_ADC1_Init+0x114>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004d10:	2308      	movs	r3, #8
 8004d12:	f6c0 4390 	movt	r3, #3216	; 0xc90
 8004d16:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004d18:	2312      	movs	r3, #18
 8004d1a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d1c:	a901      	add	r1, sp, #4
 8004d1e:	f241 6044 	movw	r0, #5700	; 0x1644
 8004d22:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d26:	f001 fbeb 	bl	8006500 <HAL_ADC_ConfigChannel>
 8004d2a:	b9d8      	cbnz	r0, 8004d64 <MX_ADC1_Init+0x11a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f6cc 3384 	movt	r3, #52100	; 0xcb84
 8004d32:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004d34:	2318      	movs	r3, #24
 8004d36:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d38:	a901      	add	r1, sp, #4
 8004d3a:	f241 6044 	movw	r0, #5700	; 0x1644
 8004d3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d42:	f001 fbdd 	bl	8006500 <HAL_ADC_ConfigChannel>
 8004d46:	b980      	cbnz	r0, 8004d6a <MX_ADC1_Init+0x120>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004d48:	b00c      	add	sp, #48	; 0x30
 8004d4a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004d4c:	f000 fc1b 	bl	8005586 <Error_Handler>
 8004d50:	e7af      	b.n	8004cb2 <MX_ADC1_Init+0x68>
    Error_Handler();
 8004d52:	f000 fc18 	bl	8005586 <Error_Handler>
 8004d56:	e7b7      	b.n	8004cc8 <MX_ADC1_Init+0x7e>
    Error_Handler();
 8004d58:	f000 fc15 	bl	8005586 <Error_Handler>
 8004d5c:	e7ca      	b.n	8004cf4 <MX_ADC1_Init+0xaa>
    Error_Handler();
 8004d5e:	f000 fc12 	bl	8005586 <Error_Handler>
 8004d62:	e7d5      	b.n	8004d10 <MX_ADC1_Init+0xc6>
    Error_Handler();
 8004d64:	f000 fc0f 	bl	8005586 <Error_Handler>
 8004d68:	e7e0      	b.n	8004d2c <MX_ADC1_Init+0xe2>
    Error_Handler();
 8004d6a:	f000 fc0c 	bl	8005586 <Error_Handler>
}
 8004d6e:	e7eb      	b.n	8004d48 <MX_ADC1_Init+0xfe>

08004d70 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004d70:	b500      	push	{lr}
 8004d72:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004d74:	2220      	movs	r2, #32
 8004d76:	2100      	movs	r1, #0
 8004d78:	4668      	mov	r0, sp
 8004d7a:	f007 fa73 	bl	800c264 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004d7e:	f241 60b0 	movw	r0, #5808	; 0x16b0
 8004d82:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d8a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004d8e:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004d90:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004d94:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004d96:	2300      	movs	r3, #0
 8004d98:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d9a:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8004d9c:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004d9e:	2201      	movs	r2, #1
 8004da0:	6142      	str	r2, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004da2:	2104      	movs	r1, #4
 8004da4:	6181      	str	r1, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004da6:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004da8:	7742      	strb	r2, [r0, #29]
  hadc2.Init.NbrOfConversion = 4;
 8004daa:	6201      	str	r1, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004dac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004db0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004db2:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004db4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dbc:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8004dbe:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004dc2:	210c      	movs	r1, #12
 8004dc4:	6441      	str	r1, [r0, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8004dc6:	6483      	str	r3, [r0, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004dc8:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004dca:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004dcc:	f001 f8de 	bl	8005f8c <HAL_ADC_Init>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d147      	bne.n	8004e64 <MX_ADC2_Init+0xf4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dd8:	f2c3 2360 	movt	r3, #12896	; 0x3260
 8004ddc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004dde:	2306      	movs	r3, #6
 8004de0:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004de2:	2307      	movs	r3, #7
 8004de4:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004de6:	237f      	movs	r3, #127	; 0x7f
 8004de8:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004dea:	2304      	movs	r3, #4
 8004dec:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004df2:	4669      	mov	r1, sp
 8004df4:	f241 60b0 	movw	r0, #5808	; 0x16b0
 8004df8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004dfc:	f001 fb80 	bl	8006500 <HAL_ADC_ConfigChannel>
 8004e00:	bb98      	cbnz	r0, 8004e6a <MX_ADC2_Init+0xfa>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e06:	f6c3 23c0 	movt	r3, #15040	; 0x3ac0
 8004e0a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004e0c:	230c      	movs	r3, #12
 8004e0e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004e10:	2300      	movs	r3, #0
 8004e12:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e14:	4669      	mov	r1, sp
 8004e16:	f241 60b0 	movw	r0, #5808	; 0x16b0
 8004e1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004e1e:	f001 fb6f 	bl	8006500 <HAL_ADC_ConfigChannel>
 8004e22:	bb28      	cbnz	r0, 8004e70 <MX_ADC2_Init+0x100>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e28:	f2c3 6390 	movt	r3, #13968	; 0x3690
 8004e2c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004e2e:	2312      	movs	r3, #18
 8004e30:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e32:	4669      	mov	r1, sp
 8004e34:	f241 60b0 	movw	r0, #5808	; 0x16b0
 8004e38:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004e3c:	f001 fb60 	bl	8006500 <HAL_ADC_ConfigChannel>
 8004e40:	b9c8      	cbnz	r0, 8004e76 <MX_ADC2_Init+0x106>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004e42:	2308      	movs	r3, #8
 8004e44:	f6c0 4390 	movt	r3, #3216	; 0xc90
 8004e48:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004e4a:	2318      	movs	r3, #24
 8004e4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e4e:	4669      	mov	r1, sp
 8004e50:	f241 60b0 	movw	r0, #5808	; 0x16b0
 8004e54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004e58:	f001 fb52 	bl	8006500 <HAL_ADC_ConfigChannel>
 8004e5c:	b970      	cbnz	r0, 8004e7c <MX_ADC2_Init+0x10c>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004e5e:	b009      	add	sp, #36	; 0x24
 8004e60:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004e64:	f000 fb8f 	bl	8005586 <Error_Handler>
 8004e68:	e7b4      	b.n	8004dd4 <MX_ADC2_Init+0x64>
    Error_Handler();
 8004e6a:	f000 fb8c 	bl	8005586 <Error_Handler>
 8004e6e:	e7c8      	b.n	8004e02 <MX_ADC2_Init+0x92>
    Error_Handler();
 8004e70:	f000 fb89 	bl	8005586 <Error_Handler>
 8004e74:	e7d6      	b.n	8004e24 <MX_ADC2_Init+0xb4>
    Error_Handler();
 8004e76:	f000 fb86 	bl	8005586 <Error_Handler>
 8004e7a:	e7e2      	b.n	8004e42 <MX_ADC2_Init+0xd2>
    Error_Handler();
 8004e7c:	f000 fb83 	bl	8005586 <Error_Handler>
}
 8004e80:	e7ed      	b.n	8004e5e <MX_ADC2_Init+0xee>

08004e82 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004e82:	b570      	push	{r4, r5, r6, lr}
 8004e84:	b09c      	sub	sp, #112	; 0x70
 8004e86:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e88:	2100      	movs	r1, #0
 8004e8a:	9117      	str	r1, [sp, #92]	; 0x5c
 8004e8c:	9118      	str	r1, [sp, #96]	; 0x60
 8004e8e:	9119      	str	r1, [sp, #100]	; 0x64
 8004e90:	911a      	str	r1, [sp, #104]	; 0x68
 8004e92:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e94:	2244      	movs	r2, #68	; 0x44
 8004e96:	a806      	add	r0, sp, #24
 8004e98:	f007 f9e4 	bl	800c264 <memset>
  if(adcHandle->Instance==ADC1)
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea2:	d007      	beq.n	8004eb4 <HAL_ADC_MspInit+0x32>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8004ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ea8:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d06a      	beq.n	8004f86 <HAL_ADC_MspInit+0x104>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8004eb0:	b01c      	add	sp, #112	; 0x70
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb8:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004eba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004ebe:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ec0:	a806      	add	r0, sp, #24
 8004ec2:	f003 ff2d 	bl	8008d20 <HAL_RCCEx_PeriphCLKConfig>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d149      	bne.n	8004f5e <HAL_ADC_MspInit+0xdc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004eca:	f241 6240 	movw	r2, #5696	; 0x1640
 8004ece:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d043      	beq.n	8004f64 <HAL_ADC_MspInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ee4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	64da      	str	r2, [r3, #76]	; 0x4c
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	9302      	str	r3, [sp, #8]
 8004ef4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8004ef6:	2307      	movs	r3, #7
 8004ef8:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004efa:	2303      	movs	r3, #3
 8004efc:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	2500      	movs	r5, #0
 8004f00:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f02:	a917      	add	r1, sp, #92	; 0x5c
 8004f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f08:	f003 f83c 	bl	8007f84 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8004f0c:	f241 701c 	movw	r0, #5916	; 0x171c
 8004f10:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004f14:	2308      	movs	r3, #8
 8004f16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f1a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004f1c:	2305      	movs	r3, #5
 8004f1e:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f20:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f22:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f2c:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f32:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004f34:	2320      	movs	r3, #32
 8004f36:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004f38:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f3a:	f002 f8dc 	bl	80070f6 <HAL_DMA_Init>
 8004f3e:	b9f8      	cbnz	r0, 8004f80 <HAL_ADC_MspInit+0xfe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004f40:	f241 731c 	movw	r3, #5916	; 0x171c
 8004f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f48:	6563      	str	r3, [r4, #84]	; 0x54
 8004f4a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4611      	mov	r1, r2
 8004f50:	2012      	movs	r0, #18
 8004f52:	f001 fed8 	bl	8006d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004f56:	2012      	movs	r0, #18
 8004f58:	f001 ff0e 	bl	8006d78 <HAL_NVIC_EnableIRQ>
 8004f5c:	e7a8      	b.n	8004eb0 <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 8004f5e:	f000 fb12 	bl	8005586 <Error_Handler>
 8004f62:	e7b2      	b.n	8004eca <HAL_ADC_MspInit+0x48>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f72:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	9b01      	ldr	r3, [sp, #4]
 8004f7e:	e7ad      	b.n	8004edc <HAL_ADC_MspInit+0x5a>
      Error_Handler();
 8004f80:	f000 fb01 	bl	8005586 <Error_Handler>
 8004f84:	e7dc      	b.n	8004f40 <HAL_ADC_MspInit+0xbe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8a:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004f8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004f90:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f92:	a806      	add	r0, sp, #24
 8004f94:	f003 fec4 	bl	8008d20 <HAL_RCCEx_PeriphCLKConfig>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d15e      	bne.n	800505a <HAL_ADC_MspInit+0x1d8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004f9c:	f241 6240 	movw	r2, #5696	; 0x1640
 8004fa0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004fa4:	6813      	ldr	r3, [r2, #0]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d058      	beq.n	8005060 <HAL_ADC_MspInit+0x1de>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8004fbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fc0:	f002 0201 	and.w	r2, r2, #1
 8004fc4:	9204      	str	r2, [sp, #16]
 8004fc6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fca:	f042 0202 	orr.w	r2, r2, #2
 8004fce:	64da      	str	r2, [r3, #76]	; 0x4c
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	9305      	str	r3, [sp, #20]
 8004fd8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8004fda:	2360      	movs	r3, #96	; 0x60
 8004fdc:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fde:	2603      	movs	r6, #3
 8004fe0:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	2500      	movs	r5, #0
 8004fe4:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fe6:	a917      	add	r1, sp, #92	; 0x5c
 8004fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fec:	f002 ffca 	bl	8007f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8004ff0:	f640 0304 	movw	r3, #2052	; 0x804
 8004ff4:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ff6:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff8:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffa:	a917      	add	r1, sp, #92	; 0x5c
 8004ffc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005000:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005004:	f002 ffbe 	bl	8007f84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8005008:	f241 707c 	movw	r0, #6012	; 0x177c
 800500c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005010:	231c      	movs	r3, #28
 8005012:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005016:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005018:	2324      	movs	r3, #36	; 0x24
 800501a:	6043      	str	r3, [r0, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800501c:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800501e:	60c5      	str	r5, [r0, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005028:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800502a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800502e:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005030:	2320      	movs	r3, #32
 8005032:	61c3      	str	r3, [r0, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005034:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005036:	f002 f85e 	bl	80070f6 <HAL_DMA_Init>
 800503a:	b9f8      	cbnz	r0, 800507c <HAL_ADC_MspInit+0x1fa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800503c:	f241 737c 	movw	r3, #6012	; 0x177c
 8005040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005044:	6563      	str	r3, [r4, #84]	; 0x54
 8005046:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005048:	2200      	movs	r2, #0
 800504a:	4611      	mov	r1, r2
 800504c:	2012      	movs	r0, #18
 800504e:	f001 fe5a 	bl	8006d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005052:	2012      	movs	r0, #18
 8005054:	f001 fe90 	bl	8006d78 <HAL_NVIC_EnableIRQ>
}
 8005058:	e72a      	b.n	8004eb0 <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 800505a:	f000 fa94 	bl	8005586 <Error_Handler>
 800505e:	e79d      	b.n	8004f9c <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005064:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800506a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800506e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005076:	9303      	str	r3, [sp, #12]
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	e798      	b.n	8004fae <HAL_ADC_MspInit+0x12c>
      Error_Handler();
 800507c:	f000 fa83 	bl	8005586 <Error_Handler>
 8005080:	e7dc      	b.n	800503c <HAL_ADC_MspInit+0x1ba>

08005082 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8005082:	b508      	push	{r3, lr}
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8005084:	f241 70dc 	movw	r0, #6108	; 0x17dc
 8005088:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800508c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005090:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005094:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8005096:	f001 fe0b 	bl	8006cb0 <HAL_CORDIC_Init>
 800509a:	b900      	cbnz	r0, 800509e <MX_CORDIC_Init+0x1c>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800509c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800509e:	f000 fa72 	bl	8005586 <Error_Handler>
}
 80050a2:	e7fb      	b.n	800509c <MX_CORDIC_Init+0x1a>

080050a4 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{

  if(cordicHandle->Instance==CORDIC)
 80050a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050ac:	6802      	ldr	r2, [r0, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d000      	beq.n	80050b4 <HAL_CORDIC_MspInit+0x10>
 80050b2:	4770      	bx	lr
{
 80050b4:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80050b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c0:	f042 0208 	orr.w	r2, r2, #8
 80050c4:	649a      	str	r2, [r3, #72]	; 0x48
 80050c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80050d0:	b002      	add	sp, #8
 80050d2:	4770      	bx	lr

080050d4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80050d4:	b500      	push	{lr}
 80050d6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80050d8:	2230      	movs	r2, #48	; 0x30
 80050da:	2100      	movs	r1, #0
 80050dc:	4668      	mov	r0, sp
 80050de:	f007 f8c1 	bl	800c264 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80050e2:	f641 0004 	movw	r0, #6148	; 0x1804
 80050e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80050ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050ee:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80050f2:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80050f4:	f001 fe63 	bl	8006dbe <HAL_DAC_Init>
 80050f8:	b9b8      	cbnz	r0, 800512a <MX_DAC1_Init+0x56>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80050fa:	2200      	movs	r2, #0
 80050fc:	9200      	str	r2, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80050fe:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8005102:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005106:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005108:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800510a:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800510c:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800510e:	2301      	movs	r3, #1
 8005110:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005112:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005114:	4669      	mov	r1, sp
 8005116:	f641 0004 	movw	r0, #6148	; 0x1804
 800511a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800511e:	f001 feac 	bl	8006e7a <HAL_DAC_ConfigChannel>
 8005122:	b928      	cbnz	r0, 8005130 <MX_DAC1_Init+0x5c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8005124:	b00d      	add	sp, #52	; 0x34
 8005126:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800512a:	f000 fa2c 	bl	8005586 <Error_Handler>
 800512e:	e7e4      	b.n	80050fa <MX_DAC1_Init+0x26>
    Error_Handler();
 8005130:	f000 fa29 	bl	8005586 <Error_Handler>
}
 8005134:	e7f6      	b.n	8005124 <MX_DAC1_Init+0x50>

08005136 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8005136:	b500      	push	{lr}
 8005138:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513a:	2300      	movs	r3, #0
 800513c:	9303      	str	r3, [sp, #12]
 800513e:	9304      	str	r3, [sp, #16]
 8005140:	9305      	str	r3, [sp, #20]
 8005142:	9306      	str	r3, [sp, #24]
 8005144:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 8005146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800514a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800514e:	6802      	ldr	r2, [r0, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d002      	beq.n	800515a <HAL_DAC_MspInit+0x24>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8005154:	b009      	add	sp, #36	; 0x24
 8005156:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 800515a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800515e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005164:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005168:	64da      	str	r2, [r3, #76]	; 0x4c
 800516a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800516c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8005170:	9201      	str	r2, [sp, #4]
 8005172:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	64da      	str	r2, [r3, #76]	; 0x4c
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	9302      	str	r3, [sp, #8]
 8005184:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005186:	2310      	movs	r3, #16
 8005188:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800518a:	2303      	movs	r3, #3
 800518c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518e:	a903      	add	r1, sp, #12
 8005190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005194:	f002 fef6 	bl	8007f84 <HAL_GPIO_Init>
}
 8005198:	e7dc      	b.n	8005154 <HAL_DAC_MspInit+0x1e>

0800519a <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800519a:	b500      	push	{lr}
 800519c:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800519e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80051a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a8:	f042 0204 	orr.w	r2, r2, #4
 80051ac:	649a      	str	r2, [r3, #72]	; 0x48
 80051ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051b0:	f002 0204 	and.w	r2, r2, #4
 80051b4:	9201      	str	r2, [sp, #4]
 80051b6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	649a      	str	r2, [r3, #72]	; 0x48
 80051c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051c2:	f002 0201 	and.w	r2, r2, #1
 80051c6:	9202      	str	r2, [sp, #8]
 80051c8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80051ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051cc:	f042 0202 	orr.w	r2, r2, #2
 80051d0:	649a      	str	r2, [r3, #72]	; 0x48
 80051d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	9303      	str	r3, [sp, #12]
 80051da:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80051dc:	2200      	movs	r2, #0
 80051de:	4611      	mov	r1, r2
 80051e0:	200b      	movs	r0, #11
 80051e2:	f001 fd90 	bl	8006d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80051e6:	200b      	movs	r0, #11
 80051e8:	f001 fdc6 	bl	8006d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80051ec:	2200      	movs	r2, #0
 80051ee:	4611      	mov	r1, r2
 80051f0:	200c      	movs	r0, #12
 80051f2:	f001 fd88 	bl	8006d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80051f6:	200c      	movs	r0, #12
 80051f8:	f001 fdbe 	bl	8006d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80051fc:	2200      	movs	r2, #0
 80051fe:	4611      	mov	r1, r2
 8005200:	200d      	movs	r0, #13
 8005202:	f001 fd80 	bl	8006d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005206:	200d      	movs	r0, #13
 8005208:	f001 fdb6 	bl	8006d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800520c:	2200      	movs	r2, #0
 800520e:	4611      	mov	r1, r2
 8005210:	200e      	movs	r0, #14
 8005212:	f001 fd78 	bl	8006d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005216:	200e      	movs	r0, #14
 8005218:	f001 fdae 	bl	8006d78 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800521c:	2200      	movs	r2, #0
 800521e:	4611      	mov	r1, r2
 8005220:	2038      	movs	r0, #56	; 0x38
 8005222:	f001 fd70 	bl	8006d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005226:	2038      	movs	r0, #56	; 0x38
 8005228:	f001 fda6 	bl	8006d78 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800522c:	2200      	movs	r2, #0
 800522e:	4611      	mov	r1, r2
 8005230:	2039      	movs	r0, #57	; 0x39
 8005232:	f001 fd68 	bl	8006d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8005236:	2039      	movs	r0, #57	; 0x39
 8005238:	f001 fd9e 	bl	8006d78 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800523c:	2200      	movs	r2, #0
 800523e:	4611      	mov	r1, r2
 8005240:	203a      	movs	r0, #58	; 0x3a
 8005242:	f001 fd60 	bl	8006d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8005246:	203a      	movs	r0, #58	; 0x3a
 8005248:	f001 fd96 	bl	8006d78 <HAL_NVIC_EnableIRQ>

}
 800524c:	b005      	add	sp, #20
 800524e:	f85d fb04 	ldr.w	pc, [sp], #4

08005252 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8005252:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8005254:	f641 0018 	movw	r0, #6168	; 0x1818
 8005258:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800525c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005260:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005264:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8005266:	2300      	movs	r3, #0
 8005268:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800526a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800526e:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8005270:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8005272:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8005274:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8005276:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8005278:	2201      	movs	r2, #1
 800527a:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 800527c:	2107      	movs	r1, #7
 800527e:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8005280:	242a      	movs	r4, #42	; 0x2a
 8005282:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8005284:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8005286:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8005288:	2209      	movs	r2, #9
 800528a:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 800528c:	210a      	movs	r1, #10
 800528e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8005290:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8005292:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8005294:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8005296:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8005298:	f002 f8cd 	bl	8007436 <HAL_FDCAN_Init>
 800529c:	b900      	cbnz	r0, 80052a0 <MX_FDCAN1_Init+0x4e>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800529e:	bd10      	pop	{r4, pc}
    Error_Handler();
 80052a0:	f000 f971 	bl	8005586 <Error_Handler>
}
 80052a4:	e7fb      	b.n	800529e <MX_FDCAN1_Init+0x4c>

080052a6 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80052a6:	b510      	push	{r4, lr}
 80052a8:	b098      	sub	sp, #96	; 0x60
 80052aa:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ac:	2100      	movs	r1, #0
 80052ae:	9113      	str	r1, [sp, #76]	; 0x4c
 80052b0:	9114      	str	r1, [sp, #80]	; 0x50
 80052b2:	9115      	str	r1, [sp, #84]	; 0x54
 80052b4:	9116      	str	r1, [sp, #88]	; 0x58
 80052b6:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052b8:	2244      	movs	r2, #68	; 0x44
 80052ba:	a802      	add	r0, sp, #8
 80052bc:	f006 ffd2 	bl	800c264 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80052c0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80052c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d001      	beq.n	80052d2 <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80052ce:	b018      	add	sp, #96	; 0x60
 80052d0:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80052d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052d6:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80052d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052dc:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052de:	a802      	add	r0, sp, #8
 80052e0:	f003 fd1e 	bl	8008d20 <HAL_RCCEx_PeriphCLKConfig>
 80052e4:	bb68      	cbnz	r0, 8005342 <HAL_FDCAN_MspInit+0x9c>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80052e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052f0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80052f4:	659a      	str	r2, [r3, #88]	; 0x58
 80052f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052f8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80052fc:	9200      	str	r2, [sp, #0]
 80052fe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005300:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	64da      	str	r2, [r3, #76]	; 0x4c
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005312:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005316:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005318:	2302      	movs	r3, #2
 800531a:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531c:	2400      	movs	r4, #0
 800531e:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005320:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005322:	2309      	movs	r3, #9
 8005324:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005326:	a913      	add	r1, sp, #76	; 0x4c
 8005328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800532c:	f002 fe2a 	bl	8007f84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8005330:	4622      	mov	r2, r4
 8005332:	4621      	mov	r1, r4
 8005334:	2015      	movs	r0, #21
 8005336:	f001 fce6 	bl	8006d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800533a:	2015      	movs	r0, #21
 800533c:	f001 fd1c 	bl	8006d78 <HAL_NVIC_EnableIRQ>
}
 8005340:	e7c5      	b.n	80052ce <HAL_FDCAN_MspInit+0x28>
      Error_Handler();
 8005342:	f000 f920 	bl	8005586 <Error_Handler>
 8005346:	e7ce      	b.n	80052e6 <HAL_FDCAN_MspInit+0x40>

08005348 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8005348:	b508      	push	{r3, lr}
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800534a:	f641 007c 	movw	r0, #6268	; 0x187c
 800534e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005352:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005356:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800535a:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800535c:	f002 fde2 	bl	8007f24 <HAL_FMAC_Init>
 8005360:	b900      	cbnz	r0, 8005364 <MX_FMAC_Init+0x1c>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8005362:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005364:	f000 f90f 	bl	8005586 <Error_Handler>
}
 8005368:	e7fb      	b.n	8005362 <MX_FMAC_Init+0x1a>

0800536a <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{

  if(fmacHandle->Instance==FMAC)
 800536a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800536e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005372:	6802      	ldr	r2, [r0, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d000      	beq.n	800537a <HAL_FMAC_MspInit+0x10>
 8005378:	4770      	bx	lr
{
 800537a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800537c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005380:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005384:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005386:	f042 0210 	orr.w	r2, r2, #16
 800538a:	649a      	str	r2, [r3, #72]	; 0x48
 800538c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8005396:	b002      	add	sp, #8
 8005398:	4770      	bx	lr

0800539a <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 800539a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a0:	2400      	movs	r4, #0
 80053a2:	9405      	str	r4, [sp, #20]
 80053a4:	9406      	str	r4, [sp, #24]
 80053a6:	9407      	str	r4, [sp, #28]
 80053a8:	9408      	str	r4, [sp, #32]
 80053aa:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80053ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053b6:	f042 0220 	orr.w	r2, r2, #32
 80053ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80053bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053be:	f002 0220 	and.w	r2, r2, #32
 80053c2:	9200      	str	r2, [sp, #0]
 80053c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053c8:	f042 0204 	orr.w	r2, r2, #4
 80053cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80053ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053d0:	f002 0204 	and.w	r2, r2, #4
 80053d4:	9201      	str	r2, [sp, #4]
 80053d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	64da      	str	r2, [r3, #76]	; 0x4c
 80053e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053e2:	f002 0201 	and.w	r2, r2, #1
 80053e6:	9202      	str	r2, [sp, #8]
 80053e8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053ec:	f042 0202 	orr.w	r2, r2, #2
 80053f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80053f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053f4:	f002 0202 	and.w	r2, r2, #2
 80053f8:	9203      	str	r2, [sp, #12]
 80053fa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053fe:	f042 0208 	orr.w	r2, r2, #8
 8005402:	64da      	str	r2, [r3, #76]	; 0x4c
 8005404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 800540e:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8005412:	f6c4 0800 	movt	r8, #18432	; 0x4800
 8005416:	4622      	mov	r2, r4
 8005418:	21c0      	movs	r1, #192	; 0xc0
 800541a:	4640      	mov	r0, r8
 800541c:	f002 febe 	bl	800819c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8005420:	4622      	mov	r2, r4
 8005422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800542a:	f002 feb7 	bl	800819c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 800542e:	f44f 6740 	mov.w	r7, #3072	; 0xc00
 8005432:	f6c4 0700 	movt	r7, #18432	; 0x4800
 8005436:	4622      	mov	r2, r4
 8005438:	2104      	movs	r1, #4
 800543a:	4638      	mov	r0, r7
 800543c:	f002 feae 	bl	800819c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8005440:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005444:	f6c4 0600 	movt	r6, #18432	; 0x4800
 8005448:	4622      	mov	r2, r4
 800544a:	2140      	movs	r1, #64	; 0x40
 800544c:	4630      	mov	r0, r6
 800544e:	f002 fea5 	bl	800819c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8005452:	23c0      	movs	r3, #192	; 0xc0
 8005454:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005456:	2501      	movs	r5, #1
 8005458:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800545e:	a905      	add	r1, sp, #20
 8005460:	4640      	mov	r0, r8
 8005462:	f002 fd8f 	bl	8007f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546c:	2302      	movs	r3, #2
 800546e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005470:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005472:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005474:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005476:	a905      	add	r1, sp, #20
 8005478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800547c:	f002 fd82 	bl	8007f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8005480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005484:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005486:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005488:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800548a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 800548c:	a905      	add	r1, sp, #20
 800548e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005492:	f002 fd77 	bl	8007f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8005496:	2304      	movs	r3, #4
 8005498:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800549a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 80054a0:	a905      	add	r1, sp, #20
 80054a2:	4638      	mov	r0, r7
 80054a4:	f002 fd6e 	bl	8007f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 80054a8:	2340      	movs	r3, #64	; 0x40
 80054aa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054ac:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ae:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 80054b2:	a905      	add	r1, sp, #20
 80054b4:	4630      	mov	r0, r6
 80054b6:	f002 fd65 	bl	8007f84 <HAL_GPIO_Init>

}
 80054ba:	b00a      	add	sp, #40	; 0x28
 80054bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054c0:	b500      	push	{lr}
 80054c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054c4:	2238      	movs	r2, #56	; 0x38
 80054c6:	2100      	movs	r1, #0
 80054c8:	a806      	add	r0, sp, #24
 80054ca:	f006 fecb 	bl	800c264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054ce:	2000      	movs	r0, #0
 80054d0:	9001      	str	r0, [sp, #4]
 80054d2:	9002      	str	r0, [sp, #8]
 80054d4:	9003      	str	r0, [sp, #12]
 80054d6:	9004      	str	r0, [sp, #16]
 80054d8:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80054da:	f002 fe64 	bl	80081a6 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80054de:	2302      	movs	r3, #2
 80054e0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054e6:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054e8:	2240      	movs	r2, #64	; 0x40
 80054ea:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054ec:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80054ee:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80054f0:	2204      	movs	r2, #4
 80054f2:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80054f4:	2250      	movs	r2, #80	; 0x50
 80054f6:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054f8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80054fa:	2208      	movs	r2, #8
 80054fc:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80054fe:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005500:	a806      	add	r0, sp, #24
 8005502:	f002 ff0a 	bl	800831a <HAL_RCC_OscConfig>
 8005506:	b9c0      	cbnz	r0, 800553a <SystemClock_Config+0x7a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005508:	230f      	movs	r3, #15
 800550a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800550c:	2303      	movs	r3, #3
 800550e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005510:	2300      	movs	r3, #0
 8005512:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005514:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005516:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005518:	2104      	movs	r1, #4
 800551a:	eb0d 0001 	add.w	r0, sp, r1
 800551e:	f003 fa66 	bl	80089ee <HAL_RCC_ClockConfig>
 8005522:	b960      	cbnz	r0, 800553e <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8005524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005528:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 800552c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005530:	f003 f9e1 	bl	80088f6 <HAL_RCC_MCOConfig>
}
 8005534:	b015      	add	sp, #84	; 0x54
 8005536:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800553a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800553c:	e7fe      	b.n	800553c <SystemClock_Config+0x7c>
 800553e:	b672      	cpsid	i
 8005540:	e7fe      	b.n	8005540 <SystemClock_Config+0x80>

08005542 <main>:
{
 8005542:	b508      	push	{r3, lr}
  HAL_Init();
 8005544:	f000 fcec 	bl	8005f20 <HAL_Init>
  SystemClock_Config();
 8005548:	f7ff ffba 	bl	80054c0 <SystemClock_Config>
  MX_GPIO_Init();
 800554c:	f7ff ff25 	bl	800539a <MX_GPIO_Init>
  MX_DMA_Init();
 8005550:	f7ff fe23 	bl	800519a <MX_DMA_Init>
  MX_FDCAN1_Init();
 8005554:	f7ff fe7d 	bl	8005252 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8005558:	f000 f817 	bl	800558a <MX_SPI1_Init>
  MX_SPI3_Init();
 800555c:	f000 f83d 	bl	80055da <MX_SPI3_Init>
  MX_TIM1_Init();
 8005560:	f000 fb2c 	bl	8005bbc <MX_TIM1_Init>
  MX_ADC1_Init();
 8005564:	f7ff fb71 	bl	8004c4a <MX_ADC1_Init>
  MX_ADC2_Init();
 8005568:	f7ff fc02 	bl	8004d70 <MX_ADC2_Init>
  MX_DAC1_Init();
 800556c:	f7ff fdb2 	bl	80050d4 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8005570:	f000 fbd4 	bl	8005d1c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8005574:	f000 fa5a 	bl	8005a2c <MX_TIM3_Init>
  MX_FMAC_Init();
 8005578:	f7ff fee6 	bl	8005348 <MX_FMAC_Init>
  MX_CORDIC_Init();
 800557c:	f7ff fd81 	bl	8005082 <MX_CORDIC_Init>
	BLDC_main();
 8005580:	f7fb ff7a 	bl	8001478 <BLDC_main>
  while (1)
 8005584:	e7fc      	b.n	8005580 <main+0x3e>

08005586 <Error_Handler>:
 8005586:	b672      	cpsid	i
  while (1)
 8005588:	e7fe      	b.n	8005588 <Error_Handler+0x2>

0800558a <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800558a:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800558c:	f641 2034 	movw	r0, #6708	; 0x1a34
 8005590:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005594:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005598:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800559c:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800559e:	f44f 7382 	mov.w	r3, #260	; 0x104
 80055a2:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80055a4:	2300      	movs	r3, #0
 80055a6:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80055a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80055ac:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055ae:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80055b0:	2201      	movs	r2, #1
 80055b2:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80055b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80055ba:	2228      	movs	r2, #40	; 0x28
 80055bc:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055be:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80055c0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80055c4:	2207      	movs	r2, #7
 80055c6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80055c8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80055ca:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80055cc:	f003 fed8 	bl	8009380 <HAL_SPI_Init>
 80055d0:	b900      	cbnz	r0, 80055d4 <MX_SPI1_Init+0x4a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80055d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80055d4:	f7ff ffd7 	bl	8005586 <Error_Handler>
}
 80055d8:	e7fb      	b.n	80055d2 <MX_SPI1_Init+0x48>

080055da <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80055da:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80055dc:	f641 2098 	movw	r0, #6808	; 0x1a98
 80055e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80055e4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80055ec:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80055ee:	f44f 7382 	mov.w	r3, #260	; 0x104
 80055f2:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80055f4:	2300      	movs	r3, #0
 80055f6:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80055f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80055fc:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055fe:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005600:	2201      	movs	r2, #1
 8005602:	6142      	str	r2, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005608:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800560a:	2228      	movs	r2, #40	; 0x28
 800560c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800560e:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005610:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005612:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005614:	2207      	movs	r2, #7
 8005616:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005618:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800561a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800561c:	f003 feb0 	bl	8009380 <HAL_SPI_Init>
 8005620:	b900      	cbnz	r0, 8005624 <MX_SPI3_Init+0x4a>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005622:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005624:	f7ff ffaf 	bl	8005586 <Error_Handler>
}
 8005628:	e7fb      	b.n	8005622 <MX_SPI3_Init+0x48>

0800562a <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800562a:	b510      	push	{r4, lr}
 800562c:	b08a      	sub	sp, #40	; 0x28
 800562e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005630:	2300      	movs	r3, #0
 8005632:	9305      	str	r3, [sp, #20]
 8005634:	9306      	str	r3, [sp, #24]
 8005636:	9307      	str	r3, [sp, #28]
 8005638:	9308      	str	r3, [sp, #32]
 800563a:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 800563c:	6802      	ldr	r2, [r0, #0]
 800563e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005642:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005646:	429a      	cmp	r2, r3
 8005648:	d007      	beq.n	800565a <HAL_SPI_MspInit+0x30>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 800564a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800564e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005652:	429a      	cmp	r2, r3
 8005654:	d06c      	beq.n	8005730 <HAL_SPI_MspInit+0x106>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005656:	b00a      	add	sp, #40	; 0x28
 8005658:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800565a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800565e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005662:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005664:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
 800566a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800566c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005670:	9201      	str	r2, [sp, #4]
 8005672:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005676:	f042 0202 	orr.w	r2, r2, #2
 800567a:	64da      	str	r2, [r3, #76]	; 0x4c
 800567c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	9302      	str	r3, [sp, #8]
 8005684:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005686:	2338      	movs	r3, #56	; 0x38
 8005688:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800568a:	2302      	movs	r3, #2
 800568c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800568e:	2305      	movs	r3, #5
 8005690:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005692:	a905      	add	r1, sp, #20
 8005694:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005698:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800569c:	f002 fc72 	bl	8007f84 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel3;
 80056a0:	f641 00b4 	movw	r0, #6324	; 0x18b4
 80056a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80056a8:	2330      	movs	r3, #48	; 0x30
 80056aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056ae:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80056b0:	230a      	movs	r3, #10
 80056b2:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056b4:	2300      	movs	r3, #0
 80056b6:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056b8:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056be:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056c0:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80056c2:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056c4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80056c6:	f001 fd16 	bl	80070f6 <HAL_DMA_Init>
 80056ca:	bb58      	cbnz	r0, 8005724 <HAL_SPI_MspInit+0xfa>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80056cc:	f641 03b4 	movw	r3, #6324	; 0x18b4
 80056d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80056d6:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel4;
 80056d8:	f641 1014 	movw	r0, #6420	; 0x1914
 80056dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80056e0:	2344      	movs	r3, #68	; 0x44
 80056e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056e6:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80056e8:	230b      	movs	r3, #11
 80056ea:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056ec:	2310      	movs	r3, #16
 80056ee:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056f4:	2280      	movs	r2, #128	; 0x80
 80056f6:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056f8:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056fa:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80056fc:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056fe:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005700:	f001 fcf9 	bl	80070f6 <HAL_DMA_Init>
 8005704:	b988      	cbnz	r0, 800572a <HAL_SPI_MspInit+0x100>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005706:	f641 1314 	movw	r3, #6420	; 0x1914
 800570a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800570e:	6563      	str	r3, [r4, #84]	; 0x54
 8005710:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005712:	2200      	movs	r2, #0
 8005714:	4611      	mov	r1, r2
 8005716:	2023      	movs	r0, #35	; 0x23
 8005718:	f001 faf5 	bl	8006d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800571c:	2023      	movs	r0, #35	; 0x23
 800571e:	f001 fb2b 	bl	8006d78 <HAL_NVIC_EnableIRQ>
 8005722:	e798      	b.n	8005656 <HAL_SPI_MspInit+0x2c>
      Error_Handler();
 8005724:	f7ff ff2f 	bl	8005586 <Error_Handler>
 8005728:	e7d0      	b.n	80056cc <HAL_SPI_MspInit+0xa2>
      Error_Handler();
 800572a:	f7ff ff2c 	bl	8005586 <Error_Handler>
 800572e:	e7ea      	b.n	8005706 <HAL_SPI_MspInit+0xdc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005734:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005738:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800573a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800573e:	659a      	str	r2, [r3, #88]	; 0x58
 8005740:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005742:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005746:	9203      	str	r2, [sp, #12]
 8005748:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800574a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800574c:	f042 0204 	orr.w	r2, r2, #4
 8005750:	64da      	str	r2, [r3, #76]	; 0x4c
 8005752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	9304      	str	r3, [sp, #16]
 800575a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800575c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005760:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005762:	2302      	movs	r3, #2
 8005764:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005766:	2306      	movs	r3, #6
 8005768:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800576a:	a905      	add	r1, sp, #20
 800576c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005770:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005774:	f002 fc06 	bl	8007f84 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8005778:	f641 1074 	movw	r0, #6516	; 0x1974
 800577c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005780:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005784:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005788:	6003      	str	r3, [r0, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800578a:	230e      	movs	r3, #14
 800578c:	6043      	str	r3, [r0, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800578e:	2300      	movs	r3, #0
 8005790:	6083      	str	r3, [r0, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005792:	60c3      	str	r3, [r0, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005794:	2280      	movs	r2, #128	; 0x80
 8005796:	6102      	str	r2, [r0, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005798:	6143      	str	r3, [r0, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800579a:	6183      	str	r3, [r0, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800579c:	61c3      	str	r3, [r0, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800579e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80057a0:	f001 fca9 	bl	80070f6 <HAL_DMA_Init>
 80057a4:	bb60      	cbnz	r0, 8005800 <HAL_SPI_MspInit+0x1d6>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80057a6:	f641 1374 	movw	r3, #6516	; 0x1974
 80057aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80057ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80057b0:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80057b2:	f641 10d4 	movw	r0, #6612	; 0x19d4
 80057b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80057ba:	f240 431c 	movw	r3, #1052	; 0x41c
 80057be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057c2:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80057c4:	230f      	movs	r3, #15
 80057c6:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057c8:	2310      	movs	r3, #16
 80057ca:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057d4:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057d6:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80057d8:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80057da:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80057dc:	f001 fc8b 	bl	80070f6 <HAL_DMA_Init>
 80057e0:	b988      	cbnz	r0, 8005806 <HAL_SPI_MspInit+0x1dc>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80057e2:	f641 13d4 	movw	r3, #6612	; 0x19d4
 80057e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80057ea:	6563      	str	r3, [r4, #84]	; 0x54
 80057ec:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80057ee:	2200      	movs	r2, #0
 80057f0:	4611      	mov	r1, r2
 80057f2:	2033      	movs	r0, #51	; 0x33
 80057f4:	f001 fa87 	bl	8006d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80057f8:	2033      	movs	r0, #51	; 0x33
 80057fa:	f001 fabd 	bl	8006d78 <HAL_NVIC_EnableIRQ>
}
 80057fe:	e72a      	b.n	8005656 <HAL_SPI_MspInit+0x2c>
      Error_Handler();
 8005800:	f7ff fec1 	bl	8005586 <Error_Handler>
 8005804:	e7cf      	b.n	80057a6 <HAL_SPI_MspInit+0x17c>
      Error_Handler();
 8005806:	f7ff febe 	bl	8005586 <Error_Handler>
 800580a:	e7ea      	b.n	80057e2 <HAL_SPI_MspInit+0x1b8>

0800580c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800580c:	b500      	push	{lr}
 800580e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005814:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	661a      	str	r2, [r3, #96]	; 0x60
 8005820:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005822:	f002 0201 	and.w	r2, r2, #1
 8005826:	9200      	str	r2, [sp, #0]
 8005828:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800582c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005830:	659a      	str	r2, [r3, #88]	; 0x58
 8005832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800583c:	f002 fd64 	bl	8008308 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005840:	b003      	add	sp, #12
 8005842:	f85d fb04 	ldr.w	pc, [sp], #4

08005846 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005846:	e7fe      	b.n	8005846 <NMI_Handler>

08005848 <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  TIM1->CCR1 = 0;
 8005848:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800584c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005850:	2200      	movs	r2, #0
 8005852:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR2 = 0;
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1->CCR3 = 0;
 8005856:	63da      	str	r2, [r3, #60]	; 0x3c
  while (1)
 8005858:	e7fb      	b.n	8005852 <HardFault_Handler+0xa>

0800585a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800585a:	e7fe      	b.n	800585a <MemManage_Handler>

0800585c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800585c:	e7fe      	b.n	800585c <BusFault_Handler>

0800585e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800585e:	e7fe      	b.n	800585e <UsageFault_Handler>

08005860 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005860:	4770      	bx	lr

08005862 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005862:	4770      	bx	lr

08005864 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005864:	4770      	bx	lr

08005866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005866:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005868:	f000 fb69 	bl	8005f3e <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800586c:	bd08      	pop	{r3, pc}

0800586e <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800586e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005870:	f241 701c 	movw	r0, #5916	; 0x171c
 8005874:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005878:	f001 fd7b 	bl	8007372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800587c:	bd08      	pop	{r3, pc}

0800587e <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800587e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005880:	f241 707c 	movw	r0, #6012	; 0x177c
 8005884:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005888:	f001 fd73 	bl	8007372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800588c:	bd08      	pop	{r3, pc}

0800588e <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800588e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005890:	f641 00b4 	movw	r0, #6324	; 0x18b4
 8005894:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005898:	f001 fd6b 	bl	8007372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800589c:	bd08      	pop	{r3, pc}

0800589e <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800589e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80058a0:	f641 1014 	movw	r0, #6420	; 0x1914
 80058a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80058a8:	f001 fd63 	bl	8007372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80058ac:	bd08      	pop	{r3, pc}

080058ae <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80058ae:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80058b0:	f241 6044 	movw	r0, #5700	; 0x1644
 80058b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80058b8:	f000 fc8a 	bl	80061d0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80058bc:	f241 60b0 	movw	r0, #5808	; 0x16b0
 80058c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80058c4:	f000 fc84 	bl	80061d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80058c8:	bd08      	pop	{r3, pc}

080058ca <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80058ca:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80058cc:	f641 0018 	movw	r0, #6168	; 0x1818
 80058d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80058d4:	f002 f85f 	bl	8007996 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80058d8:	bd08      	pop	{r3, pc}

080058da <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80058da:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80058dc:	f641 304c 	movw	r0, #6988	; 0x1b4c
 80058e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80058e4:	f004 f9cd 	bl	8009c82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80058e8:	bd08      	pop	{r3, pc}

080058ea <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80058ea:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80058ec:	f641 2034 	movw	r0, #6708	; 0x1a34
 80058f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80058f4:	f003 ff4b 	bl	800978e <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80058f8:	bd08      	pop	{r3, pc}

080058fa <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80058fa:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80058fc:	f641 30f8 	movw	r0, #7160	; 0x1bf8
 8005900:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005904:	f005 f995 	bl	800ac32 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005908:	bd08      	pop	{r3, pc}

0800590a <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800590a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800590c:	f641 2098 	movw	r0, #6808	; 0x1a98
 8005910:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005914:	f003 ff3b 	bl	800978e <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005918:	bd08      	pop	{r3, pc}

0800591a <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800591a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800591c:	f641 1074 	movw	r0, #6516	; 0x1974
 8005920:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005924:	f001 fd25 	bl	8007372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005928:	bd08      	pop	{r3, pc}

0800592a <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800592a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800592c:	f641 10d4 	movw	r0, #6612	; 0x19d4
 8005930:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005934:	f001 fd1d 	bl	8007372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8005938:	bd08      	pop	{r3, pc}

0800593a <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800593a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800593c:	f641 3098 	movw	r0, #7064	; 0x1b98
 8005940:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005944:	f001 fd15 	bl	8007372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8005948:	bd08      	pop	{r3, pc}

0800594a <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800594a:	2001      	movs	r0, #1
 800594c:	4770      	bx	lr

0800594e <_kill>:

int _kill(int pid, int sig)
{
 800594e:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005950:	f006 fcda 	bl	800c308 <__errno>
 8005954:	2316      	movs	r3, #22
 8005956:	6003      	str	r3, [r0, #0]
  return -1;
}
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	bd08      	pop	{r3, pc}

0800595e <_exit>:

void _exit (int status)
{
 800595e:	b508      	push	{r3, lr}
  errno = EINVAL;
 8005960:	f006 fcd2 	bl	800c308 <__errno>
 8005964:	2316      	movs	r3, #22
 8005966:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005968:	e7fe      	b.n	8005968 <_exit+0xa>

0800596a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800596a:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800596c:	1e16      	subs	r6, r2, #0
 800596e:	dd07      	ble.n	8005980 <_read+0x16>
 8005970:	460c      	mov	r4, r1
 8005972:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8005974:	f3af 8000 	nop.w
 8005978:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800597c:	42a5      	cmp	r5, r4
 800597e:	d1f9      	bne.n	8005974 <_read+0xa>
  }

  return len;
}
 8005980:	4630      	mov	r0, r6
 8005982:	bd70      	pop	{r4, r5, r6, pc}

08005984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005984:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005986:	1e16      	subs	r6, r2, #0
 8005988:	dd07      	ble.n	800599a <_write+0x16>
 800598a:	460c      	mov	r4, r1
 800598c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800598e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005992:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005996:	42a5      	cmp	r5, r4
 8005998:	d1f9      	bne.n	800598e <_write+0xa>
  }
  return len;
}
 800599a:	4630      	mov	r0, r6
 800599c:	bd70      	pop	{r4, r5, r6, pc}

0800599e <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	4770      	bx	lr

080059a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80059a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059a8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80059aa:	2000      	movs	r0, #0
 80059ac:	4770      	bx	lr

080059ae <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80059ae:	2001      	movs	r0, #1
 80059b0:	4770      	bx	lr

080059b2 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80059b2:	2000      	movs	r0, #0
 80059b4:	4770      	bx	lr

080059b6 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059b6:	b508      	push	{r3, lr}
 80059b8:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059ba:	f248 0200 	movw	r2, #32768	; 0x8000
 80059be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80059c2:	f240 4100 	movw	r1, #1024	; 0x400
 80059c6:	f2c0 0100 	movt	r1, #0
 80059ca:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059cc:	f641 21fc 	movw	r1, #6908	; 0x1afc
 80059d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80059d4:	6809      	ldr	r1, [r1, #0]
 80059d6:	b169      	cbz	r1, 80059f4 <_sbrk+0x3e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059d8:	f641 21fc 	movw	r1, #6908	; 0x1afc
 80059dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80059e0:	6808      	ldr	r0, [r1, #0]
 80059e2:	4403      	add	r3, r0
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d80f      	bhi.n	8005a08 <_sbrk+0x52>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80059e8:	f641 22fc 	movw	r2, #6908	; 0x1afc
 80059ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80059f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80059f2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80059f4:	f641 21fc 	movw	r1, #6908	; 0x1afc
 80059f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80059fc:	f641 50d8 	movw	r0, #7640	; 0x1dd8
 8005a00:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005a04:	6008      	str	r0, [r1, #0]
 8005a06:	e7e7      	b.n	80059d8 <_sbrk+0x22>
    errno = ENOMEM;
 8005a08:	f006 fc7e 	bl	800c308 <__errno>
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	e7ed      	b.n	80059f2 <_sbrk+0x3c>

08005a16 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005a16:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005a1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005a1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a22:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a2a:	4770      	bx	lr

08005a2c <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a2c:	b500      	push	{lr}
 8005a2e:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a30:	2300      	movs	r3, #0
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	9305      	str	r3, [sp, #20]
 8005a36:	9306      	str	r3, [sp, #24]
 8005a38:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	9302      	str	r3, [sp, #8]
 8005a3e:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a40:	f641 304c 	movw	r0, #6988	; 0x1b4c
 8005a44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a4c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005a50:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 3;
 8005a52:	2203      	movs	r2, #3
 8005a54:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a56:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 3999;
 8005a58:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005a5c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a5e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005a64:	f004 fac5 	bl	8009ff2 <HAL_TIM_Base_Init>
 8005a68:	b9c0      	cbnz	r0, 8005a9c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a6e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005a70:	a904      	add	r1, sp, #16
 8005a72:	f641 304c 	movw	r0, #6988	; 0x1b4c
 8005a76:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005a7a:	f004 fc15 	bl	800a2a8 <HAL_TIM_ConfigClockSource>
 8005a7e:	b980      	cbnz	r0, 8005aa2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a80:	2300      	movs	r3, #0
 8005a82:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a84:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a86:	a901      	add	r1, sp, #4
 8005a88:	f641 304c 	movw	r0, #6988	; 0x1b4c
 8005a8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005a90:	f004 ff04 	bl	800a89c <HAL_TIMEx_MasterConfigSynchronization>
 8005a94:	b940      	cbnz	r0, 8005aa8 <MX_TIM3_Init+0x7c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005a96:	b009      	add	sp, #36	; 0x24
 8005a98:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005a9c:	f7ff fd73 	bl	8005586 <Error_Handler>
 8005aa0:	e7e3      	b.n	8005a6a <MX_TIM3_Init+0x3e>
    Error_Handler();
 8005aa2:	f7ff fd70 	bl	8005586 <Error_Handler>
 8005aa6:	e7eb      	b.n	8005a80 <MX_TIM3_Init+0x54>
    Error_Handler();
 8005aa8:	f7ff fd6d 	bl	8005586 <Error_Handler>
}
 8005aac:	e7f3      	b.n	8005a96 <MX_TIM3_Init+0x6a>

08005aae <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005aae:	b500      	push	{lr}
 8005ab0:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 8005ab2:	6802      	ldr	r2, [r0, #0]
 8005ab4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005ab8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d008      	beq.n	8005ad2 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8005ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d010      	beq.n	8005aee <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005acc:	b003      	add	sp, #12
 8005ace:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ad6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ada:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	9b00      	ldr	r3, [sp, #0]
 8005aec:	e7ee      	b.n	8005acc <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005af2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005af6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005af8:	f042 0202 	orr.w	r2, r2, #2
 8005afc:	659a      	str	r2, [r3, #88]	; 0x58
 8005afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	201d      	movs	r0, #29
 8005b0e:	f001 f8fa 	bl	8006d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b12:	201d      	movs	r0, #29
 8005b14:	f001 f930 	bl	8006d78 <HAL_NVIC_EnableIRQ>
}
 8005b18:	e7d8      	b.n	8005acc <HAL_TIM_Base_MspInit+0x1e>

08005b1a <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005b1a:	b570      	push	{r4, r5, r6, lr}
 8005b1c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b1e:	2300      	movs	r3, #0
 8005b20:	9303      	str	r3, [sp, #12]
 8005b22:	9304      	str	r3, [sp, #16]
 8005b24:	9305      	str	r3, [sp, #20]
 8005b26:	9306      	str	r3, [sp, #24]
 8005b28:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8005b2a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005b2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b32:	6802      	ldr	r2, [r0, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d001      	beq.n	8005b3c <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005b38:	b008      	add	sp, #32
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b46:	f042 0204 	orr.w	r2, r2, #4
 8005b4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b4e:	f002 0204 	and.w	r2, r2, #4
 8005b52:	9201      	str	r2, [sp, #4]
 8005b54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b58:	f042 0202 	orr.w	r2, r2, #2
 8005b5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8005b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	9302      	str	r3, [sp, #8]
 8005b66:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005b68:	2307      	movs	r3, #7
 8005b6a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b6c:	2502      	movs	r5, #2
 8005b6e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005b70:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b72:	a903      	add	r1, sp, #12
 8005b74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b78:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005b7c:	f002 fa02 	bl	8007f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005b80:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005b84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b86:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b88:	2400      	movs	r4, #0
 8005b8a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b8c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005b8e:	2306      	movs	r3, #6
 8005b90:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b92:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005b96:	f6c4 0600 	movt	r6, #18432	; 0x4800
 8005b9a:	a903      	add	r1, sp, #12
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f002 f9f1 	bl	8007f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005baa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bac:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005bae:	2304      	movs	r3, #4
 8005bb0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bb2:	a903      	add	r1, sp, #12
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f002 f9e5 	bl	8007f84 <HAL_GPIO_Init>
}
 8005bba:	e7bd      	b.n	8005b38 <HAL_TIM_MspPostInit+0x1e>

08005bbc <MX_TIM1_Init>:
{
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bc0:	2400      	movs	r4, #0
 8005bc2:	9418      	str	r4, [sp, #96]	; 0x60
 8005bc4:	9419      	str	r4, [sp, #100]	; 0x64
 8005bc6:	941a      	str	r4, [sp, #104]	; 0x68
 8005bc8:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bca:	9415      	str	r4, [sp, #84]	; 0x54
 8005bcc:	9416      	str	r4, [sp, #88]	; 0x58
 8005bce:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005bd0:	940e      	str	r4, [sp, #56]	; 0x38
 8005bd2:	940f      	str	r4, [sp, #60]	; 0x3c
 8005bd4:	9410      	str	r4, [sp, #64]	; 0x40
 8005bd6:	9411      	str	r4, [sp, #68]	; 0x44
 8005bd8:	9412      	str	r4, [sp, #72]	; 0x48
 8005bda:	9413      	str	r4, [sp, #76]	; 0x4c
 8005bdc:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005bde:	2234      	movs	r2, #52	; 0x34
 8005be0:	4621      	mov	r1, r4
 8005be2:	a801      	add	r0, sp, #4
 8005be4:	f006 fb3e 	bl	800c264 <memset>
  htim1.Instance = TIM1;
 8005be8:	f641 3000 	movw	r0, #6912	; 0x1b00
 8005bec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005bf0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005bf4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005bf8:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8005bfa:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1499;
 8005c00:	f240 53db 	movw	r3, #1499	; 0x5db
 8005c04:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c06:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005c08:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c0a:	2380      	movs	r3, #128	; 0x80
 8005c0c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005c0e:	f004 f9f0 	bl	8009ff2 <HAL_TIM_Base_Init>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d16a      	bne.n	8005cec <MX_TIM1_Init+0x130>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c1a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005c1c:	a918      	add	r1, sp, #96	; 0x60
 8005c1e:	f641 3000 	movw	r0, #6912	; 0x1b00
 8005c22:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005c26:	f004 fb3f 	bl	800a2a8 <HAL_TIM_ConfigClockSource>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d161      	bne.n	8005cf2 <MX_TIM1_Init+0x136>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005c2e:	f641 3000 	movw	r0, #6912	; 0x1b00
 8005c32:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005c36:	f004 fa0c 	bl	800a052 <HAL_TIM_PWM_Init>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d15c      	bne.n	8005cf8 <MX_TIM1_Init+0x13c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005c42:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c44:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005c46:	a915      	add	r1, sp, #84	; 0x54
 8005c48:	f641 3000 	movw	r0, #6912	; 0x1b00
 8005c4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005c50:	f004 fe24 	bl	800a89c <HAL_TIMEx_MasterConfigSynchronization>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d152      	bne.n	8005cfe <MX_TIM1_Init+0x142>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c58:	2360      	movs	r3, #96	; 0x60
 8005c5a:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005c60:	2302      	movs	r3, #2
 8005c62:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8005c64:	2308      	movs	r3, #8
 8005c66:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c68:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c6a:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c6c:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c6e:	a90e      	add	r1, sp, #56	; 0x38
 8005c70:	f641 3000 	movw	r0, #6912	; 0x1b00
 8005c74:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005c78:	f004 fa6c 	bl	800a154 <HAL_TIM_PWM_ConfigChannel>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d141      	bne.n	8005d04 <MX_TIM1_Init+0x148>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005c80:	2204      	movs	r2, #4
 8005c82:	a90e      	add	r1, sp, #56	; 0x38
 8005c84:	f641 3000 	movw	r0, #6912	; 0x1b00
 8005c88:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005c8c:	f004 fa62 	bl	800a154 <HAL_TIM_PWM_ConfigChannel>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d13a      	bne.n	8005d0a <MX_TIM1_Init+0x14e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c94:	2208      	movs	r2, #8
 8005c96:	a90e      	add	r1, sp, #56	; 0x38
 8005c98:	f641 3000 	movw	r0, #6912	; 0x1b00
 8005c9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005ca0:	f004 fa58 	bl	800a154 <HAL_TIM_PWM_ConfigChannel>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d133      	bne.n	8005d10 <MX_TIM1_Init+0x154>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005cac:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005cae:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005cb0:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005cb2:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cb8:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005cba:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005cbc:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005cbe:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cc4:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005cc6:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005cc8:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005cca:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005ccc:	a901      	add	r1, sp, #4
 8005cce:	f641 3000 	movw	r0, #6912	; 0x1b00
 8005cd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005cd6:	f004 fe38 	bl	800a94a <HAL_TIMEx_ConfigBreakDeadTime>
 8005cda:	b9e0      	cbnz	r0, 8005d16 <MX_TIM1_Init+0x15a>
  HAL_TIM_MspPostInit(&htim1);
 8005cdc:	f641 3000 	movw	r0, #6912	; 0x1b00
 8005ce0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005ce4:	f7ff ff19 	bl	8005b1a <HAL_TIM_MspPostInit>
}
 8005ce8:	b01c      	add	sp, #112	; 0x70
 8005cea:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005cec:	f7ff fc4b 	bl	8005586 <Error_Handler>
 8005cf0:	e791      	b.n	8005c16 <MX_TIM1_Init+0x5a>
    Error_Handler();
 8005cf2:	f7ff fc48 	bl	8005586 <Error_Handler>
 8005cf6:	e79a      	b.n	8005c2e <MX_TIM1_Init+0x72>
    Error_Handler();
 8005cf8:	f7ff fc45 	bl	8005586 <Error_Handler>
 8005cfc:	e79f      	b.n	8005c3e <MX_TIM1_Init+0x82>
    Error_Handler();
 8005cfe:	f7ff fc42 	bl	8005586 <Error_Handler>
 8005d02:	e7a9      	b.n	8005c58 <MX_TIM1_Init+0x9c>
    Error_Handler();
 8005d04:	f7ff fc3f 	bl	8005586 <Error_Handler>
 8005d08:	e7ba      	b.n	8005c80 <MX_TIM1_Init+0xc4>
    Error_Handler();
 8005d0a:	f7ff fc3c 	bl	8005586 <Error_Handler>
 8005d0e:	e7c1      	b.n	8005c94 <MX_TIM1_Init+0xd8>
    Error_Handler();
 8005d10:	f7ff fc39 	bl	8005586 <Error_Handler>
 8005d14:	e7c8      	b.n	8005ca8 <MX_TIM1_Init+0xec>
    Error_Handler();
 8005d16:	f7ff fc36 	bl	8005586 <Error_Handler>
 8005d1a:	e7df      	b.n	8005cdc <MX_TIM1_Init+0x120>

08005d1c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d1c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d1e:	f641 30f8 	movw	r0, #7160	; 0x1bf8
 8005d22:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d26:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005d2a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005d2e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8005d30:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8005d34:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d36:	2300      	movs	r3, #0
 8005d38:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d3a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d3c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d3e:	220c      	movs	r2, #12
 8005d40:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d42:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d44:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d46:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d48:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d4a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d4c:	f005 fc0c 	bl	800b568 <HAL_UART_Init>
 8005d50:	b9b8      	cbnz	r0, 8005d82 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d52:	2100      	movs	r1, #0
 8005d54:	f641 30f8 	movw	r0, #7160	; 0x1bf8
 8005d58:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d5c:	f005 fc84 	bl	800b668 <HAL_UARTEx_SetTxFifoThreshold>
 8005d60:	b990      	cbnz	r0, 8005d88 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d62:	2100      	movs	r1, #0
 8005d64:	f641 30f8 	movw	r0, #7160	; 0x1bf8
 8005d68:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d6c:	f005 fca1 	bl	800b6b2 <HAL_UARTEx_SetRxFifoThreshold>
 8005d70:	b968      	cbnz	r0, 8005d8e <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005d72:	f641 30f8 	movw	r0, #7160	; 0x1bf8
 8005d76:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d7a:	f005 fc56 	bl	800b62a <HAL_UARTEx_DisableFifoMode>
 8005d7e:	b948      	cbnz	r0, 8005d94 <MX_USART1_UART_Init+0x78>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005d80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005d82:	f7ff fc00 	bl	8005586 <Error_Handler>
 8005d86:	e7e4      	b.n	8005d52 <MX_USART1_UART_Init+0x36>
    Error_Handler();
 8005d88:	f7ff fbfd 	bl	8005586 <Error_Handler>
 8005d8c:	e7e9      	b.n	8005d62 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 8005d8e:	f7ff fbfa 	bl	8005586 <Error_Handler>
 8005d92:	e7ee      	b.n	8005d72 <MX_USART1_UART_Init+0x56>
    Error_Handler();
 8005d94:	f7ff fbf7 	bl	8005586 <Error_Handler>
}
 8005d98:	e7f2      	b.n	8005d80 <MX_USART1_UART_Init+0x64>

08005d9a <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d9a:	b530      	push	{r4, r5, lr}
 8005d9c:	b099      	sub	sp, #100	; 0x64
 8005d9e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005da0:	2100      	movs	r1, #0
 8005da2:	9113      	str	r1, [sp, #76]	; 0x4c
 8005da4:	9114      	str	r1, [sp, #80]	; 0x50
 8005da6:	9115      	str	r1, [sp, #84]	; 0x54
 8005da8:	9116      	str	r1, [sp, #88]	; 0x58
 8005daa:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005dac:	2244      	movs	r2, #68	; 0x44
 8005dae:	a802      	add	r0, sp, #8
 8005db0:	f006 fa58 	bl	800c264 <memset>
  if(uartHandle->Instance==USART1)
 8005db4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005db8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005dbc:	6822      	ldr	r2, [r4, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d001      	beq.n	8005dc6 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005dc2:	b019      	add	sp, #100	; 0x64
 8005dc4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dca:	a802      	add	r0, sp, #8
 8005dcc:	f002 ffa8 	bl	8008d20 <HAL_RCCEx_PeriphCLKConfig>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d14b      	bne.n	8005e6c <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005de2:	661a      	str	r2, [r3, #96]	; 0x60
 8005de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005de6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005dea:	9200      	str	r2, [sp, #0]
 8005dec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005df0:	f042 0204 	orr.w	r2, r2, #4
 8005df4:	64da      	str	r2, [r3, #76]	; 0x4c
 8005df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005e00:	2330      	movs	r3, #48	; 0x30
 8005e02:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e04:	2302      	movs	r3, #2
 8005e06:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e08:	2500      	movs	r5, #0
 8005e0a:	9515      	str	r5, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e0c:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e0e:	2307      	movs	r3, #7
 8005e10:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e12:	a913      	add	r1, sp, #76	; 0x4c
 8005e14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e18:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8005e1c:	f002 f8b2 	bl	8007f84 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8005e20:	f641 3098 	movw	r0, #7064	; 0x1b98
 8005e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005e28:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8005e2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e30:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005e32:	2319      	movs	r3, #25
 8005e34:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e36:	2310      	movs	r3, #16
 8005e38:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e3a:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e40:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e42:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005e44:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e46:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005e48:	f001 f955 	bl	80070f6 <HAL_DMA_Init>
 8005e4c:	b988      	cbnz	r0, 8005e72 <HAL_UART_MspInit+0xd8>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005e4e:	f641 3398 	movw	r3, #7064	; 0x1b98
 8005e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e56:	67a3      	str	r3, [r4, #120]	; 0x78
 8005e58:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	2025      	movs	r0, #37	; 0x25
 8005e60:	f000 ff51 	bl	8006d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e64:	2025      	movs	r0, #37	; 0x25
 8005e66:	f000 ff87 	bl	8006d78 <HAL_NVIC_EnableIRQ>
}
 8005e6a:	e7aa      	b.n	8005dc2 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8005e6c:	f7ff fb8b 	bl	8005586 <Error_Handler>
 8005e70:	e7b0      	b.n	8005dd4 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8005e72:	f7ff fb88 	bl	8005586 <Error_Handler>
 8005e76:	e7ea      	b.n	8005e4e <HAL_UART_MspInit+0xb4>

08005e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e78:	480d      	ldr	r0, [pc, #52]	; (8005eb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e7c:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e7e:	490e      	ldr	r1, [pc, #56]	; (8005eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e80:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <LoopForever+0xe>)
  movs r3, #0
 8005e82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005e84:	e002      	b.n	8005e8c <LoopCopyDataInit>

08005e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e8a:	3304      	adds	r3, #4

08005e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e90:	d3f9      	bcc.n	8005e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e92:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e94:	4c0b      	ldr	r4, [pc, #44]	; (8005ec4 <LoopForever+0x16>)
  movs r3, #0
 8005e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e98:	e001      	b.n	8005e9e <LoopFillZerobss>

08005e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e9c:	3204      	adds	r2, #4

08005e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ea0:	d3fb      	bcc.n	8005e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ea2:	f7ff fdb8 	bl	8005a16 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ea6:	f006 fa35 	bl	800c314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005eaa:	f7ff fb4a 	bl	8005542 <main>

08005eae <LoopForever>:

LoopForever:
    b LoopForever
 8005eae:	e7fe      	b.n	8005eae <LoopForever>
  ldr   r0, =_estack
 8005eb0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005eb8:	20000780 	.word	0x20000780
  ldr r2, =_sidata
 8005ebc:	0800fd40 	.word	0x0800fd40
  ldr r2, =_sbss
 8005ec0:	20000780 	.word	0x20000780
  ldr r4, =_ebss
 8005ec4:	20001dd8 	.word	0x20001dd8

08005ec8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ec8:	e7fe      	b.n	8005ec8 <COMP1_2_3_IRQHandler>

08005eca <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005eca:	f240 537c 	movw	r3, #1404	; 0x57c
 8005ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	b90b      	cbnz	r3, 8005eda <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005ed6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005ed8:	4770      	bx	lr
{
 8005eda:	b510      	push	{r4, lr}
 8005edc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005ede:	f240 5278 	movw	r2, #1400	; 0x578
 8005ee2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eee:	6810      	ldr	r0, [r2, #0]
 8005ef0:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ef4:	f000 ff4e 	bl	8006d94 <HAL_SYSTICK_Config>
 8005ef8:	b980      	cbnz	r0, 8005f1c <HAL_InitTick+0x52>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005efa:	2c0f      	cmp	r4, #15
 8005efc:	d901      	bls.n	8005f02 <HAL_InitTick+0x38>
        status = HAL_ERROR;
 8005efe:	2001      	movs	r0, #1
 8005f00:	e00d      	b.n	8005f1e <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f02:	2200      	movs	r2, #0
 8005f04:	4621      	mov	r1, r4
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0a:	f000 fefc 	bl	8006d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f0e:	f240 5380 	movw	r3, #1408	; 0x580
 8005f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f16:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e000      	b.n	8005f1e <HAL_InitTick+0x54>
      status = HAL_ERROR;
 8005f1c:	2001      	movs	r0, #1
}
 8005f1e:	bd10      	pop	{r4, pc}

08005f20 <HAL_Init>:
{
 8005f20:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f22:	2003      	movs	r0, #3
 8005f24:	f000 fedc 	bl	8006ce0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f28:	200f      	movs	r0, #15
 8005f2a:	f7ff ffce 	bl	8005eca <HAL_InitTick>
 8005f2e:	b110      	cbz	r0, 8005f36 <HAL_Init+0x16>
    status = HAL_ERROR;
 8005f30:	2401      	movs	r4, #1
}
 8005f32:	4620      	mov	r0, r4
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	4604      	mov	r4, r0
    HAL_MspInit();
 8005f38:	f7ff fc68 	bl	800580c <HAL_MspInit>
 8005f3c:	e7f9      	b.n	8005f32 <HAL_Init+0x12>

08005f3e <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005f3e:	f641 4388 	movw	r3, #7304	; 0x1c88
 8005f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	f240 517c 	movw	r1, #1404	; 0x57c
 8005f4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005f50:	6809      	ldr	r1, [r1, #0]
 8005f52:	440a      	add	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]
}
 8005f56:	4770      	bx	lr

08005f58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005f58:	f641 4388 	movw	r3, #7304	; 0x1c88
 8005f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f60:	6818      	ldr	r0, [r3, #0]
}
 8005f62:	4770      	bx	lr

08005f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005f68:	f7ff fff6 	bl	8005f58 <HAL_GetTick>
 8005f6c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f6e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005f72:	d005      	beq.n	8005f80 <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f74:	f240 537c 	movw	r3, #1404	; 0x57c
 8005f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f80:	f7ff ffea 	bl	8005f58 <HAL_GetTick>
 8005f84:	1b40      	subs	r0, r0, r5
 8005f86:	42a0      	cmp	r0, r4
 8005f88:	d3fa      	bcc.n	8005f80 <HAL_Delay+0x1c>
  {
  }
}
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}

08005f8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f8c:	b530      	push	{r4, r5, lr}
 8005f8e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005f94:	2800      	cmp	r0, #0
 8005f96:	f000 8112 	beq.w	80061be <HAL_ADC_Init+0x232>
 8005f9a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f9c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80ce 	beq.w	8006140 <HAL_ADC_Init+0x1b4>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005fa4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8005fac:	d005      	beq.n	8005fba <HAL_ADC_Init+0x2e>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8005fb4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005fb8:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fba:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005fbc:	6893      	ldr	r3, [r2, #8]
 8005fbe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005fc2:	d11f      	bne.n	8006004 <HAL_ADC_Init+0x78>
  MODIFY_REG(ADCx->CR,
 8005fc4:	6893      	ldr	r3, [r2, #8]
 8005fc6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005fca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fd4:	f240 5378 	movw	r3, #1400	; 0x578
 8005fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	099b      	lsrs	r3, r3, #6
 8005fe0:	f642 5263 	movw	r2, #11619	; 0x2d63
 8005fe4:	f2c0 523e 	movt	r2, #1342	; 0x53e
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	099b      	lsrs	r3, r3, #6
 8005fee:	3301      	adds	r3, #1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005ff4:	9b01      	ldr	r3, [sp, #4]
 8005ff6:	b12b      	cbz	r3, 8006004 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8005ff8:	9b01      	ldr	r3, [sp, #4]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005ffe:	9b01      	ldr	r3, [sp, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f9      	bne.n	8005ff8 <HAL_ADC_Init+0x6c>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006004:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006006:	688b      	ldr	r3, [r1, #8]
 8006008:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800600c:	f040 809f 	bne.w	800614e <HAL_ADC_Init+0x1c2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006010:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006012:	f043 0310 	orr.w	r3, r3, #16
 8006016:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006018:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006020:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006022:	688a      	ldr	r2, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006024:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	f002 0204 	and.w	r2, r2, #4
 800602e:	4313      	orrs	r3, r2
 8006030:	f040 80be 	bne.w	80061b0 <HAL_ADC_Init+0x224>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006034:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006036:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800603a:	f043 0302 	orr.w	r3, r3, #2
 800603e:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006040:	688b      	ldr	r3, [r1, #8]
 8006042:	f013 0f01 	tst.w	r3, #1
 8006046:	d115      	bne.n	8006074 <HAL_ADC_Init+0xe8>
 8006048:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006052:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8006056:	689b      	ldr	r3, [r3, #8]
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006058:	4313      	orrs	r3, r2
 800605a:	f013 0f01 	tst.w	r3, #1
 800605e:	d109      	bne.n	8006074 <HAL_ADC_Init+0xe8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006060:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006064:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8006068:	6893      	ldr	r3, [r2, #8]
 800606a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800606e:	6861      	ldr	r1, [r4, #4]
 8006070:	430b      	orrs	r3, r1
 8006072:	6093      	str	r3, [r2, #8]
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006074:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8006078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800607a:	68e1      	ldr	r1, [r4, #12]
 800607c:	430b      	orrs	r3, r1
 800607e:	68a1      	ldr	r1, [r4, #8]
 8006080:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006082:	7f61      	ldrb	r1, [r4, #29]
                hadc->Init.DataAlign                                                   |
 8006084:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800608c:	2a01      	cmp	r2, #1
 800608e:	d060      	beq.n	8006152 <HAL_ADC_Init+0x1c6>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006090:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006092:	b122      	cbz	r2, 800609e <HAL_ADC_Init+0x112>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006094:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006098:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800609a:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800609c:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	68cd      	ldr	r5, [r1, #12]
 80060a2:	f244 0207 	movw	r2, #16391	; 0x4007
 80060a6:	f6cf 72f0 	movt	r2, #65520	; 0xfff0
 80060aa:	402a      	ands	r2, r5
 80060ac:	431a      	orrs	r2, r3
 80060ae:	60ca      	str	r2, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	6913      	ldr	r3, [r2, #16]
 80060b4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80060b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ba:	430b      	orrs	r3, r1
 80060bc:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060be:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060c0:	688a      	ldr	r2, [r1, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80060c2:	688b      	ldr	r3, [r1, #8]
 80060c4:	f003 0308 	and.w	r3, r3, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060c8:	f002 0204 	and.w	r2, r2, #4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	d128      	bne.n	8006122 <HAL_ADC_Init+0x196>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80060d0:	68ca      	ldr	r2, [r1, #12]
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80060d2:	7f25      	ldrb	r5, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80060d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80060d8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80060da:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80060de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060e2:	f022 0202 	bic.w	r2, r2, #2
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d035      	beq.n	800615c <HAL_ADC_Init+0x1d0>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80060f0:	6822      	ldr	r2, [r4, #0]
 80060f2:	6913      	ldr	r3, [r2, #16]
 80060f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8006100:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006108:	6921      	ldr	r1, [r4, #16]
 800610a:	430b      	orrs	r3, r1
 800610c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006110:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006114:	2b01      	cmp	r3, #1
 8006116:	d030      	beq.n	800617a <HAL_ADC_Init+0x1ee>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006118:	6822      	ldr	r2, [r4, #0]
 800611a:	6913      	ldr	r3, [r2, #16]
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006122:	6963      	ldr	r3, [r4, #20]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d03a      	beq.n	800619e <HAL_ADC_Init+0x212>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006128:	6822      	ldr	r2, [r4, #0]
 800612a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800612c:	f023 030f 	bic.w	r3, r3, #15
 8006130:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006132:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006134:	f023 0303 	bic.w	r3, r3, #3
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800613e:	e03c      	b.n	80061ba <HAL_ADC_Init+0x22e>
    HAL_ADC_MspInit(hadc);
 8006140:	f7fe fe9f 	bl	8004e82 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006144:	2300      	movs	r3, #0
 8006146:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8006148:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800614c:	e72a      	b.n	8005fa4 <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800614e:	2000      	movs	r0, #0
 8006150:	e767      	b.n	8006022 <HAL_ADC_Init+0x96>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006152:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006154:	3a01      	subs	r2, #1
 8006156:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800615a:	e799      	b.n	8006090 <HAL_ADC_Init+0x104>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	6913      	ldr	r3, [r2, #16]
 8006160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006164:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006166:	6822      	ldr	r2, [r4, #0]
 8006168:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800616c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006170:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006174:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006178:	e7ca      	b.n	8006110 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 800617a:	6821      	ldr	r1, [r4, #0]
 800617c:	690a      	ldr	r2, [r1, #16]
 800617e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006180:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8006182:	432b      	orrs	r3, r5
 8006184:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8006188:	f022 0204 	bic.w	r2, r2, #4
 800618c:	4313      	orrs	r3, r2
 800618e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006190:	4313      	orrs	r3, r2
 8006192:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006194:	4313      	orrs	r3, r2
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	610b      	str	r3, [r1, #16]
 800619c:	e7c1      	b.n	8006122 <HAL_ADC_Init+0x196>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800619e:	6821      	ldr	r1, [r4, #0]
 80061a0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80061a2:	6a23      	ldr	r3, [r4, #32]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	f022 020f 	bic.w	r2, r2, #15
 80061aa:	4313      	orrs	r3, r2
 80061ac:	630b      	str	r3, [r1, #48]	; 0x30
 80061ae:	e7c0      	b.n	8006132 <HAL_ADC_Init+0x1a6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80061b2:	f043 0310 	orr.w	r3, r3, #16
 80061b6:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80061b8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80061ba:	b003      	add	sp, #12
 80061bc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80061be:	2001      	movs	r0, #1
 80061c0:	e7fb      	b.n	80061ba <HAL_ADC_Init+0x22e>

080061c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80061c2:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80061c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80061c6:	f7fe f91b 	bl	8004400 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061ca:	bd08      	pop	{r3, pc}

080061cc <HAL_ADC_LevelOutOfWindowCallback>:
}
 80061cc:	4770      	bx	lr

080061ce <HAL_ADC_ErrorCallback>:
}
 80061ce:	4770      	bx	lr

080061d0 <HAL_ADC_IRQHandler>:
{
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80061d4:	6803      	ldr	r3, [r0, #0]
 80061d6:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80061d8:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80061da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80061de:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80061e2:	689e      	ldr	r6, [r3, #8]
 80061e4:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80061e8:	f017 0f02 	tst.w	r7, #2
 80061ec:	d010      	beq.n	8006210 <HAL_ADC_IRQHandler+0x40>
 80061ee:	f015 0f02 	tst.w	r5, #2
 80061f2:	d00d      	beq.n	8006210 <HAL_ADC_IRQHandler+0x40>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061f4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80061f6:	f013 0f10 	tst.w	r3, #16
 80061fa:	d103      	bne.n	8006204 <HAL_ADC_IRQHandler+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80061fc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80061fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006202:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006204:	4620      	mov	r0, r4
 8006206:	f000 fccb 	bl	8006ba0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	2202      	movs	r2, #2
 800620e:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006210:	f017 0f04 	tst.w	r7, #4
 8006214:	d002      	beq.n	800621c <HAL_ADC_IRQHandler+0x4c>
 8006216:	f015 0f04 	tst.w	r5, #4
 800621a:	d105      	bne.n	8006228 <HAL_ADC_IRQHandler+0x58>
 800621c:	f017 0f08 	tst.w	r7, #8
 8006220:	d041      	beq.n	80062a6 <HAL_ADC_IRQHandler+0xd6>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006222:	f015 0f08 	tst.w	r5, #8
 8006226:	d03e      	beq.n	80062a6 <HAL_ADC_IRQHandler+0xd6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006228:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800622a:	f013 0f10 	tst.w	r3, #16
 800622e:	d103      	bne.n	8006238 <HAL_ADC_IRQHandler+0x68>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006230:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006236:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006238:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006240:	d12b      	bne.n	800629a <HAL_ADC_IRQHandler+0xca>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006246:	f2c5 0200 	movt	r2, #20480	; 0x5000
 800624a:	4293      	cmp	r3, r2
 800624c:	f000 80fc 	beq.w	8006448 <HAL_ADC_IRQHandler+0x278>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006250:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006252:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8006256:	d120      	bne.n	800629a <HAL_ADC_IRQHandler+0xca>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	f012 0f08 	tst.w	r2, #8
 800625e:	d01c      	beq.n	800629a <HAL_ADC_IRQHandler+0xca>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	f012 0f04 	tst.w	r2, #4
 8006266:	d110      	bne.n	800628a <HAL_ADC_IRQHandler+0xba>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	f022 020c 	bic.w	r2, r2, #12
 800626e:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006270:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006276:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006278:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800627a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800627e:	d10c      	bne.n	800629a <HAL_ADC_IRQHandler+0xca>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006280:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006288:	e007      	b.n	800629a <HAL_ADC_IRQHandler+0xca>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800628a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800628c:	f043 0310 	orr.w	r3, r3, #16
 8006290:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006292:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 800629a:	4620      	mov	r0, r4
 800629c:	f7fe fa07 	bl	80046ae <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	220c      	movs	r2, #12
 80062a4:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80062a6:	f017 0f20 	tst.w	r7, #32
 80062aa:	d002      	beq.n	80062b2 <HAL_ADC_IRQHandler+0xe2>
 80062ac:	f015 0f20 	tst.w	r5, #32
 80062b0:	d105      	bne.n	80062be <HAL_ADC_IRQHandler+0xee>
 80062b2:	f017 0f40 	tst.w	r7, #64	; 0x40
 80062b6:	d04b      	beq.n	8006350 <HAL_ADC_IRQHandler+0x180>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80062b8:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062bc:	d048      	beq.n	8006350 <HAL_ADC_IRQHandler+0x180>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80062be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80062c0:	f013 0f10 	tst.w	r3, #16
 80062c4:	d103      	bne.n	80062ce <HAL_ADC_IRQHandler+0xfe>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80062c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80062c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80062cc:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80062ce:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80062d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062d2:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80062d6:	68d8      	ldr	r0, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062dc:	f2c5 0100 	movt	r1, #20480	; 0x5000
 80062e0:	428b      	cmp	r3, r1
 80062e2:	f000 80a7 	beq.w	8006434 <HAL_ADC_IRQHandler+0x264>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80062e6:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80062e8:	bb62      	cbnz	r2, 8006344 <HAL_ADC_IRQHandler+0x174>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80062ea:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80062ee:	d005      	beq.n	80062fc <HAL_ADC_IRQHandler+0x12c>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80062f0:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 80062f4:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80062f8:	4302      	orrs	r2, r0
 80062fa:	d123      	bne.n	8006344 <HAL_ADC_IRQHandler+0x174>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006302:	d01f      	beq.n	8006344 <HAL_ADC_IRQHandler+0x174>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006304:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8006308:	d11c      	bne.n	8006344 <HAL_ADC_IRQHandler+0x174>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	f012 0f08 	tst.w	r2, #8
 8006310:	d110      	bne.n	8006334 <HAL_ADC_IRQHandler+0x164>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006318:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800631a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800631c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006320:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006322:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006324:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006328:	d10c      	bne.n	8006344 <HAL_ADC_IRQHandler+0x174>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800632a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006332:	e007      	b.n	8006344 <HAL_ADC_IRQHandler+0x174>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006334:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006336:	f043 0310 	orr.w	r3, r3, #16
 800633a:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800633c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006344:	4620      	mov	r0, r4
 8006346:	f000 fc27 	bl	8006b98 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	2260      	movs	r2, #96	; 0x60
 800634e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006350:	f017 0f80 	tst.w	r7, #128	; 0x80
 8006354:	d002      	beq.n	800635c <HAL_ADC_IRQHandler+0x18c>
 8006356:	f015 0f80 	tst.w	r5, #128	; 0x80
 800635a:	d132      	bne.n	80063c2 <HAL_ADC_IRQHandler+0x1f2>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800635c:	f417 7f80 	tst.w	r7, #256	; 0x100
 8006360:	d002      	beq.n	8006368 <HAL_ADC_IRQHandler+0x198>
 8006362:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006366:	d137      	bne.n	80063d8 <HAL_ADC_IRQHandler+0x208>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006368:	f417 7f00 	tst.w	r7, #512	; 0x200
 800636c:	d002      	beq.n	8006374 <HAL_ADC_IRQHandler+0x1a4>
 800636e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8006372:	d13d      	bne.n	80063f0 <HAL_ADC_IRQHandler+0x220>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006374:	f017 0f10 	tst.w	r7, #16
 8006378:	d01c      	beq.n	80063b4 <HAL_ADC_IRQHandler+0x1e4>
 800637a:	f015 0f10 	tst.w	r5, #16
 800637e:	d019      	beq.n	80063b4 <HAL_ADC_IRQHandler+0x1e4>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006382:	b14b      	cbz	r3, 8006398 <HAL_ADC_IRQHandler+0x1c8>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006384:	2e00      	cmp	r6, #0
 8006386:	d03f      	beq.n	8006408 <HAL_ADC_IRQHandler+0x238>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800638c:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8006390:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006392:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8006396:	d00a      	beq.n	80063ae <HAL_ADC_IRQHandler+0x1de>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006398:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800639a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800639e:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80063a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 80063a8:	4620      	mov	r0, r4
 80063aa:	f7ff ff10 	bl	80061ce <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	2210      	movs	r2, #16
 80063b2:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80063b4:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80063b8:	d002      	beq.n	80063c0 <HAL_ADC_IRQHandler+0x1f0>
 80063ba:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80063be:	d129      	bne.n	8006414 <HAL_ADC_IRQHandler+0x244>
}
 80063c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80063c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c8:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7ff fefe 	bl	80061cc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	2280      	movs	r2, #128	; 0x80
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e7c1      	b.n	800635c <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80063d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063de:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fbdb 	bl	8006b9c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e7bb      	b.n	8006368 <HAL_ADC_IRQHandler+0x198>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80063f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f6:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 fbd0 	bl	8006b9e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e7b5      	b.n	8006374 <HAL_ADC_IRQHandler+0x1a4>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f013 0f01 	tst.w	r3, #1
 8006410:	d0cd      	beq.n	80063ae <HAL_ADC_IRQHandler+0x1de>
 8006412:	e7c1      	b.n	8006398 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006414:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800641a:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800641c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800641e:	f043 0308 	orr.w	r3, r3, #8
 8006422:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800642a:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800642c:	4620      	mov	r0, r4
 800642e:	f000 fbb4 	bl	8006b9a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8006432:	e7c5      	b.n	80063c0 <HAL_ADC_IRQHandler+0x1f0>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006434:	21c1      	movs	r1, #193	; 0xc1
 8006436:	40f1      	lsrs	r1, r6
 8006438:	f011 0f01 	tst.w	r1, #1
 800643c:	f47f af53 	bne.w	80062e6 <HAL_ADC_IRQHandler+0x116>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006440:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8006444:	68c9      	ldr	r1, [r1, #12]
 8006446:	e74f      	b.n	80062e8 <HAL_ADC_IRQHandler+0x118>
 8006448:	f240 2221 	movw	r2, #545	; 0x221
 800644c:	40f2      	lsrs	r2, r6
 800644e:	f012 0f01 	tst.w	r2, #1
 8006452:	f47f aefd 	bne.w	8006250 <HAL_ADC_IRQHandler+0x80>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006456:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800645a:	68d2      	ldr	r2, [r2, #12]
 800645c:	e6f9      	b.n	8006252 <HAL_ADC_IRQHandler+0x82>

0800645e <ADC_DMAConvCplt>:
{
 800645e:	b508      	push	{r3, lr}
 8006460:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006462:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006464:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006466:	f012 0f50 	tst.w	r2, #80	; 0x50
 800646a:	d130      	bne.n	80064ce <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800646c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800646e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006472:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006474:	6803      	ldr	r3, [r0, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	f012 0f08 	tst.w	r2, #8
 800647c:	d014      	beq.n	80064a8 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006484:	d120      	bne.n	80064c8 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800648c:	d11c      	bne.n	80064c8 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800648e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006494:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006496:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006498:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800649c:	d114      	bne.n	80064c8 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800649e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	65c3      	str	r3, [r0, #92]	; 0x5c
 80064a6:	e00f      	b.n	80064c8 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f013 0f02 	tst.w	r3, #2
 80064ae:	d10b      	bne.n	80064c8 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064b0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80064b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064b6:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80064ba:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80064be:	d103      	bne.n	80064c8 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064c0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80064c8:	f7fe f8f1 	bl	80046ae <HAL_ADC_ConvCpltCallback>
}
 80064cc:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80064ce:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80064d0:	f012 0f10 	tst.w	r2, #16
 80064d4:	d104      	bne.n	80064e0 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80064d6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80064d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064da:	4618      	mov	r0, r3
 80064dc:	4790      	blx	r2
}
 80064de:	e7f5      	b.n	80064cc <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80064e0:	f7ff fe75 	bl	80061ce <HAL_ADC_ErrorCallback>
 80064e4:	e7f2      	b.n	80064cc <ADC_DMAConvCplt+0x6e>

080064e6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80064e6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80064ea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80064ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f0:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80064f2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80064f4:	f043 0304 	orr.w	r3, r3, #4
 80064f8:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80064fa:	f7ff fe68 	bl	80061ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80064fe:	bd08      	pop	{r3, pc}

08006500 <HAL_ADC_ConfigChannel>:
{
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8006504:	2200      	movs	r2, #0
 8006506:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8006508:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800650c:	2a01      	cmp	r2, #1
 800650e:	f000 8263 	beq.w	80069d8 <HAL_ADC_ConfigChannel+0x4d8>
 8006512:	4603      	mov	r3, r0
 8006514:	2201      	movs	r2, #1
 8006516:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800651a:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800651c:	6890      	ldr	r0, [r2, #8]
 800651e:	f010 0f04 	tst.w	r0, #4
 8006522:	d009      	beq.n	8006538 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006524:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006526:	f042 0220 	orr.w	r2, r2, #32
 800652a:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800652c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8006534:	b002      	add	sp, #8
 8006536:	bd70      	pop	{r4, r5, r6, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006538:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800653a:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 800653e:	f00e 0e0c 	and.w	lr, lr, #12
 8006542:	3230      	adds	r2, #48	; 0x30
  MODIFY_REG(*preg,
 8006544:	f852 400e 	ldr.w	r4, [r2, lr]
 8006548:	f000 0c1f 	and.w	ip, r0, #31
 800654c:	6808      	ldr	r0, [r1, #0]
 800654e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8006552:	fa00 f00c 	lsl.w	r0, r0, ip
 8006556:	251f      	movs	r5, #31
 8006558:	fa05 fc0c 	lsl.w	ip, r5, ip
 800655c:	ea24 0c0c 	bic.w	ip, r4, ip
 8006560:	ea40 000c 	orr.w	r0, r0, ip
 8006564:	f842 000e 	str.w	r0, [r2, lr]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006568:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800656a:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800656c:	68a2      	ldr	r2, [r4, #8]
 800656e:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006572:	f000 0004 	and.w	r0, r0, #4
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006576:	4302      	orrs	r2, r0
 8006578:	d156      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x128>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800657a:	688a      	ldr	r2, [r1, #8]
 800657c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006580:	f000 80a7 	beq.w	80066d2 <HAL_ADC_ConfigChannel+0x1d2>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006584:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006586:	ea4f 5cd5 	mov.w	ip, r5, lsr #23
 800658a:	f00c 0c04 	and.w	ip, ip, #4
 800658e:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8006590:	f854 000c 	ldr.w	r0, [r4, ip]
 8006594:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8006598:	f04f 0e07 	mov.w	lr, #7
 800659c:	fa0e fe05 	lsl.w	lr, lr, r5
 80065a0:	ea20 000e 	bic.w	r0, r0, lr
 80065a4:	40aa      	lsls	r2, r5
 80065a6:	4302      	orrs	r2, r0
 80065a8:	f844 200c 	str.w	r2, [r4, ip]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80065ac:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80065ae:	6942      	ldr	r2, [r0, #20]
 80065b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80065b4:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80065b6:	694a      	ldr	r2, [r1, #20]
 80065b8:	681c      	ldr	r4, [r3, #0]
 80065ba:	68e0      	ldr	r0, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80065bc:	690d      	ldr	r5, [r1, #16]
 80065be:	2d04      	cmp	r5, #4
 80065c0:	f000 809c 	beq.w	80066fc <HAL_ADC_ConfigChannel+0x1fc>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065c4:	3460      	adds	r4, #96	; 0x60
  MODIFY_REG(*preg,
 80065c6:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80065ca:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80065ce:	0040      	lsls	r0, r0, #1
 80065d0:	4082      	lsls	r2, r0
 80065d2:	6808      	ldr	r0, [r1, #0]
 80065d4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80065d8:	f44f 4c70 	mov.w	ip, #61440	; 0xf000
 80065dc:	f2c0 3cff 	movt	ip, #1023	; 0x3ff
 80065e0:	ea06 0c0c 	and.w	ip, r6, ip
 80065e4:	ea40 000c 	orr.w	r0, r0, ip
 80065e8:	4302      	orrs	r2, r0
 80065ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80065ee:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065f2:	690c      	ldr	r4, [r1, #16]
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80065f8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 80065fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006600:	698d      	ldr	r5, [r1, #24]
 8006602:	432a      	orrs	r2, r5
 8006604:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006608:	690d      	ldr	r5, [r1, #16]
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 800660e:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006612:	7f0c      	ldrb	r4, [r1, #28]
 8006614:	2c01      	cmp	r4, #1
 8006616:	bf14      	ite	ne
 8006618:	2400      	movne	r4, #0
 800661a:	2401      	moveq	r4, #1
 800661c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006620:	ea42 6244 	orr.w	r2, r2, r4, lsl #25
 8006624:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006628:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800662a:	6890      	ldr	r0, [r2, #8]
 800662c:	f010 0f01 	tst.w	r0, #1
 8006630:	d116      	bne.n	8006660 <HAL_ADC_ConfigChannel+0x160>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006632:	6808      	ldr	r0, [r1, #0]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006634:	2400      	movs	r4, #0
 8006636:	f2c4 047f 	movt	r4, #16511	; 0x407f
 800663a:	68cd      	ldr	r5, [r1, #12]
 800663c:	42a5      	cmp	r5, r4
    SET_BIT(ADCx->DIFSEL,
 800663e:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8006642:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8006646:	bf0c      	ite	eq
 8006648:	4320      	orreq	r0, r4
    CLEAR_BIT(ADCx->DIFSEL,
 800664a:	ea24 0000 	bicne.w	r0, r4, r0
 800664e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006652:	2200      	movs	r2, #0
 8006654:	f2c4 027f 	movt	r2, #16511	; 0x407f
 8006658:	68c8      	ldr	r0, [r1, #12]
 800665a:	4290      	cmp	r0, r2
 800665c:	f000 80e5 	beq.w	800682a <HAL_ADC_ConfigChannel+0x32a>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006660:	680a      	ldr	r2, [r1, #0]
 8006662:	2100      	movs	r1, #0
 8006664:	f2c8 0108 	movt	r1, #32776	; 0x8008
 8006668:	420a      	tst	r2, r1
 800666a:	f000 81a7 	beq.w	80069bc <HAL_ADC_ConfigChannel+0x4bc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800666e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006672:	f2c5 0100 	movt	r1, #20480	; 0x5000
 8006676:	6889      	ldr	r1, [r1, #8]
 8006678:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800667c:	2000      	movs	r0, #0
 800667e:	f2cc 3021 	movt	r0, #49953	; 0xc321
 8006682:	4282      	cmp	r2, r0
 8006684:	f000 81aa 	beq.w	80069dc <HAL_ADC_ConfigChannel+0x4dc>
 8006688:	2010      	movs	r0, #16
 800668a:	f2c9 00c0 	movt	r0, #37056	; 0x90c0
 800668e:	4282      	cmp	r2, r0
 8006690:	f000 81a4 	beq.w	80069dc <HAL_ADC_ConfigChannel+0x4dc>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006694:	2000      	movs	r0, #0
 8006696:	f2cc 7052 	movt	r0, #51026	; 0xc752
 800669a:	4282      	cmp	r2, r0
 800669c:	f040 8172 	bne.w	8006984 <HAL_ADC_ConfigChannel+0x484>
 80066a0:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80066a4:	f040 818e 	bne.w	80069c4 <HAL_ADC_ConfigChannel+0x4c4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066ac:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80066b0:	6819      	ldr	r1, [r3, #0]
 80066b2:	4291      	cmp	r1, r2
 80066b4:	f000 8188 	beq.w	80069c8 <HAL_ADC_ConfigChannel+0x4c8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80066b8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80066bc:	f2c5 0100 	movt	r1, #20480	; 0x5000
 80066c0:	688a      	ldr	r2, [r1, #8]
 80066c2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80066c6:	4322      	orrs	r2, r4
 80066c8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80066cc:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066ce:	2000      	movs	r0, #0
}
 80066d0:	e72d      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80066d2:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80066d4:	0dc2      	lsrs	r2, r0, #23
 80066d6:	f002 0204 	and.w	r2, r2, #4
 80066da:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 80066dc:	58a5      	ldr	r5, [r4, r2]
 80066de:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80066e2:	f04f 0c07 	mov.w	ip, #7
 80066e6:	fa0c f000 	lsl.w	r0, ip, r0
 80066ea:	ea25 0000 	bic.w	r0, r5, r0
 80066ee:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80066f0:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80066f2:	6942      	ldr	r2, [r0, #20]
 80066f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80066f8:	6142      	str	r2, [r0, #20]
}
 80066fa:	e75c      	b.n	80065b6 <HAL_ADC_ConfigChannel+0xb6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80066fc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80066fe:	6e20      	ldr	r0, [r4, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006700:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006704:	680a      	ldr	r2, [r1, #0]
 8006706:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800670a:	bb5d      	cbnz	r5, 8006764 <HAL_ADC_ConfigChannel+0x264>
 800670c:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006710:	42a8      	cmp	r0, r5
 8006712:	d057      	beq.n	80067c4 <HAL_ADC_ConfigChannel+0x2c4>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006714:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006718:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800671a:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800671c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006720:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006724:	4282      	cmp	r2, r0
 8006726:	d05e      	beq.n	80067e6 <HAL_ADC_ConfigChannel+0x2e6>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800672e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006730:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006732:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006736:	680a      	ldr	r2, [r1, #0]
 8006738:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800673c:	4282      	cmp	r2, r0
 800673e:	d063      	beq.n	8006808 <HAL_ADC_ConfigChannel+0x308>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006746:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8006748:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800674a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800674e:	680a      	ldr	r2, [r1, #0]
 8006750:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006754:	4282      	cmp	r2, r0
 8006756:	f47f af67 	bne.w	8006628 <HAL_ADC_ConfigChannel+0x128>
  MODIFY_REG(*preg,
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006760:	6022      	str	r2, [r4, #0]
}
 8006762:	e761      	b.n	8006628 <HAL_ADC_ConfigChannel+0x128>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006764:	fa92 f5a2 	rbit	r5, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006768:	b11d      	cbz	r5, 8006772 <HAL_ADC_ConfigChannel+0x272>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800676a:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800676e:	42a8      	cmp	r0, r5
 8006770:	d028      	beq.n	80067c4 <HAL_ADC_ConfigChannel+0x2c4>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006772:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006776:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006778:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800677a:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8006782:	b11a      	cbz	r2, 800678c <HAL_ADC_ConfigChannel+0x28c>
  return __builtin_clz(value);
 8006784:	fab2 f282 	clz	r2, r2
 8006788:	4282      	cmp	r2, r0
 800678a:	d02c      	beq.n	80067e6 <HAL_ADC_ConfigChannel+0x2e6>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006792:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006794:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006796:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800679a:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80067a0:	b11a      	cbz	r2, 80067aa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80067a2:	fab2 f282 	clz	r2, r2
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80067a6:	4282      	cmp	r2, r0
 80067a8:	d02e      	beq.n	8006808 <HAL_ADC_ConfigChannel+0x308>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80067b0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80067b2:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80067b4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067b8:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ba:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80067be:	fab2 f282 	clz	r2, r2
 80067c2:	e7c7      	b.n	8006754 <HAL_ADC_ConfigChannel+0x254>
  MODIFY_REG(*preg,
 80067c4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80067c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80067ca:	6622      	str	r2, [r4, #96]	; 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	f102 0564 	add.w	r5, r2, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80067d2:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80067d4:	6e50      	ldr	r0, [r2, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80067d6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067da:	680a      	ldr	r2, [r1, #0]
 80067dc:	f3c2 0412 	ubfx	r4, r2, #0, #19
 80067e0:	2c00      	cmp	r4, #0
 80067e2:	d1cc      	bne.n	800677e <HAL_ADC_ConfigChannel+0x27e>
 80067e4:	e79c      	b.n	8006720 <HAL_ADC_ConfigChannel+0x220>
  MODIFY_REG(*preg,
 80067e6:	682a      	ldr	r2, [r5, #0]
 80067e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80067ec:	602a      	str	r2, [r5, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80067f4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80067f6:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80067f8:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067fc:	680a      	ldr	r2, [r1, #0]
 80067fe:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8006802:	2d00      	cmp	r5, #0
 8006804:	d1ca      	bne.n	800679c <HAL_ADC_ConfigChannel+0x29c>
 8006806:	e797      	b.n	8006738 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800680e:	6022      	str	r2, [r4, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006816:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8006818:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800681a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800681e:	680a      	ldr	r2, [r1, #0]
 8006820:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8006824:	2d00      	cmp	r5, #0
 8006826:	d1c8      	bne.n	80067ba <HAL_ADC_ConfigChannel+0x2ba>
 8006828:	e792      	b.n	8006750 <HAL_ADC_ConfigChannel+0x250>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800682a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800682c:	680a      	ldr	r2, [r1, #0]
 800682e:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8006832:	b9bc      	cbnz	r4, 8006864 <HAL_ADC_ConfigChannel+0x364>
 8006834:	0e94      	lsrs	r4, r2, #26
 8006836:	3401      	adds	r4, #1
 8006838:	f004 051f 	and.w	r5, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800683c:	2d09      	cmp	r5, #9
 800683e:	d93e      	bls.n	80068be <HAL_ADC_ConfigChannel+0x3be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006840:	0e94      	lsrs	r4, r2, #26
 8006842:	3401      	adds	r4, #1
 8006844:	f004 021f 	and.w	r2, r4, #31
 8006848:	06a4      	lsls	r4, r4, #26
 800684a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800684e:	2501      	movs	r5, #1
 8006850:	4095      	lsls	r5, r2
 8006852:	432c      	orrs	r4, r5
 8006854:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006858:	3a1e      	subs	r2, #30
 800685a:	0512      	lsls	r2, r2, #20
 800685c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006860:	4322      	orrs	r2, r4
 8006862:	e036      	b.n	80068d2 <HAL_ADC_ConfigChannel+0x3d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006864:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8006868:	2c00      	cmp	r4, #0
 800686a:	d045      	beq.n	80068f8 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 800686c:	fab4 f484 	clz	r4, r4
 8006870:	3401      	adds	r4, #1
 8006872:	f004 041f 	and.w	r4, r4, #31
 8006876:	2c09      	cmp	r4, #9
 8006878:	d93e      	bls.n	80068f8 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687a:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 800687e:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006882:	3501      	adds	r5, #1
 8006884:	06ad      	lsls	r5, r5, #26
 8006886:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688a:	fa92 fca2 	rbit	ip, r2
  return __builtin_clz(value);
 800688e:	fabc fc8c 	clz	ip, ip
 8006892:	f10c 0c01 	add.w	ip, ip, #1
 8006896:	f00c 0c1f 	and.w	ip, ip, #31
 800689a:	2401      	movs	r4, #1
 800689c:	fa04 f40c 	lsl.w	r4, r4, ip
 80068a0:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a2:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80068a6:	fab2 f282 	clz	r2, r2
 80068aa:	3201      	adds	r2, #1
 80068ac:	f002 021f 	and.w	r2, r2, #31
 80068b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80068b4:	3a1e      	subs	r2, #30
 80068b6:	0512      	lsls	r2, r2, #20
 80068b8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80068bc:	e7d0      	b.n	8006860 <HAL_ADC_ConfigChannel+0x360>
 80068be:	06a4      	lsls	r4, r4, #26
 80068c0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80068c4:	2201      	movs	r2, #1
 80068c6:	40aa      	lsls	r2, r5
 80068c8:	4314      	orrs	r4, r2
 80068ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068ce:	052a      	lsls	r2, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068d0:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80068d2:	0dd5      	lsrs	r5, r2, #23
 80068d4:	f005 0504 	and.w	r5, r5, #4
 80068d8:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 80068da:	5944      	ldr	r4, [r0, r5]
 80068dc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80068e0:	f04f 0c07 	mov.w	ip, #7
 80068e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80068e8:	ea24 040c 	bic.w	r4, r4, ip
 80068ec:	688e      	ldr	r6, [r1, #8]
 80068ee:	fa06 f202 	lsl.w	r2, r6, r2
 80068f2:	4322      	orrs	r2, r4
 80068f4:	5142      	str	r2, [r0, r5]
}
 80068f6:	e6b3      	b.n	8006660 <HAL_ADC_ConfigChannel+0x160>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f8:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 80068fc:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006900:	3501      	adds	r5, #1
 8006902:	06ad      	lsls	r5, r5, #26
 8006904:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006908:	fa92 fca2 	rbit	ip, r2
  return __builtin_clz(value);
 800690c:	fabc fc8c 	clz	ip, ip
 8006910:	f10c 0c01 	add.w	ip, ip, #1
 8006914:	f00c 0c1f 	and.w	ip, ip, #31
 8006918:	2401      	movs	r4, #1
 800691a:	fa04 f40c 	lsl.w	r4, r4, ip
 800691e:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006920:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8006924:	fab2 f282 	clz	r2, r2
 8006928:	3201      	adds	r2, #1
 800692a:	f002 021f 	and.w	r2, r2, #31
 800692e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006932:	0512      	lsls	r2, r2, #20
 8006934:	e7cc      	b.n	80068d0 <HAL_ADC_ConfigChannel+0x3d0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006936:	f44f 7140 	mov.w	r1, #768	; 0x300
 800693a:	f2c5 0100 	movt	r1, #20480	; 0x5000
 800693e:	688a      	ldr	r2, [r1, #8]
 8006940:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006944:	4322      	orrs	r2, r4
 8006946:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800694a:	608a      	str	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800694c:	f240 5278 	movw	r2, #1400	; 0x578
 8006950:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	0992      	lsrs	r2, r2, #6
 8006958:	f642 5163 	movw	r1, #11619	; 0x2d63
 800695c:	f2c0 513e 	movt	r1, #1342	; 0x53e
 8006960:	fba1 1202 	umull	r1, r2, r1, r2
 8006964:	0992      	lsrs	r2, r2, #6
 8006966:	3201      	adds	r2, #1
 8006968:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800696c:	0092      	lsls	r2, r2, #2
 800696e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8006970:	9a01      	ldr	r2, [sp, #4]
 8006972:	b32a      	cbz	r2, 80069c0 <HAL_ADC_ConfigChannel+0x4c0>
            wait_loop_index--;
 8006974:	9a01      	ldr	r2, [sp, #4]
 8006976:	3a01      	subs	r2, #1
 8006978:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800697a:	9a01      	ldr	r2, [sp, #4]
 800697c:	2a00      	cmp	r2, #0
 800697e:	d1f9      	bne.n	8006974 <HAL_ADC_ConfigChannel+0x474>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006980:	2000      	movs	r0, #0
 8006982:	e5d4      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006984:	2000      	movs	r0, #0
 8006986:	f6cc 3084 	movt	r0, #52100	; 0xcb84
 800698a:	4282      	cmp	r2, r0
 800698c:	d11e      	bne.n	80069cc <HAL_ADC_ConfigChannel+0x4cc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800698e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8006992:	d11d      	bne.n	80069d0 <HAL_ADC_ConfigChannel+0x4d0>
        if (ADC_VREFINT_INSTANCE(hadc))
 8006994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006998:	f2c5 0200 	movt	r2, #20480	; 0x5000
 800699c:	6819      	ldr	r1, [r3, #0]
 800699e:	4291      	cmp	r1, r2
 80069a0:	d018      	beq.n	80069d4 <HAL_ADC_ConfigChannel+0x4d4>
 80069a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80069a6:	f2c5 0100 	movt	r1, #20480	; 0x5000
 80069aa:	688a      	ldr	r2, [r1, #8]
 80069ac:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80069b0:	4322      	orrs	r2, r4
 80069b2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80069b6:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069b8:	2000      	movs	r0, #0
}
 80069ba:	e5b8      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
 80069bc:	2000      	movs	r0, #0
 80069be:	e5b6      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
 80069c0:	2000      	movs	r0, #0
 80069c2:	e5b4      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
 80069c4:	2000      	movs	r0, #0
 80069c6:	e5b2      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
 80069c8:	2000      	movs	r0, #0
 80069ca:	e5b0      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
 80069cc:	2000      	movs	r0, #0
 80069ce:	e5ae      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
 80069d0:	2000      	movs	r0, #0
 80069d2:	e5ac      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
 80069d4:	2000      	movs	r0, #0
 80069d6:	e5aa      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80069d8:	2002      	movs	r0, #2
 80069da:	e5ab      	b.n	8006534 <HAL_ADC_ConfigChannel+0x34>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80069dc:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80069e0:	d105      	bne.n	80069ee <HAL_ADC_ConfigChannel+0x4ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80069e8:	d0a5      	beq.n	8006936 <HAL_ADC_ConfigChannel+0x436>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069ea:	2000      	movs	r0, #0
 80069ec:	e59f      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>
 80069ee:	2000      	movs	r0, #0
 80069f0:	e59d      	b.n	800652e <HAL_ADC_ConfigChannel+0x2e>

080069f2 <ADC_Enable>:
{
 80069f2:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069f4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	f012 0f01 	tst.w	r2, #1
 80069fc:	d149      	bne.n	8006a92 <ADC_Enable+0xa0>
 80069fe:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006a00:	6899      	ldr	r1, [r3, #8]
 8006a02:	223f      	movs	r2, #63	; 0x3f
 8006a04:	f2c8 0200 	movt	r2, #32768	; 0x8000
 8006a08:	4211      	tst	r1, r2
 8006a0a:	d009      	beq.n	8006a20 <ADC_Enable+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a0c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006a0e:	f043 0310 	orr.w	r3, r3, #16
 8006a12:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a14:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	e039      	b.n	8006a94 <ADC_Enable+0xa2>
  MODIFY_REG(ADCx->CR,
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a26:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006a30:	f7ff fa92 	bl	8005f58 <HAL_GetTick>
 8006a34:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	f012 0f01 	tst.w	r2, #1
 8006a3e:	d006      	beq.n	8006a4e <ADC_Enable+0x5c>
  return HAL_OK;
 8006a40:	2000      	movs	r0, #0
 8006a42:	e027      	b.n	8006a94 <ADC_Enable+0xa2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	f012 0f01 	tst.w	r2, #1
 8006a4c:	d11f      	bne.n	8006a8e <ADC_Enable+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	f012 0f01 	tst.w	r2, #1
 8006a54:	d107      	bne.n	8006a66 <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a5c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006a60:	f042 0201 	orr.w	r2, r2, #1
 8006a64:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a66:	f7ff fa77 	bl	8005f58 <HAL_GetTick>
 8006a6a:	1b43      	subs	r3, r0, r5
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d9e9      	bls.n	8006a44 <ADC_Enable+0x52>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f013 0f01 	tst.w	r3, #1
 8006a78:	d1e4      	bne.n	8006a44 <ADC_Enable+0x52>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006a7c:	f043 0310 	orr.w	r3, r3, #16
 8006a80:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a82:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	e002      	b.n	8006a94 <ADC_Enable+0xa2>
  return HAL_OK;
 8006a8e:	2000      	movs	r0, #0
 8006a90:	e000      	b.n	8006a94 <ADC_Enable+0xa2>
 8006a92:	2000      	movs	r0, #0
}
 8006a94:	bd38      	pop	{r3, r4, r5, pc}

08006a96 <HAL_ADC_Start_DMA>:
{
 8006a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a98:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006a9a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006a9e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8006aa2:	6887      	ldr	r7, [r0, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006aa4:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006aa6:	6880      	ldr	r0, [r0, #8]
 8006aa8:	f010 0f04 	tst.w	r0, #4
 8006aac:	d16d      	bne.n	8006b8a <HAL_ADC_Start_DMA+0xf4>
 8006aae:	460e      	mov	r6, r1
 8006ab0:	4615      	mov	r5, r2
    __HAL_LOCK(hadc);
 8006ab2:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8006ab6:	2a01      	cmp	r2, #1
 8006ab8:	d069      	beq.n	8006b8e <HAL_ADC_Start_DMA+0xf8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006aba:	f007 071f 	and.w	r7, r7, #31
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006ac4:	f240 2321 	movw	r3, #545	; 0x221
 8006ac8:	40fb      	lsrs	r3, r7
 8006aca:	f013 0f01 	tst.w	r3, #1
 8006ace:	d104      	bne.n	8006ada <HAL_ADC_Start_DMA+0x44>
      __HAL_UNLOCK(hadc);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	e058      	b.n	8006b8c <HAL_ADC_Start_DMA+0xf6>
      tmp_hal_status = ADC_Enable(hadc);
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff ff89 	bl	80069f2 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d14e      	bne.n	8006b82 <HAL_ADC_Start_DMA+0xec>
        ADC_STATE_CLR_SET(hadc->State,
 8006ae4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ae6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af2:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af8:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8006afc:	6822      	ldr	r2, [r4, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d047      	beq.n	8006b92 <HAL_ADC_Start_DMA+0xfc>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006b02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006b04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b08:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006b0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006b0c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006b10:	bf1a      	itte	ne
 8006b12:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8006b14:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8006b18:	2300      	moveq	r3, #0
 8006b1a:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b1c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b1e:	f246 435f 	movw	r3, #25695	; 0x645f
 8006b22:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006b26:	62d3      	str	r3, [r2, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b28:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b2a:	f246 13c3 	movw	r3, #25027	; 0x61c3
 8006b2e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006b32:	6313      	str	r3, [r2, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b34:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b36:	f246 43e7 	movw	r3, #25831	; 0x64e7
 8006b3a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006b3e:	6353      	str	r3, [r2, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	221c      	movs	r2, #28
 8006b44:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8006b46:	2300      	movs	r3, #0
 8006b48:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	6853      	ldr	r3, [r2, #4]
 8006b50:	f043 0310 	orr.w	r3, r3, #16
 8006b54:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	68d3      	ldr	r3, [r2, #12]
 8006b5a:	f043 0301 	orr.w	r3, r3, #1
 8006b5e:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b60:	6821      	ldr	r1, [r4, #0]
 8006b62:	462b      	mov	r3, r5
 8006b64:	4632      	mov	r2, r6
 8006b66:	3140      	adds	r1, #64	; 0x40
 8006b68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b6a:	f000 fb43 	bl	80071f4 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006b6e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006b70:	6893      	ldr	r3, [r2, #8]
 8006b72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b7a:	f043 0304 	orr.w	r3, r3, #4
 8006b7e:	6093      	str	r3, [r2, #8]
}
 8006b80:	e004      	b.n	8006b8c <HAL_ADC_Start_DMA+0xf6>
        __HAL_UNLOCK(hadc);
 8006b82:	2300      	movs	r3, #0
 8006b84:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8006b88:	e000      	b.n	8006b8c <HAL_ADC_Start_DMA+0xf6>
    tmp_hal_status = HAL_BUSY;
 8006b8a:	2002      	movs	r0, #2
}
 8006b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8006b8e:	2002      	movs	r0, #2
 8006b90:	e7fc      	b.n	8006b8c <HAL_ADC_Start_DMA+0xf6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b92:	2f00      	cmp	r7, #0
 8006b94:	d0b5      	beq.n	8006b02 <HAL_ADC_Start_DMA+0x6c>
 8006b96:	e7b8      	b.n	8006b0a <HAL_ADC_Start_DMA+0x74>

08006b98 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006b98:	4770      	bx	lr

08006b9a <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006b9a:	4770      	bx	lr

08006b9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006b9c:	4770      	bx	lr

08006b9e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ba2:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8006ba6:	2a01      	cmp	r2, #1
 8006ba8:	d045      	beq.n	8006c36 <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 8006baa:	b410      	push	{r4}
 8006bac:	b09d      	sub	sp, #116	; 0x74
 8006bae:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006bba:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006bbc:	6802      	ldr	r2, [r0, #0]
 8006bbe:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006bc2:	d03a      	beq.n	8006c3a <HAL_ADCEx_MultiModeConfigChannel+0x98>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bc4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006bc6:	f042 0220 	orr.w	r2, r2, #32
 8006bca:	65c2      	str	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

    return HAL_ERROR;
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	e027      	b.n	8006c26 <HAL_ADCEx_MultiModeConfigChannel+0x84>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006bd6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006bda:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8006bde:	6891      	ldr	r1, [r2, #8]
 8006be0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8006be4:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006be6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006bea:	6891      	ldr	r1, [r2, #8]
 8006bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bf0:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8006bf4:	6892      	ldr	r2, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	f012 0f01 	tst.w	r2, #1
 8006bfc:	d119      	bne.n	8006c32 <HAL_ADCEx_MultiModeConfigChannel+0x90>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006bfe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006c02:	f2c5 0100 	movt	r1, #20480	; 0x5000
 8006c06:	688a      	ldr	r2, [r1, #8]
 8006c08:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8006c0c:	f022 020f 	bic.w	r2, r2, #15
 8006c10:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c12:	2000      	movs	r0, #0
 8006c14:	e004      	b.n	8006c20 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c18:	f042 0220 	orr.w	r2, r2, #32
 8006c1c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c1e:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8006c26:	b01d      	add	sp, #116	; 0x74
 8006c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c2c:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c2e:	2000      	movs	r0, #0
 8006c30:	e7f6      	b.n	8006c20 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8006c32:	2000      	movs	r0, #0
 8006c34:	e7f4      	b.n	8006c20 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
  __HAL_LOCK(hadc);
 8006c36:	2002      	movs	r0, #2
}
 8006c38:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c3e:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8006c42:	6890      	ldr	r0, [r2, #8]
 8006c44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c48:	6892      	ldr	r2, [r2, #8]
 8006c4a:	4302      	orrs	r2, r0
 8006c4c:	f012 0f04 	tst.w	r2, #4
 8006c50:	d1e1      	bne.n	8006c16 <HAL_ADCEx_MultiModeConfigChannel+0x74>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c52:	680a      	ldr	r2, [r1, #0]
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	d0be      	beq.n	8006bd6 <HAL_ADCEx_MultiModeConfigChannel+0x34>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006c58:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006c5c:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8006c60:	6882      	ldr	r2, [r0, #8]
 8006c62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c66:	684c      	ldr	r4, [r1, #4]
 8006c68:	4322      	orrs	r2, r4
 8006c6a:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8006c6e:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8006c72:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c78:	6890      	ldr	r0, [r2, #8]
 8006c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c7e:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8006c82:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c84:	4302      	orrs	r2, r0
 8006c86:	f012 0f01 	tst.w	r2, #1
 8006c8a:	d1d0      	bne.n	8006c2e <HAL_ADCEx_MultiModeConfigChannel+0x8c>
        MODIFY_REG(tmpADC_Common->CCR,
 8006c8c:	f44f 7c40 	mov.w	ip, #768	; 0x300
 8006c90:	f2c5 0c00 	movt	ip, #20480	; 0x5000
 8006c94:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8006c98:	680a      	ldr	r2, [r1, #0]
 8006c9a:	6889      	ldr	r1, [r1, #8]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8006ca2:	f021 010f 	bic.w	r1, r1, #15
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	f8cc 2008 	str.w	r2, [ip, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cac:	2000      	movs	r0, #0
 8006cae:	e7b7      	b.n	8006c20 <HAL_ADCEx_MultiModeConfigChannel+0x7e>

08006cb0 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006cb0:	b1a0      	cbz	r0, 8006cdc <HAL_CORDIC_Init+0x2c>
{
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	4604      	mov	r4, r0

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006cb6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006cba:	b153      	cbz	r3, 8006cd2 <HAL_CORDIC_Init+0x22>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	6260      	str	r0, [r4, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006cc0:	6060      	str	r0, [r4, #4]
  hcordic->pOutBuff = NULL;
 8006cc2:	60a0      	str	r0, [r4, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006cc4:	60e0      	str	r0, [r4, #12]
  hcordic->NbCalcToGet = 0U;
 8006cc6:	6120      	str	r0, [r4, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006cc8:	6160      	str	r0, [r4, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
}
 8006cd0:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8006cd2:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8006cd6:	f7fe f9e5 	bl	80050a4 <HAL_CORDIC_MspInit>
 8006cda:	e7ef      	b.n	8006cbc <HAL_CORDIC_Init+0xc>
    return HAL_ERROR;
 8006cdc:	2001      	movs	r0, #1
}
 8006cde:	4770      	bx	lr

08006ce0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ce0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8006ce4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8006ce8:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cea:	0203      	lsls	r3, r0, #8
 8006cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cf0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8006cf4:	0409      	lsls	r1, r1, #16
 8006cf6:	0c09      	lsrs	r1, r1, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cf8:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 8006cfa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006d02:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006d04:	4770      	bx	lr

08006d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d06:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d08:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006d0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d16:	f1c3 0c07 	rsb	ip, r3, #7
 8006d1a:	f1bc 0f04 	cmp.w	ip, #4
 8006d1e:	bf28      	it	cs
 8006d20:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d24:	f103 0e04 	add.w	lr, r3, #4
 8006d28:	f1be 0f06 	cmp.w	lr, #6
 8006d2c:	bf8c      	ite	hi
 8006d2e:	3b03      	subhi	r3, #3
 8006d30:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d32:	f04f 3eff 	mov.w	lr, #4294967295
 8006d36:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006d3a:	ea21 010c 	bic.w	r1, r1, ip
 8006d3e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d40:	fa0e fe03 	lsl.w	lr, lr, r3
 8006d44:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d48:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	db09      	blt.n	8006d62 <HAL_NVIC_SetPriority+0x5c>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d4e:	0109      	lsls	r1, r1, #4
 8006d50:	b2c9      	uxtb	r1, r1
 8006d52:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006d56:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006d5a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006d5e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d62:	f000 000f 	and.w	r0, r0, #15
 8006d66:	0109      	lsls	r1, r1, #4
 8006d68:	b2c9      	uxtb	r1, r1
 8006d6a:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8006d6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006d72:	4403      	add	r3, r0
 8006d74:	7619      	strb	r1, [r3, #24]
 8006d76:	e7f2      	b.n	8006d5e <HAL_NVIC_SetPriority+0x58>

08006d78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	db0a      	blt.n	8006d92 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d7c:	0941      	lsrs	r1, r0, #5
 8006d7e:	f000 001f 	and.w	r0, r0, #31
 8006d82:	2301      	movs	r3, #1
 8006d84:	4083      	lsls	r3, r0
 8006d86:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006d8a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8006d8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006d92:	4770      	bx	lr

08006d94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d94:	3801      	subs	r0, #1
 8006d96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006d9a:	d20e      	bcs.n	8006dba <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006da0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8006da6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8006daa:	21f0      	movs	r1, #240	; 0xf0
 8006dac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006db0:	2000      	movs	r0, #0
 8006db2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006db4:	2207      	movs	r2, #7
 8006db6:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006db8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006dba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006dbc:	4770      	bx	lr

08006dbe <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8006dbe:	b170      	cbz	r0, 8006dde <HAL_DAC_Init+0x20>
{
 8006dc0:	b510      	push	{r4, lr}
 8006dc2:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006dc4:	7903      	ldrb	r3, [r0, #4]
 8006dc6:	b133      	cbz	r3, 8006dd6 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006dc8:	2302      	movs	r3, #2
 8006dca:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006dcc:	2000      	movs	r0, #0
 8006dce:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8006dd4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006dd6:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8006dd8:	f7fe f9ad 	bl	8005136 <HAL_DAC_MspInit>
 8006ddc:	e7f4      	b.n	8006dc8 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8006dde:	2001      	movs	r0, #1
}
 8006de0:	4770      	bx	lr

08006de2 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006de2:	7943      	ldrb	r3, [r0, #5]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d02e      	beq.n	8006e46 <HAL_DAC_Start+0x64>
{
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	4604      	mov	r4, r0
 8006dec:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8006dee:	2001      	movs	r0, #1
 8006df0:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006df2:	2302      	movs	r3, #2
 8006df4:	7123      	strb	r3, [r4, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006df6:	6822      	ldr	r2, [r4, #0]
 8006df8:	6811      	ldr	r1, [r2, #0]
 8006dfa:	f005 0610 	and.w	r6, r5, #16
 8006dfe:	fa00 f306 	lsl.w	r3, r0, r6
 8006e02:	430b      	orrs	r3, r1
 8006e04:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8006e06:	f7ff f8ad 	bl	8005f64 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8006e0a:	b97d      	cbnz	r5, 8006e2c <HAL_DAC_Start+0x4a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006e0c:	6822      	ldr	r2, [r4, #0]
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d004      	beq.n	8006e22 <HAL_DAC_Start+0x40>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006e22:	6853      	ldr	r3, [r2, #4]
 8006e24:	f043 0301 	orr.w	r3, r3, #1
 8006e28:	6053      	str	r3, [r2, #4]
 8006e2a:	e7f5      	b.n	8006e18 <HAL_DAC_Start+0x36>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006e2c:	6821      	ldr	r1, [r4, #0]
 8006e2e:	680a      	ldr	r2, [r1, #0]
 8006e30:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8006e34:	2302      	movs	r3, #2
 8006e36:	40b3      	lsls	r3, r6
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d1ed      	bne.n	8006e18 <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006e3c:	684b      	ldr	r3, [r1, #4]
 8006e3e:	f043 0302 	orr.w	r3, r3, #2
 8006e42:	604b      	str	r3, [r1, #4]
 8006e44:	e7e8      	b.n	8006e18 <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 8006e46:	2002      	movs	r0, #2
}
 8006e48:	4770      	bx	lr

08006e4a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006e4a:	b410      	push	{r4}
 8006e4c:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8006e4e:	2400      	movs	r4, #0
 8006e50:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006e52:	6800      	ldr	r0, [r0, #0]
 8006e54:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006e56:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8006e58:	b951      	cbnz	r1, 8006e70 <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006e5a:	9901      	ldr	r1, [sp, #4]
 8006e5c:	3108      	adds	r1, #8
 8006e5e:	440a      	add	r2, r1
 8006e60:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006e62:	9a01      	ldr	r2, [sp, #4]
 8006e64:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8006e66:	2000      	movs	r0, #0
 8006e68:	b003      	add	sp, #12
 8006e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e6e:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006e70:	9901      	ldr	r1, [sp, #4]
 8006e72:	3114      	adds	r1, #20
 8006e74:	440a      	add	r2, r1
 8006e76:	9201      	str	r2, [sp, #4]
 8006e78:	e7f3      	b.n	8006e62 <HAL_DAC_SetValue+0x18>

08006e7a <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006e7a:	7943      	ldrb	r3, [r0, #5]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	f000 80ee 	beq.w	800705e <HAL_DAC_ConfigChannel+0x1e4>
{
 8006e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e86:	4604      	mov	r4, r0
 8006e88:	460e      	mov	r6, r1
 8006e8a:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e90:	2302      	movs	r3, #2
 8006e92:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006e94:	688b      	ldr	r3, [r1, #8]
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d071      	beq.n	8006f7e <HAL_DAC_ConfigChannel+0x104>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006e9a:	69f3      	ldr	r3, [r6, #28]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	f000 80b8 	beq.w	8007012 <HAL_DAC_ConfigChannel+0x198>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006ea6:	f005 0510 	and.w	r5, r5, #16
 8006eaa:	2207      	movs	r2, #7
 8006eac:	40aa      	lsls	r2, r5
 8006eae:	43d2      	mvns	r2, r2
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006eb0:	69b1      	ldr	r1, [r6, #24]
 8006eb2:	2901      	cmp	r1, #1
 8006eb4:	f000 80ba 	beq.w	800702c <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006eb8:	2902      	cmp	r1, #2
 8006eba:	f000 80b9 	beq.w	8007030 <HAL_DAC_ConfigChannel+0x1b6>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006ebe:	6971      	ldr	r1, [r6, #20]
 8006ec0:	fab1 f181 	clz	r1, r1
 8006ec4:	0949      	lsrs	r1, r1, #5
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006ec6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006eca:	40a8      	lsls	r0, r5
 8006ecc:	ea23 0300 	bic.w	r3, r3, r0
 8006ed0:	4013      	ands	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed6:	40aa      	lsls	r2, r5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006ed8:	ea23 0302 	bic.w	r3, r3, r2
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006edc:	7932      	ldrb	r2, [r6, #4]
 8006ede:	2a01      	cmp	r2, #1
 8006ee0:	bf14      	ite	ne
 8006ee2:	2200      	movne	r2, #0
 8006ee4:	2201      	moveq	r2, #1
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006ee6:	68b7      	ldr	r7, [r6, #8]
 8006ee8:	6970      	ldr	r0, [r6, #20]
 8006eea:	4307      	orrs	r7, r0
 8006eec:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8006ef0:	7972      	ldrb	r2, [r6, #5]
 8006ef2:	2a01      	cmp	r2, #1
 8006ef4:	bf14      	ite	ne
 8006ef6:	2200      	movne	r2, #0
 8006ef8:	2201      	moveq	r2, #1
 8006efa:	ea47 2742 	orr.w	r7, r7, r2, lsl #9
 8006efe:	430f      	orrs	r7, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006f00:	f423 4840 	bic.w	r8, r3, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006f04:	6833      	ldr	r3, [r6, #0]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	f000 8094 	beq.w	8007034 <HAL_DAC_ConfigChannel+0x1ba>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006f0c:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f10:	40af      	lsls	r7, r5
 8006f12:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006f1a:	6821      	ldr	r1, [r4, #0]
 8006f1c:	680b      	ldr	r3, [r1, #0]
 8006f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f22:	40aa      	lsls	r2, r5
 8006f24:	ea23 0302 	bic.w	r3, r3, r2
 8006f28:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006f2a:	6821      	ldr	r1, [r4, #0]
 8006f2c:	680a      	ldr	r2, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006f2e:	f640 73fe 	movw	r3, #4094	; 0xffe
 8006f32:	40ab      	lsls	r3, r5
 8006f34:	ea22 0203 	bic.w	r2, r2, r3
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f38:	68f3      	ldr	r3, [r6, #12]
 8006f3a:	40ab      	lsls	r3, r5
 8006f3c:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006f3e:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f40:	6821      	ldr	r1, [r4, #0]
 8006f42:	680b      	ldr	r3, [r1, #0]
 8006f44:	22c0      	movs	r2, #192	; 0xc0
 8006f46:	40aa      	lsls	r2, r5
 8006f48:	ea23 0302 	bic.w	r3, r3, r2
 8006f4c:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006f4e:	68f3      	ldr	r3, [r6, #12]
 8006f50:	f3c3 0183 	ubfx	r1, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	6e02      	ldr	r2, [r0, #96]	; 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006f58:	6933      	ldr	r3, [r6, #16]
 8006f5a:	019b      	lsls	r3, r3, #6
 8006f5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006f60:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006f62:	40ab      	lsls	r3, r5
 8006f64:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006f68:	40a9      	lsls	r1, r5
 8006f6a:	ea22 0201 	bic.w	r2, r2, r1
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	6603      	str	r3, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006f72:	2301      	movs	r3, #1
 8006f74:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006f76:	2000      	movs	r0, #0
 8006f78:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8006f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8006f7e:	f7fe ffeb 	bl	8005f58 <HAL_GetTick>
 8006f82:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8006f84:	b17d      	cbz	r5, 8006fa6 <HAL_DAC_ConfigChannel+0x12c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	da3a      	bge.n	8007004 <HAL_DAC_ConfigChannel+0x18a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f8e:	f7fe ffe3 	bl	8005f58 <HAL_GetTick>
 8006f92:	1bc0      	subs	r0, r0, r7
 8006f94:	2801      	cmp	r0, #1
 8006f96:	d9f6      	bls.n	8006f86 <HAL_DAC_ConfigChannel+0x10c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	f043 0308 	orr.w	r3, r3, #8
 8006f9e:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006fa0:	2003      	movs	r0, #3
 8006fa2:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8006fa4:	e7e9      	b.n	8006f7a <HAL_DAC_ConfigChannel+0x100>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006faa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006fae:	d00b      	beq.n	8006fc8 <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006fb0:	f7fe ffd2 	bl	8005f58 <HAL_GetTick>
 8006fb4:	1bc0      	subs	r0, r0, r7
 8006fb6:	2801      	cmp	r0, #1
 8006fb8:	d9f5      	bls.n	8006fa6 <HAL_DAC_ConfigChannel+0x12c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	f043 0308 	orr.w	r3, r3, #8
 8006fc0:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006fc2:	2003      	movs	r0, #3
 8006fc4:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8006fc6:	e7d8      	b.n	8006f7a <HAL_DAC_ConfigChannel+0x100>
      HAL_Delay(1);
 8006fc8:	2001      	movs	r0, #1
 8006fca:	f7fe ffcb 	bl	8005f64 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006fd2:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006fd4:	6820      	ldr	r0, [r4, #0]
 8006fd6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006fd8:	f005 0210 	and.w	r2, r5, #16
 8006fdc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006fe0:	4091      	lsls	r1, r2
 8006fe2:	ea23 0301 	bic.w	r3, r3, r1
 8006fe6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8006fe8:	4091      	lsls	r1, r2
 8006fea:	430b      	orrs	r3, r1
 8006fec:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006fee:	6820      	ldr	r0, [r4, #0]
 8006ff0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006ff2:	21ff      	movs	r1, #255	; 0xff
 8006ff4:	4091      	lsls	r1, r2
 8006ff6:	ea23 0301 	bic.w	r3, r3, r1
 8006ffa:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8006ffc:	4091      	lsls	r1, r2
 8006ffe:	430b      	orrs	r3, r1
 8007000:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007002:	e74a      	b.n	8006e9a <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 8007004:	2001      	movs	r0, #1
 8007006:	f7fe ffad 	bl	8005f64 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800700e:	645a      	str	r2, [r3, #68]	; 0x44
 8007010:	e7e0      	b.n	8006fd4 <HAL_DAC_ConfigChannel+0x15a>
    tmpreg1 = hdac->Instance->CCR;
 8007012:	6821      	ldr	r1, [r4, #0]
 8007014:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007016:	f005 0010 	and.w	r0, r5, #16
 800701a:	231f      	movs	r3, #31
 800701c:	4083      	lsls	r3, r0
 800701e:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007022:	6a33      	ldr	r3, [r6, #32]
 8007024:	4083      	lsls	r3, r0
 8007026:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8007028:	638b      	str	r3, [r1, #56]	; 0x38
 800702a:	e73a      	b.n	8006ea2 <HAL_DAC_ConfigChannel+0x28>
    connectOnChip = 0x00000000UL;
 800702c:	2100      	movs	r1, #0
 800702e:	e74a      	b.n	8006ec6 <HAL_DAC_ConfigChannel+0x4c>
    connectOnChip = DAC_MCR_MODE1_0;
 8007030:	2101      	movs	r1, #1
 8007032:	e748      	b.n	8006ec6 <HAL_DAC_ConfigChannel+0x4c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007034:	f001 fe44 	bl	8008cc0 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007038:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800703c:	f6c0 1389 	movt	r3, #2441	; 0x989
 8007040:	4298      	cmp	r0, r3
 8007042:	d902      	bls.n	800704a <HAL_DAC_ConfigChannel+0x1d0>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007044:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8007048:	e762      	b.n	8006f10 <HAL_DAC_ConfigChannel+0x96>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800704a:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 800704e:	f2c0 43c4 	movt	r3, #1220	; 0x4c4
 8007052:	4298      	cmp	r0, r3
 8007054:	f67f af5c 	bls.w	8006f10 <HAL_DAC_ConfigChannel+0x96>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007058:	f448 4880 	orr.w	r8, r8, #16384	; 0x4000
 800705c:	e758      	b.n	8006f10 <HAL_DAC_ConfigChannel+0x96>
  __HAL_LOCK(hdac);
 800705e:	2002      	movs	r0, #2
}
 8007060:	4770      	bx	lr

08007062 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007062:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007064:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8007066:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8007068:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800706a:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800706c:	b114      	cbz	r4, 8007074 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800706e:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8007070:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8007072:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007074:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007076:	f004 0c1f 	and.w	ip, r4, #31
 800707a:	2401      	movs	r4, #1
 800707c:	fa04 f40c 	lsl.w	r4, r4, ip
 8007080:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007082:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007084:	6804      	ldr	r4, [r0, #0]
 8007086:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007088:	6883      	ldr	r3, [r0, #8]
 800708a:	2b10      	cmp	r3, #16
 800708c:	d005      	beq.n	800709a <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800708e:	6803      	ldr	r3, [r0, #0]
 8007090:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007092:	6803      	ldr	r3, [r0, #0]
 8007094:	60da      	str	r2, [r3, #12]
  }
}
 8007096:	bc30      	pop	{r4, r5}
 8007098:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800709a:	6803      	ldr	r3, [r0, #0]
 800709c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800709e:	6803      	ldr	r3, [r0, #0]
 80070a0:	60d9      	str	r1, [r3, #12]
 80070a2:	e7f8      	b.n	8007096 <DMA_SetConfig+0x34>

080070a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80070a4:	6803      	ldr	r3, [r0, #0]
 80070a6:	f240 4107 	movw	r1, #1031	; 0x407
 80070aa:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80070ae:	428b      	cmp	r3, r1
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80070b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80070b8:	f44f 6c02 	mov.w	ip, #2080	; 0x820
 80070bc:	f2c4 0c02 	movt	ip, #16386	; 0x4002
 80070c0:	bf88      	it	hi
 80070c2:	4662      	movhi	r2, ip
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80070c4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80070c6:	f021 0103 	bic.w	r1, r1, #3
 80070ca:	440a      	add	r2, r1
 80070cc:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070ce:	f44f 6208 	mov.w	r2, #2176	; 0x880
 80070d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80070d6:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	3b08      	subs	r3, #8
 80070dc:	f64c 42cd 	movw	r2, #52429	; 0xcccd
 80070e0:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
 80070e4:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070e8:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80070ec:	2201      	movs	r2, #1
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	6503      	str	r3, [r0, #80]	; 0x50
}
 80070f4:	4770      	bx	lr

080070f6 <HAL_DMA_Init>:
  if (hdma == NULL)
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d07a      	beq.n	80071f0 <HAL_DMA_Init+0xfa>
{
 80070fa:	b510      	push	{r4, lr}
 80070fc:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80070fe:	6802      	ldr	r2, [r0, #0]
 8007100:	f240 4307 	movw	r3, #1031	; 0x407
 8007104:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007108:	429a      	cmp	r2, r3
 800710a:	d847      	bhi.n	800719c <HAL_DMA_Init+0xa6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800710c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8007110:	f6cb 73fd 	movt	r3, #49149	; 0xbffd
 8007114:	4413      	add	r3, r2
 8007116:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 800711a:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 800711e:	fba1 1303 	umull	r1, r3, r1, r3
 8007122:	091b      	lsrs	r3, r3, #4
 8007124:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8007126:	2100      	movs	r1, #0
 8007128:	f2c4 0102 	movt	r1, #16386	; 0x4002
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800712c:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800712e:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8007130:	2302      	movs	r3, #2
 8007132:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8007136:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007138:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800713c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8007140:	68a3      	ldr	r3, [r4, #8]
 8007142:	68e0      	ldr	r0, [r4, #12]
 8007144:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007146:	6920      	ldr	r0, [r4, #16]
 8007148:	4303      	orrs	r3, r0
 800714a:	6960      	ldr	r0, [r4, #20]
 800714c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800714e:	69a0      	ldr	r0, [r4, #24]
 8007150:	4303      	orrs	r3, r0
 8007152:	69e0      	ldr	r0, [r4, #28]
 8007154:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8007156:	6a20      	ldr	r0, [r4, #32]
 8007158:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800715a:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 800715c:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800715e:	4620      	mov	r0, r4
 8007160:	f7ff ffa0 	bl	80070a4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007164:	68a3      	ldr	r3, [r4, #8]
 8007166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800716a:	bf04      	itt	eq
 800716c:	2300      	moveq	r3, #0
 800716e:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007170:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007172:	7922      	ldrb	r2, [r4, #4]
 8007174:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007176:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007178:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800717a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800717c:	6863      	ldr	r3, [r4, #4]
 800717e:	1e5a      	subs	r2, r3, #1
 8007180:	2a03      	cmp	r2, #3
 8007182:	d91d      	bls.n	80071c0 <HAL_DMA_Init+0xca>
    hdma->DMAmuxRequestGen = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007188:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800718a:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800718c:	2000      	movs	r0, #0
 800718e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8007190:	2301      	movs	r3, #1
 8007192:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8007196:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800719a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800719c:	f64f 33f8 	movw	r3, #64504	; 0xfbf8
 80071a0:	f6cb 73fd 	movt	r3, #49149	; 0xbffd
 80071a4:	4413      	add	r3, r2
 80071a6:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 80071aa:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 80071ae:	fba1 1303 	umull	r1, r3, r1, r3
 80071b2:	091b      	lsrs	r3, r3, #4
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071ba:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80071be:	e7b5      	b.n	800712c <HAL_DMA_Init+0x36>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80071c0:	b2db      	uxtb	r3, r3

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80071c2:	f248 223f 	movw	r2, #33343	; 0x823f
 80071c6:	f2c1 0200 	movt	r2, #4096	; 0x1000
 80071ca:	441a      	add	r2, r3
 80071cc:	0092      	lsls	r2, r2, #2
 80071ce:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071d0:	f44f 6114 	mov.w	r1, #2368	; 0x940
 80071d4:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80071d8:	65a1      	str	r1, [r4, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80071da:	3b01      	subs	r3, #1
 80071dc:	2101      	movs	r1, #1
 80071de:	fa01 f303 	lsl.w	r3, r1, r3
 80071e2:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80071ec:	605a      	str	r2, [r3, #4]
 80071ee:	e7cd      	b.n	800718c <HAL_DMA_Init+0x96>
    return HAL_ERROR;
 80071f0:	2001      	movs	r0, #1
}
 80071f2:	4770      	bx	lr

080071f4 <HAL_DMA_Start_IT>:
{
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80071f8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80071fc:	2801      	cmp	r0, #1
 80071fe:	d041      	beq.n	8007284 <HAL_DMA_Start_IT+0x90>
 8007200:	2001      	movs	r0, #1
 8007202:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8007206:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800720a:	b2c0      	uxtb	r0, r0
 800720c:	2801      	cmp	r0, #1
 800720e:	d004      	beq.n	800721a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8007210:	2300      	movs	r3, #0
 8007212:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8007216:	2002      	movs	r0, #2
}
 8007218:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800721a:	2002      	movs	r0, #2
 800721c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007220:	2000      	movs	r0, #0
 8007222:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8007224:	6825      	ldr	r5, [r4, #0]
 8007226:	6828      	ldr	r0, [r5, #0]
 8007228:	f020 0001 	bic.w	r0, r0, #1
 800722c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff ff17 	bl	8007062 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8007234:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007236:	b1d3      	cbz	r3, 800726e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	6813      	ldr	r3, [r2, #0]
 800723c:	f043 030e 	orr.w	r3, r3, #14
 8007240:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007242:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800724a:	d003      	beq.n	8007254 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007252:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8007254:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007256:	b11b      	cbz	r3, 8007260 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800725e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	6813      	ldr	r3, [r2, #0]
 8007264:	f043 0301 	orr.w	r3, r3, #1
 8007268:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800726a:	2000      	movs	r0, #0
 800726c:	e7d4      	b.n	8007218 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	6813      	ldr	r3, [r2, #0]
 8007272:	f023 0304 	bic.w	r3, r3, #4
 8007276:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007278:	6822      	ldr	r2, [r4, #0]
 800727a:	6813      	ldr	r3, [r2, #0]
 800727c:	f043 030a 	orr.w	r3, r3, #10
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e7de      	b.n	8007242 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8007284:	2002      	movs	r0, #2
 8007286:	e7c7      	b.n	8007218 <HAL_DMA_Start_IT+0x24>

08007288 <HAL_DMA_Abort>:
{
 8007288:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800728a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	2a02      	cmp	r2, #2
 8007292:	d009      	beq.n	80072a8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007294:	2204      	movs	r2, #4
 8007296:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8007298:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80072a6:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072a8:	6801      	ldr	r1, [r0, #0]
 80072aa:	680a      	ldr	r2, [r1, #0]
 80072ac:	f022 020e 	bic.w	r2, r2, #14
 80072b0:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072b2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80072b4:	680a      	ldr	r2, [r1, #0]
 80072b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ba:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 80072bc:	6801      	ldr	r1, [r0, #0]
 80072be:	680a      	ldr	r2, [r1, #0]
 80072c0:	f022 0201 	bic.w	r2, r2, #1
 80072c4:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072c6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80072c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ca:	f002 011f 	and.w	r1, r2, #31
 80072ce:	2201      	movs	r2, #1
 80072d0:	408a      	lsls	r2, r1
 80072d2:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80072d8:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 80072da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072dc:	b142      	cbz	r2, 80072f0 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072de:	6811      	ldr	r1, [r2, #0]
 80072e0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80072e4:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072e8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80072ea:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ec:	2000      	movs	r0, #0
 80072ee:	e7d4      	b.n	800729a <HAL_DMA_Abort+0x12>
 80072f0:	2000      	movs	r0, #0
 80072f2:	e7d2      	b.n	800729a <HAL_DMA_Abort+0x12>

080072f4 <HAL_DMA_Abort_IT>:
{
 80072f4:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80072f6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d009      	beq.n	8007314 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007300:	2304      	movs	r3, #4
 8007302:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8007304:	2301      	movs	r3, #1
 8007306:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800730a:	2200      	movs	r2, #0
 800730c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8007310:	4618      	mov	r0, r3
}
 8007312:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007314:	6802      	ldr	r2, [r0, #0]
 8007316:	6813      	ldr	r3, [r2, #0]
 8007318:	f023 030e 	bic.w	r3, r3, #14
 800731c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800731e:	6802      	ldr	r2, [r0, #0]
 8007320:	6813      	ldr	r3, [r2, #0]
 8007322:	f023 0301 	bic.w	r3, r3, #1
 8007326:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007328:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800732a:	6813      	ldr	r3, [r2, #0]
 800732c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007330:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007332:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007334:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007336:	f003 021f 	and.w	r2, r3, #31
 800733a:	2301      	movs	r3, #1
 800733c:	4093      	lsls	r3, r2
 800733e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007340:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007342:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007344:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8007346:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007348:	b133      	cbz	r3, 8007358 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007350:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007352:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007354:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007356:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007358:	2301      	movs	r3, #1
 800735a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800735e:	2300      	movs	r3, #0
 8007360:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8007364:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007366:	b113      	cbz	r3, 800736e <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8007368:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800736a:	2000      	movs	r0, #0
 800736c:	e7d1      	b.n	8007312 <HAL_DMA_Abort_IT+0x1e>
 800736e:	2000      	movs	r0, #0
 8007370:	e7cf      	b.n	8007312 <HAL_DMA_Abort_IT+0x1e>

08007372 <HAL_DMA_IRQHandler>:
{
 8007372:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007374:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007376:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007378:	6804      	ldr	r4, [r0, #0]
 800737a:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800737c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	2204      	movs	r2, #4
 8007384:	409a      	lsls	r2, r3
 8007386:	420a      	tst	r2, r1
 8007388:	d015      	beq.n	80073b6 <HAL_DMA_IRQHandler+0x44>
 800738a:	f015 0f04 	tst.w	r5, #4
 800738e:	d012      	beq.n	80073b6 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	f013 0f20 	tst.w	r3, #32
 8007396:	d103      	bne.n	80073a0 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	f023 0304 	bic.w	r3, r3, #4
 800739e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80073a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80073a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80073a4:	f003 021f 	and.w	r2, r3, #31
 80073a8:	2304      	movs	r3, #4
 80073aa:	4093      	lsls	r3, r2
 80073ac:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80073ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80073b0:	b103      	cbz	r3, 80073b4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 80073b2:	4798      	blx	r3
}
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80073b6:	2202      	movs	r2, #2
 80073b8:	409a      	lsls	r2, r3
 80073ba:	420a      	tst	r2, r1
 80073bc:	d01c      	beq.n	80073f8 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 80073be:	f015 0f02 	tst.w	r5, #2
 80073c2:	d019      	beq.n	80073f8 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	f013 0f20 	tst.w	r3, #32
 80073ca:	d106      	bne.n	80073da <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	f023 030a 	bic.w	r3, r3, #10
 80073d2:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80073da:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80073dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80073de:	f003 021f 	and.w	r2, r3, #31
 80073e2:	2302      	movs	r3, #2
 80073e4:	4093      	lsls	r3, r2
 80073e6:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80073e8:	2300      	movs	r3, #0
 80073ea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80073ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0df      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 80073f4:	4798      	blx	r3
 80073f6:	e7dd      	b.n	80073b4 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80073f8:	2208      	movs	r2, #8
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	420b      	tst	r3, r1
 8007400:	d0d8      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8007402:	f015 0f08 	tst.w	r5, #8
 8007406:	d0d5      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	f023 030e 	bic.w	r3, r3, #14
 800740e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007410:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007412:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007414:	f003 031f 	and.w	r3, r3, #31
 8007418:	2201      	movs	r2, #1
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007420:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8007422:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8007426:	2300      	movs	r3, #0
 8007428:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800742c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0c0      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8007432:	4798      	blx	r3
  return;
 8007434:	e7be      	b.n	80073b4 <HAL_DMA_IRQHandler+0x42>

08007436 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007436:	2800      	cmp	r0, #0
 8007438:	f000 8113 	beq.w	8007662 <HAL_FDCAN_Init+0x22c>
{
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4604      	mov	r4, r0

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007440:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8007444:	b1d3      	cbz	r3, 800747c <HAL_FDCAN_Init+0x46>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	6993      	ldr	r3, [r2, #24]
 800744a:	f023 0310 	bic.w	r3, r3, #16
 800744e:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007450:	f7fe fd82 	bl	8005f58 <HAL_GetTick>
 8007454:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	f012 0f08 	tst.w	r2, #8
 800745e:	d012      	beq.n	8007486 <HAL_FDCAN_Init+0x50>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007460:	f7fe fd7a 	bl	8005f58 <HAL_GetTick>
 8007464:	1b40      	subs	r0, r0, r5
 8007466:	280a      	cmp	r0, #10
 8007468:	d9f5      	bls.n	8007456 <HAL_FDCAN_Init+0x20>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800746a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	6623      	str	r3, [r4, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007472:	2303      	movs	r3, #3
 8007474:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8007478:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800747a:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 800747c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8007480:	f7fd ff11 	bl	80052a6 <HAL_FDCAN_MspInit>
 8007484:	e7df      	b.n	8007446 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007486:	699a      	ldr	r2, [r3, #24]
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 800748e:	f7fe fd63 	bl	8005f58 <HAL_GetTick>
 8007492:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	699a      	ldr	r2, [r3, #24]
 8007498:	f012 0f01 	tst.w	r2, #1
 800749c:	d10d      	bne.n	80074ba <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800749e:	f7fe fd5b 	bl	8005f58 <HAL_GetTick>
 80074a2:	1b40      	subs	r0, r0, r5
 80074a4:	280a      	cmp	r0, #10
 80074a6:	d9f5      	bls.n	8007494 <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80074a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80074aa:	f043 0301 	orr.w	r3, r3, #1
 80074ae:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80074b0:	2303      	movs	r3, #3
 80074b2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80074b6:	2001      	movs	r0, #1
 80074b8:	e7df      	b.n	800747a <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80074ba:	699a      	ldr	r2, [r3, #24]
 80074bc:	f042 0202 	orr.w	r2, r2, #2
 80074c0:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80074c2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80074c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d047      	beq.n	8007560 <HAL_FDCAN_Init+0x12a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80074d0:	7c23      	ldrb	r3, [r4, #16]
 80074d2:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	6993      	ldr	r3, [r2, #24]
 80074d8:	bf0c      	ite	eq
 80074da:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80074de:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80074e2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80074e4:	7c63      	ldrb	r3, [r4, #17]
 80074e6:	2b01      	cmp	r3, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80074e8:	6822      	ldr	r2, [r4, #0]
 80074ea:	6993      	ldr	r3, [r2, #24]
 80074ec:	bf0c      	ite	eq
 80074ee:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80074f2:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 80074f6:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 80074f8:	7ca3      	ldrb	r3, [r4, #18]
 80074fa:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80074fc:	6822      	ldr	r2, [r4, #0]
 80074fe:	6993      	ldr	r3, [r2, #24]
 8007500:	bf0c      	ite	eq
 8007502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800750a:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800750c:	6822      	ldr	r2, [r4, #0]
 800750e:	6993      	ldr	r3, [r2, #24]
 8007510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007514:	68a1      	ldr	r1, [r4, #8]
 8007516:	430b      	orrs	r3, r1
 8007518:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800751a:	6822      	ldr	r2, [r4, #0]
 800751c:	6993      	ldr	r3, [r2, #24]
 800751e:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8007522:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007524:	6822      	ldr	r2, [r4, #0]
 8007526:	6913      	ldr	r3, [r2, #16]
 8007528:	f023 0310 	bic.w	r3, r3, #16
 800752c:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800752e:	68e3      	ldr	r3, [r4, #12]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d01d      	beq.n	8007570 <HAL_FDCAN_Init+0x13a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007534:	b30b      	cbz	r3, 800757a <HAL_FDCAN_Init+0x144>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007536:	2b02      	cmp	r3, #2
 8007538:	d07c      	beq.n	8007634 <HAL_FDCAN_Init+0x1fe>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800753a:	6822      	ldr	r2, [r4, #0]
 800753c:	6993      	ldr	r3, [r2, #24]
 800753e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007542:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	6913      	ldr	r3, [r2, #16]
 8007548:	f043 0310 	orr.w	r3, r3, #16
 800754c:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	2b03      	cmp	r3, #3
 8007552:	d112      	bne.n	800757a <HAL_FDCAN_Init+0x144>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	6993      	ldr	r3, [r2, #24]
 8007558:	f043 0320 	orr.w	r3, r3, #32
 800755c:	6193      	str	r3, [r2, #24]
 800755e:	e00c      	b.n	800757a <HAL_FDCAN_Init+0x144>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007560:	6862      	ldr	r2, [r4, #4]
 8007562:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007566:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800756a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 800756e:	e7af      	b.n	80074d0 <HAL_FDCAN_Init+0x9a>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	6993      	ldr	r3, [r2, #24]
 8007574:	f043 0304 	orr.w	r3, r3, #4
 8007578:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	69a3      	ldr	r3, [r4, #24]
 800757e:	1e59      	subs	r1, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007580:	69e3      	ldr	r3, [r4, #28]
 8007582:	3b01      	subs	r3, #1
 8007584:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007586:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800758a:	6a21      	ldr	r1, [r4, #32]
 800758c:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800758e:	430b      	orrs	r3, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007590:	6961      	ldr	r1, [r4, #20]
 8007592:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007594:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007598:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075a0:	d04e      	beq.n	8007640 <HAL_FDCAN_Init+0x20a>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80075a2:	6822      	ldr	r2, [r4, #0]
 80075a4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80075a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80075aa:	430b      	orrs	r3, r1
 80075ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80075b0:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 80075b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80075b8:	6423      	str	r3, [r4, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80075ba:	6821      	ldr	r1, [r4, #0]
 80075bc:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80075c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80075c2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80075c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80075ca:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80075ce:	f24a 4270 	movw	r2, #42096	; 0xa470
 80075d2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80075d6:	6462      	str	r2, [r4, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80075d8:	6821      	ldr	r1, [r4, #0]
 80075da:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80075de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80075e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075e4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80075e8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80075ec:	f24a 42b0 	movw	r2, #42160	; 0xa4b0
 80075f0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80075f4:	64a2      	str	r2, [r4, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80075f6:	f24a 5288 	movw	r2, #42376	; 0xa588
 80075fa:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80075fe:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007600:	f24a 6260 	movw	r2, #42592	; 0xa660
 8007604:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007608:	6522      	str	r2, [r4, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800760a:	f24a 6278 	movw	r2, #42616	; 0xa678
 800760e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007612:	6562      	str	r2, [r4, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007614:	2100      	movs	r1, #0
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007616:	f24a 7250 	movw	r2, #42832	; 0xa750
 800761a:	f2c4 0200 	movt	r2, #16384	; 0x4000
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800761e:	f843 1b04 	str.w	r1, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007622:	4293      	cmp	r3, r2
 8007624:	d1fb      	bne.n	800761e <HAL_FDCAN_Init+0x1e8>
  hfdcan->LatestTxFifoQRequest = 0U;
 8007626:	2000      	movs	r0, #0
 8007628:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800762a:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800762c:	2301      	movs	r3, #1
 800762e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8007632:	e722      	b.n	800747a <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	6993      	ldr	r3, [r2, #24]
 8007638:	f043 0320 	orr.w	r3, r3, #32
 800763c:	6193      	str	r3, [r2, #24]
 800763e:	e79c      	b.n	800757a <HAL_FDCAN_Init+0x144>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007640:	6822      	ldr	r2, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007644:	1e59      	subs	r1, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007646:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007648:	3b01      	subs	r3, #1
 800764a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800764c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007650:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007652:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007654:	430b      	orrs	r3, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007656:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007658:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800765a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800765e:	60d3      	str	r3, [r2, #12]
 8007660:	e79f      	b.n	80075a2 <HAL_FDCAN_Init+0x16c>
    return HAL_ERROR;
 8007662:	2001      	movs	r0, #1
}
 8007664:	4770      	bx	lr

08007666 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007666:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	d005      	beq.n	800767c <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007670:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007672:	f043 0304 	orr.w	r3, r3, #4
 8007676:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8007678:	2001      	movs	r0, #1
}
 800767a:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800767c:	2302      	movs	r3, #2
 800767e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007682:	6802      	ldr	r2, [r0, #0]
 8007684:	6993      	ldr	r3, [r2, #24]
 8007686:	f023 0301 	bic.w	r3, r3, #1
 800768a:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800768c:	2300      	movs	r3, #0
 800768e:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_OK;
 8007690:	4618      	mov	r0, r3
 8007692:	4770      	bx	lr

08007694 <HAL_FDCAN_AddMessageToTxFifoQ>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007694:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d15d      	bne.n	800775a <HAL_FDCAN_AddMessageToTxFifoQ+0xc6>
{
 800769e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80076a0:	6804      	ldr	r4, [r0, #0]
 80076a2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80076a6:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 80076aa:	d005      	beq.n	80076b8 <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80076ac:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80076ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076b2:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 80076b4:	2001      	movs	r0, #1
}
 80076b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80076b8:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 80076bc:	f3c5 4501 	ubfx	r5, r5, #16, #2
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80076c0:	684b      	ldr	r3, [r1, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d140      	bne.n	8007748 <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 80076c6:	690e      	ldr	r6, [r1, #16]
 80076c8:	688b      	ldr	r3, [r1, #8]
 80076ca:	431e      	orrs	r6, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 80076cc:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80076ce:	ea46 4683 	orr.w	r6, r6, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80076d2:	69cb      	ldr	r3, [r1, #28]
 80076d4:	698c      	ldr	r4, [r1, #24]
 80076d6:	4323      	orrs	r3, r4
 80076d8:	694c      	ldr	r4, [r1, #20]
 80076da:	4323      	orrs	r3, r4
 80076dc:	68cc      	ldr	r4, [r1, #12]
 80076de:	4323      	orrs	r3, r4
 80076e0:	6a0c      	ldr	r4, [r1, #32]
 80076e2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80076e6:	eb05 07c5 	add.w	r7, r5, r5, lsl #3
 80076ea:	f8d0 e054 	ldr.w	lr, [r0, #84]	; 0x54
 80076ee:	eb0e 04c7 	add.w	r4, lr, r7, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80076f2:	f84e 6037 	str.w	r6, [lr, r7, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 80076f6:	6063      	str	r3, [r4, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80076f8:	f24f 53a0 	movw	r3, #62880	; 0xf5a0
 80076fc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007700:	89ce      	ldrh	r6, [r1, #14]
 8007702:	5d9b      	ldrb	r3, [r3, r6]
 8007704:	b1c3      	cbz	r3, 8007738 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
 8007706:	f24f 5ea0 	movw	lr, #62880	; 0xf5a0
 800770a:	f6c0 0e00 	movt	lr, #2048	; 0x800
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800770e:	eb04 060c 	add.w	r6, r4, ip
 8007712:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007714:	7893      	ldrb	r3, [r2, #2]
 8007716:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007718:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 800771c:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800771e:	433b      	orrs	r3, r7
 8007720:	7857      	ldrb	r7, [r2, #1]
 8007722:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007726:	60b3      	str	r3, [r6, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007728:	f10c 0c04 	add.w	ip, ip, #4
 800772c:	3204      	adds	r2, #4
 800772e:	89cb      	ldrh	r3, [r1, #14]
 8007730:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8007734:	459c      	cmp	ip, r3
 8007736:	d3ea      	bcc.n	800770e <HAL_FDCAN_AddMessageToTxFifoQ+0x7a>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007738:	6802      	ldr	r2, [r0, #0]
 800773a:	2301      	movs	r3, #1
 800773c:	40ab      	lsls	r3, r5
 800773e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007742:	6583      	str	r3, [r0, #88]	; 0x58
    return HAL_OK;
 8007744:	2000      	movs	r0, #0
 8007746:	e7b6      	b.n	80076b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x22>
                   pTxHeader->TxFrameType |
 8007748:	690b      	ldr	r3, [r1, #16]
 800774a:	680c      	ldr	r4, [r1, #0]
 800774c:	ea43 0604 	orr.w	r6, r3, r4
 8007750:	688b      	ldr	r3, [r1, #8]
 8007752:	431e      	orrs	r6, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007754:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
 8007758:	e7bb      	b.n	80076d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800775a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800775c:	f043 0308 	orr.w	r3, r3, #8
 8007760:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8007762:	2001      	movs	r0, #1
}
 8007764:	4770      	bx	lr

08007766 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007766:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
 800776a:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 800776e:	f1bc 0f02 	cmp.w	ip, #2
 8007772:	d17d      	bne.n	8007870 <HAL_FDCAN_GetRxMessage+0x10a>
{
 8007774:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007776:	2940      	cmp	r1, #64	; 0x40
 8007778:	d00b      	beq.n	8007792 <HAL_FDCAN_GetRxMessage+0x2c>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800777a:	6804      	ldr	r4, [r0, #0]
 800777c:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8007780:	f015 0f0f 	tst.w	r5, #15
 8007784:	d11b      	bne.n	80077be <HAL_FDCAN_GetRxMessage+0x58>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007786:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800778c:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 800778e:	2001      	movs	r0, #1
 8007790:	e069      	b.n	8007866 <HAL_FDCAN_GetRxMessage+0x100>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007792:	6804      	ldr	r4, [r0, #0]
 8007794:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8007798:	f015 0f0f 	tst.w	r5, #15
 800779c:	d105      	bne.n	80077aa <HAL_FDCAN_GetRxMessage+0x44>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800779e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80077a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a4:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 80077a6:	2001      	movs	r0, #1
 80077a8:	e05d      	b.n	8007866 <HAL_FDCAN_GetRxMessage+0x100>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80077aa:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
 80077ae:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80077b2:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 80077b6:	6c86      	ldr	r6, [r0, #72]	; 0x48
 80077b8:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 80077bc:	e008      	b.n	80077d0 <HAL_FDCAN_GetRxMessage+0x6a>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80077be:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 80077c2:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80077c6:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 80077ca:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 80077cc:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80077d0:	6834      	ldr	r4, [r6, #0]
 80077d2:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 80077d6:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80077d8:	2c00      	cmp	r4, #0
 80077da:	d145      	bne.n	8007868 <HAL_FDCAN_GetRxMessage+0x102>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80077dc:	6834      	ldr	r4, [r6, #0]
 80077de:	f3c4 448a 	ubfx	r4, r4, #18, #11
 80077e2:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80077e4:	6834      	ldr	r4, [r6, #0]
 80077e6:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 80077ea:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80077ec:	6834      	ldr	r4, [r6, #0]
 80077ee:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80077f2:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80077f4:	88b4      	ldrh	r4, [r6, #4]
 80077f6:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80077f8:	6874      	ldr	r4, [r6, #4]
 80077fa:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 80077fe:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007800:	6875      	ldr	r5, [r6, #4]
 8007802:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8007806:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007808:	6875      	ldr	r5, [r6, #4]
 800780a:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 800780e:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007810:	79f5      	ldrb	r5, [r6, #7]
 8007812:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8007816:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007818:	6875      	ldr	r5, [r6, #4]
 800781a:	0fed      	lsrs	r5, r5, #31
 800781c:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800781e:	f24f 55a0 	movw	r5, #62880	; 0xf5a0
 8007822:	f6c0 0500 	movt	r5, #2048	; 0x800
 8007826:	0c24      	lsrs	r4, r4, #16
 8007828:	5d2c      	ldrb	r4, [r5, r4]
 800782a:	b1a4      	cbz	r4, 8007856 <HAL_FDCAN_GetRxMessage+0xf0>
 800782c:	1df5      	adds	r5, r6, #7
 800782e:	3b01      	subs	r3, #1
 8007830:	f24f 54a0 	movw	r4, #62880	; 0xf5a0
 8007834:	f6c0 0400 	movt	r4, #2048	; 0x800
      pRxData[ByteCounter] = pData[ByteCounter];
 8007838:	46ac      	mov	ip, r5
 800783a:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 800783e:	f803 ef01 	strb.w	lr, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007842:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 8007846:	f814 e00e 	ldrb.w	lr, [r4, lr]
 800784a:	f1ac 0c06 	sub.w	ip, ip, #6
 800784e:	ebac 0c06 	sub.w	ip, ip, r6
 8007852:	45e6      	cmp	lr, ip
 8007854:	d8f0      	bhi.n	8007838 <HAL_FDCAN_GetRxMessage+0xd2>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007856:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8007858:	6803      	ldr	r3, [r0, #0]
 800785a:	bf0c      	ite	eq
 800785c:	f8c3 7094 	streq.w	r7, [r3, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8007860:	f8c3 709c 	strne.w	r7, [r3, #156]	; 0x9c
    return HAL_OK;
 8007864:	2000      	movs	r0, #0
}
 8007866:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007868:	6834      	ldr	r4, [r6, #0]
 800786a:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 800786e:	e7b8      	b.n	80077e2 <HAL_FDCAN_GetRxMessage+0x7c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007870:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007872:	f043 0308 	orr.w	r3, r3, #8
 8007876:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8007878:	2001      	movs	r0, #1
}
 800787a:	4770      	bx	lr

0800787c <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800787c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007880:	3b01      	subs	r3, #1
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b01      	cmp	r3, #1
 8007886:	d905      	bls.n	8007894 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007888:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800788a:	f043 0302 	orr.w	r3, r3, #2
 800788e:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8007890:	2001      	movs	r0, #1
}
 8007892:	4770      	bx	lr
{
 8007894:	b470      	push	{r4, r5, r6}
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007896:	6804      	ldr	r4, [r0, #0]
 8007898:	6da3      	ldr	r3, [r4, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800789a:	f011 0607 	ands.w	r6, r1, #7
 800789e:	d002      	beq.n	80078a6 <HAL_FDCAN_ActivateNotification+0x2a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80078a0:	f013 0f01 	tst.w	r3, #1
 80078a4:	d023      	beq.n	80078ee <HAL_FDCAN_ActivateNotification+0x72>
 80078a6:	f011 0f38 	tst.w	r1, #56	; 0x38
 80078aa:	d002      	beq.n	80078b2 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80078ac:	f013 0f02 	tst.w	r3, #2
 80078b0:	d01d      	beq.n	80078ee <HAL_FDCAN_ActivateNotification+0x72>
 80078b2:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80078b6:	d002      	beq.n	80078be <HAL_FDCAN_ActivateNotification+0x42>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80078b8:	f013 0f04 	tst.w	r3, #4
 80078bc:	d017      	beq.n	80078ee <HAL_FDCAN_ActivateNotification+0x72>
 80078be:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80078c2:	d002      	beq.n	80078ca <HAL_FDCAN_ActivateNotification+0x4e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80078c4:	f013 0f08 	tst.w	r3, #8
 80078c8:	d011      	beq.n	80078ee <HAL_FDCAN_ActivateNotification+0x72>
 80078ca:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80078ce:	d002      	beq.n	80078d6 <HAL_FDCAN_ActivateNotification+0x5a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80078d0:	f013 0f10 	tst.w	r3, #16
 80078d4:	d00b      	beq.n	80078ee <HAL_FDCAN_ActivateNotification+0x72>
 80078d6:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80078da:	d002      	beq.n	80078e2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80078dc:	f013 0f20 	tst.w	r3, #32
 80078e0:	d005      	beq.n	80078ee <HAL_FDCAN_ActivateNotification+0x72>
 80078e2:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80078e6:	d006      	beq.n	80078f6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80078e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80078ec:	d103      	bne.n	80078f6 <HAL_FDCAN_ActivateNotification+0x7a>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80078ee:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 80078f0:	f045 0501 	orr.w	r5, r5, #1
 80078f4:	65e5      	str	r5, [r4, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80078f6:	b116      	cbz	r6, 80078fe <HAL_FDCAN_ActivateNotification+0x82>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80078f8:	f013 0f01 	tst.w	r3, #1
 80078fc:	d123      	bne.n	8007946 <HAL_FDCAN_ActivateNotification+0xca>
 80078fe:	f011 0f38 	tst.w	r1, #56	; 0x38
 8007902:	d002      	beq.n	800790a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007904:	f013 0f02 	tst.w	r3, #2
 8007908:	d11d      	bne.n	8007946 <HAL_FDCAN_ActivateNotification+0xca>
 800790a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 800790e:	d002      	beq.n	8007916 <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007910:	f013 0f04 	tst.w	r3, #4
 8007914:	d117      	bne.n	8007946 <HAL_FDCAN_ActivateNotification+0xca>
 8007916:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 800791a:	d002      	beq.n	8007922 <HAL_FDCAN_ActivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800791c:	f013 0f08 	tst.w	r3, #8
 8007920:	d111      	bne.n	8007946 <HAL_FDCAN_ActivateNotification+0xca>
 8007922:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8007926:	d002      	beq.n	800792e <HAL_FDCAN_ActivateNotification+0xb2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007928:	f013 0f10 	tst.w	r3, #16
 800792c:	d10b      	bne.n	8007946 <HAL_FDCAN_ActivateNotification+0xca>
 800792e:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8007932:	d002      	beq.n	800793a <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007934:	f013 0f20 	tst.w	r3, #32
 8007938:	d105      	bne.n	8007946 <HAL_FDCAN_ActivateNotification+0xca>
 800793a:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 800793e:	d007      	beq.n	8007950 <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007940:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007944:	d004      	beq.n	8007950 <HAL_FDCAN_ActivateNotification+0xd4>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007946:	6804      	ldr	r4, [r0, #0]
 8007948:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800794a:	f043 0302 	orr.w	r3, r3, #2
 800794e:	65e3      	str	r3, [r4, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007950:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007954:	d005      	beq.n	8007962 <HAL_FDCAN_ActivateNotification+0xe6>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007956:	6804      	ldr	r4, [r0, #0]
 8007958:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800795c:	4313      	orrs	r3, r2
 800795e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007962:	f411 7f80 	tst.w	r1, #256	; 0x100
 8007966:	d005      	beq.n	8007974 <HAL_FDCAN_ActivateNotification+0xf8>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007968:	6804      	ldr	r4, [r0, #0]
 800796a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800796e:	4313      	orrs	r3, r2
 8007970:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007974:	6802      	ldr	r2, [r0, #0]
 8007976:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007978:	430b      	orrs	r3, r1
 800797a:	6553      	str	r3, [r2, #84]	; 0x54
    return HAL_OK;
 800797c:	2000      	movs	r0, #0
}
 800797e:	bc70      	pop	{r4, r5, r6}
 8007980:	4770      	bx	lr

08007982 <HAL_FDCAN_TxEventFifoCallback>:
}
 8007982:	4770      	bx	lr

08007984 <HAL_FDCAN_RxFifo1Callback>:
}
 8007984:	4770      	bx	lr

08007986 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8007986:	4770      	bx	lr

08007988 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8007988:	4770      	bx	lr

0800798a <HAL_FDCAN_TxBufferAbortCallback>:
}
 800798a:	4770      	bx	lr

0800798c <HAL_FDCAN_TimestampWraparoundCallback>:
}
 800798c:	4770      	bx	lr

0800798e <HAL_FDCAN_TimeoutOccurredCallback>:
}
 800798e:	4770      	bx	lr

08007990 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8007990:	4770      	bx	lr

08007992 <HAL_FDCAN_ErrorCallback>:
}
 8007992:	4770      	bx	lr

08007994 <HAL_FDCAN_ErrorStatusCallback>:
}
 8007994:	4770      	bx	lr

08007996 <HAL_FDCAN_IRQHandler>:
{
 8007996:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800799a:	4604      	mov	r4, r0
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800799c:	6803      	ldr	r3, [r0, #0]
 800799e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80079a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079a2:	ea02 0901 	and.w	r9, r2, r1
 80079a6:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80079aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80079ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079ae:	ea02 0801 	and.w	r8, r2, r1
 80079b2:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80079b6:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80079b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079ba:	4017      	ands	r7, r2
 80079bc:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80079c0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 80079c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079c4:	4015      	ands	r5, r2
 80079c6:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80079ca:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 80079cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079ce:	4016      	ands	r6, r2
 80079d0:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80079d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80079da:	d003      	beq.n	80079e4 <HAL_FDCAN_IRQHandler+0x4e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80079dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079de:	f012 0f40 	tst.w	r2, #64	; 0x40
 80079e2:	d151      	bne.n	8007a88 <HAL_FDCAN_IRQHandler+0xf2>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079e8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80079ec:	d003      	beq.n	80079f6 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80079ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079f0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80079f4:	d14d      	bne.n	8007a92 <HAL_FDCAN_IRQHandler+0xfc>
  if (TxEventFifoITs != 0U)
 80079f6:	f1b9 0f00 	cmp.w	r9, #0
 80079fa:	d156      	bne.n	8007aaa <HAL_FDCAN_IRQHandler+0x114>
  if (RxFifo0ITs != 0U)
 80079fc:	f1b8 0f00 	cmp.w	r8, #0
 8007a00:	d15b      	bne.n	8007aba <HAL_FDCAN_IRQHandler+0x124>
  if (RxFifo1ITs != 0U)
 8007a02:	2f00      	cmp	r7, #0
 8007a04:	d161      	bne.n	8007aca <HAL_FDCAN_IRQHandler+0x134>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a0a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007a0e:	d003      	beq.n	8007a18 <HAL_FDCAN_IRQHandler+0x82>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a12:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007a16:	d15f      	bne.n	8007ad8 <HAL_FDCAN_IRQHandler+0x142>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a1c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007a20:	d003      	beq.n	8007a2a <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007a22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a24:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007a28:	d15d      	bne.n	8007ae6 <HAL_FDCAN_IRQHandler+0x150>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a2e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8007a32:	d003      	beq.n	8007a3c <HAL_FDCAN_IRQHandler+0xa6>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a36:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8007a3a:	d15f      	bne.n	8007afc <HAL_FDCAN_IRQHandler+0x166>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a40:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007a44:	d003      	beq.n	8007a4e <HAL_FDCAN_IRQHandler+0xb8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007a46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a48:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007a4c:	d15d      	bne.n	8007b0a <HAL_FDCAN_IRQHandler+0x174>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a52:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007a56:	d00a      	beq.n	8007a6e <HAL_FDCAN_IRQHandler+0xd8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a5a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007a5e:	d006      	beq.n	8007a6e <HAL_FDCAN_IRQHandler+0xd8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007a60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a64:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007a66:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6c:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8007a6e:	2e00      	cmp	r6, #0
 8007a70:	d152      	bne.n	8007b18 <HAL_FDCAN_IRQHandler+0x182>
  if (Errors != 0U)
 8007a72:	b125      	cbz	r5, 8007a7e <HAL_FDCAN_IRQHandler+0xe8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8007a78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007a7a:	432b      	orrs	r3, r5
 8007a7c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007a7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d150      	bne.n	8007b26 <HAL_FDCAN_IRQHandler+0x190>
}
 8007a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007a88:	2240      	movs	r2, #64	; 0x40
 8007a8a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007a8c:	f7ff ff80 	bl	8007990 <HAL_FDCAN_HighPriorityMessageCallback>
 8007a90:	e7a8      	b.n	80079e4 <HAL_FDCAN_IRQHandler+0x4e>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007a92:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007a96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007a9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007a9e:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007aa0:	4011      	ands	r1, r2
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f7ff ff71 	bl	800798a <HAL_FDCAN_TxBufferAbortCallback>
 8007aa8:	e7a5      	b.n	80079f6 <HAL_FDCAN_IRQHandler+0x60>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f7ff ff65 	bl	8007982 <HAL_FDCAN_TxEventFifoCallback>
 8007ab8:	e7a0      	b.n	80079fc <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7fd f886 	bl	8004bd4 <HAL_FDCAN_RxFifo0Callback>
 8007ac8:	e79b      	b.n	8007a02 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007ace:	4639      	mov	r1, r7
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7ff ff57 	bl	8007984 <HAL_FDCAN_RxFifo1Callback>
 8007ad6:	e796      	b.n	8007a06 <HAL_FDCAN_IRQHandler+0x70>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007adc:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff ff51 	bl	8007986 <HAL_FDCAN_TxFifoEmptyCallback>
 8007ae4:	e798      	b.n	8007a18 <HAL_FDCAN_IRQHandler+0x82>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007ae6:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007aea:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007aee:	2080      	movs	r0, #128	; 0x80
 8007af0:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007af2:	4011      	ands	r1, r2
 8007af4:	4620      	mov	r0, r4
 8007af6:	f7ff ff47 	bl	8007988 <HAL_FDCAN_TxBufferCompleteCallback>
 8007afa:	e796      	b.n	8007a2a <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007afc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b00:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007b02:	4620      	mov	r0, r4
 8007b04:	f7ff ff42 	bl	800798c <HAL_FDCAN_TimestampWraparoundCallback>
 8007b08:	e798      	b.n	8007a3c <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007b0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007b0e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007b10:	4620      	mov	r0, r4
 8007b12:	f7ff ff3c 	bl	800798e <HAL_FDCAN_TimeoutOccurredCallback>
 8007b16:	e79a      	b.n	8007a4e <HAL_FDCAN_IRQHandler+0xb8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff ff38 	bl	8007994 <HAL_FDCAN_ErrorStatusCallback>
 8007b24:	e7a5      	b.n	8007a72 <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007b26:	4620      	mov	r0, r4
 8007b28:	f7ff ff33 	bl	8007992 <HAL_FDCAN_ErrorCallback>
}
 8007b2c:	e7aa      	b.n	8007a84 <HAL_FDCAN_IRQHandler+0xee>

08007b2e <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007b2e:	b510      	push	{r4, lr}
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  uint32_t *dest_addr = (uint32_t *)Address;
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007b30:	460b      	mov	r3, r1

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b36:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007b3a:	6954      	ldr	r4, [r2, #20]
 8007b3c:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8007b40:	6154      	str	r4, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b42:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007b46:	b672      	cpsid	i
 8007b48:	f501 7c80 	add.w	ip, r1, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007b4c:	1a41      	subs	r1, r0, r1
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 8007b52:	3304      	adds	r3, #4
    row_index--;
  }
  while (row_index != 0U);
 8007b54:	4563      	cmp	r3, ip
 8007b56:	d1fa      	bne.n	8007b4e <FLASH_Program_Fast+0x20>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b58:	f38e 8810 	msr	PRIMASK, lr

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007b5c:	bd10      	pop	{r4, pc}

08007b5e <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	db01      	blt.n	8007b70 <HAL_FLASH_Unlock+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8007b6c:	2000      	movs	r0, #0
}
 8007b6e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007b78:	f240 1223 	movw	r2, #291	; 0x123
 8007b7c:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8007b80:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007b82:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8007b86:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8007b8a:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007b8c:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8007b8e:	0fc0      	lsrs	r0, r0, #31
 8007b90:	4770      	bx	lr

08007b92 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007b9a:	695a      	ldr	r2, [r3, #20]
 8007b9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007ba0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007ba2:	6958      	ldr	r0, [r3, #20]
}
 8007ba4:	43c0      	mvns	r0, r0
 8007ba6:	0fc0      	lsrs	r0, r0, #31
 8007ba8:	4770      	bx	lr

08007baa <FLASH_WaitForLastOperation>:
{
 8007baa:	b570      	push	{r4, r5, r6, lr}
 8007bac:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8007bae:	f7fe f9d3 	bl	8005f58 <HAL_GetTick>
 8007bb2:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007bb4:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8007bb8:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8007bbc:	6933      	ldr	r3, [r6, #16]
 8007bbe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007bc2:	d006      	beq.n	8007bd2 <FLASH_WaitForLastOperation+0x28>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007bc4:	f7fe f9c8 	bl	8005f58 <HAL_GetTick>
 8007bc8:	1b00      	subs	r0, r0, r4
 8007bca:	42a8      	cmp	r0, r5
 8007bcc:	d9f6      	bls.n	8007bbc <FLASH_WaitForLastOperation+0x12>
      return HAL_TIMEOUT;
 8007bce:	2003      	movs	r0, #3
}
 8007bd0:	bd70      	pop	{r4, r5, r6, pc}
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8007be0:	4013      	ands	r3, r2
 8007be2:	d10f      	bne.n	8007c04 <FLASH_WaitForLastOperation+0x5a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007be8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f013 0f01 	tst.w	r3, #1
 8007bf2:	d015      	beq.n	8007c20 <FLASH_WaitForLastOperation+0x76>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8007c00:	2000      	movs	r0, #0
 8007c02:	e7e5      	b.n	8007bd0 <FLASH_WaitForLastOperation+0x26>
    pFlash.ErrorCode |= error;
 8007c04:	f240 5284 	movw	r2, #1412	; 0x584
 8007c08:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007c0c:	6851      	ldr	r1, [r2, #4]
 8007c0e:	4319      	orrs	r1, r3
 8007c10:	6051      	str	r1, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8007c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007c16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007c1a:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	e7d7      	b.n	8007bd0 <FLASH_WaitForLastOperation+0x26>
  return HAL_OK;
 8007c20:	2000      	movs	r0, #0
 8007c22:	e7d5      	b.n	8007bd0 <FLASH_WaitForLastOperation+0x26>

08007c24 <HAL_FLASH_Program>:
{
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8007c28:	f240 5c84 	movw	ip, #1412	; 0x584
 8007c2c:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 8007c30:	f89c 3000 	ldrb.w	r3, [ip]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d048      	beq.n	8007cca <HAL_FLASH_Program+0xa6>
 8007c38:	4604      	mov	r4, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f88c 3000 	strb.w	r3, [ip]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c48:	f7ff ffaf 	bl	8007baa <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8007c4c:	bb30      	cbnz	r0, 8007c9c <HAL_FLASH_Program+0x78>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007c4e:	f240 5384 	movw	r3, #1412	; 0x584
 8007c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c56:	6058      	str	r0, [r3, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007c58:	b13c      	cbz	r4, 8007c6a <HAL_FLASH_Program+0x46>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007c5a:	1e63      	subs	r3, r4, #1
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d924      	bls.n	8007caa <HAL_FLASH_Program+0x86>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c64:	f7ff ffa1 	bl	8007baa <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 8007c68:	e018      	b.n	8007c9c <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c72:	695a      	ldr	r2, [r3, #20]
 8007c74:	f042 0201 	orr.w	r2, r2, #1
 8007c78:	615a      	str	r2, [r3, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 8007c7a:	602e      	str	r6, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007c7c:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007c80:	606f      	str	r7, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c86:	f7ff ff90 	bl	8007baa <FLASH_WaitForLastOperation>
      prog_bit = FLASH_CR_PG;
 8007c8a:	2401      	movs	r4, #1
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c94:	695a      	ldr	r2, [r3, #20]
 8007c96:	ea22 0204 	bic.w	r2, r2, r4
 8007c9a:	615a      	str	r2, [r3, #20]
  __HAL_UNLOCK(&pFlash);
 8007c9c:	f240 5384 	movw	r3, #1412	; 0x584
 8007ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
}
 8007ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007caa:	4631      	mov	r1, r6
 8007cac:	4628      	mov	r0, r5
 8007cae:	f7ff ff3e 	bl	8007b2e <FLASH_Program_Fast>
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007cb2:	2c02      	cmp	r4, #2
 8007cb4:	bf14      	ite	ne
 8007cb6:	2400      	movne	r4, #0
 8007cb8:	2401      	moveq	r4, #1
 8007cba:	04a4      	lsls	r4, r4, #18
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007cbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cc0:	f7ff ff73 	bl	8007baa <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 8007cc4:	2c00      	cmp	r4, #0
 8007cc6:	d1e1      	bne.n	8007c8c <HAL_FLASH_Program+0x68>
 8007cc8:	e7e8      	b.n	8007c9c <HAL_FLASH_Program+0x78>
  __HAL_LOCK(&pFlash);
 8007cca:	2002      	movs	r0, #2
 8007ccc:	e7ec      	b.n	8007ca8 <HAL_FLASH_Program+0x84>

08007cce <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007cce:	f010 0f01 	tst.w	r0, #1
 8007cd2:	d007      	beq.n	8007ce4 <FLASH_MassErase+0x16>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cdc:	695a      	ldr	r2, [r3, #20]
 8007cde:	f042 0204 	orr.w	r2, r2, #4
 8007ce2:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ce8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cec:	695a      	ldr	r2, [r3, #20]
 8007cee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007cf2:	615a      	str	r2, [r3, #20]
}
 8007cf4:	4770      	bx	lr

08007cf6 <FLASH_PageErase>:
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cfe:	695a      	ldr	r2, [r3, #20]
 8007d00:	00c0      	lsls	r0, r0, #3
 8007d02:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8007d06:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8007d0a:	4310      	orrs	r0, r2
 8007d0c:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007d0e:	695a      	ldr	r2, [r3, #20]
 8007d10:	f042 0202 	orr.w	r2, r2, #2
 8007d14:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007d16:	695a      	ldr	r2, [r3, #20]
 8007d18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d1c:	615a      	str	r2, [r3, #20]
}
 8007d1e:	4770      	bx	lr

08007d20 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007d20:	f240 5384 	movw	r3, #1412	; 0x584
 8007d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d28:	7f1a      	ldrb	r2, [r3, #28]
 8007d2a:	b2d3      	uxtb	r3, r2

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007d2c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8007d30:	2a01      	cmp	r2, #1
 8007d32:	d00a      	beq.n	8007d4a <FLASH_FlushCaches+0x2a>
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007d34:	3b02      	subs	r3, #2
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d91b      	bls.n	8007d74 <FLASH_FlushCaches+0x54>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007d3c:	f240 5384 	movw	r3, #1412	; 0x584
 8007d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d44:	2200      	movs	r2, #0
 8007d46:	771a      	strb	r2, [r3, #28]
}
 8007d48:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007d52:	6811      	ldr	r1, [r2, #0]
 8007d54:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8007d58:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007d5a:	6811      	ldr	r1, [r2, #0]
 8007d5c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007d60:	6011      	str	r1, [r2, #0]
 8007d62:	6811      	ldr	r1, [r2, #0]
 8007d64:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8007d68:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d6a:	6811      	ldr	r1, [r2, #0]
 8007d6c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007d70:	6011      	str	r1, [r2, #0]
 8007d72:	e7df      	b.n	8007d34 <FLASH_FlushCaches+0x14>
    __HAL_FLASH_DATA_CACHE_RESET();
 8007d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d8a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	e7d2      	b.n	8007d3c <FLASH_FlushCaches+0x1c>

08007d96 <HAL_FLASHEx_Erase>:
{
 8007d96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8007d9a:	f240 5384 	movw	r3, #1412	; 0x584
 8007d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	f000 809c 	beq.w	8007ee2 <HAL_FLASHEx_Erase+0x14c>
 8007daa:	4604      	mov	r4, r0
 8007dac:	460f      	mov	r7, r1
 8007dae:	f240 5384 	movw	r3, #1412	; 0x584
 8007db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007db6:	2201      	movs	r2, #1
 8007db8:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007dbe:	f7ff fef4 	bl	8007baa <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8007dc2:	4681      	mov	r9, r0
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f040 8083 	bne.w	8007ed0 <HAL_FLASHEx_Erase+0x13a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007dca:	f240 5384 	movw	r3, #1412	; 0x584
 8007dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007de4:	d042      	beq.n	8007e6c <HAL_FLASHEx_Erase+0xd6>
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007df4:	d033      	beq.n	8007e5e <HAL_FLASHEx_Erase+0xc8>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e04:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007e06:	f240 5384 	movw	r3, #1412	; 0x584
 8007e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e0e:	2203      	movs	r2, #3
 8007e10:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d047      	beq.n	8007ea8 <HAL_FLASHEx_Erase+0x112>
      *PageError = 0xFFFFFFFFU;
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1c:	603b      	str	r3, [r7, #0]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007e1e:	68a5      	ldr	r5, [r4, #8]
 8007e20:	68e3      	ldr	r3, [r4, #12]
 8007e22:	442b      	add	r3, r5
 8007e24:	429d      	cmp	r5, r3
 8007e26:	d251      	bcs.n	8007ecc <HAL_FLASHEx_Erase+0x136>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e28:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007e2c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8007e30:	f2c4 0602 	movt	r6, #16386	; 0x4002
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007e34:	6861      	ldr	r1, [r4, #4]
 8007e36:	4628      	mov	r0, r5
 8007e38:	f7ff ff5d 	bl	8007cf6 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	f7ff feb4 	bl	8007baa <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007e42:	6973      	ldr	r3, [r6, #20]
 8007e44:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007e48:	6173      	str	r3, [r6, #20]
        if (status != HAL_OK)
 8007e4a:	4681      	mov	r9, r0
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d13c      	bne.n	8007eca <HAL_FLASHEx_Erase+0x134>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007e50:	3501      	adds	r5, #1
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	68e2      	ldr	r2, [r4, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	42ab      	cmp	r3, r5
 8007e5a:	d8eb      	bhi.n	8007e34 <HAL_FLASHEx_Erase+0x9e>
 8007e5c:	e036      	b.n	8007ecc <HAL_FLASHEx_Erase+0x136>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007e5e:	f240 5384 	movw	r3, #1412	; 0x584
 8007e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e66:	2201      	movs	r2, #1
 8007e68:	771a      	strb	r2, [r3, #28]
 8007e6a:	e7d2      	b.n	8007e12 <HAL_FLASHEx_Erase+0x7c>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e7a:	d00e      	beq.n	8007e9a <HAL_FLASHEx_Erase+0x104>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e8a:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007e8c:	f240 5384 	movw	r3, #1412	; 0x584
 8007e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e94:	2202      	movs	r2, #2
 8007e96:	771a      	strb	r2, [r3, #28]
 8007e98:	e7bb      	b.n	8007e12 <HAL_FLASHEx_Erase+0x7c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007e9a:	f240 5384 	movw	r3, #1412	; 0x584
 8007e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	771a      	strb	r2, [r3, #28]
 8007ea6:	e7b4      	b.n	8007e12 <HAL_FLASHEx_Erase+0x7c>
      FLASH_MassErase(pEraseInit->Banks);
 8007ea8:	6860      	ldr	r0, [r4, #4]
 8007eaa:	f7ff ff10 	bl	8007cce <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007eb2:	f7ff fe7a 	bl	8007baa <FLASH_WaitForLastOperation>
 8007eb6:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ebc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007ec0:	695a      	ldr	r2, [r3, #20]
 8007ec2:	f022 0204 	bic.w	r2, r2, #4
 8007ec6:	615a      	str	r2, [r3, #20]
 8007ec8:	e000      	b.n	8007ecc <HAL_FLASHEx_Erase+0x136>
          *PageError = page_index;
 8007eca:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();
 8007ecc:	f7ff ff28 	bl	8007d20 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8007ed0:	f240 5384 	movw	r3, #1412	; 0x584
 8007ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ed8:	2200      	movs	r2, #0
 8007eda:	701a      	strb	r2, [r3, #0]
}
 8007edc:	4648      	mov	r0, r9
 8007ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8007ee2:	f04f 0902 	mov.w	r9, #2
 8007ee6:	e7f9      	b.n	8007edc <HAL_FLASHEx_Erase+0x146>

08007ee8 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007eec:	f7fe f834 	bl	8005f58 <HAL_GetTick>
 8007ef0:	4605      	mov	r5, r0

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	6913      	ldr	r3, [r2, #16]
 8007ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007efa:	6113      	str	r3, [r2, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007f04:	d00b      	beq.n	8007f1e <FMAC_Reset+0x36>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007f06:	f7fe f827 	bl	8005f58 <HAL_GetTick>
 8007f0a:	1b40      	subs	r0, r0, r5
 8007f0c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8007f10:	d9f4      	bls.n	8007efc <FMAC_Reset+0x14>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f18:	6363      	str	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	e001      	b.n	8007f22 <FMAC_Reset+0x3a>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007f1e:	2000      	movs	r0, #0
 8007f20:	6360      	str	r0, [r4, #52]	; 0x34
  return HAL_OK;
}
 8007f22:	bd38      	pop	{r3, r4, r5, pc}

08007f24 <HAL_FMAC_Init>:
  if (hfmac == NULL)
 8007f24:	b360      	cbz	r0, 8007f80 <HAL_FMAC_Init+0x5c>
{
 8007f26:	b510      	push	{r4, lr}
 8007f28:	4604      	mov	r4, r0
  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007f2a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007f2e:	b1d3      	cbz	r3, 8007f66 <HAL_FMAC_Init+0x42>
  hfmac->FilterParam = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	6063      	str	r3, [r4, #4]
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
 8007f34:	60e3      	str	r3, [r4, #12]
  hfmac->pInputSize = NULL;
 8007f36:	6163      	str	r3, [r4, #20]
  hfmac->InputCurrentSize = 0U;
 8007f38:	8223      	strh	r3, [r4, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 8007f40:	61a3      	str	r3, [r4, #24]
  hfmac->pOutputSize = NULL;
 8007f42:	6223      	str	r3, [r4, #32]
  hfmac->OutputCurrentSize = 0U;
 8007f44:	83a3      	strh	r3, [r4, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007f46:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff ffcc 	bl	8007ee8 <FMAC_Reset>
 8007f50:	2801      	cmp	r0, #1
 8007f52:	d00d      	beq.n	8007f70 <HAL_FMAC_Init+0x4c>
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007f54:	2000      	movs	r0, #0
 8007f56:	6360      	str	r0, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007f58:	2320      	movs	r3, #32
 8007f5a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8007f64:	bd10      	pop	{r4, pc}
    hfmac->Lock = HAL_UNLOCKED;
 8007f66:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    HAL_FMAC_MspInit(hfmac);
 8007f6a:	f7fd f9fe 	bl	800536a <HAL_FMAC_MspInit>
 8007f6e:	e7df      	b.n	8007f30 <HAL_FMAC_Init+0xc>
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007f70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f72:	f043 0310 	orr.w	r3, r3, #16
 8007f76:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007f78:	23a0      	movs	r3, #160	; 0xa0
 8007f7a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    status = HAL_ERROR;
 8007f7e:	e7ee      	b.n	8007f5e <HAL_FMAC_Init+0x3a>
    return HAL_ERROR;
 8007f80:	2001      	movs	r0, #1
}
 8007f82:	4770      	bx	lr

08007f84 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007f84:	680b      	ldr	r3, [r1, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 8107 	beq.w	800819a <HAL_GPIO_Init+0x216>
{
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007f92:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 8007f96:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007f98:	2601      	movs	r6, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f9a:	2503      	movs	r5, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f9c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8007fa0:	f2c4 0402 	movt	r4, #16386	; 0x4002
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fa4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8007fa8:	f2c4 0e01 	movt	lr, #16385	; 0x4001
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fac:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8007fb0:	f6c4 0800 	movt	r8, #18432	; 0x4800
 8007fb4:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8007fb8:	f6c4 0700 	movt	r7, #18432	; 0x4800
 8007fbc:	9702      	str	r7, [sp, #8]
 8007fbe:	f44f 6740 	mov.w	r7, #3072	; 0xc00
 8007fc2:	f6c4 0700 	movt	r7, #18432	; 0x4800
 8007fc6:	9703      	str	r7, [sp, #12]
 8007fc8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8007fcc:	f6c4 0700 	movt	r7, #18432	; 0x4800
 8007fd0:	9704      	str	r7, [sp, #16]
 8007fd2:	f44f 57a0 	mov.w	r7, #5120	; 0x1400
 8007fd6:	f6c4 0700 	movt	r7, #18432	; 0x4800
 8007fda:	9705      	str	r7, [sp, #20]
 8007fdc:	9401      	str	r4, [sp, #4]
 8007fde:	46c1      	mov	r9, r8
 8007fe0:	e053      	b.n	800808a <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 8007fe2:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007fe4:	fa05 fa0c 	lsl.w	sl, r5, ip
 8007fe8:	ea24 0a0a 	bic.w	sl, r4, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fec:	68cc      	ldr	r4, [r1, #12]
 8007fee:	fa04 f40c 	lsl.w	r4, r4, ip
 8007ff2:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 8007ff6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8007ff8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ffa:	ea24 0808 	bic.w	r8, r4, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ffe:	684c      	ldr	r4, [r1, #4]
 8008000:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8008004:	4094      	lsls	r4, r2
 8008006:	ea44 0408 	orr.w	r4, r4, r8
        GPIOx->OTYPER = temp;
 800800a:	6044      	str	r4, [r0, #4]
 800800c:	e048      	b.n	80080a0 <HAL_GPIO_Init+0x11c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800800e:	f04f 0b00 	mov.w	fp, #0
 8008012:	fa0b fb0a 	lsl.w	fp, fp, sl
 8008016:	ea4b 0b08 	orr.w	fp, fp, r8
        SYSCFG->EXTICR[position >> 2U] = temp;
 800801a:	f8c4 b008 	str.w	fp, [r4, #8]
        temp = EXTI->RTSR1;
 800801e:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 8008022:	ea6f 0803 	mvn.w	r8, r3
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008026:	684f      	ldr	r7, [r1, #4]
 8008028:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800802c:	bf0c      	ite	eq
 800802e:	ea08 0404 	andeq.w	r4, r8, r4
        {
          temp |= iocurrent;
 8008032:	431c      	orrne	r4, r3
        }
        EXTI->RTSR1 = temp;
 8008034:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8008038:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800803c:	684f      	ldr	r7, [r1, #4]
 800803e:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8008042:	bf0c      	ite	eq
 8008044:	ea08 0404 	andeq.w	r4, r8, r4
        {
          temp |= iocurrent;
 8008048:	431c      	orrne	r4, r3
        }
        EXTI->FTSR1 = temp;
 800804a:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 800804e:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008052:	684f      	ldr	r7, [r1, #4]
 8008054:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~(iocurrent);
 8008058:	bf0c      	ite	eq
 800805a:	ea08 0404 	andeq.w	r4, r8, r4
        {
          temp |= iocurrent;
 800805e:	431c      	orrne	r4, r3
        }
        EXTI->EMR1 = temp;
 8008060:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008064:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008068:	684f      	ldr	r7, [r1, #4]
 800806a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~(iocurrent);
 800806e:	bf0c      	ite	eq
 8008070:	ea08 0304 	andeq.w	r3, r8, r4
        {
          temp |= iocurrent;
 8008074:	4323      	orrne	r3, r4
        }
        EXTI->IMR1 = temp;
 8008076:	f8ce 3000 	str.w	r3, [lr]
      }
    }

    position++;
 800807a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800807c:	680b      	ldr	r3, [r1, #0]
 800807e:	f10c 0c02 	add.w	ip, ip, #2
 8008082:	fa33 f402 	lsrs.w	r4, r3, r2
 8008086:	f000 8085 	beq.w	8008194 <HAL_GPIO_Init+0x210>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800808a:	fa06 f802 	lsl.w	r8, r6, r2
    if (iocurrent != 0x00u)
 800808e:	ea18 0303 	ands.w	r3, r8, r3
 8008092:	d0f2      	beq.n	800807a <HAL_GPIO_Init+0xf6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008094:	684c      	ldr	r4, [r1, #4]
 8008096:	f004 0403 	and.w	r4, r4, #3
 800809a:	3c01      	subs	r4, #1
 800809c:	2c01      	cmp	r4, #1
 800809e:	d9a0      	bls.n	8007fe2 <HAL_GPIO_Init+0x5e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080a0:	684c      	ldr	r4, [r1, #4]
 80080a2:	f004 0403 	and.w	r4, r4, #3
 80080a6:	2c03      	cmp	r4, #3
 80080a8:	d026      	beq.n	80080f8 <HAL_GPIO_Init+0x174>
        temp = GPIOx->PUPDR;
 80080aa:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080ac:	fa05 f80c 	lsl.w	r8, r5, ip
 80080b0:	ea24 0808 	bic.w	r8, r4, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080b4:	688c      	ldr	r4, [r1, #8]
 80080b6:	fa04 f40c 	lsl.w	r4, r4, ip
 80080ba:	ea44 0408 	orr.w	r4, r4, r8
        GPIOx->PUPDR = temp;
 80080be:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080c0:	684c      	ldr	r4, [r1, #4]
 80080c2:	f004 0403 	and.w	r4, r4, #3
 80080c6:	2c02      	cmp	r4, #2
 80080c8:	d116      	bne.n	80080f8 <HAL_GPIO_Init+0x174>
        temp = GPIOx->AFR[position >> 3U];
 80080ca:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
 80080ce:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80080d2:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80080d6:	f002 0b07 	and.w	fp, r2, #7
 80080da:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80080de:	f04f 080f 	mov.w	r8, #15
 80080e2:	fa08 f80b 	lsl.w	r8, r8, fp
 80080e6:	ea24 0808 	bic.w	r8, r4, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80080ea:	690c      	ldr	r4, [r1, #16]
 80080ec:	fa04 f40b 	lsl.w	r4, r4, fp
 80080f0:	ea44 0408 	orr.w	r4, r4, r8
        GPIOx->AFR[position >> 3U] = temp;
 80080f4:	f8ca 4020 	str.w	r4, [sl, #32]
      temp = GPIOx->MODER;
 80080f8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80080fa:	fa05 f80c 	lsl.w	r8, r5, ip
 80080fe:	ea24 0808 	bic.w	r8, r4, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008102:	684c      	ldr	r4, [r1, #4]
 8008104:	f004 0403 	and.w	r4, r4, #3
 8008108:	fa04 f40c 	lsl.w	r4, r4, ip
 800810c:	ea44 0408 	orr.w	r4, r4, r8
      GPIOx->MODER = temp;
 8008110:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008112:	684c      	ldr	r4, [r1, #4]
 8008114:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8008118:	d0af      	beq.n	800807a <HAL_GPIO_Init+0xf6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800811a:	9f01      	ldr	r7, [sp, #4]
 800811c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800811e:	f044 0401 	orr.w	r4, r4, #1
 8008122:	663c      	str	r4, [r7, #96]	; 0x60
 8008124:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8008126:	f004 0401 	and.w	r4, r4, #1
 800812a:	9407      	str	r4, [sp, #28]
 800812c:	9c07      	ldr	r4, [sp, #28]
        temp = SYSCFG->EXTICR[position >> 2U];
 800812e:	f022 0403 	bic.w	r4, r2, #3
 8008132:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8008136:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800813a:	f8d4 b008 	ldr.w	fp, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800813e:	f002 0a03 	and.w	sl, r2, #3
 8008142:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8008146:	f04f 080f 	mov.w	r8, #15
 800814a:	fa08 f80a 	lsl.w	r8, r8, sl
 800814e:	ea2b 0808 	bic.w	r8, fp, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008152:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8008156:	f43f af5a 	beq.w	800800e <HAL_GPIO_Init+0x8a>
 800815a:	4548      	cmp	r0, r9
 800815c:	d010      	beq.n	8008180 <HAL_GPIO_Init+0x1fc>
 800815e:	9f02      	ldr	r7, [sp, #8]
 8008160:	42b8      	cmp	r0, r7
 8008162:	d00f      	beq.n	8008184 <HAL_GPIO_Init+0x200>
 8008164:	9f03      	ldr	r7, [sp, #12]
 8008166:	42b8      	cmp	r0, r7
 8008168:	d00f      	beq.n	800818a <HAL_GPIO_Init+0x206>
 800816a:	9f04      	ldr	r7, [sp, #16]
 800816c:	42b8      	cmp	r0, r7
 800816e:	d00e      	beq.n	800818e <HAL_GPIO_Init+0x20a>
 8008170:	9f05      	ldr	r7, [sp, #20]
 8008172:	42b8      	cmp	r0, r7
 8008174:	bf0c      	ite	eq
 8008176:	f04f 0b05 	moveq.w	fp, #5
 800817a:	f04f 0b06 	movne.w	fp, #6
 800817e:	e748      	b.n	8008012 <HAL_GPIO_Init+0x8e>
 8008180:	46b3      	mov	fp, r6
 8008182:	e746      	b.n	8008012 <HAL_GPIO_Init+0x8e>
 8008184:	f04f 0b02 	mov.w	fp, #2
 8008188:	e743      	b.n	8008012 <HAL_GPIO_Init+0x8e>
 800818a:	46ab      	mov	fp, r5
 800818c:	e741      	b.n	8008012 <HAL_GPIO_Init+0x8e>
 800818e:	f04f 0b04 	mov.w	fp, #4
 8008192:	e73e      	b.n	8008012 <HAL_GPIO_Init+0x8e>
  }
}
 8008194:	b009      	add	sp, #36	; 0x24
 8008196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819a:	4770      	bx	lr

0800819c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800819c:	b10a      	cbz	r2, 80081a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800819e:	6181      	str	r1, [r0, #24]
 80081a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80081a2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80081a4:	4770      	bx	lr

080081a6 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d14f      	bne.n	800824a <HAL_PWREx_ControlVoltageScaling+0xa4>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80081aa:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80081ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081bc:	d00b      	beq.n	80081d6 <HAL_PWREx_ControlVoltageScaling+0x30>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081be:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80081c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80081c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80081ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80081d2:	2000      	movs	r0, #0
 80081d4:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081d6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80081da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80081de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80081e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80081ea:	6813      	ldr	r3, [r2, #0]
 80081ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80081f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081f4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80081f6:	f240 5378 	movw	r3, #1400	; 0x578
 80081fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2132      	movs	r1, #50	; 0x32
 8008202:	fb01 f303 	mul.w	r3, r1, r3
 8008206:	f64d 6183 	movw	r1, #56963	; 0xde83
 800820a:	f2c4 311b 	movt	r1, #17179	; 0x431b
 800820e:	fba1 1303 	umull	r1, r3, r1, r3
 8008212:	0c9b      	lsrs	r3, r3, #18
 8008214:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008216:	6952      	ldr	r2, [r2, #20]
 8008218:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800821c:	d00a      	beq.n	8008234 <HAL_PWREx_ControlVoltageScaling+0x8e>
 800821e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8008222:	f2c4 0100 	movt	r1, #16384	; 0x4000
        wait_loop_index--;
 8008226:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008228:	694a      	ldr	r2, [r1, #20]
 800822a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800822e:	d001      	beq.n	8008234 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f8      	bne.n	8008226 <HAL_PWREx_ControlVoltageScaling+0x80>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008234:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008238:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800823c:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 800823e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008242:	bf0c      	ite	eq
 8008244:	2000      	moveq	r0, #0
 8008246:	2003      	movne	r0, #3
 8008248:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800824a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800824e:	d00b      	beq.n	8008268 <HAL_PWREx_ControlVoltageScaling+0xc2>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008250:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8008254:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8008258:	6813      	ldr	r3, [r2, #0]
 800825a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800825e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008262:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008264:	2000      	movs	r0, #0
}
 8008266:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008268:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800826c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827a:	d00b      	beq.n	8008294 <HAL_PWREx_ControlVoltageScaling+0xee>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800827c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008280:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008284:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800828c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  return HAL_OK;
 8008290:	2000      	movs	r0, #0
 8008292:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008294:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8008298:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800829c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80082a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80082a8:	6813      	ldr	r3, [r2, #0]
 80082aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082b2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80082b4:	f240 5378 	movw	r3, #1400	; 0x578
 80082b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2132      	movs	r1, #50	; 0x32
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	f64d 6183 	movw	r1, #56963	; 0xde83
 80082c8:	f2c4 311b 	movt	r1, #17179	; 0x431b
 80082cc:	fba1 1303 	umull	r1, r3, r1, r3
 80082d0:	0c9b      	lsrs	r3, r3, #18
 80082d2:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082d4:	6952      	ldr	r2, [r2, #20]
 80082d6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80082da:	d00a      	beq.n	80082f2 <HAL_PWREx_ControlVoltageScaling+0x14c>
 80082dc:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80082e0:	f2c4 0100 	movt	r1, #16384	; 0x4000
        wait_loop_index--;
 80082e4:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082e6:	694a      	ldr	r2, [r1, #20]
 80082e8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80082ec:	d001      	beq.n	80082f2 <HAL_PWREx_ControlVoltageScaling+0x14c>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f8      	bne.n	80082e4 <HAL_PWREx_ControlVoltageScaling+0x13e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80082f2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80082f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80082fa:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 80082fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008300:	bf0c      	ite	eq
 8008302:	2000      	moveq	r0, #0
 8008304:	2003      	movne	r0, #3
 8008306:	4770      	bx	lr

08008308 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008308:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800830c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008316:	609a      	str	r2, [r3, #8]
}
 8008318:	4770      	bx	lr

0800831a <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800831a:	2800      	cmp	r0, #0
 800831c:	f000 82d3 	beq.w	80088c6 <HAL_RCC_OscConfig+0x5ac>
{
 8008320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008328:	6803      	ldr	r3, [r0, #0]
 800832a:	f013 0f01 	tst.w	r3, #1
 800832e:	d043      	beq.n	80083b8 <HAL_RCC_OscConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008334:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008338:	6893      	ldr	r3, [r2, #8]
 800833a:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800833e:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008340:	2b0c      	cmp	r3, #12
 8008342:	d029      	beq.n	8008398 <HAL_RCC_OscConfig+0x7e>
 8008344:	2b08      	cmp	r3, #8
 8008346:	d02b      	beq.n	80083a0 <HAL_RCC_OscConfig+0x86>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008348:	6863      	ldr	r3, [r4, #4]
 800834a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800834e:	d061      	beq.n	8008414 <HAL_RCC_OscConfig+0xfa>
 8008350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008354:	d067      	beq.n	8008426 <HAL_RCC_OscConfig+0x10c>
 8008356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800835a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800836c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800836e:	6863      	ldr	r3, [r4, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d065      	beq.n	8008440 <HAL_RCC_OscConfig+0x126>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008374:	f7fd fdf0 	bl	8005f58 <HAL_GetTick>
 8008378:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800837a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800837e:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8008382:	6833      	ldr	r3, [r6, #0]
 8008384:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008388:	d116      	bne.n	80083b8 <HAL_RCC_OscConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800838a:	f7fd fde5 	bl	8005f58 <HAL_GetTick>
 800838e:	1b40      	subs	r0, r0, r5
 8008390:	2864      	cmp	r0, #100	; 0x64
 8008392:	d9f6      	bls.n	8008382 <HAL_RCC_OscConfig+0x68>
          {
            return HAL_TIMEOUT;
 8008394:	2003      	movs	r0, #3
 8008396:	e29f      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008398:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800839c:	2a03      	cmp	r2, #3
 800839e:	d1d3      	bne.n	8008348 <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80083ae:	d003      	beq.n	80083b8 <HAL_RCC_OscConfig+0x9e>
 80083b0:	6863      	ldr	r3, [r4, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8289 	beq.w	80088ca <HAL_RCC_OscConfig+0x5b0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	f013 0f02 	tst.w	r3, #2
 80083be:	d076      	beq.n	80084ae <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80083c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80083c8:	6893      	ldr	r3, [r2, #8]
 80083ca:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083ce:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80083d0:	2b0c      	cmp	r3, #12
 80083d2:	d047      	beq.n	8008464 <HAL_RCC_OscConfig+0x14a>
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d049      	beq.n	800846c <HAL_RCC_OscConfig+0x152>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083d8:	68e3      	ldr	r3, [r4, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 8097 	beq.w	800850e <HAL_RCC_OscConfig+0x1f4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f0:	f7fd fdb2 	bl	8005f58 <HAL_GetTick>
 80083f4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083f6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80083fa:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80083fe:	6833      	ldr	r3, [r6, #0]
 8008400:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008404:	d177      	bne.n	80084f6 <HAL_RCC_OscConfig+0x1dc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008406:	f7fd fda7 	bl	8005f58 <HAL_GetTick>
 800840a:	1b40      	subs	r0, r0, r5
 800840c:	2802      	cmp	r0, #2
 800840e:	d9f6      	bls.n	80083fe <HAL_RCC_OscConfig+0xe4>
          {
            return HAL_TIMEOUT;
 8008410:	2003      	movs	r0, #3
 8008412:	e261      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008418:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	e7a3      	b.n	800836e <HAL_RCC_OscConfig+0x54>
 8008426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800842a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	e796      	b.n	800836e <HAL_RCC_OscConfig+0x54>
        tickstart = HAL_GetTick();
 8008440:	f7fd fd8a 	bl	8005f58 <HAL_GetTick>
 8008444:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008446:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800844a:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800844e:	6833      	ldr	r3, [r6, #0]
 8008450:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008454:	d0b0      	beq.n	80083b8 <HAL_RCC_OscConfig+0x9e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008456:	f7fd fd7f 	bl	8005f58 <HAL_GetTick>
 800845a:	1b40      	subs	r0, r0, r5
 800845c:	2864      	cmp	r0, #100	; 0x64
 800845e:	d9f6      	bls.n	800844e <HAL_RCC_OscConfig+0x134>
            return HAL_TIMEOUT;
 8008460:	2003      	movs	r0, #3
 8008462:	e239      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008464:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008468:	2a02      	cmp	r2, #2
 800846a:	d1b5      	bne.n	80083d8 <HAL_RCC_OscConfig+0xbe>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800846c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008470:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800847a:	d003      	beq.n	8008484 <HAL_RCC_OscConfig+0x16a>
 800847c:	68e3      	ldr	r3, [r4, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 8225 	beq.w	80088ce <HAL_RCC_OscConfig+0x5b4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008488:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800848c:	6853      	ldr	r3, [r2, #4]
 800848e:	6921      	ldr	r1, [r4, #16]
 8008490:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008494:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008498:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800849a:	f240 5380 	movw	r3, #1408	; 0x580
 800849e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	f7fd fd11 	bl	8005eca <HAL_InitTick>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	f040 8212 	bne.w	80088d2 <HAL_RCC_OscConfig+0x5b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f013 0f08 	tst.w	r3, #8
 80084b4:	d062      	beq.n	800857c <HAL_RCC_OscConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084b6:	6963      	ldr	r3, [r4, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d042      	beq.n	8008542 <HAL_RCC_OscConfig+0x228>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084c4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80084c8:	f042 0201 	orr.w	r2, r2, #1
 80084cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d0:	f7fd fd42 	bl	8005f58 <HAL_GetTick>
 80084d4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084d6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80084da:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80084de:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80084e2:	f013 0f02 	tst.w	r3, #2
 80084e6:	d149      	bne.n	800857c <HAL_RCC_OscConfig+0x262>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084e8:	f7fd fd36 	bl	8005f58 <HAL_GetTick>
 80084ec:	1b40      	subs	r0, r0, r5
 80084ee:	2802      	cmp	r0, #2
 80084f0:	d9f5      	bls.n	80084de <HAL_RCC_OscConfig+0x1c4>
        {
          return HAL_TIMEOUT;
 80084f2:	2003      	movs	r0, #3
 80084f4:	e1f0      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80084fe:	6853      	ldr	r3, [r2, #4]
 8008500:	6921      	ldr	r1, [r4, #16]
 8008502:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008506:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800850a:	6053      	str	r3, [r2, #4]
 800850c:	e7cf      	b.n	80084ae <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_DISABLE();
 800850e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008512:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800851c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800851e:	f7fd fd1b 	bl	8005f58 <HAL_GetTick>
 8008522:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008524:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8008528:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800852c:	6833      	ldr	r3, [r6, #0]
 800852e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008532:	d0bc      	beq.n	80084ae <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008534:	f7fd fd10 	bl	8005f58 <HAL_GetTick>
 8008538:	1b40      	subs	r0, r0, r5
 800853a:	2802      	cmp	r0, #2
 800853c:	d9f6      	bls.n	800852c <HAL_RCC_OscConfig+0x212>
            return HAL_TIMEOUT;
 800853e:	2003      	movs	r0, #3
 8008540:	e1ca      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008546:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800854a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800854e:	f022 0201 	bic.w	r2, r2, #1
 8008552:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008556:	f7fd fcff 	bl	8005f58 <HAL_GetTick>
 800855a:	4605      	mov	r5, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800855c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8008560:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8008564:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8008568:	f013 0f02 	tst.w	r3, #2
 800856c:	d006      	beq.n	800857c <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800856e:	f7fd fcf3 	bl	8005f58 <HAL_GetTick>
 8008572:	1b40      	subs	r0, r0, r5
 8008574:	2802      	cmp	r0, #2
 8008576:	d9f5      	bls.n	8008564 <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 8008578:	2003      	movs	r0, #3
 800857a:	e1ad      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	f013 0f04 	tst.w	r3, #4
 8008582:	f000 8099 	beq.w	80086b8 <HAL_RCC_OscConfig+0x39e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800858a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800858e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008590:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008594:	d142      	bne.n	800861c <HAL_RCC_OscConfig+0x302>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800859a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800859e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80085a4:	659a      	str	r2, [r3, #88]	; 0x58
 80085a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80085b0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085b2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80085b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80085c0:	d02e      	beq.n	8008620 <HAL_RCC_OscConfig+0x306>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085c2:	68a3      	ldr	r3, [r4, #8]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d045      	beq.n	8008654 <HAL_RCC_OscConfig+0x33a>
 80085c8:	2b05      	cmp	r3, #5
 80085ca:	d04e      	beq.n	800866a <HAL_RCC_OscConfig+0x350>
 80085cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80085d8:	f022 0201 	bic.w	r2, r2, #1
 80085dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80085e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80085e4:	f022 0204 	bic.w	r2, r2, #4
 80085e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085ec:	68a3      	ldr	r3, [r4, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d04c      	beq.n	800868c <HAL_RCC_OscConfig+0x372>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f2:	f7fd fcb1 	bl	8005f58 <HAL_GetTick>
 80085f6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085f8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 80085fc:	f2c4 0702 	movt	r7, #16386	; 0x4002
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008600:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008608:	f013 0f02 	tst.w	r3, #2
 800860c:	d153      	bne.n	80086b6 <HAL_RCC_OscConfig+0x39c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800860e:	f7fd fca3 	bl	8005f58 <HAL_GetTick>
 8008612:	1b80      	subs	r0, r0, r6
 8008614:	4540      	cmp	r0, r8
 8008616:	d9f5      	bls.n	8008604 <HAL_RCC_OscConfig+0x2ea>
        {
          return HAL_TIMEOUT;
 8008618:	2003      	movs	r0, #3
 800861a:	e15d      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
    FlagStatus       pwrclkchanged = RESET;
 800861c:	2500      	movs	r5, #0
 800861e:	e7c8      	b.n	80085b2 <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008620:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008624:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800862e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008630:	f7fd fc92 	bl	8005f58 <HAL_GetTick>
 8008634:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008636:	f44f 47e0 	mov.w	r7, #28672	; 0x7000
 800863a:	f2c4 0700 	movt	r7, #16384	; 0x4000
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008644:	d1bd      	bne.n	80085c2 <HAL_RCC_OscConfig+0x2a8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008646:	f7fd fc87 	bl	8005f58 <HAL_GetTick>
 800864a:	1b80      	subs	r0, r0, r6
 800864c:	2802      	cmp	r0, #2
 800864e:	d9f6      	bls.n	800863e <HAL_RCC_OscConfig+0x324>
          return HAL_TIMEOUT;
 8008650:	2003      	movs	r0, #3
 8008652:	e141      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008658:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800865c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008660:	f042 0201 	orr.w	r2, r2, #1
 8008664:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008668:	e7c0      	b.n	80085ec <HAL_RCC_OscConfig+0x2d2>
 800866a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800866e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008672:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008676:	f042 0204 	orr.w	r2, r2, #4
 800867a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800867e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800868a:	e7af      	b.n	80085ec <HAL_RCC_OscConfig+0x2d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800868c:	f7fd fc64 	bl	8005f58 <HAL_GetTick>
 8008690:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008692:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8008696:	f2c4 0702 	movt	r7, #16386	; 0x4002
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800869a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800869e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086a2:	f013 0f02 	tst.w	r3, #2
 80086a6:	d006      	beq.n	80086b6 <HAL_RCC_OscConfig+0x39c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086a8:	f7fd fc56 	bl	8005f58 <HAL_GetTick>
 80086ac:	1b80      	subs	r0, r0, r6
 80086ae:	4540      	cmp	r0, r8
 80086b0:	d9f5      	bls.n	800869e <HAL_RCC_OscConfig+0x384>
        {
          return HAL_TIMEOUT;
 80086b2:	2003      	movs	r0, #3
 80086b4:	e110      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086b6:	bb15      	cbnz	r5, 80086fe <HAL_RCC_OscConfig+0x3e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	f013 0f20 	tst.w	r3, #32
 80086be:	d044      	beq.n	800874a <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80086c0:	69a3      	ldr	r3, [r4, #24]
 80086c2:	b32b      	cbz	r3, 8008710 <HAL_RCC_OscConfig+0x3f6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80086cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80086d0:	f042 0201 	orr.w	r2, r2, #1
 80086d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d8:	f7fd fc3e 	bl	8005f58 <HAL_GetTick>
 80086dc:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086de:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80086e2:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80086e6:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80086ea:	f013 0f02 	tst.w	r3, #2
 80086ee:	d12c      	bne.n	800874a <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086f0:	f7fd fc32 	bl	8005f58 <HAL_GetTick>
 80086f4:	1b40      	subs	r0, r0, r5
 80086f6:	2802      	cmp	r0, #2
 80086f8:	d9f5      	bls.n	80086e6 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80086fa:	2003      	movs	r0, #3
 80086fc:	e0ec      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
      __HAL_RCC_PWR_CLK_DISABLE();
 80086fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008702:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008706:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008708:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800870c:	659a      	str	r2, [r3, #88]	; 0x58
 800870e:	e7d3      	b.n	80086b8 <HAL_RCC_OscConfig+0x39e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008714:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008718:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800871c:	f022 0201 	bic.w	r2, r2, #1
 8008720:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008724:	f7fd fc18 	bl	8005f58 <HAL_GetTick>
 8008728:	4605      	mov	r5, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800872a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800872e:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8008732:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8008736:	f013 0f02 	tst.w	r3, #2
 800873a:	d006      	beq.n	800874a <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800873c:	f7fd fc0c 	bl	8005f58 <HAL_GetTick>
 8008740:	1b40      	subs	r0, r0, r5
 8008742:	2802      	cmp	r0, #2
 8008744:	d9f5      	bls.n	8008732 <HAL_RCC_OscConfig+0x418>
        {
          return HAL_TIMEOUT;
 8008746:	2003      	movs	r0, #3
 8008748:	e0c6      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800874a:	69e3      	ldr	r3, [r4, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80c2 	beq.w	80088d6 <HAL_RCC_OscConfig+0x5bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008756:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800875a:	6892      	ldr	r2, [r2, #8]
 800875c:	f002 020c 	and.w	r2, r2, #12
 8008760:	2a0c      	cmp	r2, #12
 8008762:	d07e      	beq.n	8008862 <HAL_RCC_OscConfig+0x548>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008764:	2b02      	cmp	r3, #2
 8008766:	d023      	beq.n	80087b0 <HAL_RCC_OscConfig+0x496>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800876c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008776:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	f022 0203 	bic.w	r2, r2, #3
 800877e:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8008786:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800878a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878c:	f7fd fbe4 	bl	8005f58 <HAL_GetTick>
 8008790:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008792:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008796:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80087a0:	d05d      	beq.n	800885e <HAL_RCC_OscConfig+0x544>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a2:	f7fd fbd9 	bl	8005f58 <HAL_GetTick>
 80087a6:	1b00      	subs	r0, r0, r4
 80087a8:	2802      	cmp	r0, #2
 80087aa:	d9f6      	bls.n	800879a <HAL_RCC_OscConfig+0x480>
          {
            return HAL_TIMEOUT;
 80087ac:	2003      	movs	r0, #3
 80087ae:	e093      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_PLL_DISABLE();
 80087b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80087be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80087c0:	f7fd fbca 	bl	8005f58 <HAL_GetTick>
 80087c4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087c6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80087ca:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80087ce:	6833      	ldr	r3, [r6, #0]
 80087d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80087d4:	d006      	beq.n	80087e4 <HAL_RCC_OscConfig+0x4ca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d6:	f7fd fbbf 	bl	8005f58 <HAL_GetTick>
 80087da:	1b40      	subs	r0, r0, r5
 80087dc:	2802      	cmp	r0, #2
 80087de:	d9f6      	bls.n	80087ce <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 80087e0:	2003      	movs	r0, #3
 80087e2:	e079      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80087e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80087ec:	68d1      	ldr	r1, [r2, #12]
 80087ee:	f248 030c 	movw	r3, #32780	; 0x800c
 80087f2:	f2c0 139f 	movt	r3, #415	; 0x19f
 80087f6:	400b      	ands	r3, r1
 80087f8:	6a21      	ldr	r1, [r4, #32]
 80087fa:	430b      	orrs	r3, r1
 80087fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80087fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008802:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008804:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8008808:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800880a:	3901      	subs	r1, #1
 800880c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8008810:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008812:	0849      	lsrs	r1, r1, #1
 8008814:	3901      	subs	r1, #1
 8008816:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800881a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800881c:	0849      	lsrs	r1, r1, #1
 800881e:	3901      	subs	r1, #1
 8008820:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8008824:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8008826:	6813      	ldr	r3, [r2, #0]
 8008828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800882c:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800882e:	68d3      	ldr	r3, [r2, #12]
 8008830:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008834:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8008836:	f7fd fb8f 	bl	8005f58 <HAL_GetTick>
 800883a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800883c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008840:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800884a:	d106      	bne.n	800885a <HAL_RCC_OscConfig+0x540>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800884c:	f7fd fb84 	bl	8005f58 <HAL_GetTick>
 8008850:	1b00      	subs	r0, r0, r4
 8008852:	2802      	cmp	r0, #2
 8008854:	d9f6      	bls.n	8008844 <HAL_RCC_OscConfig+0x52a>
            return HAL_TIMEOUT;
 8008856:	2003      	movs	r0, #3
 8008858:	e03e      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
      }
    }
  }
  }

  return HAL_OK;
 800885a:	2000      	movs	r0, #0
 800885c:	e03c      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
 800885e:	2000      	movs	r0, #0
 8008860:	e03a      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008862:	2b01      	cmp	r3, #1
 8008864:	d03b      	beq.n	80088de <HAL_RCC_OscConfig+0x5c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8008866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800886a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800886e:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008870:	f003 0103 	and.w	r1, r3, #3
 8008874:	6a22      	ldr	r2, [r4, #32]
 8008876:	4291      	cmp	r1, r2
 8008878:	d133      	bne.n	80088e2 <HAL_RCC_OscConfig+0x5c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800887a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800887e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008880:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008882:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8008886:	d12e      	bne.n	80088e6 <HAL_RCC_OscConfig+0x5cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008888:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800888c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800888e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008892:	d12a      	bne.n	80088ea <HAL_RCC_OscConfig+0x5d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008894:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008898:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800889a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800889e:	d126      	bne.n	80088ee <HAL_RCC_OscConfig+0x5d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088a0:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80088a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80088a6:	0852      	lsrs	r2, r2, #1
 80088a8:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80088aa:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80088ae:	d120      	bne.n	80088f2 <HAL_RCC_OscConfig+0x5d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80088b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80088b2:	0852      	lsrs	r2, r2, #1
 80088b4:	3a01      	subs	r2, #1
 80088b6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088ba:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80088be:	bf14      	ite	ne
 80088c0:	2001      	movne	r0, #1
 80088c2:	2000      	moveq	r0, #0
 80088c4:	e008      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
 80088c6:	2001      	movs	r0, #1
}
 80088c8:	4770      	bx	lr
        return HAL_ERROR;
 80088ca:	2001      	movs	r0, #1
 80088cc:	e004      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
        return HAL_ERROR;
 80088ce:	2001      	movs	r0, #1
 80088d0:	e002      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
          return HAL_ERROR;
 80088d2:	2001      	movs	r0, #1
 80088d4:	e000      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
  return HAL_OK;
 80088d6:	2000      	movs	r0, #0
}
 80088d8:	b002      	add	sp, #8
 80088da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80088de:	2001      	movs	r0, #1
 80088e0:	e7fa      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
        return HAL_ERROR;
 80088e2:	2001      	movs	r0, #1
 80088e4:	e7f8      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
 80088e6:	2001      	movs	r0, #1
 80088e8:	e7f6      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
 80088ea:	2001      	movs	r0, #1
 80088ec:	e7f4      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
 80088ee:	2001      	movs	r0, #1
 80088f0:	e7f2      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>
 80088f2:	2001      	movs	r0, #1
 80088f4:	e7f0      	b.n	80088d8 <HAL_RCC_OscConfig+0x5be>

080088f6 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80088f6:	b570      	push	{r4, r5, r6, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	4604      	mov	r4, r0
 80088fc:	460d      	mov	r5, r1
 80088fe:	4616      	mov	r6, r2

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8008900:	2302      	movs	r3, #2
 8008902:	9302      	str	r3, [sp, #8]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008904:	2303      	movs	r3, #3
 8008906:	9304      	str	r3, [sp, #16]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8008908:	2300      	movs	r3, #0
 800890a:	9303      	str	r3, [sp, #12]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800890c:	f3c0 4003 	ubfx	r0, r0, #16, #4

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8008910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008914:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008918:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800891a:	2301      	movs	r3, #1
 800891c:	4083      	lsls	r3, r0
 800891e:	430b      	orrs	r3, r1
 8008920:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8008922:	b2a3      	uxth	r3, r4
 8008924:	9301      	str	r3, [sp, #4]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008926:	f3c4 5307 	ubfx	r3, r4, #20, #8
 800892a:	9305      	str	r3, [sp, #20]
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800892c:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8008930:	a901      	add	r1, sp, #4
 8008932:	0280      	lsls	r0, r0, #10
 8008934:	f7ff fb26 	bl	8007f84 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008938:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800893c:	d10a      	bne.n	8008954 <HAL_RCC_MCOConfig+0x5e>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800893e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008942:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008946:	6899      	ldr	r1, [r3, #8]
 8008948:	f021 41fe 	bic.w	r1, r1, #2130706432	; 0x7f000000
 800894c:	ea41 0206 	orr.w	r2, r1, r6
 8008950:	432a      	orrs	r2, r5
 8008952:	609a      	str	r2, [r3, #8]
  }
}
 8008954:	b006      	add	sp, #24
 8008956:	bd70      	pop	{r4, r5, r6, pc}

08008958 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800895c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 030c 	and.w	r3, r3, #12
 8008966:	2b04      	cmp	r3, #4
 8008968:	d037      	beq.n	80089da <HAL_RCC_GetSysClockFreq+0x82>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800896a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800896e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 030c 	and.w	r3, r3, #12
 8008978:	2b08      	cmp	r3, #8
 800897a:	d033      	beq.n	80089e4 <HAL_RCC_GetSysClockFreq+0x8c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800897c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008980:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 030c 	and.w	r3, r3, #12
 800898a:	2b0c      	cmp	r3, #12
 800898c:	d001      	beq.n	8008992 <HAL_RCC_GetSysClockFreq+0x3a>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800898e:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8008990:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008996:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800899a:	68da      	ldr	r2, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80089a2:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80089a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80089ac:	68d0      	ldr	r0, [r2, #12]
 80089ae:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80089b2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80089b6:	f2c0 02f4 	movt	r2, #244	; 0xf4
 80089ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80089be:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80089d0:	3301      	adds	r3, #1
 80089d2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80089d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80089d8:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80089da:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80089de:	f2c0 00f4 	movt	r0, #244	; 0xf4
 80089e2:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80089e4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80089e8:	f2c0 00f4 	movt	r0, #244	; 0xf4
 80089ec:	4770      	bx	lr

080089ee <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f000 80f5 	beq.w	8008bde <HAL_RCC_ClockConfig+0x1f0>
{
 80089f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f8:	460c      	mov	r4, r1
 80089fa:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	428b      	cmp	r3, r1
 8008a0c:	d20e      	bcs.n	8008a2c <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a16:	6813      	ldr	r3, [r2, #0]
 8008a18:	f023 030f 	bic.w	r3, r3, #15
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a20:	6813      	ldr	r3, [r2, #0]
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	428b      	cmp	r3, r1
 8008a28:	f040 80db 	bne.w	8008be2 <HAL_RCC_ClockConfig+0x1f4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	f013 0f01 	tst.w	r3, #1
 8008a32:	f000 80da 	beq.w	8008bea <HAL_RCC_ClockConfig+0x1fc>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a36:	686a      	ldr	r2, [r5, #4]
 8008a38:	2a03      	cmp	r2, #3
 8008a3a:	d041      	beq.n	8008ac0 <HAL_RCC_ClockConfig+0xd2>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a3c:	2a02      	cmp	r2, #2
 8008a3e:	f000 808c 	beq.w	8008b5a <HAL_RCC_ClockConfig+0x16c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008a50:	f000 80c9 	beq.w	8008be6 <HAL_RCC_ClockConfig+0x1f8>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008a54:	f7ff ff80 	bl	8008958 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8008a58:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8008a5c:	f2c0 43c4 	movt	r3, #1220	; 0x4c4
 8008a60:	4298      	cmp	r0, r3
 8008a62:	f240 808b 	bls.w	8008b7c <HAL_RCC_ClockConfig+0x18e>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a6e:	6893      	ldr	r3, [r2, #8]
 8008a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008a7a:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a86:	6893      	ldr	r3, [r2, #8]
 8008a88:	f023 0303 	bic.w	r3, r3, #3
 8008a8c:	6869      	ldr	r1, [r5, #4]
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8008a92:	f7fd fa61 	bl	8005f58 <HAL_GetTick>
 8008a96:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a98:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8008a9c:	f2c4 0702 	movt	r7, #16386	; 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aa0:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 030c 	and.w	r3, r3, #12
 8008aaa:	686a      	ldr	r2, [r5, #4]
 8008aac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008ab0:	d067      	beq.n	8008b82 <HAL_RCC_ClockConfig+0x194>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab2:	f7fd fa51 	bl	8005f58 <HAL_GetTick>
 8008ab6:	1b80      	subs	r0, r0, r6
 8008ab8:	4540      	cmp	r0, r8
 8008aba:	d9f3      	bls.n	8008aa4 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8008abc:	2003      	movs	r0, #3
 8008abe:	e0fd      	b.n	8008cbc <HAL_RCC_ClockConfig+0x2ce>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ac4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008ace:	d101      	bne.n	8008ad4 <HAL_RCC_ClockConfig+0xe6>
        return HAL_ERROR;
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	e0f3      	b.n	8008cbc <HAL_RCC_ClockConfig+0x2ce>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008ad8:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008adc:	68ca      	ldr	r2, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ade:	68c9      	ldr	r1, [r1, #12]
 8008ae0:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8008ae4:	3101      	adds	r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ae6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008aea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008aee:	68d2      	ldr	r2, [r2, #12]
 8008af0:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008af4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8008af8:	f2c0 00f4 	movt	r0, #244	; 0xf4
 8008afc:	fbb0 f0f1 	udiv	r0, r0, r1
 8008b00:	fb00 f202 	mul.w	r2, r0, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b08:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008b0c:	68c9      	ldr	r1, [r1, #12]
 8008b0e:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8008b12:	3101      	adds	r1, #1
 8008b14:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8008b16:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8008b1a:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8008b1e:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
 8008b22:	428a      	cmp	r2, r1
 8008b24:	d924      	bls.n	8008b70 <HAL_RCC_ClockConfig+0x182>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008b26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b2e:	6892      	ldr	r2, [r2, #8]
 8008b30:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8008b34:	d004      	beq.n	8008b40 <HAL_RCC_ClockConfig+0x152>
 8008b36:	f013 0902 	ands.w	r9, r3, #2
 8008b3a:	d0a0      	beq.n	8008a7e <HAL_RCC_ClockConfig+0x90>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008b3c:	68ab      	ldr	r3, [r5, #8]
 8008b3e:	b9d3      	cbnz	r3, 8008b76 <HAL_RCC_ClockConfig+0x188>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008b40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b48:	6893      	ldr	r3, [r2, #8]
 8008b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b52:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008b54:	f04f 0980 	mov.w	r9, #128	; 0x80
 8008b58:	e791      	b.n	8008a7e <HAL_RCC_ClockConfig+0x90>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008b68:	f47f af74 	bne.w	8008a54 <HAL_RCC_ClockConfig+0x66>
          return HAL_ERROR;
 8008b6c:	2001      	movs	r0, #1
 8008b6e:	e0a5      	b.n	8008cbc <HAL_RCC_ClockConfig+0x2ce>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008b70:	f04f 0900 	mov.w	r9, #0
 8008b74:	e783      	b.n	8008a7e <HAL_RCC_ClockConfig+0x90>
 8008b76:	f04f 0900 	mov.w	r9, #0
 8008b7a:	e780      	b.n	8008a7e <HAL_RCC_ClockConfig+0x90>
 8008b7c:	f04f 0900 	mov.w	r9, #0
 8008b80:	e77d      	b.n	8008a7e <HAL_RCC_ClockConfig+0x90>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	f013 0f02 	tst.w	r3, #2
 8008b88:	d132      	bne.n	8008bf0 <HAL_RCC_ClockConfig+0x202>
    if(hpre == RCC_SYSCLK_DIV2)
 8008b8a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8008b8e:	d152      	bne.n	8008c36 <HAL_RCC_ClockConfig+0x248>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008b9e:	609a      	str	r2, [r3, #8]
 8008ba0:	e049      	b.n	8008c36 <HAL_RCC_ClockConfig+0x248>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008ba6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008baa:	6813      	ldr	r3, [r2, #0]
 8008bac:	f023 030f 	bic.w	r3, r3, #15
 8008bb0:	4323      	orrs	r3, r4
 8008bb2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008bb4:	f7fd f9d0 	bl	8005f58 <HAL_GetTick>
 8008bb8:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bba:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8008bbe:	f2c4 0702 	movt	r7, #16386	; 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bc2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f003 030f 	and.w	r3, r3, #15
 8008bcc:	42a3      	cmp	r3, r4
 8008bce:	d03b      	beq.n	8008c48 <HAL_RCC_ClockConfig+0x25a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd0:	f7fd f9c2 	bl	8005f58 <HAL_GetTick>
 8008bd4:	1b80      	subs	r0, r0, r6
 8008bd6:	4540      	cmp	r0, r8
 8008bd8:	d9f5      	bls.n	8008bc6 <HAL_RCC_ClockConfig+0x1d8>
        return HAL_TIMEOUT;
 8008bda:	2003      	movs	r0, #3
 8008bdc:	e06e      	b.n	8008cbc <HAL_RCC_ClockConfig+0x2ce>
    return HAL_ERROR;
 8008bde:	2001      	movs	r0, #1
}
 8008be0:	4770      	bx	lr
      return HAL_ERROR;
 8008be2:	2001      	movs	r0, #1
 8008be4:	e06a      	b.n	8008cbc <HAL_RCC_ClockConfig+0x2ce>
          return HAL_ERROR;
 8008be6:	2001      	movs	r0, #1
 8008be8:	e068      	b.n	8008cbc <HAL_RCC_ClockConfig+0x2ce>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bea:	f013 0f02 	tst.w	r3, #2
 8008bee:	d022      	beq.n	8008c36 <HAL_RCC_ClockConfig+0x248>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bf0:	f013 0f04 	tst.w	r3, #4
 8008bf4:	d007      	beq.n	8008c06 <HAL_RCC_ClockConfig+0x218>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008c04:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	f013 0f08 	tst.w	r3, #8
 8008c0c:	d009      	beq.n	8008c22 <HAL_RCC_ClockConfig+0x234>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008c0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c16:	6893      	ldr	r3, [r2, #8]
 8008c18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c1c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008c20:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c2a:	6893      	ldr	r3, [r2, #8]
 8008c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c30:	68a9      	ldr	r1, [r5, #8]
 8008c32:	430b      	orrs	r3, r1
 8008c34:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 030f 	and.w	r3, r3, #15
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	d8ac      	bhi.n	8008ba2 <HAL_RCC_ClockConfig+0x1b4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	f013 0f04 	tst.w	r3, #4
 8008c4e:	d009      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x276>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c58:	6893      	ldr	r3, [r2, #8]
 8008c5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008c5e:	68e9      	ldr	r1, [r5, #12]
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	f013 0f08 	tst.w	r3, #8
 8008c6a:	d00a      	beq.n	8008c82 <HAL_RCC_ClockConfig+0x294>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c74:	6893      	ldr	r3, [r2, #8]
 8008c76:	6929      	ldr	r1, [r5, #16]
 8008c78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008c7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008c80:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c82:	f7ff fe69 	bl	8008958 <HAL_RCC_GetSysClockFreq>
 8008c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	f240 5378 	movw	r3, #1400	; 0x578
 8008c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008c98:	f24f 5188 	movw	r1, #62856	; 0xf588
 8008c9c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8008ca0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8008ca4:	5c8a      	ldrb	r2, [r1, r2]
 8008ca6:	f002 021f 	and.w	r2, r2, #31
 8008caa:	40d0      	lsrs	r0, r2
 8008cac:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8008cae:	f240 5380 	movw	r3, #1408	; 0x580
 8008cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	f7fd f907 	bl	8005eca <HAL_InitTick>
}
 8008cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008cc0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8008cc0:	f240 5378 	movw	r3, #1400	; 0x578
 8008cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	4770      	bx	lr

08008ccc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cd4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8008cd6:	f240 5278 	movw	r2, #1400	; 0x578
 8008cda:	f2c2 0200 	movt	r2, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008cde:	f24f 5198 	movw	r1, #62872	; 0xf598
 8008ce2:	f6c0 0100 	movt	r1, #2048	; 0x800
 8008ce6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008cea:	5ccb      	ldrb	r3, [r1, r3]
 8008cec:	f003 031f 	and.w	r3, r3, #31
 8008cf0:	6810      	ldr	r0, [r2, #0]
}
 8008cf2:	40d8      	lsrs	r0, r3
 8008cf4:	4770      	bx	lr

08008cf6 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cfe:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8008d00:	f240 5278 	movw	r2, #1400	; 0x578
 8008d04:	f2c2 0200 	movt	r2, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008d08:	f24f 5198 	movw	r1, #62872	; 0xf598
 8008d0c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8008d10:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008d14:	5ccb      	ldrb	r3, [r1, r3]
 8008d16:	f003 031f 	and.w	r3, r3, #31
 8008d1a:	6810      	ldr	r0, [r2, #0]
}
 8008d1c:	40d8      	lsrs	r0, r3
 8008d1e:	4770      	bx	lr

08008d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d28:	6803      	ldr	r3, [r0, #0]
 8008d2a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008d2e:	d06f      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008d3e:	d132      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8008d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008d5a:	2701      	movs	r7, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d5c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008d60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d6a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d6c:	f7fd f8f4 	bl	8005f58 <HAL_GetTick>
 8008d70:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d72:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8008d76:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8008d7a:	6833      	ldr	r3, [r6, #0]
 8008d7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008d80:	f040 8188 	bne.w	8009094 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d84:	f7fd f8e8 	bl	8005f58 <HAL_GetTick>
 8008d88:	1b40      	subs	r0, r0, r5
 8008d8a:	2802      	cmp	r0, #2
 8008d8c:	d9f5      	bls.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_TIMEOUT;
 8008d8e:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d90:	2f00      	cmp	r7, #0
 8008d92:	d03e      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d9e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008da2:	659a      	str	r2, [r3, #88]	; 0x58
 8008da4:	e035      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    FlagStatus       pwrclkchanged = RESET;
 8008da6:	2700      	movs	r7, #0
 8008da8:	e7d8      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008daa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d015      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008db4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008db8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008dc0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008dc4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008dc8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dcc:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008dd0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008dd4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8008dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ddc:	f013 0f01 	tst.w	r3, #1
 8008de0:	f000 8162 	beq.w	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x388>
        tickstart = HAL_GetTick();
 8008de4:	f7fd f8b8 	bl	8005f58 <HAL_GetTick>
 8008de8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8008dee:	f2c4 0602 	movt	r6, #16386	; 0x4002
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008df2:	f241 3888 	movw	r8, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008df6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8008dfa:	f013 0f02 	tst.w	r3, #2
 8008dfe:	f040 8153 	bne.w	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x388>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e02:	f7fd f8a9 	bl	8005f58 <HAL_GetTick>
 8008e06:	1b40      	subs	r0, r0, r5
 8008e08:	4540      	cmp	r0, r8
 8008e0a:	d9f4      	bls.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            ret = HAL_TIMEOUT;
 8008e0c:	2003      	movs	r0, #3
 8008e0e:	e7bf      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x70>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e10:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f013 0f01 	tst.w	r3, #1
 8008e18:	d00b      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008e22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e26:	f023 0303 	bic.w	r3, r3, #3
 8008e2a:	6861      	ldr	r1, [r4, #4]
 8008e2c:	430b      	orrs	r3, r1
 8008e2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	f013 0f02 	tst.w	r3, #2
 8008e38:	d00b      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008e42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e46:	f023 030c 	bic.w	r3, r3, #12
 8008e4a:	68a1      	ldr	r1, [r4, #8]
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	f013 0f04 	tst.w	r3, #4
 8008e58:	d00b      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008e62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008e6a:	68e1      	ldr	r1, [r4, #12]
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	f013 0f08 	tst.w	r3, #8
 8008e78:	d00b      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008e82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e8a:	6921      	ldr	r1, [r4, #16]
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	f013 0f20 	tst.w	r3, #32
 8008e98:	d00b      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ea2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ea6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008eaa:	6961      	ldr	r1, [r4, #20]
 8008eac:	430b      	orrs	r3, r1
 8008eae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008eb8:	d00b      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ebe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ec2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ec6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008eca:	69a1      	ldr	r1, [r4, #24]
 8008ecc:	430b      	orrs	r3, r1
 8008ece:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ed8:	d00b      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ede:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ee2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ee6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008eea:	69e1      	ldr	r1, [r4, #28]
 8008eec:	430b      	orrs	r3, r1
 8008eee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ef8:	d00b      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008efa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008efe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f02:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008f06:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008f0a:	6a21      	ldr	r1, [r4, #32]
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008f18:	d00b      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008f26:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8008f2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008f38:	d00f      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008f46:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008f4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008f52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f58:	d066      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008f60:	d00f      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008f6e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008f72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008f74:	430b      	orrs	r3, r1
 8008f76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008f7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f80:	d05b      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008f88:	d00f      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008f96:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008f9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008fa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fa8:	d050      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x32c>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008fb0:	d00f      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008fba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008fbe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd0:	d045      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x33e>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008fd8:	d00f      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008fe2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008fe6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008fea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008fec:	430b      	orrs	r3, r1
 8008fee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ff8:	d03a      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x350>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009000:	d00f      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009006:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800900a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800900e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009012:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009014:	430b      	orrs	r3, r1
 8009016:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800901a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800901c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009020:	d02f      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x362>
  }

#endif /* QUADSPI */

  return status;
}
 8009022:	b002      	add	sp, #8
 8009024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800902c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009036:	60da      	str	r2, [r3, #12]
 8009038:	e78f      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800903a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800903e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009048:	60da      	str	r2, [r3, #12]
 800904a:	e79a      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800904c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009050:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009054:	68da      	ldr	r2, [r3, #12]
 8009056:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800905a:	60da      	str	r2, [r3, #12]
 800905c:	e7a5      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800905e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009062:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800906c:	60da      	str	r2, [r3, #12]
 800906e:	e7b0      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009074:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800907e:	60da      	str	r2, [r3, #12]
 8009080:	e7bb      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009086:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009090:	60da      	str	r2, [r3, #12]
  return status;
 8009092:	e7c6      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x302>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009098:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800909c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80090a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80090a4:	f47f ae81 	bne.w	8008daa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80090ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80090b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80090b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80090ba:	430b      	orrs	r3, r1
 80090bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090c0:	2000      	movs	r0, #0
 80090c2:	e665      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x70>

080090c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	4681      	mov	r9, r0
 80090cc:	460f      	mov	r7, r1
 80090ce:	4616      	mov	r6, r2
 80090d0:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090d2:	f7fc ff41 	bl	8005f58 <HAL_GetTick>
 80090d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d8:	442b      	add	r3, r5
 80090da:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 80090de:	f7fc ff3b 	bl	8005f58 <HAL_GetTick>
 80090e2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090e4:	f240 5378 	movw	r3, #1400	; 0x578
 80090e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80090f2:	fb08 f303 	mul.w	r3, r8, r3
 80090f6:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090f8:	f8d9 2000 	ldr.w	r2, [r9]
 80090fc:	6894      	ldr	r4, [r2, #8]
 80090fe:	ea37 0404 	bics.w	r4, r7, r4
 8009102:	bf0c      	ite	eq
 8009104:	2301      	moveq	r3, #1
 8009106:	2300      	movne	r3, #0
 8009108:	42b3      	cmp	r3, r6
 800910a:	d044      	beq.n	8009196 <SPI_WaitFlagStateUntilTimeout+0xd2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800910c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009110:	d0f4      	beq.n	80090fc <SPI_WaitFlagStateUntilTimeout+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009112:	f7fc ff21 	bl	8005f58 <HAL_GetTick>
 8009116:	eba0 000a 	sub.w	r0, r0, sl
 800911a:	4540      	cmp	r0, r8
 800911c:	d207      	bcs.n	800912e <SPI_WaitFlagStateUntilTimeout+0x6a>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800911e:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8009120:	2b00      	cmp	r3, #0
 8009122:	bf08      	it	eq
 8009124:	4698      	moveq	r8, r3
      }
      count--;
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	3b01      	subs	r3, #1
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	e7e4      	b.n	80090f8 <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800912e:	f8d9 2000 	ldr.w	r2, [r9]
 8009132:	6853      	ldr	r3, [r2, #4]
 8009134:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009138:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800913a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800913e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009142:	d00c      	beq.n	800915e <SPI_WaitFlagStateUntilTimeout+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009144:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8009148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800914c:	d016      	beq.n	800917c <SPI_WaitFlagStateUntilTimeout+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 800914e:	2301      	movs	r3, #1
 8009150:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8009154:	2300      	movs	r3, #0
 8009156:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 800915a:	2003      	movs	r0, #3
 800915c:	e01c      	b.n	8009198 <SPI_WaitFlagStateUntilTimeout+0xd4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800915e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009166:	d002      	beq.n	800916e <SPI_WaitFlagStateUntilTimeout+0xaa>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916c:	d1ea      	bne.n	8009144 <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 800916e:	f8d9 2000 	ldr.w	r2, [r9]
 8009172:	6813      	ldr	r3, [r2, #0]
 8009174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	e7e3      	b.n	8009144 <SPI_WaitFlagStateUntilTimeout+0x80>
          SPI_RESET_CRC(hspi);
 800917c:	f8d9 2000 	ldr.w	r2, [r9]
 8009180:	6813      	ldr	r3, [r2, #0]
 8009182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	f8d9 2000 	ldr.w	r2, [r9]
 800918c:	6813      	ldr	r3, [r2, #0]
 800918e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	e7db      	b.n	800914e <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 8009196:	2000      	movs	r0, #0
}
 8009198:	b002      	add	sp, #8
 800919a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800919e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800919e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	4680      	mov	r8, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	4615      	mov	r5, r2
 80091aa:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80091b2:	f7fc fed1 	bl	8005f58 <HAL_GetTick>
 80091b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80091b8:	4437      	add	r7, r6
 80091ba:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 80091bc:	f7fc fecc 	bl	8005f58 <HAL_GetTick>
 80091c0:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80091c2:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80091c6:	f240 5378 	movw	r3, #1400	; 0x578
 80091ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80091d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80091d8:	0d1b      	lsrs	r3, r3, #20
 80091da:	fb07 f303 	mul.w	r3, r7, r3
 80091de:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80091e0:	f8d8 2000 	ldr.w	r2, [r8]
 80091e4:	e002      	b.n	80091ec <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80091e6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80091ea:	d111      	bne.n	8009210 <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 80091ec:	6893      	ldr	r3, [r2, #8]
 80091ee:	ea03 0c04 	and.w	ip, r3, r4
 80091f2:	45ac      	cmp	ip, r5
 80091f4:	d04e      	beq.n	8009294 <SPI_WaitFifoStateUntilTimeout+0xf6>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80091f6:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80091fa:	d1f4      	bne.n	80091e6 <SPI_WaitFifoStateUntilTimeout+0x48>
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	d1f2      	bne.n	80091e6 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 8009200:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800920a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800920e:	e7ea      	b.n	80091e6 <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009210:	f7fc fea2 	bl	8005f58 <HAL_GetTick>
 8009214:	eba0 0009 	sub.w	r0, r0, r9
 8009218:	42b8      	cmp	r0, r7
 800921a:	d207      	bcs.n	800922c <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800921c:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800921e:	2b00      	cmp	r3, #0
 8009220:	bf08      	it	eq
 8009222:	461f      	moveq	r7, r3
      }
      count--;
 8009224:	9b01      	ldr	r3, [sp, #4]
 8009226:	3b01      	subs	r3, #1
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	e7d9      	b.n	80091e0 <SPI_WaitFifoStateUntilTimeout+0x42>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800922c:	f8d8 2000 	ldr.w	r2, [r8]
 8009230:	6853      	ldr	r3, [r2, #4]
 8009232:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009236:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009238:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800923c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009240:	d00c      	beq.n	800925c <SPI_WaitFifoStateUntilTimeout+0xbe>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009242:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8009246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800924a:	d016      	beq.n	800927a <SPI_WaitFifoStateUntilTimeout+0xdc>
        hspi->State = HAL_SPI_STATE_READY;
 800924c:	2301      	movs	r3, #1
 800924e:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8009252:	2300      	movs	r3, #0
 8009254:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 8009258:	2003      	movs	r0, #3
 800925a:	e01c      	b.n	8009296 <SPI_WaitFifoStateUntilTimeout+0xf8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800925c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009264:	d002      	beq.n	800926c <SPI_WaitFifoStateUntilTimeout+0xce>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800926a:	d1ea      	bne.n	8009242 <SPI_WaitFifoStateUntilTimeout+0xa4>
          __HAL_SPI_DISABLE(hspi);
 800926c:	f8d8 2000 	ldr.w	r2, [r8]
 8009270:	6813      	ldr	r3, [r2, #0]
 8009272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	e7e3      	b.n	8009242 <SPI_WaitFifoStateUntilTimeout+0xa4>
          SPI_RESET_CRC(hspi);
 800927a:	f8d8 2000 	ldr.w	r2, [r8]
 800927e:	6813      	ldr	r3, [r2, #0]
 8009280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	f8d8 2000 	ldr.w	r2, [r8]
 800928a:	6813      	ldr	r3, [r2, #0]
 800928c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	e7db      	b.n	800924c <SPI_WaitFifoStateUntilTimeout+0xae>
    }
  }

  return HAL_OK;
 8009294:	2000      	movs	r0, #0
}
 8009296:	b002      	add	sp, #8
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800929c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	4604      	mov	r4, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092a6:	9200      	str	r2, [sp, #0]
 80092a8:	460b      	mov	r3, r1
 80092aa:	2200      	movs	r2, #0
 80092ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80092b0:	f7ff ff75 	bl	800919e <SPI_WaitFifoStateUntilTimeout>
 80092b4:	b9b0      	cbnz	r0, 80092e4 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092b6:	9600      	str	r6, [sp, #0]
 80092b8:	462b      	mov	r3, r5
 80092ba:	2200      	movs	r2, #0
 80092bc:	2180      	movs	r1, #128	; 0x80
 80092be:	4620      	mov	r0, r4
 80092c0:	f7ff ff00 	bl	80090c4 <SPI_WaitFlagStateUntilTimeout>
 80092c4:	b9a8      	cbnz	r0, 80092f2 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092c6:	9600      	str	r6, [sp, #0]
 80092c8:	462b      	mov	r3, r5
 80092ca:	2200      	movs	r2, #0
 80092cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80092d0:	4620      	mov	r0, r4
 80092d2:	f7ff ff64 	bl	800919e <SPI_WaitFifoStateUntilTimeout>
 80092d6:	b150      	cbz	r0, 80092ee <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80092da:	f043 0320 	orr.w	r3, r3, #32
 80092de:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80092e0:	2003      	movs	r0, #3
 80092e2:	e004      	b.n	80092ee <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80092e6:	f043 0320 	orr.w	r3, r3, #32
 80092ea:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80092ec:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80092ee:	b002      	add	sp, #8
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80092f4:	f043 0320 	orr.w	r3, r3, #32
 80092f8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80092fa:	2003      	movs	r0, #3
 80092fc:	e7f7      	b.n	80092ee <SPI_EndRxTxTransaction+0x52>

080092fe <SPI_EndRxTransaction>:
{
 80092fe:	b570      	push	{r4, r5, r6, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	4604      	mov	r4, r0
 8009304:	460d      	mov	r5, r1
 8009306:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009308:	6843      	ldr	r3, [r0, #4]
 800930a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800930e:	d00d      	beq.n	800932c <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009310:	9600      	str	r6, [sp, #0]
 8009312:	462b      	mov	r3, r5
 8009314:	2200      	movs	r2, #0
 8009316:	2180      	movs	r1, #128	; 0x80
 8009318:	4620      	mov	r0, r4
 800931a:	f7ff fed3 	bl	80090c4 <SPI_WaitFlagStateUntilTimeout>
 800931e:	b990      	cbnz	r0, 8009346 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009320:	6863      	ldr	r3, [r4, #4]
 8009322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009326:	d014      	beq.n	8009352 <SPI_EndRxTransaction+0x54>
}
 8009328:	b002      	add	sp, #8
 800932a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800932c:	6883      	ldr	r3, [r0, #8]
 800932e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009332:	d002      	beq.n	800933a <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009338:	d1ea      	bne.n	8009310 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800933a:	6822      	ldr	r2, [r4, #0]
 800933c:	6813      	ldr	r3, [r2, #0]
 800933e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009342:	6013      	str	r3, [r2, #0]
 8009344:	e7e4      	b.n	8009310 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009346:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009348:	f043 0320 	orr.w	r3, r3, #32
 800934c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800934e:	2003      	movs	r0, #3
 8009350:	e7ea      	b.n	8009328 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009352:	68a3      	ldr	r3, [r4, #8]
 8009354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009358:	d002      	beq.n	8009360 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800935a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800935e:	d1e3      	bne.n	8009328 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009360:	9600      	str	r6, [sp, #0]
 8009362:	462b      	mov	r3, r5
 8009364:	2200      	movs	r2, #0
 8009366:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800936a:	4620      	mov	r0, r4
 800936c:	f7ff ff17 	bl	800919e <SPI_WaitFifoStateUntilTimeout>
 8009370:	2800      	cmp	r0, #0
 8009372:	d0d9      	beq.n	8009328 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009374:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009376:	f043 0320 	orr.w	r3, r3, #32
 800937a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800937c:	2003      	movs	r0, #3
 800937e:	e7d3      	b.n	8009328 <SPI_EndRxTransaction+0x2a>

08009380 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009380:	2800      	cmp	r0, #0
 8009382:	d06d      	beq.n	8009460 <HAL_SPI_Init+0xe0>
{
 8009384:	b510      	push	{r4, lr}
 8009386:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009388:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800938a:	b933      	cbnz	r3, 800939a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800938c:	6843      	ldr	r3, [r0, #4]
 800938e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009392:	d005      	beq.n	80093a0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009394:	2300      	movs	r3, #0
 8009396:	61c3      	str	r3, [r0, #28]
 8009398:	e002      	b.n	80093a0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800939a:	2300      	movs	r3, #0
 800939c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800939e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80093a4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d053      	beq.n	8009454 <HAL_SPI_Init+0xd4>
  hspi->State = HAL_SPI_STATE_BUSY;
 80093ac:	2302      	movs	r3, #2
 80093ae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80093b2:	6822      	ldr	r2, [r4, #0]
 80093b4:	6813      	ldr	r3, [r2, #0]
 80093b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ba:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093bc:	68e3      	ldr	r3, [r4, #12]
 80093be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093c2:	bf8c      	ite	hi
 80093c4:	2100      	movhi	r1, #0
 80093c6:	2101      	movls	r1, #1
 80093c8:	0309      	lsls	r1, r1, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80093ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093d2:	bf1c      	itt	ne
 80093d4:	2300      	movne	r3, #0
 80093d6:	62a3      	strne	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093d8:	6822      	ldr	r2, [r4, #0]
 80093da:	6863      	ldr	r3, [r4, #4]
 80093dc:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80093e0:	68a0      	ldr	r0, [r4, #8]
 80093e2:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80093e6:	4303      	orrs	r3, r0
 80093e8:	6920      	ldr	r0, [r4, #16]
 80093ea:	f000 0002 	and.w	r0, r0, #2
 80093ee:	4303      	orrs	r3, r0
 80093f0:	6960      	ldr	r0, [r4, #20]
 80093f2:	f000 0001 	and.w	r0, r0, #1
 80093f6:	4303      	orrs	r3, r0
 80093f8:	69a0      	ldr	r0, [r4, #24]
 80093fa:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80093fe:	4303      	orrs	r3, r0
 8009400:	69e0      	ldr	r0, [r4, #28]
 8009402:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8009406:	4303      	orrs	r3, r0
 8009408:	6a20      	ldr	r0, [r4, #32]
 800940a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800940e:	4303      	orrs	r3, r0
 8009410:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009412:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8009416:	4303      	orrs	r3, r0
 8009418:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800941e:	f003 0310 	and.w	r3, r3, #16
 8009422:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009424:	f000 0008 	and.w	r0, r0, #8
 8009428:	4303      	orrs	r3, r0
 800942a:	68e0      	ldr	r0, [r4, #12]
 800942c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8009430:	4303      	orrs	r3, r0
 8009432:	8b60      	ldrh	r0, [r4, #26]
 8009434:	f000 0004 	and.w	r0, r0, #4
 8009438:	4303      	orrs	r3, r0
 800943a:	430b      	orrs	r3, r1
 800943c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800943e:	6822      	ldr	r2, [r4, #0]
 8009440:	69d3      	ldr	r3, [r2, #28]
 8009442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009446:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009448:	2000      	movs	r0, #0
 800944a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800944c:	2301      	movs	r3, #1
 800944e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8009452:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8009454:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8009458:	4620      	mov	r0, r4
 800945a:	f7fc f8e6 	bl	800562a <HAL_SPI_MspInit>
 800945e:	e7a5      	b.n	80093ac <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8009460:	2001      	movs	r0, #1
}
 8009462:	4770      	bx	lr

08009464 <HAL_SPI_TransmitReceive_DMA>:
{
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8009468:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800946c:	2801      	cmp	r0, #1
 800946e:	f000 8106 	beq.w	800967e <HAL_SPI_TransmitReceive_DMA+0x21a>
 8009472:	2001      	movs	r0, #1
 8009474:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8009478:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800947c:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800947e:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009480:	2801      	cmp	r0, #1
 8009482:	d00a      	beq.n	800949a <HAL_SPI_TransmitReceive_DMA+0x36>
 8009484:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8009488:	f040 80ea 	bne.w	8009660 <HAL_SPI_TransmitReceive_DMA+0x1fc>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800948c:	68a5      	ldr	r5, [r4, #8]
 800948e:	2d00      	cmp	r5, #0
 8009490:	f040 80eb 	bne.w	800966a <HAL_SPI_TransmitReceive_DMA+0x206>
 8009494:	2804      	cmp	r0, #4
 8009496:	f040 80ea 	bne.w	800966e <HAL_SPI_TransmitReceive_DMA+0x20a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800949a:	2900      	cmp	r1, #0
 800949c:	f000 80e9 	beq.w	8009672 <HAL_SPI_TransmitReceive_DMA+0x20e>
 80094a0:	2a00      	cmp	r2, #0
 80094a2:	f000 80e8 	beq.w	8009676 <HAL_SPI_TransmitReceive_DMA+0x212>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80e7 	beq.w	800967a <HAL_SPI_TransmitReceive_DMA+0x216>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094ac:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80094b0:	b2c0      	uxtb	r0, r0
 80094b2:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094b4:	bf1c      	itt	ne
 80094b6:	2005      	movne	r0, #5
 80094b8:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094bc:	2000      	movs	r0, #0
 80094be:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80094c0:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094c2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80094c6:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80094c8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80094cc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 80094d0:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80094d2:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	6853      	ldr	r3, [r2, #4]
 80094d8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80094dc:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094de:	68e3      	ldr	r3, [r4, #12]
 80094e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094e4:	d931      	bls.n	800954a <HAL_SPI_TransmitReceive_DMA+0xe6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094e6:	6822      	ldr	r2, [r4, #0]
 80094e8:	6853      	ldr	r3, [r2, #4]
 80094ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094ee:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80094f0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d072      	beq.n	80095e0 <HAL_SPI_TransmitReceive_DMA+0x17c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80094fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80094fc:	f249 6393 	movw	r3, #38547	; 0x9693
 8009500:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009504:	6313      	str	r3, [r2, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009506:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8009508:	f249 7331 	movw	r3, #38705	; 0x9731
 800950c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009510:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009512:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8009514:	f249 639f 	movw	r3, #38559	; 0x969f
 8009518:	f6c0 0300 	movt	r3, #2048	; 0x800
 800951c:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800951e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009520:	2200      	movs	r2, #0
 8009522:	639a      	str	r2, [r3, #56]	; 0x38
                                 hspi->RxXferCount))
 8009524:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009528:	6821      	ldr	r1, [r4, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800952e:	310c      	adds	r1, #12
 8009530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009532:	f7fd fe5f 	bl	80071f4 <HAL_DMA_Start_IT>
 8009536:	2800      	cmp	r0, #0
 8009538:	d05f      	beq.n	80095fa <HAL_SPI_TransmitReceive_DMA+0x196>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800953a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800953c:	f043 0310 	orr.w	r3, r3, #16
 8009540:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8009542:	2001      	movs	r0, #1
 8009544:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8009548:	e08b      	b.n	8009662 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800954a:	6822      	ldr	r2, [r4, #0]
 800954c:	6853      	ldr	r3, [r2, #4]
 800954e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009552:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009554:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800955c:	d01a      	beq.n	8009594 <HAL_SPI_TransmitReceive_DMA+0x130>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800955e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009566:	d1c3      	bne.n	80094f0 <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009568:	6822      	ldr	r2, [r4, #0]
 800956a:	6853      	ldr	r3, [r2, #4]
 800956c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009570:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009572:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009576:	f013 0f01 	tst.w	r3, #1
 800957a:	d124      	bne.n	80095c6 <HAL_SPI_TransmitReceive_DMA+0x162>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800957c:	6822      	ldr	r2, [r4, #0]
 800957e:	6853      	ldr	r3, [r2, #4]
 8009580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009584:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009586:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800958a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800958e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8009592:	e7ad      	b.n	80094f0 <HAL_SPI_TransmitReceive_DMA+0x8c>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009594:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8009596:	f013 0f01 	tst.w	r3, #1
 800959a:	d109      	bne.n	80095b0 <HAL_SPI_TransmitReceive_DMA+0x14c>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800959c:	6822      	ldr	r2, [r4, #0]
 800959e:	6853      	ldr	r3, [r2, #4]
 80095a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095a4:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80095a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80095a8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80095ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80095ae:	e7d6      	b.n	800955e <HAL_SPI_TransmitReceive_DMA+0xfa>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80095b0:	6822      	ldr	r2, [r4, #0]
 80095b2:	6853      	ldr	r3, [r2, #4]
 80095b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095b8:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80095ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80095bc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80095c0:	3301      	adds	r3, #1
 80095c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80095c4:	e7cb      	b.n	800955e <HAL_SPI_TransmitReceive_DMA+0xfa>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80095c6:	6822      	ldr	r2, [r4, #0]
 80095c8:	6853      	ldr	r3, [r2, #4]
 80095ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80095ce:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80095d0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80095d4:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80095d8:	3301      	adds	r3, #1
 80095da:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80095de:	e787      	b.n	80094f0 <HAL_SPI_TransmitReceive_DMA+0x8c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80095e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80095e2:	f249 6387 	movw	r3, #38535	; 0x9687
 80095e6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80095ea:	6313      	str	r3, [r2, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80095ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80095ee:	f249 63c1 	movw	r3, #38593	; 0x96c1
 80095f2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80095f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095f8:	e78b      	b.n	8009512 <HAL_SPI_TransmitReceive_DMA+0xae>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80095fa:	6822      	ldr	r2, [r4, #0]
 80095fc:	6853      	ldr	r3, [r2, #4]
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009604:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009606:	2300      	movs	r3, #0
 8009608:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800960a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800960c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800960e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009610:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009612:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009614:	6393      	str	r3, [r2, #56]	; 0x38
                                 hspi->TxXferCount))
 8009616:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009618:	6822      	ldr	r2, [r4, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	320c      	adds	r2, #12
 800961e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009622:	f7fd fde7 	bl	80071f4 <HAL_DMA_Start_IT>
 8009626:	b998      	cbnz	r0, 8009650 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009630:	d103      	bne.n	800963a <HAL_SPI_TransmitReceive_DMA+0x1d6>
    __HAL_SPI_ENABLE(hspi);
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009638:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800963a:	6822      	ldr	r2, [r4, #0]
 800963c:	6853      	ldr	r3, [r2, #4]
 800963e:	f043 0320 	orr.w	r3, r3, #32
 8009642:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	6853      	ldr	r3, [r2, #4]
 8009648:	f043 0302 	orr.w	r3, r3, #2
 800964c:	6053      	str	r3, [r2, #4]
 800964e:	e008      	b.n	8009662 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009650:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009652:	f043 0310 	orr.w	r3, r3, #16
 8009656:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8009658:	2001      	movs	r0, #1
 800965a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 800965e:	e000      	b.n	8009662 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    errorcode = HAL_BUSY;
 8009660:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8009662:	2300      	movs	r3, #0
 8009664:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8009668:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 800966a:	2002      	movs	r0, #2
 800966c:	e7f9      	b.n	8009662 <HAL_SPI_TransmitReceive_DMA+0x1fe>
 800966e:	2002      	movs	r0, #2
 8009670:	e7f7      	b.n	8009662 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    errorcode = HAL_ERROR;
 8009672:	2001      	movs	r0, #1
 8009674:	e7f5      	b.n	8009662 <HAL_SPI_TransmitReceive_DMA+0x1fe>
 8009676:	2001      	movs	r0, #1
 8009678:	e7f3      	b.n	8009662 <HAL_SPI_TransmitReceive_DMA+0x1fe>
 800967a:	2001      	movs	r0, #1
 800967c:	e7f1      	b.n	8009662 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  __HAL_LOCK(hspi);
 800967e:	2002      	movs	r0, #2
 8009680:	e7f2      	b.n	8009668 <HAL_SPI_TransmitReceive_DMA+0x204>

08009682 <HAL_SPI_RxCpltCallback>:
}
 8009682:	4770      	bx	lr

08009684 <HAL_SPI_RxHalfCpltCallback>:
}
 8009684:	4770      	bx	lr

08009686 <SPI_DMAHalfReceiveCplt>:
{
 8009686:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009688:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800968a:	f7ff fffb 	bl	8009684 <HAL_SPI_RxHalfCpltCallback>
}
 800968e:	bd08      	pop	{r3, pc}

08009690 <HAL_SPI_TxRxHalfCpltCallback>:
}
 8009690:	4770      	bx	lr

08009692 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8009692:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009694:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009696:	f7ff fffb 	bl	8009690 <HAL_SPI_TxRxHalfCpltCallback>
}
 800969a:	bd08      	pop	{r3, pc}

0800969c <HAL_SPI_ErrorCallback>:
}
 800969c:	4770      	bx	lr

0800969e <SPI_DMAError>:
{
 800969e:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80096a2:	6802      	ldr	r2, [r0, #0]
 80096a4:	6853      	ldr	r3, [r2, #4]
 80096a6:	f023 0303 	bic.w	r3, r3, #3
 80096aa:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80096ac:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80096ae:	f043 0310 	orr.w	r3, r3, #16
 80096b2:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80096ba:	f7ff ffef 	bl	800969c <HAL_SPI_ErrorCallback>
}
 80096be:	bd08      	pop	{r3, pc}

080096c0 <SPI_DMAReceiveCplt>:
{
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80096c6:	f7fc fc47 	bl	8005f58 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80096ca:	682b      	ldr	r3, [r5, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f013 0f20 	tst.w	r3, #32
 80096d2:	d11f      	bne.n	8009714 <SPI_DMAReceiveCplt+0x54>
 80096d4:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096d6:	6821      	ldr	r1, [r4, #0]
 80096d8:	684b      	ldr	r3, [r1, #4]
 80096da:	f023 0320 	bic.w	r3, r3, #32
 80096de:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80096e0:	68a3      	ldr	r3, [r4, #8]
 80096e2:	b91b      	cbnz	r3, 80096ec <SPI_DMAReceiveCplt+0x2c>
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096ea:	d017      	beq.n	800971c <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80096ec:	6821      	ldr	r1, [r4, #0]
 80096ee:	684b      	ldr	r3, [r1, #4]
 80096f0:	f023 0301 	bic.w	r3, r3, #1
 80096f4:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80096f6:	2164      	movs	r1, #100	; 0x64
 80096f8:	4620      	mov	r0, r4
 80096fa:	f7ff fe00 	bl	80092fe <SPI_EndRxTransaction>
 80096fe:	b108      	cbz	r0, 8009704 <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009700:	2320      	movs	r3, #32
 8009702:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800970a:	2301      	movs	r3, #1
 800970c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009710:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009712:	b94b      	cbnz	r3, 8009728 <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 8009714:	4620      	mov	r0, r4
 8009716:	f7ff ffb4 	bl	8009682 <HAL_SPI_RxCpltCallback>
}
 800971a:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800971c:	6821      	ldr	r1, [r4, #0]
 800971e:	684b      	ldr	r3, [r1, #4]
 8009720:	f023 0303 	bic.w	r3, r3, #3
 8009724:	604b      	str	r3, [r1, #4]
 8009726:	e7e6      	b.n	80096f6 <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 8009728:	4620      	mov	r0, r4
 800972a:	f7ff ffb7 	bl	800969c <HAL_SPI_ErrorCallback>
      return;
 800972e:	e7f4      	b.n	800971a <SPI_DMAReceiveCplt+0x5a>

08009730 <SPI_DMATransmitReceiveCplt>:
{
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009734:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8009736:	f7fc fc0f 	bl	8005f58 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f013 0f20 	tst.w	r3, #32
 8009742:	d11c      	bne.n	800977e <SPI_DMATransmitReceiveCplt+0x4e>
 8009744:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009746:	6821      	ldr	r1, [r4, #0]
 8009748:	684b      	ldr	r3, [r1, #4]
 800974a:	f023 0320 	bic.w	r3, r3, #32
 800974e:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009750:	2164      	movs	r1, #100	; 0x64
 8009752:	4620      	mov	r0, r4
 8009754:	f7ff fda2 	bl	800929c <SPI_EndRxTxTransaction>
 8009758:	b118      	cbz	r0, 8009762 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800975a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800975c:	f043 0320 	orr.w	r3, r3, #32
 8009760:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009762:	6822      	ldr	r2, [r4, #0]
 8009764:	6853      	ldr	r3, [r2, #4]
 8009766:	f023 0303 	bic.w	r3, r3, #3
 800976a:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009770:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009774:	2301      	movs	r3, #1
 8009776:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800977a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800977c:	b91b      	cbnz	r3, 8009786 <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 800977e:	4620      	mov	r0, r4
 8009780:	f7f9 ffe8 	bl	8003754 <HAL_SPI_TxRxCpltCallback>
}
 8009784:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8009786:	4620      	mov	r0, r4
 8009788:	f7ff ff88 	bl	800969c <HAL_SPI_ErrorCallback>
      return;
 800978c:	e7fa      	b.n	8009784 <SPI_DMATransmitReceiveCplt+0x54>

0800978e <HAL_SPI_IRQHandler>:
{
 800978e:	b510      	push	{r4, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8009794:	6802      	ldr	r2, [r0, #0]
 8009796:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8009798:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800979a:	f003 0041 	and.w	r0, r3, #65	; 0x41
 800979e:	2801      	cmp	r0, #1
 80097a0:	d06d      	beq.n	800987e <HAL_SPI_IRQHandler+0xf0>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80097a2:	f013 0f02 	tst.w	r3, #2
 80097a6:	d002      	beq.n	80097ae <HAL_SPI_IRQHandler+0x20>
 80097a8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80097ac:	d16e      	bne.n	800988c <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80097ae:	f413 7fb0 	tst.w	r3, #352	; 0x160
 80097b2:	d06e      	beq.n	8009892 <HAL_SPI_IRQHandler+0x104>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80097b4:	f011 0f20 	tst.w	r1, #32
 80097b8:	d06b      	beq.n	8009892 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80097ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80097be:	d00f      	beq.n	80097e0 <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80097c0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80097c4:	b2c0      	uxtb	r0, r0
 80097c6:	2803      	cmp	r0, #3
 80097c8:	d065      	beq.n	8009896 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80097ca:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80097cc:	f040 0004 	orr.w	r0, r0, #4
 80097d0:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097d2:	2000      	movs	r0, #0
 80097d4:	9000      	str	r0, [sp, #0]
 80097d6:	68d0      	ldr	r0, [r2, #12]
 80097d8:	9000      	str	r0, [sp, #0]
 80097da:	6890      	ldr	r0, [r2, #8]
 80097dc:	9000      	str	r0, [sp, #0]
 80097de:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80097e0:	f013 0f20 	tst.w	r3, #32
 80097e4:	d00c      	beq.n	8009800 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80097e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80097e8:	f040 0001 	orr.w	r0, r0, #1
 80097ec:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80097ee:	2000      	movs	r0, #0
 80097f0:	9002      	str	r0, [sp, #8]
 80097f2:	6890      	ldr	r0, [r2, #8]
 80097f4:	9002      	str	r0, [sp, #8]
 80097f6:	6810      	ldr	r0, [r2, #0]
 80097f8:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80097fc:	6010      	str	r0, [r2, #0]
 80097fe:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009800:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009804:	d009      	beq.n	800981a <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009806:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009808:	f043 0308 	orr.w	r3, r3, #8
 800980c:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800980e:	2300      	movs	r3, #0
 8009810:	9303      	str	r3, [sp, #12]
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	9303      	str	r3, [sp, #12]
 8009818:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800981a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800981c:	2b00      	cmp	r3, #0
 800981e:	d038      	beq.n	8009892 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	6853      	ldr	r3, [r2, #4]
 8009824:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009828:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800982a:	2301      	movs	r3, #1
 800982c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009830:	f011 0f03 	tst.w	r1, #3
 8009834:	d037      	beq.n	80098a6 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	6853      	ldr	r3, [r2, #4]
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8009840:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009842:	b163      	cbz	r3, 800985e <HAL_SPI_IRQHandler+0xd0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009844:	f649 02af 	movw	r2, #39087	; 0x98af
 8009848:	f6c0 0200 	movt	r2, #2048	; 0x800
 800984c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800984e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009850:	f7fd fd50 	bl	80072f4 <HAL_DMA_Abort_IT>
 8009854:	b118      	cbz	r0, 800985e <HAL_SPI_IRQHandler+0xd0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009856:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800985c:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800985e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009860:	b1bb      	cbz	r3, 8009892 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009862:	f649 02af 	movw	r2, #39087	; 0x98af
 8009866:	f6c0 0200 	movt	r2, #2048	; 0x800
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800986c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800986e:	f7fd fd41 	bl	80072f4 <HAL_DMA_Abort_IT>
 8009872:	b170      	cbz	r0, 8009892 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009874:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800987a:	6623      	str	r3, [r4, #96]	; 0x60
 800987c:	e009      	b.n	8009892 <HAL_SPI_IRQHandler+0x104>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800987e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009882:	d08e      	beq.n	80097a2 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8009884:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009886:	4620      	mov	r0, r4
 8009888:	4798      	blx	r3
    return;
 800988a:	e002      	b.n	8009892 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800988c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800988e:	4620      	mov	r0, r4
 8009890:	4798      	blx	r3
}
 8009892:	b004      	add	sp, #16
 8009894:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009896:	2300      	movs	r3, #0
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	68d3      	ldr	r3, [r2, #12]
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	6893      	ldr	r3, [r2, #8]
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	9b01      	ldr	r3, [sp, #4]
        return;
 80098a4:	e7f5      	b.n	8009892 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 80098a6:	4620      	mov	r0, r4
 80098a8:	f7ff fef8 	bl	800969c <HAL_SPI_ErrorCallback>
 80098ac:	e7f1      	b.n	8009892 <HAL_SPI_IRQHandler+0x104>

080098ae <SPI_DMAAbortOnError>:
{
 80098ae:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80098b2:	2300      	movs	r3, #0
 80098b4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80098b8:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80098ba:	f7ff feef 	bl	800969c <HAL_SPI_ErrorCallback>
}
 80098be:	bd08      	pop	{r3, pc}

080098c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098c0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098c2:	6a03      	ldr	r3, [r0, #32]
 80098c4:	f023 0301 	bic.w	r3, r3, #1
 80098c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098ce:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80098d4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d8:	680d      	ldr	r5, [r1, #0]
 80098da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098dc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098e0:	688d      	ldr	r5, [r1, #8]
 80098e2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098e4:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 80098e8:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80098ec:	4560      	cmp	r0, ip
 80098ee:	d033      	beq.n	8009958 <TIM_OC1_SetConfig+0x98>
 80098f0:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 80098f4:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80098f8:	4560      	cmp	r0, ip
 80098fa:	d01f      	beq.n	800993c <TIM_OC1_SetConfig+0x7c>
 80098fc:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8009900:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009904:	4560      	cmp	r0, ip
 8009906:	d020      	beq.n	800994a <TIM_OC1_SetConfig+0x8a>
 8009908:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 800990c:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009910:	4560      	cmp	r0, ip
 8009912:	d00c      	beq.n	800992e <TIM_OC1_SetConfig+0x6e>
 8009914:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 8009918:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800991c:	4560      	cmp	r0, ip
 800991e:	d129      	bne.n	8009974 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009920:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009924:	68cd      	ldr	r5, [r1, #12]
 8009926:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009928:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800992c:	e01a      	b.n	8009964 <TIM_OC1_SetConfig+0xa4>
    tmpccer &= ~TIM_CCER_CC1NP;
 800992e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8009932:	68cd      	ldr	r5, [r1, #12]
 8009934:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8009936:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800993a:	e013      	b.n	8009964 <TIM_OC1_SetConfig+0xa4>
    tmpccer &= ~TIM_CCER_CC1NP;
 800993c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8009940:	68cd      	ldr	r5, [r1, #12]
 8009942:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8009944:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009948:	e00c      	b.n	8009964 <TIM_OC1_SetConfig+0xa4>
    tmpccer &= ~TIM_CCER_CC1NP;
 800994a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800994e:	68cd      	ldr	r5, [r1, #12]
 8009950:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8009952:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009956:	e005      	b.n	8009964 <TIM_OC1_SetConfig+0xa4>
    tmpccer &= ~TIM_CCER_CC1NP;
 8009958:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800995c:	68cd      	ldr	r5, [r1, #12]
 800995e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8009960:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009964:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009968:	694d      	ldr	r5, [r1, #20]
 800996a:	698e      	ldr	r6, [r1, #24]
 800996c:	ea45 0c06 	orr.w	ip, r5, r6
 8009970:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009974:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009976:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009978:	684a      	ldr	r2, [r1, #4]
 800997a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800997c:	6203      	str	r3, [r0, #32]
}
 800997e:	bc70      	pop	{r4, r5, r6}
 8009980:	4770      	bx	lr

08009982 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009982:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009984:	6a03      	ldr	r3, [r0, #32]
 8009986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800998a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800998c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800998e:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009990:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009992:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009996:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999a:	680d      	ldr	r5, [r1, #0]
 800999c:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800999e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099a2:	688d      	ldr	r5, [r1, #8]
 80099a4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099a8:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 80099ac:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80099b0:	4560      	cmp	r0, ip
 80099b2:	d020      	beq.n	80099f6 <TIM_OC3_SetConfig+0x74>
 80099b4:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 80099b8:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80099bc:	4560      	cmp	r0, ip
 80099be:	d012      	beq.n	80099e6 <TIM_OC3_SetConfig+0x64>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c0:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 80099c4:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80099c8:	4560      	cmp	r0, ip
 80099ca:	d01b      	beq.n	8009a04 <TIM_OC3_SetConfig+0x82>
 80099cc:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 80099d0:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80099d4:	4560      	cmp	r0, ip
 80099d6:	d015      	beq.n	8009a04 <TIM_OC3_SetConfig+0x82>
 80099d8:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 80099dc:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80099e0:	4560      	cmp	r0, ip
 80099e2:	d117      	bne.n	8009a14 <TIM_OC3_SetConfig+0x92>
 80099e4:	e00e      	b.n	8009a04 <TIM_OC3_SetConfig+0x82>
    tmpccer &= ~TIM_CCER_CC3NP;
 80099e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099ea:	68cd      	ldr	r5, [r1, #12]
 80099ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80099f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099f4:	e006      	b.n	8009a04 <TIM_OC3_SetConfig+0x82>
    tmpccer &= ~TIM_CCER_CC3NP;
 80099f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099fa:	68cd      	ldr	r5, [r1, #12]
 80099fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a04:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a08:	694d      	ldr	r5, [r1, #20]
 8009a0a:	698e      	ldr	r6, [r1, #24]
 8009a0c:	ea45 0c06 	orr.w	ip, r5, r6
 8009a10:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a14:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a16:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a18:	684a      	ldr	r2, [r1, #4]
 8009a1a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a1c:	6203      	str	r3, [r0, #32]
}
 8009a1e:	bc70      	pop	{r4, r5, r6}
 8009a20:	4770      	bx	lr

08009a22 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a22:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a24:	6a03      	ldr	r3, [r0, #32]
 8009a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a2a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a2c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a2e:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a30:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a32:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009a36:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a3a:	680d      	ldr	r5, [r1, #0]
 8009a3c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a44:	688d      	ldr	r5, [r1, #8]
 8009a46:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009a4a:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8009a4e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009a52:	4560      	cmp	r0, ip
 8009a54:	d020      	beq.n	8009a98 <TIM_OC4_SetConfig+0x76>
 8009a56:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8009a5a:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009a5e:	4560      	cmp	r0, ip
 8009a60:	d012      	beq.n	8009a88 <TIM_OC4_SetConfig+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a62:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8009a66:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009a6a:	4560      	cmp	r0, ip
 8009a6c:	d01b      	beq.n	8009aa6 <TIM_OC4_SetConfig+0x84>
 8009a6e:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 8009a72:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009a76:	4560      	cmp	r0, ip
 8009a78:	d015      	beq.n	8009aa6 <TIM_OC4_SetConfig+0x84>
 8009a7a:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 8009a7e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009a82:	4560      	cmp	r0, ip
 8009a84:	d117      	bne.n	8009ab6 <TIM_OC4_SetConfig+0x94>
 8009a86:	e00e      	b.n	8009aa6 <TIM_OC4_SetConfig+0x84>
    tmpccer &= ~TIM_CCER_CC4NP;
 8009a88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009a8c:	68cd      	ldr	r5, [r1, #12]
 8009a8e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8009a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a96:	e006      	b.n	8009aa6 <TIM_OC4_SetConfig+0x84>
    tmpccer &= ~TIM_CCER_CC4NP;
 8009a98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009a9c:	68cd      	ldr	r5, [r1, #12]
 8009a9e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8009aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009aa6:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009aaa:	694d      	ldr	r5, [r1, #20]
 8009aac:	698e      	ldr	r6, [r1, #24]
 8009aae:	ea45 0c06 	orr.w	ip, r5, r6
 8009ab2:	ea44 148c 	orr.w	r4, r4, ip, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ab8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009aba:	684a      	ldr	r2, [r1, #4]
 8009abc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abe:	6203      	str	r3, [r0, #32]
}
 8009ac0:	bc70      	pop	{r4, r5, r6}
 8009ac2:	4770      	bx	lr

08009ac4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ac4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ac6:	6a03      	ldr	r3, [r0, #32]
 8009ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009acc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ace:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ad2:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ad4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ad8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009adc:	680d      	ldr	r5, [r1, #0]
 8009ade:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ae0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ae4:	688d      	ldr	r5, [r1, #8]
 8009ae6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aea:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8009aee:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009af2:	4560      	cmp	r0, ip
 8009af4:	d017      	beq.n	8009b26 <TIM_OC5_SetConfig+0x62>
 8009af6:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8009afa:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009afe:	4560      	cmp	r0, ip
 8009b00:	d011      	beq.n	8009b26 <TIM_OC5_SetConfig+0x62>
 8009b02:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8009b06:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009b0a:	4560      	cmp	r0, ip
 8009b0c:	d00b      	beq.n	8009b26 <TIM_OC5_SetConfig+0x62>
 8009b0e:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 8009b12:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009b16:	4560      	cmp	r0, ip
 8009b18:	d005      	beq.n	8009b26 <TIM_OC5_SetConfig+0x62>
 8009b1a:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 8009b1e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009b22:	4560      	cmp	r0, ip
 8009b24:	d104      	bne.n	8009b30 <TIM_OC5_SetConfig+0x6c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b26:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b2a:	694d      	ldr	r5, [r1, #20]
 8009b2c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b30:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b32:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b34:	684a      	ldr	r2, [r1, #4]
 8009b36:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b38:	6203      	str	r3, [r0, #32]
}
 8009b3a:	bc30      	pop	{r4, r5}
 8009b3c:	4770      	bx	lr

08009b3e <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b3e:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b40:	6a03      	ldr	r3, [r0, #32]
 8009b42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b46:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b48:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b4a:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b4c:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b4e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009b52:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b56:	680d      	ldr	r5, [r1, #0]
 8009b58:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b60:	688d      	ldr	r5, [r1, #8]
 8009b62:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b66:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8009b6a:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009b6e:	4560      	cmp	r0, ip
 8009b70:	d017      	beq.n	8009ba2 <TIM_OC6_SetConfig+0x64>
 8009b72:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8009b76:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009b7a:	4560      	cmp	r0, ip
 8009b7c:	d011      	beq.n	8009ba2 <TIM_OC6_SetConfig+0x64>
 8009b7e:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8009b82:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009b86:	4560      	cmp	r0, ip
 8009b88:	d00b      	beq.n	8009ba2 <TIM_OC6_SetConfig+0x64>
 8009b8a:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 8009b8e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009b92:	4560      	cmp	r0, ip
 8009b94:	d005      	beq.n	8009ba2 <TIM_OC6_SetConfig+0x64>
 8009b96:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 8009b9a:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009b9e:	4560      	cmp	r0, ip
 8009ba0:	d104      	bne.n	8009bac <TIM_OC6_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ba2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ba6:	694d      	ldr	r5, [r1, #20]
 8009ba8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bae:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bb0:	684a      	ldr	r2, [r1, #4]
 8009bb2:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb4:	6203      	str	r3, [r0, #32]
}
 8009bb6:	bc30      	pop	{r4, r5}
 8009bb8:	4770      	bx	lr

08009bba <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8009bba:	6803      	ldr	r3, [r0, #0]
 8009bbc:	6a19      	ldr	r1, [r3, #32]
 8009bbe:	f241 1211 	movw	r2, #4369	; 0x1111
 8009bc2:	4211      	tst	r1, r2
 8009bc4:	d108      	bne.n	8009bd8 <HAL_TIM_Base_Stop+0x1e>
 8009bc6:	6a19      	ldr	r1, [r3, #32]
 8009bc8:	f244 4244 	movw	r2, #17476	; 0x4444
 8009bcc:	4211      	tst	r1, r2
 8009bce:	d103      	bne.n	8009bd8 <HAL_TIM_Base_Stop+0x1e>
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	f022 0201 	bic.w	r2, r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8009bde:	2000      	movs	r0, #0
 8009be0:	4770      	bx	lr

08009be2 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009be2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d13f      	bne.n	8009c6c <HAL_TIM_Base_Start_IT+0x8a>
  htim->State = HAL_TIM_STATE_BUSY;
 8009bec:	2302      	movs	r3, #2
 8009bee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bf2:	6802      	ldr	r2, [r0, #0]
 8009bf4:	68d3      	ldr	r3, [r2, #12]
 8009bf6:	f043 0301 	orr.w	r3, r3, #1
 8009bfa:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bfc:	6803      	ldr	r3, [r0, #0]
 8009bfe:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8009c02:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d020      	beq.n	8009c4c <HAL_TIM_Base_Start_IT+0x6a>
 8009c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c0e:	d01d      	beq.n	8009c4c <HAL_TIM_Base_Start_IT+0x6a>
 8009c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c14:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d017      	beq.n	8009c4c <HAL_TIM_Base_Start_IT+0x6a>
 8009c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c20:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d011      	beq.n	8009c4c <HAL_TIM_Base_Start_IT+0x6a>
 8009c28:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 8009c2c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d00b      	beq.n	8009c4c <HAL_TIM_Base_Start_IT+0x6a>
 8009c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c38:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d005      	beq.n	8009c4c <HAL_TIM_Base_Start_IT+0x6a>
    __HAL_TIM_ENABLE(htim);
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	f042 0201 	orr.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009c48:	2000      	movs	r0, #0
 8009c4a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c4c:	6899      	ldr	r1, [r3, #8]
 8009c4e:	2207      	movs	r2, #7
 8009c50:	f2c0 0201 	movt	r2, #1
 8009c54:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c56:	2a06      	cmp	r2, #6
 8009c58:	d00a      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x8e>
 8009c5a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009c5e:	d009      	beq.n	8009c74 <HAL_TIM_Base_Start_IT+0x92>
      __HAL_TIM_ENABLE(htim);
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	f042 0201 	orr.w	r2, r2, #1
 8009c66:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009c68:	2000      	movs	r0, #0
 8009c6a:	4770      	bx	lr
    return HAL_ERROR;
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	4770      	bx	lr
  return HAL_OK;
 8009c70:	2000      	movs	r0, #0
 8009c72:	4770      	bx	lr
 8009c74:	2000      	movs	r0, #0
}
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIM_PWM_MspInit>:
}
 8009c78:	4770      	bx	lr

08009c7a <HAL_TIM_OC_DelayElapsedCallback>:
}
 8009c7a:	4770      	bx	lr

08009c7c <HAL_TIM_IC_CaptureCallback>:
}
 8009c7c:	4770      	bx	lr

08009c7e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8009c7e:	4770      	bx	lr

08009c80 <HAL_TIM_TriggerCallback>:
}
 8009c80:	4770      	bx	lr

08009c82 <HAL_TIM_IRQHandler>:
{
 8009c82:	b510      	push	{r4, lr}
 8009c84:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c86:	6803      	ldr	r3, [r0, #0]
 8009c88:	691a      	ldr	r2, [r3, #16]
 8009c8a:	f012 0f02 	tst.w	r2, #2
 8009c8e:	d012      	beq.n	8009cb6 <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	f012 0f02 	tst.w	r2, #2
 8009c96:	d00e      	beq.n	8009cb6 <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c98:	f06f 0202 	mvn.w	r2, #2
 8009c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ca2:	6803      	ldr	r3, [r0, #0]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	f013 0f03 	tst.w	r3, #3
 8009caa:	f000 809f 	beq.w	8009dec <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8009cae:	f7ff ffe5 	bl	8009c7c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	f012 0f04 	tst.w	r2, #4
 8009cbe:	d013      	beq.n	8009ce8 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	f012 0f04 	tst.w	r2, #4
 8009cc6:	d00f      	beq.n	8009ce8 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cc8:	f06f 0204 	mvn.w	r2, #4
 8009ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cce:	2302      	movs	r3, #2
 8009cd0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009cda:	f000 808d 	beq.w	8009df8 <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f7ff ffcc 	bl	8009c7c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	691a      	ldr	r2, [r3, #16]
 8009cec:	f012 0f08 	tst.w	r2, #8
 8009cf0:	d012      	beq.n	8009d18 <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	f012 0f08 	tst.w	r2, #8
 8009cf8:	d00e      	beq.n	8009d18 <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cfa:	f06f 0208 	mvn.w	r2, #8
 8009cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d00:	2304      	movs	r3, #4
 8009d02:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	f013 0f03 	tst.w	r3, #3
 8009d0c:	d07b      	beq.n	8009e06 <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7ff ffb4 	bl	8009c7c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d14:	2300      	movs	r3, #0
 8009d16:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	f012 0f10 	tst.w	r2, #16
 8009d20:	d012      	beq.n	8009d48 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d22:	68da      	ldr	r2, [r3, #12]
 8009d24:	f012 0f10 	tst.w	r2, #16
 8009d28:	d00e      	beq.n	8009d48 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d2a:	f06f 0210 	mvn.w	r2, #16
 8009d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d30:	2308      	movs	r3, #8
 8009d32:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009d3c:	d06a      	beq.n	8009e14 <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f7ff ff9c 	bl	8009c7c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d44:	2300      	movs	r3, #0
 8009d46:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	691a      	ldr	r2, [r3, #16]
 8009d4c:	f012 0f01 	tst.w	r2, #1
 8009d50:	d003      	beq.n	8009d5a <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	f012 0f01 	tst.w	r2, #1
 8009d58:	d163      	bne.n	8009e22 <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	691a      	ldr	r2, [r3, #16]
 8009d5e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009d62:	d003      	beq.n	8009d6c <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009d6a:	d161      	bne.n	8009e30 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	691a      	ldr	r2, [r3, #16]
 8009d70:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009d74:	d003      	beq.n	8009d7e <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009d7c:	d15f      	bne.n	8009e3e <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	691a      	ldr	r2, [r3, #16]
 8009d82:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009d86:	d003      	beq.n	8009d90 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009d8e:	d15d      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	691a      	ldr	r2, [r3, #16]
 8009d94:	f012 0f20 	tst.w	r2, #32
 8009d98:	d003      	beq.n	8009da2 <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	f012 0f20 	tst.w	r2, #32
 8009da0:	d15b      	bne.n	8009e5a <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	691a      	ldr	r2, [r3, #16]
 8009da6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8009daa:	d003      	beq.n	8009db4 <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8009db2:	d159      	bne.n	8009e68 <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8009dbc:	d003      	beq.n	8009dc6 <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8009dc4:	d157      	bne.n	8009e76 <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	691a      	ldr	r2, [r3, #16]
 8009dca:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8009dce:	d003      	beq.n	8009dd8 <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8009dd6:	d155      	bne.n	8009e84 <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8009de0:	d003      	beq.n	8009dea <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009de2:	68da      	ldr	r2, [r3, #12]
 8009de4:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8009de8:	d153      	bne.n	8009e92 <HAL_TIM_IRQHandler+0x210>
}
 8009dea:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dec:	f7ff ff45 	bl	8009c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7ff ff44 	bl	8009c7e <HAL_TIM_PWM_PulseFinishedCallback>
 8009df6:	e75c      	b.n	8009cb2 <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7ff ff3e 	bl	8009c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f7ff ff3d 	bl	8009c7e <HAL_TIM_PWM_PulseFinishedCallback>
 8009e04:	e76e      	b.n	8009ce4 <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e06:	4620      	mov	r0, r4
 8009e08:	f7ff ff37 	bl	8009c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f7ff ff36 	bl	8009c7e <HAL_TIM_PWM_PulseFinishedCallback>
 8009e12:	e77f      	b.n	8009d14 <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e14:	4620      	mov	r0, r4
 8009e16:	f7ff ff30 	bl	8009c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f7ff ff2f 	bl	8009c7e <HAL_TIM_PWM_PulseFinishedCallback>
 8009e20:	e790      	b.n	8009d44 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e22:	f06f 0201 	mvn.w	r2, #1
 8009e26:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f7f9 fe23 	bl	8003a74 <HAL_TIM_PeriodElapsedCallback>
 8009e2e:	e794      	b.n	8009d5a <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009e36:	4620      	mov	r0, r4
 8009e38:	f000 fded 	bl	800aa16 <HAL_TIMEx_BreakCallback>
 8009e3c:	e796      	b.n	8009d6c <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009e44:	4620      	mov	r0, r4
 8009e46:	f000 fde7 	bl	800aa18 <HAL_TIMEx_Break2Callback>
 8009e4a:	e798      	b.n	8009d7e <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e50:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7ff ff14 	bl	8009c80 <HAL_TIM_TriggerCallback>
 8009e58:	e79a      	b.n	8009d90 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e5a:	f06f 0220 	mvn.w	r2, #32
 8009e5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 fdd7 	bl	800aa14 <HAL_TIMEx_CommutCallback>
 8009e66:	e79c      	b.n	8009da2 <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009e68:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009e6c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fdd3 	bl	800aa1a <HAL_TIMEx_EncoderIndexCallback>
 8009e74:	e79e      	b.n	8009db4 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009e76:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009e7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fdcd 	bl	800aa1c <HAL_TIMEx_DirectionChangeCallback>
 8009e82:	e7a0      	b.n	8009dc6 <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009e84:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009e88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f000 fdc7 	bl	800aa1e <HAL_TIMEx_IndexErrorCallback>
 8009e90:	e7a2      	b.n	8009dd8 <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009e92:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009e96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f000 fdc1 	bl	800aa20 <HAL_TIMEx_TransitionErrorCallback>
}
 8009e9e:	e7a4      	b.n	8009dea <HAL_TIM_IRQHandler+0x168>

08009ea0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8009ea0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ea2:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8009ea6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009eaa:	4290      	cmp	r0, r2
 8009eac:	d05d      	beq.n	8009f6a <TIM_Base_SetConfig+0xca>
 8009eae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009eb2:	f000 8082 	beq.w	8009fba <TIM_Base_SetConfig+0x11a>
 8009eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009eba:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009ebe:	4290      	cmp	r0, r2
 8009ec0:	f000 8092 	beq.w	8009fe8 <TIM_Base_SetConfig+0x148>
 8009ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ec8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009ecc:	4290      	cmp	r0, r2
 8009ece:	f000 8086 	beq.w	8009fde <TIM_Base_SetConfig+0x13e>
 8009ed2:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 8009ed6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009eda:	4290      	cmp	r0, r2
 8009edc:	d05b      	beq.n	8009f96 <TIM_Base_SetConfig+0xf6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009ee2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009ee6:	4290      	cmp	r0, r2
 8009ee8:	d015      	beq.n	8009f16 <TIM_Base_SetConfig+0x76>
 8009eea:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8009eee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009ef2:	4290      	cmp	r0, r2
 8009ef4:	d01d      	beq.n	8009f32 <TIM_Base_SetConfig+0x92>
 8009ef6:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8009efa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009efe:	4290      	cmp	r0, r2
 8009f00:	d025      	beq.n	8009f4e <TIM_Base_SetConfig+0xae>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f06:	694a      	ldr	r2, [r1, #20]
 8009f08:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009f0a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f0c:	688b      	ldr	r3, [r1, #8]
 8009f0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f10:	680b      	ldr	r3, [r1, #0]
 8009f12:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f14:	e03c      	b.n	8009f90 <TIM_Base_SetConfig+0xf0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f1a:	68ca      	ldr	r2, [r1, #12]
 8009f1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f22:	694a      	ldr	r2, [r1, #20]
 8009f24:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009f26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f28:	688b      	ldr	r3, [r1, #8]
 8009f2a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f2c:	680b      	ldr	r3, [r1, #0]
 8009f2e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f30:	e02c      	b.n	8009f8c <TIM_Base_SetConfig+0xec>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f36:	68ca      	ldr	r2, [r1, #12]
 8009f38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f3e:	694a      	ldr	r2, [r1, #20]
 8009f40:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009f42:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f44:	688b      	ldr	r3, [r1, #8]
 8009f46:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f48:	680b      	ldr	r3, [r1, #0]
 8009f4a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f4c:	e01e      	b.n	8009f8c <TIM_Base_SetConfig+0xec>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f52:	68ca      	ldr	r2, [r1, #12]
 8009f54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f5a:	694a      	ldr	r2, [r1, #20]
 8009f5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009f5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f60:	688b      	ldr	r3, [r1, #8]
 8009f62:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f64:	680b      	ldr	r3, [r1, #0]
 8009f66:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f68:	e010      	b.n	8009f8c <TIM_Base_SetConfig+0xec>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009f6e:	684a      	ldr	r2, [r1, #4]
 8009f70:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f76:	68ca      	ldr	r2, [r1, #12]
 8009f78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f7e:	694a      	ldr	r2, [r1, #20]
 8009f80:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009f82:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f84:	688b      	ldr	r3, [r1, #8]
 8009f86:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f88:	680b      	ldr	r3, [r1, #0]
 8009f8a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8009f8c:	690b      	ldr	r3, [r1, #16]
 8009f8e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009f90:	2301      	movs	r3, #1
 8009f92:	6143      	str	r3, [r0, #20]
}
 8009f94:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009f9a:	684a      	ldr	r2, [r1, #4]
 8009f9c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fa2:	68ca      	ldr	r2, [r1, #12]
 8009fa4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009faa:	694a      	ldr	r2, [r1, #20]
 8009fac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009fae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fb0:	688b      	ldr	r3, [r1, #8]
 8009fb2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009fb4:	680b      	ldr	r3, [r1, #0]
 8009fb6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fb8:	e7e8      	b.n	8009f8c <TIM_Base_SetConfig+0xec>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009fbe:	684a      	ldr	r2, [r1, #4]
 8009fc0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fc6:	68ca      	ldr	r2, [r1, #12]
 8009fc8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fce:	694a      	ldr	r2, [r1, #20]
 8009fd0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009fd2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fd4:	688b      	ldr	r3, [r1, #8]
 8009fd6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009fd8:	680b      	ldr	r3, [r1, #0]
 8009fda:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fdc:	e7d8      	b.n	8009f90 <TIM_Base_SetConfig+0xf0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009fe2:	684a      	ldr	r2, [r1, #4]
 8009fe4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fe6:	e7ec      	b.n	8009fc2 <TIM_Base_SetConfig+0x122>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009fec:	684a      	ldr	r2, [r1, #4]
 8009fee:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ff0:	e7e7      	b.n	8009fc2 <TIM_Base_SetConfig+0x122>

08009ff2 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009ff2:	b360      	cbz	r0, 800a04e <HAL_TIM_Base_Init+0x5c>
{
 8009ff4:	b510      	push	{r4, lr}
 8009ff6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009ff8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009ffc:	b313      	cbz	r3, 800a044 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009ffe:	2302      	movs	r3, #2
 800a000:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a004:	4621      	mov	r1, r4
 800a006:	f851 0b04 	ldr.w	r0, [r1], #4
 800a00a:	f7ff ff49 	bl	8009ea0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a00e:	2301      	movs	r3, #1
 800a010:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a014:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a018:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a01c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a020:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a02c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a030:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a034:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a038:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a03c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a040:	2000      	movs	r0, #0
}
 800a042:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a044:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a048:	f7fb fd31 	bl	8005aae <HAL_TIM_Base_MspInit>
 800a04c:	e7d7      	b.n	8009ffe <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800a04e:	2001      	movs	r0, #1
}
 800a050:	4770      	bx	lr

0800a052 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800a052:	b360      	cbz	r0, 800a0ae <HAL_TIM_PWM_Init+0x5c>
{
 800a054:	b510      	push	{r4, lr}
 800a056:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a058:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a05c:	b313      	cbz	r3, 800a0a4 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a05e:	2302      	movs	r3, #2
 800a060:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a064:	4621      	mov	r1, r4
 800a066:	f851 0b04 	ldr.w	r0, [r1], #4
 800a06a:	f7ff ff19 	bl	8009ea0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a06e:	2301      	movs	r3, #1
 800a070:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a074:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a078:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a07c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a080:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a08c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a094:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a098:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a09c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a0a0:	2000      	movs	r0, #0
}
 800a0a2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a0a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800a0a8:	f7ff fde6 	bl	8009c78 <HAL_TIM_PWM_MspInit>
 800a0ac:	e7d7      	b.n	800a05e <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800a0ae:	2001      	movs	r0, #1
}
 800a0b0:	4770      	bx	lr

0800a0b2 <TIM_OC2_SetConfig>:
{
 800a0b2:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0b4:	6a03      	ldr	r3, [r0, #32]
 800a0b6:	f023 0310 	bic.w	r3, r3, #16
 800a0ba:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a0bc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a0be:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a0c0:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a0c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0ca:	680d      	ldr	r5, [r1, #0]
 800a0cc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800a0d0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0d4:	688d      	ldr	r5, [r1, #8]
 800a0d6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0da:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800a0de:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a0e2:	4560      	cmp	r0, ip
 800a0e4:	d020      	beq.n	800a128 <TIM_OC2_SetConfig+0x76>
 800a0e6:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800a0ea:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a0ee:	4560      	cmp	r0, ip
 800a0f0:	d012      	beq.n	800a118 <TIM_OC2_SetConfig+0x66>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0f2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 800a0f6:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a0fa:	4560      	cmp	r0, ip
 800a0fc:	d01b      	beq.n	800a136 <TIM_OC2_SetConfig+0x84>
 800a0fe:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 800a102:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a106:	4560      	cmp	r0, ip
 800a108:	d015      	beq.n	800a136 <TIM_OC2_SetConfig+0x84>
 800a10a:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 800a10e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a112:	4560      	cmp	r0, ip
 800a114:	d117      	bne.n	800a146 <TIM_OC2_SetConfig+0x94>
 800a116:	e00e      	b.n	800a136 <TIM_OC2_SetConfig+0x84>
    tmpccer &= ~TIM_CCER_CC2NP;
 800a118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a11c:	68cd      	ldr	r5, [r1, #12]
 800a11e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a126:	e006      	b.n	800a136 <TIM_OC2_SetConfig+0x84>
    tmpccer &= ~TIM_CCER_CC2NP;
 800a128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a12c:	68cd      	ldr	r5, [r1, #12]
 800a12e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a136:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a13a:	694d      	ldr	r5, [r1, #20]
 800a13c:	698e      	ldr	r6, [r1, #24]
 800a13e:	ea45 0c06 	orr.w	ip, r5, r6
 800a142:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 800a146:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a148:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a14a:	684a      	ldr	r2, [r1, #4]
 800a14c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800a14e:	6203      	str	r3, [r0, #32]
}
 800a150:	bc70      	pop	{r4, r5, r6}
 800a152:	4770      	bx	lr

0800a154 <HAL_TIM_PWM_ConfigChannel>:
{
 800a154:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a156:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	f000 8095 	beq.w	800a28a <HAL_TIM_PWM_ConfigChannel+0x136>
 800a160:	4604      	mov	r4, r0
 800a162:	460d      	mov	r5, r1
 800a164:	2301      	movs	r3, #1
 800a166:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800a16a:	2a14      	cmp	r2, #20
 800a16c:	f200 8088 	bhi.w	800a280 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800a170:	e8df f002 	tbb	[pc, r2]
 800a174:	8686860b 	.word	0x8686860b
 800a178:	8686861f 	.word	0x8686861f
 800a17c:	86868634 	.word	0x86868634
 800a180:	86868648 	.word	0x86868648
 800a184:	8686865d 	.word	0x8686865d
 800a188:	71          	.byte	0x71
 800a189:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a18a:	6800      	ldr	r0, [r0, #0]
 800a18c:	f7ff fb98 	bl	80098c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a190:	6822      	ldr	r2, [r4, #0]
 800a192:	6993      	ldr	r3, [r2, #24]
 800a194:	f043 0308 	orr.w	r3, r3, #8
 800a198:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a19a:	6822      	ldr	r2, [r4, #0]
 800a19c:	6993      	ldr	r3, [r2, #24]
 800a19e:	f023 0304 	bic.w	r3, r3, #4
 800a1a2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	6993      	ldr	r3, [r2, #24]
 800a1a8:	6929      	ldr	r1, [r5, #16]
 800a1aa:	430b      	orrs	r3, r1
 800a1ac:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ae:	2000      	movs	r0, #0
      break;
 800a1b0:	e067      	b.n	800a282 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1b2:	6800      	ldr	r0, [r0, #0]
 800a1b4:	f7ff ff7d 	bl	800a0b2 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1b8:	6822      	ldr	r2, [r4, #0]
 800a1ba:	6993      	ldr	r3, [r2, #24]
 800a1bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a1c0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1c2:	6822      	ldr	r2, [r4, #0]
 800a1c4:	6993      	ldr	r3, [r2, #24]
 800a1c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ca:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a1cc:	6822      	ldr	r2, [r4, #0]
 800a1ce:	6993      	ldr	r3, [r2, #24]
 800a1d0:	6929      	ldr	r1, [r5, #16]
 800a1d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a1d6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a1d8:	2000      	movs	r0, #0
      break;
 800a1da:	e052      	b.n	800a282 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a1dc:	6800      	ldr	r0, [r0, #0]
 800a1de:	f7ff fbd0 	bl	8009982 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a1e2:	6822      	ldr	r2, [r4, #0]
 800a1e4:	69d3      	ldr	r3, [r2, #28]
 800a1e6:	f043 0308 	orr.w	r3, r3, #8
 800a1ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a1ec:	6822      	ldr	r2, [r4, #0]
 800a1ee:	69d3      	ldr	r3, [r2, #28]
 800a1f0:	f023 0304 	bic.w	r3, r3, #4
 800a1f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1f6:	6822      	ldr	r2, [r4, #0]
 800a1f8:	69d3      	ldr	r3, [r2, #28]
 800a1fa:	6929      	ldr	r1, [r5, #16]
 800a1fc:	430b      	orrs	r3, r1
 800a1fe:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a200:	2000      	movs	r0, #0
      break;
 800a202:	e03e      	b.n	800a282 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a204:	6800      	ldr	r0, [r0, #0]
 800a206:	f7ff fc0c 	bl	8009a22 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a20a:	6822      	ldr	r2, [r4, #0]
 800a20c:	69d3      	ldr	r3, [r2, #28]
 800a20e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a212:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	69d3      	ldr	r3, [r2, #28]
 800a218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a21c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a21e:	6822      	ldr	r2, [r4, #0]
 800a220:	69d3      	ldr	r3, [r2, #28]
 800a222:	6929      	ldr	r1, [r5, #16]
 800a224:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a228:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a22a:	2000      	movs	r0, #0
      break;
 800a22c:	e029      	b.n	800a282 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a22e:	6800      	ldr	r0, [r0, #0]
 800a230:	f7ff fc48 	bl	8009ac4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a234:	6822      	ldr	r2, [r4, #0]
 800a236:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a238:	f043 0308 	orr.w	r3, r3, #8
 800a23c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a23e:	6822      	ldr	r2, [r4, #0]
 800a240:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a242:	f023 0304 	bic.w	r3, r3, #4
 800a246:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a24c:	6929      	ldr	r1, [r5, #16]
 800a24e:	430b      	orrs	r3, r1
 800a250:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800a252:	2000      	movs	r0, #0
      break;
 800a254:	e015      	b.n	800a282 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a256:	6800      	ldr	r0, [r0, #0]
 800a258:	f7ff fc71 	bl	8009b3e <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a25c:	6822      	ldr	r2, [r4, #0]
 800a25e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a260:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a264:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a266:	6822      	ldr	r2, [r4, #0]
 800a268:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a26a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a26e:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a270:	6822      	ldr	r2, [r4, #0]
 800a272:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a274:	6929      	ldr	r1, [r5, #16]
 800a276:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a27a:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800a27c:	2000      	movs	r0, #0
      break;
 800a27e:	e000      	b.n	800a282 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800a280:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800a282:	2300      	movs	r3, #0
 800a284:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800a288:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800a28a:	2002      	movs	r0, #2
 800a28c:	e7fc      	b.n	800a288 <HAL_TIM_PWM_ConfigChannel+0x134>

0800a28e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a28e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a290:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a292:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a296:	430a      	orrs	r2, r1
 800a298:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a29c:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2a0:	6082      	str	r2, [r0, #8]
}
 800a2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_TIM_ConfigClockSource>:
{
 800a2a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a2aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	f000 80db 	beq.w	800a46a <HAL_TIM_ConfigClockSource+0x1c2>
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800a2c2:	6802      	ldr	r2, [r0, #0]
 800a2c4:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2c6:	2388      	movs	r3, #136	; 0x88
 800a2c8:	f6cf 73ce 	movt	r3, #65486	; 0xffce
 800a2cc:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800a2ce:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800a2d0:	6808      	ldr	r0, [r1, #0]
 800a2d2:	2870      	cmp	r0, #112	; 0x70
 800a2d4:	f000 8090 	beq.w	800a3f8 <HAL_TIM_ConfigClockSource+0x150>
 800a2d8:	d852      	bhi.n	800a380 <HAL_TIM_ConfigClockSource+0xd8>
 800a2da:	2850      	cmp	r0, #80	; 0x50
 800a2dc:	f000 80a6 	beq.w	800a42c <HAL_TIM_ConfigClockSource+0x184>
 800a2e0:	d91f      	bls.n	800a322 <HAL_TIM_ConfigClockSource+0x7a>
 800a2e2:	2860      	cmp	r0, #96	; 0x60
 800a2e4:	d14a      	bne.n	800a37c <HAL_TIM_ConfigClockSource+0xd4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	6848      	ldr	r0, [r1, #4]
 800a2ea:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2ec:	6a1a      	ldr	r2, [r3, #32]
 800a2ee:	f022 0210 	bic.w	r2, r2, #16
 800a2f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2f4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800a2f6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2f8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2fc:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a304:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800a308:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a30a:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a30c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a30e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a310:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a318:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a31c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a31e:	2000      	movs	r0, #0
}
 800a320:	e04d      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
  switch (sClockSourceConfig->ClockSource)
 800a322:	2840      	cmp	r0, #64	; 0x40
 800a324:	d11c      	bne.n	800a360 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	6848      	ldr	r0, [r1, #4]
 800a32a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800a32c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a32e:	6a1a      	ldr	r2, [r3, #32]
 800a330:	f022 0201 	bic.w	r2, r2, #1
 800a334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a336:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a338:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a33c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a340:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a344:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a348:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a34a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a34c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a34e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a356:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a35a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a35c:	2000      	movs	r0, #0
}
 800a35e:	e02e      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
  switch (sClockSourceConfig->ClockSource)
 800a360:	f200 8081 	bhi.w	800a466 <HAL_TIM_ConfigClockSource+0x1be>
 800a364:	2820      	cmp	r0, #32
 800a366:	d03b      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x138>
 800a368:	d903      	bls.n	800a372 <HAL_TIM_ConfigClockSource+0xca>
 800a36a:	2830      	cmp	r0, #48	; 0x30
 800a36c:	d038      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x138>
 800a36e:	2001      	movs	r0, #1
 800a370:	e025      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
 800a372:	f030 0310 	bics.w	r3, r0, #16
 800a376:	d033      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x138>
 800a378:	2001      	movs	r0, #1
 800a37a:	e020      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
 800a37c:	2001      	movs	r0, #1
 800a37e:	e01e      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
 800a380:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800a384:	d045      	beq.n	800a412 <HAL_TIM_ConfigClockSource+0x16a>
 800a386:	d916      	bls.n	800a3b6 <HAL_TIM_ConfigClockSource+0x10e>
 800a388:	2230      	movs	r2, #48	; 0x30
 800a38a:	f2c0 0210 	movt	r2, #16
 800a38e:	4290      	cmp	r0, r2
 800a390:	d026      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x138>
 800a392:	2230      	movs	r2, #48	; 0x30
 800a394:	f2c0 0210 	movt	r2, #16
 800a398:	4290      	cmp	r0, r2
 800a39a:	d917      	bls.n	800a3cc <HAL_TIM_ConfigClockSource+0x124>
 800a39c:	2240      	movs	r2, #64	; 0x40
 800a39e:	f2c0 0210 	movt	r2, #16
 800a3a2:	4290      	cmp	r0, r2
 800a3a4:	d01c      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x138>
 800a3a6:	2270      	movs	r2, #112	; 0x70
 800a3a8:	f2c0 0210 	movt	r2, #16
 800a3ac:	4290      	cmp	r0, r2
 800a3ae:	bf18      	it	ne
 800a3b0:	2001      	movne	r0, #1
 800a3b2:	d015      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x138>
 800a3b4:	e003      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
  HAL_StatusTypeDef status = HAL_OK;
 800a3b6:	f5b0 5080 	subs.w	r0, r0, #4096	; 0x1000
 800a3ba:	bf18      	it	ne
 800a3bc:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800a3cc:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 800a3d0:	d006      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x138>
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f2c0 0210 	movt	r2, #16
 800a3d8:	4290      	cmp	r0, r2
 800a3da:	bf18      	it	ne
 800a3dc:	2001      	movne	r0, #1
 800a3de:	d1ee      	bne.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3e0:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a3e2:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a3e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3ec:	4302      	orrs	r2, r0
 800a3ee:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800a3f2:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a3f4:	2000      	movs	r0, #0
}
 800a3f6:	e7e2      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
      TIM_ETR_SetConfig(htim->Instance,
 800a3f8:	68cb      	ldr	r3, [r1, #12]
 800a3fa:	684a      	ldr	r2, [r1, #4]
 800a3fc:	6889      	ldr	r1, [r1, #8]
 800a3fe:	6820      	ldr	r0, [r4, #0]
 800a400:	f7ff ff45 	bl	800a28e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a404:	6822      	ldr	r2, [r4, #0]
 800a406:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a40c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a40e:	2000      	movs	r0, #0
      break;
 800a410:	e7d5      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
      TIM_ETR_SetConfig(htim->Instance,
 800a412:	68cb      	ldr	r3, [r1, #12]
 800a414:	684a      	ldr	r2, [r1, #4]
 800a416:	6889      	ldr	r1, [r1, #8]
 800a418:	6820      	ldr	r0, [r4, #0]
 800a41a:	f7ff ff38 	bl	800a28e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a41e:	6822      	ldr	r2, [r4, #0]
 800a420:	6893      	ldr	r3, [r2, #8]
 800a422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a426:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a428:	2000      	movs	r0, #0
      break;
 800a42a:	e7c8      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	6848      	ldr	r0, [r1, #4]
 800a430:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800a432:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a434:	6a1a      	ldr	r2, [r3, #32]
 800a436:	f022 0201 	bic.w	r2, r2, #1
 800a43a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a43c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a43e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a442:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a446:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a44a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a44c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a44e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a450:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a452:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a454:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a45c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800a460:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a462:	2000      	movs	r0, #0
}
 800a464:	e7ab      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
  switch (sClockSourceConfig->ClockSource)
 800a466:	2001      	movs	r0, #1
 800a468:	e7a9      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x116>
  __HAL_LOCK(htim);
 800a46a:	2002      	movs	r0, #2
 800a46c:	e7ad      	b.n	800a3ca <HAL_TIM_ConfigClockSource+0x122>

0800a46e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a46e:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a472:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a474:	f04f 0c01 	mov.w	ip, #1
 800a478:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 800a47c:	ea23 030c 	bic.w	r3, r3, ip
 800a480:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a482:	6a03      	ldr	r3, [r0, #32]
 800a484:	408a      	lsls	r2, r1
 800a486:	431a      	orrs	r2, r3
 800a488:	6202      	str	r2, [r0, #32]
}
 800a48a:	4770      	bx	lr

0800a48c <HAL_TIM_PWM_Start>:
{
 800a48c:	b510      	push	{r4, lr}
 800a48e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a490:	2910      	cmp	r1, #16
 800a492:	f200 8083 	bhi.w	800a59c <HAL_TIM_PWM_Start+0x110>
 800a496:	e8df f001 	tbb	[pc, r1]
 800a49a:	8109      	.short	0x8109
 800a49c:	81618181 	.word	0x81618181
 800a4a0:	816a8181 	.word	0x816a8181
 800a4a4:	81718181 	.word	0x81718181
 800a4a8:	8181      	.short	0x8181
 800a4aa:	7a          	.byte	0x7a
 800a4ab:	00          	.byte	0x00
 800a4ac:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	f040 80be 	bne.w	800a634 <HAL_TIM_PWM_Start+0x1a8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4be:	2201      	movs	r2, #1
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	f7ff ffd4 	bl	800a46e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800a4cc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d017      	beq.n	800a504 <HAL_TIM_PWM_Start+0x78>
 800a4d4:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 800a4d8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d011      	beq.n	800a504 <HAL_TIM_PWM_Start+0x78>
 800a4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a4e4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d00b      	beq.n	800a504 <HAL_TIM_PWM_Start+0x78>
 800a4ec:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 800a4f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d005      	beq.n	800a504 <HAL_TIM_PWM_Start+0x78>
 800a4f8:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800a4fc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a500:	4293      	cmp	r3, r2
 800a502:	d10a      	bne.n	800a51a <HAL_TIM_PWM_Start+0x8e>
    __HAL_TIM_MOE_ENABLE(htim);
 800a504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a50a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800a512:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a516:	4293      	cmp	r3, r2
 800a518:	d07c      	beq.n	800a614 <HAL_TIM_PWM_Start+0x188>
 800a51a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a51e:	d079      	beq.n	800a614 <HAL_TIM_PWM_Start+0x188>
 800a520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a524:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a528:	4293      	cmp	r3, r2
 800a52a:	d073      	beq.n	800a614 <HAL_TIM_PWM_Start+0x188>
 800a52c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a530:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a534:	4293      	cmp	r3, r2
 800a536:	d06d      	beq.n	800a614 <HAL_TIM_PWM_Start+0x188>
 800a538:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 800a53c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a540:	4293      	cmp	r3, r2
 800a542:	d067      	beq.n	800a614 <HAL_TIM_PWM_Start+0x188>
 800a544:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a548:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d061      	beq.n	800a614 <HAL_TIM_PWM_Start+0x188>
    __HAL_TIM_ENABLE(htim);
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	f042 0201 	orr.w	r2, r2, #1
 800a556:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a558:	2000      	movs	r0, #0
 800a55a:	e06a      	b.n	800a632 <HAL_TIM_PWM_Start+0x1a6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a55c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b01      	cmp	r3, #1
 800a564:	d168      	bne.n	800a638 <HAL_TIM_PWM_Start+0x1ac>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a566:	2302      	movs	r3, #2
 800a568:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a56c:	e7a7      	b.n	800a4be <HAL_TIM_PWM_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a56e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b01      	cmp	r3, #1
 800a576:	d03d      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x168>
    return HAL_ERROR;
 800a578:	2001      	movs	r0, #1
 800a57a:	e05a      	b.n	800a632 <HAL_TIM_PWM_Start+0x1a6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a57c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a580:	b2db      	uxtb	r3, r3
 800a582:	3b01      	subs	r3, #1
 800a584:	bf18      	it	ne
 800a586:	2301      	movne	r3, #1
 800a588:	b16b      	cbz	r3, 800a5a6 <HAL_TIM_PWM_Start+0x11a>
    return HAL_ERROR;
 800a58a:	2001      	movs	r0, #1
 800a58c:	e051      	b.n	800a632 <HAL_TIM_PWM_Start+0x1a6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a58e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a592:	b2db      	uxtb	r3, r3
 800a594:	3b01      	subs	r3, #1
 800a596:	bf18      	it	ne
 800a598:	2301      	movne	r3, #1
 800a59a:	e7f5      	b.n	800a588 <HAL_TIM_PWM_Start+0xfc>
 800a59c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d14a      	bne.n	800a63c <HAL_TIM_PWM_Start+0x1b0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5a6:	2910      	cmp	r1, #16
 800a5a8:	d830      	bhi.n	800a60c <HAL_TIM_PWM_Start+0x180>
 800a5aa:	a301      	add	r3, pc, #4	; (adr r3, 800a5b0 <HAL_TIM_PWM_Start+0x124>)
 800a5ac:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800a5b0:	0800a4b9 	.word	0x0800a4b9
 800a5b4:	0800a60d 	.word	0x0800a60d
 800a5b8:	0800a60d 	.word	0x0800a60d
 800a5bc:	0800a60d 	.word	0x0800a60d
 800a5c0:	0800a567 	.word	0x0800a567
 800a5c4:	0800a60d 	.word	0x0800a60d
 800a5c8:	0800a60d 	.word	0x0800a60d
 800a5cc:	0800a60d 	.word	0x0800a60d
 800a5d0:	0800a5f5 	.word	0x0800a5f5
 800a5d4:	0800a60d 	.word	0x0800a60d
 800a5d8:	0800a60d 	.word	0x0800a60d
 800a5dc:	0800a60d 	.word	0x0800a60d
 800a5e0:	0800a5fd 	.word	0x0800a5fd
 800a5e4:	0800a60d 	.word	0x0800a60d
 800a5e8:	0800a60d 	.word	0x0800a60d
 800a5ec:	0800a60d 	.word	0x0800a60d
 800a5f0:	0800a605 	.word	0x0800a605
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a5fa:	e760      	b.n	800a4be <HAL_TIM_PWM_Start+0x32>
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a602:	e75c      	b.n	800a4be <HAL_TIM_PWM_Start+0x32>
 800a604:	2302      	movs	r3, #2
 800a606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a60a:	e758      	b.n	800a4be <HAL_TIM_PWM_Start+0x32>
 800a60c:	2302      	movs	r3, #2
 800a60e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a612:	e754      	b.n	800a4be <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a614:	6899      	ldr	r1, [r3, #8]
 800a616:	2207      	movs	r2, #7
 800a618:	f2c0 0201 	movt	r2, #1
 800a61c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a61e:	2a06      	cmp	r2, #6
 800a620:	d00e      	beq.n	800a640 <HAL_TIM_PWM_Start+0x1b4>
 800a622:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a626:	d00d      	beq.n	800a644 <HAL_TIM_PWM_Start+0x1b8>
      __HAL_TIM_ENABLE(htim);
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	f042 0201 	orr.w	r2, r2, #1
 800a62e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a630:	2000      	movs	r0, #0
}
 800a632:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a634:	2001      	movs	r0, #1
 800a636:	e7fc      	b.n	800a632 <HAL_TIM_PWM_Start+0x1a6>
 800a638:	2001      	movs	r0, #1
 800a63a:	e7fa      	b.n	800a632 <HAL_TIM_PWM_Start+0x1a6>
 800a63c:	2001      	movs	r0, #1
 800a63e:	e7f8      	b.n	800a632 <HAL_TIM_PWM_Start+0x1a6>
  return HAL_OK;
 800a640:	2000      	movs	r0, #0
 800a642:	e7f6      	b.n	800a632 <HAL_TIM_PWM_Start+0x1a6>
 800a644:	2000      	movs	r0, #0
 800a646:	e7f4      	b.n	800a632 <HAL_TIM_PWM_Start+0x1a6>

0800a648 <HAL_TIM_PWM_Stop>:
{
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4604      	mov	r4, r0
 800a64c:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a64e:	2200      	movs	r2, #0
 800a650:	6800      	ldr	r0, [r0, #0]
 800a652:	f7ff ff0c 	bl	800a46e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800a65c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a660:	4293      	cmp	r3, r2
 800a662:	d017      	beq.n	800a694 <HAL_TIM_PWM_Stop+0x4c>
 800a664:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 800a668:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d011      	beq.n	800a694 <HAL_TIM_PWM_Stop+0x4c>
 800a670:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a674:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a678:	4293      	cmp	r3, r2
 800a67a:	d00b      	beq.n	800a694 <HAL_TIM_PWM_Stop+0x4c>
 800a67c:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 800a680:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a684:	4293      	cmp	r3, r2
 800a686:	d005      	beq.n	800a694 <HAL_TIM_PWM_Stop+0x4c>
 800a688:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800a68c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a690:	4293      	cmp	r3, r2
 800a692:	d10d      	bne.n	800a6b0 <HAL_TIM_PWM_Stop+0x68>
    __HAL_TIM_MOE_DISABLE(htim);
 800a694:	6a19      	ldr	r1, [r3, #32]
 800a696:	f241 1211 	movw	r2, #4369	; 0x1111
 800a69a:	4211      	tst	r1, r2
 800a69c:	d108      	bne.n	800a6b0 <HAL_TIM_PWM_Stop+0x68>
 800a69e:	6a19      	ldr	r1, [r3, #32]
 800a6a0:	f244 4244 	movw	r2, #17476	; 0x4444
 800a6a4:	4211      	tst	r1, r2
 800a6a6:	d103      	bne.n	800a6b0 <HAL_TIM_PWM_Stop+0x68>
 800a6a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6ae:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	6a19      	ldr	r1, [r3, #32]
 800a6b4:	f241 1211 	movw	r2, #4369	; 0x1111
 800a6b8:	4211      	tst	r1, r2
 800a6ba:	d108      	bne.n	800a6ce <HAL_TIM_PWM_Stop+0x86>
 800a6bc:	6a19      	ldr	r1, [r3, #32]
 800a6be:	f244 4244 	movw	r2, #17476	; 0x4444
 800a6c2:	4211      	tst	r1, r2
 800a6c4:	d103      	bne.n	800a6ce <HAL_TIM_PWM_Stop+0x86>
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a6ce:	b925      	cbnz	r5, 800a6da <HAL_TIM_PWM_Stop+0x92>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	bd38      	pop	{r3, r4, r5, pc}
 800a6da:	3d04      	subs	r5, #4
 800a6dc:	2d0c      	cmp	r5, #12
 800a6de:	d818      	bhi.n	800a712 <HAL_TIM_PWM_Stop+0xca>
 800a6e0:	e8df f005 	tbb	[pc, r5]
 800a6e4:	17171707 	.word	0x17171707
 800a6e8:	1717170b 	.word	0x1717170b
 800a6ec:	1717170f 	.word	0x1717170f
 800a6f0:	13          	.byte	0x13
 800a6f1:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a6f8:	e7ed      	b.n	800a6d6 <HAL_TIM_PWM_Stop+0x8e>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a700:	e7e9      	b.n	800a6d6 <HAL_TIM_PWM_Stop+0x8e>
 800a702:	2301      	movs	r3, #1
 800a704:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a708:	e7e5      	b.n	800a6d6 <HAL_TIM_PWM_Stop+0x8e>
 800a70a:	2301      	movs	r3, #1
 800a70c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a710:	e7e1      	b.n	800a6d6 <HAL_TIM_PWM_Stop+0x8e>
 800a712:	2301      	movs	r3, #1
 800a714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a718:	e7dd      	b.n	800a6d6 <HAL_TIM_PWM_Stop+0x8e>

0800a71a <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a71a:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a71e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a720:	f04f 0c04 	mov.w	ip, #4
 800a724:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &=  ~tmp;
 800a728:	ea23 030c 	bic.w	r3, r3, ip
 800a72c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a72e:	6a03      	ldr	r3, [r0, #32]
 800a730:	408a      	lsls	r2, r1
 800a732:	431a      	orrs	r2, r3
 800a734:	6202      	str	r2, [r0, #32]
}
 800a736:	4770      	bx	lr

0800a738 <HAL_TIMEx_PWMN_Start>:
{
 800a738:	b510      	push	{r4, lr}
 800a73a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a73c:	460b      	mov	r3, r1
 800a73e:	2900      	cmp	r1, #0
 800a740:	d139      	bne.n	800a7b6 <HAL_TIMEx_PWMN_Start+0x7e>
 800a742:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 800a746:	b2d2      	uxtb	r2, r2
 800a748:	2a01      	cmp	r2, #1
 800a74a:	d163      	bne.n	800a814 <HAL_TIMEx_PWMN_Start+0xdc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a74c:	2202      	movs	r2, #2
 800a74e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a752:	2204      	movs	r2, #4
 800a754:	4619      	mov	r1, r3
 800a756:	6820      	ldr	r0, [r4, #0]
 800a758:	f7ff ffdf 	bl	800a71a <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800a75c:	6822      	ldr	r2, [r4, #0]
 800a75e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800a760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a764:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800a76c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a770:	4293      	cmp	r3, r2
 800a772:	d03f      	beq.n	800a7f4 <HAL_TIMEx_PWMN_Start+0xbc>
 800a774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a778:	d03c      	beq.n	800a7f4 <HAL_TIMEx_PWMN_Start+0xbc>
 800a77a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a77e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a782:	4293      	cmp	r3, r2
 800a784:	d036      	beq.n	800a7f4 <HAL_TIMEx_PWMN_Start+0xbc>
 800a786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a78a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a78e:	4293      	cmp	r3, r2
 800a790:	d030      	beq.n	800a7f4 <HAL_TIMEx_PWMN_Start+0xbc>
 800a792:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 800a796:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d02a      	beq.n	800a7f4 <HAL_TIMEx_PWMN_Start+0xbc>
 800a79e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a7a2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d024      	beq.n	800a7f4 <HAL_TIMEx_PWMN_Start+0xbc>
    __HAL_TIM_ENABLE(htim);
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	f042 0201 	orr.w	r2, r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	e02d      	b.n	800a812 <HAL_TIMEx_PWMN_Start+0xda>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a7b6:	2904      	cmp	r1, #4
 800a7b8:	d013      	beq.n	800a7e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a7ba:	2908      	cmp	r1, #8
 800a7bc:	bf0c      	ite	eq
 800a7be:	f890 2046 	ldrbeq.w	r2, [r0, #70]	; 0x46
 800a7c2:	f890 2047 	ldrbne.w	r2, [r0, #71]	; 0x47
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	3a01      	subs	r2, #1
 800a7ca:	bf18      	it	ne
 800a7cc:	2201      	movne	r2, #1
 800a7ce:	bb4a      	cbnz	r2, 800a824 <HAL_TIMEx_PWMN_Start+0xec>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	f04f 0202 	mov.w	r2, #2
 800a7d6:	bf0c      	ite	eq
 800a7d8:	f884 2046 	strbeq.w	r2, [r4, #70]	; 0x46
 800a7dc:	f884 2047 	strbne.w	r2, [r4, #71]	; 0x47
 800a7e0:	e7b7      	b.n	800a752 <HAL_TIMEx_PWMN_Start+0x1a>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a7e2:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 800a7e6:	b2d2      	uxtb	r2, r2
 800a7e8:	2a01      	cmp	r2, #1
 800a7ea:	d115      	bne.n	800a818 <HAL_TIMEx_PWMN_Start+0xe0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 800a7f2:	e7ae      	b.n	800a752 <HAL_TIMEx_PWMN_Start+0x1a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7f4:	6899      	ldr	r1, [r3, #8]
 800a7f6:	2207      	movs	r2, #7
 800a7f8:	f2c0 0201 	movt	r2, #1
 800a7fc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fe:	2a06      	cmp	r2, #6
 800a800:	d00c      	beq.n	800a81c <HAL_TIMEx_PWMN_Start+0xe4>
 800a802:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a806:	d00b      	beq.n	800a820 <HAL_TIMEx_PWMN_Start+0xe8>
      __HAL_TIM_ENABLE(htim);
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	f042 0201 	orr.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a810:	2000      	movs	r0, #0
}
 800a812:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a814:	2001      	movs	r0, #1
 800a816:	e7fc      	b.n	800a812 <HAL_TIMEx_PWMN_Start+0xda>
 800a818:	2001      	movs	r0, #1
 800a81a:	e7fa      	b.n	800a812 <HAL_TIMEx_PWMN_Start+0xda>
  return HAL_OK;
 800a81c:	2000      	movs	r0, #0
 800a81e:	e7f8      	b.n	800a812 <HAL_TIMEx_PWMN_Start+0xda>
 800a820:	2000      	movs	r0, #0
 800a822:	e7f6      	b.n	800a812 <HAL_TIMEx_PWMN_Start+0xda>
    return HAL_ERROR;
 800a824:	2001      	movs	r0, #1
 800a826:	e7f4      	b.n	800a812 <HAL_TIMEx_PWMN_Start+0xda>

0800a828 <HAL_TIMEx_PWMN_Stop>:
{
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4604      	mov	r4, r0
 800a82c:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a82e:	2200      	movs	r2, #0
 800a830:	6800      	ldr	r0, [r0, #0]
 800a832:	f7ff ff72 	bl	800a71a <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	6a19      	ldr	r1, [r3, #32]
 800a83a:	f241 1211 	movw	r2, #4369	; 0x1111
 800a83e:	4211      	tst	r1, r2
 800a840:	d108      	bne.n	800a854 <HAL_TIMEx_PWMN_Stop+0x2c>
 800a842:	6a19      	ldr	r1, [r3, #32]
 800a844:	f244 4244 	movw	r2, #17476	; 0x4444
 800a848:	4211      	tst	r1, r2
 800a84a:	d103      	bne.n	800a854 <HAL_TIMEx_PWMN_Stop+0x2c>
 800a84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a84e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a852:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	6a19      	ldr	r1, [r3, #32]
 800a858:	f241 1211 	movw	r2, #4369	; 0x1111
 800a85c:	4211      	tst	r1, r2
 800a85e:	d108      	bne.n	800a872 <HAL_TIMEx_PWMN_Stop+0x4a>
 800a860:	6a19      	ldr	r1, [r3, #32]
 800a862:	f244 4244 	movw	r2, #17476	; 0x4444
 800a866:	4211      	tst	r1, r2
 800a868:	d103      	bne.n	800a872 <HAL_TIMEx_PWMN_Stop+0x4a>
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	f022 0201 	bic.w	r2, r2, #1
 800a870:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a872:	b925      	cbnz	r5, 800a87e <HAL_TIMEx_PWMN_Stop+0x56>
 800a874:	2301      	movs	r3, #1
 800a876:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a87a:	2000      	movs	r0, #0
 800a87c:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a87e:	2d04      	cmp	r5, #4
 800a880:	d008      	beq.n	800a894 <HAL_TIMEx_PWMN_Stop+0x6c>
 800a882:	2d08      	cmp	r5, #8
 800a884:	f04f 0301 	mov.w	r3, #1
 800a888:	bf0c      	ite	eq
 800a88a:	f884 3046 	strbeq.w	r3, [r4, #70]	; 0x46
 800a88e:	f884 3047 	strbne.w	r3, [r4, #71]	; 0x47
 800a892:	e7f2      	b.n	800a87a <HAL_TIMEx_PWMN_Stop+0x52>
 800a894:	2301      	movs	r3, #1
 800a896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a89a:	e7ee      	b.n	800a87a <HAL_TIMEx_PWMN_Stop+0x52>

0800a89c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800a89c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800a8a0:	2a01      	cmp	r2, #1
 800a8a2:	d050      	beq.n	800a946 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
{
 800a8a4:	b430      	push	{r4, r5}
 800a8a6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800a8b4:	6800      	ldr	r0, [r0, #0]
 800a8b6:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a8b8:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8ba:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800a8be:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a8c2:	4560      	cmp	r0, ip
 800a8c4:	d005      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800a8c6:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800a8ca:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a8ce:	4560      	cmp	r0, ip
 800a8d0:	d103      	bne.n	800a8da <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8d6:	684d      	ldr	r5, [r1, #4]
 800a8d8:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8da:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800a8de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8e2:	680d      	ldr	r5, [r1, #0]
 800a8e4:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 800a8e6:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800a8ee:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800a8f2:	4282      	cmp	r2, r0
 800a8f4:	d01a      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a8f6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a8fa:	d017      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a8fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a900:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a904:	4282      	cmp	r2, r0
 800a906:	d011      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a908:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a90c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a910:	4282      	cmp	r2, r0
 800a912:	d00b      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a914:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800a918:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800a91c:	4282      	cmp	r2, r0
 800a91e:	d005      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a920:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a924:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800a928:	4282      	cmp	r2, r0
 800a92a:	d104      	bne.n	800a936 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a92c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a930:	6889      	ldr	r1, [r1, #8]
 800a932:	430c      	orrs	r4, r1
    htim->Instance->SMCR = tmpsmcr;
 800a934:	6094      	str	r4, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800a936:	2201      	movs	r2, #1
 800a938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a93c:	2000      	movs	r0, #0
 800a93e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
}
 800a942:	bc30      	pop	{r4, r5}
 800a944:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a946:	2002      	movs	r0, #2
}
 800a948:	4770      	bx	lr

0800a94a <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800a94a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d036      	beq.n	800a9c0 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
{
 800a952:	b410      	push	{r4}
 800a954:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800a956:	2301      	movs	r3, #1
 800a958:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a95c:	68cb      	ldr	r3, [r1, #12]
 800a95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a962:	6888      	ldr	r0, [r1, #8]
 800a964:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a96a:	6848      	ldr	r0, [r1, #4]
 800a96c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a96e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a972:	6808      	ldr	r0, [r1, #0]
 800a974:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a97a:	6908      	ldr	r0, [r1, #16]
 800a97c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a97e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a982:	6948      	ldr	r0, [r1, #20]
 800a984:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a98a:	6b08      	ldr	r0, [r1, #48]	; 0x30
 800a98c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a98e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800a992:	6988      	ldr	r0, [r1, #24]
 800a994:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a998:	6810      	ldr	r0, [r2, #0]
 800a99a:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800a99e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a9a2:	4560      	cmp	r0, ip
 800a9a4:	d00e      	beq.n	800a9c4 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 800a9a6:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800a9aa:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a9ae:	4560      	cmp	r0, ip
 800a9b0:	d01e      	beq.n	800a9f0 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
  htim->Instance->BDTR = tmpbdtr;
 800a9b2:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
}
 800a9ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9be:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a9c0:	2002      	movs	r0, #2
}
 800a9c2:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a9c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9c8:	69cc      	ldr	r4, [r1, #28]
 800a9ca:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a9d0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800a9d2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a9d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9da:	6a0c      	ldr	r4, [r1, #32]
 800a9dc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a9de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a9e2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800a9e4:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a9e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a9ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a9ec:	430b      	orrs	r3, r1
 800a9ee:	e7e0      	b.n	800a9b2 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a9f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9f4:	69cc      	ldr	r4, [r1, #28]
 800a9f6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a9fc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800a9fe:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa06:	6a0c      	ldr	r4, [r1, #32]
 800aa08:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800aa0e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800aa10:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800aa12:	e7e8      	b.n	800a9e6 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>

0800aa14 <HAL_TIMEx_CommutCallback>:
}
 800aa14:	4770      	bx	lr

0800aa16 <HAL_TIMEx_BreakCallback>:
}
 800aa16:	4770      	bx	lr

0800aa18 <HAL_TIMEx_Break2Callback>:
}
 800aa18:	4770      	bx	lr

0800aa1a <HAL_TIMEx_EncoderIndexCallback>:
}
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_TIMEx_DirectionChangeCallback>:
}
 800aa1c:	4770      	bx	lr

0800aa1e <HAL_TIMEx_IndexErrorCallback>:
}
 800aa1e:	4770      	bx	lr

0800aa20 <HAL_TIMEx_TransitionErrorCallback>:
}
 800aa20:	4770      	bx	lr

0800aa22 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa22:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa24:	e852 3f00 	ldrex	r3, [r2]
 800aa28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2c:	e842 3100 	strex	r1, r3, [r2]
 800aa30:	2900      	cmp	r1, #0
 800aa32:	d1f6      	bne.n	800aa22 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa36:	f102 0308 	add.w	r3, r2, #8
 800aa3a:	e853 3f00 	ldrex	r3, [r3]
 800aa3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa42:	3208      	adds	r2, #8
 800aa44:	e842 3100 	strex	r1, r3, [r2]
 800aa48:	2900      	cmp	r1, #0
 800aa4a:	d1f3      	bne.n	800aa34 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa4c:	2320      	movs	r3, #32
 800aa4e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800aa52:	4770      	bx	lr

0800aa54 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa54:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	e852 3f00 	ldrex	r3, [r2]
 800aa5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5e:	e842 3100 	strex	r1, r3, [r2]
 800aa62:	2900      	cmp	r1, #0
 800aa64:	d1f6      	bne.n	800aa54 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa66:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa68:	f102 0308 	add.w	r3, r2, #8
 800aa6c:	e853 3f00 	ldrex	r3, [r3]
 800aa70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	3208      	adds	r2, #8
 800aa7a:	e842 3100 	strex	r1, r3, [r2]
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	d1f1      	bne.n	800aa66 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa82:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d006      	beq.n	800aa96 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa88:	2320      	movs	r3, #32
 800aa8a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa92:	6703      	str	r3, [r0, #112]	; 0x70
}
 800aa94:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa98:	e852 3f00 	ldrex	r3, [r2]
 800aa9c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa0:	e842 3100 	strex	r1, r3, [r2]
 800aaa4:	2900      	cmp	r1, #0
 800aaa6:	d1f6      	bne.n	800aa96 <UART_EndRxTransfer+0x42>
 800aaa8:	e7ee      	b.n	800aa88 <UART_EndRxTransfer+0x34>

0800aaaa <HAL_UART_Transmit_DMA>:
{
 800aaaa:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800aaac:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800aab0:	2a20      	cmp	r2, #32
 800aab2:	d153      	bne.n	800ab5c <HAL_UART_Transmit_DMA+0xb2>
{
 800aab4:	b510      	push	{r4, lr}
 800aab6:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800aab8:	2900      	cmp	r1, #0
 800aaba:	d051      	beq.n	800ab60 <HAL_UART_Transmit_DMA+0xb6>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d051      	beq.n	800ab64 <HAL_UART_Transmit_DMA+0xba>
    __HAL_LOCK(huart);
 800aac0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800aac4:	2a01      	cmp	r2, #1
 800aac6:	d04f      	beq.n	800ab68 <HAL_UART_Transmit_DMA+0xbe>
 800aac8:	2201      	movs	r2, #1
 800aaca:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800aace:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800aad0:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800aad4:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad8:	2200      	movs	r2, #0
 800aada:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aade:	2221      	movs	r2, #33	; 0x21
 800aae0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800aae4:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800aae6:	b329      	cbz	r1, 800ab34 <HAL_UART_Transmit_DMA+0x8a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aae8:	f64a 326f 	movw	r2, #43887	; 0xab6f
 800aaec:	f6c0 0200 	movt	r2, #2048	; 0x800
 800aaf0:	62ca      	str	r2, [r1, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aaf2:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800aaf4:	f64a 32b9 	movw	r2, #43961	; 0xabb9
 800aaf8:	f6c0 0200 	movt	r2, #2048	; 0x800
 800aafc:	630a      	str	r2, [r1, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aafe:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800ab00:	f64a 32c5 	movw	r2, #43973	; 0xabc5
 800ab04:	f6c0 0200 	movt	r2, #2048	; 0x800
 800ab08:	634a      	str	r2, [r1, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800ab0a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ab10:	6802      	ldr	r2, [r0, #0]
 800ab12:	3228      	adds	r2, #40	; 0x28
 800ab14:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800ab16:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800ab18:	f7fc fb6c 	bl	80071f4 <HAL_DMA_Start_IT>
 800ab1c:	b150      	cbz	r0, 800ab34 <HAL_UART_Transmit_DMA+0x8a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ab1e:	2310      	movs	r3, #16
 800ab20:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800ab24:	2300      	movs	r3, #0
 800ab26:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800ab2a:	2320      	movs	r3, #32
 800ab2c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800ab30:	2001      	movs	r0, #1
 800ab32:	e012      	b.n	800ab5a <HAL_UART_Transmit_DMA+0xb0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	2240      	movs	r2, #64	; 0x40
 800ab38:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab40:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab42:	f102 0308 	add.w	r3, r2, #8
 800ab46:	e853 3f00 	ldrex	r3, [r3]
 800ab4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4e:	3208      	adds	r2, #8
 800ab50:	e842 3100 	strex	r1, r3, [r2]
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d1f3      	bne.n	800ab40 <HAL_UART_Transmit_DMA+0x96>
    return HAL_OK;
 800ab58:	2000      	movs	r0, #0
}
 800ab5a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800ab5c:	2002      	movs	r0, #2
}
 800ab5e:	4770      	bx	lr
      return HAL_ERROR;
 800ab60:	2001      	movs	r0, #1
 800ab62:	e7fa      	b.n	800ab5a <HAL_UART_Transmit_DMA+0xb0>
 800ab64:	2001      	movs	r0, #1
 800ab66:	e7f8      	b.n	800ab5a <HAL_UART_Transmit_DMA+0xb0>
    __HAL_LOCK(huart);
 800ab68:	2002      	movs	r0, #2
 800ab6a:	e7f6      	b.n	800ab5a <HAL_UART_Transmit_DMA+0xb0>

0800ab6c <HAL_UART_TxCpltCallback>:
}
 800ab6c:	4770      	bx	lr

0800ab6e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab6e:	b508      	push	{r3, lr}
 800ab70:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab72:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f013 0f20 	tst.w	r3, #32
 800ab7c:	d118      	bne.n	800abb0 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab84:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	f102 0308 	add.w	r3, r2, #8
 800ab8a:	e853 3f00 	ldrex	r3, [r3]
 800ab8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab92:	3208      	adds	r2, #8
 800ab94:	e842 3100 	strex	r1, r3, [r2]
 800ab98:	2900      	cmp	r1, #0
 800ab9a:	d1f3      	bne.n	800ab84 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab9c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	e852 3f00 	ldrex	r3, [r2]
 800aba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	e842 3100 	strex	r1, r3, [r2]
 800abaa:	2900      	cmp	r1, #0
 800abac:	d1f6      	bne.n	800ab9c <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abae:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800abb0:	f7ff ffdc 	bl	800ab6c <HAL_UART_TxCpltCallback>
}
 800abb4:	e7fb      	b.n	800abae <UART_DMATransmitCplt+0x40>

0800abb6 <HAL_UART_TxHalfCpltCallback>:
}
 800abb6:	4770      	bx	lr

0800abb8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abb8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800abba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800abbc:	f7ff fffb 	bl	800abb6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abc0:	bd08      	pop	{r3, pc}

0800abc2 <HAL_UART_ErrorCallback>:
}
 800abc2:	4770      	bx	lr

0800abc4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abc4:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abc6:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800abc8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800abcc:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800abd8:	d001      	beq.n	800abde <UART_DMAError+0x1a>
 800abda:	2a21      	cmp	r2, #33	; 0x21
 800abdc:	d010      	beq.n	800ac00 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800abe6:	d001      	beq.n	800abec <UART_DMAError+0x28>
 800abe8:	2d22      	cmp	r5, #34	; 0x22
 800abea:	d010      	beq.n	800ac0e <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800abec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800abf0:	f043 0310 	orr.w	r3, r3, #16
 800abf4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abf8:	4620      	mov	r0, r4
 800abfa:	f7ff ffe2 	bl	800abc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ac06:	4620      	mov	r0, r4
 800ac08:	f7ff ff0b 	bl	800aa22 <UART_EndTxTransfer>
 800ac0c:	e7e7      	b.n	800abde <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ac14:	4620      	mov	r0, r4
 800ac16:	f7ff ff1d 	bl	800aa54 <UART_EndRxTransfer>
 800ac1a:	e7e7      	b.n	800abec <UART_DMAError+0x28>

0800ac1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac1e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800ac20:	2300      	movs	r3, #0
 800ac22:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ac26:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac2a:	f7ff ffca 	bl	800abc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac2e:	bd08      	pop	{r3, pc}

0800ac30 <HAL_UARTEx_RxEventCallback>:
}
 800ac30:	4770      	bx	lr

0800ac32 <HAL_UART_IRQHandler>:
{
 800ac32:	b538      	push	{r3, r4, r5, lr}
 800ac34:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac36:	6802      	ldr	r2, [r0, #0]
 800ac38:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac3a:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac3c:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800ac3e:	f640 0c0f 	movw	ip, #2063	; 0x80f
 800ac42:	ea13 0f0c 	tst.w	r3, ip
 800ac46:	d10e      	bne.n	800ac66 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac48:	f013 0f20 	tst.w	r3, #32
 800ac4c:	d01a      	beq.n	800ac84 <HAL_UART_IRQHandler+0x52>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac4e:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac52:	f000 5580 	and.w	r5, r0, #268435456	; 0x10000000
 800ac56:	ea5c 0c05 	orrs.w	ip, ip, r5
 800ac5a:	d013      	beq.n	800ac84 <HAL_UART_IRQHandler+0x52>
      if (huart->RxISR != NULL)
 800ac5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac5e:	b3d3      	cbz	r3, 800acd6 <HAL_UART_IRQHandler+0xa4>
        huart->RxISR(huart);
 800ac60:	4620      	mov	r0, r4
 800ac62:	4798      	blx	r3
 800ac64:	e037      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ac66:	f04f 0c01 	mov.w	ip, #1
 800ac6a:	f2c1 0c00 	movt	ip, #4096	; 0x1000
 800ac6e:	ea00 0e0c 	and.w	lr, r0, ip
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ac72:	f44f 7c90 	mov.w	ip, #288	; 0x120
 800ac76:	f2c0 4c00 	movt	ip, #1024	; 0x400
 800ac7a:	ea01 0c0c 	and.w	ip, r1, ip
 800ac7e:	ea5c 0c0e 	orrs.w	ip, ip, lr
 800ac82:	d129      	bne.n	800acd8 <HAL_UART_IRQHandler+0xa6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac84:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800ac86:	2d01      	cmp	r5, #1
 800ac88:	f000 80c4 	beq.w	800ae14 <HAL_UART_IRQHandler+0x1e2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac8c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ac90:	d003      	beq.n	800ac9a <HAL_UART_IRQHandler+0x68>
 800ac92:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800ac96:	f040 8155 	bne.w	800af44 <HAL_UART_IRQHandler+0x312>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ac9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ac9e:	d006      	beq.n	800acae <HAL_UART_IRQHandler+0x7c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aca0:	f001 0280 	and.w	r2, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aca4:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 800aca8:	4302      	orrs	r2, r0
 800acaa:	f040 8152 	bne.w	800af52 <HAL_UART_IRQHandler+0x320>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800acae:	f013 0f40 	tst.w	r3, #64	; 0x40
 800acb2:	d003      	beq.n	800acbc <HAL_UART_IRQHandler+0x8a>
 800acb4:	f011 0f40 	tst.w	r1, #64	; 0x40
 800acb8:	f040 8152 	bne.w	800af60 <HAL_UART_IRQHandler+0x32e>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800acbc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800acc0:	d003      	beq.n	800acca <HAL_UART_IRQHandler+0x98>
 800acc2:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800acc6:	f040 815d 	bne.w	800af84 <HAL_UART_IRQHandler+0x352>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800acca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800acce:	d002      	beq.n	800acd6 <HAL_UART_IRQHandler+0xa4>
 800acd0:	2900      	cmp	r1, #0
 800acd2:	f2c0 815b 	blt.w	800af8c <HAL_UART_IRQHandler+0x35a>
}
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800acd8:	f013 0f01 	tst.w	r3, #1
 800acdc:	d009      	beq.n	800acf2 <HAL_UART_IRQHandler+0xc0>
 800acde:	f411 7f80 	tst.w	r1, #256	; 0x100
 800ace2:	d006      	beq.n	800acf2 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ace4:	2501      	movs	r5, #1
 800ace6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ace8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800acec:	432a      	orrs	r2, r5
 800acee:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acf2:	f013 0f02 	tst.w	r3, #2
 800acf6:	d00f      	beq.n	800ad18 <HAL_UART_IRQHandler+0xe6>
 800acf8:	f010 0f01 	tst.w	r0, #1
 800acfc:	d01b      	beq.n	800ad36 <HAL_UART_IRQHandler+0x104>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800acfe:	6822      	ldr	r2, [r4, #0]
 800ad00:	2502      	movs	r5, #2
 800ad02:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad04:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ad08:	f042 0204 	orr.w	r2, r2, #4
 800ad0c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad10:	f013 0f04 	tst.w	r3, #4
 800ad14:	d106      	bne.n	800ad24 <HAL_UART_IRQHandler+0xf2>
 800ad16:	e00e      	b.n	800ad36 <HAL_UART_IRQHandler+0x104>
 800ad18:	f013 0f04 	tst.w	r3, #4
 800ad1c:	d00b      	beq.n	800ad36 <HAL_UART_IRQHandler+0x104>
 800ad1e:	f010 0f01 	tst.w	r0, #1
 800ad22:	d008      	beq.n	800ad36 <HAL_UART_IRQHandler+0x104>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad24:	6822      	ldr	r2, [r4, #0]
 800ad26:	2504      	movs	r5, #4
 800ad28:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad2a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ad2e:	f042 0202 	orr.w	r2, r2, #2
 800ad32:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad36:	f013 0f08 	tst.w	r3, #8
 800ad3a:	d00c      	beq.n	800ad56 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad3c:	f001 0220 	and.w	r2, r1, #32
 800ad40:	ea52 020e 	orrs.w	r2, r2, lr
 800ad44:	d007      	beq.n	800ad56 <HAL_UART_IRQHandler+0x124>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad46:	6822      	ldr	r2, [r4, #0]
 800ad48:	2508      	movs	r5, #8
 800ad4a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad4c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ad50:	432a      	orrs	r2, r5
 800ad52:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ad56:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ad5a:	d00c      	beq.n	800ad76 <HAL_UART_IRQHandler+0x144>
 800ad5c:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 800ad60:	d009      	beq.n	800ad76 <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800ad68:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ad6a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ad6e:	f042 0220 	orr.w	r2, r2, #32
 800ad72:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad76:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ad7a:	2a00      	cmp	r2, #0
 800ad7c:	d0ab      	beq.n	800acd6 <HAL_UART_IRQHandler+0xa4>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad7e:	f013 0f20 	tst.w	r3, #32
 800ad82:	d009      	beq.n	800ad98 <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad84:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad88:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 800ad8c:	4301      	orrs	r1, r0
 800ad8e:	d003      	beq.n	800ad98 <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 800ad90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ad92:	b10b      	cbz	r3, 800ad98 <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 800ad94:	4620      	mov	r0, r4
 800ad96:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800ad98:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f003 0340 	and.w	r3, r3, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ada4:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ada8:	4313      	orrs	r3, r2
 800adaa:	d02c      	beq.n	800ae06 <HAL_UART_IRQHandler+0x1d4>
        UART_EndRxTransfer(huart);
 800adac:	4620      	mov	r0, r4
 800adae:	f7ff fe51 	bl	800aa54 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800adba:	d020      	beq.n	800adfe <HAL_UART_IRQHandler+0x1cc>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adbc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	f102 0308 	add.w	r3, r2, #8
 800adc2:	e853 3f00 	ldrex	r3, [r3]
 800adc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adca:	3208      	adds	r2, #8
 800adcc:	e842 3100 	strex	r1, r3, [r2]
 800add0:	2900      	cmp	r1, #0
 800add2:	d1f3      	bne.n	800adbc <HAL_UART_IRQHandler+0x18a>
          if (huart->hdmarx != NULL)
 800add4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800add6:	b172      	cbz	r2, 800adf6 <HAL_UART_IRQHandler+0x1c4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800add8:	f64a 431d 	movw	r3, #44061	; 0xac1d
 800addc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ade0:	6393      	str	r3, [r2, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ade2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ade4:	f7fc fa86 	bl	80072f4 <HAL_DMA_Abort_IT>
 800ade8:	2800      	cmp	r0, #0
 800adea:	f43f af74 	beq.w	800acd6 <HAL_UART_IRQHandler+0xa4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800adee:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800adf0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800adf2:	4798      	blx	r3
 800adf4:	e76f      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
            HAL_UART_ErrorCallback(huart);
 800adf6:	4620      	mov	r0, r4
 800adf8:	f7ff fee3 	bl	800abc2 <HAL_UART_ErrorCallback>
 800adfc:	e76b      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
          HAL_UART_ErrorCallback(huart);
 800adfe:	4620      	mov	r0, r4
 800ae00:	f7ff fedf 	bl	800abc2 <HAL_UART_ErrorCallback>
 800ae04:	e767      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 800ae06:	4620      	mov	r0, r4
 800ae08:	f7ff fedb 	bl	800abc2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800ae12:	e760      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ae14:	f013 0f10 	tst.w	r3, #16
 800ae18:	f43f af38 	beq.w	800ac8c <HAL_UART_IRQHandler+0x5a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ae1c:	f011 0f10 	tst.w	r1, #16
 800ae20:	f43f af34 	beq.w	800ac8c <HAL_UART_IRQHandler+0x5a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae24:	2310      	movs	r3, #16
 800ae26:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ae30:	d04e      	beq.n	800aed0 <HAL_UART_IRQHandler+0x29e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae32:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ae34:	6813      	ldr	r3, [r2, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f43f af4b 	beq.w	800acd6 <HAL_UART_IRQHandler+0xa4>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae40:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ae44:	4299      	cmp	r1, r3
 800ae46:	f67f af46 	bls.w	800acd6 <HAL_UART_IRQHandler+0xa4>
        huart->RxXferCount = nb_remaining_rx_data;
 800ae4a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ae4e:	6813      	ldr	r3, [r2, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f013 0f20 	tst.w	r3, #32
 800ae56:	d131      	bne.n	800aebc <HAL_UART_IRQHandler+0x28a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae58:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	e852 3f00 	ldrex	r3, [r2]
 800ae5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae62:	e842 3100 	strex	r1, r3, [r2]
 800ae66:	2900      	cmp	r1, #0
 800ae68:	d1f6      	bne.n	800ae58 <HAL_UART_IRQHandler+0x226>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae6a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6c:	f102 0308 	add.w	r3, r2, #8
 800ae70:	e853 3f00 	ldrex	r3, [r3]
 800ae74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae78:	3208      	adds	r2, #8
 800ae7a:	e842 3100 	strex	r1, r3, [r2]
 800ae7e:	2900      	cmp	r1, #0
 800ae80:	d1f3      	bne.n	800ae6a <HAL_UART_IRQHandler+0x238>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae82:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae84:	f102 0308 	add.w	r3, r2, #8
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae90:	3208      	adds	r2, #8
 800ae92:	e842 3100 	strex	r1, r3, [r2]
 800ae96:	2900      	cmp	r1, #0
 800ae98:	d1f3      	bne.n	800ae82 <HAL_UART_IRQHandler+0x250>
          huart->RxState = HAL_UART_STATE_READY;
 800ae9a:	2320      	movs	r3, #32
 800ae9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea0:	2300      	movs	r3, #0
 800aea2:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	e852 3f00 	ldrex	r3, [r2]
 800aeaa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	e842 3100 	strex	r1, r3, [r2]
 800aeb2:	2900      	cmp	r1, #0
 800aeb4:	d1f6      	bne.n	800aea4 <HAL_UART_IRQHandler+0x272>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aeb6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aeb8:	f7fc f9e6 	bl	8007288 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aebc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800aec0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800aec4:	1ac9      	subs	r1, r1, r3
 800aec6:	b289      	uxth	r1, r1
 800aec8:	4620      	mov	r0, r4
 800aeca:	f7ff feb1 	bl	800ac30 <HAL_UARTEx_RxEventCallback>
 800aece:	e702      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aed0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800aed4:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 800aed6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f43f aefa 	beq.w	800acd6 <HAL_UART_IRQHandler+0xa4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aee2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800aee6:	1a89      	subs	r1, r1, r2
 800aee8:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800aeea:	2900      	cmp	r1, #0
 800aeec:	f43f aef3 	beq.w	800acd6 <HAL_UART_IRQHandler+0xa4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aef0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef2:	e852 3f00 	ldrex	r3, [r2]
 800aef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefa:	e842 3000 	strex	r0, r3, [r2]
 800aefe:	2800      	cmp	r0, #0
 800af00:	d1f6      	bne.n	800aef0 <HAL_UART_IRQHandler+0x2be>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af02:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af04:	f102 0308 	add.w	r3, r2, #8
 800af08:	e853 3f00 	ldrex	r3, [r3]
 800af0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af10:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af14:	3208      	adds	r2, #8
 800af16:	e842 3000 	strex	r0, r3, [r2]
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d1f1      	bne.n	800af02 <HAL_UART_IRQHandler+0x2d0>
        huart->RxState = HAL_UART_STATE_READY;
 800af1e:	2320      	movs	r3, #32
 800af20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af24:	2300      	movs	r3, #0
 800af26:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800af28:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2c:	e852 3f00 	ldrex	r3, [r2]
 800af30:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af34:	e842 3000 	strex	r0, r3, [r2]
 800af38:	2800      	cmp	r0, #0
 800af3a:	d1f6      	bne.n	800af2a <HAL_UART_IRQHandler+0x2f8>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af3c:	4620      	mov	r0, r4
 800af3e:	f7ff fe77 	bl	800ac30 <HAL_UARTEx_RxEventCallback>
 800af42:	e6c8      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af48:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 fb6a 	bl	800b624 <HAL_UARTEx_WakeupCallback>
    return;
 800af50:	e6c1      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
    if (huart->TxISR != NULL)
 800af52:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800af54:	2b00      	cmp	r3, #0
 800af56:	f43f aebe 	beq.w	800acd6 <HAL_UART_IRQHandler+0xa4>
      huart->TxISR(huart);
 800af5a:	4620      	mov	r0, r4
 800af5c:	4798      	blx	r3
 800af5e:	e6ba      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af62:	e852 3f00 	ldrex	r3, [r2]
 800af66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6a:	e842 3100 	strex	r1, r3, [r2]
 800af6e:	2900      	cmp	r1, #0
 800af70:	d1f6      	bne.n	800af60 <HAL_UART_IRQHandler+0x32e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af72:	2320      	movs	r3, #32
 800af74:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af78:	2300      	movs	r3, #0
 800af7a:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7ff fdf5 	bl	800ab6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af82:	e6a8      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800af84:	4620      	mov	r0, r4
 800af86:	f000 fb4f 	bl	800b628 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800af8a:	e6a4      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af8c:	4620      	mov	r0, r4
 800af8e:	f000 fb4a 	bl	800b626 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800af92:	e6a0      	b.n	800acd6 <HAL_UART_IRQHandler+0xa4>

0800af94 <UART_SetConfig>:
{
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800af98:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af9a:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af9c:	68a3      	ldr	r3, [r4, #8]
 800af9e:	6922      	ldr	r2, [r4, #16]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	6962      	ldr	r2, [r4, #20]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	69e2      	ldr	r2, [r4, #28]
 800afa8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afaa:	f646 12f3 	movw	r2, #27123	; 0x69f3
 800afae:	f6cc 72ff 	movt	r2, #53247	; 0xcfff
 800afb2:	4002      	ands	r2, r0
 800afb4:	4313      	orrs	r3, r2
 800afb6:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afb8:	6822      	ldr	r2, [r4, #0]
 800afba:	6853      	ldr	r3, [r2, #4]
 800afbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800afc0:	68e1      	ldr	r1, [r4, #12]
 800afc2:	430b      	orrs	r3, r1
 800afc4:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afc6:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afc8:	6822      	ldr	r2, [r4, #0]
 800afca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afd2:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800afd4:	bf1c      	itt	ne
 800afd6:	6a23      	ldrne	r3, [r4, #32]
 800afd8:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afda:	6893      	ldr	r3, [r2, #8]
 800afdc:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800afe0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800afe4:	430b      	orrs	r3, r1
 800afe6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afe8:	6822      	ldr	r2, [r4, #0]
 800afea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800afec:	f023 030f 	bic.w	r3, r3, #15
 800aff0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aff2:	430b      	orrs	r3, r1
 800aff4:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800affc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800b000:	4293      	cmp	r3, r2
 800b002:	d02b      	beq.n	800b05c <UART_SetConfig+0xc8>
 800b004:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 800b008:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d039      	beq.n	800b084 <UART_SetConfig+0xf0>
 800b010:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800b014:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b018:	4293      	cmp	r3, r2
 800b01a:	d052      	beq.n	800b0c2 <UART_SetConfig+0x12e>
 800b01c:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
 800b020:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b024:	4293      	cmp	r3, r2
 800b026:	d065      	beq.n	800b0f4 <UART_SetConfig+0x160>
 800b028:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b02c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b030:	4293      	cmp	r3, r2
 800b032:	d078      	beq.n	800b126 <UART_SetConfig+0x192>
 800b034:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b036:	69e0      	ldr	r0, [r4, #28]
 800b038:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b03c:	f000 80fb 	beq.w	800b236 <UART_SetConfig+0x2a2>
    switch (clocksource)
 800b040:	2a08      	cmp	r2, #8
 800b042:	f200 8172 	bhi.w	800b32a <UART_SetConfig+0x396>
 800b046:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b04a:	0130      	.short	0x0130
 800b04c:	015b0155 	.word	0x015b0155
 800b050:	01580170 	.word	0x01580170
 800b054:	01700170 	.word	0x01700170
 800b058:	012d0170 	.word	0x012d0170
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b05c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b060:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b064:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800b068:	f002 0203 	and.w	r2, r2, #3
 800b06c:	2a03      	cmp	r2, #3
 800b06e:	d807      	bhi.n	800b080 <UART_SetConfig+0xec>
 800b070:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b074:	00040077 	.word	0x00040077
 800b078:	01630161 	.word	0x01630161
 800b07c:	2204      	movs	r2, #4
 800b07e:	e7da      	b.n	800b036 <UART_SetConfig+0xa2>
 800b080:	2210      	movs	r2, #16
 800b082:	e7d8      	b.n	800b036 <UART_SetConfig+0xa2>
 800b084:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b088:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b08c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800b090:	f002 020c 	and.w	r2, r2, #12
 800b094:	2a0c      	cmp	r2, #12
 800b096:	d812      	bhi.n	800b0be <UART_SetConfig+0x12a>
 800b098:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b09c:	00110084 	.word	0x00110084
 800b0a0:	00110011 	.word	0x00110011
 800b0a4:	0011000d 	.word	0x0011000d
 800b0a8:	00110011 	.word	0x00110011
 800b0ac:	00110151 	.word	0x00110151
 800b0b0:	00110011 	.word	0x00110011
 800b0b4:	000f      	.short	0x000f
 800b0b6:	2204      	movs	r2, #4
 800b0b8:	e7bd      	b.n	800b036 <UART_SetConfig+0xa2>
 800b0ba:	2208      	movs	r2, #8
 800b0bc:	e7bb      	b.n	800b036 <UART_SetConfig+0xa2>
 800b0be:	2210      	movs	r2, #16
 800b0c0:	e7b9      	b.n	800b036 <UART_SetConfig+0xa2>
 800b0c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b0d2:	2b20      	cmp	r3, #32
 800b0d4:	f000 8135 	beq.w	800b342 <UART_SetConfig+0x3ae>
 800b0d8:	d807      	bhi.n	800b0ea <UART_SetConfig+0x156>
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 80a7 	beq.w	800b22e <UART_SetConfig+0x29a>
 800b0e0:	2b10      	cmp	r3, #16
 800b0e2:	bf14      	ite	ne
 800b0e4:	2210      	movne	r2, #16
 800b0e6:	2204      	moveq	r2, #4
 800b0e8:	e7a5      	b.n	800b036 <UART_SetConfig+0xa2>
 800b0ea:	2b30      	cmp	r3, #48	; 0x30
 800b0ec:	bf14      	ite	ne
 800b0ee:	2210      	movne	r2, #16
 800b0f0:	2208      	moveq	r2, #8
 800b0f2:	e7a0      	b.n	800b036 <UART_SetConfig+0xa2>
 800b0f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b100:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b104:	2b80      	cmp	r3, #128	; 0x80
 800b106:	f000 811e 	beq.w	800b346 <UART_SetConfig+0x3b2>
 800b10a:	d807      	bhi.n	800b11c <UART_SetConfig+0x188>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 8090 	beq.w	800b232 <UART_SetConfig+0x29e>
 800b112:	2b40      	cmp	r3, #64	; 0x40
 800b114:	bf14      	ite	ne
 800b116:	2210      	movne	r2, #16
 800b118:	2204      	moveq	r2, #4
 800b11a:	e78c      	b.n	800b036 <UART_SetConfig+0xa2>
 800b11c:	2bc0      	cmp	r3, #192	; 0xc0
 800b11e:	bf14      	ite	ne
 800b120:	2210      	movne	r2, #16
 800b122:	2208      	moveq	r2, #8
 800b124:	e787      	b.n	800b036 <UART_SetConfig+0xa2>
 800b126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b12a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b132:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b13a:	d070      	beq.n	800b21e <UART_SetConfig+0x28a>
 800b13c:	d809      	bhi.n	800b152 <UART_SetConfig+0x1be>
 800b13e:	b3c3      	cbz	r3, 800b1b2 <UART_SetConfig+0x21e>
 800b140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b144:	bf18      	it	ne
 800b146:	2001      	movne	r0, #1
 800b148:	f040 80cb 	bne.w	800b2e2 <UART_SetConfig+0x34e>
        pclk = HAL_RCC_GetSysClockFreq();
 800b14c:	f7fd fc04 	bl	8008958 <HAL_RCC_GetSysClockFreq>
        break;
 800b150:	e031      	b.n	800b1b6 <UART_SetConfig+0x222>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b156:	d102      	bne.n	800b15e <UART_SetConfig+0x1ca>
        pclk = (uint32_t) LSE_VALUE;
 800b158:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b15c:	e02e      	b.n	800b1bc <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b15e:	2001      	movs	r0, #1
 800b160:	e0bf      	b.n	800b2e2 <UART_SetConfig+0x34e>
 800b162:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 800b164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b168:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800b16c:	428b      	cmp	r3, r1
 800b16e:	f47f af62 	bne.w	800b036 <UART_SetConfig+0xa2>
    switch (clocksource)
 800b172:	2a08      	cmp	r2, #8
 800b174:	f200 80c9 	bhi.w	800b30a <UART_SetConfig+0x376>
 800b178:	a301      	add	r3, pc, #4	; (adr r3, 800b180 <UART_SetConfig+0x1ec>)
 800b17a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800b17e:	bf00      	nop
 800b180:	0800b1b3 	.word	0x0800b1b3
 800b184:	0800b30b 	.word	0x0800b30b
 800b188:	0800b1a9 	.word	0x0800b1a9
 800b18c:	0800b30b 	.word	0x0800b30b
 800b190:	0800b14d 	.word	0x0800b14d
 800b194:	0800b30b 	.word	0x0800b30b
 800b198:	0800b30b 	.word	0x0800b30b
 800b19c:	0800b30b 	.word	0x0800b30b
 800b1a0:	0800b229 	.word	0x0800b229
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	e7dd      	b.n	800b164 <UART_SetConfig+0x1d0>
    switch (clocksource)
 800b1a8:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800b1ac:	f2c0 00f4 	movt	r0, #244	; 0xf4
 800b1b0:	e004      	b.n	800b1bc <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1b2:	f7fd fd8b 	bl	8008ccc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f000 80a9 	beq.w	800b30e <UART_SetConfig+0x37a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b1bc:	f24f 53b0 	movw	r3, #62896	; 0xf5b0
 800b1c0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b1c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b1c6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800b1ca:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1ce:	6865      	ldr	r5, [r4, #4]
 800b1d0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b1d4:	4299      	cmp	r1, r3
 800b1d6:	f200 809c 	bhi.w	800b312 <UART_SetConfig+0x37e>
 800b1da:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b1de:	f200 809a 	bhi.w	800b316 <UART_SetConfig+0x382>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1e2:	2600      	movs	r6, #0
 800b1e4:	4633      	mov	r3, r6
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	f7f5 fd76 	bl	8000cd8 <__aeabi_uldivmod>
 800b1ec:	0209      	lsls	r1, r1, #8
 800b1ee:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b1f2:	0200      	lsls	r0, r0, #8
 800b1f4:	086b      	lsrs	r3, r5, #1
 800b1f6:	18c0      	adds	r0, r0, r3
 800b1f8:	462a      	mov	r2, r5
 800b1fa:	4633      	mov	r3, r6
 800b1fc:	f141 0100 	adc.w	r1, r1, #0
 800b200:	f7f5 fd6a 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b204:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800b208:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800b20c:	f2c0 030f 	movt	r3, #15
 800b210:	429a      	cmp	r2, r3
 800b212:	f200 8082 	bhi.w	800b31a <UART_SetConfig+0x386>
          huart->Instance->BRR = usartdiv;
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	60d8      	str	r0, [r3, #12]
 800b21a:	4630      	mov	r0, r6
 800b21c:	e061      	b.n	800b2e2 <UART_SetConfig+0x34e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b21e:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800b222:	f2c0 00f4 	movt	r0, #244	; 0xf4
 800b226:	e7c9      	b.n	800b1bc <UART_SetConfig+0x228>
        pclk = (uint32_t) LSE_VALUE;
 800b228:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b22c:	e7c6      	b.n	800b1bc <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b22e:	2200      	movs	r2, #0
 800b230:	e701      	b.n	800b036 <UART_SetConfig+0xa2>
 800b232:	2200      	movs	r2, #0
 800b234:	e6ff      	b.n	800b036 <UART_SetConfig+0xa2>
    switch (clocksource)
 800b236:	2a08      	cmp	r2, #8
 800b238:	d871      	bhi.n	800b31e <UART_SetConfig+0x38a>
 800b23a:	e8df f002 	tbb	[pc, r2]
 800b23e:	2805      	.short	0x2805
 800b240:	702b702e 	.word	0x702b702e
 800b244:	7070      	.short	0x7070
 800b246:	09          	.byte	0x09
 800b247:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800b248:	f7fd fd40 	bl	8008ccc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d068      	beq.n	800b322 <UART_SetConfig+0x38e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b250:	6862      	ldr	r2, [r4, #4]
 800b252:	f24f 53b0 	movw	r3, #62896	; 0xf5b0
 800b256:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b25a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b25c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b260:	fbb0 f0f3 	udiv	r0, r0, r3
 800b264:	0853      	lsrs	r3, r2, #1
 800b266:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b26a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b26e:	f1a3 0110 	sub.w	r1, r3, #16
 800b272:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800b276:	4291      	cmp	r1, r2
 800b278:	d855      	bhi.n	800b326 <UART_SetConfig+0x392>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b27a:	f023 020f 	bic.w	r2, r3, #15
 800b27e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800b280:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b282:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800b286:	4313      	orrs	r3, r2
 800b288:	60cb      	str	r3, [r1, #12]
 800b28a:	2000      	movs	r0, #0
 800b28c:	e029      	b.n	800b2e2 <UART_SetConfig+0x34e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b28e:	f7fd fd32 	bl	8008cf6 <HAL_RCC_GetPCLK2Freq>
        break;
 800b292:	e7db      	b.n	800b24c <UART_SetConfig+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 800b294:	f7fd fb60 	bl	8008958 <HAL_RCC_GetSysClockFreq>
        break;
 800b298:	e7d8      	b.n	800b24c <UART_SetConfig+0x2b8>
        pclk = (uint32_t) HSI_VALUE;
 800b29a:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800b29e:	f2c0 00f4 	movt	r0, #244	; 0xf4
 800b2a2:	e7d5      	b.n	800b250 <UART_SetConfig+0x2bc>
    switch (clocksource)
 800b2a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b2a8:	e003      	b.n	800b2b2 <UART_SetConfig+0x31e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2aa:	f7fd fd0f 	bl	8008ccc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d03d      	beq.n	800b32e <UART_SetConfig+0x39a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2b2:	6862      	ldr	r2, [r4, #4]
 800b2b4:	f24f 53b0 	movw	r3, #62896	; 0xf5b0
 800b2b8:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b2bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2be:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b2c2:	fbb0 f0f3 	udiv	r0, r0, r3
 800b2c6:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800b2ca:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2ce:	f1a0 0210 	sub.w	r2, r0, #16
 800b2d2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d82b      	bhi.n	800b332 <UART_SetConfig+0x39e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	b280      	uxth	r0, r0
 800b2de:	60d8      	str	r0, [r3, #12]
 800b2e0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b2e8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800b2f0:	6763      	str	r3, [r4, #116]	; 0x74
}
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2f4:	f7fd fcff 	bl	8008cf6 <HAL_RCC_GetPCLK2Freq>
        break;
 800b2f8:	e7d9      	b.n	800b2ae <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetSysClockFreq();
 800b2fa:	f7fd fb2d 	bl	8008958 <HAL_RCC_GetSysClockFreq>
        break;
 800b2fe:	e7d6      	b.n	800b2ae <UART_SetConfig+0x31a>
        pclk = (uint32_t) HSI_VALUE;
 800b300:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800b304:	f2c0 00f4 	movt	r0, #244	; 0xf4
 800b308:	e7d3      	b.n	800b2b2 <UART_SetConfig+0x31e>
    switch (clocksource)
 800b30a:	2001      	movs	r0, #1
 800b30c:	e7e9      	b.n	800b2e2 <UART_SetConfig+0x34e>
 800b30e:	2000      	movs	r0, #0
 800b310:	e7e7      	b.n	800b2e2 <UART_SetConfig+0x34e>
        ret = HAL_ERROR;
 800b312:	2001      	movs	r0, #1
 800b314:	e7e5      	b.n	800b2e2 <UART_SetConfig+0x34e>
 800b316:	2001      	movs	r0, #1
 800b318:	e7e3      	b.n	800b2e2 <UART_SetConfig+0x34e>
          ret = HAL_ERROR;
 800b31a:	2001      	movs	r0, #1
 800b31c:	e7e1      	b.n	800b2e2 <UART_SetConfig+0x34e>
    switch (clocksource)
 800b31e:	2001      	movs	r0, #1
 800b320:	e7df      	b.n	800b2e2 <UART_SetConfig+0x34e>
 800b322:	2000      	movs	r0, #0
 800b324:	e7dd      	b.n	800b2e2 <UART_SetConfig+0x34e>
        ret = HAL_ERROR;
 800b326:	2001      	movs	r0, #1
 800b328:	e7db      	b.n	800b2e2 <UART_SetConfig+0x34e>
    switch (clocksource)
 800b32a:	2001      	movs	r0, #1
 800b32c:	e7d9      	b.n	800b2e2 <UART_SetConfig+0x34e>
 800b32e:	2000      	movs	r0, #0
 800b330:	e7d7      	b.n	800b2e2 <UART_SetConfig+0x34e>
        ret = HAL_ERROR;
 800b332:	2001      	movs	r0, #1
 800b334:	e7d5      	b.n	800b2e2 <UART_SetConfig+0x34e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b336:	2202      	movs	r2, #2
 800b338:	e67d      	b.n	800b036 <UART_SetConfig+0xa2>
 800b33a:	2208      	movs	r2, #8
 800b33c:	e67b      	b.n	800b036 <UART_SetConfig+0xa2>
 800b33e:	2202      	movs	r2, #2
 800b340:	e679      	b.n	800b036 <UART_SetConfig+0xa2>
 800b342:	2202      	movs	r2, #2
 800b344:	e677      	b.n	800b036 <UART_SetConfig+0xa2>
 800b346:	2202      	movs	r2, #2
 800b348:	e675      	b.n	800b036 <UART_SetConfig+0xa2>
 800b34a:	bf00      	nop

0800b34c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b34c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b34e:	f013 0f01 	tst.w	r3, #1
 800b352:	d006      	beq.n	800b362 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b354:	6802      	ldr	r2, [r0, #0]
 800b356:	6853      	ldr	r3, [r2, #4]
 800b358:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b35c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b35e:	430b      	orrs	r3, r1
 800b360:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b362:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b364:	f013 0f02 	tst.w	r3, #2
 800b368:	d006      	beq.n	800b378 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b36a:	6802      	ldr	r2, [r0, #0]
 800b36c:	6853      	ldr	r3, [r2, #4]
 800b36e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b372:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b374:	430b      	orrs	r3, r1
 800b376:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b378:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b37a:	f013 0f04 	tst.w	r3, #4
 800b37e:	d006      	beq.n	800b38e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b380:	6802      	ldr	r2, [r0, #0]
 800b382:	6853      	ldr	r3, [r2, #4]
 800b384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b388:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800b38a:	430b      	orrs	r3, r1
 800b38c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b38e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b390:	f013 0f08 	tst.w	r3, #8
 800b394:	d006      	beq.n	800b3a4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b396:	6802      	ldr	r2, [r0, #0]
 800b398:	6853      	ldr	r3, [r2, #4]
 800b39a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b39e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b3a0:	430b      	orrs	r3, r1
 800b3a2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b3a6:	f013 0f10 	tst.w	r3, #16
 800b3aa:	d006      	beq.n	800b3ba <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3ac:	6802      	ldr	r2, [r0, #0]
 800b3ae:	6893      	ldr	r3, [r2, #8]
 800b3b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3b4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800b3b6:	430b      	orrs	r3, r1
 800b3b8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b3bc:	f013 0f20 	tst.w	r3, #32
 800b3c0:	d006      	beq.n	800b3d0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3c2:	6802      	ldr	r2, [r0, #0]
 800b3c4:	6893      	ldr	r3, [r2, #8]
 800b3c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b3d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b3d6:	d00a      	beq.n	800b3ee <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3d8:	6802      	ldr	r2, [r0, #0]
 800b3da:	6853      	ldr	r3, [r2, #4]
 800b3dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b3e0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b3e2:	430b      	orrs	r3, r1
 800b3e4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b3e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3ec:	d00b      	beq.n	800b406 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b3f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b3f4:	d006      	beq.n	800b404 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3f6:	6802      	ldr	r2, [r0, #0]
 800b3f8:	6853      	ldr	r3, [r2, #4]
 800b3fa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b3fe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b400:	430b      	orrs	r3, r1
 800b402:	6053      	str	r3, [r2, #4]
}
 800b404:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b406:	6802      	ldr	r2, [r0, #0]
 800b408:	6853      	ldr	r3, [r2, #4]
 800b40a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b40e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800b410:	430b      	orrs	r3, r1
 800b412:	6053      	str	r3, [r2, #4]
 800b414:	e7eb      	b.n	800b3ee <UART_AdvFeatureConfig+0xa2>

0800b416 <UART_WaitOnFlagUntilTimeout>:
{
 800b416:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b41a:	4680      	mov	r8, r0
 800b41c:	460e      	mov	r6, r1
 800b41e:	4615      	mov	r5, r2
 800b420:	4699      	mov	r9, r3
 800b422:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b424:	f8d8 3000 	ldr.w	r3, [r8]
 800b428:	69dc      	ldr	r4, [r3, #28]
 800b42a:	ea36 0404 	bics.w	r4, r6, r4
 800b42e:	bf0c      	ite	eq
 800b430:	2401      	moveq	r4, #1
 800b432:	2400      	movne	r4, #0
 800b434:	42ac      	cmp	r4, r5
 800b436:	d15a      	bne.n	800b4ee <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 800b438:	f1b7 3fff 	cmp.w	r7, #4294967295
 800b43c:	d0f4      	beq.n	800b428 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b43e:	f7fa fd8b 	bl	8005f58 <HAL_GetTick>
 800b442:	eba0 0009 	sub.w	r0, r0, r9
 800b446:	42b8      	cmp	r0, r7
 800b448:	d830      	bhi.n	800b4ac <UART_WaitOnFlagUntilTimeout+0x96>
 800b44a:	b37f      	cbz	r7, 800b4ac <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b44c:	f8d8 3000 	ldr.w	r3, [r8]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	f012 0f04 	tst.w	r2, #4
 800b456:	d0e5      	beq.n	800b424 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b458:	69da      	ldr	r2, [r3, #28]
 800b45a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800b45e:	d0e1      	beq.n	800b424 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b464:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b466:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46a:	e852 3f00 	ldrex	r3, [r2]
 800b46e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b472:	e842 3100 	strex	r1, r3, [r2]
 800b476:	2900      	cmp	r1, #0
 800b478:	d1f5      	bne.n	800b466 <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47a:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47e:	f102 0308 	add.w	r3, r2, #8
 800b482:	e853 3f00 	ldrex	r3, [r3]
 800b486:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48a:	3208      	adds	r2, #8
 800b48c:	e842 3100 	strex	r1, r3, [r2]
 800b490:	2900      	cmp	r1, #0
 800b492:	d1f2      	bne.n	800b47a <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800b494:	2320      	movs	r3, #32
 800b496:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b49a:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b49e:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 800b4a8:	2003      	movs	r0, #3
 800b4aa:	e021      	b.n	800b4f0 <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4ac:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	e852 3f00 	ldrex	r3, [r2]
 800b4b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b8:	e842 3100 	strex	r1, r3, [r2]
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d1f5      	bne.n	800b4ac <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4c0:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c4:	f102 0308 	add.w	r3, r2, #8
 800b4c8:	e853 3f00 	ldrex	r3, [r3]
 800b4cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d0:	3208      	adds	r2, #8
 800b4d2:	e842 3100 	strex	r1, r3, [r2]
 800b4d6:	2900      	cmp	r1, #0
 800b4d8:	d1f2      	bne.n	800b4c0 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800b4da:	2320      	movs	r3, #32
 800b4dc:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b4e0:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 800b4ea:	2003      	movs	r0, #3
 800b4ec:	e000      	b.n	800b4f0 <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 800b4ee:	2000      	movs	r0, #0
}
 800b4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b4f4 <UART_CheckIdleState>:
{
 800b4f4:	b530      	push	{r4, r5, lr}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800b500:	f7fa fd2a 	bl	8005f58 <HAL_GetTick>
 800b504:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b506:	6822      	ldr	r2, [r4, #0]
 800b508:	6812      	ldr	r2, [r2, #0]
 800b50a:	f012 0f08 	tst.w	r2, #8
 800b50e:	d10f      	bne.n	800b530 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b510:	6823      	ldr	r3, [r4, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f013 0f04 	tst.w	r3, #4
 800b518:	d118      	bne.n	800b54c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800b51a:	2320      	movs	r3, #32
 800b51c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b520:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b524:	2000      	movs	r0, #0
 800b526:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800b528:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800b52c:	b003      	add	sp, #12
 800b52e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	4603      	mov	r3, r0
 800b538:	2200      	movs	r2, #0
 800b53a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b53e:	4620      	mov	r0, r4
 800b540:	f7ff ff69 	bl	800b416 <UART_WaitOnFlagUntilTimeout>
 800b544:	2800      	cmp	r0, #0
 800b546:	d0e3      	beq.n	800b510 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800b548:	2003      	movs	r0, #3
 800b54a:	e7ef      	b.n	800b52c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b54c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	462b      	mov	r3, r5
 800b554:	2200      	movs	r2, #0
 800b556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b55a:	4620      	mov	r0, r4
 800b55c:	f7ff ff5b 	bl	800b416 <UART_WaitOnFlagUntilTimeout>
 800b560:	2800      	cmp	r0, #0
 800b562:	d0da      	beq.n	800b51a <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800b564:	2003      	movs	r0, #3
 800b566:	e7e1      	b.n	800b52c <UART_CheckIdleState+0x38>

0800b568 <HAL_UART_Init>:
  if (huart == NULL)
 800b568:	b378      	cbz	r0, 800b5ca <HAL_UART_Init+0x62>
{
 800b56a:	b510      	push	{r4, lr}
 800b56c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b56e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800b572:	b30b      	cbz	r3, 800b5b8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800b574:	2324      	movs	r3, #36	; 0x24
 800b576:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800b57a:	6822      	ldr	r2, [r4, #0]
 800b57c:	6813      	ldr	r3, [r2, #0]
 800b57e:	f023 0301 	bic.w	r3, r3, #1
 800b582:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b584:	4620      	mov	r0, r4
 800b586:	f7ff fd05 	bl	800af94 <UART_SetConfig>
 800b58a:	2801      	cmp	r0, #1
 800b58c:	d013      	beq.n	800b5b6 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b58e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b590:	b9bb      	cbnz	r3, 800b5c2 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b592:	6822      	ldr	r2, [r4, #0]
 800b594:	6853      	ldr	r3, [r2, #4]
 800b596:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b59a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b59c:	6822      	ldr	r2, [r4, #0]
 800b59e:	6893      	ldr	r3, [r2, #8]
 800b5a0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800b5a4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	6813      	ldr	r3, [r2, #0]
 800b5aa:	f043 0301 	orr.w	r3, r3, #1
 800b5ae:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f7ff ff9f 	bl	800b4f4 <UART_CheckIdleState>
}
 800b5b6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800b5b8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800b5bc:	f7fa fbed 	bl	8005d9a <HAL_UART_MspInit>
 800b5c0:	e7d8      	b.n	800b574 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f7ff fec2 	bl	800b34c <UART_AdvFeatureConfig>
 800b5c8:	e7e3      	b.n	800b592 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800b5ca:	2001      	movs	r0, #1
}
 800b5cc:	4770      	bx	lr

0800b5ce <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5ce:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800b5d0:	b92b      	cbnz	r3, 800b5de <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5d8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800b5dc:	4770      	bx	lr
{
 800b5de:	b500      	push	{lr}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5e0:	6803      	ldr	r3, [r0, #0]
 800b5e2:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	ea4f 7e53 	mov.w	lr, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5ea:	f24f 5cd0 	movw	ip, #62928	; 0xf5d0
 800b5ee:	f6c0 0c00 	movt	ip, #2048	; 0x800
 800b5f2:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800b5f6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5f8:	f24f 51c8 	movw	r1, #62920	; 0xf5c8
 800b5fc:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b600:	f811 e00e 	ldrb.w	lr, [r1, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b604:	fb93 f3fe 	sdiv	r3, r3, lr
 800b608:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b60c:	f3c2 6242 	ubfx	r2, r2, #25, #3
 800b610:	f81c 3002 	ldrb.w	r3, [ip, r2]
 800b614:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b618:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 800b61c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800b620:	f85d fb04 	ldr.w	pc, [sp], #4

0800b624 <HAL_UARTEx_WakeupCallback>:
}
 800b624:	4770      	bx	lr

0800b626 <HAL_UARTEx_RxFifoFullCallback>:
}
 800b626:	4770      	bx	lr

0800b628 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800b628:	4770      	bx	lr

0800b62a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800b62a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d018      	beq.n	800b664 <HAL_UARTEx_DisableFifoMode+0x3a>
 800b632:	2301      	movs	r3, #1
 800b634:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800b638:	2324      	movs	r3, #36	; 0x24
 800b63a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b63e:	6803      	ldr	r3, [r0, #0]
 800b640:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b642:	6819      	ldr	r1, [r3, #0]
 800b644:	f021 0101 	bic.w	r1, r1, #1
 800b648:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b64a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b64e:	2300      	movs	r3, #0
 800b650:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b652:	6801      	ldr	r1, [r0, #0]
 800b654:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b656:	2220      	movs	r2, #32
 800b658:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b65c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800b660:	4618      	mov	r0, r3
 800b662:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b664:	2002      	movs	r0, #2
}
 800b666:	4770      	bx	lr

0800b668 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800b668:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800b66a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d01d      	beq.n	800b6ae <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b672:	4604      	mov	r4, r0
 800b674:	2301      	movs	r3, #1
 800b676:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800b67a:	2324      	movs	r3, #36	; 0x24
 800b67c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b680:	6803      	ldr	r3, [r0, #0]
 800b682:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	f022 0201 	bic.w	r2, r2, #1
 800b68a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b68c:	6802      	ldr	r2, [r0, #0]
 800b68e:	6893      	ldr	r3, [r2, #8]
 800b690:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800b694:	4319      	orrs	r1, r3
 800b696:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800b698:	f7ff ff99 	bl	800b5ce <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b69c:	6823      	ldr	r3, [r4, #0]
 800b69e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b6a0:	2320      	movs	r3, #32
 800b6a2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800b6ac:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800b6ae:	2002      	movs	r0, #2
 800b6b0:	e7fc      	b.n	800b6ac <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800b6b2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800b6b2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800b6b4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d01d      	beq.n	800b6f8 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b6bc:	4604      	mov	r4, r0
 800b6be:	2301      	movs	r3, #1
 800b6c0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800b6c4:	2324      	movs	r3, #36	; 0x24
 800b6c6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ca:	6803      	ldr	r3, [r0, #0]
 800b6cc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	f022 0201 	bic.w	r2, r2, #1
 800b6d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b6d6:	6802      	ldr	r2, [r0, #0]
 800b6d8:	6893      	ldr	r3, [r2, #8]
 800b6da:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800b6de:	4319      	orrs	r1, r3
 800b6e0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800b6e2:	f7ff ff74 	bl	800b5ce <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b6ea:	2320      	movs	r3, #32
 800b6ec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800b6f8:	2002      	movs	r0, #2
 800b6fa:	e7fc      	b.n	800b6f6 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800b6fc <__cvt>:
 800b6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b700:	ec55 4b10 	vmov	r4, r5, d0
 800b704:	2d00      	cmp	r5, #0
 800b706:	460e      	mov	r6, r1
 800b708:	4619      	mov	r1, r3
 800b70a:	462b      	mov	r3, r5
 800b70c:	bfbb      	ittet	lt
 800b70e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b712:	461d      	movlt	r5, r3
 800b714:	2300      	movge	r3, #0
 800b716:	232d      	movlt	r3, #45	; 0x2d
 800b718:	700b      	strb	r3, [r1, #0]
 800b71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b71c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b720:	4691      	mov	r9, r2
 800b722:	f023 0820 	bic.w	r8, r3, #32
 800b726:	bfbc      	itt	lt
 800b728:	4622      	movlt	r2, r4
 800b72a:	4614      	movlt	r4, r2
 800b72c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b730:	d005      	beq.n	800b73e <__cvt+0x42>
 800b732:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b736:	d100      	bne.n	800b73a <__cvt+0x3e>
 800b738:	3601      	adds	r6, #1
 800b73a:	2102      	movs	r1, #2
 800b73c:	e000      	b.n	800b740 <__cvt+0x44>
 800b73e:	2103      	movs	r1, #3
 800b740:	ab03      	add	r3, sp, #12
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	ab02      	add	r3, sp, #8
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	ec45 4b10 	vmov	d0, r4, r5
 800b74c:	4653      	mov	r3, sl
 800b74e:	4632      	mov	r2, r6
 800b750:	f000 fe9e 	bl	800c490 <_dtoa_r>
 800b754:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b758:	4607      	mov	r7, r0
 800b75a:	d102      	bne.n	800b762 <__cvt+0x66>
 800b75c:	f019 0f01 	tst.w	r9, #1
 800b760:	d022      	beq.n	800b7a8 <__cvt+0xac>
 800b762:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b766:	eb07 0906 	add.w	r9, r7, r6
 800b76a:	d110      	bne.n	800b78e <__cvt+0x92>
 800b76c:	783b      	ldrb	r3, [r7, #0]
 800b76e:	2b30      	cmp	r3, #48	; 0x30
 800b770:	d10a      	bne.n	800b788 <__cvt+0x8c>
 800b772:	2200      	movs	r2, #0
 800b774:	2300      	movs	r3, #0
 800b776:	4620      	mov	r0, r4
 800b778:	4629      	mov	r1, r5
 800b77a:	f7f5 f9cd 	bl	8000b18 <__aeabi_dcmpeq>
 800b77e:	b918      	cbnz	r0, 800b788 <__cvt+0x8c>
 800b780:	f1c6 0601 	rsb	r6, r6, #1
 800b784:	f8ca 6000 	str.w	r6, [sl]
 800b788:	f8da 3000 	ldr.w	r3, [sl]
 800b78c:	4499      	add	r9, r3
 800b78e:	2200      	movs	r2, #0
 800b790:	2300      	movs	r3, #0
 800b792:	4620      	mov	r0, r4
 800b794:	4629      	mov	r1, r5
 800b796:	f7f5 f9bf 	bl	8000b18 <__aeabi_dcmpeq>
 800b79a:	b108      	cbz	r0, 800b7a0 <__cvt+0xa4>
 800b79c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b7a0:	2230      	movs	r2, #48	; 0x30
 800b7a2:	9b03      	ldr	r3, [sp, #12]
 800b7a4:	454b      	cmp	r3, r9
 800b7a6:	d307      	bcc.n	800b7b8 <__cvt+0xbc>
 800b7a8:	9b03      	ldr	r3, [sp, #12]
 800b7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7ac:	1bdb      	subs	r3, r3, r7
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	6013      	str	r3, [r2, #0]
 800b7b2:	b004      	add	sp, #16
 800b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b8:	1c59      	adds	r1, r3, #1
 800b7ba:	9103      	str	r1, [sp, #12]
 800b7bc:	701a      	strb	r2, [r3, #0]
 800b7be:	e7f0      	b.n	800b7a2 <__cvt+0xa6>

0800b7c0 <__exponent>:
 800b7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2900      	cmp	r1, #0
 800b7c6:	bfb8      	it	lt
 800b7c8:	4249      	neglt	r1, r1
 800b7ca:	f803 2b02 	strb.w	r2, [r3], #2
 800b7ce:	bfb4      	ite	lt
 800b7d0:	222d      	movlt	r2, #45	; 0x2d
 800b7d2:	222b      	movge	r2, #43	; 0x2b
 800b7d4:	2909      	cmp	r1, #9
 800b7d6:	7042      	strb	r2, [r0, #1]
 800b7d8:	dd2a      	ble.n	800b830 <__exponent+0x70>
 800b7da:	f10d 0207 	add.w	r2, sp, #7
 800b7de:	4617      	mov	r7, r2
 800b7e0:	260a      	movs	r6, #10
 800b7e2:	4694      	mov	ip, r2
 800b7e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800b7e8:	fb06 1415 	mls	r4, r6, r5, r1
 800b7ec:	3430      	adds	r4, #48	; 0x30
 800b7ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	2c63      	cmp	r4, #99	; 0x63
 800b7f6:	f102 32ff 	add.w	r2, r2, #4294967295
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	dcf1      	bgt.n	800b7e2 <__exponent+0x22>
 800b7fe:	3130      	adds	r1, #48	; 0x30
 800b800:	f1ac 0402 	sub.w	r4, ip, #2
 800b804:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b808:	1c41      	adds	r1, r0, #1
 800b80a:	4622      	mov	r2, r4
 800b80c:	42ba      	cmp	r2, r7
 800b80e:	d30a      	bcc.n	800b826 <__exponent+0x66>
 800b810:	f10d 0209 	add.w	r2, sp, #9
 800b814:	eba2 020c 	sub.w	r2, r2, ip
 800b818:	42bc      	cmp	r4, r7
 800b81a:	bf88      	it	hi
 800b81c:	2200      	movhi	r2, #0
 800b81e:	4413      	add	r3, r2
 800b820:	1a18      	subs	r0, r3, r0
 800b822:	b003      	add	sp, #12
 800b824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b826:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b82a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b82e:	e7ed      	b.n	800b80c <__exponent+0x4c>
 800b830:	2330      	movs	r3, #48	; 0x30
 800b832:	3130      	adds	r1, #48	; 0x30
 800b834:	7083      	strb	r3, [r0, #2]
 800b836:	70c1      	strb	r1, [r0, #3]
 800b838:	1d03      	adds	r3, r0, #4
 800b83a:	e7f1      	b.n	800b820 <__exponent+0x60>

0800b83c <_printf_float>:
 800b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b840:	ed2d 8b02 	vpush	{d8}
 800b844:	b08d      	sub	sp, #52	; 0x34
 800b846:	460c      	mov	r4, r1
 800b848:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b84c:	4616      	mov	r6, r2
 800b84e:	461f      	mov	r7, r3
 800b850:	4605      	mov	r5, r0
 800b852:	f000 fd0f 	bl	800c274 <_localeconv_r>
 800b856:	f8d0 a000 	ldr.w	sl, [r0]
 800b85a:	4650      	mov	r0, sl
 800b85c:	f7f4 fd30 	bl	80002c0 <strlen>
 800b860:	2300      	movs	r3, #0
 800b862:	930a      	str	r3, [sp, #40]	; 0x28
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	9305      	str	r3, [sp, #20]
 800b868:	f8d8 3000 	ldr.w	r3, [r8]
 800b86c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b870:	3307      	adds	r3, #7
 800b872:	f023 0307 	bic.w	r3, r3, #7
 800b876:	f103 0208 	add.w	r2, r3, #8
 800b87a:	f8c8 2000 	str.w	r2, [r8]
 800b87e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b886:	9307      	str	r3, [sp, #28]
 800b888:	f8cd 8018 	str.w	r8, [sp, #24]
 800b88c:	ee08 0a10 	vmov	s16, r0
 800b890:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b898:	4b9e      	ldr	r3, [pc, #632]	; (800bb14 <_printf_float+0x2d8>)
 800b89a:	f04f 32ff 	mov.w	r2, #4294967295
 800b89e:	f7f5 f96d 	bl	8000b7c <__aeabi_dcmpun>
 800b8a2:	bb88      	cbnz	r0, 800b908 <_printf_float+0xcc>
 800b8a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8a8:	4b9a      	ldr	r3, [pc, #616]	; (800bb14 <_printf_float+0x2d8>)
 800b8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ae:	f7f5 f947 	bl	8000b40 <__aeabi_dcmple>
 800b8b2:	bb48      	cbnz	r0, 800b908 <_printf_float+0xcc>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	4640      	mov	r0, r8
 800b8ba:	4649      	mov	r1, r9
 800b8bc:	f7f5 f936 	bl	8000b2c <__aeabi_dcmplt>
 800b8c0:	b110      	cbz	r0, 800b8c8 <_printf_float+0x8c>
 800b8c2:	232d      	movs	r3, #45	; 0x2d
 800b8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c8:	4a93      	ldr	r2, [pc, #588]	; (800bb18 <_printf_float+0x2dc>)
 800b8ca:	4b94      	ldr	r3, [pc, #592]	; (800bb1c <_printf_float+0x2e0>)
 800b8cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b8d0:	bf94      	ite	ls
 800b8d2:	4690      	movls	r8, r2
 800b8d4:	4698      	movhi	r8, r3
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	6123      	str	r3, [r4, #16]
 800b8da:	9b05      	ldr	r3, [sp, #20]
 800b8dc:	f023 0304 	bic.w	r3, r3, #4
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	f04f 0900 	mov.w	r9, #0
 800b8e6:	9700      	str	r7, [sp, #0]
 800b8e8:	4633      	mov	r3, r6
 800b8ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f000 f9da 	bl	800bca8 <_printf_common>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	f040 8090 	bne.w	800ba1a <_printf_float+0x1de>
 800b8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fe:	b00d      	add	sp, #52	; 0x34
 800b900:	ecbd 8b02 	vpop	{d8}
 800b904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b908:	4642      	mov	r2, r8
 800b90a:	464b      	mov	r3, r9
 800b90c:	4640      	mov	r0, r8
 800b90e:	4649      	mov	r1, r9
 800b910:	f7f5 f934 	bl	8000b7c <__aeabi_dcmpun>
 800b914:	b140      	cbz	r0, 800b928 <_printf_float+0xec>
 800b916:	464b      	mov	r3, r9
 800b918:	2b00      	cmp	r3, #0
 800b91a:	bfbc      	itt	lt
 800b91c:	232d      	movlt	r3, #45	; 0x2d
 800b91e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b922:	4a7f      	ldr	r2, [pc, #508]	; (800bb20 <_printf_float+0x2e4>)
 800b924:	4b7f      	ldr	r3, [pc, #508]	; (800bb24 <_printf_float+0x2e8>)
 800b926:	e7d1      	b.n	800b8cc <_printf_float+0x90>
 800b928:	6863      	ldr	r3, [r4, #4]
 800b92a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b92e:	9206      	str	r2, [sp, #24]
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	d13f      	bne.n	800b9b4 <_printf_float+0x178>
 800b934:	2306      	movs	r3, #6
 800b936:	6063      	str	r3, [r4, #4]
 800b938:	9b05      	ldr	r3, [sp, #20]
 800b93a:	6861      	ldr	r1, [r4, #4]
 800b93c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b940:	2300      	movs	r3, #0
 800b942:	9303      	str	r3, [sp, #12]
 800b944:	ab0a      	add	r3, sp, #40	; 0x28
 800b946:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b94a:	ab09      	add	r3, sp, #36	; 0x24
 800b94c:	ec49 8b10 	vmov	d0, r8, r9
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	6022      	str	r2, [r4, #0]
 800b954:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b958:	4628      	mov	r0, r5
 800b95a:	f7ff fecf 	bl	800b6fc <__cvt>
 800b95e:	9b06      	ldr	r3, [sp, #24]
 800b960:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b962:	2b47      	cmp	r3, #71	; 0x47
 800b964:	4680      	mov	r8, r0
 800b966:	d108      	bne.n	800b97a <_printf_float+0x13e>
 800b968:	1cc8      	adds	r0, r1, #3
 800b96a:	db02      	blt.n	800b972 <_printf_float+0x136>
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	4299      	cmp	r1, r3
 800b970:	dd41      	ble.n	800b9f6 <_printf_float+0x1ba>
 800b972:	f1ab 0302 	sub.w	r3, fp, #2
 800b976:	fa5f fb83 	uxtb.w	fp, r3
 800b97a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b97e:	d820      	bhi.n	800b9c2 <_printf_float+0x186>
 800b980:	3901      	subs	r1, #1
 800b982:	465a      	mov	r2, fp
 800b984:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b988:	9109      	str	r1, [sp, #36]	; 0x24
 800b98a:	f7ff ff19 	bl	800b7c0 <__exponent>
 800b98e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b990:	1813      	adds	r3, r2, r0
 800b992:	2a01      	cmp	r2, #1
 800b994:	4681      	mov	r9, r0
 800b996:	6123      	str	r3, [r4, #16]
 800b998:	dc02      	bgt.n	800b9a0 <_printf_float+0x164>
 800b99a:	6822      	ldr	r2, [r4, #0]
 800b99c:	07d2      	lsls	r2, r2, #31
 800b99e:	d501      	bpl.n	800b9a4 <_printf_float+0x168>
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	6123      	str	r3, [r4, #16]
 800b9a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d09c      	beq.n	800b8e6 <_printf_float+0xaa>
 800b9ac:	232d      	movs	r3, #45	; 0x2d
 800b9ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9b2:	e798      	b.n	800b8e6 <_printf_float+0xaa>
 800b9b4:	9a06      	ldr	r2, [sp, #24]
 800b9b6:	2a47      	cmp	r2, #71	; 0x47
 800b9b8:	d1be      	bne.n	800b938 <_printf_float+0xfc>
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1bc      	bne.n	800b938 <_printf_float+0xfc>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e7b9      	b.n	800b936 <_printf_float+0xfa>
 800b9c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b9c6:	d118      	bne.n	800b9fa <_printf_float+0x1be>
 800b9c8:	2900      	cmp	r1, #0
 800b9ca:	6863      	ldr	r3, [r4, #4]
 800b9cc:	dd0b      	ble.n	800b9e6 <_printf_float+0x1aa>
 800b9ce:	6121      	str	r1, [r4, #16]
 800b9d0:	b913      	cbnz	r3, 800b9d8 <_printf_float+0x19c>
 800b9d2:	6822      	ldr	r2, [r4, #0]
 800b9d4:	07d0      	lsls	r0, r2, #31
 800b9d6:	d502      	bpl.n	800b9de <_printf_float+0x1a2>
 800b9d8:	3301      	adds	r3, #1
 800b9da:	440b      	add	r3, r1
 800b9dc:	6123      	str	r3, [r4, #16]
 800b9de:	65a1      	str	r1, [r4, #88]	; 0x58
 800b9e0:	f04f 0900 	mov.w	r9, #0
 800b9e4:	e7de      	b.n	800b9a4 <_printf_float+0x168>
 800b9e6:	b913      	cbnz	r3, 800b9ee <_printf_float+0x1b2>
 800b9e8:	6822      	ldr	r2, [r4, #0]
 800b9ea:	07d2      	lsls	r2, r2, #31
 800b9ec:	d501      	bpl.n	800b9f2 <_printf_float+0x1b6>
 800b9ee:	3302      	adds	r3, #2
 800b9f0:	e7f4      	b.n	800b9dc <_printf_float+0x1a0>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e7f2      	b.n	800b9dc <_printf_float+0x1a0>
 800b9f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9fc:	4299      	cmp	r1, r3
 800b9fe:	db05      	blt.n	800ba0c <_printf_float+0x1d0>
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	6121      	str	r1, [r4, #16]
 800ba04:	07d8      	lsls	r0, r3, #31
 800ba06:	d5ea      	bpl.n	800b9de <_printf_float+0x1a2>
 800ba08:	1c4b      	adds	r3, r1, #1
 800ba0a:	e7e7      	b.n	800b9dc <_printf_float+0x1a0>
 800ba0c:	2900      	cmp	r1, #0
 800ba0e:	bfd4      	ite	le
 800ba10:	f1c1 0202 	rsble	r2, r1, #2
 800ba14:	2201      	movgt	r2, #1
 800ba16:	4413      	add	r3, r2
 800ba18:	e7e0      	b.n	800b9dc <_printf_float+0x1a0>
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	055a      	lsls	r2, r3, #21
 800ba1e:	d407      	bmi.n	800ba30 <_printf_float+0x1f4>
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	4642      	mov	r2, r8
 800ba24:	4631      	mov	r1, r6
 800ba26:	4628      	mov	r0, r5
 800ba28:	47b8      	blx	r7
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	d12c      	bne.n	800ba88 <_printf_float+0x24c>
 800ba2e:	e764      	b.n	800b8fa <_printf_float+0xbe>
 800ba30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba34:	f240 80e0 	bls.w	800bbf8 <_printf_float+0x3bc>
 800ba38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	2300      	movs	r3, #0
 800ba40:	f7f5 f86a 	bl	8000b18 <__aeabi_dcmpeq>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d034      	beq.n	800bab2 <_printf_float+0x276>
 800ba48:	4a37      	ldr	r2, [pc, #220]	; (800bb28 <_printf_float+0x2ec>)
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	4628      	mov	r0, r5
 800ba50:	47b8      	blx	r7
 800ba52:	3001      	adds	r0, #1
 800ba54:	f43f af51 	beq.w	800b8fa <_printf_float+0xbe>
 800ba58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	db02      	blt.n	800ba66 <_printf_float+0x22a>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	07d8      	lsls	r0, r3, #31
 800ba64:	d510      	bpl.n	800ba88 <_printf_float+0x24c>
 800ba66:	ee18 3a10 	vmov	r3, s16
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4628      	mov	r0, r5
 800ba70:	47b8      	blx	r7
 800ba72:	3001      	adds	r0, #1
 800ba74:	f43f af41 	beq.w	800b8fa <_printf_float+0xbe>
 800ba78:	f04f 0800 	mov.w	r8, #0
 800ba7c:	f104 091a 	add.w	r9, r4, #26
 800ba80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba82:	3b01      	subs	r3, #1
 800ba84:	4543      	cmp	r3, r8
 800ba86:	dc09      	bgt.n	800ba9c <_printf_float+0x260>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	079b      	lsls	r3, r3, #30
 800ba8c:	f100 8107 	bmi.w	800bc9e <_printf_float+0x462>
 800ba90:	68e0      	ldr	r0, [r4, #12]
 800ba92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba94:	4298      	cmp	r0, r3
 800ba96:	bfb8      	it	lt
 800ba98:	4618      	movlt	r0, r3
 800ba9a:	e730      	b.n	800b8fe <_printf_float+0xc2>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	464a      	mov	r2, r9
 800baa0:	4631      	mov	r1, r6
 800baa2:	4628      	mov	r0, r5
 800baa4:	47b8      	blx	r7
 800baa6:	3001      	adds	r0, #1
 800baa8:	f43f af27 	beq.w	800b8fa <_printf_float+0xbe>
 800baac:	f108 0801 	add.w	r8, r8, #1
 800bab0:	e7e6      	b.n	800ba80 <_printf_float+0x244>
 800bab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	dc39      	bgt.n	800bb2c <_printf_float+0x2f0>
 800bab8:	4a1b      	ldr	r2, [pc, #108]	; (800bb28 <_printf_float+0x2ec>)
 800baba:	2301      	movs	r3, #1
 800babc:	4631      	mov	r1, r6
 800babe:	4628      	mov	r0, r5
 800bac0:	47b8      	blx	r7
 800bac2:	3001      	adds	r0, #1
 800bac4:	f43f af19 	beq.w	800b8fa <_printf_float+0xbe>
 800bac8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bacc:	4313      	orrs	r3, r2
 800bace:	d102      	bne.n	800bad6 <_printf_float+0x29a>
 800bad0:	6823      	ldr	r3, [r4, #0]
 800bad2:	07d9      	lsls	r1, r3, #31
 800bad4:	d5d8      	bpl.n	800ba88 <_printf_float+0x24c>
 800bad6:	ee18 3a10 	vmov	r3, s16
 800bada:	4652      	mov	r2, sl
 800badc:	4631      	mov	r1, r6
 800bade:	4628      	mov	r0, r5
 800bae0:	47b8      	blx	r7
 800bae2:	3001      	adds	r0, #1
 800bae4:	f43f af09 	beq.w	800b8fa <_printf_float+0xbe>
 800bae8:	f04f 0900 	mov.w	r9, #0
 800baec:	f104 0a1a 	add.w	sl, r4, #26
 800baf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf2:	425b      	negs	r3, r3
 800baf4:	454b      	cmp	r3, r9
 800baf6:	dc01      	bgt.n	800bafc <_printf_float+0x2c0>
 800baf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bafa:	e792      	b.n	800ba22 <_printf_float+0x1e6>
 800bafc:	2301      	movs	r3, #1
 800bafe:	4652      	mov	r2, sl
 800bb00:	4631      	mov	r1, r6
 800bb02:	4628      	mov	r0, r5
 800bb04:	47b8      	blx	r7
 800bb06:	3001      	adds	r0, #1
 800bb08:	f43f aef7 	beq.w	800b8fa <_printf_float+0xbe>
 800bb0c:	f109 0901 	add.w	r9, r9, #1
 800bb10:	e7ee      	b.n	800baf0 <_printf_float+0x2b4>
 800bb12:	bf00      	nop
 800bb14:	7fefffff 	.word	0x7fefffff
 800bb18:	0800f5d8 	.word	0x0800f5d8
 800bb1c:	0800f5dc 	.word	0x0800f5dc
 800bb20:	0800f5e0 	.word	0x0800f5e0
 800bb24:	0800f5e4 	.word	0x0800f5e4
 800bb28:	0800f5e8 	.word	0x0800f5e8
 800bb2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb30:	429a      	cmp	r2, r3
 800bb32:	bfa8      	it	ge
 800bb34:	461a      	movge	r2, r3
 800bb36:	2a00      	cmp	r2, #0
 800bb38:	4691      	mov	r9, r2
 800bb3a:	dc37      	bgt.n	800bbac <_printf_float+0x370>
 800bb3c:	f04f 0b00 	mov.w	fp, #0
 800bb40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb44:	f104 021a 	add.w	r2, r4, #26
 800bb48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb4a:	9305      	str	r3, [sp, #20]
 800bb4c:	eba3 0309 	sub.w	r3, r3, r9
 800bb50:	455b      	cmp	r3, fp
 800bb52:	dc33      	bgt.n	800bbbc <_printf_float+0x380>
 800bb54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	db3b      	blt.n	800bbd4 <_printf_float+0x398>
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	07da      	lsls	r2, r3, #31
 800bb60:	d438      	bmi.n	800bbd4 <_printf_float+0x398>
 800bb62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bb66:	eba2 0903 	sub.w	r9, r2, r3
 800bb6a:	9b05      	ldr	r3, [sp, #20]
 800bb6c:	1ad2      	subs	r2, r2, r3
 800bb6e:	4591      	cmp	r9, r2
 800bb70:	bfa8      	it	ge
 800bb72:	4691      	movge	r9, r2
 800bb74:	f1b9 0f00 	cmp.w	r9, #0
 800bb78:	dc35      	bgt.n	800bbe6 <_printf_float+0x3aa>
 800bb7a:	f04f 0800 	mov.w	r8, #0
 800bb7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb82:	f104 0a1a 	add.w	sl, r4, #26
 800bb86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb8a:	1a9b      	subs	r3, r3, r2
 800bb8c:	eba3 0309 	sub.w	r3, r3, r9
 800bb90:	4543      	cmp	r3, r8
 800bb92:	f77f af79 	ble.w	800ba88 <_printf_float+0x24c>
 800bb96:	2301      	movs	r3, #1
 800bb98:	4652      	mov	r2, sl
 800bb9a:	4631      	mov	r1, r6
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	47b8      	blx	r7
 800bba0:	3001      	adds	r0, #1
 800bba2:	f43f aeaa 	beq.w	800b8fa <_printf_float+0xbe>
 800bba6:	f108 0801 	add.w	r8, r8, #1
 800bbaa:	e7ec      	b.n	800bb86 <_printf_float+0x34a>
 800bbac:	4613      	mov	r3, r2
 800bbae:	4631      	mov	r1, r6
 800bbb0:	4642      	mov	r2, r8
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	47b8      	blx	r7
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	d1c0      	bne.n	800bb3c <_printf_float+0x300>
 800bbba:	e69e      	b.n	800b8fa <_printf_float+0xbe>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	9205      	str	r2, [sp, #20]
 800bbc4:	47b8      	blx	r7
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	f43f ae97 	beq.w	800b8fa <_printf_float+0xbe>
 800bbcc:	9a05      	ldr	r2, [sp, #20]
 800bbce:	f10b 0b01 	add.w	fp, fp, #1
 800bbd2:	e7b9      	b.n	800bb48 <_printf_float+0x30c>
 800bbd4:	ee18 3a10 	vmov	r3, s16
 800bbd8:	4652      	mov	r2, sl
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4628      	mov	r0, r5
 800bbde:	47b8      	blx	r7
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	d1be      	bne.n	800bb62 <_printf_float+0x326>
 800bbe4:	e689      	b.n	800b8fa <_printf_float+0xbe>
 800bbe6:	9a05      	ldr	r2, [sp, #20]
 800bbe8:	464b      	mov	r3, r9
 800bbea:	4442      	add	r2, r8
 800bbec:	4631      	mov	r1, r6
 800bbee:	4628      	mov	r0, r5
 800bbf0:	47b8      	blx	r7
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	d1c1      	bne.n	800bb7a <_printf_float+0x33e>
 800bbf6:	e680      	b.n	800b8fa <_printf_float+0xbe>
 800bbf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbfa:	2a01      	cmp	r2, #1
 800bbfc:	dc01      	bgt.n	800bc02 <_printf_float+0x3c6>
 800bbfe:	07db      	lsls	r3, r3, #31
 800bc00:	d53a      	bpl.n	800bc78 <_printf_float+0x43c>
 800bc02:	2301      	movs	r3, #1
 800bc04:	4642      	mov	r2, r8
 800bc06:	4631      	mov	r1, r6
 800bc08:	4628      	mov	r0, r5
 800bc0a:	47b8      	blx	r7
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	f43f ae74 	beq.w	800b8fa <_printf_float+0xbe>
 800bc12:	ee18 3a10 	vmov	r3, s16
 800bc16:	4652      	mov	r2, sl
 800bc18:	4631      	mov	r1, r6
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	47b8      	blx	r7
 800bc1e:	3001      	adds	r0, #1
 800bc20:	f43f ae6b 	beq.w	800b8fa <_printf_float+0xbe>
 800bc24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bc30:	f7f4 ff72 	bl	8000b18 <__aeabi_dcmpeq>
 800bc34:	b9d8      	cbnz	r0, 800bc6e <_printf_float+0x432>
 800bc36:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bc3a:	f108 0201 	add.w	r2, r8, #1
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4628      	mov	r0, r5
 800bc42:	47b8      	blx	r7
 800bc44:	3001      	adds	r0, #1
 800bc46:	d10e      	bne.n	800bc66 <_printf_float+0x42a>
 800bc48:	e657      	b.n	800b8fa <_printf_float+0xbe>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	4652      	mov	r2, sl
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4628      	mov	r0, r5
 800bc52:	47b8      	blx	r7
 800bc54:	3001      	adds	r0, #1
 800bc56:	f43f ae50 	beq.w	800b8fa <_printf_float+0xbe>
 800bc5a:	f108 0801 	add.w	r8, r8, #1
 800bc5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc60:	3b01      	subs	r3, #1
 800bc62:	4543      	cmp	r3, r8
 800bc64:	dcf1      	bgt.n	800bc4a <_printf_float+0x40e>
 800bc66:	464b      	mov	r3, r9
 800bc68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc6c:	e6da      	b.n	800ba24 <_printf_float+0x1e8>
 800bc6e:	f04f 0800 	mov.w	r8, #0
 800bc72:	f104 0a1a 	add.w	sl, r4, #26
 800bc76:	e7f2      	b.n	800bc5e <_printf_float+0x422>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	4642      	mov	r2, r8
 800bc7c:	e7df      	b.n	800bc3e <_printf_float+0x402>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	464a      	mov	r2, r9
 800bc82:	4631      	mov	r1, r6
 800bc84:	4628      	mov	r0, r5
 800bc86:	47b8      	blx	r7
 800bc88:	3001      	adds	r0, #1
 800bc8a:	f43f ae36 	beq.w	800b8fa <_printf_float+0xbe>
 800bc8e:	f108 0801 	add.w	r8, r8, #1
 800bc92:	68e3      	ldr	r3, [r4, #12]
 800bc94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc96:	1a5b      	subs	r3, r3, r1
 800bc98:	4543      	cmp	r3, r8
 800bc9a:	dcf0      	bgt.n	800bc7e <_printf_float+0x442>
 800bc9c:	e6f8      	b.n	800ba90 <_printf_float+0x254>
 800bc9e:	f04f 0800 	mov.w	r8, #0
 800bca2:	f104 0919 	add.w	r9, r4, #25
 800bca6:	e7f4      	b.n	800bc92 <_printf_float+0x456>

0800bca8 <_printf_common>:
 800bca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcac:	4616      	mov	r6, r2
 800bcae:	4699      	mov	r9, r3
 800bcb0:	688a      	ldr	r2, [r1, #8]
 800bcb2:	690b      	ldr	r3, [r1, #16]
 800bcb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	bfb8      	it	lt
 800bcbc:	4613      	movlt	r3, r2
 800bcbe:	6033      	str	r3, [r6, #0]
 800bcc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	b10a      	cbz	r2, 800bcce <_printf_common+0x26>
 800bcca:	3301      	adds	r3, #1
 800bccc:	6033      	str	r3, [r6, #0]
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	0699      	lsls	r1, r3, #26
 800bcd2:	bf42      	ittt	mi
 800bcd4:	6833      	ldrmi	r3, [r6, #0]
 800bcd6:	3302      	addmi	r3, #2
 800bcd8:	6033      	strmi	r3, [r6, #0]
 800bcda:	6825      	ldr	r5, [r4, #0]
 800bcdc:	f015 0506 	ands.w	r5, r5, #6
 800bce0:	d106      	bne.n	800bcf0 <_printf_common+0x48>
 800bce2:	f104 0a19 	add.w	sl, r4, #25
 800bce6:	68e3      	ldr	r3, [r4, #12]
 800bce8:	6832      	ldr	r2, [r6, #0]
 800bcea:	1a9b      	subs	r3, r3, r2
 800bcec:	42ab      	cmp	r3, r5
 800bcee:	dc26      	bgt.n	800bd3e <_printf_common+0x96>
 800bcf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcf4:	1e13      	subs	r3, r2, #0
 800bcf6:	6822      	ldr	r2, [r4, #0]
 800bcf8:	bf18      	it	ne
 800bcfa:	2301      	movne	r3, #1
 800bcfc:	0692      	lsls	r2, r2, #26
 800bcfe:	d42b      	bmi.n	800bd58 <_printf_common+0xb0>
 800bd00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd04:	4649      	mov	r1, r9
 800bd06:	4638      	mov	r0, r7
 800bd08:	47c0      	blx	r8
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	d01e      	beq.n	800bd4c <_printf_common+0xa4>
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	6922      	ldr	r2, [r4, #16]
 800bd12:	f003 0306 	and.w	r3, r3, #6
 800bd16:	2b04      	cmp	r3, #4
 800bd18:	bf02      	ittt	eq
 800bd1a:	68e5      	ldreq	r5, [r4, #12]
 800bd1c:	6833      	ldreq	r3, [r6, #0]
 800bd1e:	1aed      	subeq	r5, r5, r3
 800bd20:	68a3      	ldr	r3, [r4, #8]
 800bd22:	bf0c      	ite	eq
 800bd24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd28:	2500      	movne	r5, #0
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	bfc4      	itt	gt
 800bd2e:	1a9b      	subgt	r3, r3, r2
 800bd30:	18ed      	addgt	r5, r5, r3
 800bd32:	2600      	movs	r6, #0
 800bd34:	341a      	adds	r4, #26
 800bd36:	42b5      	cmp	r5, r6
 800bd38:	d11a      	bne.n	800bd70 <_printf_common+0xc8>
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	e008      	b.n	800bd50 <_printf_common+0xa8>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	4652      	mov	r2, sl
 800bd42:	4649      	mov	r1, r9
 800bd44:	4638      	mov	r0, r7
 800bd46:	47c0      	blx	r8
 800bd48:	3001      	adds	r0, #1
 800bd4a:	d103      	bne.n	800bd54 <_printf_common+0xac>
 800bd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd54:	3501      	adds	r5, #1
 800bd56:	e7c6      	b.n	800bce6 <_printf_common+0x3e>
 800bd58:	18e1      	adds	r1, r4, r3
 800bd5a:	1c5a      	adds	r2, r3, #1
 800bd5c:	2030      	movs	r0, #48	; 0x30
 800bd5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd62:	4422      	add	r2, r4
 800bd64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd6c:	3302      	adds	r3, #2
 800bd6e:	e7c7      	b.n	800bd00 <_printf_common+0x58>
 800bd70:	2301      	movs	r3, #1
 800bd72:	4622      	mov	r2, r4
 800bd74:	4649      	mov	r1, r9
 800bd76:	4638      	mov	r0, r7
 800bd78:	47c0      	blx	r8
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	d0e6      	beq.n	800bd4c <_printf_common+0xa4>
 800bd7e:	3601      	adds	r6, #1
 800bd80:	e7d9      	b.n	800bd36 <_printf_common+0x8e>
	...

0800bd84 <_printf_i>:
 800bd84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd88:	7e0f      	ldrb	r7, [r1, #24]
 800bd8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd8c:	2f78      	cmp	r7, #120	; 0x78
 800bd8e:	4691      	mov	r9, r2
 800bd90:	4680      	mov	r8, r0
 800bd92:	460c      	mov	r4, r1
 800bd94:	469a      	mov	sl, r3
 800bd96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd9a:	d807      	bhi.n	800bdac <_printf_i+0x28>
 800bd9c:	2f62      	cmp	r7, #98	; 0x62
 800bd9e:	d80a      	bhi.n	800bdb6 <_printf_i+0x32>
 800bda0:	2f00      	cmp	r7, #0
 800bda2:	f000 80d4 	beq.w	800bf4e <_printf_i+0x1ca>
 800bda6:	2f58      	cmp	r7, #88	; 0x58
 800bda8:	f000 80c0 	beq.w	800bf2c <_printf_i+0x1a8>
 800bdac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdb4:	e03a      	b.n	800be2c <_printf_i+0xa8>
 800bdb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdba:	2b15      	cmp	r3, #21
 800bdbc:	d8f6      	bhi.n	800bdac <_printf_i+0x28>
 800bdbe:	a101      	add	r1, pc, #4	; (adr r1, 800bdc4 <_printf_i+0x40>)
 800bdc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdc4:	0800be1d 	.word	0x0800be1d
 800bdc8:	0800be31 	.word	0x0800be31
 800bdcc:	0800bdad 	.word	0x0800bdad
 800bdd0:	0800bdad 	.word	0x0800bdad
 800bdd4:	0800bdad 	.word	0x0800bdad
 800bdd8:	0800bdad 	.word	0x0800bdad
 800bddc:	0800be31 	.word	0x0800be31
 800bde0:	0800bdad 	.word	0x0800bdad
 800bde4:	0800bdad 	.word	0x0800bdad
 800bde8:	0800bdad 	.word	0x0800bdad
 800bdec:	0800bdad 	.word	0x0800bdad
 800bdf0:	0800bf35 	.word	0x0800bf35
 800bdf4:	0800be5d 	.word	0x0800be5d
 800bdf8:	0800beef 	.word	0x0800beef
 800bdfc:	0800bdad 	.word	0x0800bdad
 800be00:	0800bdad 	.word	0x0800bdad
 800be04:	0800bf57 	.word	0x0800bf57
 800be08:	0800bdad 	.word	0x0800bdad
 800be0c:	0800be5d 	.word	0x0800be5d
 800be10:	0800bdad 	.word	0x0800bdad
 800be14:	0800bdad 	.word	0x0800bdad
 800be18:	0800bef7 	.word	0x0800bef7
 800be1c:	682b      	ldr	r3, [r5, #0]
 800be1e:	1d1a      	adds	r2, r3, #4
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	602a      	str	r2, [r5, #0]
 800be24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be2c:	2301      	movs	r3, #1
 800be2e:	e09f      	b.n	800bf70 <_printf_i+0x1ec>
 800be30:	6820      	ldr	r0, [r4, #0]
 800be32:	682b      	ldr	r3, [r5, #0]
 800be34:	0607      	lsls	r7, r0, #24
 800be36:	f103 0104 	add.w	r1, r3, #4
 800be3a:	6029      	str	r1, [r5, #0]
 800be3c:	d501      	bpl.n	800be42 <_printf_i+0xbe>
 800be3e:	681e      	ldr	r6, [r3, #0]
 800be40:	e003      	b.n	800be4a <_printf_i+0xc6>
 800be42:	0646      	lsls	r6, r0, #25
 800be44:	d5fb      	bpl.n	800be3e <_printf_i+0xba>
 800be46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800be4a:	2e00      	cmp	r6, #0
 800be4c:	da03      	bge.n	800be56 <_printf_i+0xd2>
 800be4e:	232d      	movs	r3, #45	; 0x2d
 800be50:	4276      	negs	r6, r6
 800be52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be56:	485a      	ldr	r0, [pc, #360]	; (800bfc0 <_printf_i+0x23c>)
 800be58:	230a      	movs	r3, #10
 800be5a:	e012      	b.n	800be82 <_printf_i+0xfe>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	6820      	ldr	r0, [r4, #0]
 800be60:	1d19      	adds	r1, r3, #4
 800be62:	6029      	str	r1, [r5, #0]
 800be64:	0605      	lsls	r5, r0, #24
 800be66:	d501      	bpl.n	800be6c <_printf_i+0xe8>
 800be68:	681e      	ldr	r6, [r3, #0]
 800be6a:	e002      	b.n	800be72 <_printf_i+0xee>
 800be6c:	0641      	lsls	r1, r0, #25
 800be6e:	d5fb      	bpl.n	800be68 <_printf_i+0xe4>
 800be70:	881e      	ldrh	r6, [r3, #0]
 800be72:	4853      	ldr	r0, [pc, #332]	; (800bfc0 <_printf_i+0x23c>)
 800be74:	2f6f      	cmp	r7, #111	; 0x6f
 800be76:	bf0c      	ite	eq
 800be78:	2308      	moveq	r3, #8
 800be7a:	230a      	movne	r3, #10
 800be7c:	2100      	movs	r1, #0
 800be7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be82:	6865      	ldr	r5, [r4, #4]
 800be84:	60a5      	str	r5, [r4, #8]
 800be86:	2d00      	cmp	r5, #0
 800be88:	bfa2      	ittt	ge
 800be8a:	6821      	ldrge	r1, [r4, #0]
 800be8c:	f021 0104 	bicge.w	r1, r1, #4
 800be90:	6021      	strge	r1, [r4, #0]
 800be92:	b90e      	cbnz	r6, 800be98 <_printf_i+0x114>
 800be94:	2d00      	cmp	r5, #0
 800be96:	d04b      	beq.n	800bf30 <_printf_i+0x1ac>
 800be98:	4615      	mov	r5, r2
 800be9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800be9e:	fb03 6711 	mls	r7, r3, r1, r6
 800bea2:	5dc7      	ldrb	r7, [r0, r7]
 800bea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bea8:	4637      	mov	r7, r6
 800beaa:	42bb      	cmp	r3, r7
 800beac:	460e      	mov	r6, r1
 800beae:	d9f4      	bls.n	800be9a <_printf_i+0x116>
 800beb0:	2b08      	cmp	r3, #8
 800beb2:	d10b      	bne.n	800becc <_printf_i+0x148>
 800beb4:	6823      	ldr	r3, [r4, #0]
 800beb6:	07de      	lsls	r6, r3, #31
 800beb8:	d508      	bpl.n	800becc <_printf_i+0x148>
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	6861      	ldr	r1, [r4, #4]
 800bebe:	4299      	cmp	r1, r3
 800bec0:	bfde      	ittt	le
 800bec2:	2330      	movle	r3, #48	; 0x30
 800bec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bec8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800becc:	1b52      	subs	r2, r2, r5
 800bece:	6122      	str	r2, [r4, #16]
 800bed0:	f8cd a000 	str.w	sl, [sp]
 800bed4:	464b      	mov	r3, r9
 800bed6:	aa03      	add	r2, sp, #12
 800bed8:	4621      	mov	r1, r4
 800beda:	4640      	mov	r0, r8
 800bedc:	f7ff fee4 	bl	800bca8 <_printf_common>
 800bee0:	3001      	adds	r0, #1
 800bee2:	d14a      	bne.n	800bf7a <_printf_i+0x1f6>
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295
 800bee8:	b004      	add	sp, #16
 800beea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	f043 0320 	orr.w	r3, r3, #32
 800bef4:	6023      	str	r3, [r4, #0]
 800bef6:	4833      	ldr	r0, [pc, #204]	; (800bfc4 <_printf_i+0x240>)
 800bef8:	2778      	movs	r7, #120	; 0x78
 800befa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	6829      	ldr	r1, [r5, #0]
 800bf02:	061f      	lsls	r7, r3, #24
 800bf04:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf08:	d402      	bmi.n	800bf10 <_printf_i+0x18c>
 800bf0a:	065f      	lsls	r7, r3, #25
 800bf0c:	bf48      	it	mi
 800bf0e:	b2b6      	uxthmi	r6, r6
 800bf10:	07df      	lsls	r7, r3, #31
 800bf12:	bf48      	it	mi
 800bf14:	f043 0320 	orrmi.w	r3, r3, #32
 800bf18:	6029      	str	r1, [r5, #0]
 800bf1a:	bf48      	it	mi
 800bf1c:	6023      	strmi	r3, [r4, #0]
 800bf1e:	b91e      	cbnz	r6, 800bf28 <_printf_i+0x1a4>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	f023 0320 	bic.w	r3, r3, #32
 800bf26:	6023      	str	r3, [r4, #0]
 800bf28:	2310      	movs	r3, #16
 800bf2a:	e7a7      	b.n	800be7c <_printf_i+0xf8>
 800bf2c:	4824      	ldr	r0, [pc, #144]	; (800bfc0 <_printf_i+0x23c>)
 800bf2e:	e7e4      	b.n	800befa <_printf_i+0x176>
 800bf30:	4615      	mov	r5, r2
 800bf32:	e7bd      	b.n	800beb0 <_printf_i+0x12c>
 800bf34:	682b      	ldr	r3, [r5, #0]
 800bf36:	6826      	ldr	r6, [r4, #0]
 800bf38:	6961      	ldr	r1, [r4, #20]
 800bf3a:	1d18      	adds	r0, r3, #4
 800bf3c:	6028      	str	r0, [r5, #0]
 800bf3e:	0635      	lsls	r5, r6, #24
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	d501      	bpl.n	800bf48 <_printf_i+0x1c4>
 800bf44:	6019      	str	r1, [r3, #0]
 800bf46:	e002      	b.n	800bf4e <_printf_i+0x1ca>
 800bf48:	0670      	lsls	r0, r6, #25
 800bf4a:	d5fb      	bpl.n	800bf44 <_printf_i+0x1c0>
 800bf4c:	8019      	strh	r1, [r3, #0]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	6123      	str	r3, [r4, #16]
 800bf52:	4615      	mov	r5, r2
 800bf54:	e7bc      	b.n	800bed0 <_printf_i+0x14c>
 800bf56:	682b      	ldr	r3, [r5, #0]
 800bf58:	1d1a      	adds	r2, r3, #4
 800bf5a:	602a      	str	r2, [r5, #0]
 800bf5c:	681d      	ldr	r5, [r3, #0]
 800bf5e:	6862      	ldr	r2, [r4, #4]
 800bf60:	2100      	movs	r1, #0
 800bf62:	4628      	mov	r0, r5
 800bf64:	f7f4 f95c 	bl	8000220 <memchr>
 800bf68:	b108      	cbz	r0, 800bf6e <_printf_i+0x1ea>
 800bf6a:	1b40      	subs	r0, r0, r5
 800bf6c:	6060      	str	r0, [r4, #4]
 800bf6e:	6863      	ldr	r3, [r4, #4]
 800bf70:	6123      	str	r3, [r4, #16]
 800bf72:	2300      	movs	r3, #0
 800bf74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf78:	e7aa      	b.n	800bed0 <_printf_i+0x14c>
 800bf7a:	6923      	ldr	r3, [r4, #16]
 800bf7c:	462a      	mov	r2, r5
 800bf7e:	4649      	mov	r1, r9
 800bf80:	4640      	mov	r0, r8
 800bf82:	47d0      	blx	sl
 800bf84:	3001      	adds	r0, #1
 800bf86:	d0ad      	beq.n	800bee4 <_printf_i+0x160>
 800bf88:	6823      	ldr	r3, [r4, #0]
 800bf8a:	079b      	lsls	r3, r3, #30
 800bf8c:	d413      	bmi.n	800bfb6 <_printf_i+0x232>
 800bf8e:	68e0      	ldr	r0, [r4, #12]
 800bf90:	9b03      	ldr	r3, [sp, #12]
 800bf92:	4298      	cmp	r0, r3
 800bf94:	bfb8      	it	lt
 800bf96:	4618      	movlt	r0, r3
 800bf98:	e7a6      	b.n	800bee8 <_printf_i+0x164>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	4632      	mov	r2, r6
 800bf9e:	4649      	mov	r1, r9
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	47d0      	blx	sl
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d09d      	beq.n	800bee4 <_printf_i+0x160>
 800bfa8:	3501      	adds	r5, #1
 800bfaa:	68e3      	ldr	r3, [r4, #12]
 800bfac:	9903      	ldr	r1, [sp, #12]
 800bfae:	1a5b      	subs	r3, r3, r1
 800bfb0:	42ab      	cmp	r3, r5
 800bfb2:	dcf2      	bgt.n	800bf9a <_printf_i+0x216>
 800bfb4:	e7eb      	b.n	800bf8e <_printf_i+0x20a>
 800bfb6:	2500      	movs	r5, #0
 800bfb8:	f104 0619 	add.w	r6, r4, #25
 800bfbc:	e7f5      	b.n	800bfaa <_printf_i+0x226>
 800bfbe:	bf00      	nop
 800bfc0:	0800f5ea 	.word	0x0800f5ea
 800bfc4:	0800f5fb 	.word	0x0800f5fb

0800bfc8 <std>:
 800bfc8:	2300      	movs	r3, #0
 800bfca:	b510      	push	{r4, lr}
 800bfcc:	4604      	mov	r4, r0
 800bfce:	e9c0 3300 	strd	r3, r3, [r0]
 800bfd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfd6:	6083      	str	r3, [r0, #8]
 800bfd8:	8181      	strh	r1, [r0, #12]
 800bfda:	6643      	str	r3, [r0, #100]	; 0x64
 800bfdc:	81c2      	strh	r2, [r0, #14]
 800bfde:	6183      	str	r3, [r0, #24]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	2208      	movs	r2, #8
 800bfe4:	305c      	adds	r0, #92	; 0x5c
 800bfe6:	f000 f93d 	bl	800c264 <memset>
 800bfea:	4b0d      	ldr	r3, [pc, #52]	; (800c020 <std+0x58>)
 800bfec:	6263      	str	r3, [r4, #36]	; 0x24
 800bfee:	4b0d      	ldr	r3, [pc, #52]	; (800c024 <std+0x5c>)
 800bff0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bff2:	4b0d      	ldr	r3, [pc, #52]	; (800c028 <std+0x60>)
 800bff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bff6:	4b0d      	ldr	r3, [pc, #52]	; (800c02c <std+0x64>)
 800bff8:	6323      	str	r3, [r4, #48]	; 0x30
 800bffa:	4b0d      	ldr	r3, [pc, #52]	; (800c030 <std+0x68>)
 800bffc:	6224      	str	r4, [r4, #32]
 800bffe:	429c      	cmp	r4, r3
 800c000:	d006      	beq.n	800c010 <std+0x48>
 800c002:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c006:	4294      	cmp	r4, r2
 800c008:	d002      	beq.n	800c010 <std+0x48>
 800c00a:	33d0      	adds	r3, #208	; 0xd0
 800c00c:	429c      	cmp	r4, r3
 800c00e:	d105      	bne.n	800c01c <std+0x54>
 800c010:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c018:	f000 b9a0 	b.w	800c35c <__retarget_lock_init_recursive>
 800c01c:	bd10      	pop	{r4, pc}
 800c01e:	bf00      	nop
 800c020:	0800c14d 	.word	0x0800c14d
 800c024:	0800c16f 	.word	0x0800c16f
 800c028:	0800c1a7 	.word	0x0800c1a7
 800c02c:	0800c1cb 	.word	0x0800c1cb
 800c030:	20001c8c 	.word	0x20001c8c

0800c034 <stdio_exit_handler>:
 800c034:	4a02      	ldr	r2, [pc, #8]	; (800c040 <stdio_exit_handler+0xc>)
 800c036:	4903      	ldr	r1, [pc, #12]	; (800c044 <stdio_exit_handler+0x10>)
 800c038:	4803      	ldr	r0, [pc, #12]	; (800c048 <stdio_exit_handler+0x14>)
 800c03a:	f000 b869 	b.w	800c110 <_fwalk_sglue>
 800c03e:	bf00      	nop
 800c040:	200005a4 	.word	0x200005a4
 800c044:	0800dd29 	.word	0x0800dd29
 800c048:	200005b0 	.word	0x200005b0

0800c04c <cleanup_stdio>:
 800c04c:	6841      	ldr	r1, [r0, #4]
 800c04e:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <cleanup_stdio+0x34>)
 800c050:	4299      	cmp	r1, r3
 800c052:	b510      	push	{r4, lr}
 800c054:	4604      	mov	r4, r0
 800c056:	d001      	beq.n	800c05c <cleanup_stdio+0x10>
 800c058:	f001 fe66 	bl	800dd28 <_fflush_r>
 800c05c:	68a1      	ldr	r1, [r4, #8]
 800c05e:	4b09      	ldr	r3, [pc, #36]	; (800c084 <cleanup_stdio+0x38>)
 800c060:	4299      	cmp	r1, r3
 800c062:	d002      	beq.n	800c06a <cleanup_stdio+0x1e>
 800c064:	4620      	mov	r0, r4
 800c066:	f001 fe5f 	bl	800dd28 <_fflush_r>
 800c06a:	68e1      	ldr	r1, [r4, #12]
 800c06c:	4b06      	ldr	r3, [pc, #24]	; (800c088 <cleanup_stdio+0x3c>)
 800c06e:	4299      	cmp	r1, r3
 800c070:	d004      	beq.n	800c07c <cleanup_stdio+0x30>
 800c072:	4620      	mov	r0, r4
 800c074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c078:	f001 be56 	b.w	800dd28 <_fflush_r>
 800c07c:	bd10      	pop	{r4, pc}
 800c07e:	bf00      	nop
 800c080:	20001c8c 	.word	0x20001c8c
 800c084:	20001cf4 	.word	0x20001cf4
 800c088:	20001d5c 	.word	0x20001d5c

0800c08c <global_stdio_init.part.0>:
 800c08c:	b510      	push	{r4, lr}
 800c08e:	4b0b      	ldr	r3, [pc, #44]	; (800c0bc <global_stdio_init.part.0+0x30>)
 800c090:	4c0b      	ldr	r4, [pc, #44]	; (800c0c0 <global_stdio_init.part.0+0x34>)
 800c092:	4a0c      	ldr	r2, [pc, #48]	; (800c0c4 <global_stdio_init.part.0+0x38>)
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	4620      	mov	r0, r4
 800c098:	2200      	movs	r2, #0
 800c09a:	2104      	movs	r1, #4
 800c09c:	f7ff ff94 	bl	800bfc8 <std>
 800c0a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	2109      	movs	r1, #9
 800c0a8:	f7ff ff8e 	bl	800bfc8 <std>
 800c0ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c0b0:	2202      	movs	r2, #2
 800c0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0b6:	2112      	movs	r1, #18
 800c0b8:	f7ff bf86 	b.w	800bfc8 <std>
 800c0bc:	20001dc4 	.word	0x20001dc4
 800c0c0:	20001c8c 	.word	0x20001c8c
 800c0c4:	0800c035 	.word	0x0800c035

0800c0c8 <__sfp_lock_acquire>:
 800c0c8:	4801      	ldr	r0, [pc, #4]	; (800c0d0 <__sfp_lock_acquire+0x8>)
 800c0ca:	f000 b948 	b.w	800c35e <__retarget_lock_acquire_recursive>
 800c0ce:	bf00      	nop
 800c0d0:	20001dcd 	.word	0x20001dcd

0800c0d4 <__sfp_lock_release>:
 800c0d4:	4801      	ldr	r0, [pc, #4]	; (800c0dc <__sfp_lock_release+0x8>)
 800c0d6:	f000 b943 	b.w	800c360 <__retarget_lock_release_recursive>
 800c0da:	bf00      	nop
 800c0dc:	20001dcd 	.word	0x20001dcd

0800c0e0 <__sinit>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	f7ff fff0 	bl	800c0c8 <__sfp_lock_acquire>
 800c0e8:	6a23      	ldr	r3, [r4, #32]
 800c0ea:	b11b      	cbz	r3, 800c0f4 <__sinit+0x14>
 800c0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0f0:	f7ff bff0 	b.w	800c0d4 <__sfp_lock_release>
 800c0f4:	4b04      	ldr	r3, [pc, #16]	; (800c108 <__sinit+0x28>)
 800c0f6:	6223      	str	r3, [r4, #32]
 800c0f8:	4b04      	ldr	r3, [pc, #16]	; (800c10c <__sinit+0x2c>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1f5      	bne.n	800c0ec <__sinit+0xc>
 800c100:	f7ff ffc4 	bl	800c08c <global_stdio_init.part.0>
 800c104:	e7f2      	b.n	800c0ec <__sinit+0xc>
 800c106:	bf00      	nop
 800c108:	0800c04d 	.word	0x0800c04d
 800c10c:	20001dc4 	.word	0x20001dc4

0800c110 <_fwalk_sglue>:
 800c110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c114:	4607      	mov	r7, r0
 800c116:	4688      	mov	r8, r1
 800c118:	4614      	mov	r4, r2
 800c11a:	2600      	movs	r6, #0
 800c11c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c120:	f1b9 0901 	subs.w	r9, r9, #1
 800c124:	d505      	bpl.n	800c132 <_fwalk_sglue+0x22>
 800c126:	6824      	ldr	r4, [r4, #0]
 800c128:	2c00      	cmp	r4, #0
 800c12a:	d1f7      	bne.n	800c11c <_fwalk_sglue+0xc>
 800c12c:	4630      	mov	r0, r6
 800c12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c132:	89ab      	ldrh	r3, [r5, #12]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d907      	bls.n	800c148 <_fwalk_sglue+0x38>
 800c138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c13c:	3301      	adds	r3, #1
 800c13e:	d003      	beq.n	800c148 <_fwalk_sglue+0x38>
 800c140:	4629      	mov	r1, r5
 800c142:	4638      	mov	r0, r7
 800c144:	47c0      	blx	r8
 800c146:	4306      	orrs	r6, r0
 800c148:	3568      	adds	r5, #104	; 0x68
 800c14a:	e7e9      	b.n	800c120 <_fwalk_sglue+0x10>

0800c14c <__sread>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	460c      	mov	r4, r1
 800c150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c154:	f000 f8b4 	bl	800c2c0 <_read_r>
 800c158:	2800      	cmp	r0, #0
 800c15a:	bfab      	itete	ge
 800c15c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c15e:	89a3      	ldrhlt	r3, [r4, #12]
 800c160:	181b      	addge	r3, r3, r0
 800c162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c166:	bfac      	ite	ge
 800c168:	6563      	strge	r3, [r4, #84]	; 0x54
 800c16a:	81a3      	strhlt	r3, [r4, #12]
 800c16c:	bd10      	pop	{r4, pc}

0800c16e <__swrite>:
 800c16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c172:	461f      	mov	r7, r3
 800c174:	898b      	ldrh	r3, [r1, #12]
 800c176:	05db      	lsls	r3, r3, #23
 800c178:	4605      	mov	r5, r0
 800c17a:	460c      	mov	r4, r1
 800c17c:	4616      	mov	r6, r2
 800c17e:	d505      	bpl.n	800c18c <__swrite+0x1e>
 800c180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c184:	2302      	movs	r3, #2
 800c186:	2200      	movs	r2, #0
 800c188:	f000 f888 	bl	800c29c <_lseek_r>
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c196:	81a3      	strh	r3, [r4, #12]
 800c198:	4632      	mov	r2, r6
 800c19a:	463b      	mov	r3, r7
 800c19c:	4628      	mov	r0, r5
 800c19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a2:	f000 b89f 	b.w	800c2e4 <_write_r>

0800c1a6 <__sseek>:
 800c1a6:	b510      	push	{r4, lr}
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ae:	f000 f875 	bl	800c29c <_lseek_r>
 800c1b2:	1c43      	adds	r3, r0, #1
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	bf15      	itete	ne
 800c1b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1c2:	81a3      	strheq	r3, [r4, #12]
 800c1c4:	bf18      	it	ne
 800c1c6:	81a3      	strhne	r3, [r4, #12]
 800c1c8:	bd10      	pop	{r4, pc}

0800c1ca <__sclose>:
 800c1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ce:	f000 b855 	b.w	800c27c <_close_r>

0800c1d2 <_vsniprintf_r>:
 800c1d2:	b530      	push	{r4, r5, lr}
 800c1d4:	4614      	mov	r4, r2
 800c1d6:	2c00      	cmp	r4, #0
 800c1d8:	b09b      	sub	sp, #108	; 0x6c
 800c1da:	4605      	mov	r5, r0
 800c1dc:	461a      	mov	r2, r3
 800c1de:	da05      	bge.n	800c1ec <_vsniprintf_r+0x1a>
 800c1e0:	238b      	movs	r3, #139	; 0x8b
 800c1e2:	6003      	str	r3, [r0, #0]
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	b01b      	add	sp, #108	; 0x6c
 800c1ea:	bd30      	pop	{r4, r5, pc}
 800c1ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c1f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c1f4:	bf14      	ite	ne
 800c1f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c1fa:	4623      	moveq	r3, r4
 800c1fc:	9302      	str	r3, [sp, #8]
 800c1fe:	9305      	str	r3, [sp, #20]
 800c200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c204:	9100      	str	r1, [sp, #0]
 800c206:	9104      	str	r1, [sp, #16]
 800c208:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c20c:	4669      	mov	r1, sp
 800c20e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c210:	f001 fc06 	bl	800da20 <_svfiprintf_r>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	bfbc      	itt	lt
 800c218:	238b      	movlt	r3, #139	; 0x8b
 800c21a:	602b      	strlt	r3, [r5, #0]
 800c21c:	2c00      	cmp	r4, #0
 800c21e:	d0e3      	beq.n	800c1e8 <_vsniprintf_r+0x16>
 800c220:	9b00      	ldr	r3, [sp, #0]
 800c222:	2200      	movs	r2, #0
 800c224:	701a      	strb	r2, [r3, #0]
 800c226:	e7df      	b.n	800c1e8 <_vsniprintf_r+0x16>

0800c228 <vsniprintf>:
 800c228:	b507      	push	{r0, r1, r2, lr}
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	4613      	mov	r3, r2
 800c22e:	460a      	mov	r2, r1
 800c230:	4601      	mov	r1, r0
 800c232:	4803      	ldr	r0, [pc, #12]	; (800c240 <vsniprintf+0x18>)
 800c234:	6800      	ldr	r0, [r0, #0]
 800c236:	f7ff ffcc 	bl	800c1d2 <_vsniprintf_r>
 800c23a:	b003      	add	sp, #12
 800c23c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c240:	200005fc 	.word	0x200005fc

0800c244 <memcmp>:
 800c244:	b510      	push	{r4, lr}
 800c246:	3901      	subs	r1, #1
 800c248:	4402      	add	r2, r0
 800c24a:	4290      	cmp	r0, r2
 800c24c:	d101      	bne.n	800c252 <memcmp+0xe>
 800c24e:	2000      	movs	r0, #0
 800c250:	e005      	b.n	800c25e <memcmp+0x1a>
 800c252:	7803      	ldrb	r3, [r0, #0]
 800c254:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c258:	42a3      	cmp	r3, r4
 800c25a:	d001      	beq.n	800c260 <memcmp+0x1c>
 800c25c:	1b18      	subs	r0, r3, r4
 800c25e:	bd10      	pop	{r4, pc}
 800c260:	3001      	adds	r0, #1
 800c262:	e7f2      	b.n	800c24a <memcmp+0x6>

0800c264 <memset>:
 800c264:	4402      	add	r2, r0
 800c266:	4603      	mov	r3, r0
 800c268:	4293      	cmp	r3, r2
 800c26a:	d100      	bne.n	800c26e <memset+0xa>
 800c26c:	4770      	bx	lr
 800c26e:	f803 1b01 	strb.w	r1, [r3], #1
 800c272:	e7f9      	b.n	800c268 <memset+0x4>

0800c274 <_localeconv_r>:
 800c274:	4800      	ldr	r0, [pc, #0]	; (800c278 <_localeconv_r+0x4>)
 800c276:	4770      	bx	lr
 800c278:	200006f0 	.word	0x200006f0

0800c27c <_close_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4d06      	ldr	r5, [pc, #24]	; (800c298 <_close_r+0x1c>)
 800c280:	2300      	movs	r3, #0
 800c282:	4604      	mov	r4, r0
 800c284:	4608      	mov	r0, r1
 800c286:	602b      	str	r3, [r5, #0]
 800c288:	f7f9 fb89 	bl	800599e <_close>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d102      	bne.n	800c296 <_close_r+0x1a>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b103      	cbz	r3, 800c296 <_close_r+0x1a>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	20001dc8 	.word	0x20001dc8

0800c29c <_lseek_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	4d07      	ldr	r5, [pc, #28]	; (800c2bc <_lseek_r+0x20>)
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	4608      	mov	r0, r1
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	602a      	str	r2, [r5, #0]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f7f9 fb81 	bl	80059b2 <_lseek>
 800c2b0:	1c43      	adds	r3, r0, #1
 800c2b2:	d102      	bne.n	800c2ba <_lseek_r+0x1e>
 800c2b4:	682b      	ldr	r3, [r5, #0]
 800c2b6:	b103      	cbz	r3, 800c2ba <_lseek_r+0x1e>
 800c2b8:	6023      	str	r3, [r4, #0]
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	20001dc8 	.word	0x20001dc8

0800c2c0 <_read_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d07      	ldr	r5, [pc, #28]	; (800c2e0 <_read_r+0x20>)
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	4608      	mov	r0, r1
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	602a      	str	r2, [r5, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f7f9 fb4b 	bl	800596a <_read>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_read_r+0x1e>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_read_r+0x1e>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	20001dc8 	.word	0x20001dc8

0800c2e4 <_write_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4d07      	ldr	r5, [pc, #28]	; (800c304 <_write_r+0x20>)
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	4608      	mov	r0, r1
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	602a      	str	r2, [r5, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	f7f9 fb46 	bl	8005984 <_write>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_write_r+0x1e>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_write_r+0x1e>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	20001dc8 	.word	0x20001dc8

0800c308 <__errno>:
 800c308:	4b01      	ldr	r3, [pc, #4]	; (800c310 <__errno+0x8>)
 800c30a:	6818      	ldr	r0, [r3, #0]
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	200005fc 	.word	0x200005fc

0800c314 <__libc_init_array>:
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	4d0d      	ldr	r5, [pc, #52]	; (800c34c <__libc_init_array+0x38>)
 800c318:	4c0d      	ldr	r4, [pc, #52]	; (800c350 <__libc_init_array+0x3c>)
 800c31a:	1b64      	subs	r4, r4, r5
 800c31c:	10a4      	asrs	r4, r4, #2
 800c31e:	2600      	movs	r6, #0
 800c320:	42a6      	cmp	r6, r4
 800c322:	d109      	bne.n	800c338 <__libc_init_array+0x24>
 800c324:	4d0b      	ldr	r5, [pc, #44]	; (800c354 <__libc_init_array+0x40>)
 800c326:	4c0c      	ldr	r4, [pc, #48]	; (800c358 <__libc_init_array+0x44>)
 800c328:	f003 f854 	bl	800f3d4 <_init>
 800c32c:	1b64      	subs	r4, r4, r5
 800c32e:	10a4      	asrs	r4, r4, #2
 800c330:	2600      	movs	r6, #0
 800c332:	42a6      	cmp	r6, r4
 800c334:	d105      	bne.n	800c342 <__libc_init_array+0x2e>
 800c336:	bd70      	pop	{r4, r5, r6, pc}
 800c338:	f855 3b04 	ldr.w	r3, [r5], #4
 800c33c:	4798      	blx	r3
 800c33e:	3601      	adds	r6, #1
 800c340:	e7ee      	b.n	800c320 <__libc_init_array+0xc>
 800c342:	f855 3b04 	ldr.w	r3, [r5], #4
 800c346:	4798      	blx	r3
 800c348:	3601      	adds	r6, #1
 800c34a:	e7f2      	b.n	800c332 <__libc_init_array+0x1e>
 800c34c:	0800fd38 	.word	0x0800fd38
 800c350:	0800fd38 	.word	0x0800fd38
 800c354:	0800fd38 	.word	0x0800fd38
 800c358:	0800fd3c 	.word	0x0800fd3c

0800c35c <__retarget_lock_init_recursive>:
 800c35c:	4770      	bx	lr

0800c35e <__retarget_lock_acquire_recursive>:
 800c35e:	4770      	bx	lr

0800c360 <__retarget_lock_release_recursive>:
 800c360:	4770      	bx	lr

0800c362 <memcpy>:
 800c362:	440a      	add	r2, r1
 800c364:	4291      	cmp	r1, r2
 800c366:	f100 33ff 	add.w	r3, r0, #4294967295
 800c36a:	d100      	bne.n	800c36e <memcpy+0xc>
 800c36c:	4770      	bx	lr
 800c36e:	b510      	push	{r4, lr}
 800c370:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c374:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c378:	4291      	cmp	r1, r2
 800c37a:	d1f9      	bne.n	800c370 <memcpy+0xe>
 800c37c:	bd10      	pop	{r4, pc}

0800c37e <quorem>:
 800c37e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c382:	6903      	ldr	r3, [r0, #16]
 800c384:	690c      	ldr	r4, [r1, #16]
 800c386:	42a3      	cmp	r3, r4
 800c388:	4607      	mov	r7, r0
 800c38a:	db7e      	blt.n	800c48a <quorem+0x10c>
 800c38c:	3c01      	subs	r4, #1
 800c38e:	f101 0814 	add.w	r8, r1, #20
 800c392:	f100 0514 	add.w	r5, r0, #20
 800c396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c39a:	9301      	str	r3, [sp, #4]
 800c39c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c3ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c3b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c3b4:	d331      	bcc.n	800c41a <quorem+0x9c>
 800c3b6:	f04f 0e00 	mov.w	lr, #0
 800c3ba:	4640      	mov	r0, r8
 800c3bc:	46ac      	mov	ip, r5
 800c3be:	46f2      	mov	sl, lr
 800c3c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c3c4:	b293      	uxth	r3, r2
 800c3c6:	fb06 e303 	mla	r3, r6, r3, lr
 800c3ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c3ce:	0c1a      	lsrs	r2, r3, #16
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	ebaa 0303 	sub.w	r3, sl, r3
 800c3d6:	f8dc a000 	ldr.w	sl, [ip]
 800c3da:	fa13 f38a 	uxtah	r3, r3, sl
 800c3de:	fb06 220e 	mla	r2, r6, lr, r2
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	9b00      	ldr	r3, [sp, #0]
 800c3e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c3ea:	b292      	uxth	r2, r2
 800c3ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c3f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c3f8:	4581      	cmp	r9, r0
 800c3fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3fe:	f84c 3b04 	str.w	r3, [ip], #4
 800c402:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c406:	d2db      	bcs.n	800c3c0 <quorem+0x42>
 800c408:	f855 300b 	ldr.w	r3, [r5, fp]
 800c40c:	b92b      	cbnz	r3, 800c41a <quorem+0x9c>
 800c40e:	9b01      	ldr	r3, [sp, #4]
 800c410:	3b04      	subs	r3, #4
 800c412:	429d      	cmp	r5, r3
 800c414:	461a      	mov	r2, r3
 800c416:	d32c      	bcc.n	800c472 <quorem+0xf4>
 800c418:	613c      	str	r4, [r7, #16]
 800c41a:	4638      	mov	r0, r7
 800c41c:	f001 f9a6 	bl	800d76c <__mcmp>
 800c420:	2800      	cmp	r0, #0
 800c422:	db22      	blt.n	800c46a <quorem+0xec>
 800c424:	3601      	adds	r6, #1
 800c426:	4629      	mov	r1, r5
 800c428:	2000      	movs	r0, #0
 800c42a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c42e:	f8d1 c000 	ldr.w	ip, [r1]
 800c432:	b293      	uxth	r3, r2
 800c434:	1ac3      	subs	r3, r0, r3
 800c436:	0c12      	lsrs	r2, r2, #16
 800c438:	fa13 f38c 	uxtah	r3, r3, ip
 800c43c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c444:	b29b      	uxth	r3, r3
 800c446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c44a:	45c1      	cmp	r9, r8
 800c44c:	f841 3b04 	str.w	r3, [r1], #4
 800c450:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c454:	d2e9      	bcs.n	800c42a <quorem+0xac>
 800c456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c45a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c45e:	b922      	cbnz	r2, 800c46a <quorem+0xec>
 800c460:	3b04      	subs	r3, #4
 800c462:	429d      	cmp	r5, r3
 800c464:	461a      	mov	r2, r3
 800c466:	d30a      	bcc.n	800c47e <quorem+0x100>
 800c468:	613c      	str	r4, [r7, #16]
 800c46a:	4630      	mov	r0, r6
 800c46c:	b003      	add	sp, #12
 800c46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c472:	6812      	ldr	r2, [r2, #0]
 800c474:	3b04      	subs	r3, #4
 800c476:	2a00      	cmp	r2, #0
 800c478:	d1ce      	bne.n	800c418 <quorem+0x9a>
 800c47a:	3c01      	subs	r4, #1
 800c47c:	e7c9      	b.n	800c412 <quorem+0x94>
 800c47e:	6812      	ldr	r2, [r2, #0]
 800c480:	3b04      	subs	r3, #4
 800c482:	2a00      	cmp	r2, #0
 800c484:	d1f0      	bne.n	800c468 <quorem+0xea>
 800c486:	3c01      	subs	r4, #1
 800c488:	e7eb      	b.n	800c462 <quorem+0xe4>
 800c48a:	2000      	movs	r0, #0
 800c48c:	e7ee      	b.n	800c46c <quorem+0xee>
	...

0800c490 <_dtoa_r>:
 800c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	ed2d 8b04 	vpush	{d8-d9}
 800c498:	69c5      	ldr	r5, [r0, #28]
 800c49a:	b093      	sub	sp, #76	; 0x4c
 800c49c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c4a0:	ec57 6b10 	vmov	r6, r7, d0
 800c4a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c4a8:	9107      	str	r1, [sp, #28]
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	920a      	str	r2, [sp, #40]	; 0x28
 800c4ae:	930d      	str	r3, [sp, #52]	; 0x34
 800c4b0:	b975      	cbnz	r5, 800c4d0 <_dtoa_r+0x40>
 800c4b2:	2010      	movs	r0, #16
 800c4b4:	f000 fe2a 	bl	800d10c <malloc>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	61e0      	str	r0, [r4, #28]
 800c4bc:	b920      	cbnz	r0, 800c4c8 <_dtoa_r+0x38>
 800c4be:	4bae      	ldr	r3, [pc, #696]	; (800c778 <_dtoa_r+0x2e8>)
 800c4c0:	21ef      	movs	r1, #239	; 0xef
 800c4c2:	48ae      	ldr	r0, [pc, #696]	; (800c77c <_dtoa_r+0x2ec>)
 800c4c4:	f001 fc82 	bl	800ddcc <__assert_func>
 800c4c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4cc:	6005      	str	r5, [r0, #0]
 800c4ce:	60c5      	str	r5, [r0, #12]
 800c4d0:	69e3      	ldr	r3, [r4, #28]
 800c4d2:	6819      	ldr	r1, [r3, #0]
 800c4d4:	b151      	cbz	r1, 800c4ec <_dtoa_r+0x5c>
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	604a      	str	r2, [r1, #4]
 800c4da:	2301      	movs	r3, #1
 800c4dc:	4093      	lsls	r3, r2
 800c4de:	608b      	str	r3, [r1, #8]
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f000 ff07 	bl	800d2f4 <_Bfree>
 800c4e6:	69e3      	ldr	r3, [r4, #28]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	1e3b      	subs	r3, r7, #0
 800c4ee:	bfbb      	ittet	lt
 800c4f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c4f4:	9303      	strlt	r3, [sp, #12]
 800c4f6:	2300      	movge	r3, #0
 800c4f8:	2201      	movlt	r2, #1
 800c4fa:	bfac      	ite	ge
 800c4fc:	f8c8 3000 	strge.w	r3, [r8]
 800c500:	f8c8 2000 	strlt.w	r2, [r8]
 800c504:	4b9e      	ldr	r3, [pc, #632]	; (800c780 <_dtoa_r+0x2f0>)
 800c506:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c50a:	ea33 0308 	bics.w	r3, r3, r8
 800c50e:	d11b      	bne.n	800c548 <_dtoa_r+0xb8>
 800c510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c512:	f242 730f 	movw	r3, #9999	; 0x270f
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c51c:	4333      	orrs	r3, r6
 800c51e:	f000 8593 	beq.w	800d048 <_dtoa_r+0xbb8>
 800c522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c524:	b963      	cbnz	r3, 800c540 <_dtoa_r+0xb0>
 800c526:	4b97      	ldr	r3, [pc, #604]	; (800c784 <_dtoa_r+0x2f4>)
 800c528:	e027      	b.n	800c57a <_dtoa_r+0xea>
 800c52a:	4b97      	ldr	r3, [pc, #604]	; (800c788 <_dtoa_r+0x2f8>)
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	3308      	adds	r3, #8
 800c530:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c532:	6013      	str	r3, [r2, #0]
 800c534:	9800      	ldr	r0, [sp, #0]
 800c536:	b013      	add	sp, #76	; 0x4c
 800c538:	ecbd 8b04 	vpop	{d8-d9}
 800c53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c540:	4b90      	ldr	r3, [pc, #576]	; (800c784 <_dtoa_r+0x2f4>)
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	3303      	adds	r3, #3
 800c546:	e7f3      	b.n	800c530 <_dtoa_r+0xa0>
 800c548:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c54c:	2200      	movs	r2, #0
 800c54e:	ec51 0b17 	vmov	r0, r1, d7
 800c552:	eeb0 8a47 	vmov.f32	s16, s14
 800c556:	eef0 8a67 	vmov.f32	s17, s15
 800c55a:	2300      	movs	r3, #0
 800c55c:	f7f4 fadc 	bl	8000b18 <__aeabi_dcmpeq>
 800c560:	4681      	mov	r9, r0
 800c562:	b160      	cbz	r0, 800c57e <_dtoa_r+0xee>
 800c564:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c566:	2301      	movs	r3, #1
 800c568:	6013      	str	r3, [r2, #0]
 800c56a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 8568 	beq.w	800d042 <_dtoa_r+0xbb2>
 800c572:	4b86      	ldr	r3, [pc, #536]	; (800c78c <_dtoa_r+0x2fc>)
 800c574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	3b01      	subs	r3, #1
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	e7da      	b.n	800c534 <_dtoa_r+0xa4>
 800c57e:	aa10      	add	r2, sp, #64	; 0x40
 800c580:	a911      	add	r1, sp, #68	; 0x44
 800c582:	4620      	mov	r0, r4
 800c584:	eeb0 0a48 	vmov.f32	s0, s16
 800c588:	eef0 0a68 	vmov.f32	s1, s17
 800c58c:	f001 f994 	bl	800d8b8 <__d2b>
 800c590:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c594:	4682      	mov	sl, r0
 800c596:	2d00      	cmp	r5, #0
 800c598:	d07f      	beq.n	800c69a <_dtoa_r+0x20a>
 800c59a:	ee18 3a90 	vmov	r3, s17
 800c59e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c5a6:	ec51 0b18 	vmov	r0, r1, d8
 800c5aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c5ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c5b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	4b75      	ldr	r3, [pc, #468]	; (800c790 <_dtoa_r+0x300>)
 800c5bc:	f7f3 fe8c 	bl	80002d8 <__aeabi_dsub>
 800c5c0:	a367      	add	r3, pc, #412	; (adr r3, 800c760 <_dtoa_r+0x2d0>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f4 f83f 	bl	8000648 <__aeabi_dmul>
 800c5ca:	a367      	add	r3, pc, #412	; (adr r3, 800c768 <_dtoa_r+0x2d8>)
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	f7f3 fe84 	bl	80002dc <__adddf3>
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	460f      	mov	r7, r1
 800c5da:	f7f3 ffcb 	bl	8000574 <__aeabi_i2d>
 800c5de:	a364      	add	r3, pc, #400	; (adr r3, 800c770 <_dtoa_r+0x2e0>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	f7f4 f830 	bl	8000648 <__aeabi_dmul>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	f7f3 fe74 	bl	80002dc <__adddf3>
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	460f      	mov	r7, r1
 800c5f8:	f7f4 fad6 	bl	8000ba8 <__aeabi_d2iz>
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	4683      	mov	fp, r0
 800c600:	2300      	movs	r3, #0
 800c602:	4630      	mov	r0, r6
 800c604:	4639      	mov	r1, r7
 800c606:	f7f4 fa91 	bl	8000b2c <__aeabi_dcmplt>
 800c60a:	b148      	cbz	r0, 800c620 <_dtoa_r+0x190>
 800c60c:	4658      	mov	r0, fp
 800c60e:	f7f3 ffb1 	bl	8000574 <__aeabi_i2d>
 800c612:	4632      	mov	r2, r6
 800c614:	463b      	mov	r3, r7
 800c616:	f7f4 fa7f 	bl	8000b18 <__aeabi_dcmpeq>
 800c61a:	b908      	cbnz	r0, 800c620 <_dtoa_r+0x190>
 800c61c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c620:	f1bb 0f16 	cmp.w	fp, #22
 800c624:	d857      	bhi.n	800c6d6 <_dtoa_r+0x246>
 800c626:	4b5b      	ldr	r3, [pc, #364]	; (800c794 <_dtoa_r+0x304>)
 800c628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	ec51 0b18 	vmov	r0, r1, d8
 800c634:	f7f4 fa7a 	bl	8000b2c <__aeabi_dcmplt>
 800c638:	2800      	cmp	r0, #0
 800c63a:	d04e      	beq.n	800c6da <_dtoa_r+0x24a>
 800c63c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c640:	2300      	movs	r3, #0
 800c642:	930c      	str	r3, [sp, #48]	; 0x30
 800c644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c646:	1b5b      	subs	r3, r3, r5
 800c648:	1e5a      	subs	r2, r3, #1
 800c64a:	bf45      	ittet	mi
 800c64c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c650:	9305      	strmi	r3, [sp, #20]
 800c652:	2300      	movpl	r3, #0
 800c654:	2300      	movmi	r3, #0
 800c656:	9206      	str	r2, [sp, #24]
 800c658:	bf54      	ite	pl
 800c65a:	9305      	strpl	r3, [sp, #20]
 800c65c:	9306      	strmi	r3, [sp, #24]
 800c65e:	f1bb 0f00 	cmp.w	fp, #0
 800c662:	db3c      	blt.n	800c6de <_dtoa_r+0x24e>
 800c664:	9b06      	ldr	r3, [sp, #24]
 800c666:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c66a:	445b      	add	r3, fp
 800c66c:	9306      	str	r3, [sp, #24]
 800c66e:	2300      	movs	r3, #0
 800c670:	9308      	str	r3, [sp, #32]
 800c672:	9b07      	ldr	r3, [sp, #28]
 800c674:	2b09      	cmp	r3, #9
 800c676:	d868      	bhi.n	800c74a <_dtoa_r+0x2ba>
 800c678:	2b05      	cmp	r3, #5
 800c67a:	bfc4      	itt	gt
 800c67c:	3b04      	subgt	r3, #4
 800c67e:	9307      	strgt	r3, [sp, #28]
 800c680:	9b07      	ldr	r3, [sp, #28]
 800c682:	f1a3 0302 	sub.w	r3, r3, #2
 800c686:	bfcc      	ite	gt
 800c688:	2500      	movgt	r5, #0
 800c68a:	2501      	movle	r5, #1
 800c68c:	2b03      	cmp	r3, #3
 800c68e:	f200 8085 	bhi.w	800c79c <_dtoa_r+0x30c>
 800c692:	e8df f003 	tbb	[pc, r3]
 800c696:	3b2e      	.short	0x3b2e
 800c698:	5839      	.short	0x5839
 800c69a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c69e:	441d      	add	r5, r3
 800c6a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c6a4:	2b20      	cmp	r3, #32
 800c6a6:	bfc1      	itttt	gt
 800c6a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c6ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800c6b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c6b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c6b8:	bfd6      	itet	le
 800c6ba:	f1c3 0320 	rsble	r3, r3, #32
 800c6be:	ea48 0003 	orrgt.w	r0, r8, r3
 800c6c2:	fa06 f003 	lslle.w	r0, r6, r3
 800c6c6:	f7f3 ff45 	bl	8000554 <__aeabi_ui2d>
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c6d0:	3d01      	subs	r5, #1
 800c6d2:	920e      	str	r2, [sp, #56]	; 0x38
 800c6d4:	e76f      	b.n	800c5b6 <_dtoa_r+0x126>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e7b3      	b.n	800c642 <_dtoa_r+0x1b2>
 800c6da:	900c      	str	r0, [sp, #48]	; 0x30
 800c6dc:	e7b2      	b.n	800c644 <_dtoa_r+0x1b4>
 800c6de:	9b05      	ldr	r3, [sp, #20]
 800c6e0:	eba3 030b 	sub.w	r3, r3, fp
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	f1cb 0300 	rsb	r3, fp, #0
 800c6ea:	9308      	str	r3, [sp, #32]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6f0:	e7bf      	b.n	800c672 <_dtoa_r+0x1e2>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dc52      	bgt.n	800c7a2 <_dtoa_r+0x312>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	9301      	str	r3, [sp, #4]
 800c700:	9304      	str	r3, [sp, #16]
 800c702:	461a      	mov	r2, r3
 800c704:	920a      	str	r2, [sp, #40]	; 0x28
 800c706:	e00b      	b.n	800c720 <_dtoa_r+0x290>
 800c708:	2301      	movs	r3, #1
 800c70a:	e7f3      	b.n	800c6f4 <_dtoa_r+0x264>
 800c70c:	2300      	movs	r3, #0
 800c70e:	9309      	str	r3, [sp, #36]	; 0x24
 800c710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c712:	445b      	add	r3, fp
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	3301      	adds	r3, #1
 800c718:	2b01      	cmp	r3, #1
 800c71a:	9304      	str	r3, [sp, #16]
 800c71c:	bfb8      	it	lt
 800c71e:	2301      	movlt	r3, #1
 800c720:	69e0      	ldr	r0, [r4, #28]
 800c722:	2100      	movs	r1, #0
 800c724:	2204      	movs	r2, #4
 800c726:	f102 0614 	add.w	r6, r2, #20
 800c72a:	429e      	cmp	r6, r3
 800c72c:	d93d      	bls.n	800c7aa <_dtoa_r+0x31a>
 800c72e:	6041      	str	r1, [r0, #4]
 800c730:	4620      	mov	r0, r4
 800c732:	f000 fd9f 	bl	800d274 <_Balloc>
 800c736:	9000      	str	r0, [sp, #0]
 800c738:	2800      	cmp	r0, #0
 800c73a:	d139      	bne.n	800c7b0 <_dtoa_r+0x320>
 800c73c:	4b16      	ldr	r3, [pc, #88]	; (800c798 <_dtoa_r+0x308>)
 800c73e:	4602      	mov	r2, r0
 800c740:	f240 11af 	movw	r1, #431	; 0x1af
 800c744:	e6bd      	b.n	800c4c2 <_dtoa_r+0x32>
 800c746:	2301      	movs	r3, #1
 800c748:	e7e1      	b.n	800c70e <_dtoa_r+0x27e>
 800c74a:	2501      	movs	r5, #1
 800c74c:	2300      	movs	r3, #0
 800c74e:	9307      	str	r3, [sp, #28]
 800c750:	9509      	str	r5, [sp, #36]	; 0x24
 800c752:	f04f 33ff 	mov.w	r3, #4294967295
 800c756:	9301      	str	r3, [sp, #4]
 800c758:	9304      	str	r3, [sp, #16]
 800c75a:	2200      	movs	r2, #0
 800c75c:	2312      	movs	r3, #18
 800c75e:	e7d1      	b.n	800c704 <_dtoa_r+0x274>
 800c760:	636f4361 	.word	0x636f4361
 800c764:	3fd287a7 	.word	0x3fd287a7
 800c768:	8b60c8b3 	.word	0x8b60c8b3
 800c76c:	3fc68a28 	.word	0x3fc68a28
 800c770:	509f79fb 	.word	0x509f79fb
 800c774:	3fd34413 	.word	0x3fd34413
 800c778:	0800f619 	.word	0x0800f619
 800c77c:	0800f630 	.word	0x0800f630
 800c780:	7ff00000 	.word	0x7ff00000
 800c784:	0800f615 	.word	0x0800f615
 800c788:	0800f60c 	.word	0x0800f60c
 800c78c:	0800f5e9 	.word	0x0800f5e9
 800c790:	3ff80000 	.word	0x3ff80000
 800c794:	0800f720 	.word	0x0800f720
 800c798:	0800f688 	.word	0x0800f688
 800c79c:	2301      	movs	r3, #1
 800c79e:	9309      	str	r3, [sp, #36]	; 0x24
 800c7a0:	e7d7      	b.n	800c752 <_dtoa_r+0x2c2>
 800c7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7a4:	9301      	str	r3, [sp, #4]
 800c7a6:	9304      	str	r3, [sp, #16]
 800c7a8:	e7ba      	b.n	800c720 <_dtoa_r+0x290>
 800c7aa:	3101      	adds	r1, #1
 800c7ac:	0052      	lsls	r2, r2, #1
 800c7ae:	e7ba      	b.n	800c726 <_dtoa_r+0x296>
 800c7b0:	69e3      	ldr	r3, [r4, #28]
 800c7b2:	9a00      	ldr	r2, [sp, #0]
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	2b0e      	cmp	r3, #14
 800c7ba:	f200 80a8 	bhi.w	800c90e <_dtoa_r+0x47e>
 800c7be:	2d00      	cmp	r5, #0
 800c7c0:	f000 80a5 	beq.w	800c90e <_dtoa_r+0x47e>
 800c7c4:	f1bb 0f00 	cmp.w	fp, #0
 800c7c8:	dd38      	ble.n	800c83c <_dtoa_r+0x3ac>
 800c7ca:	4bc0      	ldr	r3, [pc, #768]	; (800cacc <_dtoa_r+0x63c>)
 800c7cc:	f00b 020f 	and.w	r2, fp, #15
 800c7d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c7d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c7dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c7e0:	d019      	beq.n	800c816 <_dtoa_r+0x386>
 800c7e2:	4bbb      	ldr	r3, [pc, #748]	; (800cad0 <_dtoa_r+0x640>)
 800c7e4:	ec51 0b18 	vmov	r0, r1, d8
 800c7e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7ec:	f7f4 f856 	bl	800089c <__aeabi_ddiv>
 800c7f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7f4:	f008 080f 	and.w	r8, r8, #15
 800c7f8:	2503      	movs	r5, #3
 800c7fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cad0 <_dtoa_r+0x640>
 800c7fe:	f1b8 0f00 	cmp.w	r8, #0
 800c802:	d10a      	bne.n	800c81a <_dtoa_r+0x38a>
 800c804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c808:	4632      	mov	r2, r6
 800c80a:	463b      	mov	r3, r7
 800c80c:	f7f4 f846 	bl	800089c <__aeabi_ddiv>
 800c810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c814:	e02b      	b.n	800c86e <_dtoa_r+0x3de>
 800c816:	2502      	movs	r5, #2
 800c818:	e7ef      	b.n	800c7fa <_dtoa_r+0x36a>
 800c81a:	f018 0f01 	tst.w	r8, #1
 800c81e:	d008      	beq.n	800c832 <_dtoa_r+0x3a2>
 800c820:	4630      	mov	r0, r6
 800c822:	4639      	mov	r1, r7
 800c824:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c828:	f7f3 ff0e 	bl	8000648 <__aeabi_dmul>
 800c82c:	3501      	adds	r5, #1
 800c82e:	4606      	mov	r6, r0
 800c830:	460f      	mov	r7, r1
 800c832:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c836:	f109 0908 	add.w	r9, r9, #8
 800c83a:	e7e0      	b.n	800c7fe <_dtoa_r+0x36e>
 800c83c:	f000 809f 	beq.w	800c97e <_dtoa_r+0x4ee>
 800c840:	f1cb 0600 	rsb	r6, fp, #0
 800c844:	4ba1      	ldr	r3, [pc, #644]	; (800cacc <_dtoa_r+0x63c>)
 800c846:	4fa2      	ldr	r7, [pc, #648]	; (800cad0 <_dtoa_r+0x640>)
 800c848:	f006 020f 	and.w	r2, r6, #15
 800c84c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	ec51 0b18 	vmov	r0, r1, d8
 800c858:	f7f3 fef6 	bl	8000648 <__aeabi_dmul>
 800c85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c860:	1136      	asrs	r6, r6, #4
 800c862:	2300      	movs	r3, #0
 800c864:	2502      	movs	r5, #2
 800c866:	2e00      	cmp	r6, #0
 800c868:	d17e      	bne.n	800c968 <_dtoa_r+0x4d8>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1d0      	bne.n	800c810 <_dtoa_r+0x380>
 800c86e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c870:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 8084 	beq.w	800c982 <_dtoa_r+0x4f2>
 800c87a:	4b96      	ldr	r3, [pc, #600]	; (800cad4 <_dtoa_r+0x644>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	4640      	mov	r0, r8
 800c880:	4649      	mov	r1, r9
 800c882:	f7f4 f953 	bl	8000b2c <__aeabi_dcmplt>
 800c886:	2800      	cmp	r0, #0
 800c888:	d07b      	beq.n	800c982 <_dtoa_r+0x4f2>
 800c88a:	9b04      	ldr	r3, [sp, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d078      	beq.n	800c982 <_dtoa_r+0x4f2>
 800c890:	9b01      	ldr	r3, [sp, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	dd39      	ble.n	800c90a <_dtoa_r+0x47a>
 800c896:	4b90      	ldr	r3, [pc, #576]	; (800cad8 <_dtoa_r+0x648>)
 800c898:	2200      	movs	r2, #0
 800c89a:	4640      	mov	r0, r8
 800c89c:	4649      	mov	r1, r9
 800c89e:	f7f3 fed3 	bl	8000648 <__aeabi_dmul>
 800c8a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8a6:	9e01      	ldr	r6, [sp, #4]
 800c8a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c8ac:	3501      	adds	r5, #1
 800c8ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f7f3 fe5e 	bl	8000574 <__aeabi_i2d>
 800c8b8:	4642      	mov	r2, r8
 800c8ba:	464b      	mov	r3, r9
 800c8bc:	f7f3 fec4 	bl	8000648 <__aeabi_dmul>
 800c8c0:	4b86      	ldr	r3, [pc, #536]	; (800cadc <_dtoa_r+0x64c>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f7f3 fd0a 	bl	80002dc <__adddf3>
 800c8c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8d0:	9303      	str	r3, [sp, #12]
 800c8d2:	2e00      	cmp	r6, #0
 800c8d4:	d158      	bne.n	800c988 <_dtoa_r+0x4f8>
 800c8d6:	4b82      	ldr	r3, [pc, #520]	; (800cae0 <_dtoa_r+0x650>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	f7f3 fcfb 	bl	80002d8 <__aeabi_dsub>
 800c8e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	4689      	mov	r9, r1
 800c8ea:	f7f4 f93d 	bl	8000b68 <__aeabi_dcmpgt>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f040 8296 	bne.w	800ce20 <_dtoa_r+0x990>
 800c8f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8fe:	4649      	mov	r1, r9
 800c900:	f7f4 f914 	bl	8000b2c <__aeabi_dcmplt>
 800c904:	2800      	cmp	r0, #0
 800c906:	f040 8289 	bne.w	800ce1c <_dtoa_r+0x98c>
 800c90a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c90e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c910:	2b00      	cmp	r3, #0
 800c912:	f2c0 814e 	blt.w	800cbb2 <_dtoa_r+0x722>
 800c916:	f1bb 0f0e 	cmp.w	fp, #14
 800c91a:	f300 814a 	bgt.w	800cbb2 <_dtoa_r+0x722>
 800c91e:	4b6b      	ldr	r3, [pc, #428]	; (800cacc <_dtoa_r+0x63c>)
 800c920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c924:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f280 80dc 	bge.w	800cae8 <_dtoa_r+0x658>
 800c930:	9b04      	ldr	r3, [sp, #16]
 800c932:	2b00      	cmp	r3, #0
 800c934:	f300 80d8 	bgt.w	800cae8 <_dtoa_r+0x658>
 800c938:	f040 826f 	bne.w	800ce1a <_dtoa_r+0x98a>
 800c93c:	4b68      	ldr	r3, [pc, #416]	; (800cae0 <_dtoa_r+0x650>)
 800c93e:	2200      	movs	r2, #0
 800c940:	4640      	mov	r0, r8
 800c942:	4649      	mov	r1, r9
 800c944:	f7f3 fe80 	bl	8000648 <__aeabi_dmul>
 800c948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c94c:	f7f4 f902 	bl	8000b54 <__aeabi_dcmpge>
 800c950:	9e04      	ldr	r6, [sp, #16]
 800c952:	4637      	mov	r7, r6
 800c954:	2800      	cmp	r0, #0
 800c956:	f040 8245 	bne.w	800cde4 <_dtoa_r+0x954>
 800c95a:	9d00      	ldr	r5, [sp, #0]
 800c95c:	2331      	movs	r3, #49	; 0x31
 800c95e:	f805 3b01 	strb.w	r3, [r5], #1
 800c962:	f10b 0b01 	add.w	fp, fp, #1
 800c966:	e241      	b.n	800cdec <_dtoa_r+0x95c>
 800c968:	07f2      	lsls	r2, r6, #31
 800c96a:	d505      	bpl.n	800c978 <_dtoa_r+0x4e8>
 800c96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c970:	f7f3 fe6a 	bl	8000648 <__aeabi_dmul>
 800c974:	3501      	adds	r5, #1
 800c976:	2301      	movs	r3, #1
 800c978:	1076      	asrs	r6, r6, #1
 800c97a:	3708      	adds	r7, #8
 800c97c:	e773      	b.n	800c866 <_dtoa_r+0x3d6>
 800c97e:	2502      	movs	r5, #2
 800c980:	e775      	b.n	800c86e <_dtoa_r+0x3de>
 800c982:	9e04      	ldr	r6, [sp, #16]
 800c984:	465f      	mov	r7, fp
 800c986:	e792      	b.n	800c8ae <_dtoa_r+0x41e>
 800c988:	9900      	ldr	r1, [sp, #0]
 800c98a:	4b50      	ldr	r3, [pc, #320]	; (800cacc <_dtoa_r+0x63c>)
 800c98c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c990:	4431      	add	r1, r6
 800c992:	9102      	str	r1, [sp, #8]
 800c994:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c996:	eeb0 9a47 	vmov.f32	s18, s14
 800c99a:	eef0 9a67 	vmov.f32	s19, s15
 800c99e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c9a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9a6:	2900      	cmp	r1, #0
 800c9a8:	d044      	beq.n	800ca34 <_dtoa_r+0x5a4>
 800c9aa:	494e      	ldr	r1, [pc, #312]	; (800cae4 <_dtoa_r+0x654>)
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	f7f3 ff75 	bl	800089c <__aeabi_ddiv>
 800c9b2:	ec53 2b19 	vmov	r2, r3, d9
 800c9b6:	f7f3 fc8f 	bl	80002d8 <__aeabi_dsub>
 800c9ba:	9d00      	ldr	r5, [sp, #0]
 800c9bc:	ec41 0b19 	vmov	d9, r0, r1
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	4640      	mov	r0, r8
 800c9c4:	f7f4 f8f0 	bl	8000ba8 <__aeabi_d2iz>
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	f7f3 fdd3 	bl	8000574 <__aeabi_i2d>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	f7f3 fc7f 	bl	80002d8 <__aeabi_dsub>
 800c9da:	3630      	adds	r6, #48	; 0x30
 800c9dc:	f805 6b01 	strb.w	r6, [r5], #1
 800c9e0:	ec53 2b19 	vmov	r2, r3, d9
 800c9e4:	4680      	mov	r8, r0
 800c9e6:	4689      	mov	r9, r1
 800c9e8:	f7f4 f8a0 	bl	8000b2c <__aeabi_dcmplt>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d164      	bne.n	800caba <_dtoa_r+0x62a>
 800c9f0:	4642      	mov	r2, r8
 800c9f2:	464b      	mov	r3, r9
 800c9f4:	4937      	ldr	r1, [pc, #220]	; (800cad4 <_dtoa_r+0x644>)
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	f7f3 fc6e 	bl	80002d8 <__aeabi_dsub>
 800c9fc:	ec53 2b19 	vmov	r2, r3, d9
 800ca00:	f7f4 f894 	bl	8000b2c <__aeabi_dcmplt>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	f040 80b6 	bne.w	800cb76 <_dtoa_r+0x6e6>
 800ca0a:	9b02      	ldr	r3, [sp, #8]
 800ca0c:	429d      	cmp	r5, r3
 800ca0e:	f43f af7c 	beq.w	800c90a <_dtoa_r+0x47a>
 800ca12:	4b31      	ldr	r3, [pc, #196]	; (800cad8 <_dtoa_r+0x648>)
 800ca14:	ec51 0b19 	vmov	r0, r1, d9
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f7f3 fe15 	bl	8000648 <__aeabi_dmul>
 800ca1e:	4b2e      	ldr	r3, [pc, #184]	; (800cad8 <_dtoa_r+0x648>)
 800ca20:	ec41 0b19 	vmov	d9, r0, r1
 800ca24:	2200      	movs	r2, #0
 800ca26:	4640      	mov	r0, r8
 800ca28:	4649      	mov	r1, r9
 800ca2a:	f7f3 fe0d 	bl	8000648 <__aeabi_dmul>
 800ca2e:	4680      	mov	r8, r0
 800ca30:	4689      	mov	r9, r1
 800ca32:	e7c5      	b.n	800c9c0 <_dtoa_r+0x530>
 800ca34:	ec51 0b17 	vmov	r0, r1, d7
 800ca38:	f7f3 fe06 	bl	8000648 <__aeabi_dmul>
 800ca3c:	9b02      	ldr	r3, [sp, #8]
 800ca3e:	9d00      	ldr	r5, [sp, #0]
 800ca40:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca42:	ec41 0b19 	vmov	d9, r0, r1
 800ca46:	4649      	mov	r1, r9
 800ca48:	4640      	mov	r0, r8
 800ca4a:	f7f4 f8ad 	bl	8000ba8 <__aeabi_d2iz>
 800ca4e:	4606      	mov	r6, r0
 800ca50:	f7f3 fd90 	bl	8000574 <__aeabi_i2d>
 800ca54:	3630      	adds	r6, #48	; 0x30
 800ca56:	4602      	mov	r2, r0
 800ca58:	460b      	mov	r3, r1
 800ca5a:	4640      	mov	r0, r8
 800ca5c:	4649      	mov	r1, r9
 800ca5e:	f7f3 fc3b 	bl	80002d8 <__aeabi_dsub>
 800ca62:	f805 6b01 	strb.w	r6, [r5], #1
 800ca66:	9b02      	ldr	r3, [sp, #8]
 800ca68:	429d      	cmp	r5, r3
 800ca6a:	4680      	mov	r8, r0
 800ca6c:	4689      	mov	r9, r1
 800ca6e:	f04f 0200 	mov.w	r2, #0
 800ca72:	d124      	bne.n	800cabe <_dtoa_r+0x62e>
 800ca74:	4b1b      	ldr	r3, [pc, #108]	; (800cae4 <_dtoa_r+0x654>)
 800ca76:	ec51 0b19 	vmov	r0, r1, d9
 800ca7a:	f7f3 fc2f 	bl	80002dc <__adddf3>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	4640      	mov	r0, r8
 800ca84:	4649      	mov	r1, r9
 800ca86:	f7f4 f86f 	bl	8000b68 <__aeabi_dcmpgt>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d173      	bne.n	800cb76 <_dtoa_r+0x6e6>
 800ca8e:	ec53 2b19 	vmov	r2, r3, d9
 800ca92:	4914      	ldr	r1, [pc, #80]	; (800cae4 <_dtoa_r+0x654>)
 800ca94:	2000      	movs	r0, #0
 800ca96:	f7f3 fc1f 	bl	80002d8 <__aeabi_dsub>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4640      	mov	r0, r8
 800caa0:	4649      	mov	r1, r9
 800caa2:	f7f4 f843 	bl	8000b2c <__aeabi_dcmplt>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	f43f af2f 	beq.w	800c90a <_dtoa_r+0x47a>
 800caac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800caae:	1e6b      	subs	r3, r5, #1
 800cab0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cab6:	2b30      	cmp	r3, #48	; 0x30
 800cab8:	d0f8      	beq.n	800caac <_dtoa_r+0x61c>
 800caba:	46bb      	mov	fp, r7
 800cabc:	e04a      	b.n	800cb54 <_dtoa_r+0x6c4>
 800cabe:	4b06      	ldr	r3, [pc, #24]	; (800cad8 <_dtoa_r+0x648>)
 800cac0:	f7f3 fdc2 	bl	8000648 <__aeabi_dmul>
 800cac4:	4680      	mov	r8, r0
 800cac6:	4689      	mov	r9, r1
 800cac8:	e7bd      	b.n	800ca46 <_dtoa_r+0x5b6>
 800caca:	bf00      	nop
 800cacc:	0800f720 	.word	0x0800f720
 800cad0:	0800f6f8 	.word	0x0800f6f8
 800cad4:	3ff00000 	.word	0x3ff00000
 800cad8:	40240000 	.word	0x40240000
 800cadc:	401c0000 	.word	0x401c0000
 800cae0:	40140000 	.word	0x40140000
 800cae4:	3fe00000 	.word	0x3fe00000
 800cae8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800caec:	9d00      	ldr	r5, [sp, #0]
 800caee:	4642      	mov	r2, r8
 800caf0:	464b      	mov	r3, r9
 800caf2:	4630      	mov	r0, r6
 800caf4:	4639      	mov	r1, r7
 800caf6:	f7f3 fed1 	bl	800089c <__aeabi_ddiv>
 800cafa:	f7f4 f855 	bl	8000ba8 <__aeabi_d2iz>
 800cafe:	9001      	str	r0, [sp, #4]
 800cb00:	f7f3 fd38 	bl	8000574 <__aeabi_i2d>
 800cb04:	4642      	mov	r2, r8
 800cb06:	464b      	mov	r3, r9
 800cb08:	f7f3 fd9e 	bl	8000648 <__aeabi_dmul>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	460b      	mov	r3, r1
 800cb10:	4630      	mov	r0, r6
 800cb12:	4639      	mov	r1, r7
 800cb14:	f7f3 fbe0 	bl	80002d8 <__aeabi_dsub>
 800cb18:	9e01      	ldr	r6, [sp, #4]
 800cb1a:	9f04      	ldr	r7, [sp, #16]
 800cb1c:	3630      	adds	r6, #48	; 0x30
 800cb1e:	f805 6b01 	strb.w	r6, [r5], #1
 800cb22:	9e00      	ldr	r6, [sp, #0]
 800cb24:	1bae      	subs	r6, r5, r6
 800cb26:	42b7      	cmp	r7, r6
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	d134      	bne.n	800cb98 <_dtoa_r+0x708>
 800cb2e:	f7f3 fbd5 	bl	80002dc <__adddf3>
 800cb32:	4642      	mov	r2, r8
 800cb34:	464b      	mov	r3, r9
 800cb36:	4606      	mov	r6, r0
 800cb38:	460f      	mov	r7, r1
 800cb3a:	f7f4 f815 	bl	8000b68 <__aeabi_dcmpgt>
 800cb3e:	b9c8      	cbnz	r0, 800cb74 <_dtoa_r+0x6e4>
 800cb40:	4642      	mov	r2, r8
 800cb42:	464b      	mov	r3, r9
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f3 ffe6 	bl	8000b18 <__aeabi_dcmpeq>
 800cb4c:	b110      	cbz	r0, 800cb54 <_dtoa_r+0x6c4>
 800cb4e:	9b01      	ldr	r3, [sp, #4]
 800cb50:	07db      	lsls	r3, r3, #31
 800cb52:	d40f      	bmi.n	800cb74 <_dtoa_r+0x6e4>
 800cb54:	4651      	mov	r1, sl
 800cb56:	4620      	mov	r0, r4
 800cb58:	f000 fbcc 	bl	800d2f4 <_Bfree>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb60:	702b      	strb	r3, [r5, #0]
 800cb62:	f10b 0301 	add.w	r3, fp, #1
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f43f ace2 	beq.w	800c534 <_dtoa_r+0xa4>
 800cb70:	601d      	str	r5, [r3, #0]
 800cb72:	e4df      	b.n	800c534 <_dtoa_r+0xa4>
 800cb74:	465f      	mov	r7, fp
 800cb76:	462b      	mov	r3, r5
 800cb78:	461d      	mov	r5, r3
 800cb7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb7e:	2a39      	cmp	r2, #57	; 0x39
 800cb80:	d106      	bne.n	800cb90 <_dtoa_r+0x700>
 800cb82:	9a00      	ldr	r2, [sp, #0]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d1f7      	bne.n	800cb78 <_dtoa_r+0x6e8>
 800cb88:	9900      	ldr	r1, [sp, #0]
 800cb8a:	2230      	movs	r2, #48	; 0x30
 800cb8c:	3701      	adds	r7, #1
 800cb8e:	700a      	strb	r2, [r1, #0]
 800cb90:	781a      	ldrb	r2, [r3, #0]
 800cb92:	3201      	adds	r2, #1
 800cb94:	701a      	strb	r2, [r3, #0]
 800cb96:	e790      	b.n	800caba <_dtoa_r+0x62a>
 800cb98:	4ba3      	ldr	r3, [pc, #652]	; (800ce28 <_dtoa_r+0x998>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f7f3 fd54 	bl	8000648 <__aeabi_dmul>
 800cba0:	2200      	movs	r2, #0
 800cba2:	2300      	movs	r3, #0
 800cba4:	4606      	mov	r6, r0
 800cba6:	460f      	mov	r7, r1
 800cba8:	f7f3 ffb6 	bl	8000b18 <__aeabi_dcmpeq>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d09e      	beq.n	800caee <_dtoa_r+0x65e>
 800cbb0:	e7d0      	b.n	800cb54 <_dtoa_r+0x6c4>
 800cbb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbb4:	2a00      	cmp	r2, #0
 800cbb6:	f000 80ca 	beq.w	800cd4e <_dtoa_r+0x8be>
 800cbba:	9a07      	ldr	r2, [sp, #28]
 800cbbc:	2a01      	cmp	r2, #1
 800cbbe:	f300 80ad 	bgt.w	800cd1c <_dtoa_r+0x88c>
 800cbc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbc4:	2a00      	cmp	r2, #0
 800cbc6:	f000 80a5 	beq.w	800cd14 <_dtoa_r+0x884>
 800cbca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cbce:	9e08      	ldr	r6, [sp, #32]
 800cbd0:	9d05      	ldr	r5, [sp, #20]
 800cbd2:	9a05      	ldr	r2, [sp, #20]
 800cbd4:	441a      	add	r2, r3
 800cbd6:	9205      	str	r2, [sp, #20]
 800cbd8:	9a06      	ldr	r2, [sp, #24]
 800cbda:	2101      	movs	r1, #1
 800cbdc:	441a      	add	r2, r3
 800cbde:	4620      	mov	r0, r4
 800cbe0:	9206      	str	r2, [sp, #24]
 800cbe2:	f000 fc3d 	bl	800d460 <__i2b>
 800cbe6:	4607      	mov	r7, r0
 800cbe8:	b165      	cbz	r5, 800cc04 <_dtoa_r+0x774>
 800cbea:	9b06      	ldr	r3, [sp, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	dd09      	ble.n	800cc04 <_dtoa_r+0x774>
 800cbf0:	42ab      	cmp	r3, r5
 800cbf2:	9a05      	ldr	r2, [sp, #20]
 800cbf4:	bfa8      	it	ge
 800cbf6:	462b      	movge	r3, r5
 800cbf8:	1ad2      	subs	r2, r2, r3
 800cbfa:	9205      	str	r2, [sp, #20]
 800cbfc:	9a06      	ldr	r2, [sp, #24]
 800cbfe:	1aed      	subs	r5, r5, r3
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	9306      	str	r3, [sp, #24]
 800cc04:	9b08      	ldr	r3, [sp, #32]
 800cc06:	b1f3      	cbz	r3, 800cc46 <_dtoa_r+0x7b6>
 800cc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 80a3 	beq.w	800cd56 <_dtoa_r+0x8c6>
 800cc10:	2e00      	cmp	r6, #0
 800cc12:	dd10      	ble.n	800cc36 <_dtoa_r+0x7a6>
 800cc14:	4639      	mov	r1, r7
 800cc16:	4632      	mov	r2, r6
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 fce1 	bl	800d5e0 <__pow5mult>
 800cc1e:	4652      	mov	r2, sl
 800cc20:	4601      	mov	r1, r0
 800cc22:	4607      	mov	r7, r0
 800cc24:	4620      	mov	r0, r4
 800cc26:	f000 fc31 	bl	800d48c <__multiply>
 800cc2a:	4651      	mov	r1, sl
 800cc2c:	4680      	mov	r8, r0
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f000 fb60 	bl	800d2f4 <_Bfree>
 800cc34:	46c2      	mov	sl, r8
 800cc36:	9b08      	ldr	r3, [sp, #32]
 800cc38:	1b9a      	subs	r2, r3, r6
 800cc3a:	d004      	beq.n	800cc46 <_dtoa_r+0x7b6>
 800cc3c:	4651      	mov	r1, sl
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 fcce 	bl	800d5e0 <__pow5mult>
 800cc44:	4682      	mov	sl, r0
 800cc46:	2101      	movs	r1, #1
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f000 fc09 	bl	800d460 <__i2b>
 800cc4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	4606      	mov	r6, r0
 800cc54:	f340 8081 	ble.w	800cd5a <_dtoa_r+0x8ca>
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f000 fcbf 	bl	800d5e0 <__pow5mult>
 800cc62:	9b07      	ldr	r3, [sp, #28]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	4606      	mov	r6, r0
 800cc68:	dd7a      	ble.n	800cd60 <_dtoa_r+0x8d0>
 800cc6a:	f04f 0800 	mov.w	r8, #0
 800cc6e:	6933      	ldr	r3, [r6, #16]
 800cc70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc74:	6918      	ldr	r0, [r3, #16]
 800cc76:	f000 fba5 	bl	800d3c4 <__hi0bits>
 800cc7a:	f1c0 0020 	rsb	r0, r0, #32
 800cc7e:	9b06      	ldr	r3, [sp, #24]
 800cc80:	4418      	add	r0, r3
 800cc82:	f010 001f 	ands.w	r0, r0, #31
 800cc86:	f000 8094 	beq.w	800cdb2 <_dtoa_r+0x922>
 800cc8a:	f1c0 0320 	rsb	r3, r0, #32
 800cc8e:	2b04      	cmp	r3, #4
 800cc90:	f340 8085 	ble.w	800cd9e <_dtoa_r+0x90e>
 800cc94:	9b05      	ldr	r3, [sp, #20]
 800cc96:	f1c0 001c 	rsb	r0, r0, #28
 800cc9a:	4403      	add	r3, r0
 800cc9c:	9305      	str	r3, [sp, #20]
 800cc9e:	9b06      	ldr	r3, [sp, #24]
 800cca0:	4403      	add	r3, r0
 800cca2:	4405      	add	r5, r0
 800cca4:	9306      	str	r3, [sp, #24]
 800cca6:	9b05      	ldr	r3, [sp, #20]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	dd05      	ble.n	800ccb8 <_dtoa_r+0x828>
 800ccac:	4651      	mov	r1, sl
 800ccae:	461a      	mov	r2, r3
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f000 fcef 	bl	800d694 <__lshift>
 800ccb6:	4682      	mov	sl, r0
 800ccb8:	9b06      	ldr	r3, [sp, #24]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	dd05      	ble.n	800ccca <_dtoa_r+0x83a>
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f000 fce6 	bl	800d694 <__lshift>
 800ccc8:	4606      	mov	r6, r0
 800ccca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d072      	beq.n	800cdb6 <_dtoa_r+0x926>
 800ccd0:	4631      	mov	r1, r6
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	f000 fd4a 	bl	800d76c <__mcmp>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	da6c      	bge.n	800cdb6 <_dtoa_r+0x926>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	4651      	mov	r1, sl
 800cce0:	220a      	movs	r2, #10
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 fb28 	bl	800d338 <__multadd>
 800cce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccee:	4682      	mov	sl, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f000 81b0 	beq.w	800d056 <_dtoa_r+0xbc6>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	220a      	movs	r2, #10
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f000 fb1b 	bl	800d338 <__multadd>
 800cd02:	9b01      	ldr	r3, [sp, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	4607      	mov	r7, r0
 800cd08:	f300 8096 	bgt.w	800ce38 <_dtoa_r+0x9a8>
 800cd0c:	9b07      	ldr	r3, [sp, #28]
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	dc59      	bgt.n	800cdc6 <_dtoa_r+0x936>
 800cd12:	e091      	b.n	800ce38 <_dtoa_r+0x9a8>
 800cd14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cd1a:	e758      	b.n	800cbce <_dtoa_r+0x73e>
 800cd1c:	9b04      	ldr	r3, [sp, #16]
 800cd1e:	1e5e      	subs	r6, r3, #1
 800cd20:	9b08      	ldr	r3, [sp, #32]
 800cd22:	42b3      	cmp	r3, r6
 800cd24:	bfbf      	itttt	lt
 800cd26:	9b08      	ldrlt	r3, [sp, #32]
 800cd28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cd2a:	9608      	strlt	r6, [sp, #32]
 800cd2c:	1af3      	sublt	r3, r6, r3
 800cd2e:	bfb4      	ite	lt
 800cd30:	18d2      	addlt	r2, r2, r3
 800cd32:	1b9e      	subge	r6, r3, r6
 800cd34:	9b04      	ldr	r3, [sp, #16]
 800cd36:	bfbc      	itt	lt
 800cd38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cd3a:	2600      	movlt	r6, #0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	bfb7      	itett	lt
 800cd40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cd44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cd48:	1a9d      	sublt	r5, r3, r2
 800cd4a:	2300      	movlt	r3, #0
 800cd4c:	e741      	b.n	800cbd2 <_dtoa_r+0x742>
 800cd4e:	9e08      	ldr	r6, [sp, #32]
 800cd50:	9d05      	ldr	r5, [sp, #20]
 800cd52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cd54:	e748      	b.n	800cbe8 <_dtoa_r+0x758>
 800cd56:	9a08      	ldr	r2, [sp, #32]
 800cd58:	e770      	b.n	800cc3c <_dtoa_r+0x7ac>
 800cd5a:	9b07      	ldr	r3, [sp, #28]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	dc19      	bgt.n	800cd94 <_dtoa_r+0x904>
 800cd60:	9b02      	ldr	r3, [sp, #8]
 800cd62:	b9bb      	cbnz	r3, 800cd94 <_dtoa_r+0x904>
 800cd64:	9b03      	ldr	r3, [sp, #12]
 800cd66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd6a:	b99b      	cbnz	r3, 800cd94 <_dtoa_r+0x904>
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd72:	0d1b      	lsrs	r3, r3, #20
 800cd74:	051b      	lsls	r3, r3, #20
 800cd76:	b183      	cbz	r3, 800cd9a <_dtoa_r+0x90a>
 800cd78:	9b05      	ldr	r3, [sp, #20]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	9305      	str	r3, [sp, #20]
 800cd7e:	9b06      	ldr	r3, [sp, #24]
 800cd80:	3301      	adds	r3, #1
 800cd82:	9306      	str	r3, [sp, #24]
 800cd84:	f04f 0801 	mov.w	r8, #1
 800cd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f47f af6f 	bne.w	800cc6e <_dtoa_r+0x7de>
 800cd90:	2001      	movs	r0, #1
 800cd92:	e774      	b.n	800cc7e <_dtoa_r+0x7ee>
 800cd94:	f04f 0800 	mov.w	r8, #0
 800cd98:	e7f6      	b.n	800cd88 <_dtoa_r+0x8f8>
 800cd9a:	4698      	mov	r8, r3
 800cd9c:	e7f4      	b.n	800cd88 <_dtoa_r+0x8f8>
 800cd9e:	d082      	beq.n	800cca6 <_dtoa_r+0x816>
 800cda0:	9a05      	ldr	r2, [sp, #20]
 800cda2:	331c      	adds	r3, #28
 800cda4:	441a      	add	r2, r3
 800cda6:	9205      	str	r2, [sp, #20]
 800cda8:	9a06      	ldr	r2, [sp, #24]
 800cdaa:	441a      	add	r2, r3
 800cdac:	441d      	add	r5, r3
 800cdae:	9206      	str	r2, [sp, #24]
 800cdb0:	e779      	b.n	800cca6 <_dtoa_r+0x816>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	e7f4      	b.n	800cda0 <_dtoa_r+0x910>
 800cdb6:	9b04      	ldr	r3, [sp, #16]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	dc37      	bgt.n	800ce2c <_dtoa_r+0x99c>
 800cdbc:	9b07      	ldr	r3, [sp, #28]
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	dd34      	ble.n	800ce2c <_dtoa_r+0x99c>
 800cdc2:	9b04      	ldr	r3, [sp, #16]
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	9b01      	ldr	r3, [sp, #4]
 800cdc8:	b963      	cbnz	r3, 800cde4 <_dtoa_r+0x954>
 800cdca:	4631      	mov	r1, r6
 800cdcc:	2205      	movs	r2, #5
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f000 fab2 	bl	800d338 <__multadd>
 800cdd4:	4601      	mov	r1, r0
 800cdd6:	4606      	mov	r6, r0
 800cdd8:	4650      	mov	r0, sl
 800cdda:	f000 fcc7 	bl	800d76c <__mcmp>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	f73f adbb 	bgt.w	800c95a <_dtoa_r+0x4ca>
 800cde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cde6:	9d00      	ldr	r5, [sp, #0]
 800cde8:	ea6f 0b03 	mvn.w	fp, r3
 800cdec:	f04f 0800 	mov.w	r8, #0
 800cdf0:	4631      	mov	r1, r6
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f000 fa7e 	bl	800d2f4 <_Bfree>
 800cdf8:	2f00      	cmp	r7, #0
 800cdfa:	f43f aeab 	beq.w	800cb54 <_dtoa_r+0x6c4>
 800cdfe:	f1b8 0f00 	cmp.w	r8, #0
 800ce02:	d005      	beq.n	800ce10 <_dtoa_r+0x980>
 800ce04:	45b8      	cmp	r8, r7
 800ce06:	d003      	beq.n	800ce10 <_dtoa_r+0x980>
 800ce08:	4641      	mov	r1, r8
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f000 fa72 	bl	800d2f4 <_Bfree>
 800ce10:	4639      	mov	r1, r7
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 fa6e 	bl	800d2f4 <_Bfree>
 800ce18:	e69c      	b.n	800cb54 <_dtoa_r+0x6c4>
 800ce1a:	2600      	movs	r6, #0
 800ce1c:	4637      	mov	r7, r6
 800ce1e:	e7e1      	b.n	800cde4 <_dtoa_r+0x954>
 800ce20:	46bb      	mov	fp, r7
 800ce22:	4637      	mov	r7, r6
 800ce24:	e599      	b.n	800c95a <_dtoa_r+0x4ca>
 800ce26:	bf00      	nop
 800ce28:	40240000 	.word	0x40240000
 800ce2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f000 80c8 	beq.w	800cfc4 <_dtoa_r+0xb34>
 800ce34:	9b04      	ldr	r3, [sp, #16]
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	2d00      	cmp	r5, #0
 800ce3a:	dd05      	ble.n	800ce48 <_dtoa_r+0x9b8>
 800ce3c:	4639      	mov	r1, r7
 800ce3e:	462a      	mov	r2, r5
 800ce40:	4620      	mov	r0, r4
 800ce42:	f000 fc27 	bl	800d694 <__lshift>
 800ce46:	4607      	mov	r7, r0
 800ce48:	f1b8 0f00 	cmp.w	r8, #0
 800ce4c:	d05b      	beq.n	800cf06 <_dtoa_r+0xa76>
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	4620      	mov	r0, r4
 800ce52:	f000 fa0f 	bl	800d274 <_Balloc>
 800ce56:	4605      	mov	r5, r0
 800ce58:	b928      	cbnz	r0, 800ce66 <_dtoa_r+0x9d6>
 800ce5a:	4b83      	ldr	r3, [pc, #524]	; (800d068 <_dtoa_r+0xbd8>)
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ce62:	f7ff bb2e 	b.w	800c4c2 <_dtoa_r+0x32>
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	3202      	adds	r2, #2
 800ce6a:	0092      	lsls	r2, r2, #2
 800ce6c:	f107 010c 	add.w	r1, r7, #12
 800ce70:	300c      	adds	r0, #12
 800ce72:	f7ff fa76 	bl	800c362 <memcpy>
 800ce76:	2201      	movs	r2, #1
 800ce78:	4629      	mov	r1, r5
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 fc0a 	bl	800d694 <__lshift>
 800ce80:	9b00      	ldr	r3, [sp, #0]
 800ce82:	3301      	adds	r3, #1
 800ce84:	9304      	str	r3, [sp, #16]
 800ce86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	9308      	str	r3, [sp, #32]
 800ce8e:	9b02      	ldr	r3, [sp, #8]
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	46b8      	mov	r8, r7
 800ce96:	9306      	str	r3, [sp, #24]
 800ce98:	4607      	mov	r7, r0
 800ce9a:	9b04      	ldr	r3, [sp, #16]
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	4650      	mov	r0, sl
 800cea2:	9301      	str	r3, [sp, #4]
 800cea4:	f7ff fa6b 	bl	800c37e <quorem>
 800cea8:	4641      	mov	r1, r8
 800ceaa:	9002      	str	r0, [sp, #8]
 800ceac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ceb0:	4650      	mov	r0, sl
 800ceb2:	f000 fc5b 	bl	800d76c <__mcmp>
 800ceb6:	463a      	mov	r2, r7
 800ceb8:	9005      	str	r0, [sp, #20]
 800ceba:	4631      	mov	r1, r6
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 fc71 	bl	800d7a4 <__mdiff>
 800cec2:	68c2      	ldr	r2, [r0, #12]
 800cec4:	4605      	mov	r5, r0
 800cec6:	bb02      	cbnz	r2, 800cf0a <_dtoa_r+0xa7a>
 800cec8:	4601      	mov	r1, r0
 800ceca:	4650      	mov	r0, sl
 800cecc:	f000 fc4e 	bl	800d76c <__mcmp>
 800ced0:	4602      	mov	r2, r0
 800ced2:	4629      	mov	r1, r5
 800ced4:	4620      	mov	r0, r4
 800ced6:	9209      	str	r2, [sp, #36]	; 0x24
 800ced8:	f000 fa0c 	bl	800d2f4 <_Bfree>
 800cedc:	9b07      	ldr	r3, [sp, #28]
 800cede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cee0:	9d04      	ldr	r5, [sp, #16]
 800cee2:	ea43 0102 	orr.w	r1, r3, r2
 800cee6:	9b06      	ldr	r3, [sp, #24]
 800cee8:	4319      	orrs	r1, r3
 800ceea:	d110      	bne.n	800cf0e <_dtoa_r+0xa7e>
 800ceec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cef0:	d029      	beq.n	800cf46 <_dtoa_r+0xab6>
 800cef2:	9b05      	ldr	r3, [sp, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	dd02      	ble.n	800cefe <_dtoa_r+0xa6e>
 800cef8:	9b02      	ldr	r3, [sp, #8]
 800cefa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cefe:	9b01      	ldr	r3, [sp, #4]
 800cf00:	f883 9000 	strb.w	r9, [r3]
 800cf04:	e774      	b.n	800cdf0 <_dtoa_r+0x960>
 800cf06:	4638      	mov	r0, r7
 800cf08:	e7ba      	b.n	800ce80 <_dtoa_r+0x9f0>
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	e7e1      	b.n	800ced2 <_dtoa_r+0xa42>
 800cf0e:	9b05      	ldr	r3, [sp, #20]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	db04      	blt.n	800cf1e <_dtoa_r+0xa8e>
 800cf14:	9907      	ldr	r1, [sp, #28]
 800cf16:	430b      	orrs	r3, r1
 800cf18:	9906      	ldr	r1, [sp, #24]
 800cf1a:	430b      	orrs	r3, r1
 800cf1c:	d120      	bne.n	800cf60 <_dtoa_r+0xad0>
 800cf1e:	2a00      	cmp	r2, #0
 800cf20:	dded      	ble.n	800cefe <_dtoa_r+0xa6e>
 800cf22:	4651      	mov	r1, sl
 800cf24:	2201      	movs	r2, #1
 800cf26:	4620      	mov	r0, r4
 800cf28:	f000 fbb4 	bl	800d694 <__lshift>
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	4682      	mov	sl, r0
 800cf30:	f000 fc1c 	bl	800d76c <__mcmp>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	dc03      	bgt.n	800cf40 <_dtoa_r+0xab0>
 800cf38:	d1e1      	bne.n	800cefe <_dtoa_r+0xa6e>
 800cf3a:	f019 0f01 	tst.w	r9, #1
 800cf3e:	d0de      	beq.n	800cefe <_dtoa_r+0xa6e>
 800cf40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cf44:	d1d8      	bne.n	800cef8 <_dtoa_r+0xa68>
 800cf46:	9a01      	ldr	r2, [sp, #4]
 800cf48:	2339      	movs	r3, #57	; 0x39
 800cf4a:	7013      	strb	r3, [r2, #0]
 800cf4c:	462b      	mov	r3, r5
 800cf4e:	461d      	mov	r5, r3
 800cf50:	3b01      	subs	r3, #1
 800cf52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf56:	2a39      	cmp	r2, #57	; 0x39
 800cf58:	d06c      	beq.n	800d034 <_dtoa_r+0xba4>
 800cf5a:	3201      	adds	r2, #1
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	e747      	b.n	800cdf0 <_dtoa_r+0x960>
 800cf60:	2a00      	cmp	r2, #0
 800cf62:	dd07      	ble.n	800cf74 <_dtoa_r+0xae4>
 800cf64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cf68:	d0ed      	beq.n	800cf46 <_dtoa_r+0xab6>
 800cf6a:	9a01      	ldr	r2, [sp, #4]
 800cf6c:	f109 0301 	add.w	r3, r9, #1
 800cf70:	7013      	strb	r3, [r2, #0]
 800cf72:	e73d      	b.n	800cdf0 <_dtoa_r+0x960>
 800cf74:	9b04      	ldr	r3, [sp, #16]
 800cf76:	9a08      	ldr	r2, [sp, #32]
 800cf78:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d043      	beq.n	800d008 <_dtoa_r+0xb78>
 800cf80:	4651      	mov	r1, sl
 800cf82:	2300      	movs	r3, #0
 800cf84:	220a      	movs	r2, #10
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 f9d6 	bl	800d338 <__multadd>
 800cf8c:	45b8      	cmp	r8, r7
 800cf8e:	4682      	mov	sl, r0
 800cf90:	f04f 0300 	mov.w	r3, #0
 800cf94:	f04f 020a 	mov.w	r2, #10
 800cf98:	4641      	mov	r1, r8
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	d107      	bne.n	800cfae <_dtoa_r+0xb1e>
 800cf9e:	f000 f9cb 	bl	800d338 <__multadd>
 800cfa2:	4680      	mov	r8, r0
 800cfa4:	4607      	mov	r7, r0
 800cfa6:	9b04      	ldr	r3, [sp, #16]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	9304      	str	r3, [sp, #16]
 800cfac:	e775      	b.n	800ce9a <_dtoa_r+0xa0a>
 800cfae:	f000 f9c3 	bl	800d338 <__multadd>
 800cfb2:	4639      	mov	r1, r7
 800cfb4:	4680      	mov	r8, r0
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	220a      	movs	r2, #10
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 f9bc 	bl	800d338 <__multadd>
 800cfc0:	4607      	mov	r7, r0
 800cfc2:	e7f0      	b.n	800cfa6 <_dtoa_r+0xb16>
 800cfc4:	9b04      	ldr	r3, [sp, #16]
 800cfc6:	9301      	str	r3, [sp, #4]
 800cfc8:	9d00      	ldr	r5, [sp, #0]
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4650      	mov	r0, sl
 800cfce:	f7ff f9d6 	bl	800c37e <quorem>
 800cfd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cfd6:	9b00      	ldr	r3, [sp, #0]
 800cfd8:	f805 9b01 	strb.w	r9, [r5], #1
 800cfdc:	1aea      	subs	r2, r5, r3
 800cfde:	9b01      	ldr	r3, [sp, #4]
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	dd07      	ble.n	800cff4 <_dtoa_r+0xb64>
 800cfe4:	4651      	mov	r1, sl
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	220a      	movs	r2, #10
 800cfea:	4620      	mov	r0, r4
 800cfec:	f000 f9a4 	bl	800d338 <__multadd>
 800cff0:	4682      	mov	sl, r0
 800cff2:	e7ea      	b.n	800cfca <_dtoa_r+0xb3a>
 800cff4:	9b01      	ldr	r3, [sp, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	bfc8      	it	gt
 800cffa:	461d      	movgt	r5, r3
 800cffc:	9b00      	ldr	r3, [sp, #0]
 800cffe:	bfd8      	it	le
 800d000:	2501      	movle	r5, #1
 800d002:	441d      	add	r5, r3
 800d004:	f04f 0800 	mov.w	r8, #0
 800d008:	4651      	mov	r1, sl
 800d00a:	2201      	movs	r2, #1
 800d00c:	4620      	mov	r0, r4
 800d00e:	f000 fb41 	bl	800d694 <__lshift>
 800d012:	4631      	mov	r1, r6
 800d014:	4682      	mov	sl, r0
 800d016:	f000 fba9 	bl	800d76c <__mcmp>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	dc96      	bgt.n	800cf4c <_dtoa_r+0xabc>
 800d01e:	d102      	bne.n	800d026 <_dtoa_r+0xb96>
 800d020:	f019 0f01 	tst.w	r9, #1
 800d024:	d192      	bne.n	800cf4c <_dtoa_r+0xabc>
 800d026:	462b      	mov	r3, r5
 800d028:	461d      	mov	r5, r3
 800d02a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d02e:	2a30      	cmp	r2, #48	; 0x30
 800d030:	d0fa      	beq.n	800d028 <_dtoa_r+0xb98>
 800d032:	e6dd      	b.n	800cdf0 <_dtoa_r+0x960>
 800d034:	9a00      	ldr	r2, [sp, #0]
 800d036:	429a      	cmp	r2, r3
 800d038:	d189      	bne.n	800cf4e <_dtoa_r+0xabe>
 800d03a:	f10b 0b01 	add.w	fp, fp, #1
 800d03e:	2331      	movs	r3, #49	; 0x31
 800d040:	e796      	b.n	800cf70 <_dtoa_r+0xae0>
 800d042:	4b0a      	ldr	r3, [pc, #40]	; (800d06c <_dtoa_r+0xbdc>)
 800d044:	f7ff ba99 	b.w	800c57a <_dtoa_r+0xea>
 800d048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f47f aa6d 	bne.w	800c52a <_dtoa_r+0x9a>
 800d050:	4b07      	ldr	r3, [pc, #28]	; (800d070 <_dtoa_r+0xbe0>)
 800d052:	f7ff ba92 	b.w	800c57a <_dtoa_r+0xea>
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	dcb5      	bgt.n	800cfc8 <_dtoa_r+0xb38>
 800d05c:	9b07      	ldr	r3, [sp, #28]
 800d05e:	2b02      	cmp	r3, #2
 800d060:	f73f aeb1 	bgt.w	800cdc6 <_dtoa_r+0x936>
 800d064:	e7b0      	b.n	800cfc8 <_dtoa_r+0xb38>
 800d066:	bf00      	nop
 800d068:	0800f688 	.word	0x0800f688
 800d06c:	0800f5e8 	.word	0x0800f5e8
 800d070:	0800f60c 	.word	0x0800f60c

0800d074 <_free_r>:
 800d074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d076:	2900      	cmp	r1, #0
 800d078:	d044      	beq.n	800d104 <_free_r+0x90>
 800d07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d07e:	9001      	str	r0, [sp, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	f1a1 0404 	sub.w	r4, r1, #4
 800d086:	bfb8      	it	lt
 800d088:	18e4      	addlt	r4, r4, r3
 800d08a:	f000 f8e7 	bl	800d25c <__malloc_lock>
 800d08e:	4a1e      	ldr	r2, [pc, #120]	; (800d108 <_free_r+0x94>)
 800d090:	9801      	ldr	r0, [sp, #4]
 800d092:	6813      	ldr	r3, [r2, #0]
 800d094:	b933      	cbnz	r3, 800d0a4 <_free_r+0x30>
 800d096:	6063      	str	r3, [r4, #4]
 800d098:	6014      	str	r4, [r2, #0]
 800d09a:	b003      	add	sp, #12
 800d09c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0a0:	f000 b8e2 	b.w	800d268 <__malloc_unlock>
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	d908      	bls.n	800d0ba <_free_r+0x46>
 800d0a8:	6825      	ldr	r5, [r4, #0]
 800d0aa:	1961      	adds	r1, r4, r5
 800d0ac:	428b      	cmp	r3, r1
 800d0ae:	bf01      	itttt	eq
 800d0b0:	6819      	ldreq	r1, [r3, #0]
 800d0b2:	685b      	ldreq	r3, [r3, #4]
 800d0b4:	1949      	addeq	r1, r1, r5
 800d0b6:	6021      	streq	r1, [r4, #0]
 800d0b8:	e7ed      	b.n	800d096 <_free_r+0x22>
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	b10b      	cbz	r3, 800d0c4 <_free_r+0x50>
 800d0c0:	42a3      	cmp	r3, r4
 800d0c2:	d9fa      	bls.n	800d0ba <_free_r+0x46>
 800d0c4:	6811      	ldr	r1, [r2, #0]
 800d0c6:	1855      	adds	r5, r2, r1
 800d0c8:	42a5      	cmp	r5, r4
 800d0ca:	d10b      	bne.n	800d0e4 <_free_r+0x70>
 800d0cc:	6824      	ldr	r4, [r4, #0]
 800d0ce:	4421      	add	r1, r4
 800d0d0:	1854      	adds	r4, r2, r1
 800d0d2:	42a3      	cmp	r3, r4
 800d0d4:	6011      	str	r1, [r2, #0]
 800d0d6:	d1e0      	bne.n	800d09a <_free_r+0x26>
 800d0d8:	681c      	ldr	r4, [r3, #0]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	6053      	str	r3, [r2, #4]
 800d0de:	440c      	add	r4, r1
 800d0e0:	6014      	str	r4, [r2, #0]
 800d0e2:	e7da      	b.n	800d09a <_free_r+0x26>
 800d0e4:	d902      	bls.n	800d0ec <_free_r+0x78>
 800d0e6:	230c      	movs	r3, #12
 800d0e8:	6003      	str	r3, [r0, #0]
 800d0ea:	e7d6      	b.n	800d09a <_free_r+0x26>
 800d0ec:	6825      	ldr	r5, [r4, #0]
 800d0ee:	1961      	adds	r1, r4, r5
 800d0f0:	428b      	cmp	r3, r1
 800d0f2:	bf04      	itt	eq
 800d0f4:	6819      	ldreq	r1, [r3, #0]
 800d0f6:	685b      	ldreq	r3, [r3, #4]
 800d0f8:	6063      	str	r3, [r4, #4]
 800d0fa:	bf04      	itt	eq
 800d0fc:	1949      	addeq	r1, r1, r5
 800d0fe:	6021      	streq	r1, [r4, #0]
 800d100:	6054      	str	r4, [r2, #4]
 800d102:	e7ca      	b.n	800d09a <_free_r+0x26>
 800d104:	b003      	add	sp, #12
 800d106:	bd30      	pop	{r4, r5, pc}
 800d108:	20001dd0 	.word	0x20001dd0

0800d10c <malloc>:
 800d10c:	4b02      	ldr	r3, [pc, #8]	; (800d118 <malloc+0xc>)
 800d10e:	4601      	mov	r1, r0
 800d110:	6818      	ldr	r0, [r3, #0]
 800d112:	f000 b823 	b.w	800d15c <_malloc_r>
 800d116:	bf00      	nop
 800d118:	200005fc 	.word	0x200005fc

0800d11c <sbrk_aligned>:
 800d11c:	b570      	push	{r4, r5, r6, lr}
 800d11e:	4e0e      	ldr	r6, [pc, #56]	; (800d158 <sbrk_aligned+0x3c>)
 800d120:	460c      	mov	r4, r1
 800d122:	6831      	ldr	r1, [r6, #0]
 800d124:	4605      	mov	r5, r0
 800d126:	b911      	cbnz	r1, 800d12e <sbrk_aligned+0x12>
 800d128:	f000 fe40 	bl	800ddac <_sbrk_r>
 800d12c:	6030      	str	r0, [r6, #0]
 800d12e:	4621      	mov	r1, r4
 800d130:	4628      	mov	r0, r5
 800d132:	f000 fe3b 	bl	800ddac <_sbrk_r>
 800d136:	1c43      	adds	r3, r0, #1
 800d138:	d00a      	beq.n	800d150 <sbrk_aligned+0x34>
 800d13a:	1cc4      	adds	r4, r0, #3
 800d13c:	f024 0403 	bic.w	r4, r4, #3
 800d140:	42a0      	cmp	r0, r4
 800d142:	d007      	beq.n	800d154 <sbrk_aligned+0x38>
 800d144:	1a21      	subs	r1, r4, r0
 800d146:	4628      	mov	r0, r5
 800d148:	f000 fe30 	bl	800ddac <_sbrk_r>
 800d14c:	3001      	adds	r0, #1
 800d14e:	d101      	bne.n	800d154 <sbrk_aligned+0x38>
 800d150:	f04f 34ff 	mov.w	r4, #4294967295
 800d154:	4620      	mov	r0, r4
 800d156:	bd70      	pop	{r4, r5, r6, pc}
 800d158:	20001dd4 	.word	0x20001dd4

0800d15c <_malloc_r>:
 800d15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d160:	1ccd      	adds	r5, r1, #3
 800d162:	f025 0503 	bic.w	r5, r5, #3
 800d166:	3508      	adds	r5, #8
 800d168:	2d0c      	cmp	r5, #12
 800d16a:	bf38      	it	cc
 800d16c:	250c      	movcc	r5, #12
 800d16e:	2d00      	cmp	r5, #0
 800d170:	4607      	mov	r7, r0
 800d172:	db01      	blt.n	800d178 <_malloc_r+0x1c>
 800d174:	42a9      	cmp	r1, r5
 800d176:	d905      	bls.n	800d184 <_malloc_r+0x28>
 800d178:	230c      	movs	r3, #12
 800d17a:	603b      	str	r3, [r7, #0]
 800d17c:	2600      	movs	r6, #0
 800d17e:	4630      	mov	r0, r6
 800d180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d184:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d258 <_malloc_r+0xfc>
 800d188:	f000 f868 	bl	800d25c <__malloc_lock>
 800d18c:	f8d8 3000 	ldr.w	r3, [r8]
 800d190:	461c      	mov	r4, r3
 800d192:	bb5c      	cbnz	r4, 800d1ec <_malloc_r+0x90>
 800d194:	4629      	mov	r1, r5
 800d196:	4638      	mov	r0, r7
 800d198:	f7ff ffc0 	bl	800d11c <sbrk_aligned>
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	4604      	mov	r4, r0
 800d1a0:	d155      	bne.n	800d24e <_malloc_r+0xf2>
 800d1a2:	f8d8 4000 	ldr.w	r4, [r8]
 800d1a6:	4626      	mov	r6, r4
 800d1a8:	2e00      	cmp	r6, #0
 800d1aa:	d145      	bne.n	800d238 <_malloc_r+0xdc>
 800d1ac:	2c00      	cmp	r4, #0
 800d1ae:	d048      	beq.n	800d242 <_malloc_r+0xe6>
 800d1b0:	6823      	ldr	r3, [r4, #0]
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	eb04 0903 	add.w	r9, r4, r3
 800d1ba:	f000 fdf7 	bl	800ddac <_sbrk_r>
 800d1be:	4581      	cmp	r9, r0
 800d1c0:	d13f      	bne.n	800d242 <_malloc_r+0xe6>
 800d1c2:	6821      	ldr	r1, [r4, #0]
 800d1c4:	1a6d      	subs	r5, r5, r1
 800d1c6:	4629      	mov	r1, r5
 800d1c8:	4638      	mov	r0, r7
 800d1ca:	f7ff ffa7 	bl	800d11c <sbrk_aligned>
 800d1ce:	3001      	adds	r0, #1
 800d1d0:	d037      	beq.n	800d242 <_malloc_r+0xe6>
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	442b      	add	r3, r5
 800d1d6:	6023      	str	r3, [r4, #0]
 800d1d8:	f8d8 3000 	ldr.w	r3, [r8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d038      	beq.n	800d252 <_malloc_r+0xf6>
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	42a2      	cmp	r2, r4
 800d1e4:	d12b      	bne.n	800d23e <_malloc_r+0xe2>
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	605a      	str	r2, [r3, #4]
 800d1ea:	e00f      	b.n	800d20c <_malloc_r+0xb0>
 800d1ec:	6822      	ldr	r2, [r4, #0]
 800d1ee:	1b52      	subs	r2, r2, r5
 800d1f0:	d41f      	bmi.n	800d232 <_malloc_r+0xd6>
 800d1f2:	2a0b      	cmp	r2, #11
 800d1f4:	d917      	bls.n	800d226 <_malloc_r+0xca>
 800d1f6:	1961      	adds	r1, r4, r5
 800d1f8:	42a3      	cmp	r3, r4
 800d1fa:	6025      	str	r5, [r4, #0]
 800d1fc:	bf18      	it	ne
 800d1fe:	6059      	strne	r1, [r3, #4]
 800d200:	6863      	ldr	r3, [r4, #4]
 800d202:	bf08      	it	eq
 800d204:	f8c8 1000 	streq.w	r1, [r8]
 800d208:	5162      	str	r2, [r4, r5]
 800d20a:	604b      	str	r3, [r1, #4]
 800d20c:	4638      	mov	r0, r7
 800d20e:	f104 060b 	add.w	r6, r4, #11
 800d212:	f000 f829 	bl	800d268 <__malloc_unlock>
 800d216:	f026 0607 	bic.w	r6, r6, #7
 800d21a:	1d23      	adds	r3, r4, #4
 800d21c:	1af2      	subs	r2, r6, r3
 800d21e:	d0ae      	beq.n	800d17e <_malloc_r+0x22>
 800d220:	1b9b      	subs	r3, r3, r6
 800d222:	50a3      	str	r3, [r4, r2]
 800d224:	e7ab      	b.n	800d17e <_malloc_r+0x22>
 800d226:	42a3      	cmp	r3, r4
 800d228:	6862      	ldr	r2, [r4, #4]
 800d22a:	d1dd      	bne.n	800d1e8 <_malloc_r+0x8c>
 800d22c:	f8c8 2000 	str.w	r2, [r8]
 800d230:	e7ec      	b.n	800d20c <_malloc_r+0xb0>
 800d232:	4623      	mov	r3, r4
 800d234:	6864      	ldr	r4, [r4, #4]
 800d236:	e7ac      	b.n	800d192 <_malloc_r+0x36>
 800d238:	4634      	mov	r4, r6
 800d23a:	6876      	ldr	r6, [r6, #4]
 800d23c:	e7b4      	b.n	800d1a8 <_malloc_r+0x4c>
 800d23e:	4613      	mov	r3, r2
 800d240:	e7cc      	b.n	800d1dc <_malloc_r+0x80>
 800d242:	230c      	movs	r3, #12
 800d244:	603b      	str	r3, [r7, #0]
 800d246:	4638      	mov	r0, r7
 800d248:	f000 f80e 	bl	800d268 <__malloc_unlock>
 800d24c:	e797      	b.n	800d17e <_malloc_r+0x22>
 800d24e:	6025      	str	r5, [r4, #0]
 800d250:	e7dc      	b.n	800d20c <_malloc_r+0xb0>
 800d252:	605b      	str	r3, [r3, #4]
 800d254:	deff      	udf	#255	; 0xff
 800d256:	bf00      	nop
 800d258:	20001dd0 	.word	0x20001dd0

0800d25c <__malloc_lock>:
 800d25c:	4801      	ldr	r0, [pc, #4]	; (800d264 <__malloc_lock+0x8>)
 800d25e:	f7ff b87e 	b.w	800c35e <__retarget_lock_acquire_recursive>
 800d262:	bf00      	nop
 800d264:	20001dcc 	.word	0x20001dcc

0800d268 <__malloc_unlock>:
 800d268:	4801      	ldr	r0, [pc, #4]	; (800d270 <__malloc_unlock+0x8>)
 800d26a:	f7ff b879 	b.w	800c360 <__retarget_lock_release_recursive>
 800d26e:	bf00      	nop
 800d270:	20001dcc 	.word	0x20001dcc

0800d274 <_Balloc>:
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	69c6      	ldr	r6, [r0, #28]
 800d278:	4604      	mov	r4, r0
 800d27a:	460d      	mov	r5, r1
 800d27c:	b976      	cbnz	r6, 800d29c <_Balloc+0x28>
 800d27e:	2010      	movs	r0, #16
 800d280:	f7ff ff44 	bl	800d10c <malloc>
 800d284:	4602      	mov	r2, r0
 800d286:	61e0      	str	r0, [r4, #28]
 800d288:	b920      	cbnz	r0, 800d294 <_Balloc+0x20>
 800d28a:	4b18      	ldr	r3, [pc, #96]	; (800d2ec <_Balloc+0x78>)
 800d28c:	4818      	ldr	r0, [pc, #96]	; (800d2f0 <_Balloc+0x7c>)
 800d28e:	216b      	movs	r1, #107	; 0x6b
 800d290:	f000 fd9c 	bl	800ddcc <__assert_func>
 800d294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d298:	6006      	str	r6, [r0, #0]
 800d29a:	60c6      	str	r6, [r0, #12]
 800d29c:	69e6      	ldr	r6, [r4, #28]
 800d29e:	68f3      	ldr	r3, [r6, #12]
 800d2a0:	b183      	cbz	r3, 800d2c4 <_Balloc+0x50>
 800d2a2:	69e3      	ldr	r3, [r4, #28]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2aa:	b9b8      	cbnz	r0, 800d2dc <_Balloc+0x68>
 800d2ac:	2101      	movs	r1, #1
 800d2ae:	fa01 f605 	lsl.w	r6, r1, r5
 800d2b2:	1d72      	adds	r2, r6, #5
 800d2b4:	0092      	lsls	r2, r2, #2
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f000 fda6 	bl	800de08 <_calloc_r>
 800d2bc:	b160      	cbz	r0, 800d2d8 <_Balloc+0x64>
 800d2be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2c2:	e00e      	b.n	800d2e2 <_Balloc+0x6e>
 800d2c4:	2221      	movs	r2, #33	; 0x21
 800d2c6:	2104      	movs	r1, #4
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 fd9d 	bl	800de08 <_calloc_r>
 800d2ce:	69e3      	ldr	r3, [r4, #28]
 800d2d0:	60f0      	str	r0, [r6, #12]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1e4      	bne.n	800d2a2 <_Balloc+0x2e>
 800d2d8:	2000      	movs	r0, #0
 800d2da:	bd70      	pop	{r4, r5, r6, pc}
 800d2dc:	6802      	ldr	r2, [r0, #0]
 800d2de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2e8:	e7f7      	b.n	800d2da <_Balloc+0x66>
 800d2ea:	bf00      	nop
 800d2ec:	0800f619 	.word	0x0800f619
 800d2f0:	0800f699 	.word	0x0800f699

0800d2f4 <_Bfree>:
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	69c6      	ldr	r6, [r0, #28]
 800d2f8:	4605      	mov	r5, r0
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	b976      	cbnz	r6, 800d31c <_Bfree+0x28>
 800d2fe:	2010      	movs	r0, #16
 800d300:	f7ff ff04 	bl	800d10c <malloc>
 800d304:	4602      	mov	r2, r0
 800d306:	61e8      	str	r0, [r5, #28]
 800d308:	b920      	cbnz	r0, 800d314 <_Bfree+0x20>
 800d30a:	4b09      	ldr	r3, [pc, #36]	; (800d330 <_Bfree+0x3c>)
 800d30c:	4809      	ldr	r0, [pc, #36]	; (800d334 <_Bfree+0x40>)
 800d30e:	218f      	movs	r1, #143	; 0x8f
 800d310:	f000 fd5c 	bl	800ddcc <__assert_func>
 800d314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d318:	6006      	str	r6, [r0, #0]
 800d31a:	60c6      	str	r6, [r0, #12]
 800d31c:	b13c      	cbz	r4, 800d32e <_Bfree+0x3a>
 800d31e:	69eb      	ldr	r3, [r5, #28]
 800d320:	6862      	ldr	r2, [r4, #4]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d328:	6021      	str	r1, [r4, #0]
 800d32a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d32e:	bd70      	pop	{r4, r5, r6, pc}
 800d330:	0800f619 	.word	0x0800f619
 800d334:	0800f699 	.word	0x0800f699

0800d338 <__multadd>:
 800d338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d33c:	690d      	ldr	r5, [r1, #16]
 800d33e:	4607      	mov	r7, r0
 800d340:	460c      	mov	r4, r1
 800d342:	461e      	mov	r6, r3
 800d344:	f101 0c14 	add.w	ip, r1, #20
 800d348:	2000      	movs	r0, #0
 800d34a:	f8dc 3000 	ldr.w	r3, [ip]
 800d34e:	b299      	uxth	r1, r3
 800d350:	fb02 6101 	mla	r1, r2, r1, r6
 800d354:	0c1e      	lsrs	r6, r3, #16
 800d356:	0c0b      	lsrs	r3, r1, #16
 800d358:	fb02 3306 	mla	r3, r2, r6, r3
 800d35c:	b289      	uxth	r1, r1
 800d35e:	3001      	adds	r0, #1
 800d360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d364:	4285      	cmp	r5, r0
 800d366:	f84c 1b04 	str.w	r1, [ip], #4
 800d36a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d36e:	dcec      	bgt.n	800d34a <__multadd+0x12>
 800d370:	b30e      	cbz	r6, 800d3b6 <__multadd+0x7e>
 800d372:	68a3      	ldr	r3, [r4, #8]
 800d374:	42ab      	cmp	r3, r5
 800d376:	dc19      	bgt.n	800d3ac <__multadd+0x74>
 800d378:	6861      	ldr	r1, [r4, #4]
 800d37a:	4638      	mov	r0, r7
 800d37c:	3101      	adds	r1, #1
 800d37e:	f7ff ff79 	bl	800d274 <_Balloc>
 800d382:	4680      	mov	r8, r0
 800d384:	b928      	cbnz	r0, 800d392 <__multadd+0x5a>
 800d386:	4602      	mov	r2, r0
 800d388:	4b0c      	ldr	r3, [pc, #48]	; (800d3bc <__multadd+0x84>)
 800d38a:	480d      	ldr	r0, [pc, #52]	; (800d3c0 <__multadd+0x88>)
 800d38c:	21ba      	movs	r1, #186	; 0xba
 800d38e:	f000 fd1d 	bl	800ddcc <__assert_func>
 800d392:	6922      	ldr	r2, [r4, #16]
 800d394:	3202      	adds	r2, #2
 800d396:	f104 010c 	add.w	r1, r4, #12
 800d39a:	0092      	lsls	r2, r2, #2
 800d39c:	300c      	adds	r0, #12
 800d39e:	f7fe ffe0 	bl	800c362 <memcpy>
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	4638      	mov	r0, r7
 800d3a6:	f7ff ffa5 	bl	800d2f4 <_Bfree>
 800d3aa:	4644      	mov	r4, r8
 800d3ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3b0:	3501      	adds	r5, #1
 800d3b2:	615e      	str	r6, [r3, #20]
 800d3b4:	6125      	str	r5, [r4, #16]
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3bc:	0800f688 	.word	0x0800f688
 800d3c0:	0800f699 	.word	0x0800f699

0800d3c4 <__hi0bits>:
 800d3c4:	0c03      	lsrs	r3, r0, #16
 800d3c6:	041b      	lsls	r3, r3, #16
 800d3c8:	b9d3      	cbnz	r3, 800d400 <__hi0bits+0x3c>
 800d3ca:	0400      	lsls	r0, r0, #16
 800d3cc:	2310      	movs	r3, #16
 800d3ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d3d2:	bf04      	itt	eq
 800d3d4:	0200      	lsleq	r0, r0, #8
 800d3d6:	3308      	addeq	r3, #8
 800d3d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d3dc:	bf04      	itt	eq
 800d3de:	0100      	lsleq	r0, r0, #4
 800d3e0:	3304      	addeq	r3, #4
 800d3e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d3e6:	bf04      	itt	eq
 800d3e8:	0080      	lsleq	r0, r0, #2
 800d3ea:	3302      	addeq	r3, #2
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	db05      	blt.n	800d3fc <__hi0bits+0x38>
 800d3f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d3f4:	f103 0301 	add.w	r3, r3, #1
 800d3f8:	bf08      	it	eq
 800d3fa:	2320      	moveq	r3, #32
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	4770      	bx	lr
 800d400:	2300      	movs	r3, #0
 800d402:	e7e4      	b.n	800d3ce <__hi0bits+0xa>

0800d404 <__lo0bits>:
 800d404:	6803      	ldr	r3, [r0, #0]
 800d406:	f013 0207 	ands.w	r2, r3, #7
 800d40a:	d00c      	beq.n	800d426 <__lo0bits+0x22>
 800d40c:	07d9      	lsls	r1, r3, #31
 800d40e:	d422      	bmi.n	800d456 <__lo0bits+0x52>
 800d410:	079a      	lsls	r2, r3, #30
 800d412:	bf49      	itett	mi
 800d414:	085b      	lsrmi	r3, r3, #1
 800d416:	089b      	lsrpl	r3, r3, #2
 800d418:	6003      	strmi	r3, [r0, #0]
 800d41a:	2201      	movmi	r2, #1
 800d41c:	bf5c      	itt	pl
 800d41e:	6003      	strpl	r3, [r0, #0]
 800d420:	2202      	movpl	r2, #2
 800d422:	4610      	mov	r0, r2
 800d424:	4770      	bx	lr
 800d426:	b299      	uxth	r1, r3
 800d428:	b909      	cbnz	r1, 800d42e <__lo0bits+0x2a>
 800d42a:	0c1b      	lsrs	r3, r3, #16
 800d42c:	2210      	movs	r2, #16
 800d42e:	b2d9      	uxtb	r1, r3
 800d430:	b909      	cbnz	r1, 800d436 <__lo0bits+0x32>
 800d432:	3208      	adds	r2, #8
 800d434:	0a1b      	lsrs	r3, r3, #8
 800d436:	0719      	lsls	r1, r3, #28
 800d438:	bf04      	itt	eq
 800d43a:	091b      	lsreq	r3, r3, #4
 800d43c:	3204      	addeq	r2, #4
 800d43e:	0799      	lsls	r1, r3, #30
 800d440:	bf04      	itt	eq
 800d442:	089b      	lsreq	r3, r3, #2
 800d444:	3202      	addeq	r2, #2
 800d446:	07d9      	lsls	r1, r3, #31
 800d448:	d403      	bmi.n	800d452 <__lo0bits+0x4e>
 800d44a:	085b      	lsrs	r3, r3, #1
 800d44c:	f102 0201 	add.w	r2, r2, #1
 800d450:	d003      	beq.n	800d45a <__lo0bits+0x56>
 800d452:	6003      	str	r3, [r0, #0]
 800d454:	e7e5      	b.n	800d422 <__lo0bits+0x1e>
 800d456:	2200      	movs	r2, #0
 800d458:	e7e3      	b.n	800d422 <__lo0bits+0x1e>
 800d45a:	2220      	movs	r2, #32
 800d45c:	e7e1      	b.n	800d422 <__lo0bits+0x1e>
	...

0800d460 <__i2b>:
 800d460:	b510      	push	{r4, lr}
 800d462:	460c      	mov	r4, r1
 800d464:	2101      	movs	r1, #1
 800d466:	f7ff ff05 	bl	800d274 <_Balloc>
 800d46a:	4602      	mov	r2, r0
 800d46c:	b928      	cbnz	r0, 800d47a <__i2b+0x1a>
 800d46e:	4b05      	ldr	r3, [pc, #20]	; (800d484 <__i2b+0x24>)
 800d470:	4805      	ldr	r0, [pc, #20]	; (800d488 <__i2b+0x28>)
 800d472:	f240 1145 	movw	r1, #325	; 0x145
 800d476:	f000 fca9 	bl	800ddcc <__assert_func>
 800d47a:	2301      	movs	r3, #1
 800d47c:	6144      	str	r4, [r0, #20]
 800d47e:	6103      	str	r3, [r0, #16]
 800d480:	bd10      	pop	{r4, pc}
 800d482:	bf00      	nop
 800d484:	0800f688 	.word	0x0800f688
 800d488:	0800f699 	.word	0x0800f699

0800d48c <__multiply>:
 800d48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	4691      	mov	r9, r2
 800d492:	690a      	ldr	r2, [r1, #16]
 800d494:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d498:	429a      	cmp	r2, r3
 800d49a:	bfb8      	it	lt
 800d49c:	460b      	movlt	r3, r1
 800d49e:	460c      	mov	r4, r1
 800d4a0:	bfbc      	itt	lt
 800d4a2:	464c      	movlt	r4, r9
 800d4a4:	4699      	movlt	r9, r3
 800d4a6:	6927      	ldr	r7, [r4, #16]
 800d4a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d4ac:	68a3      	ldr	r3, [r4, #8]
 800d4ae:	6861      	ldr	r1, [r4, #4]
 800d4b0:	eb07 060a 	add.w	r6, r7, sl
 800d4b4:	42b3      	cmp	r3, r6
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	bfb8      	it	lt
 800d4ba:	3101      	addlt	r1, #1
 800d4bc:	f7ff feda 	bl	800d274 <_Balloc>
 800d4c0:	b930      	cbnz	r0, 800d4d0 <__multiply+0x44>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	4b44      	ldr	r3, [pc, #272]	; (800d5d8 <__multiply+0x14c>)
 800d4c6:	4845      	ldr	r0, [pc, #276]	; (800d5dc <__multiply+0x150>)
 800d4c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d4cc:	f000 fc7e 	bl	800ddcc <__assert_func>
 800d4d0:	f100 0514 	add.w	r5, r0, #20
 800d4d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d4d8:	462b      	mov	r3, r5
 800d4da:	2200      	movs	r2, #0
 800d4dc:	4543      	cmp	r3, r8
 800d4de:	d321      	bcc.n	800d524 <__multiply+0x98>
 800d4e0:	f104 0314 	add.w	r3, r4, #20
 800d4e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4e8:	f109 0314 	add.w	r3, r9, #20
 800d4ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d4f0:	9202      	str	r2, [sp, #8]
 800d4f2:	1b3a      	subs	r2, r7, r4
 800d4f4:	3a15      	subs	r2, #21
 800d4f6:	f022 0203 	bic.w	r2, r2, #3
 800d4fa:	3204      	adds	r2, #4
 800d4fc:	f104 0115 	add.w	r1, r4, #21
 800d500:	428f      	cmp	r7, r1
 800d502:	bf38      	it	cc
 800d504:	2204      	movcc	r2, #4
 800d506:	9201      	str	r2, [sp, #4]
 800d508:	9a02      	ldr	r2, [sp, #8]
 800d50a:	9303      	str	r3, [sp, #12]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d80c      	bhi.n	800d52a <__multiply+0x9e>
 800d510:	2e00      	cmp	r6, #0
 800d512:	dd03      	ble.n	800d51c <__multiply+0x90>
 800d514:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d05b      	beq.n	800d5d4 <__multiply+0x148>
 800d51c:	6106      	str	r6, [r0, #16]
 800d51e:	b005      	add	sp, #20
 800d520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d524:	f843 2b04 	str.w	r2, [r3], #4
 800d528:	e7d8      	b.n	800d4dc <__multiply+0x50>
 800d52a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d52e:	f1ba 0f00 	cmp.w	sl, #0
 800d532:	d024      	beq.n	800d57e <__multiply+0xf2>
 800d534:	f104 0e14 	add.w	lr, r4, #20
 800d538:	46a9      	mov	r9, r5
 800d53a:	f04f 0c00 	mov.w	ip, #0
 800d53e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d542:	f8d9 1000 	ldr.w	r1, [r9]
 800d546:	fa1f fb82 	uxth.w	fp, r2
 800d54a:	b289      	uxth	r1, r1
 800d54c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d550:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d554:	f8d9 2000 	ldr.w	r2, [r9]
 800d558:	4461      	add	r1, ip
 800d55a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d55e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d562:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d566:	b289      	uxth	r1, r1
 800d568:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d56c:	4577      	cmp	r7, lr
 800d56e:	f849 1b04 	str.w	r1, [r9], #4
 800d572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d576:	d8e2      	bhi.n	800d53e <__multiply+0xb2>
 800d578:	9a01      	ldr	r2, [sp, #4]
 800d57a:	f845 c002 	str.w	ip, [r5, r2]
 800d57e:	9a03      	ldr	r2, [sp, #12]
 800d580:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d584:	3304      	adds	r3, #4
 800d586:	f1b9 0f00 	cmp.w	r9, #0
 800d58a:	d021      	beq.n	800d5d0 <__multiply+0x144>
 800d58c:	6829      	ldr	r1, [r5, #0]
 800d58e:	f104 0c14 	add.w	ip, r4, #20
 800d592:	46ae      	mov	lr, r5
 800d594:	f04f 0a00 	mov.w	sl, #0
 800d598:	f8bc b000 	ldrh.w	fp, [ip]
 800d59c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d5a0:	fb09 220b 	mla	r2, r9, fp, r2
 800d5a4:	4452      	add	r2, sl
 800d5a6:	b289      	uxth	r1, r1
 800d5a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5ac:	f84e 1b04 	str.w	r1, [lr], #4
 800d5b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d5b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d5b8:	f8be 1000 	ldrh.w	r1, [lr]
 800d5bc:	fb09 110a 	mla	r1, r9, sl, r1
 800d5c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d5c4:	4567      	cmp	r7, ip
 800d5c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d5ca:	d8e5      	bhi.n	800d598 <__multiply+0x10c>
 800d5cc:	9a01      	ldr	r2, [sp, #4]
 800d5ce:	50a9      	str	r1, [r5, r2]
 800d5d0:	3504      	adds	r5, #4
 800d5d2:	e799      	b.n	800d508 <__multiply+0x7c>
 800d5d4:	3e01      	subs	r6, #1
 800d5d6:	e79b      	b.n	800d510 <__multiply+0x84>
 800d5d8:	0800f688 	.word	0x0800f688
 800d5dc:	0800f699 	.word	0x0800f699

0800d5e0 <__pow5mult>:
 800d5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e4:	4615      	mov	r5, r2
 800d5e6:	f012 0203 	ands.w	r2, r2, #3
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	d007      	beq.n	800d600 <__pow5mult+0x20>
 800d5f0:	4c25      	ldr	r4, [pc, #148]	; (800d688 <__pow5mult+0xa8>)
 800d5f2:	3a01      	subs	r2, #1
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5fa:	f7ff fe9d 	bl	800d338 <__multadd>
 800d5fe:	4607      	mov	r7, r0
 800d600:	10ad      	asrs	r5, r5, #2
 800d602:	d03d      	beq.n	800d680 <__pow5mult+0xa0>
 800d604:	69f4      	ldr	r4, [r6, #28]
 800d606:	b97c      	cbnz	r4, 800d628 <__pow5mult+0x48>
 800d608:	2010      	movs	r0, #16
 800d60a:	f7ff fd7f 	bl	800d10c <malloc>
 800d60e:	4602      	mov	r2, r0
 800d610:	61f0      	str	r0, [r6, #28]
 800d612:	b928      	cbnz	r0, 800d620 <__pow5mult+0x40>
 800d614:	4b1d      	ldr	r3, [pc, #116]	; (800d68c <__pow5mult+0xac>)
 800d616:	481e      	ldr	r0, [pc, #120]	; (800d690 <__pow5mult+0xb0>)
 800d618:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d61c:	f000 fbd6 	bl	800ddcc <__assert_func>
 800d620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d624:	6004      	str	r4, [r0, #0]
 800d626:	60c4      	str	r4, [r0, #12]
 800d628:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d62c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d630:	b94c      	cbnz	r4, 800d646 <__pow5mult+0x66>
 800d632:	f240 2171 	movw	r1, #625	; 0x271
 800d636:	4630      	mov	r0, r6
 800d638:	f7ff ff12 	bl	800d460 <__i2b>
 800d63c:	2300      	movs	r3, #0
 800d63e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d642:	4604      	mov	r4, r0
 800d644:	6003      	str	r3, [r0, #0]
 800d646:	f04f 0900 	mov.w	r9, #0
 800d64a:	07eb      	lsls	r3, r5, #31
 800d64c:	d50a      	bpl.n	800d664 <__pow5mult+0x84>
 800d64e:	4639      	mov	r1, r7
 800d650:	4622      	mov	r2, r4
 800d652:	4630      	mov	r0, r6
 800d654:	f7ff ff1a 	bl	800d48c <__multiply>
 800d658:	4639      	mov	r1, r7
 800d65a:	4680      	mov	r8, r0
 800d65c:	4630      	mov	r0, r6
 800d65e:	f7ff fe49 	bl	800d2f4 <_Bfree>
 800d662:	4647      	mov	r7, r8
 800d664:	106d      	asrs	r5, r5, #1
 800d666:	d00b      	beq.n	800d680 <__pow5mult+0xa0>
 800d668:	6820      	ldr	r0, [r4, #0]
 800d66a:	b938      	cbnz	r0, 800d67c <__pow5mult+0x9c>
 800d66c:	4622      	mov	r2, r4
 800d66e:	4621      	mov	r1, r4
 800d670:	4630      	mov	r0, r6
 800d672:	f7ff ff0b 	bl	800d48c <__multiply>
 800d676:	6020      	str	r0, [r4, #0]
 800d678:	f8c0 9000 	str.w	r9, [r0]
 800d67c:	4604      	mov	r4, r0
 800d67e:	e7e4      	b.n	800d64a <__pow5mult+0x6a>
 800d680:	4638      	mov	r0, r7
 800d682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d686:	bf00      	nop
 800d688:	0800f7e8 	.word	0x0800f7e8
 800d68c:	0800f619 	.word	0x0800f619
 800d690:	0800f699 	.word	0x0800f699

0800d694 <__lshift>:
 800d694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d698:	460c      	mov	r4, r1
 800d69a:	6849      	ldr	r1, [r1, #4]
 800d69c:	6923      	ldr	r3, [r4, #16]
 800d69e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6a2:	68a3      	ldr	r3, [r4, #8]
 800d6a4:	4607      	mov	r7, r0
 800d6a6:	4691      	mov	r9, r2
 800d6a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6ac:	f108 0601 	add.w	r6, r8, #1
 800d6b0:	42b3      	cmp	r3, r6
 800d6b2:	db0b      	blt.n	800d6cc <__lshift+0x38>
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f7ff fddd 	bl	800d274 <_Balloc>
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	b948      	cbnz	r0, 800d6d2 <__lshift+0x3e>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	4b28      	ldr	r3, [pc, #160]	; (800d764 <__lshift+0xd0>)
 800d6c2:	4829      	ldr	r0, [pc, #164]	; (800d768 <__lshift+0xd4>)
 800d6c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d6c8:	f000 fb80 	bl	800ddcc <__assert_func>
 800d6cc:	3101      	adds	r1, #1
 800d6ce:	005b      	lsls	r3, r3, #1
 800d6d0:	e7ee      	b.n	800d6b0 <__lshift+0x1c>
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	f100 0114 	add.w	r1, r0, #20
 800d6d8:	f100 0210 	add.w	r2, r0, #16
 800d6dc:	4618      	mov	r0, r3
 800d6de:	4553      	cmp	r3, sl
 800d6e0:	db33      	blt.n	800d74a <__lshift+0xb6>
 800d6e2:	6920      	ldr	r0, [r4, #16]
 800d6e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6e8:	f104 0314 	add.w	r3, r4, #20
 800d6ec:	f019 091f 	ands.w	r9, r9, #31
 800d6f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6f8:	d02b      	beq.n	800d752 <__lshift+0xbe>
 800d6fa:	f1c9 0e20 	rsb	lr, r9, #32
 800d6fe:	468a      	mov	sl, r1
 800d700:	2200      	movs	r2, #0
 800d702:	6818      	ldr	r0, [r3, #0]
 800d704:	fa00 f009 	lsl.w	r0, r0, r9
 800d708:	4310      	orrs	r0, r2
 800d70a:	f84a 0b04 	str.w	r0, [sl], #4
 800d70e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d712:	459c      	cmp	ip, r3
 800d714:	fa22 f20e 	lsr.w	r2, r2, lr
 800d718:	d8f3      	bhi.n	800d702 <__lshift+0x6e>
 800d71a:	ebac 0304 	sub.w	r3, ip, r4
 800d71e:	3b15      	subs	r3, #21
 800d720:	f023 0303 	bic.w	r3, r3, #3
 800d724:	3304      	adds	r3, #4
 800d726:	f104 0015 	add.w	r0, r4, #21
 800d72a:	4584      	cmp	ip, r0
 800d72c:	bf38      	it	cc
 800d72e:	2304      	movcc	r3, #4
 800d730:	50ca      	str	r2, [r1, r3]
 800d732:	b10a      	cbz	r2, 800d738 <__lshift+0xa4>
 800d734:	f108 0602 	add.w	r6, r8, #2
 800d738:	3e01      	subs	r6, #1
 800d73a:	4638      	mov	r0, r7
 800d73c:	612e      	str	r6, [r5, #16]
 800d73e:	4621      	mov	r1, r4
 800d740:	f7ff fdd8 	bl	800d2f4 <_Bfree>
 800d744:	4628      	mov	r0, r5
 800d746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d74a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d74e:	3301      	adds	r3, #1
 800d750:	e7c5      	b.n	800d6de <__lshift+0x4a>
 800d752:	3904      	subs	r1, #4
 800d754:	f853 2b04 	ldr.w	r2, [r3], #4
 800d758:	f841 2f04 	str.w	r2, [r1, #4]!
 800d75c:	459c      	cmp	ip, r3
 800d75e:	d8f9      	bhi.n	800d754 <__lshift+0xc0>
 800d760:	e7ea      	b.n	800d738 <__lshift+0xa4>
 800d762:	bf00      	nop
 800d764:	0800f688 	.word	0x0800f688
 800d768:	0800f699 	.word	0x0800f699

0800d76c <__mcmp>:
 800d76c:	b530      	push	{r4, r5, lr}
 800d76e:	6902      	ldr	r2, [r0, #16]
 800d770:	690c      	ldr	r4, [r1, #16]
 800d772:	1b12      	subs	r2, r2, r4
 800d774:	d10e      	bne.n	800d794 <__mcmp+0x28>
 800d776:	f100 0314 	add.w	r3, r0, #20
 800d77a:	3114      	adds	r1, #20
 800d77c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d780:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d784:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d788:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d78c:	42a5      	cmp	r5, r4
 800d78e:	d003      	beq.n	800d798 <__mcmp+0x2c>
 800d790:	d305      	bcc.n	800d79e <__mcmp+0x32>
 800d792:	2201      	movs	r2, #1
 800d794:	4610      	mov	r0, r2
 800d796:	bd30      	pop	{r4, r5, pc}
 800d798:	4283      	cmp	r3, r0
 800d79a:	d3f3      	bcc.n	800d784 <__mcmp+0x18>
 800d79c:	e7fa      	b.n	800d794 <__mcmp+0x28>
 800d79e:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a2:	e7f7      	b.n	800d794 <__mcmp+0x28>

0800d7a4 <__mdiff>:
 800d7a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	460c      	mov	r4, r1
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	4690      	mov	r8, r2
 800d7b2:	f7ff ffdb 	bl	800d76c <__mcmp>
 800d7b6:	1e05      	subs	r5, r0, #0
 800d7b8:	d110      	bne.n	800d7dc <__mdiff+0x38>
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f7ff fd59 	bl	800d274 <_Balloc>
 800d7c2:	b930      	cbnz	r0, 800d7d2 <__mdiff+0x2e>
 800d7c4:	4b3a      	ldr	r3, [pc, #232]	; (800d8b0 <__mdiff+0x10c>)
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	f240 2137 	movw	r1, #567	; 0x237
 800d7cc:	4839      	ldr	r0, [pc, #228]	; (800d8b4 <__mdiff+0x110>)
 800d7ce:	f000 fafd 	bl	800ddcc <__assert_func>
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7dc:	bfa4      	itt	ge
 800d7de:	4643      	movge	r3, r8
 800d7e0:	46a0      	movge	r8, r4
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d7e8:	bfa6      	itte	ge
 800d7ea:	461c      	movge	r4, r3
 800d7ec:	2500      	movge	r5, #0
 800d7ee:	2501      	movlt	r5, #1
 800d7f0:	f7ff fd40 	bl	800d274 <_Balloc>
 800d7f4:	b920      	cbnz	r0, 800d800 <__mdiff+0x5c>
 800d7f6:	4b2e      	ldr	r3, [pc, #184]	; (800d8b0 <__mdiff+0x10c>)
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	f240 2145 	movw	r1, #581	; 0x245
 800d7fe:	e7e5      	b.n	800d7cc <__mdiff+0x28>
 800d800:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d804:	6926      	ldr	r6, [r4, #16]
 800d806:	60c5      	str	r5, [r0, #12]
 800d808:	f104 0914 	add.w	r9, r4, #20
 800d80c:	f108 0514 	add.w	r5, r8, #20
 800d810:	f100 0e14 	add.w	lr, r0, #20
 800d814:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d818:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d81c:	f108 0210 	add.w	r2, r8, #16
 800d820:	46f2      	mov	sl, lr
 800d822:	2100      	movs	r1, #0
 800d824:	f859 3b04 	ldr.w	r3, [r9], #4
 800d828:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d82c:	fa11 f88b 	uxtah	r8, r1, fp
 800d830:	b299      	uxth	r1, r3
 800d832:	0c1b      	lsrs	r3, r3, #16
 800d834:	eba8 0801 	sub.w	r8, r8, r1
 800d838:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d83c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d840:	fa1f f888 	uxth.w	r8, r8
 800d844:	1419      	asrs	r1, r3, #16
 800d846:	454e      	cmp	r6, r9
 800d848:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d84c:	f84a 3b04 	str.w	r3, [sl], #4
 800d850:	d8e8      	bhi.n	800d824 <__mdiff+0x80>
 800d852:	1b33      	subs	r3, r6, r4
 800d854:	3b15      	subs	r3, #21
 800d856:	f023 0303 	bic.w	r3, r3, #3
 800d85a:	3304      	adds	r3, #4
 800d85c:	3415      	adds	r4, #21
 800d85e:	42a6      	cmp	r6, r4
 800d860:	bf38      	it	cc
 800d862:	2304      	movcc	r3, #4
 800d864:	441d      	add	r5, r3
 800d866:	4473      	add	r3, lr
 800d868:	469e      	mov	lr, r3
 800d86a:	462e      	mov	r6, r5
 800d86c:	4566      	cmp	r6, ip
 800d86e:	d30e      	bcc.n	800d88e <__mdiff+0xea>
 800d870:	f10c 0203 	add.w	r2, ip, #3
 800d874:	1b52      	subs	r2, r2, r5
 800d876:	f022 0203 	bic.w	r2, r2, #3
 800d87a:	3d03      	subs	r5, #3
 800d87c:	45ac      	cmp	ip, r5
 800d87e:	bf38      	it	cc
 800d880:	2200      	movcc	r2, #0
 800d882:	4413      	add	r3, r2
 800d884:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d888:	b17a      	cbz	r2, 800d8aa <__mdiff+0x106>
 800d88a:	6107      	str	r7, [r0, #16]
 800d88c:	e7a4      	b.n	800d7d8 <__mdiff+0x34>
 800d88e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d892:	fa11 f288 	uxtah	r2, r1, r8
 800d896:	1414      	asrs	r4, r2, #16
 800d898:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d89c:	b292      	uxth	r2, r2
 800d89e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d8a2:	f84e 2b04 	str.w	r2, [lr], #4
 800d8a6:	1421      	asrs	r1, r4, #16
 800d8a8:	e7e0      	b.n	800d86c <__mdiff+0xc8>
 800d8aa:	3f01      	subs	r7, #1
 800d8ac:	e7ea      	b.n	800d884 <__mdiff+0xe0>
 800d8ae:	bf00      	nop
 800d8b0:	0800f688 	.word	0x0800f688
 800d8b4:	0800f699 	.word	0x0800f699

0800d8b8 <__d2b>:
 800d8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8bc:	460f      	mov	r7, r1
 800d8be:	2101      	movs	r1, #1
 800d8c0:	ec59 8b10 	vmov	r8, r9, d0
 800d8c4:	4616      	mov	r6, r2
 800d8c6:	f7ff fcd5 	bl	800d274 <_Balloc>
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	b930      	cbnz	r0, 800d8dc <__d2b+0x24>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	4b24      	ldr	r3, [pc, #144]	; (800d964 <__d2b+0xac>)
 800d8d2:	4825      	ldr	r0, [pc, #148]	; (800d968 <__d2b+0xb0>)
 800d8d4:	f240 310f 	movw	r1, #783	; 0x30f
 800d8d8:	f000 fa78 	bl	800ddcc <__assert_func>
 800d8dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8e4:	bb2d      	cbnz	r5, 800d932 <__d2b+0x7a>
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	f1b8 0300 	subs.w	r3, r8, #0
 800d8ec:	d026      	beq.n	800d93c <__d2b+0x84>
 800d8ee:	4668      	mov	r0, sp
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	f7ff fd87 	bl	800d404 <__lo0bits>
 800d8f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8fa:	b1e8      	cbz	r0, 800d938 <__d2b+0x80>
 800d8fc:	f1c0 0320 	rsb	r3, r0, #32
 800d900:	fa02 f303 	lsl.w	r3, r2, r3
 800d904:	430b      	orrs	r3, r1
 800d906:	40c2      	lsrs	r2, r0
 800d908:	6163      	str	r3, [r4, #20]
 800d90a:	9201      	str	r2, [sp, #4]
 800d90c:	9b01      	ldr	r3, [sp, #4]
 800d90e:	61a3      	str	r3, [r4, #24]
 800d910:	2b00      	cmp	r3, #0
 800d912:	bf14      	ite	ne
 800d914:	2202      	movne	r2, #2
 800d916:	2201      	moveq	r2, #1
 800d918:	6122      	str	r2, [r4, #16]
 800d91a:	b1bd      	cbz	r5, 800d94c <__d2b+0x94>
 800d91c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d920:	4405      	add	r5, r0
 800d922:	603d      	str	r5, [r7, #0]
 800d924:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d928:	6030      	str	r0, [r6, #0]
 800d92a:	4620      	mov	r0, r4
 800d92c:	b003      	add	sp, #12
 800d92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d936:	e7d6      	b.n	800d8e6 <__d2b+0x2e>
 800d938:	6161      	str	r1, [r4, #20]
 800d93a:	e7e7      	b.n	800d90c <__d2b+0x54>
 800d93c:	a801      	add	r0, sp, #4
 800d93e:	f7ff fd61 	bl	800d404 <__lo0bits>
 800d942:	9b01      	ldr	r3, [sp, #4]
 800d944:	6163      	str	r3, [r4, #20]
 800d946:	3020      	adds	r0, #32
 800d948:	2201      	movs	r2, #1
 800d94a:	e7e5      	b.n	800d918 <__d2b+0x60>
 800d94c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d950:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d954:	6038      	str	r0, [r7, #0]
 800d956:	6918      	ldr	r0, [r3, #16]
 800d958:	f7ff fd34 	bl	800d3c4 <__hi0bits>
 800d95c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d960:	e7e2      	b.n	800d928 <__d2b+0x70>
 800d962:	bf00      	nop
 800d964:	0800f688 	.word	0x0800f688
 800d968:	0800f699 	.word	0x0800f699

0800d96c <__ssputs_r>:
 800d96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d970:	688e      	ldr	r6, [r1, #8]
 800d972:	461f      	mov	r7, r3
 800d974:	42be      	cmp	r6, r7
 800d976:	680b      	ldr	r3, [r1, #0]
 800d978:	4682      	mov	sl, r0
 800d97a:	460c      	mov	r4, r1
 800d97c:	4690      	mov	r8, r2
 800d97e:	d82c      	bhi.n	800d9da <__ssputs_r+0x6e>
 800d980:	898a      	ldrh	r2, [r1, #12]
 800d982:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d986:	d026      	beq.n	800d9d6 <__ssputs_r+0x6a>
 800d988:	6965      	ldr	r5, [r4, #20]
 800d98a:	6909      	ldr	r1, [r1, #16]
 800d98c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d990:	eba3 0901 	sub.w	r9, r3, r1
 800d994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d998:	1c7b      	adds	r3, r7, #1
 800d99a:	444b      	add	r3, r9
 800d99c:	106d      	asrs	r5, r5, #1
 800d99e:	429d      	cmp	r5, r3
 800d9a0:	bf38      	it	cc
 800d9a2:	461d      	movcc	r5, r3
 800d9a4:	0553      	lsls	r3, r2, #21
 800d9a6:	d527      	bpl.n	800d9f8 <__ssputs_r+0x8c>
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	f7ff fbd7 	bl	800d15c <_malloc_r>
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	b360      	cbz	r0, 800da0c <__ssputs_r+0xa0>
 800d9b2:	6921      	ldr	r1, [r4, #16]
 800d9b4:	464a      	mov	r2, r9
 800d9b6:	f7fe fcd4 	bl	800c362 <memcpy>
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9c4:	81a3      	strh	r3, [r4, #12]
 800d9c6:	6126      	str	r6, [r4, #16]
 800d9c8:	6165      	str	r5, [r4, #20]
 800d9ca:	444e      	add	r6, r9
 800d9cc:	eba5 0509 	sub.w	r5, r5, r9
 800d9d0:	6026      	str	r6, [r4, #0]
 800d9d2:	60a5      	str	r5, [r4, #8]
 800d9d4:	463e      	mov	r6, r7
 800d9d6:	42be      	cmp	r6, r7
 800d9d8:	d900      	bls.n	800d9dc <__ssputs_r+0x70>
 800d9da:	463e      	mov	r6, r7
 800d9dc:	6820      	ldr	r0, [r4, #0]
 800d9de:	4632      	mov	r2, r6
 800d9e0:	4641      	mov	r1, r8
 800d9e2:	f000 f9c9 	bl	800dd78 <memmove>
 800d9e6:	68a3      	ldr	r3, [r4, #8]
 800d9e8:	1b9b      	subs	r3, r3, r6
 800d9ea:	60a3      	str	r3, [r4, #8]
 800d9ec:	6823      	ldr	r3, [r4, #0]
 800d9ee:	4433      	add	r3, r6
 800d9f0:	6023      	str	r3, [r4, #0]
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f8:	462a      	mov	r2, r5
 800d9fa:	f000 fa2d 	bl	800de58 <_realloc_r>
 800d9fe:	4606      	mov	r6, r0
 800da00:	2800      	cmp	r0, #0
 800da02:	d1e0      	bne.n	800d9c6 <__ssputs_r+0x5a>
 800da04:	6921      	ldr	r1, [r4, #16]
 800da06:	4650      	mov	r0, sl
 800da08:	f7ff fb34 	bl	800d074 <_free_r>
 800da0c:	230c      	movs	r3, #12
 800da0e:	f8ca 3000 	str.w	r3, [sl]
 800da12:	89a3      	ldrh	r3, [r4, #12]
 800da14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da18:	81a3      	strh	r3, [r4, #12]
 800da1a:	f04f 30ff 	mov.w	r0, #4294967295
 800da1e:	e7e9      	b.n	800d9f4 <__ssputs_r+0x88>

0800da20 <_svfiprintf_r>:
 800da20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da24:	4698      	mov	r8, r3
 800da26:	898b      	ldrh	r3, [r1, #12]
 800da28:	061b      	lsls	r3, r3, #24
 800da2a:	b09d      	sub	sp, #116	; 0x74
 800da2c:	4607      	mov	r7, r0
 800da2e:	460d      	mov	r5, r1
 800da30:	4614      	mov	r4, r2
 800da32:	d50e      	bpl.n	800da52 <_svfiprintf_r+0x32>
 800da34:	690b      	ldr	r3, [r1, #16]
 800da36:	b963      	cbnz	r3, 800da52 <_svfiprintf_r+0x32>
 800da38:	2140      	movs	r1, #64	; 0x40
 800da3a:	f7ff fb8f 	bl	800d15c <_malloc_r>
 800da3e:	6028      	str	r0, [r5, #0]
 800da40:	6128      	str	r0, [r5, #16]
 800da42:	b920      	cbnz	r0, 800da4e <_svfiprintf_r+0x2e>
 800da44:	230c      	movs	r3, #12
 800da46:	603b      	str	r3, [r7, #0]
 800da48:	f04f 30ff 	mov.w	r0, #4294967295
 800da4c:	e0d0      	b.n	800dbf0 <_svfiprintf_r+0x1d0>
 800da4e:	2340      	movs	r3, #64	; 0x40
 800da50:	616b      	str	r3, [r5, #20]
 800da52:	2300      	movs	r3, #0
 800da54:	9309      	str	r3, [sp, #36]	; 0x24
 800da56:	2320      	movs	r3, #32
 800da58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800da60:	2330      	movs	r3, #48	; 0x30
 800da62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dc08 <_svfiprintf_r+0x1e8>
 800da66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da6a:	f04f 0901 	mov.w	r9, #1
 800da6e:	4623      	mov	r3, r4
 800da70:	469a      	mov	sl, r3
 800da72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da76:	b10a      	cbz	r2, 800da7c <_svfiprintf_r+0x5c>
 800da78:	2a25      	cmp	r2, #37	; 0x25
 800da7a:	d1f9      	bne.n	800da70 <_svfiprintf_r+0x50>
 800da7c:	ebba 0b04 	subs.w	fp, sl, r4
 800da80:	d00b      	beq.n	800da9a <_svfiprintf_r+0x7a>
 800da82:	465b      	mov	r3, fp
 800da84:	4622      	mov	r2, r4
 800da86:	4629      	mov	r1, r5
 800da88:	4638      	mov	r0, r7
 800da8a:	f7ff ff6f 	bl	800d96c <__ssputs_r>
 800da8e:	3001      	adds	r0, #1
 800da90:	f000 80a9 	beq.w	800dbe6 <_svfiprintf_r+0x1c6>
 800da94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da96:	445a      	add	r2, fp
 800da98:	9209      	str	r2, [sp, #36]	; 0x24
 800da9a:	f89a 3000 	ldrb.w	r3, [sl]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f000 80a1 	beq.w	800dbe6 <_svfiprintf_r+0x1c6>
 800daa4:	2300      	movs	r3, #0
 800daa6:	f04f 32ff 	mov.w	r2, #4294967295
 800daaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daae:	f10a 0a01 	add.w	sl, sl, #1
 800dab2:	9304      	str	r3, [sp, #16]
 800dab4:	9307      	str	r3, [sp, #28]
 800dab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daba:	931a      	str	r3, [sp, #104]	; 0x68
 800dabc:	4654      	mov	r4, sl
 800dabe:	2205      	movs	r2, #5
 800dac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac4:	4850      	ldr	r0, [pc, #320]	; (800dc08 <_svfiprintf_r+0x1e8>)
 800dac6:	f7f2 fbab 	bl	8000220 <memchr>
 800daca:	9a04      	ldr	r2, [sp, #16]
 800dacc:	b9d8      	cbnz	r0, 800db06 <_svfiprintf_r+0xe6>
 800dace:	06d0      	lsls	r0, r2, #27
 800dad0:	bf44      	itt	mi
 800dad2:	2320      	movmi	r3, #32
 800dad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dad8:	0711      	lsls	r1, r2, #28
 800dada:	bf44      	itt	mi
 800dadc:	232b      	movmi	r3, #43	; 0x2b
 800dade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dae2:	f89a 3000 	ldrb.w	r3, [sl]
 800dae6:	2b2a      	cmp	r3, #42	; 0x2a
 800dae8:	d015      	beq.n	800db16 <_svfiprintf_r+0xf6>
 800daea:	9a07      	ldr	r2, [sp, #28]
 800daec:	4654      	mov	r4, sl
 800daee:	2000      	movs	r0, #0
 800daf0:	f04f 0c0a 	mov.w	ip, #10
 800daf4:	4621      	mov	r1, r4
 800daf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dafa:	3b30      	subs	r3, #48	; 0x30
 800dafc:	2b09      	cmp	r3, #9
 800dafe:	d94d      	bls.n	800db9c <_svfiprintf_r+0x17c>
 800db00:	b1b0      	cbz	r0, 800db30 <_svfiprintf_r+0x110>
 800db02:	9207      	str	r2, [sp, #28]
 800db04:	e014      	b.n	800db30 <_svfiprintf_r+0x110>
 800db06:	eba0 0308 	sub.w	r3, r0, r8
 800db0a:	fa09 f303 	lsl.w	r3, r9, r3
 800db0e:	4313      	orrs	r3, r2
 800db10:	9304      	str	r3, [sp, #16]
 800db12:	46a2      	mov	sl, r4
 800db14:	e7d2      	b.n	800dabc <_svfiprintf_r+0x9c>
 800db16:	9b03      	ldr	r3, [sp, #12]
 800db18:	1d19      	adds	r1, r3, #4
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	9103      	str	r1, [sp, #12]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	bfbb      	ittet	lt
 800db22:	425b      	neglt	r3, r3
 800db24:	f042 0202 	orrlt.w	r2, r2, #2
 800db28:	9307      	strge	r3, [sp, #28]
 800db2a:	9307      	strlt	r3, [sp, #28]
 800db2c:	bfb8      	it	lt
 800db2e:	9204      	strlt	r2, [sp, #16]
 800db30:	7823      	ldrb	r3, [r4, #0]
 800db32:	2b2e      	cmp	r3, #46	; 0x2e
 800db34:	d10c      	bne.n	800db50 <_svfiprintf_r+0x130>
 800db36:	7863      	ldrb	r3, [r4, #1]
 800db38:	2b2a      	cmp	r3, #42	; 0x2a
 800db3a:	d134      	bne.n	800dba6 <_svfiprintf_r+0x186>
 800db3c:	9b03      	ldr	r3, [sp, #12]
 800db3e:	1d1a      	adds	r2, r3, #4
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	9203      	str	r2, [sp, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	bfb8      	it	lt
 800db48:	f04f 33ff 	movlt.w	r3, #4294967295
 800db4c:	3402      	adds	r4, #2
 800db4e:	9305      	str	r3, [sp, #20]
 800db50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dc18 <_svfiprintf_r+0x1f8>
 800db54:	7821      	ldrb	r1, [r4, #0]
 800db56:	2203      	movs	r2, #3
 800db58:	4650      	mov	r0, sl
 800db5a:	f7f2 fb61 	bl	8000220 <memchr>
 800db5e:	b138      	cbz	r0, 800db70 <_svfiprintf_r+0x150>
 800db60:	9b04      	ldr	r3, [sp, #16]
 800db62:	eba0 000a 	sub.w	r0, r0, sl
 800db66:	2240      	movs	r2, #64	; 0x40
 800db68:	4082      	lsls	r2, r0
 800db6a:	4313      	orrs	r3, r2
 800db6c:	3401      	adds	r4, #1
 800db6e:	9304      	str	r3, [sp, #16]
 800db70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db74:	4825      	ldr	r0, [pc, #148]	; (800dc0c <_svfiprintf_r+0x1ec>)
 800db76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db7a:	2206      	movs	r2, #6
 800db7c:	f7f2 fb50 	bl	8000220 <memchr>
 800db80:	2800      	cmp	r0, #0
 800db82:	d038      	beq.n	800dbf6 <_svfiprintf_r+0x1d6>
 800db84:	4b22      	ldr	r3, [pc, #136]	; (800dc10 <_svfiprintf_r+0x1f0>)
 800db86:	bb1b      	cbnz	r3, 800dbd0 <_svfiprintf_r+0x1b0>
 800db88:	9b03      	ldr	r3, [sp, #12]
 800db8a:	3307      	adds	r3, #7
 800db8c:	f023 0307 	bic.w	r3, r3, #7
 800db90:	3308      	adds	r3, #8
 800db92:	9303      	str	r3, [sp, #12]
 800db94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db96:	4433      	add	r3, r6
 800db98:	9309      	str	r3, [sp, #36]	; 0x24
 800db9a:	e768      	b.n	800da6e <_svfiprintf_r+0x4e>
 800db9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dba0:	460c      	mov	r4, r1
 800dba2:	2001      	movs	r0, #1
 800dba4:	e7a6      	b.n	800daf4 <_svfiprintf_r+0xd4>
 800dba6:	2300      	movs	r3, #0
 800dba8:	3401      	adds	r4, #1
 800dbaa:	9305      	str	r3, [sp, #20]
 800dbac:	4619      	mov	r1, r3
 800dbae:	f04f 0c0a 	mov.w	ip, #10
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbb8:	3a30      	subs	r2, #48	; 0x30
 800dbba:	2a09      	cmp	r2, #9
 800dbbc:	d903      	bls.n	800dbc6 <_svfiprintf_r+0x1a6>
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d0c6      	beq.n	800db50 <_svfiprintf_r+0x130>
 800dbc2:	9105      	str	r1, [sp, #20]
 800dbc4:	e7c4      	b.n	800db50 <_svfiprintf_r+0x130>
 800dbc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbca:	4604      	mov	r4, r0
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e7f0      	b.n	800dbb2 <_svfiprintf_r+0x192>
 800dbd0:	ab03      	add	r3, sp, #12
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	462a      	mov	r2, r5
 800dbd6:	4b0f      	ldr	r3, [pc, #60]	; (800dc14 <_svfiprintf_r+0x1f4>)
 800dbd8:	a904      	add	r1, sp, #16
 800dbda:	4638      	mov	r0, r7
 800dbdc:	f7fd fe2e 	bl	800b83c <_printf_float>
 800dbe0:	1c42      	adds	r2, r0, #1
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	d1d6      	bne.n	800db94 <_svfiprintf_r+0x174>
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	065b      	lsls	r3, r3, #25
 800dbea:	f53f af2d 	bmi.w	800da48 <_svfiprintf_r+0x28>
 800dbee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbf0:	b01d      	add	sp, #116	; 0x74
 800dbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf6:	ab03      	add	r3, sp, #12
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	462a      	mov	r2, r5
 800dbfc:	4b05      	ldr	r3, [pc, #20]	; (800dc14 <_svfiprintf_r+0x1f4>)
 800dbfe:	a904      	add	r1, sp, #16
 800dc00:	4638      	mov	r0, r7
 800dc02:	f7fe f8bf 	bl	800bd84 <_printf_i>
 800dc06:	e7eb      	b.n	800dbe0 <_svfiprintf_r+0x1c0>
 800dc08:	0800f7f4 	.word	0x0800f7f4
 800dc0c:	0800f7fe 	.word	0x0800f7fe
 800dc10:	0800b83d 	.word	0x0800b83d
 800dc14:	0800d96d 	.word	0x0800d96d
 800dc18:	0800f7fa 	.word	0x0800f7fa

0800dc1c <__sflush_r>:
 800dc1c:	898a      	ldrh	r2, [r1, #12]
 800dc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc22:	4605      	mov	r5, r0
 800dc24:	0710      	lsls	r0, r2, #28
 800dc26:	460c      	mov	r4, r1
 800dc28:	d458      	bmi.n	800dcdc <__sflush_r+0xc0>
 800dc2a:	684b      	ldr	r3, [r1, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	dc05      	bgt.n	800dc3c <__sflush_r+0x20>
 800dc30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	dc02      	bgt.n	800dc3c <__sflush_r+0x20>
 800dc36:	2000      	movs	r0, #0
 800dc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc3e:	2e00      	cmp	r6, #0
 800dc40:	d0f9      	beq.n	800dc36 <__sflush_r+0x1a>
 800dc42:	2300      	movs	r3, #0
 800dc44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc48:	682f      	ldr	r7, [r5, #0]
 800dc4a:	6a21      	ldr	r1, [r4, #32]
 800dc4c:	602b      	str	r3, [r5, #0]
 800dc4e:	d032      	beq.n	800dcb6 <__sflush_r+0x9a>
 800dc50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	075a      	lsls	r2, r3, #29
 800dc56:	d505      	bpl.n	800dc64 <__sflush_r+0x48>
 800dc58:	6863      	ldr	r3, [r4, #4]
 800dc5a:	1ac0      	subs	r0, r0, r3
 800dc5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc5e:	b10b      	cbz	r3, 800dc64 <__sflush_r+0x48>
 800dc60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc62:	1ac0      	subs	r0, r0, r3
 800dc64:	2300      	movs	r3, #0
 800dc66:	4602      	mov	r2, r0
 800dc68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc6a:	6a21      	ldr	r1, [r4, #32]
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	47b0      	blx	r6
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	d106      	bne.n	800dc84 <__sflush_r+0x68>
 800dc76:	6829      	ldr	r1, [r5, #0]
 800dc78:	291d      	cmp	r1, #29
 800dc7a:	d82b      	bhi.n	800dcd4 <__sflush_r+0xb8>
 800dc7c:	4a29      	ldr	r2, [pc, #164]	; (800dd24 <__sflush_r+0x108>)
 800dc7e:	410a      	asrs	r2, r1
 800dc80:	07d6      	lsls	r6, r2, #31
 800dc82:	d427      	bmi.n	800dcd4 <__sflush_r+0xb8>
 800dc84:	2200      	movs	r2, #0
 800dc86:	6062      	str	r2, [r4, #4]
 800dc88:	04d9      	lsls	r1, r3, #19
 800dc8a:	6922      	ldr	r2, [r4, #16]
 800dc8c:	6022      	str	r2, [r4, #0]
 800dc8e:	d504      	bpl.n	800dc9a <__sflush_r+0x7e>
 800dc90:	1c42      	adds	r2, r0, #1
 800dc92:	d101      	bne.n	800dc98 <__sflush_r+0x7c>
 800dc94:	682b      	ldr	r3, [r5, #0]
 800dc96:	b903      	cbnz	r3, 800dc9a <__sflush_r+0x7e>
 800dc98:	6560      	str	r0, [r4, #84]	; 0x54
 800dc9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc9c:	602f      	str	r7, [r5, #0]
 800dc9e:	2900      	cmp	r1, #0
 800dca0:	d0c9      	beq.n	800dc36 <__sflush_r+0x1a>
 800dca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dca6:	4299      	cmp	r1, r3
 800dca8:	d002      	beq.n	800dcb0 <__sflush_r+0x94>
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f7ff f9e2 	bl	800d074 <_free_r>
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	6360      	str	r0, [r4, #52]	; 0x34
 800dcb4:	e7c0      	b.n	800dc38 <__sflush_r+0x1c>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	4628      	mov	r0, r5
 800dcba:	47b0      	blx	r6
 800dcbc:	1c41      	adds	r1, r0, #1
 800dcbe:	d1c8      	bne.n	800dc52 <__sflush_r+0x36>
 800dcc0:	682b      	ldr	r3, [r5, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d0c5      	beq.n	800dc52 <__sflush_r+0x36>
 800dcc6:	2b1d      	cmp	r3, #29
 800dcc8:	d001      	beq.n	800dcce <__sflush_r+0xb2>
 800dcca:	2b16      	cmp	r3, #22
 800dccc:	d101      	bne.n	800dcd2 <__sflush_r+0xb6>
 800dcce:	602f      	str	r7, [r5, #0]
 800dcd0:	e7b1      	b.n	800dc36 <__sflush_r+0x1a>
 800dcd2:	89a3      	ldrh	r3, [r4, #12]
 800dcd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcd8:	81a3      	strh	r3, [r4, #12]
 800dcda:	e7ad      	b.n	800dc38 <__sflush_r+0x1c>
 800dcdc:	690f      	ldr	r7, [r1, #16]
 800dcde:	2f00      	cmp	r7, #0
 800dce0:	d0a9      	beq.n	800dc36 <__sflush_r+0x1a>
 800dce2:	0793      	lsls	r3, r2, #30
 800dce4:	680e      	ldr	r6, [r1, #0]
 800dce6:	bf08      	it	eq
 800dce8:	694b      	ldreq	r3, [r1, #20]
 800dcea:	600f      	str	r7, [r1, #0]
 800dcec:	bf18      	it	ne
 800dcee:	2300      	movne	r3, #0
 800dcf0:	eba6 0807 	sub.w	r8, r6, r7
 800dcf4:	608b      	str	r3, [r1, #8]
 800dcf6:	f1b8 0f00 	cmp.w	r8, #0
 800dcfa:	dd9c      	ble.n	800dc36 <__sflush_r+0x1a>
 800dcfc:	6a21      	ldr	r1, [r4, #32]
 800dcfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd00:	4643      	mov	r3, r8
 800dd02:	463a      	mov	r2, r7
 800dd04:	4628      	mov	r0, r5
 800dd06:	47b0      	blx	r6
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	dc06      	bgt.n	800dd1a <__sflush_r+0xfe>
 800dd0c:	89a3      	ldrh	r3, [r4, #12]
 800dd0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd12:	81a3      	strh	r3, [r4, #12]
 800dd14:	f04f 30ff 	mov.w	r0, #4294967295
 800dd18:	e78e      	b.n	800dc38 <__sflush_r+0x1c>
 800dd1a:	4407      	add	r7, r0
 800dd1c:	eba8 0800 	sub.w	r8, r8, r0
 800dd20:	e7e9      	b.n	800dcf6 <__sflush_r+0xda>
 800dd22:	bf00      	nop
 800dd24:	dfbffffe 	.word	0xdfbffffe

0800dd28 <_fflush_r>:
 800dd28:	b538      	push	{r3, r4, r5, lr}
 800dd2a:	690b      	ldr	r3, [r1, #16]
 800dd2c:	4605      	mov	r5, r0
 800dd2e:	460c      	mov	r4, r1
 800dd30:	b913      	cbnz	r3, 800dd38 <_fflush_r+0x10>
 800dd32:	2500      	movs	r5, #0
 800dd34:	4628      	mov	r0, r5
 800dd36:	bd38      	pop	{r3, r4, r5, pc}
 800dd38:	b118      	cbz	r0, 800dd42 <_fflush_r+0x1a>
 800dd3a:	6a03      	ldr	r3, [r0, #32]
 800dd3c:	b90b      	cbnz	r3, 800dd42 <_fflush_r+0x1a>
 800dd3e:	f7fe f9cf 	bl	800c0e0 <__sinit>
 800dd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d0f3      	beq.n	800dd32 <_fflush_r+0xa>
 800dd4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd4c:	07d0      	lsls	r0, r2, #31
 800dd4e:	d404      	bmi.n	800dd5a <_fflush_r+0x32>
 800dd50:	0599      	lsls	r1, r3, #22
 800dd52:	d402      	bmi.n	800dd5a <_fflush_r+0x32>
 800dd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd56:	f7fe fb02 	bl	800c35e <__retarget_lock_acquire_recursive>
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	4621      	mov	r1, r4
 800dd5e:	f7ff ff5d 	bl	800dc1c <__sflush_r>
 800dd62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd64:	07da      	lsls	r2, r3, #31
 800dd66:	4605      	mov	r5, r0
 800dd68:	d4e4      	bmi.n	800dd34 <_fflush_r+0xc>
 800dd6a:	89a3      	ldrh	r3, [r4, #12]
 800dd6c:	059b      	lsls	r3, r3, #22
 800dd6e:	d4e1      	bmi.n	800dd34 <_fflush_r+0xc>
 800dd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd72:	f7fe faf5 	bl	800c360 <__retarget_lock_release_recursive>
 800dd76:	e7dd      	b.n	800dd34 <_fflush_r+0xc>

0800dd78 <memmove>:
 800dd78:	4288      	cmp	r0, r1
 800dd7a:	b510      	push	{r4, lr}
 800dd7c:	eb01 0402 	add.w	r4, r1, r2
 800dd80:	d902      	bls.n	800dd88 <memmove+0x10>
 800dd82:	4284      	cmp	r4, r0
 800dd84:	4623      	mov	r3, r4
 800dd86:	d807      	bhi.n	800dd98 <memmove+0x20>
 800dd88:	1e43      	subs	r3, r0, #1
 800dd8a:	42a1      	cmp	r1, r4
 800dd8c:	d008      	beq.n	800dda0 <memmove+0x28>
 800dd8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd96:	e7f8      	b.n	800dd8a <memmove+0x12>
 800dd98:	4402      	add	r2, r0
 800dd9a:	4601      	mov	r1, r0
 800dd9c:	428a      	cmp	r2, r1
 800dd9e:	d100      	bne.n	800dda2 <memmove+0x2a>
 800dda0:	bd10      	pop	{r4, pc}
 800dda2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dda6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddaa:	e7f7      	b.n	800dd9c <memmove+0x24>

0800ddac <_sbrk_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4d06      	ldr	r5, [pc, #24]	; (800ddc8 <_sbrk_r+0x1c>)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	602b      	str	r3, [r5, #0]
 800ddb8:	f7f7 fdfd 	bl	80059b6 <_sbrk>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d102      	bne.n	800ddc6 <_sbrk_r+0x1a>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	b103      	cbz	r3, 800ddc6 <_sbrk_r+0x1a>
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	20001dc8 	.word	0x20001dc8

0800ddcc <__assert_func>:
 800ddcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddce:	4614      	mov	r4, r2
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	4b09      	ldr	r3, [pc, #36]	; (800ddf8 <__assert_func+0x2c>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4605      	mov	r5, r0
 800ddd8:	68d8      	ldr	r0, [r3, #12]
 800ddda:	b14c      	cbz	r4, 800ddf0 <__assert_func+0x24>
 800dddc:	4b07      	ldr	r3, [pc, #28]	; (800ddfc <__assert_func+0x30>)
 800ddde:	9100      	str	r1, [sp, #0]
 800dde0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dde4:	4906      	ldr	r1, [pc, #24]	; (800de00 <__assert_func+0x34>)
 800dde6:	462b      	mov	r3, r5
 800dde8:	f000 f872 	bl	800ded0 <fiprintf>
 800ddec:	f000 f882 	bl	800def4 <abort>
 800ddf0:	4b04      	ldr	r3, [pc, #16]	; (800de04 <__assert_func+0x38>)
 800ddf2:	461c      	mov	r4, r3
 800ddf4:	e7f3      	b.n	800ddde <__assert_func+0x12>
 800ddf6:	bf00      	nop
 800ddf8:	200005fc 	.word	0x200005fc
 800ddfc:	0800f80f 	.word	0x0800f80f
 800de00:	0800f81c 	.word	0x0800f81c
 800de04:	0800f84a 	.word	0x0800f84a

0800de08 <_calloc_r>:
 800de08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de0a:	fba1 2402 	umull	r2, r4, r1, r2
 800de0e:	b94c      	cbnz	r4, 800de24 <_calloc_r+0x1c>
 800de10:	4611      	mov	r1, r2
 800de12:	9201      	str	r2, [sp, #4]
 800de14:	f7ff f9a2 	bl	800d15c <_malloc_r>
 800de18:	9a01      	ldr	r2, [sp, #4]
 800de1a:	4605      	mov	r5, r0
 800de1c:	b930      	cbnz	r0, 800de2c <_calloc_r+0x24>
 800de1e:	4628      	mov	r0, r5
 800de20:	b003      	add	sp, #12
 800de22:	bd30      	pop	{r4, r5, pc}
 800de24:	220c      	movs	r2, #12
 800de26:	6002      	str	r2, [r0, #0]
 800de28:	2500      	movs	r5, #0
 800de2a:	e7f8      	b.n	800de1e <_calloc_r+0x16>
 800de2c:	4621      	mov	r1, r4
 800de2e:	f7fe fa19 	bl	800c264 <memset>
 800de32:	e7f4      	b.n	800de1e <_calloc_r+0x16>

0800de34 <__ascii_mbtowc>:
 800de34:	b082      	sub	sp, #8
 800de36:	b901      	cbnz	r1, 800de3a <__ascii_mbtowc+0x6>
 800de38:	a901      	add	r1, sp, #4
 800de3a:	b142      	cbz	r2, 800de4e <__ascii_mbtowc+0x1a>
 800de3c:	b14b      	cbz	r3, 800de52 <__ascii_mbtowc+0x1e>
 800de3e:	7813      	ldrb	r3, [r2, #0]
 800de40:	600b      	str	r3, [r1, #0]
 800de42:	7812      	ldrb	r2, [r2, #0]
 800de44:	1e10      	subs	r0, r2, #0
 800de46:	bf18      	it	ne
 800de48:	2001      	movne	r0, #1
 800de4a:	b002      	add	sp, #8
 800de4c:	4770      	bx	lr
 800de4e:	4610      	mov	r0, r2
 800de50:	e7fb      	b.n	800de4a <__ascii_mbtowc+0x16>
 800de52:	f06f 0001 	mvn.w	r0, #1
 800de56:	e7f8      	b.n	800de4a <__ascii_mbtowc+0x16>

0800de58 <_realloc_r>:
 800de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de5c:	4680      	mov	r8, r0
 800de5e:	4614      	mov	r4, r2
 800de60:	460e      	mov	r6, r1
 800de62:	b921      	cbnz	r1, 800de6e <_realloc_r+0x16>
 800de64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de68:	4611      	mov	r1, r2
 800de6a:	f7ff b977 	b.w	800d15c <_malloc_r>
 800de6e:	b92a      	cbnz	r2, 800de7c <_realloc_r+0x24>
 800de70:	f7ff f900 	bl	800d074 <_free_r>
 800de74:	4625      	mov	r5, r4
 800de76:	4628      	mov	r0, r5
 800de78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de7c:	f000 f841 	bl	800df02 <_malloc_usable_size_r>
 800de80:	4284      	cmp	r4, r0
 800de82:	4607      	mov	r7, r0
 800de84:	d802      	bhi.n	800de8c <_realloc_r+0x34>
 800de86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de8a:	d812      	bhi.n	800deb2 <_realloc_r+0x5a>
 800de8c:	4621      	mov	r1, r4
 800de8e:	4640      	mov	r0, r8
 800de90:	f7ff f964 	bl	800d15c <_malloc_r>
 800de94:	4605      	mov	r5, r0
 800de96:	2800      	cmp	r0, #0
 800de98:	d0ed      	beq.n	800de76 <_realloc_r+0x1e>
 800de9a:	42bc      	cmp	r4, r7
 800de9c:	4622      	mov	r2, r4
 800de9e:	4631      	mov	r1, r6
 800dea0:	bf28      	it	cs
 800dea2:	463a      	movcs	r2, r7
 800dea4:	f7fe fa5d 	bl	800c362 <memcpy>
 800dea8:	4631      	mov	r1, r6
 800deaa:	4640      	mov	r0, r8
 800deac:	f7ff f8e2 	bl	800d074 <_free_r>
 800deb0:	e7e1      	b.n	800de76 <_realloc_r+0x1e>
 800deb2:	4635      	mov	r5, r6
 800deb4:	e7df      	b.n	800de76 <_realloc_r+0x1e>

0800deb6 <__ascii_wctomb>:
 800deb6:	b149      	cbz	r1, 800decc <__ascii_wctomb+0x16>
 800deb8:	2aff      	cmp	r2, #255	; 0xff
 800deba:	bf85      	ittet	hi
 800debc:	238a      	movhi	r3, #138	; 0x8a
 800debe:	6003      	strhi	r3, [r0, #0]
 800dec0:	700a      	strbls	r2, [r1, #0]
 800dec2:	f04f 30ff 	movhi.w	r0, #4294967295
 800dec6:	bf98      	it	ls
 800dec8:	2001      	movls	r0, #1
 800deca:	4770      	bx	lr
 800decc:	4608      	mov	r0, r1
 800dece:	4770      	bx	lr

0800ded0 <fiprintf>:
 800ded0:	b40e      	push	{r1, r2, r3}
 800ded2:	b503      	push	{r0, r1, lr}
 800ded4:	4601      	mov	r1, r0
 800ded6:	ab03      	add	r3, sp, #12
 800ded8:	4805      	ldr	r0, [pc, #20]	; (800def0 <fiprintf+0x20>)
 800deda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dede:	6800      	ldr	r0, [r0, #0]
 800dee0:	9301      	str	r3, [sp, #4]
 800dee2:	f000 f83f 	bl	800df64 <_vfiprintf_r>
 800dee6:	b002      	add	sp, #8
 800dee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800deec:	b003      	add	sp, #12
 800deee:	4770      	bx	lr
 800def0:	200005fc 	.word	0x200005fc

0800def4 <abort>:
 800def4:	b508      	push	{r3, lr}
 800def6:	2006      	movs	r0, #6
 800def8:	f000 fa0c 	bl	800e314 <raise>
 800defc:	2001      	movs	r0, #1
 800defe:	f7f7 fd2e 	bl	800595e <_exit>

0800df02 <_malloc_usable_size_r>:
 800df02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df06:	1f18      	subs	r0, r3, #4
 800df08:	2b00      	cmp	r3, #0
 800df0a:	bfbc      	itt	lt
 800df0c:	580b      	ldrlt	r3, [r1, r0]
 800df0e:	18c0      	addlt	r0, r0, r3
 800df10:	4770      	bx	lr

0800df12 <__sfputc_r>:
 800df12:	6893      	ldr	r3, [r2, #8]
 800df14:	3b01      	subs	r3, #1
 800df16:	2b00      	cmp	r3, #0
 800df18:	b410      	push	{r4}
 800df1a:	6093      	str	r3, [r2, #8]
 800df1c:	da08      	bge.n	800df30 <__sfputc_r+0x1e>
 800df1e:	6994      	ldr	r4, [r2, #24]
 800df20:	42a3      	cmp	r3, r4
 800df22:	db01      	blt.n	800df28 <__sfputc_r+0x16>
 800df24:	290a      	cmp	r1, #10
 800df26:	d103      	bne.n	800df30 <__sfputc_r+0x1e>
 800df28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df2c:	f000 b934 	b.w	800e198 <__swbuf_r>
 800df30:	6813      	ldr	r3, [r2, #0]
 800df32:	1c58      	adds	r0, r3, #1
 800df34:	6010      	str	r0, [r2, #0]
 800df36:	7019      	strb	r1, [r3, #0]
 800df38:	4608      	mov	r0, r1
 800df3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <__sfputs_r>:
 800df40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df42:	4606      	mov	r6, r0
 800df44:	460f      	mov	r7, r1
 800df46:	4614      	mov	r4, r2
 800df48:	18d5      	adds	r5, r2, r3
 800df4a:	42ac      	cmp	r4, r5
 800df4c:	d101      	bne.n	800df52 <__sfputs_r+0x12>
 800df4e:	2000      	movs	r0, #0
 800df50:	e007      	b.n	800df62 <__sfputs_r+0x22>
 800df52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df56:	463a      	mov	r2, r7
 800df58:	4630      	mov	r0, r6
 800df5a:	f7ff ffda 	bl	800df12 <__sfputc_r>
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	d1f3      	bne.n	800df4a <__sfputs_r+0xa>
 800df62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df64 <_vfiprintf_r>:
 800df64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df68:	460d      	mov	r5, r1
 800df6a:	b09d      	sub	sp, #116	; 0x74
 800df6c:	4614      	mov	r4, r2
 800df6e:	4698      	mov	r8, r3
 800df70:	4606      	mov	r6, r0
 800df72:	b118      	cbz	r0, 800df7c <_vfiprintf_r+0x18>
 800df74:	6a03      	ldr	r3, [r0, #32]
 800df76:	b90b      	cbnz	r3, 800df7c <_vfiprintf_r+0x18>
 800df78:	f7fe f8b2 	bl	800c0e0 <__sinit>
 800df7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df7e:	07d9      	lsls	r1, r3, #31
 800df80:	d405      	bmi.n	800df8e <_vfiprintf_r+0x2a>
 800df82:	89ab      	ldrh	r3, [r5, #12]
 800df84:	059a      	lsls	r2, r3, #22
 800df86:	d402      	bmi.n	800df8e <_vfiprintf_r+0x2a>
 800df88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df8a:	f7fe f9e8 	bl	800c35e <__retarget_lock_acquire_recursive>
 800df8e:	89ab      	ldrh	r3, [r5, #12]
 800df90:	071b      	lsls	r3, r3, #28
 800df92:	d501      	bpl.n	800df98 <_vfiprintf_r+0x34>
 800df94:	692b      	ldr	r3, [r5, #16]
 800df96:	b99b      	cbnz	r3, 800dfc0 <_vfiprintf_r+0x5c>
 800df98:	4629      	mov	r1, r5
 800df9a:	4630      	mov	r0, r6
 800df9c:	f000 f93a 	bl	800e214 <__swsetup_r>
 800dfa0:	b170      	cbz	r0, 800dfc0 <_vfiprintf_r+0x5c>
 800dfa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfa4:	07dc      	lsls	r4, r3, #31
 800dfa6:	d504      	bpl.n	800dfb2 <_vfiprintf_r+0x4e>
 800dfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfac:	b01d      	add	sp, #116	; 0x74
 800dfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb2:	89ab      	ldrh	r3, [r5, #12]
 800dfb4:	0598      	lsls	r0, r3, #22
 800dfb6:	d4f7      	bmi.n	800dfa8 <_vfiprintf_r+0x44>
 800dfb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfba:	f7fe f9d1 	bl	800c360 <__retarget_lock_release_recursive>
 800dfbe:	e7f3      	b.n	800dfa8 <_vfiprintf_r+0x44>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc4:	2320      	movs	r3, #32
 800dfc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfca:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfce:	2330      	movs	r3, #48	; 0x30
 800dfd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e184 <_vfiprintf_r+0x220>
 800dfd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfd8:	f04f 0901 	mov.w	r9, #1
 800dfdc:	4623      	mov	r3, r4
 800dfde:	469a      	mov	sl, r3
 800dfe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfe4:	b10a      	cbz	r2, 800dfea <_vfiprintf_r+0x86>
 800dfe6:	2a25      	cmp	r2, #37	; 0x25
 800dfe8:	d1f9      	bne.n	800dfde <_vfiprintf_r+0x7a>
 800dfea:	ebba 0b04 	subs.w	fp, sl, r4
 800dfee:	d00b      	beq.n	800e008 <_vfiprintf_r+0xa4>
 800dff0:	465b      	mov	r3, fp
 800dff2:	4622      	mov	r2, r4
 800dff4:	4629      	mov	r1, r5
 800dff6:	4630      	mov	r0, r6
 800dff8:	f7ff ffa2 	bl	800df40 <__sfputs_r>
 800dffc:	3001      	adds	r0, #1
 800dffe:	f000 80a9 	beq.w	800e154 <_vfiprintf_r+0x1f0>
 800e002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e004:	445a      	add	r2, fp
 800e006:	9209      	str	r2, [sp, #36]	; 0x24
 800e008:	f89a 3000 	ldrb.w	r3, [sl]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 80a1 	beq.w	800e154 <_vfiprintf_r+0x1f0>
 800e012:	2300      	movs	r3, #0
 800e014:	f04f 32ff 	mov.w	r2, #4294967295
 800e018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e01c:	f10a 0a01 	add.w	sl, sl, #1
 800e020:	9304      	str	r3, [sp, #16]
 800e022:	9307      	str	r3, [sp, #28]
 800e024:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e028:	931a      	str	r3, [sp, #104]	; 0x68
 800e02a:	4654      	mov	r4, sl
 800e02c:	2205      	movs	r2, #5
 800e02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e032:	4854      	ldr	r0, [pc, #336]	; (800e184 <_vfiprintf_r+0x220>)
 800e034:	f7f2 f8f4 	bl	8000220 <memchr>
 800e038:	9a04      	ldr	r2, [sp, #16]
 800e03a:	b9d8      	cbnz	r0, 800e074 <_vfiprintf_r+0x110>
 800e03c:	06d1      	lsls	r1, r2, #27
 800e03e:	bf44      	itt	mi
 800e040:	2320      	movmi	r3, #32
 800e042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e046:	0713      	lsls	r3, r2, #28
 800e048:	bf44      	itt	mi
 800e04a:	232b      	movmi	r3, #43	; 0x2b
 800e04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e050:	f89a 3000 	ldrb.w	r3, [sl]
 800e054:	2b2a      	cmp	r3, #42	; 0x2a
 800e056:	d015      	beq.n	800e084 <_vfiprintf_r+0x120>
 800e058:	9a07      	ldr	r2, [sp, #28]
 800e05a:	4654      	mov	r4, sl
 800e05c:	2000      	movs	r0, #0
 800e05e:	f04f 0c0a 	mov.w	ip, #10
 800e062:	4621      	mov	r1, r4
 800e064:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e068:	3b30      	subs	r3, #48	; 0x30
 800e06a:	2b09      	cmp	r3, #9
 800e06c:	d94d      	bls.n	800e10a <_vfiprintf_r+0x1a6>
 800e06e:	b1b0      	cbz	r0, 800e09e <_vfiprintf_r+0x13a>
 800e070:	9207      	str	r2, [sp, #28]
 800e072:	e014      	b.n	800e09e <_vfiprintf_r+0x13a>
 800e074:	eba0 0308 	sub.w	r3, r0, r8
 800e078:	fa09 f303 	lsl.w	r3, r9, r3
 800e07c:	4313      	orrs	r3, r2
 800e07e:	9304      	str	r3, [sp, #16]
 800e080:	46a2      	mov	sl, r4
 800e082:	e7d2      	b.n	800e02a <_vfiprintf_r+0xc6>
 800e084:	9b03      	ldr	r3, [sp, #12]
 800e086:	1d19      	adds	r1, r3, #4
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	9103      	str	r1, [sp, #12]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	bfbb      	ittet	lt
 800e090:	425b      	neglt	r3, r3
 800e092:	f042 0202 	orrlt.w	r2, r2, #2
 800e096:	9307      	strge	r3, [sp, #28]
 800e098:	9307      	strlt	r3, [sp, #28]
 800e09a:	bfb8      	it	lt
 800e09c:	9204      	strlt	r2, [sp, #16]
 800e09e:	7823      	ldrb	r3, [r4, #0]
 800e0a0:	2b2e      	cmp	r3, #46	; 0x2e
 800e0a2:	d10c      	bne.n	800e0be <_vfiprintf_r+0x15a>
 800e0a4:	7863      	ldrb	r3, [r4, #1]
 800e0a6:	2b2a      	cmp	r3, #42	; 0x2a
 800e0a8:	d134      	bne.n	800e114 <_vfiprintf_r+0x1b0>
 800e0aa:	9b03      	ldr	r3, [sp, #12]
 800e0ac:	1d1a      	adds	r2, r3, #4
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	9203      	str	r2, [sp, #12]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	bfb8      	it	lt
 800e0b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0ba:	3402      	adds	r4, #2
 800e0bc:	9305      	str	r3, [sp, #20]
 800e0be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e194 <_vfiprintf_r+0x230>
 800e0c2:	7821      	ldrb	r1, [r4, #0]
 800e0c4:	2203      	movs	r2, #3
 800e0c6:	4650      	mov	r0, sl
 800e0c8:	f7f2 f8aa 	bl	8000220 <memchr>
 800e0cc:	b138      	cbz	r0, 800e0de <_vfiprintf_r+0x17a>
 800e0ce:	9b04      	ldr	r3, [sp, #16]
 800e0d0:	eba0 000a 	sub.w	r0, r0, sl
 800e0d4:	2240      	movs	r2, #64	; 0x40
 800e0d6:	4082      	lsls	r2, r0
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	3401      	adds	r4, #1
 800e0dc:	9304      	str	r3, [sp, #16]
 800e0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0e2:	4829      	ldr	r0, [pc, #164]	; (800e188 <_vfiprintf_r+0x224>)
 800e0e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0e8:	2206      	movs	r2, #6
 800e0ea:	f7f2 f899 	bl	8000220 <memchr>
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d03f      	beq.n	800e172 <_vfiprintf_r+0x20e>
 800e0f2:	4b26      	ldr	r3, [pc, #152]	; (800e18c <_vfiprintf_r+0x228>)
 800e0f4:	bb1b      	cbnz	r3, 800e13e <_vfiprintf_r+0x1da>
 800e0f6:	9b03      	ldr	r3, [sp, #12]
 800e0f8:	3307      	adds	r3, #7
 800e0fa:	f023 0307 	bic.w	r3, r3, #7
 800e0fe:	3308      	adds	r3, #8
 800e100:	9303      	str	r3, [sp, #12]
 800e102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e104:	443b      	add	r3, r7
 800e106:	9309      	str	r3, [sp, #36]	; 0x24
 800e108:	e768      	b.n	800dfdc <_vfiprintf_r+0x78>
 800e10a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e10e:	460c      	mov	r4, r1
 800e110:	2001      	movs	r0, #1
 800e112:	e7a6      	b.n	800e062 <_vfiprintf_r+0xfe>
 800e114:	2300      	movs	r3, #0
 800e116:	3401      	adds	r4, #1
 800e118:	9305      	str	r3, [sp, #20]
 800e11a:	4619      	mov	r1, r3
 800e11c:	f04f 0c0a 	mov.w	ip, #10
 800e120:	4620      	mov	r0, r4
 800e122:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e126:	3a30      	subs	r2, #48	; 0x30
 800e128:	2a09      	cmp	r2, #9
 800e12a:	d903      	bls.n	800e134 <_vfiprintf_r+0x1d0>
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d0c6      	beq.n	800e0be <_vfiprintf_r+0x15a>
 800e130:	9105      	str	r1, [sp, #20]
 800e132:	e7c4      	b.n	800e0be <_vfiprintf_r+0x15a>
 800e134:	fb0c 2101 	mla	r1, ip, r1, r2
 800e138:	4604      	mov	r4, r0
 800e13a:	2301      	movs	r3, #1
 800e13c:	e7f0      	b.n	800e120 <_vfiprintf_r+0x1bc>
 800e13e:	ab03      	add	r3, sp, #12
 800e140:	9300      	str	r3, [sp, #0]
 800e142:	462a      	mov	r2, r5
 800e144:	4b12      	ldr	r3, [pc, #72]	; (800e190 <_vfiprintf_r+0x22c>)
 800e146:	a904      	add	r1, sp, #16
 800e148:	4630      	mov	r0, r6
 800e14a:	f7fd fb77 	bl	800b83c <_printf_float>
 800e14e:	4607      	mov	r7, r0
 800e150:	1c78      	adds	r0, r7, #1
 800e152:	d1d6      	bne.n	800e102 <_vfiprintf_r+0x19e>
 800e154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e156:	07d9      	lsls	r1, r3, #31
 800e158:	d405      	bmi.n	800e166 <_vfiprintf_r+0x202>
 800e15a:	89ab      	ldrh	r3, [r5, #12]
 800e15c:	059a      	lsls	r2, r3, #22
 800e15e:	d402      	bmi.n	800e166 <_vfiprintf_r+0x202>
 800e160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e162:	f7fe f8fd 	bl	800c360 <__retarget_lock_release_recursive>
 800e166:	89ab      	ldrh	r3, [r5, #12]
 800e168:	065b      	lsls	r3, r3, #25
 800e16a:	f53f af1d 	bmi.w	800dfa8 <_vfiprintf_r+0x44>
 800e16e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e170:	e71c      	b.n	800dfac <_vfiprintf_r+0x48>
 800e172:	ab03      	add	r3, sp, #12
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	462a      	mov	r2, r5
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <_vfiprintf_r+0x22c>)
 800e17a:	a904      	add	r1, sp, #16
 800e17c:	4630      	mov	r0, r6
 800e17e:	f7fd fe01 	bl	800bd84 <_printf_i>
 800e182:	e7e4      	b.n	800e14e <_vfiprintf_r+0x1ea>
 800e184:	0800f7f4 	.word	0x0800f7f4
 800e188:	0800f7fe 	.word	0x0800f7fe
 800e18c:	0800b83d 	.word	0x0800b83d
 800e190:	0800df41 	.word	0x0800df41
 800e194:	0800f7fa 	.word	0x0800f7fa

0800e198 <__swbuf_r>:
 800e198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19a:	460e      	mov	r6, r1
 800e19c:	4614      	mov	r4, r2
 800e19e:	4605      	mov	r5, r0
 800e1a0:	b118      	cbz	r0, 800e1aa <__swbuf_r+0x12>
 800e1a2:	6a03      	ldr	r3, [r0, #32]
 800e1a4:	b90b      	cbnz	r3, 800e1aa <__swbuf_r+0x12>
 800e1a6:	f7fd ff9b 	bl	800c0e0 <__sinit>
 800e1aa:	69a3      	ldr	r3, [r4, #24]
 800e1ac:	60a3      	str	r3, [r4, #8]
 800e1ae:	89a3      	ldrh	r3, [r4, #12]
 800e1b0:	071a      	lsls	r2, r3, #28
 800e1b2:	d525      	bpl.n	800e200 <__swbuf_r+0x68>
 800e1b4:	6923      	ldr	r3, [r4, #16]
 800e1b6:	b31b      	cbz	r3, 800e200 <__swbuf_r+0x68>
 800e1b8:	6823      	ldr	r3, [r4, #0]
 800e1ba:	6922      	ldr	r2, [r4, #16]
 800e1bc:	1a98      	subs	r0, r3, r2
 800e1be:	6963      	ldr	r3, [r4, #20]
 800e1c0:	b2f6      	uxtb	r6, r6
 800e1c2:	4283      	cmp	r3, r0
 800e1c4:	4637      	mov	r7, r6
 800e1c6:	dc04      	bgt.n	800e1d2 <__swbuf_r+0x3a>
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f7ff fdac 	bl	800dd28 <_fflush_r>
 800e1d0:	b9e0      	cbnz	r0, 800e20c <__swbuf_r+0x74>
 800e1d2:	68a3      	ldr	r3, [r4, #8]
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	60a3      	str	r3, [r4, #8]
 800e1d8:	6823      	ldr	r3, [r4, #0]
 800e1da:	1c5a      	adds	r2, r3, #1
 800e1dc:	6022      	str	r2, [r4, #0]
 800e1de:	701e      	strb	r6, [r3, #0]
 800e1e0:	6962      	ldr	r2, [r4, #20]
 800e1e2:	1c43      	adds	r3, r0, #1
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d004      	beq.n	800e1f2 <__swbuf_r+0x5a>
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	07db      	lsls	r3, r3, #31
 800e1ec:	d506      	bpl.n	800e1fc <__swbuf_r+0x64>
 800e1ee:	2e0a      	cmp	r6, #10
 800e1f0:	d104      	bne.n	800e1fc <__swbuf_r+0x64>
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	4628      	mov	r0, r5
 800e1f6:	f7ff fd97 	bl	800dd28 <_fflush_r>
 800e1fa:	b938      	cbnz	r0, 800e20c <__swbuf_r+0x74>
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e200:	4621      	mov	r1, r4
 800e202:	4628      	mov	r0, r5
 800e204:	f000 f806 	bl	800e214 <__swsetup_r>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d0d5      	beq.n	800e1b8 <__swbuf_r+0x20>
 800e20c:	f04f 37ff 	mov.w	r7, #4294967295
 800e210:	e7f4      	b.n	800e1fc <__swbuf_r+0x64>
	...

0800e214 <__swsetup_r>:
 800e214:	b538      	push	{r3, r4, r5, lr}
 800e216:	4b2a      	ldr	r3, [pc, #168]	; (800e2c0 <__swsetup_r+0xac>)
 800e218:	4605      	mov	r5, r0
 800e21a:	6818      	ldr	r0, [r3, #0]
 800e21c:	460c      	mov	r4, r1
 800e21e:	b118      	cbz	r0, 800e228 <__swsetup_r+0x14>
 800e220:	6a03      	ldr	r3, [r0, #32]
 800e222:	b90b      	cbnz	r3, 800e228 <__swsetup_r+0x14>
 800e224:	f7fd ff5c 	bl	800c0e0 <__sinit>
 800e228:	89a3      	ldrh	r3, [r4, #12]
 800e22a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e22e:	0718      	lsls	r0, r3, #28
 800e230:	d422      	bmi.n	800e278 <__swsetup_r+0x64>
 800e232:	06d9      	lsls	r1, r3, #27
 800e234:	d407      	bmi.n	800e246 <__swsetup_r+0x32>
 800e236:	2309      	movs	r3, #9
 800e238:	602b      	str	r3, [r5, #0]
 800e23a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e23e:	81a3      	strh	r3, [r4, #12]
 800e240:	f04f 30ff 	mov.w	r0, #4294967295
 800e244:	e034      	b.n	800e2b0 <__swsetup_r+0x9c>
 800e246:	0758      	lsls	r0, r3, #29
 800e248:	d512      	bpl.n	800e270 <__swsetup_r+0x5c>
 800e24a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e24c:	b141      	cbz	r1, 800e260 <__swsetup_r+0x4c>
 800e24e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e252:	4299      	cmp	r1, r3
 800e254:	d002      	beq.n	800e25c <__swsetup_r+0x48>
 800e256:	4628      	mov	r0, r5
 800e258:	f7fe ff0c 	bl	800d074 <_free_r>
 800e25c:	2300      	movs	r3, #0
 800e25e:	6363      	str	r3, [r4, #52]	; 0x34
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e266:	81a3      	strh	r3, [r4, #12]
 800e268:	2300      	movs	r3, #0
 800e26a:	6063      	str	r3, [r4, #4]
 800e26c:	6923      	ldr	r3, [r4, #16]
 800e26e:	6023      	str	r3, [r4, #0]
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	f043 0308 	orr.w	r3, r3, #8
 800e276:	81a3      	strh	r3, [r4, #12]
 800e278:	6923      	ldr	r3, [r4, #16]
 800e27a:	b94b      	cbnz	r3, 800e290 <__swsetup_r+0x7c>
 800e27c:	89a3      	ldrh	r3, [r4, #12]
 800e27e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e286:	d003      	beq.n	800e290 <__swsetup_r+0x7c>
 800e288:	4621      	mov	r1, r4
 800e28a:	4628      	mov	r0, r5
 800e28c:	f000 f884 	bl	800e398 <__smakebuf_r>
 800e290:	89a0      	ldrh	r0, [r4, #12]
 800e292:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e296:	f010 0301 	ands.w	r3, r0, #1
 800e29a:	d00a      	beq.n	800e2b2 <__swsetup_r+0x9e>
 800e29c:	2300      	movs	r3, #0
 800e29e:	60a3      	str	r3, [r4, #8]
 800e2a0:	6963      	ldr	r3, [r4, #20]
 800e2a2:	425b      	negs	r3, r3
 800e2a4:	61a3      	str	r3, [r4, #24]
 800e2a6:	6923      	ldr	r3, [r4, #16]
 800e2a8:	b943      	cbnz	r3, 800e2bc <__swsetup_r+0xa8>
 800e2aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2ae:	d1c4      	bne.n	800e23a <__swsetup_r+0x26>
 800e2b0:	bd38      	pop	{r3, r4, r5, pc}
 800e2b2:	0781      	lsls	r1, r0, #30
 800e2b4:	bf58      	it	pl
 800e2b6:	6963      	ldrpl	r3, [r4, #20]
 800e2b8:	60a3      	str	r3, [r4, #8]
 800e2ba:	e7f4      	b.n	800e2a6 <__swsetup_r+0x92>
 800e2bc:	2000      	movs	r0, #0
 800e2be:	e7f7      	b.n	800e2b0 <__swsetup_r+0x9c>
 800e2c0:	200005fc 	.word	0x200005fc

0800e2c4 <_raise_r>:
 800e2c4:	291f      	cmp	r1, #31
 800e2c6:	b538      	push	{r3, r4, r5, lr}
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	460d      	mov	r5, r1
 800e2cc:	d904      	bls.n	800e2d8 <_raise_r+0x14>
 800e2ce:	2316      	movs	r3, #22
 800e2d0:	6003      	str	r3, [r0, #0]
 800e2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e2da:	b112      	cbz	r2, 800e2e2 <_raise_r+0x1e>
 800e2dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2e0:	b94b      	cbnz	r3, 800e2f6 <_raise_r+0x32>
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f000 f830 	bl	800e348 <_getpid_r>
 800e2e8:	462a      	mov	r2, r5
 800e2ea:	4601      	mov	r1, r0
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2f2:	f000 b817 	b.w	800e324 <_kill_r>
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d00a      	beq.n	800e310 <_raise_r+0x4c>
 800e2fa:	1c59      	adds	r1, r3, #1
 800e2fc:	d103      	bne.n	800e306 <_raise_r+0x42>
 800e2fe:	2316      	movs	r3, #22
 800e300:	6003      	str	r3, [r0, #0]
 800e302:	2001      	movs	r0, #1
 800e304:	e7e7      	b.n	800e2d6 <_raise_r+0x12>
 800e306:	2400      	movs	r4, #0
 800e308:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e30c:	4628      	mov	r0, r5
 800e30e:	4798      	blx	r3
 800e310:	2000      	movs	r0, #0
 800e312:	e7e0      	b.n	800e2d6 <_raise_r+0x12>

0800e314 <raise>:
 800e314:	4b02      	ldr	r3, [pc, #8]	; (800e320 <raise+0xc>)
 800e316:	4601      	mov	r1, r0
 800e318:	6818      	ldr	r0, [r3, #0]
 800e31a:	f7ff bfd3 	b.w	800e2c4 <_raise_r>
 800e31e:	bf00      	nop
 800e320:	200005fc 	.word	0x200005fc

0800e324 <_kill_r>:
 800e324:	b538      	push	{r3, r4, r5, lr}
 800e326:	4d07      	ldr	r5, [pc, #28]	; (800e344 <_kill_r+0x20>)
 800e328:	2300      	movs	r3, #0
 800e32a:	4604      	mov	r4, r0
 800e32c:	4608      	mov	r0, r1
 800e32e:	4611      	mov	r1, r2
 800e330:	602b      	str	r3, [r5, #0]
 800e332:	f7f7 fb0c 	bl	800594e <_kill>
 800e336:	1c43      	adds	r3, r0, #1
 800e338:	d102      	bne.n	800e340 <_kill_r+0x1c>
 800e33a:	682b      	ldr	r3, [r5, #0]
 800e33c:	b103      	cbz	r3, 800e340 <_kill_r+0x1c>
 800e33e:	6023      	str	r3, [r4, #0]
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	bf00      	nop
 800e344:	20001dc8 	.word	0x20001dc8

0800e348 <_getpid_r>:
 800e348:	f7f7 baff 	b.w	800594a <_getpid>

0800e34c <__swhatbuf_r>:
 800e34c:	b570      	push	{r4, r5, r6, lr}
 800e34e:	460c      	mov	r4, r1
 800e350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e354:	2900      	cmp	r1, #0
 800e356:	b096      	sub	sp, #88	; 0x58
 800e358:	4615      	mov	r5, r2
 800e35a:	461e      	mov	r6, r3
 800e35c:	da0d      	bge.n	800e37a <__swhatbuf_r+0x2e>
 800e35e:	89a3      	ldrh	r3, [r4, #12]
 800e360:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e364:	f04f 0100 	mov.w	r1, #0
 800e368:	bf0c      	ite	eq
 800e36a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e36e:	2340      	movne	r3, #64	; 0x40
 800e370:	2000      	movs	r0, #0
 800e372:	6031      	str	r1, [r6, #0]
 800e374:	602b      	str	r3, [r5, #0]
 800e376:	b016      	add	sp, #88	; 0x58
 800e378:	bd70      	pop	{r4, r5, r6, pc}
 800e37a:	466a      	mov	r2, sp
 800e37c:	f000 f848 	bl	800e410 <_fstat_r>
 800e380:	2800      	cmp	r0, #0
 800e382:	dbec      	blt.n	800e35e <__swhatbuf_r+0x12>
 800e384:	9901      	ldr	r1, [sp, #4]
 800e386:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e38a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e38e:	4259      	negs	r1, r3
 800e390:	4159      	adcs	r1, r3
 800e392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e396:	e7eb      	b.n	800e370 <__swhatbuf_r+0x24>

0800e398 <__smakebuf_r>:
 800e398:	898b      	ldrh	r3, [r1, #12]
 800e39a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e39c:	079d      	lsls	r5, r3, #30
 800e39e:	4606      	mov	r6, r0
 800e3a0:	460c      	mov	r4, r1
 800e3a2:	d507      	bpl.n	800e3b4 <__smakebuf_r+0x1c>
 800e3a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3a8:	6023      	str	r3, [r4, #0]
 800e3aa:	6123      	str	r3, [r4, #16]
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	6163      	str	r3, [r4, #20]
 800e3b0:	b002      	add	sp, #8
 800e3b2:	bd70      	pop	{r4, r5, r6, pc}
 800e3b4:	ab01      	add	r3, sp, #4
 800e3b6:	466a      	mov	r2, sp
 800e3b8:	f7ff ffc8 	bl	800e34c <__swhatbuf_r>
 800e3bc:	9900      	ldr	r1, [sp, #0]
 800e3be:	4605      	mov	r5, r0
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f7fe fecb 	bl	800d15c <_malloc_r>
 800e3c6:	b948      	cbnz	r0, 800e3dc <__smakebuf_r+0x44>
 800e3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3cc:	059a      	lsls	r2, r3, #22
 800e3ce:	d4ef      	bmi.n	800e3b0 <__smakebuf_r+0x18>
 800e3d0:	f023 0303 	bic.w	r3, r3, #3
 800e3d4:	f043 0302 	orr.w	r3, r3, #2
 800e3d8:	81a3      	strh	r3, [r4, #12]
 800e3da:	e7e3      	b.n	800e3a4 <__smakebuf_r+0xc>
 800e3dc:	89a3      	ldrh	r3, [r4, #12]
 800e3de:	6020      	str	r0, [r4, #0]
 800e3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3e4:	81a3      	strh	r3, [r4, #12]
 800e3e6:	9b00      	ldr	r3, [sp, #0]
 800e3e8:	6163      	str	r3, [r4, #20]
 800e3ea:	9b01      	ldr	r3, [sp, #4]
 800e3ec:	6120      	str	r0, [r4, #16]
 800e3ee:	b15b      	cbz	r3, 800e408 <__smakebuf_r+0x70>
 800e3f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	f000 f81d 	bl	800e434 <_isatty_r>
 800e3fa:	b128      	cbz	r0, 800e408 <__smakebuf_r+0x70>
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	f023 0303 	bic.w	r3, r3, #3
 800e402:	f043 0301 	orr.w	r3, r3, #1
 800e406:	81a3      	strh	r3, [r4, #12]
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	431d      	orrs	r5, r3
 800e40c:	81a5      	strh	r5, [r4, #12]
 800e40e:	e7cf      	b.n	800e3b0 <__smakebuf_r+0x18>

0800e410 <_fstat_r>:
 800e410:	b538      	push	{r3, r4, r5, lr}
 800e412:	4d07      	ldr	r5, [pc, #28]	; (800e430 <_fstat_r+0x20>)
 800e414:	2300      	movs	r3, #0
 800e416:	4604      	mov	r4, r0
 800e418:	4608      	mov	r0, r1
 800e41a:	4611      	mov	r1, r2
 800e41c:	602b      	str	r3, [r5, #0]
 800e41e:	f7f7 fac1 	bl	80059a4 <_fstat>
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	d102      	bne.n	800e42c <_fstat_r+0x1c>
 800e426:	682b      	ldr	r3, [r5, #0]
 800e428:	b103      	cbz	r3, 800e42c <_fstat_r+0x1c>
 800e42a:	6023      	str	r3, [r4, #0]
 800e42c:	bd38      	pop	{r3, r4, r5, pc}
 800e42e:	bf00      	nop
 800e430:	20001dc8 	.word	0x20001dc8

0800e434 <_isatty_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	4d06      	ldr	r5, [pc, #24]	; (800e450 <_isatty_r+0x1c>)
 800e438:	2300      	movs	r3, #0
 800e43a:	4604      	mov	r4, r0
 800e43c:	4608      	mov	r0, r1
 800e43e:	602b      	str	r3, [r5, #0]
 800e440:	f7f7 fab5 	bl	80059ae <_isatty>
 800e444:	1c43      	adds	r3, r0, #1
 800e446:	d102      	bne.n	800e44e <_isatty_r+0x1a>
 800e448:	682b      	ldr	r3, [r5, #0]
 800e44a:	b103      	cbz	r3, 800e44e <_isatty_r+0x1a>
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	bd38      	pop	{r3, r4, r5, pc}
 800e450:	20001dc8 	.word	0x20001dc8

0800e454 <fmod>:
 800e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e456:	ed2d 8b02 	vpush	{d8}
 800e45a:	ec57 6b10 	vmov	r6, r7, d0
 800e45e:	ec55 4b11 	vmov	r4, r5, d1
 800e462:	f000 f9b5 	bl	800e7d0 <__ieee754_fmod>
 800e466:	4622      	mov	r2, r4
 800e468:	462b      	mov	r3, r5
 800e46a:	4630      	mov	r0, r6
 800e46c:	4639      	mov	r1, r7
 800e46e:	eeb0 8a40 	vmov.f32	s16, s0
 800e472:	eef0 8a60 	vmov.f32	s17, s1
 800e476:	f7f2 fb81 	bl	8000b7c <__aeabi_dcmpun>
 800e47a:	b990      	cbnz	r0, 800e4a2 <fmod+0x4e>
 800e47c:	2200      	movs	r2, #0
 800e47e:	2300      	movs	r3, #0
 800e480:	4620      	mov	r0, r4
 800e482:	4629      	mov	r1, r5
 800e484:	f7f2 fb48 	bl	8000b18 <__aeabi_dcmpeq>
 800e488:	b158      	cbz	r0, 800e4a2 <fmod+0x4e>
 800e48a:	f7fd ff3d 	bl	800c308 <__errno>
 800e48e:	2321      	movs	r3, #33	; 0x21
 800e490:	6003      	str	r3, [r0, #0]
 800e492:	2200      	movs	r2, #0
 800e494:	2300      	movs	r3, #0
 800e496:	4610      	mov	r0, r2
 800e498:	4619      	mov	r1, r3
 800e49a:	f7f2 f9ff 	bl	800089c <__aeabi_ddiv>
 800e49e:	ec41 0b18 	vmov	d8, r0, r1
 800e4a2:	eeb0 0a48 	vmov.f32	s0, s16
 800e4a6:	eef0 0a68 	vmov.f32	s1, s17
 800e4aa:	ecbd 8b02 	vpop	{d8}
 800e4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e4b0 <sqrt>:
 800e4b0:	b538      	push	{r3, r4, r5, lr}
 800e4b2:	ed2d 8b02 	vpush	{d8}
 800e4b6:	ec55 4b10 	vmov	r4, r5, d0
 800e4ba:	f000 f8af 	bl	800e61c <__ieee754_sqrt>
 800e4be:	4622      	mov	r2, r4
 800e4c0:	462b      	mov	r3, r5
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	4629      	mov	r1, r5
 800e4c6:	eeb0 8a40 	vmov.f32	s16, s0
 800e4ca:	eef0 8a60 	vmov.f32	s17, s1
 800e4ce:	f7f2 fb55 	bl	8000b7c <__aeabi_dcmpun>
 800e4d2:	b990      	cbnz	r0, 800e4fa <sqrt+0x4a>
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	4620      	mov	r0, r4
 800e4da:	4629      	mov	r1, r5
 800e4dc:	f7f2 fb26 	bl	8000b2c <__aeabi_dcmplt>
 800e4e0:	b158      	cbz	r0, 800e4fa <sqrt+0x4a>
 800e4e2:	f7fd ff11 	bl	800c308 <__errno>
 800e4e6:	2321      	movs	r3, #33	; 0x21
 800e4e8:	6003      	str	r3, [r0, #0]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	f7f2 f9d3 	bl	800089c <__aeabi_ddiv>
 800e4f6:	ec41 0b18 	vmov	d8, r0, r1
 800e4fa:	eeb0 0a48 	vmov.f32	s0, s16
 800e4fe:	eef0 0a68 	vmov.f32	s1, s17
 800e502:	ecbd 8b02 	vpop	{d8}
 800e506:	bd38      	pop	{r3, r4, r5, pc}

0800e508 <cosf>:
 800e508:	ee10 3a10 	vmov	r3, s0
 800e50c:	b507      	push	{r0, r1, r2, lr}
 800e50e:	4a1e      	ldr	r2, [pc, #120]	; (800e588 <cosf+0x80>)
 800e510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e514:	4293      	cmp	r3, r2
 800e516:	dc06      	bgt.n	800e526 <cosf+0x1e>
 800e518:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800e58c <cosf+0x84>
 800e51c:	b003      	add	sp, #12
 800e51e:	f85d eb04 	ldr.w	lr, [sp], #4
 800e522:	f000 ba63 	b.w	800e9ec <__kernel_cosf>
 800e526:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e52a:	db04      	blt.n	800e536 <cosf+0x2e>
 800e52c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e530:	b003      	add	sp, #12
 800e532:	f85d fb04 	ldr.w	pc, [sp], #4
 800e536:	4668      	mov	r0, sp
 800e538:	f000 fafe 	bl	800eb38 <__ieee754_rem_pio2f>
 800e53c:	f000 0003 	and.w	r0, r0, #3
 800e540:	2801      	cmp	r0, #1
 800e542:	d009      	beq.n	800e558 <cosf+0x50>
 800e544:	2802      	cmp	r0, #2
 800e546:	d010      	beq.n	800e56a <cosf+0x62>
 800e548:	b9b0      	cbnz	r0, 800e578 <cosf+0x70>
 800e54a:	eddd 0a01 	vldr	s1, [sp, #4]
 800e54e:	ed9d 0a00 	vldr	s0, [sp]
 800e552:	f000 fa4b 	bl	800e9ec <__kernel_cosf>
 800e556:	e7eb      	b.n	800e530 <cosf+0x28>
 800e558:	eddd 0a01 	vldr	s1, [sp, #4]
 800e55c:	ed9d 0a00 	vldr	s0, [sp]
 800e560:	f000 faa2 	bl	800eaa8 <__kernel_sinf>
 800e564:	eeb1 0a40 	vneg.f32	s0, s0
 800e568:	e7e2      	b.n	800e530 <cosf+0x28>
 800e56a:	eddd 0a01 	vldr	s1, [sp, #4]
 800e56e:	ed9d 0a00 	vldr	s0, [sp]
 800e572:	f000 fa3b 	bl	800e9ec <__kernel_cosf>
 800e576:	e7f5      	b.n	800e564 <cosf+0x5c>
 800e578:	eddd 0a01 	vldr	s1, [sp, #4]
 800e57c:	ed9d 0a00 	vldr	s0, [sp]
 800e580:	2001      	movs	r0, #1
 800e582:	f000 fa91 	bl	800eaa8 <__kernel_sinf>
 800e586:	e7d3      	b.n	800e530 <cosf+0x28>
 800e588:	3f490fd8 	.word	0x3f490fd8
 800e58c:	00000000 	.word	0x00000000

0800e590 <sinf>:
 800e590:	ee10 3a10 	vmov	r3, s0
 800e594:	b507      	push	{r0, r1, r2, lr}
 800e596:	4a1f      	ldr	r2, [pc, #124]	; (800e614 <sinf+0x84>)
 800e598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e59c:	4293      	cmp	r3, r2
 800e59e:	dc07      	bgt.n	800e5b0 <sinf+0x20>
 800e5a0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800e618 <sinf+0x88>
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	b003      	add	sp, #12
 800e5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5ac:	f000 ba7c 	b.w	800eaa8 <__kernel_sinf>
 800e5b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e5b4:	db04      	blt.n	800e5c0 <sinf+0x30>
 800e5b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e5ba:	b003      	add	sp, #12
 800e5bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5c0:	4668      	mov	r0, sp
 800e5c2:	f000 fab9 	bl	800eb38 <__ieee754_rem_pio2f>
 800e5c6:	f000 0003 	and.w	r0, r0, #3
 800e5ca:	2801      	cmp	r0, #1
 800e5cc:	d00a      	beq.n	800e5e4 <sinf+0x54>
 800e5ce:	2802      	cmp	r0, #2
 800e5d0:	d00f      	beq.n	800e5f2 <sinf+0x62>
 800e5d2:	b9c0      	cbnz	r0, 800e606 <sinf+0x76>
 800e5d4:	eddd 0a01 	vldr	s1, [sp, #4]
 800e5d8:	ed9d 0a00 	vldr	s0, [sp]
 800e5dc:	2001      	movs	r0, #1
 800e5de:	f000 fa63 	bl	800eaa8 <__kernel_sinf>
 800e5e2:	e7ea      	b.n	800e5ba <sinf+0x2a>
 800e5e4:	eddd 0a01 	vldr	s1, [sp, #4]
 800e5e8:	ed9d 0a00 	vldr	s0, [sp]
 800e5ec:	f000 f9fe 	bl	800e9ec <__kernel_cosf>
 800e5f0:	e7e3      	b.n	800e5ba <sinf+0x2a>
 800e5f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800e5f6:	ed9d 0a00 	vldr	s0, [sp]
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	f000 fa54 	bl	800eaa8 <__kernel_sinf>
 800e600:	eeb1 0a40 	vneg.f32	s0, s0
 800e604:	e7d9      	b.n	800e5ba <sinf+0x2a>
 800e606:	eddd 0a01 	vldr	s1, [sp, #4]
 800e60a:	ed9d 0a00 	vldr	s0, [sp]
 800e60e:	f000 f9ed 	bl	800e9ec <__kernel_cosf>
 800e612:	e7f5      	b.n	800e600 <sinf+0x70>
 800e614:	3f490fd8 	.word	0x3f490fd8
 800e618:	00000000 	.word	0x00000000

0800e61c <__ieee754_sqrt>:
 800e61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	ec55 4b10 	vmov	r4, r5, d0
 800e624:	4e67      	ldr	r6, [pc, #412]	; (800e7c4 <__ieee754_sqrt+0x1a8>)
 800e626:	43ae      	bics	r6, r5
 800e628:	ee10 0a10 	vmov	r0, s0
 800e62c:	ee10 2a10 	vmov	r2, s0
 800e630:	4629      	mov	r1, r5
 800e632:	462b      	mov	r3, r5
 800e634:	d10d      	bne.n	800e652 <__ieee754_sqrt+0x36>
 800e636:	f7f2 f807 	bl	8000648 <__aeabi_dmul>
 800e63a:	4602      	mov	r2, r0
 800e63c:	460b      	mov	r3, r1
 800e63e:	4620      	mov	r0, r4
 800e640:	4629      	mov	r1, r5
 800e642:	f7f1 fe4b 	bl	80002dc <__adddf3>
 800e646:	4604      	mov	r4, r0
 800e648:	460d      	mov	r5, r1
 800e64a:	ec45 4b10 	vmov	d0, r4, r5
 800e64e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e652:	2d00      	cmp	r5, #0
 800e654:	dc0b      	bgt.n	800e66e <__ieee754_sqrt+0x52>
 800e656:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e65a:	4326      	orrs	r6, r4
 800e65c:	d0f5      	beq.n	800e64a <__ieee754_sqrt+0x2e>
 800e65e:	b135      	cbz	r5, 800e66e <__ieee754_sqrt+0x52>
 800e660:	f7f1 fe3a 	bl	80002d8 <__aeabi_dsub>
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	f7f2 f918 	bl	800089c <__aeabi_ddiv>
 800e66c:	e7eb      	b.n	800e646 <__ieee754_sqrt+0x2a>
 800e66e:	1509      	asrs	r1, r1, #20
 800e670:	f000 808d 	beq.w	800e78e <__ieee754_sqrt+0x172>
 800e674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e678:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e67c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e680:	07c9      	lsls	r1, r1, #31
 800e682:	bf5c      	itt	pl
 800e684:	005b      	lslpl	r3, r3, #1
 800e686:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e68a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e68e:	bf58      	it	pl
 800e690:	0052      	lslpl	r2, r2, #1
 800e692:	2500      	movs	r5, #0
 800e694:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e698:	1076      	asrs	r6, r6, #1
 800e69a:	0052      	lsls	r2, r2, #1
 800e69c:	f04f 0e16 	mov.w	lr, #22
 800e6a0:	46ac      	mov	ip, r5
 800e6a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e6a6:	eb0c 0001 	add.w	r0, ip, r1
 800e6aa:	4298      	cmp	r0, r3
 800e6ac:	bfde      	ittt	le
 800e6ae:	1a1b      	suble	r3, r3, r0
 800e6b0:	eb00 0c01 	addle.w	ip, r0, r1
 800e6b4:	186d      	addle	r5, r5, r1
 800e6b6:	005b      	lsls	r3, r3, #1
 800e6b8:	f1be 0e01 	subs.w	lr, lr, #1
 800e6bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e6c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e6c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e6c8:	d1ed      	bne.n	800e6a6 <__ieee754_sqrt+0x8a>
 800e6ca:	4674      	mov	r4, lr
 800e6cc:	2720      	movs	r7, #32
 800e6ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e6d2:	4563      	cmp	r3, ip
 800e6d4:	eb01 000e 	add.w	r0, r1, lr
 800e6d8:	dc02      	bgt.n	800e6e0 <__ieee754_sqrt+0xc4>
 800e6da:	d113      	bne.n	800e704 <__ieee754_sqrt+0xe8>
 800e6dc:	4290      	cmp	r0, r2
 800e6de:	d811      	bhi.n	800e704 <__ieee754_sqrt+0xe8>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	eb00 0e01 	add.w	lr, r0, r1
 800e6e6:	da57      	bge.n	800e798 <__ieee754_sqrt+0x17c>
 800e6e8:	f1be 0f00 	cmp.w	lr, #0
 800e6ec:	db54      	blt.n	800e798 <__ieee754_sqrt+0x17c>
 800e6ee:	f10c 0801 	add.w	r8, ip, #1
 800e6f2:	eba3 030c 	sub.w	r3, r3, ip
 800e6f6:	4290      	cmp	r0, r2
 800e6f8:	bf88      	it	hi
 800e6fa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e6fe:	1a12      	subs	r2, r2, r0
 800e700:	440c      	add	r4, r1
 800e702:	46c4      	mov	ip, r8
 800e704:	005b      	lsls	r3, r3, #1
 800e706:	3f01      	subs	r7, #1
 800e708:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e70c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e710:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e714:	d1dd      	bne.n	800e6d2 <__ieee754_sqrt+0xb6>
 800e716:	4313      	orrs	r3, r2
 800e718:	d01b      	beq.n	800e752 <__ieee754_sqrt+0x136>
 800e71a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e7c8 <__ieee754_sqrt+0x1ac>
 800e71e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e7cc <__ieee754_sqrt+0x1b0>
 800e722:	e9da 0100 	ldrd	r0, r1, [sl]
 800e726:	e9db 2300 	ldrd	r2, r3, [fp]
 800e72a:	f7f1 fdd5 	bl	80002d8 <__aeabi_dsub>
 800e72e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4640      	mov	r0, r8
 800e738:	4649      	mov	r1, r9
 800e73a:	f7f2 fa01 	bl	8000b40 <__aeabi_dcmple>
 800e73e:	b140      	cbz	r0, 800e752 <__ieee754_sqrt+0x136>
 800e740:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e744:	e9da 0100 	ldrd	r0, r1, [sl]
 800e748:	e9db 2300 	ldrd	r2, r3, [fp]
 800e74c:	d126      	bne.n	800e79c <__ieee754_sqrt+0x180>
 800e74e:	3501      	adds	r5, #1
 800e750:	463c      	mov	r4, r7
 800e752:	106a      	asrs	r2, r5, #1
 800e754:	0863      	lsrs	r3, r4, #1
 800e756:	07e9      	lsls	r1, r5, #31
 800e758:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e75c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e760:	bf48      	it	mi
 800e762:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e766:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e76a:	461c      	mov	r4, r3
 800e76c:	e76d      	b.n	800e64a <__ieee754_sqrt+0x2e>
 800e76e:	0ad3      	lsrs	r3, r2, #11
 800e770:	3815      	subs	r0, #21
 800e772:	0552      	lsls	r2, r2, #21
 800e774:	2b00      	cmp	r3, #0
 800e776:	d0fa      	beq.n	800e76e <__ieee754_sqrt+0x152>
 800e778:	02dc      	lsls	r4, r3, #11
 800e77a:	d50a      	bpl.n	800e792 <__ieee754_sqrt+0x176>
 800e77c:	f1c1 0420 	rsb	r4, r1, #32
 800e780:	fa22 f404 	lsr.w	r4, r2, r4
 800e784:	1e4d      	subs	r5, r1, #1
 800e786:	408a      	lsls	r2, r1
 800e788:	4323      	orrs	r3, r4
 800e78a:	1b41      	subs	r1, r0, r5
 800e78c:	e772      	b.n	800e674 <__ieee754_sqrt+0x58>
 800e78e:	4608      	mov	r0, r1
 800e790:	e7f0      	b.n	800e774 <__ieee754_sqrt+0x158>
 800e792:	005b      	lsls	r3, r3, #1
 800e794:	3101      	adds	r1, #1
 800e796:	e7ef      	b.n	800e778 <__ieee754_sqrt+0x15c>
 800e798:	46e0      	mov	r8, ip
 800e79a:	e7aa      	b.n	800e6f2 <__ieee754_sqrt+0xd6>
 800e79c:	f7f1 fd9e 	bl	80002dc <__adddf3>
 800e7a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	4640      	mov	r0, r8
 800e7aa:	4649      	mov	r1, r9
 800e7ac:	f7f2 f9be 	bl	8000b2c <__aeabi_dcmplt>
 800e7b0:	b120      	cbz	r0, 800e7bc <__ieee754_sqrt+0x1a0>
 800e7b2:	1ca0      	adds	r0, r4, #2
 800e7b4:	bf08      	it	eq
 800e7b6:	3501      	addeq	r5, #1
 800e7b8:	3402      	adds	r4, #2
 800e7ba:	e7ca      	b.n	800e752 <__ieee754_sqrt+0x136>
 800e7bc:	3401      	adds	r4, #1
 800e7be:	f024 0401 	bic.w	r4, r4, #1
 800e7c2:	e7c6      	b.n	800e752 <__ieee754_sqrt+0x136>
 800e7c4:	7ff00000 	.word	0x7ff00000
 800e7c8:	20000770 	.word	0x20000770
 800e7cc:	20000778 	.word	0x20000778

0800e7d0 <__ieee754_fmod>:
 800e7d0:	ec53 2b11 	vmov	r2, r3, d1
 800e7d4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800e7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7dc:	ea5c 0402 	orrs.w	r4, ip, r2
 800e7e0:	ec51 0b10 	vmov	r0, r1, d0
 800e7e4:	ee11 7a10 	vmov	r7, s2
 800e7e8:	ee11 ea10 	vmov	lr, s2
 800e7ec:	461e      	mov	r6, r3
 800e7ee:	d00c      	beq.n	800e80a <__ieee754_fmod+0x3a>
 800e7f0:	4c78      	ldr	r4, [pc, #480]	; (800e9d4 <__ieee754_fmod+0x204>)
 800e7f2:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800e7f6:	45a0      	cmp	r8, r4
 800e7f8:	4689      	mov	r9, r1
 800e7fa:	dc06      	bgt.n	800e80a <__ieee754_fmod+0x3a>
 800e7fc:	4254      	negs	r4, r2
 800e7fe:	4d76      	ldr	r5, [pc, #472]	; (800e9d8 <__ieee754_fmod+0x208>)
 800e800:	4314      	orrs	r4, r2
 800e802:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800e806:	42ac      	cmp	r4, r5
 800e808:	d909      	bls.n	800e81e <__ieee754_fmod+0x4e>
 800e80a:	f7f1 ff1d 	bl	8000648 <__aeabi_dmul>
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	f7f2 f843 	bl	800089c <__aeabi_ddiv>
 800e816:	ec41 0b10 	vmov	d0, r0, r1
 800e81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e81e:	45e0      	cmp	r8, ip
 800e820:	ee10 aa10 	vmov	sl, s0
 800e824:	ee10 4a10 	vmov	r4, s0
 800e828:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e82c:	dc09      	bgt.n	800e842 <__ieee754_fmod+0x72>
 800e82e:	dbf2      	blt.n	800e816 <__ieee754_fmod+0x46>
 800e830:	4290      	cmp	r0, r2
 800e832:	d3f0      	bcc.n	800e816 <__ieee754_fmod+0x46>
 800e834:	d105      	bne.n	800e842 <__ieee754_fmod+0x72>
 800e836:	4b69      	ldr	r3, [pc, #420]	; (800e9dc <__ieee754_fmod+0x20c>)
 800e838:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800e83c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e840:	e7e9      	b.n	800e816 <__ieee754_fmod+0x46>
 800e842:	4a65      	ldr	r2, [pc, #404]	; (800e9d8 <__ieee754_fmod+0x208>)
 800e844:	ea19 0f02 	tst.w	r9, r2
 800e848:	d148      	bne.n	800e8dc <__ieee754_fmod+0x10c>
 800e84a:	f1b8 0f00 	cmp.w	r8, #0
 800e84e:	d13d      	bne.n	800e8cc <__ieee754_fmod+0xfc>
 800e850:	4963      	ldr	r1, [pc, #396]	; (800e9e0 <__ieee754_fmod+0x210>)
 800e852:	4653      	mov	r3, sl
 800e854:	2b00      	cmp	r3, #0
 800e856:	dc36      	bgt.n	800e8c6 <__ieee754_fmod+0xf6>
 800e858:	4216      	tst	r6, r2
 800e85a:	d14f      	bne.n	800e8fc <__ieee754_fmod+0x12c>
 800e85c:	f1bc 0f00 	cmp.w	ip, #0
 800e860:	d144      	bne.n	800e8ec <__ieee754_fmod+0x11c>
 800e862:	4a5f      	ldr	r2, [pc, #380]	; (800e9e0 <__ieee754_fmod+0x210>)
 800e864:	463b      	mov	r3, r7
 800e866:	2b00      	cmp	r3, #0
 800e868:	dc3d      	bgt.n	800e8e6 <__ieee754_fmod+0x116>
 800e86a:	485e      	ldr	r0, [pc, #376]	; (800e9e4 <__ieee754_fmod+0x214>)
 800e86c:	4281      	cmp	r1, r0
 800e86e:	db4a      	blt.n	800e906 <__ieee754_fmod+0x136>
 800e870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e878:	485a      	ldr	r0, [pc, #360]	; (800e9e4 <__ieee754_fmod+0x214>)
 800e87a:	4282      	cmp	r2, r0
 800e87c:	db57      	blt.n	800e92e <__ieee754_fmod+0x15e>
 800e87e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800e882:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800e886:	1a89      	subs	r1, r1, r2
 800e888:	1b98      	subs	r0, r3, r6
 800e88a:	eba4 070e 	sub.w	r7, r4, lr
 800e88e:	2900      	cmp	r1, #0
 800e890:	d162      	bne.n	800e958 <__ieee754_fmod+0x188>
 800e892:	4574      	cmp	r4, lr
 800e894:	bf38      	it	cc
 800e896:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e89a:	2800      	cmp	r0, #0
 800e89c:	bfa4      	itt	ge
 800e89e:	463c      	movge	r4, r7
 800e8a0:	4603      	movge	r3, r0
 800e8a2:	ea53 0104 	orrs.w	r1, r3, r4
 800e8a6:	d0c6      	beq.n	800e836 <__ieee754_fmod+0x66>
 800e8a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8ac:	db69      	blt.n	800e982 <__ieee754_fmod+0x1b2>
 800e8ae:	494d      	ldr	r1, [pc, #308]	; (800e9e4 <__ieee754_fmod+0x214>)
 800e8b0:	428a      	cmp	r2, r1
 800e8b2:	db6c      	blt.n	800e98e <__ieee754_fmod+0x1be>
 800e8b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e8b8:	432b      	orrs	r3, r5
 800e8ba:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800e8be:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	e7a7      	b.n	800e816 <__ieee754_fmod+0x46>
 800e8c6:	3901      	subs	r1, #1
 800e8c8:	005b      	lsls	r3, r3, #1
 800e8ca:	e7c3      	b.n	800e854 <__ieee754_fmod+0x84>
 800e8cc:	4945      	ldr	r1, [pc, #276]	; (800e9e4 <__ieee754_fmod+0x214>)
 800e8ce:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	ddc0      	ble.n	800e858 <__ieee754_fmod+0x88>
 800e8d6:	3901      	subs	r1, #1
 800e8d8:	005b      	lsls	r3, r3, #1
 800e8da:	e7fa      	b.n	800e8d2 <__ieee754_fmod+0x102>
 800e8dc:	ea4f 5128 	mov.w	r1, r8, asr #20
 800e8e0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e8e4:	e7b8      	b.n	800e858 <__ieee754_fmod+0x88>
 800e8e6:	3a01      	subs	r2, #1
 800e8e8:	005b      	lsls	r3, r3, #1
 800e8ea:	e7bc      	b.n	800e866 <__ieee754_fmod+0x96>
 800e8ec:	4a3d      	ldr	r2, [pc, #244]	; (800e9e4 <__ieee754_fmod+0x214>)
 800e8ee:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	ddb9      	ble.n	800e86a <__ieee754_fmod+0x9a>
 800e8f6:	3a01      	subs	r2, #1
 800e8f8:	005b      	lsls	r3, r3, #1
 800e8fa:	e7fa      	b.n	800e8f2 <__ieee754_fmod+0x122>
 800e8fc:	ea4f 522c 	mov.w	r2, ip, asr #20
 800e900:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e904:	e7b1      	b.n	800e86a <__ieee754_fmod+0x9a>
 800e906:	1a40      	subs	r0, r0, r1
 800e908:	281f      	cmp	r0, #31
 800e90a:	dc0a      	bgt.n	800e922 <__ieee754_fmod+0x152>
 800e90c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800e910:	fa08 f800 	lsl.w	r8, r8, r0
 800e914:	fa2a f303 	lsr.w	r3, sl, r3
 800e918:	ea43 0308 	orr.w	r3, r3, r8
 800e91c:	fa0a f400 	lsl.w	r4, sl, r0
 800e920:	e7aa      	b.n	800e878 <__ieee754_fmod+0xa8>
 800e922:	4b31      	ldr	r3, [pc, #196]	; (800e9e8 <__ieee754_fmod+0x218>)
 800e924:	1a5b      	subs	r3, r3, r1
 800e926:	fa0a f303 	lsl.w	r3, sl, r3
 800e92a:	2400      	movs	r4, #0
 800e92c:	e7a4      	b.n	800e878 <__ieee754_fmod+0xa8>
 800e92e:	1a80      	subs	r0, r0, r2
 800e930:	281f      	cmp	r0, #31
 800e932:	dc0a      	bgt.n	800e94a <__ieee754_fmod+0x17a>
 800e934:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800e938:	fa0c fc00 	lsl.w	ip, ip, r0
 800e93c:	fa27 f606 	lsr.w	r6, r7, r6
 800e940:	ea46 060c 	orr.w	r6, r6, ip
 800e944:	fa07 fe00 	lsl.w	lr, r7, r0
 800e948:	e79d      	b.n	800e886 <__ieee754_fmod+0xb6>
 800e94a:	4e27      	ldr	r6, [pc, #156]	; (800e9e8 <__ieee754_fmod+0x218>)
 800e94c:	1ab6      	subs	r6, r6, r2
 800e94e:	fa07 f606 	lsl.w	r6, r7, r6
 800e952:	f04f 0e00 	mov.w	lr, #0
 800e956:	e796      	b.n	800e886 <__ieee754_fmod+0xb6>
 800e958:	4574      	cmp	r4, lr
 800e95a:	bf38      	it	cc
 800e95c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e960:	2800      	cmp	r0, #0
 800e962:	da05      	bge.n	800e970 <__ieee754_fmod+0x1a0>
 800e964:	0fe0      	lsrs	r0, r4, #31
 800e966:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e96a:	0064      	lsls	r4, r4, #1
 800e96c:	3901      	subs	r1, #1
 800e96e:	e78b      	b.n	800e888 <__ieee754_fmod+0xb8>
 800e970:	ea50 0307 	orrs.w	r3, r0, r7
 800e974:	f43f af5f 	beq.w	800e836 <__ieee754_fmod+0x66>
 800e978:	0ffb      	lsrs	r3, r7, #31
 800e97a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e97e:	007c      	lsls	r4, r7, #1
 800e980:	e7f4      	b.n	800e96c <__ieee754_fmod+0x19c>
 800e982:	0fe1      	lsrs	r1, r4, #31
 800e984:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e988:	0064      	lsls	r4, r4, #1
 800e98a:	3a01      	subs	r2, #1
 800e98c:	e78c      	b.n	800e8a8 <__ieee754_fmod+0xd8>
 800e98e:	1a89      	subs	r1, r1, r2
 800e990:	2914      	cmp	r1, #20
 800e992:	dc0a      	bgt.n	800e9aa <__ieee754_fmod+0x1da>
 800e994:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e998:	fa03 f202 	lsl.w	r2, r3, r2
 800e99c:	40cc      	lsrs	r4, r1
 800e99e:	4322      	orrs	r2, r4
 800e9a0:	410b      	asrs	r3, r1
 800e9a2:	ea43 0105 	orr.w	r1, r3, r5
 800e9a6:	4610      	mov	r0, r2
 800e9a8:	e735      	b.n	800e816 <__ieee754_fmod+0x46>
 800e9aa:	291f      	cmp	r1, #31
 800e9ac:	dc07      	bgt.n	800e9be <__ieee754_fmod+0x1ee>
 800e9ae:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e9b2:	40cc      	lsrs	r4, r1
 800e9b4:	fa03 f202 	lsl.w	r2, r3, r2
 800e9b8:	4322      	orrs	r2, r4
 800e9ba:	462b      	mov	r3, r5
 800e9bc:	e7f1      	b.n	800e9a2 <__ieee754_fmod+0x1d2>
 800e9be:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800e9c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e9c6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800e9ca:	32e2      	adds	r2, #226	; 0xe2
 800e9cc:	fa43 f202 	asr.w	r2, r3, r2
 800e9d0:	e7f3      	b.n	800e9ba <__ieee754_fmod+0x1ea>
 800e9d2:	bf00      	nop
 800e9d4:	7fefffff 	.word	0x7fefffff
 800e9d8:	7ff00000 	.word	0x7ff00000
 800e9dc:	0800f950 	.word	0x0800f950
 800e9e0:	fffffbed 	.word	0xfffffbed
 800e9e4:	fffffc02 	.word	0xfffffc02
 800e9e8:	fffffbe2 	.word	0xfffffbe2

0800e9ec <__kernel_cosf>:
 800e9ec:	ee10 3a10 	vmov	r3, s0
 800e9f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e9f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e9f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9fc:	da05      	bge.n	800ea0a <__kernel_cosf+0x1e>
 800e9fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ea02:	ee17 2a90 	vmov	r2, s15
 800ea06:	2a00      	cmp	r2, #0
 800ea08:	d03b      	beq.n	800ea82 <__kernel_cosf+0x96>
 800ea0a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ea0e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800ea88 <__kernel_cosf+0x9c>
 800ea12:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800ea8c <__kernel_cosf+0xa0>
 800ea16:	4a1e      	ldr	r2, [pc, #120]	; (800ea90 <__kernel_cosf+0xa4>)
 800ea18:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800ea94 <__kernel_cosf+0xa8>
 800ea22:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ea26:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800ea98 <__kernel_cosf+0xac>
 800ea2a:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ea2e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800ea9c <__kernel_cosf+0xb0>
 800ea32:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ea36:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800eaa0 <__kernel_cosf+0xb4>
 800ea3a:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ea3e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800ea42:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ea46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ea4a:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ea4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea52:	dc04      	bgt.n	800ea5e <__kernel_cosf+0x72>
 800ea54:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ea58:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800ea5c:	4770      	bx	lr
 800ea5e:	4a11      	ldr	r2, [pc, #68]	; (800eaa4 <__kernel_cosf+0xb8>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	bfda      	itte	le
 800ea64:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800ea68:	ee07 3a10 	vmovle	s14, r3
 800ea6c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800ea70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ea74:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800ea78:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ea7c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ea80:	4770      	bx	lr
 800ea82:	eeb0 0a66 	vmov.f32	s0, s13
 800ea86:	4770      	bx	lr
 800ea88:	ad47d74e 	.word	0xad47d74e
 800ea8c:	310f74f6 	.word	0x310f74f6
 800ea90:	3e999999 	.word	0x3e999999
 800ea94:	b493f27c 	.word	0xb493f27c
 800ea98:	37d00d01 	.word	0x37d00d01
 800ea9c:	bab60b61 	.word	0xbab60b61
 800eaa0:	3d2aaaab 	.word	0x3d2aaaab
 800eaa4:	3f480000 	.word	0x3f480000

0800eaa8 <__kernel_sinf>:
 800eaa8:	ee10 3a10 	vmov	r3, s0
 800eaac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eab0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800eab4:	da04      	bge.n	800eac0 <__kernel_sinf+0x18>
 800eab6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800eaba:	ee17 3a90 	vmov	r3, s15
 800eabe:	b35b      	cbz	r3, 800eb18 <__kernel_sinf+0x70>
 800eac0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800eac4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800eb1c <__kernel_sinf+0x74>
 800eac8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800eb20 <__kernel_sinf+0x78>
 800eacc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ead0:	eddf 7a14 	vldr	s15, [pc, #80]	; 800eb24 <__kernel_sinf+0x7c>
 800ead4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ead8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800eb28 <__kernel_sinf+0x80>
 800eadc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800eae0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800eb2c <__kernel_sinf+0x84>
 800eae4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800eae8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eaec:	b930      	cbnz	r0, 800eafc <__kernel_sinf+0x54>
 800eaee:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800eb30 <__kernel_sinf+0x88>
 800eaf2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800eaf6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800eafa:	4770      	bx	lr
 800eafc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800eb00:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800eb04:	eee0 7a86 	vfma.f32	s15, s1, s12
 800eb08:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800eb0c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800eb34 <__kernel_sinf+0x8c>
 800eb10:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800eb14:	ee30 0a60 	vsub.f32	s0, s0, s1
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop
 800eb1c:	2f2ec9d3 	.word	0x2f2ec9d3
 800eb20:	b2d72f34 	.word	0xb2d72f34
 800eb24:	3638ef1b 	.word	0x3638ef1b
 800eb28:	b9500d01 	.word	0xb9500d01
 800eb2c:	3c088889 	.word	0x3c088889
 800eb30:	be2aaaab 	.word	0xbe2aaaab
 800eb34:	3e2aaaab 	.word	0x3e2aaaab

0800eb38 <__ieee754_rem_pio2f>:
 800eb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb3a:	ee10 6a10 	vmov	r6, s0
 800eb3e:	4b86      	ldr	r3, [pc, #536]	; (800ed58 <__ieee754_rem_pio2f+0x220>)
 800eb40:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800eb44:	429d      	cmp	r5, r3
 800eb46:	b087      	sub	sp, #28
 800eb48:	4604      	mov	r4, r0
 800eb4a:	dc05      	bgt.n	800eb58 <__ieee754_rem_pio2f+0x20>
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	ed80 0a00 	vstr	s0, [r0]
 800eb52:	6043      	str	r3, [r0, #4]
 800eb54:	2000      	movs	r0, #0
 800eb56:	e020      	b.n	800eb9a <__ieee754_rem_pio2f+0x62>
 800eb58:	4b80      	ldr	r3, [pc, #512]	; (800ed5c <__ieee754_rem_pio2f+0x224>)
 800eb5a:	429d      	cmp	r5, r3
 800eb5c:	dc38      	bgt.n	800ebd0 <__ieee754_rem_pio2f+0x98>
 800eb5e:	2e00      	cmp	r6, #0
 800eb60:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800ed60 <__ieee754_rem_pio2f+0x228>
 800eb64:	4b7f      	ldr	r3, [pc, #508]	; (800ed64 <__ieee754_rem_pio2f+0x22c>)
 800eb66:	f025 050f 	bic.w	r5, r5, #15
 800eb6a:	dd18      	ble.n	800eb9e <__ieee754_rem_pio2f+0x66>
 800eb6c:	429d      	cmp	r5, r3
 800eb6e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800eb72:	bf09      	itett	eq
 800eb74:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800ed68 <__ieee754_rem_pio2f+0x230>
 800eb78:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800ed6c <__ieee754_rem_pio2f+0x234>
 800eb7c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800eb80:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800ed70 <__ieee754_rem_pio2f+0x238>
 800eb84:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800eb88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eb8c:	edc0 6a00 	vstr	s13, [r0]
 800eb90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb94:	edc0 7a01 	vstr	s15, [r0, #4]
 800eb98:	2001      	movs	r0, #1
 800eb9a:	b007      	add	sp, #28
 800eb9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb9e:	429d      	cmp	r5, r3
 800eba0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800eba4:	bf09      	itett	eq
 800eba6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800ed68 <__ieee754_rem_pio2f+0x230>
 800ebaa:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800ed6c <__ieee754_rem_pio2f+0x234>
 800ebae:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ebb2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800ed70 <__ieee754_rem_pio2f+0x238>
 800ebb6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ebba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ebbe:	edc0 6a00 	vstr	s13, [r0]
 800ebc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebc6:	edc0 7a01 	vstr	s15, [r0, #4]
 800ebca:	f04f 30ff 	mov.w	r0, #4294967295
 800ebce:	e7e4      	b.n	800eb9a <__ieee754_rem_pio2f+0x62>
 800ebd0:	4b68      	ldr	r3, [pc, #416]	; (800ed74 <__ieee754_rem_pio2f+0x23c>)
 800ebd2:	429d      	cmp	r5, r3
 800ebd4:	dc71      	bgt.n	800ecba <__ieee754_rem_pio2f+0x182>
 800ebd6:	f000 f8db 	bl	800ed90 <fabsf>
 800ebda:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ed78 <__ieee754_rem_pio2f+0x240>
 800ebde:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ebe2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ebe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ebee:	ee17 0a90 	vmov	r0, s15
 800ebf2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ed60 <__ieee754_rem_pio2f+0x228>
 800ebf6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ebfa:	281f      	cmp	r0, #31
 800ebfc:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ed6c <__ieee754_rem_pio2f+0x234>
 800ec00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec04:	eeb1 6a47 	vneg.f32	s12, s14
 800ec08:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ec0c:	ee16 2a90 	vmov	r2, s13
 800ec10:	dc1c      	bgt.n	800ec4c <__ieee754_rem_pio2f+0x114>
 800ec12:	495a      	ldr	r1, [pc, #360]	; (800ed7c <__ieee754_rem_pio2f+0x244>)
 800ec14:	1e47      	subs	r7, r0, #1
 800ec16:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ec1a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ec1e:	428b      	cmp	r3, r1
 800ec20:	d014      	beq.n	800ec4c <__ieee754_rem_pio2f+0x114>
 800ec22:	6022      	str	r2, [r4, #0]
 800ec24:	ed94 7a00 	vldr	s14, [r4]
 800ec28:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ec2c:	2e00      	cmp	r6, #0
 800ec2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ec32:	ed84 0a01 	vstr	s0, [r4, #4]
 800ec36:	dab0      	bge.n	800eb9a <__ieee754_rem_pio2f+0x62>
 800ec38:	eeb1 7a47 	vneg.f32	s14, s14
 800ec3c:	eeb1 0a40 	vneg.f32	s0, s0
 800ec40:	ed84 7a00 	vstr	s14, [r4]
 800ec44:	ed84 0a01 	vstr	s0, [r4, #4]
 800ec48:	4240      	negs	r0, r0
 800ec4a:	e7a6      	b.n	800eb9a <__ieee754_rem_pio2f+0x62>
 800ec4c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ec50:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800ec54:	2908      	cmp	r1, #8
 800ec56:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ec5a:	dde2      	ble.n	800ec22 <__ieee754_rem_pio2f+0xea>
 800ec5c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ed68 <__ieee754_rem_pio2f+0x230>
 800ec60:	eef0 6a40 	vmov.f32	s13, s0
 800ec64:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ec68:	ee70 7a66 	vsub.f32	s15, s0, s13
 800ec6c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ec70:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ed70 <__ieee754_rem_pio2f+0x238>
 800ec74:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ec78:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ec7c:	ee15 2a90 	vmov	r2, s11
 800ec80:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ec84:	1a5b      	subs	r3, r3, r1
 800ec86:	2b19      	cmp	r3, #25
 800ec88:	dc04      	bgt.n	800ec94 <__ieee754_rem_pio2f+0x15c>
 800ec8a:	edc4 5a00 	vstr	s11, [r4]
 800ec8e:	eeb0 0a66 	vmov.f32	s0, s13
 800ec92:	e7c7      	b.n	800ec24 <__ieee754_rem_pio2f+0xec>
 800ec94:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ed80 <__ieee754_rem_pio2f+0x248>
 800ec98:	eeb0 0a66 	vmov.f32	s0, s13
 800ec9c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800eca0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800eca4:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ed84 <__ieee754_rem_pio2f+0x24c>
 800eca8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ecac:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ecb0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ecb4:	ed84 7a00 	vstr	s14, [r4]
 800ecb8:	e7b4      	b.n	800ec24 <__ieee754_rem_pio2f+0xec>
 800ecba:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ecbe:	db06      	blt.n	800ecce <__ieee754_rem_pio2f+0x196>
 800ecc0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ecc4:	edc0 7a01 	vstr	s15, [r0, #4]
 800ecc8:	edc0 7a00 	vstr	s15, [r0]
 800eccc:	e742      	b.n	800eb54 <__ieee754_rem_pio2f+0x1c>
 800ecce:	15ea      	asrs	r2, r5, #23
 800ecd0:	3a86      	subs	r2, #134	; 0x86
 800ecd2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ecd6:	ee07 3a90 	vmov	s15, r3
 800ecda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ecde:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800ed88 <__ieee754_rem_pio2f+0x250>
 800ece2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ece6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecea:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ecee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ecf2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ecf6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ecfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecfe:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ed02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ed06:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ed0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0e:	edcd 7a05 	vstr	s15, [sp, #20]
 800ed12:	d11e      	bne.n	800ed52 <__ieee754_rem_pio2f+0x21a>
 800ed14:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ed18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1c:	bf14      	ite	ne
 800ed1e:	2302      	movne	r3, #2
 800ed20:	2301      	moveq	r3, #1
 800ed22:	491a      	ldr	r1, [pc, #104]	; (800ed8c <__ieee754_rem_pio2f+0x254>)
 800ed24:	9101      	str	r1, [sp, #4]
 800ed26:	2102      	movs	r1, #2
 800ed28:	9100      	str	r1, [sp, #0]
 800ed2a:	a803      	add	r0, sp, #12
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	f000 f837 	bl	800eda0 <__kernel_rem_pio2f>
 800ed32:	2e00      	cmp	r6, #0
 800ed34:	f6bf af31 	bge.w	800eb9a <__ieee754_rem_pio2f+0x62>
 800ed38:	edd4 7a00 	vldr	s15, [r4]
 800ed3c:	eef1 7a67 	vneg.f32	s15, s15
 800ed40:	edc4 7a00 	vstr	s15, [r4]
 800ed44:	edd4 7a01 	vldr	s15, [r4, #4]
 800ed48:	eef1 7a67 	vneg.f32	s15, s15
 800ed4c:	edc4 7a01 	vstr	s15, [r4, #4]
 800ed50:	e77a      	b.n	800ec48 <__ieee754_rem_pio2f+0x110>
 800ed52:	2303      	movs	r3, #3
 800ed54:	e7e5      	b.n	800ed22 <__ieee754_rem_pio2f+0x1ea>
 800ed56:	bf00      	nop
 800ed58:	3f490fd8 	.word	0x3f490fd8
 800ed5c:	4016cbe3 	.word	0x4016cbe3
 800ed60:	3fc90f80 	.word	0x3fc90f80
 800ed64:	3fc90fd0 	.word	0x3fc90fd0
 800ed68:	37354400 	.word	0x37354400
 800ed6c:	37354443 	.word	0x37354443
 800ed70:	2e85a308 	.word	0x2e85a308
 800ed74:	43490f80 	.word	0x43490f80
 800ed78:	3f22f984 	.word	0x3f22f984
 800ed7c:	0800f960 	.word	0x0800f960
 800ed80:	2e85a300 	.word	0x2e85a300
 800ed84:	248d3132 	.word	0x248d3132
 800ed88:	43800000 	.word	0x43800000
 800ed8c:	0800f9e0 	.word	0x0800f9e0

0800ed90 <fabsf>:
 800ed90:	ee10 3a10 	vmov	r3, s0
 800ed94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed98:	ee00 3a10 	vmov	s0, r3
 800ed9c:	4770      	bx	lr
	...

0800eda0 <__kernel_rem_pio2f>:
 800eda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda4:	ed2d 8b04 	vpush	{d8-d9}
 800eda8:	b0d9      	sub	sp, #356	; 0x164
 800edaa:	4688      	mov	r8, r1
 800edac:	9002      	str	r0, [sp, #8]
 800edae:	49b8      	ldr	r1, [pc, #736]	; (800f090 <__kernel_rem_pio2f+0x2f0>)
 800edb0:	9866      	ldr	r0, [sp, #408]	; 0x198
 800edb2:	9301      	str	r3, [sp, #4]
 800edb4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800edb8:	9901      	ldr	r1, [sp, #4]
 800edba:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800edbc:	f101 3bff 	add.w	fp, r1, #4294967295
 800edc0:	1d11      	adds	r1, r2, #4
 800edc2:	db25      	blt.n	800ee10 <__kernel_rem_pio2f+0x70>
 800edc4:	1ed0      	subs	r0, r2, #3
 800edc6:	bf48      	it	mi
 800edc8:	1d10      	addmi	r0, r2, #4
 800edca:	10c0      	asrs	r0, r0, #3
 800edcc:	1c45      	adds	r5, r0, #1
 800edce:	00e9      	lsls	r1, r5, #3
 800edd0:	eba0 070b 	sub.w	r7, r0, fp
 800edd4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800f0a0 <__kernel_rem_pio2f+0x300>
 800edd8:	9103      	str	r1, [sp, #12]
 800edda:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800edde:	eb0a 0c0b 	add.w	ip, sl, fp
 800ede2:	ae1c      	add	r6, sp, #112	; 0x70
 800ede4:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800ede8:	2400      	movs	r4, #0
 800edea:	4564      	cmp	r4, ip
 800edec:	dd12      	ble.n	800ee14 <__kernel_rem_pio2f+0x74>
 800edee:	9901      	ldr	r1, [sp, #4]
 800edf0:	ac1c      	add	r4, sp, #112	; 0x70
 800edf2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800edf6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800edfa:	f04f 0c00 	mov.w	ip, #0
 800edfe:	45d4      	cmp	ip, sl
 800ee00:	dc27      	bgt.n	800ee52 <__kernel_rem_pio2f+0xb2>
 800ee02:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ee06:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800f0a0 <__kernel_rem_pio2f+0x300>
 800ee0a:	4627      	mov	r7, r4
 800ee0c:	2600      	movs	r6, #0
 800ee0e:	e016      	b.n	800ee3e <__kernel_rem_pio2f+0x9e>
 800ee10:	2000      	movs	r0, #0
 800ee12:	e7db      	b.n	800edcc <__kernel_rem_pio2f+0x2c>
 800ee14:	42e7      	cmn	r7, r4
 800ee16:	bf5d      	ittte	pl
 800ee18:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800ee1c:	ee07 1a90 	vmovpl	s15, r1
 800ee20:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ee24:	eef0 7a47 	vmovmi.f32	s15, s14
 800ee28:	ece6 7a01 	vstmia	r6!, {s15}
 800ee2c:	3401      	adds	r4, #1
 800ee2e:	e7dc      	b.n	800edea <__kernel_rem_pio2f+0x4a>
 800ee30:	ecfe 6a01 	vldmia	lr!, {s13}
 800ee34:	ed97 7a00 	vldr	s14, [r7]
 800ee38:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ee3c:	3601      	adds	r6, #1
 800ee3e:	455e      	cmp	r6, fp
 800ee40:	f1a7 0704 	sub.w	r7, r7, #4
 800ee44:	ddf4      	ble.n	800ee30 <__kernel_rem_pio2f+0x90>
 800ee46:	ece9 7a01 	vstmia	r9!, {s15}
 800ee4a:	f10c 0c01 	add.w	ip, ip, #1
 800ee4e:	3404      	adds	r4, #4
 800ee50:	e7d5      	b.n	800edfe <__kernel_rem_pio2f+0x5e>
 800ee52:	a908      	add	r1, sp, #32
 800ee54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ee5c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800f09c <__kernel_rem_pio2f+0x2fc>
 800ee60:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800f098 <__kernel_rem_pio2f+0x2f8>
 800ee64:	9105      	str	r1, [sp, #20]
 800ee66:	9304      	str	r3, [sp, #16]
 800ee68:	4656      	mov	r6, sl
 800ee6a:	00b3      	lsls	r3, r6, #2
 800ee6c:	9306      	str	r3, [sp, #24]
 800ee6e:	ab58      	add	r3, sp, #352	; 0x160
 800ee70:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ee74:	ac08      	add	r4, sp, #32
 800ee76:	ab44      	add	r3, sp, #272	; 0x110
 800ee78:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ee7c:	46a4      	mov	ip, r4
 800ee7e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ee82:	4637      	mov	r7, r6
 800ee84:	2f00      	cmp	r7, #0
 800ee86:	f1a0 0004 	sub.w	r0, r0, #4
 800ee8a:	dc4a      	bgt.n	800ef22 <__kernel_rem_pio2f+0x182>
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	9207      	str	r2, [sp, #28]
 800ee90:	f000 f9f8 	bl	800f284 <scalbnf>
 800ee94:	eeb0 8a40 	vmov.f32	s16, s0
 800ee98:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ee9c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800eea0:	f000 fa56 	bl	800f350 <floorf>
 800eea4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800eea8:	eea0 8a67 	vfms.f32	s16, s0, s15
 800eeac:	2d00      	cmp	r5, #0
 800eeae:	9a07      	ldr	r2, [sp, #28]
 800eeb0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800eeb4:	ee17 9a90 	vmov	r9, s15
 800eeb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eebc:	ee38 8a67 	vsub.f32	s16, s16, s15
 800eec0:	dd41      	ble.n	800ef46 <__kernel_rem_pio2f+0x1a6>
 800eec2:	f106 3cff 	add.w	ip, r6, #4294967295
 800eec6:	ab08      	add	r3, sp, #32
 800eec8:	f1c5 0e08 	rsb	lr, r5, #8
 800eecc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800eed0:	fa47 f00e 	asr.w	r0, r7, lr
 800eed4:	4481      	add	r9, r0
 800eed6:	fa00 f00e 	lsl.w	r0, r0, lr
 800eeda:	1a3f      	subs	r7, r7, r0
 800eedc:	f1c5 0007 	rsb	r0, r5, #7
 800eee0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800eee4:	4107      	asrs	r7, r0
 800eee6:	2f00      	cmp	r7, #0
 800eee8:	dd3c      	ble.n	800ef64 <__kernel_rem_pio2f+0x1c4>
 800eeea:	f04f 0e00 	mov.w	lr, #0
 800eeee:	f109 0901 	add.w	r9, r9, #1
 800eef2:	4671      	mov	r1, lr
 800eef4:	4576      	cmp	r6, lr
 800eef6:	dc67      	bgt.n	800efc8 <__kernel_rem_pio2f+0x228>
 800eef8:	2d00      	cmp	r5, #0
 800eefa:	dd03      	ble.n	800ef04 <__kernel_rem_pio2f+0x164>
 800eefc:	2d01      	cmp	r5, #1
 800eefe:	d074      	beq.n	800efea <__kernel_rem_pio2f+0x24a>
 800ef00:	2d02      	cmp	r5, #2
 800ef02:	d07b      	beq.n	800effc <__kernel_rem_pio2f+0x25c>
 800ef04:	2f02      	cmp	r7, #2
 800ef06:	d12d      	bne.n	800ef64 <__kernel_rem_pio2f+0x1c4>
 800ef08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ef0c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ef10:	b341      	cbz	r1, 800ef64 <__kernel_rem_pio2f+0x1c4>
 800ef12:	4628      	mov	r0, r5
 800ef14:	9207      	str	r2, [sp, #28]
 800ef16:	f000 f9b5 	bl	800f284 <scalbnf>
 800ef1a:	9a07      	ldr	r2, [sp, #28]
 800ef1c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ef20:	e020      	b.n	800ef64 <__kernel_rem_pio2f+0x1c4>
 800ef22:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ef26:	3f01      	subs	r7, #1
 800ef28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef30:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ef34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ef38:	ecac 0a01 	vstmia	ip!, {s0}
 800ef3c:	ed90 0a00 	vldr	s0, [r0]
 800ef40:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ef44:	e79e      	b.n	800ee84 <__kernel_rem_pio2f+0xe4>
 800ef46:	d105      	bne.n	800ef54 <__kernel_rem_pio2f+0x1b4>
 800ef48:	1e70      	subs	r0, r6, #1
 800ef4a:	ab08      	add	r3, sp, #32
 800ef4c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ef50:	11ff      	asrs	r7, r7, #7
 800ef52:	e7c8      	b.n	800eee6 <__kernel_rem_pio2f+0x146>
 800ef54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ef58:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ef5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef60:	da30      	bge.n	800efc4 <__kernel_rem_pio2f+0x224>
 800ef62:	2700      	movs	r7, #0
 800ef64:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ef68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6c:	f040 809a 	bne.w	800f0a4 <__kernel_rem_pio2f+0x304>
 800ef70:	1e74      	subs	r4, r6, #1
 800ef72:	46a4      	mov	ip, r4
 800ef74:	2100      	movs	r1, #0
 800ef76:	45d4      	cmp	ip, sl
 800ef78:	da47      	bge.n	800f00a <__kernel_rem_pio2f+0x26a>
 800ef7a:	2900      	cmp	r1, #0
 800ef7c:	d063      	beq.n	800f046 <__kernel_rem_pio2f+0x2a6>
 800ef7e:	ab08      	add	r3, sp, #32
 800ef80:	3d08      	subs	r5, #8
 800ef82:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d07f      	beq.n	800f08a <__kernel_rem_pio2f+0x2ea>
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ef90:	f000 f978 	bl	800f284 <scalbnf>
 800ef94:	1c63      	adds	r3, r4, #1
 800ef96:	aa44      	add	r2, sp, #272	; 0x110
 800ef98:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800f09c <__kernel_rem_pio2f+0x2fc>
 800ef9c:	0099      	lsls	r1, r3, #2
 800ef9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800efa2:	4623      	mov	r3, r4
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	f280 80ad 	bge.w	800f104 <__kernel_rem_pio2f+0x364>
 800efaa:	4623      	mov	r3, r4
 800efac:	2b00      	cmp	r3, #0
 800efae:	f2c0 80cb 	blt.w	800f148 <__kernel_rem_pio2f+0x3a8>
 800efb2:	aa44      	add	r2, sp, #272	; 0x110
 800efb4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800efb8:	4e36      	ldr	r6, [pc, #216]	; (800f094 <__kernel_rem_pio2f+0x2f4>)
 800efba:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f0a0 <__kernel_rem_pio2f+0x300>
 800efbe:	2000      	movs	r0, #0
 800efc0:	1ae2      	subs	r2, r4, r3
 800efc2:	e0b6      	b.n	800f132 <__kernel_rem_pio2f+0x392>
 800efc4:	2702      	movs	r7, #2
 800efc6:	e790      	b.n	800eeea <__kernel_rem_pio2f+0x14a>
 800efc8:	6820      	ldr	r0, [r4, #0]
 800efca:	b949      	cbnz	r1, 800efe0 <__kernel_rem_pio2f+0x240>
 800efcc:	b118      	cbz	r0, 800efd6 <__kernel_rem_pio2f+0x236>
 800efce:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800efd2:	6020      	str	r0, [r4, #0]
 800efd4:	2001      	movs	r0, #1
 800efd6:	f10e 0e01 	add.w	lr, lr, #1
 800efda:	3404      	adds	r4, #4
 800efdc:	4601      	mov	r1, r0
 800efde:	e789      	b.n	800eef4 <__kernel_rem_pio2f+0x154>
 800efe0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800efe4:	6020      	str	r0, [r4, #0]
 800efe6:	4608      	mov	r0, r1
 800efe8:	e7f5      	b.n	800efd6 <__kernel_rem_pio2f+0x236>
 800efea:	1e74      	subs	r4, r6, #1
 800efec:	ab08      	add	r3, sp, #32
 800efee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eff2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eff6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800effa:	e783      	b.n	800ef04 <__kernel_rem_pio2f+0x164>
 800effc:	1e74      	subs	r4, r6, #1
 800effe:	ab08      	add	r3, sp, #32
 800f000:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f004:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800f008:	e7f5      	b.n	800eff6 <__kernel_rem_pio2f+0x256>
 800f00a:	ab08      	add	r3, sp, #32
 800f00c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800f010:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f014:	4301      	orrs	r1, r0
 800f016:	e7ae      	b.n	800ef76 <__kernel_rem_pio2f+0x1d6>
 800f018:	3001      	adds	r0, #1
 800f01a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800f01e:	2f00      	cmp	r7, #0
 800f020:	d0fa      	beq.n	800f018 <__kernel_rem_pio2f+0x278>
 800f022:	9b06      	ldr	r3, [sp, #24]
 800f024:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800f028:	eb0d 0403 	add.w	r4, sp, r3
 800f02c:	9b01      	ldr	r3, [sp, #4]
 800f02e:	18f7      	adds	r7, r6, r3
 800f030:	ab1c      	add	r3, sp, #112	; 0x70
 800f032:	f106 0c01 	add.w	ip, r6, #1
 800f036:	3c4c      	subs	r4, #76	; 0x4c
 800f038:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f03c:	4430      	add	r0, r6
 800f03e:	4560      	cmp	r0, ip
 800f040:	da04      	bge.n	800f04c <__kernel_rem_pio2f+0x2ac>
 800f042:	4606      	mov	r6, r0
 800f044:	e711      	b.n	800ee6a <__kernel_rem_pio2f+0xca>
 800f046:	9c05      	ldr	r4, [sp, #20]
 800f048:	2001      	movs	r0, #1
 800f04a:	e7e6      	b.n	800f01a <__kernel_rem_pio2f+0x27a>
 800f04c:	9b04      	ldr	r3, [sp, #16]
 800f04e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f052:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800f056:	9306      	str	r3, [sp, #24]
 800f058:	ee07 3a90 	vmov	s15, r3
 800f05c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f060:	2600      	movs	r6, #0
 800f062:	ece7 7a01 	vstmia	r7!, {s15}
 800f066:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800f0a0 <__kernel_rem_pio2f+0x300>
 800f06a:	46b9      	mov	r9, r7
 800f06c:	455e      	cmp	r6, fp
 800f06e:	dd04      	ble.n	800f07a <__kernel_rem_pio2f+0x2da>
 800f070:	ece4 7a01 	vstmia	r4!, {s15}
 800f074:	f10c 0c01 	add.w	ip, ip, #1
 800f078:	e7e1      	b.n	800f03e <__kernel_rem_pio2f+0x29e>
 800f07a:	ecfe 6a01 	vldmia	lr!, {s13}
 800f07e:	ed39 7a01 	vldmdb	r9!, {s14}
 800f082:	3601      	adds	r6, #1
 800f084:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f088:	e7f0      	b.n	800f06c <__kernel_rem_pio2f+0x2cc>
 800f08a:	3c01      	subs	r4, #1
 800f08c:	e777      	b.n	800ef7e <__kernel_rem_pio2f+0x1de>
 800f08e:	bf00      	nop
 800f090:	0800fd24 	.word	0x0800fd24
 800f094:	0800fcf8 	.word	0x0800fcf8
 800f098:	43800000 	.word	0x43800000
 800f09c:	3b800000 	.word	0x3b800000
 800f0a0:	00000000 	.word	0x00000000
 800f0a4:	9b03      	ldr	r3, [sp, #12]
 800f0a6:	eeb0 0a48 	vmov.f32	s0, s16
 800f0aa:	1a98      	subs	r0, r3, r2
 800f0ac:	f000 f8ea 	bl	800f284 <scalbnf>
 800f0b0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800f098 <__kernel_rem_pio2f+0x2f8>
 800f0b4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0bc:	db19      	blt.n	800f0f2 <__kernel_rem_pio2f+0x352>
 800f0be:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f09c <__kernel_rem_pio2f+0x2fc>
 800f0c2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f0c6:	aa08      	add	r2, sp, #32
 800f0c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0cc:	1c74      	adds	r4, r6, #1
 800f0ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0d2:	3508      	adds	r5, #8
 800f0d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f0d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f0e0:	ee10 3a10 	vmov	r3, s0
 800f0e4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f0e8:	ee17 3a90 	vmov	r3, s15
 800f0ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f0f0:	e74b      	b.n	800ef8a <__kernel_rem_pio2f+0x1ea>
 800f0f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f0f6:	aa08      	add	r2, sp, #32
 800f0f8:	ee10 3a10 	vmov	r3, s0
 800f0fc:	4634      	mov	r4, r6
 800f0fe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f102:	e742      	b.n	800ef8a <__kernel_rem_pio2f+0x1ea>
 800f104:	a808      	add	r0, sp, #32
 800f106:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800f10a:	9001      	str	r0, [sp, #4]
 800f10c:	ee07 0a90 	vmov	s15, r0
 800f110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f114:	3b01      	subs	r3, #1
 800f116:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f11a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f11e:	ed62 7a01 	vstmdb	r2!, {s15}
 800f122:	e73f      	b.n	800efa4 <__kernel_rem_pio2f+0x204>
 800f124:	ecf6 6a01 	vldmia	r6!, {s13}
 800f128:	ecb5 7a01 	vldmia	r5!, {s14}
 800f12c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f130:	3001      	adds	r0, #1
 800f132:	4550      	cmp	r0, sl
 800f134:	dc01      	bgt.n	800f13a <__kernel_rem_pio2f+0x39a>
 800f136:	4290      	cmp	r0, r2
 800f138:	ddf4      	ble.n	800f124 <__kernel_rem_pio2f+0x384>
 800f13a:	a858      	add	r0, sp, #352	; 0x160
 800f13c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f140:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800f144:	3b01      	subs	r3, #1
 800f146:	e731      	b.n	800efac <__kernel_rem_pio2f+0x20c>
 800f148:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	dc09      	bgt.n	800f162 <__kernel_rem_pio2f+0x3c2>
 800f14e:	2b00      	cmp	r3, #0
 800f150:	dc2b      	bgt.n	800f1aa <__kernel_rem_pio2f+0x40a>
 800f152:	d044      	beq.n	800f1de <__kernel_rem_pio2f+0x43e>
 800f154:	f009 0007 	and.w	r0, r9, #7
 800f158:	b059      	add	sp, #356	; 0x164
 800f15a:	ecbd 8b04 	vpop	{d8-d9}
 800f15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f162:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800f164:	2b03      	cmp	r3, #3
 800f166:	d1f5      	bne.n	800f154 <__kernel_rem_pio2f+0x3b4>
 800f168:	aa30      	add	r2, sp, #192	; 0xc0
 800f16a:	1f0b      	subs	r3, r1, #4
 800f16c:	4413      	add	r3, r2
 800f16e:	461a      	mov	r2, r3
 800f170:	4620      	mov	r0, r4
 800f172:	2800      	cmp	r0, #0
 800f174:	f1a2 0204 	sub.w	r2, r2, #4
 800f178:	dc52      	bgt.n	800f220 <__kernel_rem_pio2f+0x480>
 800f17a:	4622      	mov	r2, r4
 800f17c:	2a01      	cmp	r2, #1
 800f17e:	f1a3 0304 	sub.w	r3, r3, #4
 800f182:	dc5d      	bgt.n	800f240 <__kernel_rem_pio2f+0x4a0>
 800f184:	ab30      	add	r3, sp, #192	; 0xc0
 800f186:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f0a0 <__kernel_rem_pio2f+0x300>
 800f18a:	440b      	add	r3, r1
 800f18c:	2c01      	cmp	r4, #1
 800f18e:	dc67      	bgt.n	800f260 <__kernel_rem_pio2f+0x4c0>
 800f190:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f194:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800f198:	2f00      	cmp	r7, #0
 800f19a:	d167      	bne.n	800f26c <__kernel_rem_pio2f+0x4cc>
 800f19c:	edc8 6a00 	vstr	s13, [r8]
 800f1a0:	ed88 7a01 	vstr	s14, [r8, #4]
 800f1a4:	edc8 7a02 	vstr	s15, [r8, #8]
 800f1a8:	e7d4      	b.n	800f154 <__kernel_rem_pio2f+0x3b4>
 800f1aa:	ab30      	add	r3, sp, #192	; 0xc0
 800f1ac:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800f0a0 <__kernel_rem_pio2f+0x300>
 800f1b0:	440b      	add	r3, r1
 800f1b2:	4622      	mov	r2, r4
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	da24      	bge.n	800f202 <__kernel_rem_pio2f+0x462>
 800f1b8:	b34f      	cbz	r7, 800f20e <__kernel_rem_pio2f+0x46e>
 800f1ba:	eef1 7a47 	vneg.f32	s15, s14
 800f1be:	edc8 7a00 	vstr	s15, [r8]
 800f1c2:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800f1c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1ca:	aa31      	add	r2, sp, #196	; 0xc4
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	429c      	cmp	r4, r3
 800f1d0:	da20      	bge.n	800f214 <__kernel_rem_pio2f+0x474>
 800f1d2:	b10f      	cbz	r7, 800f1d8 <__kernel_rem_pio2f+0x438>
 800f1d4:	eef1 7a67 	vneg.f32	s15, s15
 800f1d8:	edc8 7a01 	vstr	s15, [r8, #4]
 800f1dc:	e7ba      	b.n	800f154 <__kernel_rem_pio2f+0x3b4>
 800f1de:	ab30      	add	r3, sp, #192	; 0xc0
 800f1e0:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800f0a0 <__kernel_rem_pio2f+0x300>
 800f1e4:	440b      	add	r3, r1
 800f1e6:	2c00      	cmp	r4, #0
 800f1e8:	da05      	bge.n	800f1f6 <__kernel_rem_pio2f+0x456>
 800f1ea:	b10f      	cbz	r7, 800f1f0 <__kernel_rem_pio2f+0x450>
 800f1ec:	eef1 7a67 	vneg.f32	s15, s15
 800f1f0:	edc8 7a00 	vstr	s15, [r8]
 800f1f4:	e7ae      	b.n	800f154 <__kernel_rem_pio2f+0x3b4>
 800f1f6:	ed33 7a01 	vldmdb	r3!, {s14}
 800f1fa:	3c01      	subs	r4, #1
 800f1fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f200:	e7f1      	b.n	800f1e6 <__kernel_rem_pio2f+0x446>
 800f202:	ed73 7a01 	vldmdb	r3!, {s15}
 800f206:	3a01      	subs	r2, #1
 800f208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f20c:	e7d2      	b.n	800f1b4 <__kernel_rem_pio2f+0x414>
 800f20e:	eef0 7a47 	vmov.f32	s15, s14
 800f212:	e7d4      	b.n	800f1be <__kernel_rem_pio2f+0x41e>
 800f214:	ecb2 7a01 	vldmia	r2!, {s14}
 800f218:	3301      	adds	r3, #1
 800f21a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f21e:	e7d6      	b.n	800f1ce <__kernel_rem_pio2f+0x42e>
 800f220:	edd2 7a00 	vldr	s15, [r2]
 800f224:	edd2 6a01 	vldr	s13, [r2, #4]
 800f228:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f22c:	3801      	subs	r0, #1
 800f22e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f232:	ed82 7a00 	vstr	s14, [r2]
 800f236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f23a:	edc2 7a01 	vstr	s15, [r2, #4]
 800f23e:	e798      	b.n	800f172 <__kernel_rem_pio2f+0x3d2>
 800f240:	edd3 7a00 	vldr	s15, [r3]
 800f244:	edd3 6a01 	vldr	s13, [r3, #4]
 800f248:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f24c:	3a01      	subs	r2, #1
 800f24e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f252:	ed83 7a00 	vstr	s14, [r3]
 800f256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f25a:	edc3 7a01 	vstr	s15, [r3, #4]
 800f25e:	e78d      	b.n	800f17c <__kernel_rem_pio2f+0x3dc>
 800f260:	ed33 7a01 	vldmdb	r3!, {s14}
 800f264:	3c01      	subs	r4, #1
 800f266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f26a:	e78f      	b.n	800f18c <__kernel_rem_pio2f+0x3ec>
 800f26c:	eef1 6a66 	vneg.f32	s13, s13
 800f270:	eeb1 7a47 	vneg.f32	s14, s14
 800f274:	edc8 6a00 	vstr	s13, [r8]
 800f278:	ed88 7a01 	vstr	s14, [r8, #4]
 800f27c:	eef1 7a67 	vneg.f32	s15, s15
 800f280:	e790      	b.n	800f1a4 <__kernel_rem_pio2f+0x404>
 800f282:	bf00      	nop

0800f284 <scalbnf>:
 800f284:	ee10 3a10 	vmov	r3, s0
 800f288:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f28c:	d02b      	beq.n	800f2e6 <scalbnf+0x62>
 800f28e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f292:	d302      	bcc.n	800f29a <scalbnf+0x16>
 800f294:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f298:	4770      	bx	lr
 800f29a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f29e:	d123      	bne.n	800f2e8 <scalbnf+0x64>
 800f2a0:	4b24      	ldr	r3, [pc, #144]	; (800f334 <scalbnf+0xb0>)
 800f2a2:	eddf 7a25 	vldr	s15, [pc, #148]	; 800f338 <scalbnf+0xb4>
 800f2a6:	4298      	cmp	r0, r3
 800f2a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f2ac:	db17      	blt.n	800f2de <scalbnf+0x5a>
 800f2ae:	ee10 3a10 	vmov	r3, s0
 800f2b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f2b6:	3a19      	subs	r2, #25
 800f2b8:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f2bc:	4288      	cmp	r0, r1
 800f2be:	dd15      	ble.n	800f2ec <scalbnf+0x68>
 800f2c0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f33c <scalbnf+0xb8>
 800f2c4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800f340 <scalbnf+0xbc>
 800f2c8:	ee10 3a10 	vmov	r3, s0
 800f2cc:	eeb0 7a67 	vmov.f32	s14, s15
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	bfb8      	it	lt
 800f2d4:	eef0 7a66 	vmovlt.f32	s15, s13
 800f2d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f2dc:	4770      	bx	lr
 800f2de:	eddf 7a19 	vldr	s15, [pc, #100]	; 800f344 <scalbnf+0xc0>
 800f2e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f2e6:	4770      	bx	lr
 800f2e8:	0dd2      	lsrs	r2, r2, #23
 800f2ea:	e7e5      	b.n	800f2b8 <scalbnf+0x34>
 800f2ec:	4410      	add	r0, r2
 800f2ee:	28fe      	cmp	r0, #254	; 0xfe
 800f2f0:	dce6      	bgt.n	800f2c0 <scalbnf+0x3c>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	dd06      	ble.n	800f304 <scalbnf+0x80>
 800f2f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f2fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f2fe:	ee00 3a10 	vmov	s0, r3
 800f302:	4770      	bx	lr
 800f304:	f110 0f16 	cmn.w	r0, #22
 800f308:	da09      	bge.n	800f31e <scalbnf+0x9a>
 800f30a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800f344 <scalbnf+0xc0>
 800f30e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800f348 <scalbnf+0xc4>
 800f312:	ee10 3a10 	vmov	r3, s0
 800f316:	eeb0 7a67 	vmov.f32	s14, s15
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	e7d9      	b.n	800f2d2 <scalbnf+0x4e>
 800f31e:	3019      	adds	r0, #25
 800f320:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f324:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f328:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800f34c <scalbnf+0xc8>
 800f32c:	ee07 3a90 	vmov	s15, r3
 800f330:	e7d7      	b.n	800f2e2 <scalbnf+0x5e>
 800f332:	bf00      	nop
 800f334:	ffff3cb0 	.word	0xffff3cb0
 800f338:	4c000000 	.word	0x4c000000
 800f33c:	7149f2ca 	.word	0x7149f2ca
 800f340:	f149f2ca 	.word	0xf149f2ca
 800f344:	0da24260 	.word	0x0da24260
 800f348:	8da24260 	.word	0x8da24260
 800f34c:	33000000 	.word	0x33000000

0800f350 <floorf>:
 800f350:	ee10 3a10 	vmov	r3, s0
 800f354:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f358:	3a7f      	subs	r2, #127	; 0x7f
 800f35a:	2a16      	cmp	r2, #22
 800f35c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f360:	dc2a      	bgt.n	800f3b8 <floorf+0x68>
 800f362:	2a00      	cmp	r2, #0
 800f364:	da11      	bge.n	800f38a <floorf+0x3a>
 800f366:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f3c8 <floorf+0x78>
 800f36a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f36e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f376:	dd05      	ble.n	800f384 <floorf+0x34>
 800f378:	2b00      	cmp	r3, #0
 800f37a:	da23      	bge.n	800f3c4 <floorf+0x74>
 800f37c:	4a13      	ldr	r2, [pc, #76]	; (800f3cc <floorf+0x7c>)
 800f37e:	2900      	cmp	r1, #0
 800f380:	bf18      	it	ne
 800f382:	4613      	movne	r3, r2
 800f384:	ee00 3a10 	vmov	s0, r3
 800f388:	4770      	bx	lr
 800f38a:	4911      	ldr	r1, [pc, #68]	; (800f3d0 <floorf+0x80>)
 800f38c:	4111      	asrs	r1, r2
 800f38e:	420b      	tst	r3, r1
 800f390:	d0fa      	beq.n	800f388 <floorf+0x38>
 800f392:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f3c8 <floorf+0x78>
 800f396:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f39a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a2:	ddef      	ble.n	800f384 <floorf+0x34>
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	bfbe      	ittt	lt
 800f3a8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f3ac:	fa40 f202 	asrlt.w	r2, r0, r2
 800f3b0:	189b      	addlt	r3, r3, r2
 800f3b2:	ea23 0301 	bic.w	r3, r3, r1
 800f3b6:	e7e5      	b.n	800f384 <floorf+0x34>
 800f3b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f3bc:	d3e4      	bcc.n	800f388 <floorf+0x38>
 800f3be:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f3c2:	4770      	bx	lr
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	e7dd      	b.n	800f384 <floorf+0x34>
 800f3c8:	7149f2ca 	.word	0x7149f2ca
 800f3cc:	bf800000 	.word	0xbf800000
 800f3d0:	007fffff 	.word	0x007fffff

0800f3d4 <_init>:
 800f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d6:	bf00      	nop
 800f3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3da:	bc08      	pop	{r3}
 800f3dc:	469e      	mov	lr, r3
 800f3de:	4770      	bx	lr

0800f3e0 <_fini>:
 800f3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e2:	bf00      	nop
 800f3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3e6:	bc08      	pop	{r3}
 800f3e8:	469e      	mov	lr, r3
 800f3ea:	4770      	bx	lr
