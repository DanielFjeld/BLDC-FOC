
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5b0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c790  0800c790  0001c790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c848  0800c848  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800c848  0800c848  0001c848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c850  0800c850  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c850  0800c850  0001c850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c854  0800c854  0001c854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800c858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d94  20000134  0800c98c  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ec8  0800c98c  00020ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025640  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e78  00000000  00000000  000457e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  0004a660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016de  00000000  00000000  0004c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255c7  00000000  00000000  0004db06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029fdc  00000000  00000000  000730cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d47  00000000  00000000  0009d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000820c  00000000  00000000  00185df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018dffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000134 	.word	0x20000134
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c778 	.word	0x0800c778

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000138 	.word	0x20000138
 800021c:	0800c778 	.word	0x0800c778

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <Update_FIR_filter+0x88>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <Update_FIR_filter+0x8c>)
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
	float temp = 0;
 80005e4:	f04f 0300 	mov.w	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	e016      	b.n	800061e <Update_FIR_filter+0x52>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 80005f0:	4a1a      	ldr	r2, [pc, #104]	; (800065c <Update_FIR_filter+0x90>)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	ed93 7a00 	vldr	s14, [r3]
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <Update_FIR_filter+0x8c>)
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	edd3 7a00 	vldr	s15, [r3]
 8000608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800060c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000614:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b09      	cmp	r3, #9
 8000622:	dde5      	ble.n	80005f0 <Update_FIR_filter+0x24>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <Update_FIR_filter+0x88>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b08      	cmp	r3, #8
 800062a:	d806      	bhi.n	800063a <Update_FIR_filter+0x6e>
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <Update_FIR_filter+0x88>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <Update_FIR_filter+0x88>)
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	e002      	b.n	8000640 <Update_FIR_filter+0x74>
	else FIR_index = 0;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <Update_FIR_filter+0x88>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	return temp;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	ee07 3a90 	vmov	s15, r3
}
 8000646:	eeb0 0a67 	vmov.f32	s0, s15
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	2000018c 	.word	0x2000018c
 8000658:	20000190 	.word	0x20000190
 800065c:	20000000 	.word	0x20000000

08000660 <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d008      	beq.n	8000680 <Current_IRQ+0x20>
 800066e:	2210      	movs	r2, #16
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <Current_IRQ+0x28>)
 8000674:	f00b fc30 	bl	800bed8 <memcpy>
    else return;
    Current_Callback_flag = 1;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <Current_IRQ+0x2c>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e000      	b.n	8000682 <Current_IRQ+0x22>
    else return;
 8000680:	bf00      	nop
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000160 	.word	0x20000160
 800068c:	20000150 	.word	0x20000150

08000690 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8000698:	2208      	movs	r2, #8
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <Voltage_Temp_IRQ+0x1c>)
 800069e:	f00b fc1b 	bl	800bed8 <memcpy>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000170 	.word	0x20000170

080006b0 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 80006b8:	2214      	movs	r2, #20
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <Encoders_IRQ+0x1c>)
 80006be:	f00b fc0b 	bl	800bed8 <memcpy>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000178 	.word	0x20000178

080006d0 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 80006d8:	220c      	movs	r2, #12
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	4803      	ldr	r0, [pc, #12]	; (80006ec <Can_RX_Status_IRQ+0x1c>)
 80006de:	f00b fbfb 	bl	800bed8 <memcpy>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200001b8 	.word	0x200001b8

080006f0 <check_value>:
	.max = 10,
	.min = 0
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000702:	ed97 7a00 	vldr	s14, [r7]
 8000706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070e:	da09      	bge.n	8000724 <check_value+0x34>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	edd3 7a02 	vldr	s15, [r3, #8]
 8000716:	ed97 7a00 	vldr	s14, [r7]
 800071a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800071e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000722:	d801      	bhi.n	8000728 <check_value+0x38>
 8000724:	2302      	movs	r3, #2
 8000726:	e016      	b.n	8000756 <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	edd3 7a04 	vldr	s15, [r3, #16]
 800072e:	ed97 7a00 	vldr	s14, [r7]
 8000732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	da09      	bge.n	8000750 <check_value+0x60>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000742:	ed97 7a00 	vldr	s14, [r7]
 8000746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074e:	d801      	bhi.n	8000754 <check_value+0x64>
 8000750:	2301      	movs	r3, #1
 8000752:	e000      	b.n	8000756 <check_value+0x66>
	return LIMIT_OK;																	//OK
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <BLDC_main>:
	if(value < ptr->min)return ptr->min;
	return value;
}

//------------------------MAIN-------------------------
void BLDC_main(void){
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	f5ad 7d64 	sub.w	sp, sp, #912	; 0x390
 800076a:	af02      	add	r7, sp, #8
	HAL_Delay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f003 f94a 	bl	8003a08 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 8000774:	2128      	movs	r1, #40	; 0x28
 8000776:	48a5      	ldr	r0, [pc, #660]	; (8000a0c <BLDC_main+0x2a8>)
 8000778:	f001 f9b2 	bl	8001ae0 <SetSampleTime>
	SetTunings(&Current_PID, 0.0000005f, 0.5f, 0.0f, 1); //alva
 800077c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000780:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8000a10 <BLDC_main+0x2ac>
 8000784:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000788:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8000a14 <BLDC_main+0x2b0>
 800078c:	489f      	ldr	r0, [pc, #636]	; (8000a0c <BLDC_main+0x2a8>)
 800078e:	f001 f8ed 	bl	800196c <SetTunings>
//	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
	SetOutputLimits(&Current_PID, 0, 1499);
 8000792:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8000a18 <BLDC_main+0x2b4>
 8000796:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8000a10 <BLDC_main+0x2ac>
 800079a:	489c      	ldr	r0, [pc, #624]	; (8000a0c <BLDC_main+0x2a8>)
 800079c:	f001 f9d4 	bl	8001b48 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 80007a0:	2100      	movs	r1, #0
 80007a2:	489a      	ldr	r0, [pc, #616]	; (8000a0c <BLDC_main+0x2a8>)
 80007a4:	f001 fa80 	bl	8001ca8 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 80007a8:	2101      	movs	r1, #1
 80007aa:	4898      	ldr	r0, [pc, #608]	; (8000a0c <BLDC_main+0x2a8>)
 80007ac:	f001 fa28 	bl	8001c00 <SetMode>
	Initialize(&Current_PID);
 80007b0:	4896      	ldr	r0, [pc, #600]	; (8000a0c <BLDC_main+0x2a8>)
 80007b2:	f001 fa47 	bl	8001c44 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 80007b6:	2164      	movs	r1, #100	; 0x64
 80007b8:	4898      	ldr	r0, [pc, #608]	; (8000a1c <BLDC_main+0x2b8>)
 80007ba:	f001 f991 	bl	8001ae0 <SetSampleTime>
	SetTunings(&Velocity_PID, 0.0005f, 0.03f, 0.0f, 1);
 80007be:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80007c2:	ed9f 1a93 	vldr	s2, [pc, #588]	; 8000a10 <BLDC_main+0x2ac>
 80007c6:	eddf 0a96 	vldr	s1, [pc, #600]	; 8000a20 <BLDC_main+0x2bc>
 80007ca:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8000a24 <BLDC_main+0x2c0>
 80007ce:	4893      	ldr	r0, [pc, #588]	; (8000a1c <BLDC_main+0x2b8>)
 80007d0:	f001 f8cc 	bl	800196c <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 500);
 80007d4:	eddf 0a94 	vldr	s1, [pc, #592]	; 8000a28 <BLDC_main+0x2c4>
 80007d8:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8000a10 <BLDC_main+0x2ac>
 80007dc:	488f      	ldr	r0, [pc, #572]	; (8000a1c <BLDC_main+0x2b8>)
 80007de:	f001 f9b3 	bl	8001b48 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80007e2:	2100      	movs	r1, #0
 80007e4:	488d      	ldr	r0, [pc, #564]	; (8000a1c <BLDC_main+0x2b8>)
 80007e6:	f001 fa5f 	bl	8001ca8 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80007ea:	2101      	movs	r1, #1
 80007ec:	488b      	ldr	r0, [pc, #556]	; (8000a1c <BLDC_main+0x2b8>)
 80007ee:	f001 fa07 	bl	8001c00 <SetMode>
	Initialize(&Velocity_PID);
 80007f2:	488a      	ldr	r0, [pc, #552]	; (8000a1c <BLDC_main+0x2b8>)
 80007f4:	f001 fa26 	bl	8001c44 <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80007f8:	2164      	movs	r1, #100	; 0x64
 80007fa:	488c      	ldr	r0, [pc, #560]	; (8000a2c <BLDC_main+0x2c8>)
 80007fc:	f001 f970 	bl	8001ae0 <SetSampleTime>
	SetTunings(&Angle_PID, 10.0f, 0.0f, 0.0f, 1);
 8000800:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000804:	ed9f 1a82 	vldr	s2, [pc, #520]	; 8000a10 <BLDC_main+0x2ac>
 8000808:	eddf 0a81 	vldr	s1, [pc, #516]	; 8000a10 <BLDC_main+0x2ac>
 800080c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000810:	4886      	ldr	r0, [pc, #536]	; (8000a2c <BLDC_main+0x2c8>)
 8000812:	f001 f8ab 	bl	800196c <SetTunings>
	SetOutputLimits(&Angle_PID, -4000000, 4000000);
 8000816:	eddf 0a86 	vldr	s1, [pc, #536]	; 8000a30 <BLDC_main+0x2cc>
 800081a:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8000a34 <BLDC_main+0x2d0>
 800081e:	4883      	ldr	r0, [pc, #524]	; (8000a2c <BLDC_main+0x2c8>)
 8000820:	f001 f992 	bl	8001b48 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8000824:	2100      	movs	r1, #0
 8000826:	4881      	ldr	r0, [pc, #516]	; (8000a2c <BLDC_main+0x2c8>)
 8000828:	f001 fa3e 	bl	8001ca8 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 800082c:	2101      	movs	r1, #1
 800082e:	487f      	ldr	r0, [pc, #508]	; (8000a2c <BLDC_main+0x2c8>)
 8000830:	f001 f9e6 	bl	8001c00 <SetMode>
	Initialize(&Angle_PID);
 8000834:	487d      	ldr	r0, [pc, #500]	; (8000a2c <BLDC_main+0x2c8>)
 8000836:	f001 fa05 	bl	8001c44 <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 800083a:	487f      	ldr	r0, [pc, #508]	; (8000a38 <BLDC_main+0x2d4>)
 800083c:	f000 fe76 	bl	800152c <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 8000840:	487e      	ldr	r0, [pc, #504]	; (8000a3c <BLDC_main+0x2d8>)
 8000842:	f001 fa65 	bl	8001d10 <current_init>

	//calibrate DC current offset
	HAL_Delay(100); //let thing settle before starting
 8000846:	2064      	movs	r0, #100	; 0x64
 8000848:	f003 f8de 	bl	8003a08 <HAL_Delay>

	uint16_t current_offset_averaging = 100;
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	f8a7 3386 	strh.w	r3, [r7, #902]	; 0x386
	volatile int32_t current_offset = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
	while (current_offset_averaging){
 8000858:	e013      	b.n	8000882 <BLDC_main+0x11e>
		while(!Current_Callback_flag);
 800085a:	bf00      	nop
 800085c:	4b78      	ldr	r3, [pc, #480]	; (8000a40 <BLDC_main+0x2dc>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0fb      	beq.n	800085c <BLDC_main+0xf8>
		Current_Callback_flag = 0;
 8000864:	4b76      	ldr	r3, [pc, #472]	; (8000a40 <BLDC_main+0x2dc>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
		current_offset += IRQ_Current.Current_DC;
 800086a:	4b76      	ldr	r3, [pc, #472]	; (8000a44 <BLDC_main+0x2e0>)
 800086c:	68da      	ldr	r2, [r3, #12]
 800086e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000872:	4413      	add	r3, r2
 8000874:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
		current_offset_averaging--;
 8000878:	f8b7 3386 	ldrh.w	r3, [r7, #902]	; 0x386
 800087c:	3b01      	subs	r3, #1
 800087e:	f8a7 3386 	strh.w	r3, [r7, #902]	; 0x386
	while (current_offset_averaging){
 8000882:	f8b7 3386 	ldrh.w	r3, [r7, #902]	; 0x386
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1e7      	bne.n	800085a <BLDC_main+0xf6>
	}
	current_offset = current_offset/100;
 800088a:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800088e:	4a6e      	ldr	r2, [pc, #440]	; (8000a48 <BLDC_main+0x2e4>)
 8000890:	fb82 1203 	smull	r1, r2, r2, r3
 8000894:	1152      	asrs	r2, r2, #5
 8000896:	17db      	asrs	r3, r3, #31
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 800089e:	486b      	ldr	r0, [pc, #428]	; (8000a4c <BLDC_main+0x2e8>)
 80008a0:	f001 fa4c 	bl	8001d3c <voltage_temperature_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80008a4:	4a6a      	ldr	r2, [pc, #424]	; (8000a50 <BLDC_main+0x2ec>)
 80008a6:	2136      	movs	r1, #54	; 0x36
 80008a8:	486a      	ldr	r0, [pc, #424]	; (8000a54 <BLDC_main+0x2f0>)
 80008aa:	f001 fc9d 	bl	80021e8 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 80008ae:	4869      	ldr	r0, [pc, #420]	; (8000a54 <BLDC_main+0x2f0>)
 80008b0:	f001 fc7e 	bl	80021b0 <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 80008b4:	f000 fc68 	bl	8001188 <CTRL_init_PWM>

	HAL_Delay(100); //let thing settle before starting
 80008b8:	2064      	movs	r0, #100	; 0x64
 80008ba:	f003 f8a5 	bl	8003a08 <HAL_Delay>

	Current IRQ_Current_BUFF = {0};
 80008be:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 80008cc:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
	Encoders IRQ_Encoders_BUFF = {0};
 80008d6:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 80008e6:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]

	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385

	float velocity_temp[200] = {0};
 80008f8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80008fc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8000900:	4618      	mov	r0, r3
 8000902:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000906:	461a      	mov	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f00b fab1 	bl	800be70 <memset>
	uint32_t last_pos = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
	uint8_t velocity_index = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
	float velocity = 0;
 800091a:	f04f 0300 	mov.w	r3, #0
 800091e:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378

	int32_t position_overflow = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 8000928:	bf00      	nop
 800092a:	4b45      	ldr	r3, [pc, #276]	; (8000a40 <BLDC_main+0x2dc>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0fb      	beq.n	800092a <BLDC_main+0x1c6>

		Current_Callback_flag = 0;
 8000932:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <BLDC_main+0x2dc>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 8000938:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <BLDC_main+0x2e0>)
 800093a:	f507 7453 	add.w	r4, r7, #844	; 0x34c
 800093e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8000944:	4a44      	ldr	r2, [pc, #272]	; (8000a58 <BLDC_main+0x2f4>)
 8000946:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800094a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800094e:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <BLDC_main+0x2f8>)
 8000954:	f507 744c 	add.w	r4, r7, #816	; 0x330
 8000958:	461d      	mov	r5, r3
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	6023      	str	r3, [r4, #0]
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8000962:	4a3f      	ldr	r2, [pc, #252]	; (8000a60 <BLDC_main+0x2fc>)
 8000964:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8000968:	ca07      	ldmia	r2, {r0, r1, r2}
 800096a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		IRQ_Current_BUFF.Current_DC -= current_offset;
 800096e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000972:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358

		//start calibration
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 800097c:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000980:	2b00      	cmp	r3, #0
 8000982:	d107      	bne.n	8000994 <BLDC_main+0x230>
 8000984:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8000988:	2b04      	cmp	r3, #4
 800098a:	d103      	bne.n	8000994 <BLDC_main+0x230>
 800098c:	2302      	movs	r3, #2
 800098e:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
 8000992:	e074      	b.n	8000a7e <BLDC_main+0x31a>

		//reset errors
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8000994:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000998:	2b00      	cmp	r3, #0
 800099a:	d107      	bne.n	80009ac <BLDC_main+0x248>
 800099c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80009a0:	2b05      	cmp	r3, #5
 80009a2:	d103      	bne.n	80009ac <BLDC_main+0x248>
 80009a4:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <BLDC_main+0x300>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	e068      	b.n	8000a7e <BLDC_main+0x31a>

		//start motor when not running
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 80009ac:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d113      	bne.n	80009dc <BLDC_main+0x278>
 80009b4:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d10f      	bne.n	80009dc <BLDC_main+0x278>
			Status = BLDC_RUNNING;
 80009bc:	2303      	movs	r3, #3
 80009be:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
			SetMode(&Current_PID,  AUTOMATIC);
 80009c2:	2101      	movs	r1, #1
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <BLDC_main+0x2a8>)
 80009c6:	f001 f91b 	bl	8001c00 <SetMode>
			SetMode(&Velocity_PID,  AUTOMATIC);
 80009ca:	2101      	movs	r1, #1
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <BLDC_main+0x2b8>)
 80009ce:	f001 f917 	bl	8001c00 <SetMode>
			SetMode(&Angle_PID,  AUTOMATIC);
 80009d2:	2101      	movs	r1, #1
 80009d4:	4815      	ldr	r0, [pc, #84]	; (8000a2c <BLDC_main+0x2c8>)
 80009d6:	f001 f913 	bl	8001c00 <SetMode>
 80009da:	e050      	b.n	8000a7e <BLDC_main+0x31a>
		}

		//stop motor when running
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 80009dc:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d141      	bne.n	8000a68 <BLDC_main+0x304>
 80009e4:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d13d      	bne.n	8000a68 <BLDC_main+0x304>
			Status = BLDC_STOPPED_WITH_BREAK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
			SetMode(&Current_PID,  MANUAL);
 80009f2:	2100      	movs	r1, #0
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <BLDC_main+0x2a8>)
 80009f6:	f001 f903 	bl	8001c00 <SetMode>
			SetMode(&Velocity_PID,  MANUAL);
 80009fa:	2100      	movs	r1, #0
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <BLDC_main+0x2b8>)
 80009fe:	f001 f8ff 	bl	8001c00 <SetMode>
			SetMode(&Angle_PID,  MANUAL);
 8000a02:	2100      	movs	r1, #0
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <BLDC_main+0x2c8>)
 8000a06:	f001 f8fb 	bl	8001c00 <SetMode>
 8000a0a:	e038      	b.n	8000a7e <BLDC_main+0x31a>
 8000a0c:	20000204 	.word	0x20000204
 8000a10:	00000000 	.word	0x00000000
 8000a14:	350637bd 	.word	0x350637bd
 8000a18:	44bb6000 	.word	0x44bb6000
 8000a1c:	20000244 	.word	0x20000244
 8000a20:	3cf5c28f 	.word	0x3cf5c28f
 8000a24:	3a03126f 	.word	0x3a03126f
 8000a28:	43fa0000 	.word	0x43fa0000
 8000a2c:	20000284 	.word	0x20000284
 8000a30:	4a742400 	.word	0x4a742400
 8000a34:	ca742400 	.word	0xca742400
 8000a38:	080006b1 	.word	0x080006b1
 8000a3c:	08000661 	.word	0x08000661
 8000a40:	20000150 	.word	0x20000150
 8000a44:	20000160 	.word	0x20000160
 8000a48:	51eb851f 	.word	0x51eb851f
 8000a4c:	08000691 	.word	0x08000691
 8000a50:	080006d1 	.word	0x080006d1
 8000a54:	2000090c 	.word	0x2000090c
 8000a58:	20000170 	.word	0x20000170
 8000a5c:	20000178 	.word	0x20000178
 8000a60:	200001b8 	.word	0x200001b8
 8000a64:	2000015c 	.word	0x2000015c
		}
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8000a68:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d106      	bne.n	8000a7e <BLDC_main+0x31a>
 8000a70:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d102      	bne.n	8000a7e <BLDC_main+0x31a>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385

		//time keepers
		timing_CAN_feedback++;
 8000a7e:	4bcf      	ldr	r3, [pc, #828]	; (8000dbc <BLDC_main+0x658>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	4acd      	ldr	r2, [pc, #820]	; (8000dbc <BLDC_main+0x658>)
 8000a86:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8000a88:	4bcd      	ldr	r3, [pc, #820]	; (8000dc0 <BLDC_main+0x65c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	4acc      	ldr	r2, [pc, #816]	; (8000dc0 <BLDC_main+0x65c>)
 8000a90:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		LIMITS_t Limit_callback;

		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
 8000a98:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000a9c:	ee07 3a90 	vmov	s15, r3
 8000aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8000aa8:	48c6      	ldr	r0, [pc, #792]	; (8000dc4 <BLDC_main+0x660>)
 8000aaa:	f7ff fe21 	bl	80006f0 <check_value>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 0; //warning
 8000ab4:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 0; //error
 8000ac6:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000aca:	105b      	asrs	r3, r3, #1
 8000acc:	f003 0201 	and.w	r2, r3, #1
 8000ad0:	4bbd      	ldr	r3, [pc, #756]	; (8000dc8 <BLDC_main+0x664>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	4abc      	ldr	r2, [pc, #752]	; (8000dc8 <BLDC_main+0x664>)
 8000ad8:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 8000ada:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000ade:	ee07 3a90 	vmov	s15, r3
 8000ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aea:	48b8      	ldr	r0, [pc, #736]	; (8000dcc <BLDC_main+0x668>)
 8000aec:	f7ff fe00 	bl	80006f0 <check_value>
 8000af0:	4603      	mov	r3, r0
 8000af2:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 1; //warning
 8000af6:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000b04:	4313      	orrs	r3, r2
 8000b06:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 1; //error
 8000b0a:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b0e:	f003 0202 	and.w	r2, r3, #2
 8000b12:	4bad      	ldr	r3, [pc, #692]	; (8000dc8 <BLDC_main+0x664>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	4aab      	ldr	r2, [pc, #684]	; (8000dc8 <BLDC_main+0x664>)
 8000b1a:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 8000b1c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b20:	ee07 3a90 	vmov	s15, r3
 8000b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b28:	eeb0 0a67 	vmov.f32	s0, s15
 8000b2c:	48a8      	ldr	r0, [pc, #672]	; (8000dd0 <BLDC_main+0x66c>)
 8000b2e:	f7ff fddf 	bl	80006f0 <check_value>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 2; //warning
 8000b38:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000b46:	4313      	orrs	r3, r2
 8000b48:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 2; //error
 8000b4c:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b50:	105b      	asrs	r3, r3, #1
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	f003 0204 	and.w	r2, r3, #4
 8000b58:	4b9b      	ldr	r3, [pc, #620]	; (8000dc8 <BLDC_main+0x664>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	4a9a      	ldr	r2, [pc, #616]	; (8000dc8 <BLDC_main+0x664>)
 8000b60:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 8000b62:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b72:	4898      	ldr	r0, [pc, #608]	; (8000dd4 <BLDC_main+0x670>)
 8000b74:	f7ff fdbc 	bl	80006f0 <check_value>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 3; //warning
 8000b7e:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8000b92:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b96:	105b      	asrs	r3, r3, #1
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	f003 0208 	and.w	r2, r3, #8
 8000b9e:	4b8a      	ldr	r3, [pc, #552]	; (8000dc8 <BLDC_main+0x664>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	4a88      	ldr	r2, [pc, #544]	; (8000dc8 <BLDC_main+0x664>)
 8000ba6:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 8000ba8:	f8b7 3348 	ldrh.w	r3, [r7, #840]	; 0x348
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb8:	4887      	ldr	r0, [pc, #540]	; (8000dd8 <BLDC_main+0x674>)
 8000bba:	f7ff fd99 	bl	80006f0 <check_value>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 4; //warning
 8000bc4:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 4; //error
 8000bd8:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000bdc:	105b      	asrs	r3, r3, #1
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	f003 0210 	and.w	r2, r3, #16
 8000be4:	4b78      	ldr	r3, [pc, #480]	; (8000dc8 <BLDC_main+0x664>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	4a77      	ldr	r2, [pc, #476]	; (8000dc8 <BLDC_main+0x664>)
 8000bec:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 8000bee:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8000bf2:	ee07 3a90 	vmov	s15, r3
 8000bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfe:	4877      	ldr	r0, [pc, #476]	; (8000ddc <BLDC_main+0x678>)
 8000c00:	f7ff fd76 	bl	80006f0 <check_value>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 5; //warning
 8000c0a:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c0e:	015b      	lsls	r3, r3, #5
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 5; //error
 8000c1e:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c22:	105b      	asrs	r3, r3, #1
 8000c24:	015b      	lsls	r3, r3, #5
 8000c26:	f003 0220 	and.w	r2, r3, #32
 8000c2a:	4b67      	ldr	r3, [pc, #412]	; (8000dc8 <BLDC_main+0x664>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	4a65      	ldr	r2, [pc, #404]	; (8000dc8 <BLDC_main+0x664>)
 8000c32:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 8000c34:	f997 334a 	ldrsb.w	r3, [r7, #842]	; 0x34a
 8000c38:	ee07 3a90 	vmov	s15, r3
 8000c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c40:	eeb0 0a67 	vmov.f32	s0, s15
 8000c44:	4866      	ldr	r0, [pc, #408]	; (8000de0 <BLDC_main+0x67c>)
 8000c46:	f7ff fd53 	bl	80006f0 <check_value>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 6; //warning
 8000c50:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5a:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 6; //error
 8000c64:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c68:	105b      	asrs	r3, r3, #1
 8000c6a:	019b      	lsls	r3, r3, #6
 8000c6c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c70:	4b55      	ldr	r3, [pc, #340]	; (8000dc8 <BLDC_main+0x664>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	4a54      	ldr	r2, [pc, #336]	; (8000dc8 <BLDC_main+0x664>)
 8000c78:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 8000c7a:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c86:	eeb0 0a67 	vmov.f32	s0, s15
 8000c8a:	4855      	ldr	r0, [pc, #340]	; (8000de0 <BLDC_main+0x67c>)
 8000c8c:	f7ff fd30 	bl	80006f0 <check_value>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 7; //warning
 8000c96:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c9a:	01db      	lsls	r3, r3, #7
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8000ca8:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000cac:	105b      	asrs	r3, r3, #1
 8000cae:	01db      	lsls	r3, r3, #7
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <BLDC_main+0x664>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	4a43      	ldr	r2, [pc, #268]	; (8000dc8 <BLDC_main+0x664>)
 8000cba:	6013      	str	r3, [r2, #0]

		if (Angle_PID.Input < (IRQ_STATUS_BUFF.setpoint - 20000) || Angle_PID.Input > (IRQ_STATUS_BUFF.setpoint + 20000)) warning |= (1 << 8); //warning
 8000cbc:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <BLDC_main+0x680>)
 8000cbe:	ed93 7a00 	vldr	s14, [r3]
 8000cc2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000cc6:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8000cca:	3b20      	subs	r3, #32
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	d410      	bmi.n	8000d00 <BLDC_main+0x59c>
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <BLDC_main+0x680>)
 8000ce0:	ed93 7a00 	vldr	s14, [r3]
 8000ce4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000ce8:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000cec:	3320      	adds	r3, #32
 8000cee:	ee07 3a90 	vmov	s15, r3
 8000cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfe:	dd05      	ble.n	8000d0c <BLDC_main+0x5a8>
 8000d00:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8000d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d08:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370

		//-------------------RUN FIR FILTER---------------------
		float test = Update_FIR_filter((float)(IRQ_Current_BUFF.Current_DC));
 8000d0c:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d18:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1c:	f7ff fc56 	bl	80005cc <Update_FIR_filter>
 8000d20:	ed87 0ad9 	vstr	s0, [r7, #868]	; 0x364

		//----------------------position-----------------
		if (last_pos > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8000d24:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8000d28:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <BLDC_main+0x684>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d90a      	bls.n	8000d44 <BLDC_main+0x5e0>
 8000d2e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000d32:	4a2e      	ldr	r2, [pc, #184]	; (8000dec <BLDC_main+0x688>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d805      	bhi.n	8000d44 <BLDC_main+0x5e0>
 8000d38:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8000d42:	e00e      	b.n	8000d62 <BLDC_main+0x5fe>
		else if (last_pos < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8000d44:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8000d48:	4a28      	ldr	r2, [pc, #160]	; (8000dec <BLDC_main+0x688>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d809      	bhi.n	8000d62 <BLDC_main+0x5fe>
 8000d4e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000d52:	4a25      	ldr	r2, [pc, #148]	; (8000de8 <BLDC_main+0x684>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d904      	bls.n	8000d62 <BLDC_main+0x5fe>
 8000d58:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374

		//-------------------calculate velocity------------------
		velocity_temp[velocity_index] = (IRQ_Encoders_BUFF.Encoder1_pos - last_pos);
 8000d62:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8000d66:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8000d70:	ee07 2a90 	vmov	s15, r2
 8000d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d78:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8000d7c:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	edc3 7a00 	vstr	s15, [r3]
		last_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8000d88:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000d8c:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		velocity_index++;
 8000d90:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8000d94:	3301      	adds	r3, #1
 8000d96:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
		velocity_index = velocity_index % 200;
 8000d9a:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <BLDC_main+0x68c>)
 8000da0:	fba2 1203 	umull	r1, r2, r2, r3
 8000da4:	0992      	lsrs	r2, r2, #6
 8000da6:	21c8      	movs	r1, #200	; 0xc8
 8000da8:	fb01 f202 	mul.w	r2, r1, r2
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
		for(int i = 0; i > 200; i++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8000db8:	e031      	b.n	8000e1e <BLDC_main+0x6ba>
 8000dba:	bf00      	nop
 8000dbc:	20000154 	.word	0x20000154
 8000dc0:	20000158 	.word	0x20000158
 8000dc4:	200000a0 	.word	0x200000a0
 8000dc8:	2000015c 	.word	0x2000015c
 8000dcc:	20000028 	.word	0x20000028
 8000dd0:	20000040 	.word	0x20000040
 8000dd4:	200000b8 	.word	0x200000b8
 8000dd8:	20000070 	.word	0x20000070
 8000ddc:	20000058 	.word	0x20000058
 8000de0:	20000088 	.word	0x20000088
 8000de4:	20000284 	.word	0x20000284
 8000de8:	00041eb0 	.word	0x00041eb0
 8000dec:	00015f8f 	.word	0x00015f8f
 8000df0:	51eb851f 	.word	0x51eb851f
			velocity += velocity_temp[i];
 8000df4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000df8:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8000dfc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	ed97 7ade 	vldr	s14, [r7, #888]	; 0x378
 8000e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e10:	edc7 7ade 	vstr	s15, [r7, #888]	; 0x378
		for(int i = 0; i > 200; i++){
 8000e14:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8000e1e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000e22:	2bc8      	cmp	r3, #200	; 0xc8
 8000e24:	dce6      	bgt.n	8000df4 <BLDC_main+0x690>
		#endif




		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000;
 8000e26:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e32:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000e36:	4aa8      	ldr	r2, [pc, #672]	; (80010d8 <BLDC_main+0x974>)
 8000e38:	fb02 f303 	mul.w	r3, r2, r3
 8000e3c:	ee07 3a90 	vmov	s15, r3
 8000e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e48:	4ba4      	ldr	r3, [pc, #656]	; (80010dc <BLDC_main+0x978>)
 8000e4a:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)(abs(IRQ_Encoders_BUFF.Velocity));
 8000e4e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bfb8      	it	lt
 8000e56:	425b      	neglt	r3, r3
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e60:	4b9f      	ldr	r3, [pc, #636]	; (80010e0 <BLDC_main+0x97c>)
 8000e62:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = test;
 8000e66:	4a9f      	ldr	r2, [pc, #636]	; (80010e4 <BLDC_main+0x980>)
 8000e68:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000e6c:	6013      	str	r3, [r2, #0]

		Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
 8000e6e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7a:	4b98      	ldr	r3, [pc, #608]	; (80010dc <BLDC_main+0x978>)
 8000e7c:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Angle_PID);
 8000e80:	4896      	ldr	r0, [pc, #600]	; (80010dc <BLDC_main+0x978>)
 8000e82:	f000 fcc1 	bl	8001808 <Compute>

		Velocity_PID.Setpoint = (abs(Angle_PID.Output));
 8000e86:	4b95      	ldr	r3, [pc, #596]	; (80010dc <BLDC_main+0x978>)
 8000e88:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e90:	ee17 3a90 	vmov	r3, s15
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bfb8      	it	lt
 8000e98:	425b      	neglt	r3, r3
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea2:	4b8f      	ldr	r3, [pc, #572]	; (80010e0 <BLDC_main+0x97c>)
 8000ea4:	edc3 7a02 	vstr	s15, [r3, #8]

		Compute(&Velocity_PID);
 8000ea8:	488d      	ldr	r0, [pc, #564]	; (80010e0 <BLDC_main+0x97c>)
 8000eaa:	f000 fcad 	bl	8001808 <Compute>

		int8_t direction = -1;
 8000eae:	23ff      	movs	r3, #255	; 0xff
 8000eb0:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		#ifndef ZERO_GRAVITY
//		if(IRQ_Voltage_Temp_BUFF.V_Bat > 10000)SetMode(&Current_PID,  AUTOMATIC);//Limit(&LIMIT_Current, Velocity_PID.Output);
//		else SetMode(&Current_PID,  MANUAL);
		//SetMode(&Angle_PID,  AUTOMATIC);
		Current_PID.Setpoint = 500;
 8000eb4:	4b8b      	ldr	r3, [pc, #556]	; (80010e4 <BLDC_main+0x980>)
 8000eb6:	4a8c      	ldr	r2, [pc, #560]	; (80010e8 <BLDC_main+0x984>)
 8000eb8:	609a      	str	r2, [r3, #8]
//		Current_PID.Setpoint = Velocity_PID.Output;

		if(Angle_PID.Output > 0) direction = 1;
 8000eba:	4b88      	ldr	r3, [pc, #544]	; (80010dc <BLDC_main+0x978>)
 8000ebc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ec0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec8:	dd03      	ble.n	8000ed2 <BLDC_main+0x76e>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
 8000ed0:	e002      	b.n	8000ed8 <BLDC_main+0x774>
		else direction = -1;
 8000ed2:	23ff      	movs	r3, #255	; 0xff
 8000ed4:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		Current_PID.Setpoint = weight*(fast_sin_2((abs)((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000));
		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
		else direction = 1;
		#endif

		Compute(&Current_PID);
 8000ed8:	4882      	ldr	r0, [pc, #520]	; (80010e4 <BLDC_main+0x980>)
 8000eda:	f000 fc95 	bl	8001808 <Compute>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(error){
 8000ede:	4b83      	ldr	r3, [pc, #524]	; (80010ec <BLDC_main+0x988>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d005      	beq.n	8000ef2 <BLDC_main+0x78e>
			Status = BLDC_ERROR;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
			shutoff();
 8000eec:	f000 faea 	bl	80014c4 <shutoff>
 8000ef0:	e056      	b.n	8000fa0 <BLDC_main+0x83c>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8000ef2:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d104      	bne.n	8000f04 <BLDC_main+0x7a0>
			shutoff();
 8000efa:	f000 fae3 	bl	80014c4 <shutoff>
			shutdown();
 8000efe:	f000 faf3 	bl	80014e8 <shutdown>
 8000f02:	e04d      	b.n	8000fa0 <BLDC_main+0x83c>
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8000f04:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d11b      	bne.n	8000f44 <BLDC_main+0x7e0>
			uint16_t test2 = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8a7 3362 	strh.w	r3, [r7, #866]	; 0x362
			if(Current_PID.Output != NAN)test2 = (uint16_t)Current_PID.Output;
 8000f12:	4b74      	ldr	r3, [pc, #464]	; (80010e4 <BLDC_main+0x980>)
 8000f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1c:	ee17 3a90 	vmov	r3, s15
 8000f20:	f8a7 3362 	strh.w	r3, [r7, #866]	; 0x362
//			shutoff();
//			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), test2);
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), 50);
 8000f24:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000f28:	4971      	ldr	r1, [pc, #452]	; (80010f0 <BLDC_main+0x98c>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f8ee 	bl	800110c <mech_to_el_deg>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	335a      	adds	r3, #90	; 0x5a
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	2132      	movs	r1, #50	; 0x32
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f96f 	bl	8001220 <inverter>
 8000f42:	e02d      	b.n	8000fa0 <BLDC_main+0x83c>


			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), (uint16_t)Limit(&LIMIT_V_motor, Current_PID.Output));
		}
		else if (Status == BLDC_RUNNING){
 8000f44:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d122      	bne.n	8000f92 <BLDC_main+0x82e>
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Velocity_PID.Output);
 8000f4c:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000f50:	4967      	ldr	r1, [pc, #412]	; (80010f0 <BLDC_main+0x98c>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f8da 	bl	800110c <mech_to_el_deg>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f997 336b 	ldrsb.w	r3, [r7, #875]	; 0x36b
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	0049      	lsls	r1, r1, #1
 8000f66:	440b      	add	r3, r1
 8000f68:	4619      	mov	r1, r3
 8000f6a:	0109      	lsls	r1, r1, #4
 8000f6c:	1acb      	subs	r3, r1, r3
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4413      	add	r3, r2
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4a59      	ldr	r2, [pc, #356]	; (80010e0 <BLDC_main+0x97c>)
 8000f7a:	edd2 7a01 	vldr	s15, [r2, #4]
 8000f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f82:	ee17 2a90 	vmov	r2, s15
 8000f86:	b292      	uxth	r2, r2
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f948 	bl	8001220 <inverter>
 8000f90:	e006      	b.n	8000fa0 <BLDC_main+0x83c>
//			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 8000f92:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d102      	bne.n	8000fa0 <BLDC_main+0x83c>
			//inverter(0, (uint16_t)Limit(&LIMIT_V_motor, Velocity_PID.Output));
			Status = BLDC_STOPPED_WITH_BREAK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8000fa0:	4b54      	ldr	r3, [pc, #336]	; (80010f4 <BLDC_main+0x990>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b95      	cmp	r3, #149	; 0x95
 8000fa6:	d965      	bls.n	8001074 <BLDC_main+0x910>
			timing_CAN_feedback = 0;
 8000fa8:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <BLDC_main+0x990>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8000fae:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <BLDC_main+0x994>)
 8000fb0:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8000fb4:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8000fb6:	4b4d      	ldr	r3, [pc, #308]	; (80010ec <BLDC_main+0x988>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a4f      	ldr	r2, [pc, #316]	; (80010f8 <BLDC_main+0x994>)
 8000fbc:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8000fbe:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000fc2:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <BLDC_main+0x994>)
 8000fc4:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8000fc6:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000fca:	4a4b      	ldr	r2, [pc, #300]	; (80010f8 <BLDC_main+0x994>)
 8000fcc:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8000fce:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b48      	ldr	r3, [pc, #288]	; (80010f8 <BLDC_main+0x994>)
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8000fd8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000fdc:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <BLDC_main+0x994>)
 8000fde:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8000fe0:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <BLDC_main+0x994>)
 8000fe6:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8000fe8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000fec:	4a42      	ldr	r2, [pc, #264]	; (80010f8 <BLDC_main+0x994>)
 8000fee:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8000ff0:	f8b7 3348 	ldrh.w	r3, [r7, #840]	; 0x348
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <BLDC_main+0x994>)
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8000ffa:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8000ffe:	4a3e      	ldr	r2, [pc, #248]	; (80010f8 <BLDC_main+0x994>)
 8001000:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8001002:	f997 334a 	ldrsb.w	r3, [r7, #842]	; 0x34a
 8001006:	b21a      	sxth	r2, r3
 8001008:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <BLDC_main+0x994>)
 800100a:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 800100c:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <BLDC_main+0x994>)
 8001014:	865a      	strh	r2, [r3, #50]	; 0x32

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8001016:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800101a:	4a37      	ldr	r2, [pc, #220]	; (80010f8 <BLDC_main+0x994>)
 800101c:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 800101e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001022:	4a35      	ldr	r2, [pc, #212]	; (80010f8 <BLDC_main+0x994>)
 8001024:	6153      	str	r3, [r2, #20]
//			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <BLDC_main+0x978>)
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001030:	ee17 2a90 	vmov	r2, s15
 8001034:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <BLDC_main+0x994>)
 8001036:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 8001038:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800103c:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <BLDC_main+0x994>)
 800103e:	61d3      	str	r3, [r2, #28]
//			Feedback.Position_Velocity = (int32_t)velocity;
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8001040:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <BLDC_main+0x994>)
 8001042:	f240 4136 	movw	r1, #1078	; 0x436
 8001046:	482d      	ldr	r0, [pc, #180]	; (80010fc <BLDC_main+0x998>)
 8001048:	f001 f90a 	bl	8002260 <FDCAN_sendData>

			//-----------------PRINTF DEBUGGING-------------------
			//will print same info as on CAN-BUS
			#ifdef PRINT_DEBUG
			PrintServerPrintf(
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <BLDC_main+0x994>)
 800104e:	6a19      	ldr	r1, [r3, #32]
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <BLDC_main+0x994>)
 8001052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <BLDC_main+0x994>)
 8001056:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <BLDC_main+0x994>)
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	edd7 7ad9 	vldr	s15, [r7, #868]	; 0x364
 8001060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001064:	ee17 4a90 	vmov	r4, s15
 8001068:	9401      	str	r4, [sp, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	4603      	mov	r3, r0
 800106e:	4824      	ldr	r0, [pc, #144]	; (8001100 <BLDC_main+0x99c>)
 8001070:	f000 fe28 	bl	8001cc4 <PrintServerPrintf>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <BLDC_main+0x988>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <BLDC_main+0x928>
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001086:	f005 ffa7 	bl	8006fd8 <HAL_GPIO_WritePin>
 800108a:	e006      	b.n	800109a <BLDC_main+0x936>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f005 ff9f 	bl	8006fd8 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 800109a:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <BLDC_main+0x94a>
 80010a2:	2201      	movs	r2, #1
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <BLDC_main+0x9a0>)
 80010a8:	f005 ff96 	bl	8006fd8 <HAL_GPIO_WritePin>
 80010ac:	e004      	b.n	80010b8 <BLDC_main+0x954>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <BLDC_main+0x9a0>)
 80010b4:	f005 ff90 	bl	8006fd8 <HAL_GPIO_WritePin>

		#ifndef RUNNING_LED_DEBUG
		#ifndef RUNNING_LED_DEBUG2
		if(running_LED_timing >= LOOP_FREQ_KHZ*100){
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <BLDC_main+0x9a4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80010c0:	4293      	cmp	r3, r2
 80010c2:	f67f ac31 	bls.w	8000928 <BLDC_main+0x1c4>
			running_LED_timing = 0;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <BLDC_main+0x9a4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <BLDC_main+0x9a0>)
 80010d0:	f005 ff9a 	bl	8007008 <HAL_GPIO_TogglePin>
	while(1){
 80010d4:	e428      	b.n	8000928 <BLDC_main+0x1c4>
 80010d6:	bf00      	nop
 80010d8:	00057e40 	.word	0x00057e40
 80010dc:	20000284 	.word	0x20000284
 80010e0:	20000244 	.word	0x20000244
 80010e4:	20000204 	.word	0x20000204
 80010e8:	43fa0000 	.word	0x43fa0000
 80010ec:	2000015c 	.word	0x2000015c
 80010f0:	0004d774 	.word	0x0004d774
 80010f4:	20000154 	.word	0x20000154
 80010f8:	200001c4 	.word	0x200001c4
 80010fc:	2000090c 	.word	0x2000090c
 8001100:	0800c790 	.word	0x0800c790
 8001104:	48000800 	.word	0x48000800
 8001108:	20000158 	.word	0x20000158

0800110c <mech_to_el_deg>:
		dac_value(test);
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	//return (int16_t)((int32_t)((int32_t)(((int32_t)((int32_t)angle_deg)-offset_deg)%deg_pr_pole))/(deg_pr_pole/360));
	return (int16_t)((abs(((angle_deg)-offset_deg+360000)%(deg_pr_pole)))/(1000/17))%360;
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8001120:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <mech_to_el_deg+0x70>)
 8001126:	fb82 1203 	smull	r1, r2, r2, r3
 800112a:	441a      	add	r2, r3
 800112c:	1391      	asrs	r1, r2, #14
 800112e:	17da      	asrs	r2, r3, #31
 8001130:	1a8a      	subs	r2, r1, r2
 8001132:	f245 21b8 	movw	r1, #21176	; 0x52b8
 8001136:	fb01 f202 	mul.w	r2, r1, r2
 800113a:	1a9a      	subs	r2, r3, r2
 800113c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8001140:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <mech_to_el_deg+0x74>)
 8001146:	fb82 1203 	smull	r1, r2, r2, r3
 800114a:	441a      	add	r2, r3
 800114c:	1152      	asrs	r2, r2, #5
 800114e:	17db      	asrs	r3, r3, #31
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	b21b      	sxth	r3, r3
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <mech_to_el_deg+0x78>)
 8001156:	fb82 1203 	smull	r1, r2, r2, r3
 800115a:	441a      	add	r2, r3
 800115c:	1211      	asrs	r1, r2, #8
 800115e:	17da      	asrs	r2, r3, #31
 8001160:	1a8a      	subs	r2, r1, r2
 8001162:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001166:	fb01 f202 	mul.w	r2, r1, r2
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	b21b      	sxth	r3, r3
//	return (int16_t)((((int32_t)((int32_t)19400)-offset_deg)%(deg_pr_pole))/(1000/17));
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	c6119a11 	.word	0xc6119a11
 8001180:	8d3dcb09 	.word	0x8d3dcb09
 8001184:	b60b60b7 	.word	0xb60b60b7

08001188 <CTRL_init_PWM>:

//PWM setup
#define duty_max 1499
#define pi 3.1415926535

void CTRL_init_PWM(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 800118c:	2100      	movs	r1, #0
 800118e:	4821      	ldr	r0, [pc, #132]	; (8001214 <CTRL_init_PWM+0x8c>)
 8001190:	f007 feb6 	bl	8008f00 <HAL_TIM_PWM_Start>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <CTRL_init_PWM+0x16>
 800119a:	f001 fe2f 	bl	8002dfc <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 800119e:	2100      	movs	r1, #0
 80011a0:	481c      	ldr	r0, [pc, #112]	; (8001214 <CTRL_init_PWM+0x8c>)
 80011a2:	f009 f841 	bl	800a228 <HAL_TIMEx_PWMN_Start>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <CTRL_init_PWM+0x28>
 80011ac:	f001 fe26 	bl	8002dfc <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80011b0:	2104      	movs	r1, #4
 80011b2:	4818      	ldr	r0, [pc, #96]	; (8001214 <CTRL_init_PWM+0x8c>)
 80011b4:	f007 fea4 	bl	8008f00 <HAL_TIM_PWM_Start>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <CTRL_init_PWM+0x3a>
 80011be:	f001 fe1d 	bl	8002dfc <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80011c2:	2104      	movs	r1, #4
 80011c4:	4813      	ldr	r0, [pc, #76]	; (8001214 <CTRL_init_PWM+0x8c>)
 80011c6:	f009 f82f 	bl	800a228 <HAL_TIMEx_PWMN_Start>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <CTRL_init_PWM+0x4c>
 80011d0:	f001 fe14 	bl	8002dfc <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80011d4:	2108      	movs	r1, #8
 80011d6:	480f      	ldr	r0, [pc, #60]	; (8001214 <CTRL_init_PWM+0x8c>)
 80011d8:	f007 fe92 	bl	8008f00 <HAL_TIM_PWM_Start>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <CTRL_init_PWM+0x5e>
 80011e2:	f001 fe0b 	bl	8002dfc <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80011e6:	2108      	movs	r1, #8
 80011e8:	480a      	ldr	r0, [pc, #40]	; (8001214 <CTRL_init_PWM+0x8c>)
 80011ea:	f009 f81d 	bl	800a228 <HAL_TIMEx_PWMN_Start>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <CTRL_init_PWM+0x70>
 80011f4:	f001 fe02 	bl	8002dfc <Error_Handler>

	TIM1->CCR1 = 0;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <CTRL_init_PWM+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <CTRL_init_PWM+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <CTRL_init_PWM+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <CTRL_init_PWM+0x94>)
 800120c:	f007 fdac 	bl	8008d68 <HAL_TIM_Base_Start_IT>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000bf4 	.word	0x20000bf4
 8001218:	40012c00 	.word	0x40012c00
 800121c:	20000c40 	.word	0x20000c40

08001220 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage){
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	460a      	mov	r2, r1
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	4613      	mov	r3, r2
 800122e:	80bb      	strh	r3, [r7, #4]
	angle = (angle+360*2)%360;
 8001230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001234:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001238:	4a9c      	ldr	r2, [pc, #624]	; (80014ac <inverter+0x28c>)
 800123a:	fb82 1203 	smull	r1, r2, r2, r3
 800123e:	441a      	add	r2, r3
 8001240:	1211      	asrs	r1, r2, #8
 8001242:	17da      	asrs	r2, r3, #31
 8001244:	1a8a      	subs	r2, r1, r2
 8001246:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800124a:	fb01 f202 	mul.w	r2, r1, r2
 800124e:	1a9a      	subs	r2, r3, r2
 8001250:	4613      	mov	r3, r2
 8001252:	80fb      	strh	r3, [r7, #6]
	angle = (360 - angle);
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800125a:	b29b      	uxth	r3, r3
 800125c:	80fb      	strh	r3, [r7, #6]
	angle = angle%360;
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	4a92      	ldr	r2, [pc, #584]	; (80014ac <inverter+0x28c>)
 8001264:	fb82 1203 	smull	r1, r2, r2, r3
 8001268:	441a      	add	r2, r3
 800126a:	1211      	asrs	r1, r2, #8
 800126c:	17da      	asrs	r2, r3, #31
 800126e:	1a8a      	subs	r2, r1, r2
 8001270:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001274:	fb01 f202 	mul.w	r2, r1, r2
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 8001288:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800128c:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <inverter+0x290>)
 800128e:	fb83 1302 	smull	r1, r3, r3, r2
 8001292:	4413      	add	r3, r2
 8001294:	1159      	asrs	r1, r3, #5
 8001296:	17d3      	asrs	r3, r2, #31
 8001298:	1ac9      	subs	r1, r1, r3
 800129a:	460b      	mov	r3, r1
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	1a5b      	subs	r3, r3, r1
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ae:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 80012b2:	88bb      	ldrh	r3, [r7, #4]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012bc:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80014b4 <inverter+0x294>
 80012c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012c8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80012cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012d0:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80014b4 <inverter+0x294>
 80012d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012dc:	ed9f 6a76 	vldr	s12, [pc, #472]	; 80014b8 <inverter+0x298>
 80012e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012e4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80012e8:	eddf 6a72 	vldr	s13, [pc, #456]	; 80014b4 <inverter+0x294>
 80012ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80012f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012f4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80014b4 <inverter+0x294>
 80012f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012fc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001300:	eddf 5a6d 	vldr	s11, [pc, #436]	; 80014b8 <inverter+0x298>
 8001304:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130c:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80014bc <inverter+0x29c>
 8001310:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001314:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001320:	ee17 3a90 	vmov	r3, s15
 8001324:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001330:	edd7 7a04 	vldr	s15, [r7, #16]
 8001334:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001338:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800133c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 80014b8 <inverter+0x298>
 8001340:	edd7 7a04 	vldr	s15, [r7, #16]
 8001344:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001348:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800134c:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80014b8 <inverter+0x298>
 8001350:	edd7 7a04 	vldr	s15, [r7, #16]
 8001354:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001358:	edd7 7a04 	vldr	s15, [r7, #16]
 800135c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001360:	eddf 6a56 	vldr	s13, [pc, #344]	; 80014bc <inverter+0x29c>
 8001364:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001368:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800136c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001374:	ee17 3a90 	vmov	r3, s15
 8001378:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001380:	3303      	adds	r3, #3
 8001382:	89ba      	ldrh	r2, [r7, #12]
 8001384:	1a9b      	subs	r3, r3, r2
 8001386:	0fda      	lsrs	r2, r3, #31
 8001388:	4413      	add	r3, r2
 800138a:	105b      	asrs	r3, r3, #1
 800138c:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 800138e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db10      	blt.n	80013b8 <inverter+0x198>
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	2b3b      	cmp	r3, #59	; 0x3b
 800139c:	dc0c      	bgt.n	80013b8 <inverter+0x198>
		compare_M1 = T0;
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 80013a2:	897a      	ldrh	r2, [r7, #10]
 80013a4:	89bb      	ldrh	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 80013aa:	897a      	ldrh	r2, [r7, #10]
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	441a      	add	r2, r3
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e06a      	b.n	800148e <inverter+0x26e>
		}
	else if(angle >= 60 && angle < 120){
 80013b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013bc:	2b3b      	cmp	r3, #59	; 0x3b
 80013be:	dd10      	ble.n	80013e2 <inverter+0x1c2>
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	2b77      	cmp	r3, #119	; 0x77
 80013c6:	dc0c      	bgt.n	80013e2 <inverter+0x1c2>
		compare_M1 = T0;
 80013c8:	897b      	ldrh	r3, [r7, #10]
 80013ca:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80013cc:	897a      	ldrh	r2, [r7, #10]
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	441a      	add	r2, r3
 80013d2:	89bb      	ldrh	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 80013d8:	897a      	ldrh	r2, [r7, #10]
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	4413      	add	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e055      	b.n	800148e <inverter+0x26e>
		}
	else if(angle >= 120 && angle < 180){
 80013e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e6:	2b77      	cmp	r3, #119	; 0x77
 80013e8:	dd10      	ble.n	800140c <inverter+0x1ec>
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	2bb3      	cmp	r3, #179	; 0xb3
 80013f0:	dc0c      	bgt.n	800140c <inverter+0x1ec>
		compare_M1 = T0+T2;
 80013f2:	897a      	ldrh	r2, [r7, #10]
 80013f4:	89bb      	ldrh	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80013fa:	897a      	ldrh	r2, [r7, #10]
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	441a      	add	r2, r3
 8001400:	89bb      	ldrh	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001406:	897b      	ldrh	r3, [r7, #10]
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e040      	b.n	800148e <inverter+0x26e>
		}
	else if(angle >= 180 && angle < 240){
 800140c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001410:	2bb3      	cmp	r3, #179	; 0xb3
 8001412:	dd10      	ble.n	8001436 <inverter+0x216>
 8001414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001418:	2bef      	cmp	r3, #239	; 0xef
 800141a:	dc0c      	bgt.n	8001436 <inverter+0x216>
		compare_M1 = T0+T1+T2;
 800141c:	897a      	ldrh	r2, [r7, #10]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	441a      	add	r2, r3
 8001422:	89bb      	ldrh	r3, [r7, #12]
 8001424:	4413      	add	r3, r2
 8001426:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 8001428:	897a      	ldrh	r2, [r7, #10]
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	4413      	add	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001430:	897b      	ldrh	r3, [r7, #10]
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e02b      	b.n	800148e <inverter+0x26e>
		}
	else if(angle >= 240 && angle < 300){
 8001436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143a:	2bef      	cmp	r3, #239	; 0xef
 800143c:	dd11      	ble.n	8001462 <inverter+0x242>
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001446:	da0c      	bge.n	8001462 <inverter+0x242>
		compare_M1 = T0+T1+T2;
 8001448:	897a      	ldrh	r2, [r7, #10]
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	441a      	add	r2, r3
 800144e:	89bb      	ldrh	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001454:	897b      	ldrh	r3, [r7, #10]
 8001456:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 8001458:	897a      	ldrh	r2, [r7, #10]
 800145a:	89bb      	ldrh	r3, [r7, #12]
 800145c:	4413      	add	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e015      	b.n	800148e <inverter+0x26e>
		}
	else if(angle >= 300 && angle <= 360){
 8001462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001466:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800146a:	db10      	blt.n	800148e <inverter+0x26e>
 800146c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001470:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001474:	dc0b      	bgt.n	800148e <inverter+0x26e>
		compare_M1 = T0+T1;
 8001476:	897a      	ldrh	r2, [r7, #10]
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	4413      	add	r3, r2
 800147c:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 800147e:	897b      	ldrh	r3, [r7, #10]
 8001480:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8001482:	897a      	ldrh	r2, [r7, #10]
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	441a      	add	r2, r3
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <inverter+0x2a0>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <inverter+0x2a0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <inverter+0x2a0>)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80014a0:	bf00      	nop
 80014a2:	3724      	adds	r7, #36	; 0x24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	b60b60b7 	.word	0xb60b60b7
 80014b0:	88888889 	.word	0x88888889
 80014b4:	42700000 	.word	0x42700000
 80014b8:	43340000 	.word	0x43340000
 80014bc:	471e3400 	.word	0x471e3400
 80014c0:	40012c00 	.word	0x40012c00

080014c4 <shutoff>:
void shutoff(void){
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <shutoff+0x20>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <shutoff+0x20>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <shutoff+0x20>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40012c00 	.word	0x40012c00

080014e8 <shutdown>:
void shutdown(void){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 80014ec:	2100      	movs	r1, #0
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <shutdown+0x40>)
 80014f0:	f007 fe06 	bl	8009100 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 80014f4:	2100      	movs	r1, #0
 80014f6:	480c      	ldr	r0, [pc, #48]	; (8001528 <shutdown+0x40>)
 80014f8:	f008 ff4a 	bl	800a390 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 80014fc:	2104      	movs	r1, #4
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <shutdown+0x40>)
 8001500:	f007 fdfe 	bl	8009100 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8001504:	2104      	movs	r1, #4
 8001506:	4808      	ldr	r0, [pc, #32]	; (8001528 <shutdown+0x40>)
 8001508:	f008 ff42 	bl	800a390 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 800150c:	2108      	movs	r1, #8
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <shutdown+0x40>)
 8001510:	f007 fdf6 	bl	8009100 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8001514:	2108      	movs	r1, #8
 8001516:	4804      	ldr	r0, [pc, #16]	; (8001528 <shutdown+0x40>)
 8001518:	f008 ff3a 	bl	800a390 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <shutdown+0x40>)
 800151e:	f007 fbfc 	bl	8008d1a <HAL_TIM_Base_Stop>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000bf4 	.word	0x20000bf4

0800152c <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8001534:	2201      	movs	r2, #1
 8001536:	2140      	movs	r1, #64	; 0x40
 8001538:	4815      	ldr	r0, [pc, #84]	; (8001590 <ORBIS_init+0x64>)
 800153a:	f005 fd4d 	bl	8006fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 800153e:	2201      	movs	r2, #1
 8001540:	2104      	movs	r1, #4
 8001542:	4814      	ldr	r0, [pc, #80]	; (8001594 <ORBIS_init+0x68>)
 8001544:	f005 fd48 	bl	8006fd8 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <ORBIS_init+0x6c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <ORBIS_init+0x70>)
 8001550:	2274      	movs	r2, #116	; 0x74
 8001552:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2140      	movs	r1, #64	; 0x40
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <ORBIS_init+0x64>)
 800155a:	f005 fd3d 	bl	8006fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2104      	movs	r1, #4
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <ORBIS_init+0x68>)
 8001564:	f005 fd38 	bl	8006fd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8001568:	2305      	movs	r3, #5
 800156a:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <ORBIS_init+0x74>)
 800156c:	490b      	ldr	r1, [pc, #44]	; (800159c <ORBIS_init+0x70>)
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <ORBIS_init+0x78>)
 8001570:	f006 fe2a 	bl	80081c8 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8001574:	2305      	movs	r3, #5
 8001576:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <ORBIS_init+0x7c>)
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <ORBIS_init+0x80>)
 800157a:	480d      	ldr	r0, [pc, #52]	; (80015b0 <ORBIS_init+0x84>)
 800157c:	f006 fe24 	bl	80081c8 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <ORBIS_init+0x88>)
 8001582:	f007 fbf1 	bl	8008d68 <HAL_TIM_Base_Start_IT>

}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	48000400 	.word	0x48000400
 8001594:	48000c00 	.word	0x48000c00
 8001598:	200002e4 	.word	0x200002e4
 800159c:	200002c4 	.word	0x200002c4
 80015a0:	200002cc 	.word	0x200002cc
 80015a4:	200009a8 	.word	0x200009a8
 80015a8:	200002dc 	.word	0x200002dc
 80015ac:	200002d4 	.word	0x200002d4
 80015b0:	20000a0c 	.word	0x20000a0c
 80015b4:	20000c40 	.word	0x20000c40

080015b8 <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a68      	ldr	r2, [pc, #416]	; (8001764 <HAL_SPI_TxRxCpltCallback+0x1ac>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	f040 80a5 	bne.w	8001714 <HAL_SPI_TxRxCpltCallback+0x15c>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2140      	movs	r1, #64	; 0x40
 80015ce:	4866      	ldr	r0, [pc, #408]	; (8001768 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 80015d0:	f005 fd02 	bl	8006fd8 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 80015d4:	4b65      	ldr	r3, [pc, #404]	; (800176c <HAL_SPI_TxRxCpltCallback+0x1b4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80015dc:	609a      	str	r2, [r3, #8]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_SPI_TxRxCpltCallback+0x1b4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	019b      	lsls	r3, r3, #6
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b61      	ldr	r3, [pc, #388]	; (800176c <HAL_SPI_TxRxCpltCallback+0x1b4>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	4a5d      	ldr	r2, [pc, #372]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80015fc:	6013      	str	r3, [r2, #0]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b5b      	ldr	r3, [pc, #364]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	4a5b      	ldr	r2, [pc, #364]	; (8001778 <HAL_SPI_TxRxCpltCallback+0x1c0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	dd10      	ble.n	8001632 <HAL_SPI_TxRxCpltCallback+0x7a>
 8001610:	4b57      	ldr	r3, [pc, #348]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 8001620:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	edc7 7a03 	vstr	s15, [r7, #12]
 8001630:	e025      	b.n	800167e <HAL_SPI_TxRxCpltCallback+0xc6>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	4a4f      	ldr	r2, [pc, #316]	; (800177c <HAL_SPI_TxRxCpltCallback+0x1c4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	da10      	bge.n	8001666 <HAL_SPI_TxRxCpltCallback+0xae>
 8001644:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8001654:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001660:	edc7 7a03 	vstr	s15, [r7, #12]
 8001664:	e00b      	b.n	800167e <HAL_SPI_TxRxCpltCallback+0xc6>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 8001666:	4b42      	ldr	r3, [pc, #264]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 800167e:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 8001686:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 8001688:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800168a:	ed93 7a00 	vldr	s14, [r3]
 800168e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 800169c:	4b38      	ldr	r3, [pc, #224]	; (8001780 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4a38      	ldr	r2, [pc, #224]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 80016b6:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	601a      	str	r2, [r3, #0]
		velocity_index++;
 80016c8:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016d2:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d102      	bne.n	80016e2 <HAL_SPI_TxRxCpltCallback+0x12a>
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 80016e2:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800178c <HAL_SPI_TxRxCpltCallback+0x1d4>
 80016ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001790 <HAL_SPI_TxRxCpltCallback+0x1d8>
 80016f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001794 <HAL_SPI_TxRxCpltCallback+0x1dc>
 80016fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001700:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001798 <HAL_SPI_TxRxCpltCallback+0x1e0>
 8001704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170c:	ee17 2a90 	vmov	r2, s15
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001712:	60da      	str	r2, [r3, #12]
	}
	if (hspi == &hspi3) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a21      	ldr	r2, [pc, #132]	; (800179c <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d11a      	bne.n	8001752 <HAL_SPI_TxRxCpltCallback+0x19a>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	2104      	movs	r1, #4
 8001720:	481f      	ldr	r0, [pc, #124]	; (80017a0 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8001722:	f005 fc59 	bl	8006fd8 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8001728:	78db      	ldrb	r3, [r3, #3]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21a      	sxth	r2, r3
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8001730:	789b      	ldrb	r3, [r3, #2]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21a      	sxth	r2, r3
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800173a:	825a      	strh	r2, [r3, #18]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	019b      	lsls	r3, r3, #6
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8001744:	7852      	ldrb	r2, [r2, #1]
 8001746:	0892      	lsrs	r2, r2, #2
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	4313      	orrs	r3, r2
 800174c:	461a      	mov	r2, r3
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001750:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_SPI_TxRxCpltCallback+0x1f0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001758:	4798      	blx	r3
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200009a8 	.word	0x200009a8
 8001768:	48000400 	.word	0x48000400
 800176c:	200002cc 	.word	0x200002cc
 8001770:	200002e8 	.word	0x200002e8
 8001774:	20000300 	.word	0x20000300
 8001778:	0002bf20 	.word	0x0002bf20
 800177c:	fffd40e0 	.word	0xfffd40e0
 8001780:	200002fc 	.word	0x200002fc
 8001784:	20000304 	.word	0x20000304
 8001788:	20000308 	.word	0x20000308
 800178c:	461c4000 	.word	0x461c4000
 8001790:	42700000 	.word	0x42700000
 8001794:	43b40000 	.word	0x43b40000
 8001798:	42c80000 	.word	0x42c80000
 800179c:	20000a0c 	.word	0x20000a0c
 80017a0:	48000c00 	.word	0x48000c00
 80017a4:	200002dc 	.word	0x200002dc
 80017a8:	200002e4 	.word	0x200002e4

080017ac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2140      	movs	r1, #64	; 0x40
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017ba:	f005 fc0d 	bl	8006fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2104      	movs	r1, #4
 80017c2:	480a      	ldr	r0, [pc, #40]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017c4:	f005 fc08 	bl	8006fd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80017c8:	2305      	movs	r3, #5
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017cc:	4909      	ldr	r1, [pc, #36]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017ce:	480a      	ldr	r0, [pc, #40]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017d0:	f006 fcfa 	bl	80081c8 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80017d4:	2305      	movs	r3, #5
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017d8:	4909      	ldr	r1, [pc, #36]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017da:	480a      	ldr	r0, [pc, #40]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017dc:	f006 fcf4 	bl	80081c8 <HAL_SPI_TransmitReceive_DMA>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000c00 	.word	0x48000c00
 80017f0:	200002cc 	.word	0x200002cc
 80017f4:	200002c4 	.word	0x200002c4
 80017f8:	200009a8 	.word	0x200009a8
 80017fc:	200002dc 	.word	0x200002dc
 8001800:	200002d4 	.word	0x200002d4
 8001804:	20000a0c 	.word	0x20000a0c

08001808 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a2 	beq.w	8001960 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182c:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a04 	vldr	s15, [r3, #16]
 800183c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001840:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	ed93 7a03 	vldr	s14, [r3, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001850:	edd7 7a03 	vldr	s15, [r7, #12]
 8001854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00e      	beq.n	800188a <Compute+0x82>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001878:	edd7 7a02 	vldr	s15, [r7, #8]
 800187c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	dd04      	ble.n	80018aa <Compute+0xa2>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	e00e      	b.n	80018c8 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80018b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d503      	bpl.n	80018c8 <Compute+0xc0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1a      	ldr	r2, [r3, #32]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <Compute+0xe0>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80018d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	edc3 7a01 	vstr	s15, [r3, #4]
 80018e6:	e003      	b.n	80018f0 <Compute+0xe8>
	else val->Output = 0;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	ed93 6a07 	vldr	s12, [r3, #28]
 8001902:	edd7 7a02 	vldr	s15, [r7, #8]
 8001906:	ee66 7a27 	vmul.f32	s15, s12, s15
 800190a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	ed93 7a01 	vldr	s14, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	dd04      	ble.n	8001938 <Compute+0x130>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	e00e      	b.n	8001956 <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	ed93 7a01 	vldr	s14, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	edd3 7a08 	vldr	s15, [r3, #32]
 8001944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	d503      	bpl.n	8001956 <Compute+0x14e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1a      	ldr	r2, [r3, #32]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	e000      	b.n	8001962 <Compute+0x15a>
	if(!val->inAuto) return;
 8001960:	bf00      	nop
}
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6178      	str	r0, [r7, #20]
 8001974:	ed87 0a04 	vstr	s0, [r7, #16]
 8001978:	edc7 0a03 	vstr	s1, [r7, #12]
 800197c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001980:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001984:	edd7 7a04 	vldr	s15, [r7, #16]
 8001988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	f100 809b 	bmi.w	8001aca <SetTunings+0x15e>
 8001994:	edd7 7a03 	vldr	s15, [r7, #12]
 8001998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	f100 8093 	bmi.w	8001aca <SetTunings+0x15e>
 80019a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	f100 808b 	bmi.w	8001aca <SetTunings+0x15e>
 80019b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	f100 8083 	bmi.w	8001aca <SetTunings+0x15e>
 80019c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	dc79      	bgt.n	8001aca <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 80019d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	bfcc      	ite	gt
 80019e4:	2301      	movgt	r3, #1
 80019e6:	2300      	movle	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 80019f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	bf4c      	ite	mi
 8001a04:	2301      	movmi	r3, #1
 8001a06:	2300      	movpl	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a1e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001ad8 <SetTunings+0x16c>
 8001a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a26:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8001a30:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 8001a42:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a46:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d11d      	bne.n	8001a98 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a62:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001adc <SetTunings+0x170>
 8001a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a76:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001adc <SetTunings+0x170>
 8001a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a8a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001adc <SetTunings+0x170>
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8001aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ab0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	edd3 7a05 	vldr	s15, [r3, #20]
 8001abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001ac8:	e000      	b.n	8001acc <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001aca:	bf00      	nop
}
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	49742400 	.word	0x49742400
 8001adc:	00000000 	.word	0x00000000

08001ae0 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	dd25      	ble.n	8001b3c <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8001b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0a:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	edd3 6a07 	vldr	s13, [r3, #28]
 8001b28:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b54:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8001b58:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	dc44      	bgt.n	8001bf4 <SetOutputLimits+0xac>
   val->outMin = Min;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	dd04      	ble.n	8001b96 <SetOutputLimits+0x4e>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	e00e      	b.n	8001bb4 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ba2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d503      	bpl.n	8001bb4 <SetOutputLimits+0x6c>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a1a      	ldr	r2, [r3, #32]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	dd04      	ble.n	8001bd4 <SetOutputLimits+0x8c>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	e010      	b.n	8001bf6 <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	d505      	bpl.n	8001bf6 <SetOutputLimits+0xae>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a1a      	ldr	r2, [r3, #32]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	e000      	b.n	8001bf6 <SetOutputLimits+0xae>
   if(Min > Max) return;
 8001bf4:	bf00      	nop
}
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	bf0c      	ite	eq
 8001c24:	2201      	moveq	r2, #1
 8001c26:	2200      	movne	r2, #0
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d102      	bne.n	8001c34 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f808 	bl	8001c44 <Initialize>
    }
    val->inAuto = newAuto;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <Initialize>:

void Initialize(PID_instance *val)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	dd04      	ble.n	8001c7c <Initialize+0x38>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8001c7a:	e00f      	b.n	8001c9c <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c90:	d400      	bmi.n	8001c94 <Initialize+0x50>
}
 8001c92:	e003      	b.n	8001c9c <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1a      	ldr	r2, [r3, #32]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8001cc4:	b40f      	push	{r0, r1, r2, r3}
 8001cc6:	b590      	push	{r4, r7, lr}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cda:	480b      	ldr	r0, [pc, #44]	; (8001d08 <PrintServerPrintf+0x44>)
 8001cdc:	f00a f8ba 	bl	800be54 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <PrintServerPrintf+0x48>)
 8001ce2:	681c      	ldr	r4, [r3, #0]
 8001ce4:	4808      	ldr	r0, [pc, #32]	; (8001d08 <PrintServerPrintf+0x44>)
 8001ce6:	f7fe fa9b 	bl	8000220 <strlen>
 8001cea:	4603      	mov	r3, r0
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4905      	ldr	r1, [pc, #20]	; (8001d08 <PrintServerPrintf+0x44>)
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f008 fd88 	bl	800a808 <HAL_UART_Transmit_DMA>
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d02:	b004      	add	sp, #16
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000498 	.word	0x20000498
 8001d0c:	200000d0 	.word	0x200000d0

08001d10 <current_init>:
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);

	return VDDA; //success
}

void current_init(Current_Callback __IRQ_callback){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);

	Curent_IRQ_callback = __IRQ_callback;
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <current_init+0x20>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8001d1e:	2208      	movs	r2, #8
 8001d20:	4904      	ldr	r1, [pc, #16]	; (8001d34 <current_init+0x24>)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <current_init+0x28>)
 8001d24:	f002 fa60 	bl	80041e8 <HAL_ADC_Start_DMA>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200006e8 	.word	0x200006e8
 8001d34:	20000698 	.word	0x20000698
 8001d38:	2000075c 	.word	0x2000075c

08001d3c <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8001d44:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <voltage_temperature_init+0x20>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	4904      	ldr	r1, [pc, #16]	; (8001d60 <voltage_temperature_init+0x24>)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <voltage_temperature_init+0x28>)
 8001d50:	f002 fa4a 	bl	80041e8 <HAL_ADC_Start_DMA>
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200006fc 	.word	0x200006fc
 8001d60:	200006b8 	.word	0x200006b8
 8001d64:	200007c8 	.word	0x200007c8

08001d68 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a78      	ldr	r2, [pc, #480]	; (8001f54 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	f040 8093 	bne.w	8001ea0 <HAL_ADC_ConvHalfCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8001d7a:	4b77      	ldr	r3, [pc, #476]	; (8001f58 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	b21a      	sxth	r2, r3
 8001d98:	4b71      	ldr	r3, [pc, #452]	; (8001f60 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001d9a:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	4a6f      	ldr	r2, [pc, #444]	; (8001f60 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	b212      	sxth	r2, r2
 8001da8:	fb03 f202 	mul.w	r2, r3, r2
 8001dac:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001dae:	fba3 1302 	umull	r1, r3, r3, r2
 8001db2:	1ad2      	subs	r2, r2, r3
 8001db4:	0852      	lsrs	r2, r2, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	0ada      	lsrs	r2, r3, #11
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	011a      	lsls	r2, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a68      	ldr	r2, [pc, #416]	; (8001f68 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	095a      	lsrs	r2, r3, #5
 8001dcc:	4b67      	ldr	r3, [pc, #412]	; (8001f6c <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	4a64      	ldr	r2, [pc, #400]	; (8001f70 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001dde:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	4a5e      	ldr	r2, [pc, #376]	; (8001f60 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001de8:	8812      	ldrh	r2, [r2, #0]
 8001dea:	b212      	sxth	r2, r2
 8001dec:	fb03 f202 	mul.w	r2, r3, r2
 8001df0:	4b5c      	ldr	r3, [pc, #368]	; (8001f64 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001df2:	fba3 1302 	umull	r1, r3, r3, r2
 8001df6:	1ad2      	subs	r2, r2, r3
 8001df8:	0852      	lsrs	r2, r2, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	0ada      	lsrs	r2, r3, #11
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	011a      	lsls	r2, r3, #4
 8001e06:	4413      	add	r3, r2
 8001e08:	4a57      	ldr	r2, [pc, #348]	; (8001f68 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	095a      	lsrs	r2, r3, #5
 8001e10:	4b56      	ldr	r3, [pc, #344]	; (8001f6c <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	4a53      	ldr	r2, [pc, #332]	; (8001f70 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001e22:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8001e24:	4b4d      	ldr	r3, [pc, #308]	; (8001f5c <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	4a4d      	ldr	r2, [pc, #308]	; (8001f60 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	b212      	sxth	r2, r2
 8001e30:	fb03 f202 	mul.w	r2, r3, r2
 8001e34:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001e36:	fba3 1302 	umull	r1, r3, r3, r2
 8001e3a:	1ad2      	subs	r2, r2, r3
 8001e3c:	0852      	lsrs	r2, r2, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	0ada      	lsrs	r2, r3, #11
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	011a      	lsls	r2, r3, #4
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a46      	ldr	r2, [pc, #280]	; (8001f68 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	095a      	lsrs	r2, r3, #5
 8001e54:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	4a42      	ldr	r2, [pc, #264]	; (8001f70 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001e66:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e70:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e74:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bfb8      	it	lt
 8001e7c:	425b      	neglt	r3, r3
 8001e7e:	441a      	add	r2, r3
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bfb8      	it	lt
 8001e88:	425b      	neglt	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	0fda      	lsrs	r2, r3, #31
 8001e8e:	4413      	add	r3, r2
 8001e90:	105b      	asrs	r3, r3, #1
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001e96:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_ADC_ConvHalfCpltCallback+0x20c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4834      	ldr	r0, [pc, #208]	; (8001f70 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001e9e:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a35      	ldr	r2, [pc, #212]	; (8001f78 <HAL_ADC_ConvHalfCpltCallback+0x210>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d151      	bne.n	8001f4c <HAL_ADC_ConvHalfCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001ea8:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	4a2c      	ldr	r2, [pc, #176]	; (8001f60 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001eb0:	8812      	ldrh	r2, [r2, #0]
 8001eb2:	b212      	sxth	r2, r2
 8001eb4:	fb03 f202 	mul.w	r2, r3, r2
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001eba:	fba3 1302 	umull	r1, r3, r3, r2
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	0852      	lsrs	r2, r2, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	0adb      	lsrs	r3, r3, #11
 8001ec6:	b25a      	sxtb	r2, r3
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001eca:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001ed4:	8812      	ldrh	r2, [r2, #0]
 8001ed6:	b212      	sxth	r2, r2
 8001ed8:	fb03 f202 	mul.w	r2, r3, r2
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001ede:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	0852      	lsrs	r2, r2, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	0adb      	lsrs	r3, r3, #11
 8001eea:	b25a      	sxtb	r2, r3
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001eee:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001ef8:	8812      	ldrh	r2, [r2, #0]
 8001efa:	b212      	sxth	r2, r2
 8001efc:	fb03 f202 	mul.w	r2, r3, r2
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	4413      	add	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f10:	1ad2      	subs	r2, r2, r3
 8001f12:	0852      	lsrs	r2, r2, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	0adb      	lsrs	r3, r3, #11
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001f1a:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001f24:	8812      	ldrh	r2, [r2, #0]
 8001f26:	b212      	sxth	r2, r2
 8001f28:	fb03 f202 	mul.w	r2, r3, r2
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	0bdb      	lsrs	r3, r3, #15
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001f42:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001f4a:	4798      	blx	r3
	}
//	dac_value(data.Current_DC);
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2000075c 	.word	0x2000075c
 8001f58:	200000d4 	.word	0x200000d4
 8001f5c:	20000698 	.word	0x20000698
 8001f60:	200006e4 	.word	0x200006e4
 8001f64:	00100101 	.word	0x00100101
 8001f68:	51eb851f 	.word	0x51eb851f
 8001f6c:	200006d8 	.word	0x200006d8
 8001f70:	200006ec 	.word	0x200006ec
 8001f74:	200006e8 	.word	0x200006e8
 8001f78:	200007c8 	.word	0x200007c8
 8001f7c:	200006b8 	.word	0x200006b8
 8001f80:	20000700 	.word	0x20000700
 8001f84:	ccd99a67 	.word	0xccd99a67
 8001f88:	200006fc 	.word	0x200006fc

08001f8c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a78      	ldr	r2, [pc, #480]	; (8002178 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	f040 8093 	bne.w	80020c4 <HAL_ADC_ConvCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8001f9e:	4b77      	ldr	r3, [pc, #476]	; (800217c <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	4b71      	ldr	r3, [pc, #452]	; (8002184 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001fbe:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	4a6f      	ldr	r2, [pc, #444]	; (8002184 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001fc8:	8812      	ldrh	r2, [r2, #0]
 8001fca:	b212      	sxth	r2, r2
 8001fcc:	fb03 f202 	mul.w	r2, r3, r2
 8001fd0:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd6:	1ad2      	subs	r2, r2, r3
 8001fd8:	0852      	lsrs	r2, r2, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	0ada      	lsrs	r2, r3, #11
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	011a      	lsls	r2, r3, #4
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a68      	ldr	r2, [pc, #416]	; (800218c <HAL_ADC_ConvCpltCallback+0x200>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	095a      	lsrs	r2, r3, #5
 8001ff0:	4b67      	ldr	r3, [pc, #412]	; (8002190 <HAL_ADC_ConvCpltCallback+0x204>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	4a64      	ldr	r2, [pc, #400]	; (8002194 <HAL_ADC_ConvCpltCallback+0x208>)
 8002002:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8002004:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800200c:	8812      	ldrh	r2, [r2, #0]
 800200e:	b212      	sxth	r2, r2
 8002010:	fb03 f202 	mul.w	r2, r3, r2
 8002014:	4b5c      	ldr	r3, [pc, #368]	; (8002188 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002016:	fba3 1302 	umull	r1, r3, r3, r2
 800201a:	1ad2      	subs	r2, r2, r3
 800201c:	0852      	lsrs	r2, r2, #1
 800201e:	4413      	add	r3, r2
 8002020:	0ada      	lsrs	r2, r3, #11
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	011a      	lsls	r2, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	4a57      	ldr	r2, [pc, #348]	; (800218c <HAL_ADC_ConvCpltCallback+0x200>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	095a      	lsrs	r2, r3, #5
 8002034:	4b56      	ldr	r3, [pc, #344]	; (8002190 <HAL_ADC_ConvCpltCallback+0x204>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	461a      	mov	r2, r3
 800203c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	4a53      	ldr	r2, [pc, #332]	; (8002194 <HAL_ADC_ConvCpltCallback+0x208>)
 8002046:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8002048:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002050:	8812      	ldrh	r2, [r2, #0]
 8002052:	b212      	sxth	r2, r2
 8002054:	fb03 f202 	mul.w	r2, r3, r2
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800205a:	fba3 1302 	umull	r1, r3, r3, r2
 800205e:	1ad2      	subs	r2, r2, r3
 8002060:	0852      	lsrs	r2, r2, #1
 8002062:	4413      	add	r3, r2
 8002064:	0ada      	lsrs	r2, r3, #11
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	011a      	lsls	r2, r3, #4
 800206e:	4413      	add	r3, r2
 8002070:	4a46      	ldr	r2, [pc, #280]	; (800218c <HAL_ADC_ConvCpltCallback+0x200>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	095a      	lsrs	r2, r3, #5
 8002078:	4b45      	ldr	r3, [pc, #276]	; (8002190 <HAL_ADC_ConvCpltCallback+0x204>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	461a      	mov	r2, r3
 8002080:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	4a42      	ldr	r2, [pc, #264]	; (8002194 <HAL_ADC_ConvCpltCallback+0x208>)
 800208a:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_ADC_ConvCpltCallback+0x208>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002094:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002098:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <HAL_ADC_ConvCpltCallback+0x208>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	bfb8      	it	lt
 80020a0:	425b      	neglt	r3, r3
 80020a2:	441a      	add	r2, r3
 80020a4:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <HAL_ADC_ConvCpltCallback+0x208>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bfb8      	it	lt
 80020ac:	425b      	neglt	r3, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	0fda      	lsrs	r2, r3, #31
 80020b2:	4413      	add	r3, r2
 80020b4:	105b      	asrs	r3, r3, #1
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b36      	ldr	r3, [pc, #216]	; (8002194 <HAL_ADC_ConvCpltCallback+0x208>)
 80020ba:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_ADC_ConvCpltCallback+0x20c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4834      	ldr	r0, [pc, #208]	; (8002194 <HAL_ADC_ConvCpltCallback+0x208>)
 80020c2:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a35      	ldr	r2, [pc, #212]	; (800219c <HAL_ADC_ConvCpltCallback+0x210>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d151      	bne.n	8002170 <HAL_ADC_ConvCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_ADC_ConvCpltCallback+0x214>)
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80020d4:	8812      	ldrh	r2, [r2, #0]
 80020d6:	b212      	sxth	r2, r2
 80020d8:	fb03 f202 	mul.w	r2, r3, r2
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80020de:	fba3 1302 	umull	r1, r3, r3, r2
 80020e2:	1ad2      	subs	r2, r2, r3
 80020e4:	0852      	lsrs	r2, r2, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	0adb      	lsrs	r3, r3, #11
 80020ea:	b25a      	sxtb	r2, r3
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x218>)
 80020ee:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_ADC_ConvCpltCallback+0x214>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	4a23      	ldr	r2, [pc, #140]	; (8002184 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80020f8:	8812      	ldrh	r2, [r2, #0]
 80020fa:	b212      	sxth	r2, r2
 80020fc:	fb03 f202 	mul.w	r2, r3, r2
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002102:	fba3 1302 	umull	r1, r3, r3, r2
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	0852      	lsrs	r2, r2, #1
 800210a:	4413      	add	r3, r2
 800210c:	0adb      	lsrs	r3, r3, #11
 800210e:	b25a      	sxtb	r2, r3
 8002110:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x218>)
 8002112:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_ADC_ConvCpltCallback+0x214>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	b212      	sxth	r2, r2
 8002120:	fb03 f202 	mul.w	r2, r3, r2
 8002124:	4613      	mov	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	461a      	mov	r2, r3
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002130:	fba3 1302 	umull	r1, r3, r3, r2
 8002134:	1ad2      	subs	r2, r2, r3
 8002136:	0852      	lsrs	r2, r2, #1
 8002138:	4413      	add	r3, r2
 800213a:	0adb      	lsrs	r3, r3, #11
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x218>)
 800213e:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_ADC_ConvCpltCallback+0x214>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002148:	8812      	ldrh	r2, [r2, #0]
 800214a:	b212      	sxth	r2, r2
 800214c:	fb03 f202 	mul.w	r2, r3, r2
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <HAL_ADC_ConvCpltCallback+0x21c>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0bdb      	lsrs	r3, r3, #15
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x218>)
 8002166:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8002168:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_ADC_ConvCpltCallback+0x220>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	480d      	ldr	r0, [pc, #52]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x218>)
 800216e:	4798      	blx	r3
	}
//	 dac_value(data.Current_DC);

}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2000075c 	.word	0x2000075c
 800217c:	200000d4 	.word	0x200000d4
 8002180:	20000698 	.word	0x20000698
 8002184:	200006e4 	.word	0x200006e4
 8002188:	00100101 	.word	0x00100101
 800218c:	51eb851f 	.word	0x51eb851f
 8002190:	200006d8 	.word	0x200006d8
 8002194:	200006ec 	.word	0x200006ec
 8002198:	200006e8 	.word	0x200006e8
 800219c:	200007c8 	.word	0x200007c8
 80021a0:	200006b8 	.word	0x200006b8
 80021a4:	20000700 	.word	0x20000700
 80021a8:	ccd99a67 	.word	0xccd99a67
 80021ac:	200006fc 	.word	0x200006fc

080021b0 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f004 f83f 	bl	800623c <HAL_FDCAN_Start>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e00a      	b.n	80021de <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80021c8:	2200      	movs	r2, #0
 80021ca:	2101      	movs	r1, #1
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f004 f97b 	bl	80064c8 <HAL_FDCAN_ActivateNotification>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <FDCAN_addCallback+0x70>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	d901      	bls.n	8002200 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e025      	b.n	800224c <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	e00c      	b.n	8002220 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <FDCAN_addCallback+0x74>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	429a      	cmp	r2, r3
 8002214:	d101      	bne.n	800221a <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e018      	b.n	800224c <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3301      	adds	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <FDCAN_addCallback+0x70>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	429a      	cmp	r2, r3
 8002228:	d3ed      	bcc.n	8002206 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <FDCAN_addCallback+0x70>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	490a      	ldr	r1, [pc, #40]	; (800225c <FDCAN_addCallback+0x74>)
 8002232:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002236:	4a09      	ldr	r2, [pc, #36]	; (800225c <FDCAN_addCallback+0x74>)
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <FDCAN_addCallback+0x70>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a04      	ldr	r2, [pc, #16]	; (8002258 <FDCAN_addCallback+0x70>)
 8002248:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3724      	adds	r7, #36	; 0x24
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	20000758 	.word	0x20000758
 800225c:	20000708 	.word	0x20000708

08002260 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8002270:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8002274:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8002282:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8002288:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800228e:	2300      	movs	r3, #0
 8002290:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4619      	mov	r1, r3
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f003 fff4 	bl	800628c <HAL_FDCAN_AddMessageToTxFifoQ>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3738      	adds	r7, #56	; 0x38
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b09e      	sub	sp, #120	; 0x78
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80022ca:	2140      	movs	r1, #64	; 0x40
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f004 f821 	bl	8006314 <HAL_FDCAN_GetRxMessage>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 80022d8:	f000 fd90 	bl	8002dfc <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80022dc:	2300      	movs	r3, #0
 80022de:	677b      	str	r3, [r7, #116]	; 0x74
 80022e0:	e012      	b.n	8002308 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80022e2:	4a0e      	ldr	r2, [pc, #56]	; (800231c <HAL_FDCAN_RxFifo0Callback+0x64>)
 80022e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d107      	bne.n	8002302 <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_FDCAN_RxFifo0Callback+0x64>)
 80022f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022fa:	f107 020c 	add.w	r2, r7, #12
 80022fe:	4610      	mov	r0, r2
 8002300:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002304:	3301      	adds	r3, #1
 8002306:	677b      	str	r3, [r7, #116]	; 0x74
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_FDCAN_RxFifo0Callback+0x68>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800230e:	429a      	cmp	r2, r3
 8002310:	d3e7      	bcc.n	80022e2 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	3778      	adds	r7, #120	; 0x78
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000708 	.word	0x20000708
 8002320:	20000758 	.word	0x20000758

08002324 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	; 0x30
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800232a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2220      	movs	r2, #32
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f009 fd97 	bl	800be70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002342:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <MX_ADC1_Init+0x154>)
 8002344:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002348:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800234a:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <MX_ADC1_Init+0x154>)
 800234c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002350:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <MX_ADC1_Init+0x154>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002358:	4b47      	ldr	r3, [pc, #284]	; (8002478 <MX_ADC1_Init+0x154>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800235e:	4b46      	ldr	r3, [pc, #280]	; (8002478 <MX_ADC1_Init+0x154>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002364:	4b44      	ldr	r3, [pc, #272]	; (8002478 <MX_ADC1_Init+0x154>)
 8002366:	2201      	movs	r2, #1
 8002368:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <MX_ADC1_Init+0x154>)
 800236c:	2208      	movs	r2, #8
 800236e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002370:	4b41      	ldr	r3, [pc, #260]	; (8002478 <MX_ADC1_Init+0x154>)
 8002372:	2200      	movs	r2, #0
 8002374:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002376:	4b40      	ldr	r3, [pc, #256]	; (8002478 <MX_ADC1_Init+0x154>)
 8002378:	2201      	movs	r2, #1
 800237a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <MX_ADC1_Init+0x154>)
 800237e:	2204      	movs	r2, #4
 8002380:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <MX_ADC1_Init+0x154>)
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <MX_ADC1_Init+0x154>)
 800238c:	2200      	movs	r2, #0
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002390:	4b39      	ldr	r3, [pc, #228]	; (8002478 <MX_ADC1_Init+0x154>)
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002396:	4b38      	ldr	r3, [pc, #224]	; (8002478 <MX_ADC1_Init+0x154>)
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800239e:	4b36      	ldr	r3, [pc, #216]	; (8002478 <MX_ADC1_Init+0x154>)
 80023a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <MX_ADC1_Init+0x154>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80023ae:	4b32      	ldr	r3, [pc, #200]	; (8002478 <MX_ADC1_Init+0x154>)
 80023b0:	220c      	movs	r2, #12
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80023b4:	4b30      	ldr	r3, [pc, #192]	; (8002478 <MX_ADC1_Init+0x154>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <MX_ADC1_Init+0x154>)
 80023bc:	2200      	movs	r2, #0
 80023be:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <MX_ADC1_Init+0x154>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023c6:	482c      	ldr	r0, [pc, #176]	; (8002478 <MX_ADC1_Init+0x154>)
 80023c8:	f001 fd84 	bl	8003ed4 <HAL_ADC_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80023d2:	f000 fd13 	bl	8002dfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80023da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023de:	4619      	mov	r1, r3
 80023e0:	4825      	ldr	r0, [pc, #148]	; (8002478 <MX_ADC1_Init+0x154>)
 80023e2:	f002 ff21 	bl	8005228 <HAL_ADCEx_MultiModeConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80023ec:	f000 fd06 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <MX_ADC1_Init+0x158>)
 80023f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023f4:	2306      	movs	r3, #6
 80023f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80023f8:	2303      	movs	r3, #3
 80023fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023fc:	237f      	movs	r3, #127	; 0x7f
 80023fe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002400:	2304      	movs	r3, #4
 8002402:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	4619      	mov	r1, r3
 800240c:	481a      	ldr	r0, [pc, #104]	; (8002478 <MX_ADC1_Init+0x154>)
 800240e:	f002 f9cd 	bl	80047ac <HAL_ADC_ConfigChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002418:	f000 fcf0 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_ADC1_Init+0x15c>)
 800241e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002420:	230c      	movs	r3, #12
 8002422:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	4619      	mov	r1, r3
 8002428:	4813      	ldr	r0, [pc, #76]	; (8002478 <MX_ADC1_Init+0x154>)
 800242a:	f002 f9bf 	bl	80047ac <HAL_ADC_ConfigChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002434:	f000 fce2 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MX_ADC1_Init+0x160>)
 800243a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800243c:	2312      	movs	r3, #18
 800243e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	4619      	mov	r1, r3
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <MX_ADC1_Init+0x154>)
 8002446:	f002 f9b1 	bl	80047ac <HAL_ADC_ConfigChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8002450:	f000 fcd4 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <MX_ADC1_Init+0x164>)
 8002456:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002458:	2318      	movs	r3, #24
 800245a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	4619      	mov	r1, r3
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_ADC1_Init+0x154>)
 8002462:	f002 f9a3 	bl	80047ac <HAL_ADC_ConfigChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 800246c:	f000 fcc6 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	3730      	adds	r7, #48	; 0x30
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2000075c 	.word	0x2000075c
 800247c:	04300002 	.word	0x04300002
 8002480:	08600004 	.word	0x08600004
 8002484:	0c900008 	.word	0x0c900008
 8002488:	cb840000 	.word	0xcb840000

0800248c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002492:	463b      	mov	r3, r7
 8002494:	2220      	movs	r2, #32
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f009 fce9 	bl	800be70 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <MX_ADC2_Init+0x130>)
 80024a0:	4a47      	ldr	r2, [pc, #284]	; (80025c0 <MX_ADC2_Init+0x134>)
 80024a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024a4:	4b45      	ldr	r3, [pc, #276]	; (80025bc <MX_ADC2_Init+0x130>)
 80024a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <MX_ADC2_Init+0x130>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024b2:	4b42      	ldr	r3, [pc, #264]	; (80025bc <MX_ADC2_Init+0x130>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <MX_ADC2_Init+0x130>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <MX_ADC2_Init+0x130>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024c4:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <MX_ADC2_Init+0x130>)
 80024c6:	2204      	movs	r2, #4
 80024c8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80024ca:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <MX_ADC2_Init+0x130>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80024d0:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <MX_ADC2_Init+0x130>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <MX_ADC2_Init+0x130>)
 80024d8:	2204      	movs	r2, #4
 80024da:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80024dc:	4b37      	ldr	r3, [pc, #220]	; (80025bc <MX_ADC2_Init+0x130>)
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <MX_ADC2_Init+0x130>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024ea:	4b34      	ldr	r3, [pc, #208]	; (80025bc <MX_ADC2_Init+0x130>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <MX_ADC2_Init+0x130>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <MX_ADC2_Init+0x130>)
 80024fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <MX_ADC2_Init+0x130>)
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002508:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <MX_ADC2_Init+0x130>)
 800250a:	220c      	movs	r2, #12
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <MX_ADC2_Init+0x130>)
 8002510:	2200      	movs	r2, #0
 8002512:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <MX_ADC2_Init+0x130>)
 8002516:	2200      	movs	r2, #0
 8002518:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800251a:	4b28      	ldr	r3, [pc, #160]	; (80025bc <MX_ADC2_Init+0x130>)
 800251c:	2201      	movs	r2, #1
 800251e:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002520:	4826      	ldr	r0, [pc, #152]	; (80025bc <MX_ADC2_Init+0x130>)
 8002522:	f001 fcd7 	bl	8003ed4 <HAL_ADC_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 800252c:	f000 fc66 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <MX_ADC2_Init+0x138>)
 8002532:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002534:	2306      	movs	r3, #6
 8002536:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002538:	2307      	movs	r3, #7
 800253a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800253c:	237f      	movs	r3, #127	; 0x7f
 800253e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002540:	2304      	movs	r3, #4
 8002542:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002548:	463b      	mov	r3, r7
 800254a:	4619      	mov	r1, r3
 800254c:	481b      	ldr	r0, [pc, #108]	; (80025bc <MX_ADC2_Init+0x130>)
 800254e:	f002 f92d 	bl	80047ac <HAL_ADC_ConfigChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8002558:	f000 fc50 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <MX_ADC2_Init+0x13c>)
 800255e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002560:	230c      	movs	r3, #12
 8002562:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002568:	463b      	mov	r3, r7
 800256a:	4619      	mov	r1, r3
 800256c:	4813      	ldr	r0, [pc, #76]	; (80025bc <MX_ADC2_Init+0x130>)
 800256e:	f002 f91d 	bl	80047ac <HAL_ADC_ConfigChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8002578:	f000 fc40 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <MX_ADC2_Init+0x140>)
 800257e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002580:	2312      	movs	r3, #18
 8002582:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002584:	463b      	mov	r3, r7
 8002586:	4619      	mov	r1, r3
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <MX_ADC2_Init+0x130>)
 800258a:	f002 f90f 	bl	80047ac <HAL_ADC_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 8002594:	f000 fc32 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <MX_ADC2_Init+0x144>)
 800259a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800259c:	2318      	movs	r3, #24
 800259e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80025a0:	463b      	mov	r3, r7
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <MX_ADC2_Init+0x130>)
 80025a6:	f002 f901 	bl	80047ac <HAL_ADC_ConfigChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80025b0:	f000 fc24 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	200007c8 	.word	0x200007c8
 80025c0:	50000100 	.word	0x50000100
 80025c4:	32601000 	.word	0x32601000
 80025c8:	3ac04000 	.word	0x3ac04000
 80025cc:	36902000 	.word	0x36902000
 80025d0:	0c900008 	.word	0x0c900008

080025d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b09e      	sub	sp, #120	; 0x78
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ec:	f107 0320 	add.w	r3, r7, #32
 80025f0:	2244      	movs	r2, #68	; 0x44
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f009 fc3b 	bl	800be70 <memset>
  if(adcHandle->Instance==ADC1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002602:	d171      	bne.n	80026e8 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002608:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800260a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800260e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002610:	f107 0320 	add.w	r3, r7, #32
 8002614:	4618      	mov	r0, r3
 8002616:	f005 fb3b 	bl	8007c90 <HAL_RCCEx_PeriphCLKConfig>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002620:	f000 fbec 	bl	8002dfc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002624:	4b7a      	ldr	r3, [pc, #488]	; (8002810 <HAL_ADC_MspInit+0x23c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	4a79      	ldr	r2, [pc, #484]	; (8002810 <HAL_ADC_MspInit+0x23c>)
 800262c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800262e:	4b78      	ldr	r3, [pc, #480]	; (8002810 <HAL_ADC_MspInit+0x23c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10b      	bne.n	800264e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002636:	4b77      	ldr	r3, [pc, #476]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	4a76      	ldr	r2, [pc, #472]	; (8002814 <HAL_ADC_MspInit+0x240>)
 800263c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002642:	4b74      	ldr	r3, [pc, #464]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b71      	ldr	r3, [pc, #452]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	4a70      	ldr	r2, [pc, #448]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800265a:	4b6e      	ldr	r3, [pc, #440]	; (8002814 <HAL_ADC_MspInit+0x240>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8002666:	2307      	movs	r3, #7
 8002668:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800266a:	2303      	movs	r3, #3
 800266c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267c:	f004 fb2a 	bl	8006cd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002680:	4b65      	ldr	r3, [pc, #404]	; (8002818 <HAL_ADC_MspInit+0x244>)
 8002682:	4a66      	ldr	r2, [pc, #408]	; (800281c <HAL_ADC_MspInit+0x248>)
 8002684:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002686:	4b64      	ldr	r3, [pc, #400]	; (8002818 <HAL_ADC_MspInit+0x244>)
 8002688:	2205      	movs	r2, #5
 800268a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800268c:	4b62      	ldr	r3, [pc, #392]	; (8002818 <HAL_ADC_MspInit+0x244>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002692:	4b61      	ldr	r3, [pc, #388]	; (8002818 <HAL_ADC_MspInit+0x244>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002698:	4b5f      	ldr	r3, [pc, #380]	; (8002818 <HAL_ADC_MspInit+0x244>)
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800269e:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <HAL_ADC_MspInit+0x244>)
 80026a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026a6:	4b5c      	ldr	r3, [pc, #368]	; (8002818 <HAL_ADC_MspInit+0x244>)
 80026a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_ADC_MspInit+0x244>)
 80026b0:	2220      	movs	r2, #32
 80026b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026b4:	4b58      	ldr	r3, [pc, #352]	; (8002818 <HAL_ADC_MspInit+0x244>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026ba:	4857      	ldr	r0, [pc, #348]	; (8002818 <HAL_ADC_MspInit+0x244>)
 80026bc:	f003 f932 	bl	8005924 <HAL_DMA_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80026c6:	f000 fb99 	bl	8002dfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_ADC_MspInit+0x244>)
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
 80026d0:	4a51      	ldr	r2, [pc, #324]	; (8002818 <HAL_ADC_MspInit+0x244>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	2012      	movs	r0, #18
 80026dc:	f002 ff23 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80026e0:	2012      	movs	r0, #18
 80026e2:	f002 ff3a 	bl	800555a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80026e6:	e08f      	b.n	8002808 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a4c      	ldr	r2, [pc, #304]	; (8002820 <HAL_ADC_MspInit+0x24c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	f040 808a 	bne.w	8002808 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80026f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80026fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80026fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	4618      	mov	r0, r3
 8002706:	f005 fac3 	bl	8007c90 <HAL_RCCEx_PeriphCLKConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8002710:	f000 fb74 	bl	8002dfc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002714:	4b3e      	ldr	r3, [pc, #248]	; (8002810 <HAL_ADC_MspInit+0x23c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	4a3d      	ldr	r2, [pc, #244]	; (8002810 <HAL_ADC_MspInit+0x23c>)
 800271c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800271e:	4b3c      	ldr	r3, [pc, #240]	; (8002810 <HAL_ADC_MspInit+0x23c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d10b      	bne.n	800273e <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <HAL_ADC_MspInit+0x240>)
 800272c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	4a34      	ldr	r2, [pc, #208]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274a:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_ADC_MspInit+0x240>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	4a2e      	ldr	r2, [pc, #184]	; (8002814 <HAL_ADC_MspInit+0x240>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_ADC_MspInit+0x240>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 800276e:	2360      	movs	r3, #96	; 0x60
 8002770:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002772:	2303      	movs	r3, #3
 8002774:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002784:	f004 faa6 	bl	8006cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8002788:	f640 0304 	movw	r3, #2052	; 0x804
 800278c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278e:	2303      	movs	r3, #3
 8002790:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800279a:	4619      	mov	r1, r3
 800279c:	4821      	ldr	r0, [pc, #132]	; (8002824 <HAL_ADC_MspInit+0x250>)
 800279e:	f004 fa99 	bl	8006cd4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027a4:	4a21      	ldr	r2, [pc, #132]	; (800282c <HAL_ADC_MspInit+0x258>)
 80027a6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80027a8:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027aa:	2224      	movs	r2, #36	; 0x24
 80027ac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b4:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027c8:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ce:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027d2:	2220      	movs	r2, #32
 80027d4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80027dc:	4812      	ldr	r0, [pc, #72]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027de:	f003 f8a1 	bl	8005924 <HAL_DMA_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_ADC_MspInit+0x218>
      Error_Handler();
 80027e8:	f000 fb08 	bl	8002dfc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
 80027f2:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_ADC_MspInit+0x254>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	2012      	movs	r0, #18
 80027fe:	f002 fe92 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002802:	2012      	movs	r0, #18
 8002804:	f002 fea9 	bl	800555a <HAL_NVIC_EnableIRQ>
}
 8002808:	bf00      	nop
 800280a:	3778      	adds	r7, #120	; 0x78
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200008f4 	.word	0x200008f4
 8002814:	40021000 	.word	0x40021000
 8002818:	20000834 	.word	0x20000834
 800281c:	40020008 	.word	0x40020008
 8002820:	50000100 	.word	0x50000100
 8002824:	48000400 	.word	0x48000400
 8002828:	20000894 	.word	0x20000894
 800282c:	4002001c 	.word	0x4002001c

08002830 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	; 0x30
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002836:	463b      	mov	r3, r7
 8002838:	2230      	movs	r2, #48	; 0x30
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f009 fb17 	bl	800be70 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <MX_DAC1_Init+0x6c>)
 8002844:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <MX_DAC1_Init+0x70>)
 8002846:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002848:	4814      	ldr	r0, [pc, #80]	; (800289c <MX_DAC1_Init+0x6c>)
 800284a:	f002 fea0 	bl	800558e <HAL_DAC_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002854:	f000 fad2 	bl	8002dfc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002874:	2301      	movs	r3, #1
 8002876:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800287c:	463b      	mov	r3, r7
 800287e:	2200      	movs	r2, #0
 8002880:	4619      	mov	r1, r3
 8002882:	4806      	ldr	r0, [pc, #24]	; (800289c <MX_DAC1_Init+0x6c>)
 8002884:	f002 fea6 	bl	80055d4 <HAL_DAC_ConfigChannel>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800288e:	f000 fab5 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002892:	bf00      	nop
 8002894:	3730      	adds	r7, #48	; 0x30
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200008f8 	.word	0x200008f8
 80028a0:	50000800 	.word	0x50000800

080028a4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <HAL_DAC_MspInit+0x74>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d124      	bne.n	8002910 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_DAC_MspInit+0x78>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_DAC_MspInit+0x78>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_DAC_MspInit+0x78>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_DAC_MspInit+0x78>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	4a0e      	ldr	r2, [pc, #56]	; (800291c <HAL_DAC_MspInit+0x78>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_DAC_MspInit+0x78>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028f6:	2310      	movs	r3, #16
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028fa:	2303      	movs	r3, #3
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290c:	f004 f9e2 	bl	8006cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002910:	bf00      	nop
 8002912:	3728      	adds	r7, #40	; 0x28
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	50000800 	.word	0x50000800
 800291c:	40021000 	.word	0x40021000

08002920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002926:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <MX_DMA_Init+0xc8>)
 8002928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292a:	4a2f      	ldr	r2, [pc, #188]	; (80029e8 <MX_DMA_Init+0xc8>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	6493      	str	r3, [r2, #72]	; 0x48
 8002932:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <MX_DMA_Init+0xc8>)
 8002934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <MX_DMA_Init+0xc8>)
 8002940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002942:	4a29      	ldr	r2, [pc, #164]	; (80029e8 <MX_DMA_Init+0xc8>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6493      	str	r3, [r2, #72]	; 0x48
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <MX_DMA_Init+0xc8>)
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <MX_DMA_Init+0xc8>)
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <MX_DMA_Init+0xc8>)
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	6493      	str	r3, [r2, #72]	; 0x48
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <MX_DMA_Init+0xc8>)
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	200b      	movs	r0, #11
 8002974:	f002 fdd7 	bl	8005526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002978:	200b      	movs	r0, #11
 800297a:	f002 fdee 	bl	800555a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	200c      	movs	r0, #12
 8002984:	f002 fdcf 	bl	8005526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002988:	200c      	movs	r0, #12
 800298a:	f002 fde6 	bl	800555a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	200d      	movs	r0, #13
 8002994:	f002 fdc7 	bl	8005526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002998:	200d      	movs	r0, #13
 800299a:	f002 fdde 	bl	800555a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	200e      	movs	r0, #14
 80029a4:	f002 fdbf 	bl	8005526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80029a8:	200e      	movs	r0, #14
 80029aa:	f002 fdd6 	bl	800555a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	2038      	movs	r0, #56	; 0x38
 80029b4:	f002 fdb7 	bl	8005526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80029b8:	2038      	movs	r0, #56	; 0x38
 80029ba:	f002 fdce 	bl	800555a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	2039      	movs	r0, #57	; 0x39
 80029c4:	f002 fdaf 	bl	8005526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80029c8:	2039      	movs	r0, #57	; 0x39
 80029ca:	f002 fdc6 	bl	800555a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	203a      	movs	r0, #58	; 0x3a
 80029d4:	f002 fda7 	bl	8005526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80029d8:	203a      	movs	r0, #58	; 0x3a
 80029da:	f002 fdbe 	bl	800555a <HAL_NVIC_EnableIRQ>

}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000

080029ec <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 80029f2:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <MX_FDCAN1_Init+0x8c>)
 80029f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 80029fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a02:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a2a:	222a      	movs	r2, #42	; 0x2a
 8002a2c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a3c:	2209      	movs	r2, #9
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a42:	220a      	movs	r2, #10
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a48:	2209      	movs	r2, #9
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002a5e:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_FDCAN1_Init+0x88>)
 8002a60:	f003 fa92 	bl	8005f88 <HAL_FDCAN_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002a6a:	f000 f9c7 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000090c 	.word	0x2000090c
 8002a78:	40006400 	.word	0x40006400

08002a7c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b09a      	sub	sp, #104	; 0x68
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	2244      	movs	r2, #68	; 0x44
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f009 f9e7 	bl	800be70 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_FDCAN_MspInit+0xbc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d141      	bne.n	8002b30 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	4618      	mov	r0, r3
 8002abe:	f005 f8e7 	bl	8007c90 <HAL_RCCEx_PeriphCLKConfig>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002ac8:	f000 f998 	bl	8002dfc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_FDCAN_MspInit+0xc0>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <HAL_FDCAN_MspInit+0xc0>)
 8002ad2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_FDCAN_MspInit+0xc0>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_FDCAN_MspInit+0xc0>)
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_FDCAN_MspInit+0xc0>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_FDCAN_MspInit+0xc0>)
 8002af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002afc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b00:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002b0e:	2309      	movs	r3, #9
 8002b10:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b16:	4619      	mov	r1, r3
 8002b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b1c:	f004 f8da 	bl	8006cd4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	2015      	movs	r0, #21
 8002b26:	f002 fcfe 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002b2a:	2015      	movs	r0, #21
 8002b2c:	f002 fd15 	bl	800555a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002b30:	bf00      	nop
 8002b32:	3768      	adds	r7, #104	; 0x68
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40006400 	.word	0x40006400
 8002b3c:	40021000 	.word	0x40021000

08002b40 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_FMAC_Init+0x20>)
 8002b46:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <MX_FMAC_Init+0x24>)
 8002b48:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_FMAC_Init+0x20>)
 8002b4c:	f004 f816 	bl	8006b7c <HAL_FMAC_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8002b56:	f000 f951 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000970 	.word	0x20000970
 8002b64:	40021400 	.word	0x40021400

08002b68 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_FMAC_MspInit+0x38>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10b      	bne.n	8002b92 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_FMAC_MspInit+0x3c>)
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_FMAC_MspInit+0x3c>)
 8002b80:	f043 0310 	orr.w	r3, r3, #16
 8002b84:	6493      	str	r3, [r2, #72]	; 0x48
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_FMAC_MspInit+0x3c>)
 8002b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40021400 	.word	0x40021400
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bbe:	4b51      	ldr	r3, [pc, #324]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	4a50      	ldr	r2, [pc, #320]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002bc4:	f043 0320 	orr.w	r3, r3, #32
 8002bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bca:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd6:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	4a4a      	ldr	r2, [pc, #296]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be2:	4b48      	ldr	r3, [pc, #288]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	4a44      	ldr	r2, [pc, #272]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfa:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	4a3e      	ldr	r2, [pc, #248]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c12:	4b3c      	ldr	r3, [pc, #240]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c1e:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002c24:	f043 0308 	orr.w	r3, r3, #8
 8002c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <MX_GPIO_Init+0x15c>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	21c0      	movs	r1, #192	; 0xc0
 8002c3a:	4833      	ldr	r0, [pc, #204]	; (8002d08 <MX_GPIO_Init+0x160>)
 8002c3c:	f004 f9cc 	bl	8006fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8002c40:	2200      	movs	r2, #0
 8002c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4a:	f004 f9c5 	bl	8006fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2104      	movs	r1, #4
 8002c52:	482e      	ldr	r0, [pc, #184]	; (8002d0c <MX_GPIO_Init+0x164>)
 8002c54:	f004 f9c0 	bl	8006fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2140      	movs	r1, #64	; 0x40
 8002c5c:	482c      	ldr	r0, [pc, #176]	; (8002d10 <MX_GPIO_Init+0x168>)
 8002c5e:	f004 f9bb 	bl	8006fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8002c62:	23c0      	movs	r3, #192	; 0xc0
 8002c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	4619      	mov	r1, r3
 8002c78:	4823      	ldr	r0, [pc, #140]	; (8002d08 <MX_GPIO_Init+0x160>)
 8002c7a:	f004 f82b 	bl	8006cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9e:	f004 f819 	bl	8006cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8002ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbe:	f004 f809 	bl	8006cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480c      	ldr	r0, [pc, #48]	; (8002d0c <MX_GPIO_Init+0x164>)
 8002cda:	f003 fffb 	bl	8006cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4806      	ldr	r0, [pc, #24]	; (8002d10 <MX_GPIO_Init+0x168>)
 8002cf6:	f003 ffed 	bl	8006cd4 <HAL_GPIO_Init>

}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	48000800 	.word	0x48000800
 8002d0c:	48000c00 	.word	0x48000c00
 8002d10:	48000400 	.word	0x48000400

08002d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d18:	f000 fe05 	bl	8003926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d1c:	f000 f81b 	bl	8002d56 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d20:	f7ff ff42 	bl	8002ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d24:	f7ff fdfc 	bl	8002920 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002d28:	f7ff fe60 	bl	80029ec <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8002d2c:	f000 f86c 	bl	8002e08 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002d30:	f000 f8a8 	bl	8002e84 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002d34:	f000 fb3c 	bl	80033b0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002d38:	f7ff faf4 	bl	8002324 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002d3c:	f7ff fba6 	bl	800248c <MX_ADC2_Init>
  MX_DAC1_Init();
 8002d40:	f7ff fd76 	bl	8002830 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8002d44:	f000 fcec 	bl	8003720 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002d48:	f000 fbfa 	bl	8003540 <MX_TIM3_Init>
  MX_FMAC_Init();
 8002d4c:	f7ff fef8 	bl	8002b40 <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 8002d50:	f7fd fd08 	bl	8000764 <BLDC_main>
 8002d54:	e7fc      	b.n	8002d50 <main+0x3c>

08002d56 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b094      	sub	sp, #80	; 0x50
 8002d5a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d5c:	f107 0318 	add.w	r3, r7, #24
 8002d60:	2238      	movs	r2, #56	; 0x38
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f009 f883 	bl	800be70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f004 f95f 	bl	800703c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d88:	2340      	movs	r3, #64	; 0x40
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d90:	2302      	movs	r3, #2
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002d94:	2304      	movs	r3, #4
 8002d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002d98:	2350      	movs	r3, #80	; 0x50
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002da0:	2308      	movs	r3, #8
 8002da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002da4:	2302      	movs	r3, #2
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da8:	f107 0318 	add.w	r3, r7, #24
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 f9f9 	bl	80071a4 <HAL_RCC_OscConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002db8:	f000 f820 	bl	8002dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f004 fcfd 	bl	80077d4 <HAL_RCC_ClockConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002de0:	f000 f80c 	bl	8002dfc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8002de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002de8:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8002dec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002df0:	f004 fe2c 	bl	8007a4c <HAL_RCC_MCOConfig>
}
 8002df4:	bf00      	nop
 8002df6:	3750      	adds	r7, #80	; 0x50
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e00:	b672      	cpsid	i
}
 8002e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <Error_Handler+0x8>
	...

08002e08 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <MX_SPI1_Init+0x78>)
 8002e10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e3e:	2228      	movs	r2, #40	; 0x28
 8002e40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e56:	2207      	movs	r2, #7
 8002e58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e66:	4805      	ldr	r0, [pc, #20]	; (8002e7c <MX_SPI1_Init+0x74>)
 8002e68:	f005 f902 	bl	8008070 <HAL_SPI_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002e72:	f7ff ffc3 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200009a8 	.word	0x200009a8
 8002e80:	40013000 	.word	0x40013000

08002e84 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002e8a:	4a1c      	ldr	r2, [pc, #112]	; (8002efc <MX_SPI3_Init+0x78>)
 8002e8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e96:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002e9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ea2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002eaa:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002eba:	2228      	movs	r2, #40	; 0x28
 8002ebc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002ed2:	2207      	movs	r2, #7
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <MX_SPI3_Init+0x74>)
 8002ee4:	f005 f8c4 	bl	8008070 <HAL_SPI_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002eee:	f7ff ff85 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000a0c 	.word	0x20000a0c
 8002efc:	40003c00 	.word	0x40003c00

08002f00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08c      	sub	sp, #48	; 0x30
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a89      	ldr	r2, [pc, #548]	; (8003144 <HAL_SPI_MspInit+0x244>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	f040 8083 	bne.w	800302a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f24:	4b88      	ldr	r3, [pc, #544]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8002f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f28:	4a87      	ldr	r2, [pc, #540]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8002f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f2e:	6613      	str	r3, [r2, #96]	; 0x60
 8002f30:	4b85      	ldr	r3, [pc, #532]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	4b82      	ldr	r3, [pc, #520]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	4a81      	ldr	r2, [pc, #516]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f48:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002f54:	2338      	movs	r3, #56	; 0x38
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f64:	2305      	movs	r3, #5
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4877      	ldr	r0, [pc, #476]	; (800314c <HAL_SPI_MspInit+0x24c>)
 8002f70:	f003 feb0 	bl	8006cd4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8002f74:	4b76      	ldr	r3, [pc, #472]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002f76:	4a77      	ldr	r2, [pc, #476]	; (8003154 <HAL_SPI_MspInit+0x254>)
 8002f78:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002f7a:	4b75      	ldr	r3, [pc, #468]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002f7c:	220a      	movs	r2, #10
 8002f7e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f80:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f86:	4b72      	ldr	r3, [pc, #456]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f8c:	4b70      	ldr	r3, [pc, #448]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f92:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f98:	4b6d      	ldr	r3, [pc, #436]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002f9e:	4b6c      	ldr	r3, [pc, #432]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002faa:	4869      	ldr	r0, [pc, #420]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002fac:	f002 fcba 	bl	8005924 <HAL_DMA_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002fb6:	f7ff ff21 	bl	8002dfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a64      	ldr	r2, [pc, #400]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002fbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002fc0:	4a63      	ldr	r2, [pc, #396]	; (8003150 <HAL_SPI_MspInit+0x250>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8002fc6:	4b64      	ldr	r3, [pc, #400]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002fc8:	4a64      	ldr	r2, [pc, #400]	; (800315c <HAL_SPI_MspInit+0x25c>)
 8002fca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002fcc:	4b62      	ldr	r3, [pc, #392]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002fce:	220b      	movs	r2, #11
 8002fd0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fd2:	4b61      	ldr	r3, [pc, #388]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd8:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fde:	4b5e      	ldr	r3, [pc, #376]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe4:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fea:	4b5b      	ldr	r3, [pc, #364]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff6:	4b58      	ldr	r3, [pc, #352]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002ffc:	4856      	ldr	r0, [pc, #344]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8002ffe:	f002 fc91 	bl	8005924 <HAL_DMA_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003008:	f7ff fef8 	bl	8002dfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
 8003012:	4a51      	ldr	r2, [pc, #324]	; (8003158 <HAL_SPI_MspInit+0x258>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	2100      	movs	r1, #0
 800301c:	2023      	movs	r0, #35	; 0x23
 800301e:	f002 fa82 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003022:	2023      	movs	r0, #35	; 0x23
 8003024:	f002 fa99 	bl	800555a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003028:	e088      	b.n	800313c <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a4c      	ldr	r2, [pc, #304]	; (8003160 <HAL_SPI_MspInit+0x260>)
 8003030:	4293      	cmp	r3, r2
 8003032:	f040 8083 	bne.w	800313c <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003036:	4b44      	ldr	r3, [pc, #272]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	4a43      	ldr	r2, [pc, #268]	; (8003148 <HAL_SPI_MspInit+0x248>)
 800303c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003040:	6593      	str	r3, [r2, #88]	; 0x58
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800304e:	4b3e      	ldr	r3, [pc, #248]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	4a3d      	ldr	r2, [pc, #244]	; (8003148 <HAL_SPI_MspInit+0x248>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_SPI_MspInit+0x248>)
 800305c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003066:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800306a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306c:	2302      	movs	r3, #2
 800306e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003074:	2300      	movs	r3, #0
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003078:	2306      	movs	r3, #6
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4619      	mov	r1, r3
 8003082:	4838      	ldr	r0, [pc, #224]	; (8003164 <HAL_SPI_MspInit+0x264>)
 8003084:	f003 fe26 	bl	8006cd4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8003088:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_SPI_MspInit+0x268>)
 800308a:	4a38      	ldr	r2, [pc, #224]	; (800316c <HAL_SPI_MspInit+0x26c>)
 800308c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <HAL_SPI_MspInit+0x268>)
 8003090:	220e      	movs	r2, #14
 8003092:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003094:	4b34      	ldr	r3, [pc, #208]	; (8003168 <HAL_SPI_MspInit+0x268>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800309a:	4b33      	ldr	r3, [pc, #204]	; (8003168 <HAL_SPI_MspInit+0x268>)
 800309c:	2200      	movs	r2, #0
 800309e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030a0:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_SPI_MspInit+0x268>)
 80030a2:	2280      	movs	r2, #128	; 0x80
 80030a4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a6:	4b30      	ldr	r3, [pc, #192]	; (8003168 <HAL_SPI_MspInit+0x268>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030ac:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_SPI_MspInit+0x268>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80030b2:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_SPI_MspInit+0x268>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_SPI_MspInit+0x268>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80030be:	482a      	ldr	r0, [pc, #168]	; (8003168 <HAL_SPI_MspInit+0x268>)
 80030c0:	f002 fc30 	bl	8005924 <HAL_DMA_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 80030ca:	f7ff fe97 	bl	8002dfc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a25      	ldr	r2, [pc, #148]	; (8003168 <HAL_SPI_MspInit+0x268>)
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58
 80030d4:	4a24      	ldr	r2, [pc, #144]	; (8003168 <HAL_SPI_MspInit+0x268>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80030da:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_SPI_MspInit+0x270>)
 80030dc:	4a25      	ldr	r2, [pc, #148]	; (8003174 <HAL_SPI_MspInit+0x274>)
 80030de:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80030e0:	4b23      	ldr	r3, [pc, #140]	; (8003170 <HAL_SPI_MspInit+0x270>)
 80030e2:	220f      	movs	r2, #15
 80030e4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_SPI_MspInit+0x270>)
 80030e8:	2210      	movs	r2, #16
 80030ea:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_SPI_MspInit+0x270>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <HAL_SPI_MspInit+0x270>)
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_SPI_MspInit+0x270>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <HAL_SPI_MspInit+0x270>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_SPI_MspInit+0x270>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_SPI_MspInit+0x270>)
 800310c:	2200      	movs	r2, #0
 800310e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003110:	4817      	ldr	r0, [pc, #92]	; (8003170 <HAL_SPI_MspInit+0x270>)
 8003112:	f002 fc07 	bl	8005924 <HAL_DMA_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 800311c:	f7ff fe6e 	bl	8002dfc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_SPI_MspInit+0x270>)
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <HAL_SPI_MspInit+0x270>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800312c:	2200      	movs	r2, #0
 800312e:	2100      	movs	r1, #0
 8003130:	2033      	movs	r0, #51	; 0x33
 8003132:	f002 f9f8 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003136:	2033      	movs	r0, #51	; 0x33
 8003138:	f002 fa0f 	bl	800555a <HAL_NVIC_EnableIRQ>
}
 800313c:	bf00      	nop
 800313e:	3730      	adds	r7, #48	; 0x30
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40013000 	.word	0x40013000
 8003148:	40021000 	.word	0x40021000
 800314c:	48000400 	.word	0x48000400
 8003150:	20000a70 	.word	0x20000a70
 8003154:	40020030 	.word	0x40020030
 8003158:	20000ad0 	.word	0x20000ad0
 800315c:	40020044 	.word	0x40020044
 8003160:	40003c00 	.word	0x40003c00
 8003164:	48000800 	.word	0x48000800
 8003168:	20000b30 	.word	0x20000b30
 800316c:	40020408 	.word	0x40020408
 8003170:	20000b90 	.word	0x20000b90
 8003174:	4002041c 	.word	0x4002041c

08003178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_MspInit+0x44>)
 8003180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003182:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <HAL_MspInit+0x44>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6613      	str	r3, [r2, #96]	; 0x60
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_MspInit+0x44>)
 800318c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_MspInit+0x44>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <HAL_MspInit+0x44>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6593      	str	r3, [r2, #88]	; 0x58
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_MspInit+0x44>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80031ae:	f003 ffe9 	bl	8007184 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000

080031c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <NMI_Handler+0x4>

080031c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ca:	e7fe      	b.n	80031ca <HardFault_Handler+0x4>

080031cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d0:	e7fe      	b.n	80031d0 <MemManage_Handler+0x4>

080031d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031d6:	e7fe      	b.n	80031d6 <BusFault_Handler+0x4>

080031d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031dc:	e7fe      	b.n	80031dc <UsageFault_Handler+0x4>

080031de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800320c:	f000 fbde 	bl	80039cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}

08003214 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <DMA1_Channel1_IRQHandler+0x10>)
 800321a:	f002 fd66 	bl	8005cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000834 	.word	0x20000834

08003228 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <DMA1_Channel2_IRQHandler+0x10>)
 800322e:	f002 fd5c 	bl	8005cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000894 	.word	0x20000894

0800323c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <DMA1_Channel3_IRQHandler+0x10>)
 8003242:	f002 fd52 	bl	8005cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000a70 	.word	0x20000a70

08003250 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <DMA1_Channel4_IRQHandler+0x10>)
 8003256:	f002 fd48 	bl	8005cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000ad0 	.word	0x20000ad0

08003264 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003268:	4803      	ldr	r0, [pc, #12]	; (8003278 <ADC1_2_IRQHandler+0x14>)
 800326a:	f001 f871 	bl	8004350 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800326e:	4803      	ldr	r0, [pc, #12]	; (800327c <ADC1_2_IRQHandler+0x18>)
 8003270:	f001 f86e 	bl	8004350 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	2000075c 	.word	0x2000075c
 800327c:	200007c8 	.word	0x200007c8

08003280 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003284:	4802      	ldr	r0, [pc, #8]	; (8003290 <FDCAN1_IT0_IRQHandler+0x10>)
 8003286:	f003 fa05 	bl	8006694 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000090c 	.word	0x2000090c

08003294 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003298:	4802      	ldr	r0, [pc, #8]	; (80032a4 <TIM3_IRQHandler+0x10>)
 800329a:	f005 ffc7 	bl	800922c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000c40 	.word	0x20000c40

080032a8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <SPI1_IRQHandler+0x10>)
 80032ae:	f005 f917 	bl	80084e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200009a8 	.word	0x200009a8

080032bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <USART1_IRQHandler+0x10>)
 80032c2:	f007 fb33 	bl	800a92c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000c8c 	.word	0x20000c8c

080032d0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <SPI3_IRQHandler+0x10>)
 80032d6:	f005 f903 	bl	80084e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000a0c 	.word	0x20000a0c

080032e4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80032e8:	4802      	ldr	r0, [pc, #8]	; (80032f4 <DMA2_Channel1_IRQHandler+0x10>)
 80032ea:	f002 fcfe 	bl	8005cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000b30 	.word	0x20000b30

080032f8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <DMA2_Channel2_IRQHandler+0x10>)
 80032fe:	f002 fcf4 	bl	8005cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000b90 	.word	0x20000b90

0800330c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003310:	4802      	ldr	r0, [pc, #8]	; (800331c <DMA2_Channel3_IRQHandler+0x10>)
 8003312:	f002 fcea 	bl	8005cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000d1c 	.word	0x20000d1c

08003320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003328:	4a14      	ldr	r2, [pc, #80]	; (800337c <_sbrk+0x5c>)
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <_sbrk+0x60>)
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <_sbrk+0x64>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <_sbrk+0x64>)
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <_sbrk+0x68>)
 8003340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <_sbrk+0x64>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	429a      	cmp	r2, r3
 800334e:	d207      	bcs.n	8003360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003350:	f008 fd96 	bl	800be80 <__errno>
 8003354:	4603      	mov	r3, r0
 8003356:	220c      	movs	r2, #12
 8003358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
 800335e:	e009      	b.n	8003374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <_sbrk+0x64>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <_sbrk+0x64>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <_sbrk+0x64>)
 8003370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003372:	68fb      	ldr	r3, [r7, #12]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20008000 	.word	0x20008000
 8003380:	00000400 	.word	0x00000400
 8003384:	20000bf0 	.word	0x20000bf0
 8003388:	20000ec8 	.word	0x20000ec8

0800338c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <SystemInit+0x20>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	4a05      	ldr	r2, [pc, #20]	; (80033ac <SystemInit+0x20>)
 8003398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800339c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b09c      	sub	sp, #112	; 0x70
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
 80033e0:	615a      	str	r2, [r3, #20]
 80033e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	2234      	movs	r2, #52	; 0x34
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f008 fd40 	bl	800be70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033f0:	4b51      	ldr	r3, [pc, #324]	; (8003538 <MX_TIM1_Init+0x188>)
 80033f2:	4a52      	ldr	r2, [pc, #328]	; (800353c <MX_TIM1_Init+0x18c>)
 80033f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80033f6:	4b50      	ldr	r3, [pc, #320]	; (8003538 <MX_TIM1_Init+0x188>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80033fc:	4b4e      	ldr	r3, [pc, #312]	; (8003538 <MX_TIM1_Init+0x188>)
 80033fe:	2220      	movs	r2, #32
 8003400:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 8003402:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <MX_TIM1_Init+0x188>)
 8003404:	f240 52db 	movw	r2, #1499	; 0x5db
 8003408:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800340a:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <MX_TIM1_Init+0x188>)
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003410:	4b49      	ldr	r3, [pc, #292]	; (8003538 <MX_TIM1_Init+0x188>)
 8003412:	2200      	movs	r2, #0
 8003414:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003416:	4b48      	ldr	r3, [pc, #288]	; (8003538 <MX_TIM1_Init+0x188>)
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800341c:	4846      	ldr	r0, [pc, #280]	; (8003538 <MX_TIM1_Init+0x188>)
 800341e:	f005 fc25 	bl	8008c6c <HAL_TIM_Base_Init>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003428:	f7ff fce8 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800342c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003432:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003436:	4619      	mov	r1, r3
 8003438:	483f      	ldr	r0, [pc, #252]	; (8003538 <MX_TIM1_Init+0x188>)
 800343a:	f006 f98b 	bl	8009754 <HAL_TIM_ConfigClockSource>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003444:	f7ff fcda 	bl	8002dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003448:	483b      	ldr	r0, [pc, #236]	; (8003538 <MX_TIM1_Init+0x188>)
 800344a:	f005 fcf7 	bl	8008e3c <HAL_TIM_PWM_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003454:	f7ff fcd2 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003464:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003468:	4619      	mov	r1, r3
 800346a:	4833      	ldr	r0, [pc, #204]	; (8003538 <MX_TIM1_Init+0x188>)
 800346c:	f006 ffee 	bl	800a44c <HAL_TIMEx_MasterConfigSynchronization>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003476:	f7ff fcc1 	bl	8002dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800347a:	2360      	movs	r3, #96	; 0x60
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003482:	2302      	movs	r3, #2
 8003484:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003486:	2308      	movs	r3, #8
 8003488:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003496:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800349a:	2200      	movs	r2, #0
 800349c:	4619      	mov	r1, r3
 800349e:	4826      	ldr	r0, [pc, #152]	; (8003538 <MX_TIM1_Init+0x188>)
 80034a0:	f006 f844 	bl	800952c <HAL_TIM_PWM_ConfigChannel>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80034aa:	f7ff fca7 	bl	8002dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034b2:	2204      	movs	r2, #4
 80034b4:	4619      	mov	r1, r3
 80034b6:	4820      	ldr	r0, [pc, #128]	; (8003538 <MX_TIM1_Init+0x188>)
 80034b8:	f006 f838 	bl	800952c <HAL_TIM_PWM_ConfigChannel>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80034c2:	f7ff fc9b 	bl	8002dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034ca:	2208      	movs	r2, #8
 80034cc:	4619      	mov	r1, r3
 80034ce:	481a      	ldr	r0, [pc, #104]	; (8003538 <MX_TIM1_Init+0x188>)
 80034d0:	f006 f82c 	bl	800952c <HAL_TIM_PWM_ConfigChannel>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80034da:	f7ff fc8f 	bl	8002dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80034fc:	2300      	movs	r3, #0
 80034fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003500:	2300      	movs	r3, #0
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800350e:	2300      	movs	r3, #0
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003512:	2300      	movs	r3, #0
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	4619      	mov	r1, r3
 800351a:	4807      	ldr	r0, [pc, #28]	; (8003538 <MX_TIM1_Init+0x188>)
 800351c:	f007 f818 	bl	800a550 <HAL_TIMEx_ConfigBreakDeadTime>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8003526:	f7ff fc69 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800352a:	4803      	ldr	r0, [pc, #12]	; (8003538 <MX_TIM1_Init+0x188>)
 800352c:	f000 f890 	bl	8003650 <HAL_TIM_MspPostInit>

}
 8003530:	bf00      	nop
 8003532:	3770      	adds	r7, #112	; 0x70
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000bf4 	.word	0x20000bf4
 800353c:	40012c00 	.word	0x40012c00

08003540 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003546:	f107 0310 	add.w	r3, r7, #16
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	605a      	str	r2, [r3, #4]
 800355c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <MX_TIM3_Init+0x94>)
 8003560:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <MX_TIM3_Init+0x98>)
 8003562:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <MX_TIM3_Init+0x94>)
 8003566:	2203      	movs	r2, #3
 8003568:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356a:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <MX_TIM3_Init+0x94>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8003570:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <MX_TIM3_Init+0x94>)
 8003572:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003576:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003578:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <MX_TIM3_Init+0x94>)
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <MX_TIM3_Init+0x94>)
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003584:	4813      	ldr	r0, [pc, #76]	; (80035d4 <MX_TIM3_Init+0x94>)
 8003586:	f005 fb71 	bl	8008c6c <HAL_TIM_Base_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003590:	f7ff fc34 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800359a:	f107 0310 	add.w	r3, r7, #16
 800359e:	4619      	mov	r1, r3
 80035a0:	480c      	ldr	r0, [pc, #48]	; (80035d4 <MX_TIM3_Init+0x94>)
 80035a2:	f006 f8d7 	bl	8009754 <HAL_TIM_ConfigClockSource>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80035ac:	f7ff fc26 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b0:	2300      	movs	r3, #0
 80035b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4805      	ldr	r0, [pc, #20]	; (80035d4 <MX_TIM3_Init+0x94>)
 80035be:	f006 ff45 	bl	800a44c <HAL_TIMEx_MasterConfigSynchronization>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80035c8:	f7ff fc18 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035cc:	bf00      	nop
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000c40 	.word	0x20000c40
 80035d8:	40000400 	.word	0x40000400

080035dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_TIM_Base_MspInit+0x68>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10c      	bne.n	8003608 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <HAL_TIM_Base_MspInit+0x6c>)
 80035f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f2:	4a15      	ldr	r2, [pc, #84]	; (8003648 <HAL_TIM_Base_MspInit+0x6c>)
 80035f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035f8:	6613      	str	r3, [r2, #96]	; 0x60
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <HAL_TIM_Base_MspInit+0x6c>)
 80035fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003606:	e018      	b.n	800363a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <HAL_TIM_Base_MspInit+0x70>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d113      	bne.n	800363a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <HAL_TIM_Base_MspInit+0x6c>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	4a0c      	ldr	r2, [pc, #48]	; (8003648 <HAL_TIM_Base_MspInit+0x6c>)
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	6593      	str	r3, [r2, #88]	; 0x58
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <HAL_TIM_Base_MspInit+0x6c>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	201d      	movs	r0, #29
 8003630:	f001 ff79 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003634:	201d      	movs	r0, #29
 8003636:	f001 ff90 	bl	800555a <HAL_NVIC_EnableIRQ>
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40021000 	.word	0x40021000
 800364c:	40000400 	.word	0x40000400

08003650 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 0314 	add.w	r3, r7, #20
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a28      	ldr	r2, [pc, #160]	; (8003710 <HAL_TIM_MspPostInit+0xc0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d149      	bne.n	8003706 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003672:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_TIM_MspPostInit+0xc4>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	4a27      	ldr	r2, [pc, #156]	; (8003714 <HAL_TIM_MspPostInit+0xc4>)
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800367e:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_TIM_MspPostInit+0xc4>)
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_TIM_MspPostInit+0xc4>)
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	4a21      	ldr	r2, [pc, #132]	; (8003714 <HAL_TIM_MspPostInit+0xc4>)
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003696:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_TIM_MspPostInit+0xc4>)
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80036a2:	2307      	movs	r3, #7
 80036a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80036b2:	2302      	movs	r3, #2
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	4619      	mov	r1, r3
 80036bc:	4816      	ldr	r0, [pc, #88]	; (8003718 <HAL_TIM_MspPostInit+0xc8>)
 80036be:	f003 fb09 	bl	8006cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80036c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80036c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80036d4:	2306      	movs	r3, #6
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4619      	mov	r1, r3
 80036de:	480f      	ldr	r0, [pc, #60]	; (800371c <HAL_TIM_MspPostInit+0xcc>)
 80036e0:	f003 faf8 	bl	8006cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	2302      	movs	r3, #2
 80036ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80036f6:	2304      	movs	r3, #4
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fa:	f107 0314 	add.w	r3, r7, #20
 80036fe:	4619      	mov	r1, r3
 8003700:	4806      	ldr	r0, [pc, #24]	; (800371c <HAL_TIM_MspPostInit+0xcc>)
 8003702:	f003 fae7 	bl	8006cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003706:	bf00      	nop
 8003708:	3728      	adds	r7, #40	; 0x28
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40021000 	.word	0x40021000
 8003718:	48000800 	.word	0x48000800
 800371c:	48000400 	.word	0x48000400

08003720 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003724:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 8003726:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <MX_USART1_UART_Init+0x94>)
 8003728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 800372c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 8003746:	220c      	movs	r2, #12
 8003748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003750:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 8003758:	2200      	movs	r2, #0
 800375a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 8003764:	2200      	movs	r2, #0
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003768:	4811      	ldr	r0, [pc, #68]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 800376a:	f006 fffc 	bl	800a766 <HAL_UART_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003774:	f7ff fb42 	bl	8002dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003778:	2100      	movs	r1, #0
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 800377c:	f008 fa73 	bl	800bc66 <HAL_UARTEx_SetTxFifoThreshold>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003786:	f7ff fb39 	bl	8002dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800378a:	2100      	movs	r1, #0
 800378c:	4808      	ldr	r0, [pc, #32]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 800378e:	f008 faa8 	bl	800bce2 <HAL_UARTEx_SetRxFifoThreshold>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003798:	f7ff fb30 	bl	8002dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800379c:	4804      	ldr	r0, [pc, #16]	; (80037b0 <MX_USART1_UART_Init+0x90>)
 800379e:	f008 fa29 	bl	800bbf4 <HAL_UARTEx_DisableFifoMode>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80037a8:	f7ff fb28 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037ac:	bf00      	nop
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000c8c 	.word	0x20000c8c
 80037b4:	40013800 	.word	0x40013800

080037b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b09a      	sub	sp, #104	; 0x68
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037d0:	f107 0310 	add.w	r3, r7, #16
 80037d4:	2244      	movs	r2, #68	; 0x44
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f008 fb49 	bl	800be70 <memset>
  if(uartHandle->Instance==USART1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a37      	ldr	r2, [pc, #220]	; (80038c0 <HAL_UART_MspInit+0x108>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d166      	bne.n	80038b6 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037e8:	2301      	movs	r3, #1
 80037ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	4618      	mov	r0, r3
 80037f6:	f004 fa4b 	bl	8007c90 <HAL_RCCEx_PeriphCLKConfig>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003800:	f7ff fafc 	bl	8002dfc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003804:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <HAL_UART_MspInit+0x10c>)
 8003806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003808:	4a2e      	ldr	r2, [pc, #184]	; (80038c4 <HAL_UART_MspInit+0x10c>)
 800380a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800380e:	6613      	str	r3, [r2, #96]	; 0x60
 8003810:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <HAL_UART_MspInit+0x10c>)
 8003812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800381c:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <HAL_UART_MspInit+0x10c>)
 800381e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003820:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <HAL_UART_MspInit+0x10c>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003828:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <HAL_UART_MspInit+0x10c>)
 800382a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003834:	2330      	movs	r3, #48	; 0x30
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003840:	2300      	movs	r3, #0
 8003842:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003844:	2307      	movs	r3, #7
 8003846:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003848:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800384c:	4619      	mov	r1, r3
 800384e:	481e      	ldr	r0, [pc, #120]	; (80038c8 <HAL_UART_MspInit+0x110>)
 8003850:	f003 fa40 	bl	8006cd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_UART_MspInit+0x114>)
 8003856:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_UART_MspInit+0x118>)
 8003858:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800385a:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_UART_MspInit+0x114>)
 800385c:	2219      	movs	r2, #25
 800385e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_UART_MspInit+0x114>)
 8003862:	2210      	movs	r2, #16
 8003864:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_UART_MspInit+0x114>)
 8003868:	2200      	movs	r2, #0
 800386a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <HAL_UART_MspInit+0x114>)
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_UART_MspInit+0x114>)
 8003874:	2200      	movs	r2, #0
 8003876:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_UART_MspInit+0x114>)
 800387a:	2200      	movs	r2, #0
 800387c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_UART_MspInit+0x114>)
 8003880:	2200      	movs	r2, #0
 8003882:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_UART_MspInit+0x114>)
 8003886:	2200      	movs	r2, #0
 8003888:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800388a:	4810      	ldr	r0, [pc, #64]	; (80038cc <HAL_UART_MspInit+0x114>)
 800388c:	f002 f84a 	bl	8005924 <HAL_DMA_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003896:	f7ff fab1 	bl	8002dfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <HAL_UART_MspInit+0x114>)
 800389e:	679a      	str	r2, [r3, #120]	; 0x78
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <HAL_UART_MspInit+0x114>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2100      	movs	r1, #0
 80038aa:	2025      	movs	r0, #37	; 0x25
 80038ac:	f001 fe3b 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038b0:	2025      	movs	r0, #37	; 0x25
 80038b2:	f001 fe52 	bl	800555a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80038b6:	bf00      	nop
 80038b8:	3768      	adds	r7, #104	; 0x68
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40013800 	.word	0x40013800
 80038c4:	40021000 	.word	0x40021000
 80038c8:	48000800 	.word	0x48000800
 80038cc:	20000d1c 	.word	0x20000d1c
 80038d0:	40020430 	.word	0x40020430

080038d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038d4:	480d      	ldr	r0, [pc, #52]	; (800390c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038d8:	480d      	ldr	r0, [pc, #52]	; (8003910 <LoopForever+0x6>)
  ldr r1, =_edata
 80038da:	490e      	ldr	r1, [pc, #56]	; (8003914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038dc:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <LoopForever+0xe>)
  movs r3, #0
 80038de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80038e0:	e002      	b.n	80038e8 <LoopCopyDataInit>

080038e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e6:	3304      	adds	r3, #4

080038e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038ec:	d3f9      	bcc.n	80038e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ee:	4a0b      	ldr	r2, [pc, #44]	; (800391c <LoopForever+0x12>)
  ldr r4, =_ebss
 80038f0:	4c0b      	ldr	r4, [pc, #44]	; (8003920 <LoopForever+0x16>)
  movs r3, #0
 80038f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f4:	e001      	b.n	80038fa <LoopFillZerobss>

080038f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f8:	3204      	adds	r2, #4

080038fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038fc:	d3fb      	bcc.n	80038f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038fe:	f7ff fd45 	bl	800338c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003902:	f008 fac3 	bl	800be8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003906:	f7ff fa05 	bl	8002d14 <main>

0800390a <LoopForever>:

LoopForever:
    b LoopForever
 800390a:	e7fe      	b.n	800390a <LoopForever>
  ldr   r0, =_estack
 800390c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003914:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8003918:	0800c858 	.word	0x0800c858
  ldr r2, =_sbss
 800391c:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8003920:	20000ec8 	.word	0x20000ec8

08003924 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003924:	e7fe      	b.n	8003924 <COMP1_2_3_IRQHandler>

08003926 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003930:	2003      	movs	r0, #3
 8003932:	f001 fded 	bl	8005510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003936:	200f      	movs	r0, #15
 8003938:	f000 f80e 	bl	8003958 <HAL_InitTick>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	71fb      	strb	r3, [r7, #7]
 8003946:	e001      	b.n	800394c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003948:	f7ff fc16 	bl	8003178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800394c:	79fb      	ldrb	r3, [r7, #7]

}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <HAL_InitTick+0x68>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d022      	beq.n	80039b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800396c:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <HAL_InitTick+0x6c>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_InitTick+0x68>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003978:	fbb1 f3f3 	udiv	r3, r1, r3
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	4618      	mov	r0, r3
 8003982:	f001 fdf8 	bl	8005576 <HAL_SYSTICK_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d809      	bhi.n	80039a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003992:	2200      	movs	r2, #0
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	f04f 30ff 	mov.w	r0, #4294967295
 800399a:	f001 fdc4 	bl	8005526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_InitTick+0x70>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e007      	b.n	80039b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	e004      	b.n	80039b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e001      	b.n	80039b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	200000e0 	.word	0x200000e0
 80039c4:	200000d8 	.word	0x200000d8
 80039c8:	200000dc 	.word	0x200000dc

080039cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_IncTick+0x1c>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_IncTick+0x20>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4413      	add	r3, r2
 80039da:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_IncTick+0x1c>)
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	20000d7c 	.word	0x20000d7c
 80039ec:	200000e0 	.word	0x200000e0

080039f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return uwTick;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <HAL_GetTick+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000d7c 	.word	0x20000d7c

08003a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a10:	f7ff ffee 	bl	80039f0 <HAL_GetTick>
 8003a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d004      	beq.n	8003a2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_Delay+0x40>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4413      	add	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a2c:	bf00      	nop
 8003a2e:	f7ff ffdf 	bl	80039f0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d8f7      	bhi.n	8003a2e <HAL_Delay+0x26>
  {
  }
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200000e0 	.word	0x200000e0

08003a4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3360      	adds	r3, #96	; 0x60
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <LL_ADC_SetOffset+0x44>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	03fff000 	.word	0x03fff000

08003afc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3360      	adds	r3, #96	; 0x60
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3360      	adds	r3, #96	; 0x60
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b087      	sub	sp, #28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3360      	adds	r3, #96	; 0x60
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3360      	adds	r3, #96	; 0x60
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	615a      	str	r2, [r3, #20]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b087      	sub	sp, #28
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3330      	adds	r3, #48	; 0x30
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	4413      	add	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	211f      	movs	r1, #31
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	401a      	ands	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	0e9b      	lsrs	r3, r3, #26
 8003c4e:	f003 011f 	and.w	r1, r3, #31
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0e5b      	lsrs	r3, r3, #25
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	4413      	add	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	0d1b      	lsrs	r3, r3, #20
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2107      	movs	r1, #7
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	401a      	ands	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	0d1b      	lsrs	r3, r3, #20
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0f      	ldr	r2, [pc, #60]	; (8003d38 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10a      	bne.n	8003d16 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003d14:	e00a      	b.n	8003d2c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d22:	43db      	mvns	r3, r3
 8003d24:	401a      	ands	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	407f0000 	.word	0x407f0000

08003d3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 031f 	and.w	r3, r3, #31
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6093      	str	r3, [r2, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dac:	d101      	bne.n	8003db2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dfc:	d101      	bne.n	8003e02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e24:	f043 0201 	orr.w	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <LL_ADC_IsEnabled+0x18>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <LL_ADC_IsEnabled+0x1a>
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d101      	bne.n	8003e9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d101      	bne.n	8003ec4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b089      	sub	sp, #36	; 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e177      	b.n	80041de <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7fe fb69 	bl	80025d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff3f 	bl	8003d98 <LL_ADC_IsDeepPowerDownEnabled>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff25 	bl	8003d74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff5a 	bl	8003de8 <LL_ADC_IsInternalRegulatorEnabled>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d115      	bne.n	8003f66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff3e 	bl	8003dc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f44:	4b9c      	ldr	r3, [pc, #624]	; (80041b8 <HAL_ADC_Init+0x2e4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	4a9c      	ldr	r2, [pc, #624]	; (80041bc <HAL_ADC_Init+0x2e8>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	3301      	adds	r3, #1
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f58:	e002      	b.n	8003f60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f9      	bne.n	8003f5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff3c 	bl	8003de8 <LL_ADC_IsInternalRegulatorEnabled>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	f043 0210 	orr.w	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ff75 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8003f9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 8110 	bne.w	80041cc <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 810c 	bne.w	80041cc <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fbc:	f043 0202 	orr.w	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff35 	bl	8003e38 <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d111      	bne.n	8003ff8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003fd8:	f7ff ff2e 	bl	8003e38 <LL_ADC_IsEnabled>
 8003fdc:	4604      	mov	r4, r0
 8003fde:	4878      	ldr	r0, [pc, #480]	; (80041c0 <HAL_ADC_Init+0x2ec>)
 8003fe0:	f7ff ff2a 	bl	8003e38 <LL_ADC_IsEnabled>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4323      	orrs	r3, r4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4874      	ldr	r0, [pc, #464]	; (80041c4 <HAL_ADC_Init+0x2f0>)
 8003ff4:	f7ff fd2a 	bl	8003a4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	7f5b      	ldrb	r3, [r3, #29]
 8003ffc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004002:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004008:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800400e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004016:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004022:	2b01      	cmp	r3, #1
 8004024:	d106      	bne.n	8004034 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	3b01      	subs	r3, #1
 800402c:	045b      	lsls	r3, r3, #17
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d009      	beq.n	8004050 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	4b5c      	ldr	r3, [pc, #368]	; (80041c8 <HAL_ADC_Init+0x2f4>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	69b9      	ldr	r1, [r7, #24]
 8004060:	430b      	orrs	r3, r1
 8004062:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff ff01 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8004084:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ff0e 	bl	8003eac <LL_ADC_INJ_IsConversionOngoing>
 8004090:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d16d      	bne.n	8004174 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d16a      	bne.n	8004174 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80040a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ba:	f023 0302 	bic.w	r3, r3, #2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	69b9      	ldr	r1, [r7, #24]
 80040c4:	430b      	orrs	r3, r1
 80040c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d017      	beq.n	8004100 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6911      	ldr	r1, [r2, #16]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80040fe:	e013      	b.n	8004128 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800410e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004124:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412e:	2b01      	cmp	r3, #1
 8004130:	d118      	bne.n	8004164 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800413c:	f023 0304 	bic.w	r3, r3, #4
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004148:	4311      	orrs	r1, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800414e:	4311      	orrs	r1, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004154:	430a      	orrs	r2, r1
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	611a      	str	r2, [r3, #16]
 8004162:	e007      	b.n	8004174 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10c      	bne.n	8004196 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f023 010f 	bic.w	r1, r3, #15
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	1e5a      	subs	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
 8004194:	e007      	b.n	80041a6 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 020f 	bic.w	r2, r2, #15
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80041b6:	e011      	b.n	80041dc <HAL_ADC_Init+0x308>
 80041b8:	200000d8 	.word	0x200000d8
 80041bc:	053e2d63 	.word	0x053e2d63
 80041c0:	50000100 	.word	0x50000100
 80041c4:	50000300 	.word	0x50000300
 80041c8:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	f043 0210 	orr.w	r2, r3, #16
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	bf00      	nop

080041e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041f4:	4851      	ldr	r0, [pc, #324]	; (800433c <HAL_ADC_Start_DMA+0x154>)
 80041f6:	f7ff fda1 	bl	8003d3c <LL_ADC_GetMultimode>
 80041fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fe40 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 808f 	bne.w	800432c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_ADC_Start_DMA+0x34>
 8004218:	2302      	movs	r3, #2
 800421a:	e08a      	b.n	8004332 <HAL_ADC_Start_DMA+0x14a>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b05      	cmp	r3, #5
 800422e:	d002      	beq.n	8004236 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b09      	cmp	r3, #9
 8004234:	d173      	bne.n	800431e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fea8 	bl	8004f8c <ADC_Enable>
 800423c:	4603      	mov	r3, r0
 800423e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d166      	bne.n	8004314 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a38      	ldr	r2, [pc, #224]	; (8004340 <HAL_ADC_Start_DMA+0x158>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d002      	beq.n	800426a <HAL_ADC_Start_DMA+0x82>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	e001      	b.n	800426e <HAL_ADC_Start_DMA+0x86>
 800426a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	4293      	cmp	r3, r2
 8004274:	d002      	beq.n	800427c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004298:	f023 0206 	bic.w	r2, r3, #6
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	661a      	str	r2, [r3, #96]	; 0x60
 80042a0:	e002      	b.n	80042a8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ac:	4a25      	ldr	r2, [pc, #148]	; (8004344 <HAL_ADC_Start_DMA+0x15c>)
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <HAL_ADC_Start_DMA+0x160>)
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	4a23      	ldr	r2, [pc, #140]	; (800434c <HAL_ADC_Start_DMA+0x164>)
 80042be:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	221c      	movs	r2, #28
 80042c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0210 	orr.w	r2, r2, #16
 80042de:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3340      	adds	r3, #64	; 0x40
 80042fa:	4619      	mov	r1, r3
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f001 fbb8 	bl	8005a74 <HAL_DMA_Start_IT>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fda6 	bl	8003e5e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004312:	e00d      	b.n	8004330 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800431c:	e008      	b.n	8004330 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800432a:	e001      	b.n	8004330 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800432c:	2302      	movs	r3, #2
 800432e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004330:	7dfb      	ldrb	r3, [r7, #23]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	50000300 	.word	0x50000300
 8004340:	50000100 	.word	0x50000100
 8004344:	08005051 	.word	0x08005051
 8004348:	08005129 	.word	0x08005129
 800434c:	08005145 	.word	0x08005145

08004350 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800436c:	4883      	ldr	r0, [pc, #524]	; (800457c <HAL_ADC_IRQHandler+0x22c>)
 800436e:	f7ff fce5 	bl	8003d3c <LL_ADC_GetMultimode>
 8004372:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d017      	beq.n	80043ae <HAL_ADC_IRQHandler+0x5e>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d012      	beq.n	80043ae <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004398:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 ff37 	bl	8005214 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2202      	movs	r2, #2
 80043ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_ADC_IRQHandler+0x72>
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8085 	beq.w	80044d8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d07f      	beq.n	80044d8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fbfb 	bl	8003bf0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d064      	beq.n	80044ca <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a5e      	ldr	r2, [pc, #376]	; (8004580 <HAL_ADC_IRQHandler+0x230>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d002      	beq.n	8004410 <HAL_ADC_IRQHandler+0xc0>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	e001      	b.n	8004414 <HAL_ADC_IRQHandler+0xc4>
 8004410:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	4293      	cmp	r3, r2
 800441a:	d008      	beq.n	800442e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b05      	cmp	r3, #5
 8004426:	d002      	beq.n	800442e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b09      	cmp	r3, #9
 800442c:	d104      	bne.n	8004438 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	e00d      	b.n	8004454 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a50      	ldr	r2, [pc, #320]	; (8004580 <HAL_ADC_IRQHandler+0x230>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d002      	beq.n	8004448 <HAL_ADC_IRQHandler+0xf8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	e001      	b.n	800444c <HAL_ADC_IRQHandler+0xfc>
 8004448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800444c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d135      	bne.n	80044ca <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d12e      	bne.n	80044ca <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fd08 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d11a      	bne.n	80044b2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 020c 	bic.w	r2, r2, #12
 800448a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d112      	bne.n	80044ca <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80044b0:	e00b      	b.n	80044ca <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	f043 0210 	orr.w	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fd fd5e 	bl	8001f8c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	220c      	movs	r2, #12
 80044d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_IRQHandler+0x19c>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 809e 	beq.w	8004634 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8098 	beq.w	8004634 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fba4 	bl	8003c6e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004526:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fb5f 	bl	8003bf0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004532:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a11      	ldr	r2, [pc, #68]	; (8004580 <HAL_ADC_IRQHandler+0x230>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d002      	beq.n	8004544 <HAL_ADC_IRQHandler+0x1f4>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	e001      	b.n	8004548 <HAL_ADC_IRQHandler+0x1f8>
 8004544:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	4293      	cmp	r3, r2
 800454e:	d008      	beq.n	8004562 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d002      	beq.n	8004562 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b07      	cmp	r3, #7
 8004560:	d104      	bne.n	800456c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	e011      	b.n	8004590 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a03      	ldr	r2, [pc, #12]	; (8004580 <HAL_ADC_IRQHandler+0x230>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d006      	beq.n	8004584 <HAL_ADC_IRQHandler+0x234>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	e005      	b.n	8004588 <HAL_ADC_IRQHandler+0x238>
 800457c:	50000300 	.word	0x50000300
 8004580:	50000100 	.word	0x50000100
 8004584:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004588:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d047      	beq.n	8004626 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d007      	beq.n	80045b0 <HAL_ADC_IRQHandler+0x260>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d03f      	beq.n	8004626 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d13a      	bne.n	8004626 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d133      	bne.n	8004626 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d12e      	bne.n	8004626 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fc6d 	bl	8003eac <LL_ADC_INJ_IsConversionOngoing>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11a      	bne.n	800460e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045e6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d112      	bne.n	8004626 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	65da      	str	r2, [r3, #92]	; 0x5c
 800460c:	e00b      	b.n	8004626 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	f043 0210 	orr.w	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461e:	f043 0201 	orr.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fdcc 	bl	80051c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2260      	movs	r2, #96	; 0x60
 8004632:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b00      	cmp	r3, #0
 800463c:	d011      	beq.n	8004662 <HAL_ADC_IRQHandler+0x312>
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f895 	bl	8004784 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2280      	movs	r2, #128	; 0x80
 8004660:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d012      	beq.n	8004692 <HAL_ADC_IRQHandler+0x342>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fdb2 	bl	80051ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004690:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004698:	2b00      	cmp	r3, #0
 800469a:	d012      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x372>
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fda4 	bl	8005200 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d036      	beq.n	800473a <HAL_ADC_IRQHandler+0x3ea>
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d031      	beq.n	800473a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80046de:	2301      	movs	r3, #1
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
 80046e2:	e014      	b.n	800470e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80046ea:	4825      	ldr	r0, [pc, #148]	; (8004780 <HAL_ADC_IRQHandler+0x430>)
 80046ec:	f7ff fb34 	bl	8003d58 <LL_ADC_GetMultiDMATransfer>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80046f6:	2301      	movs	r3, #1
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
 80046fa:	e008      	b.n	800470e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800470a:	2301      	movs	r3, #1
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	2b01      	cmp	r3, #1
 8004712:	d10e      	bne.n	8004732 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004718:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004724:	f043 0202 	orr.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f833 	bl	8004798 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2210      	movs	r2, #16
 8004738:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004740:	2b00      	cmp	r3, #0
 8004742:	d018      	beq.n	8004776 <HAL_ADC_IRQHandler+0x426>
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474a:	2b00      	cmp	r3, #0
 800474c:	d013      	beq.n	8004776 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	f043 0208 	orr.w	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800476e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fd31 	bl	80051d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004776:	bf00      	nop
 8004778:	3728      	adds	r7, #40	; 0x28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	50000300 	.word	0x50000300

08004784 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b0b6      	sub	sp, #216	; 0xd8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x22>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e3c8      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x7b4>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fb53 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 83ad 	bne.w	8004f42 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	f7ff fa0e 	bl	8003c16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fb41 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8004804:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fb4d 	bl	8003eac <LL_ADC_INJ_IsConversionOngoing>
 8004812:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004816:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 81d9 	bne.w	8004bd2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004824:	2b00      	cmp	r3, #0
 8004826:	f040 81d4 	bne.w	8004bd2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004832:	d10f      	bne.n	8004854 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2200      	movs	r2, #0
 800483e:	4619      	mov	r1, r3
 8004840:	f7ff fa28 	bl	8003c94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff f9bc 	bl	8003bca <LL_ADC_SetSamplingTimeCommonConfig>
 8004852:	e00e      	b.n	8004872 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	461a      	mov	r2, r3
 8004862:	f7ff fa17 	bl	8003c94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2100      	movs	r1, #0
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff f9ac 	bl	8003bca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d022      	beq.n	80048da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6919      	ldr	r1, [r3, #16]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048a4:	f7ff f906 	bl	8003ab4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6919      	ldr	r1, [r3, #16]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	461a      	mov	r2, r3
 80048b6:	f7ff f952 	bl	8003b5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6919      	ldr	r1, [r3, #16]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	7f1b      	ldrb	r3, [r3, #28]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d102      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x124>
 80048ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ce:	e000      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x126>
 80048d0:	2300      	movs	r3, #0
 80048d2:	461a      	mov	r2, r3
 80048d4:	f7ff f95e 	bl	8003b94 <LL_ADC_SetOffsetSaturation>
 80048d8:	e17b      	b.n	8004bd2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff f90b 	bl	8003afc <LL_ADC_GetOffsetChannel>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x15a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff f900 	bl	8003afc <LL_ADC_GetOffsetChannel>
 80048fc:	4603      	mov	r3, r0
 80048fe:	0e9b      	lsrs	r3, r3, #26
 8004900:	f003 021f 	and.w	r2, r3, #31
 8004904:	e01e      	b.n	8004944 <HAL_ADC_ConfigChannel+0x198>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff f8f5 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004912:	4603      	mov	r3, r0
 8004914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800492c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004934:	2320      	movs	r3, #32
 8004936:	e004      	b.n	8004942 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800493c:	fab3 f383 	clz	r3, r3
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494c:	2b00      	cmp	r3, #0
 800494e:	d105      	bne.n	800495c <HAL_ADC_ConfigChannel+0x1b0>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	e018      	b.n	800498e <HAL_ADC_ConfigChannel+0x1e2>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004978:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004980:	2320      	movs	r3, #32
 8004982:	e004      	b.n	800498e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800498e:	429a      	cmp	r2, r3
 8004990:	d106      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2200      	movs	r2, #0
 8004998:	2100      	movs	r1, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff f8c4 	bl	8003b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff f8a8 	bl	8003afc <LL_ADC_GetOffsetChannel>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x220>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2101      	movs	r1, #1
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff f89d 	bl	8003afc <LL_ADC_GetOffsetChannel>
 80049c2:	4603      	mov	r3, r0
 80049c4:	0e9b      	lsrs	r3, r3, #26
 80049c6:	f003 021f 	and.w	r2, r3, #31
 80049ca:	e01e      	b.n	8004a0a <HAL_ADC_ConfigChannel+0x25e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2101      	movs	r1, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff f892 	bl	8003afc <LL_ADC_GetOffsetChannel>
 80049d8:	4603      	mov	r3, r0
 80049da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80049ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80049f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80049fa:	2320      	movs	r3, #32
 80049fc:	e004      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80049fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d105      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0x276>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	0e9b      	lsrs	r3, r3, #26
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	e018      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x2a8>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004a46:	2320      	movs	r3, #32
 8004a48:	e004      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004a4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a4e:	fab3 f383 	clz	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d106      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff f861 	bl	8003b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff f845 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x2e6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2102      	movs	r1, #2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff f83a 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	0e9b      	lsrs	r3, r3, #26
 8004a8c:	f003 021f 	and.w	r2, r3, #31
 8004a90:	e01e      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x324>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2102      	movs	r1, #2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff f82f 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aa8:	fa93 f3a3 	rbit	r3, r3
 8004aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	e004      	b.n	8004ace <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004ac4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ac8:	fab3 f383 	clz	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x33c>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	0e9b      	lsrs	r3, r3, #26
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	e016      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x36a>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004af4:	fa93 f3a3 	rbit	r3, r3
 8004af8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004afa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004b08:	2320      	movs	r3, #32
 8004b0a:	e004      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b10:	fab3 f383 	clz	r3, r3
 8004b14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d106      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2102      	movs	r1, #2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff f800 	bl	8003b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2103      	movs	r1, #3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe ffe4 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x3a8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2103      	movs	r1, #3
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe ffd9 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	0e9b      	lsrs	r3, r3, #26
 8004b4e:	f003 021f 	and.w	r2, r3, #31
 8004b52:	e017      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x3d8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2103      	movs	r1, #3
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe ffce 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004b60:	4603      	mov	r3, r0
 8004b62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b66:	fa93 f3a3 	rbit	r3, r3
 8004b6a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b6e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004b76:	2320      	movs	r3, #32
 8004b78:	e003      	b.n	8004b82 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7c:	fab3 f383 	clz	r3, r3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x3f0>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	e011      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x414>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ba4:	fa93 f3a3 	rbit	r3, r3
 8004ba8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	e003      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	fab3 f383 	clz	r3, r3
 8004bbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d106      	bne.n	8004bd2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2103      	movs	r1, #3
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe ffab 	bl	8003b28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f92e 	bl	8003e38 <LL_ADC_IsEnabled>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 8140 	bne.w	8004e64 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f7ff f87b 	bl	8003cec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	4a8f      	ldr	r2, [pc, #572]	; (8004e38 <HAL_ADC_ConfigChannel+0x68c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f040 8131 	bne.w	8004e64 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x47e>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	0e9b      	lsrs	r3, r3, #26
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2b09      	cmp	r3, #9
 8004c20:	bf94      	ite	ls
 8004c22:	2301      	movls	r3, #1
 8004c24:	2300      	movhi	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e019      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x4b2>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c32:	fa93 f3a3 	rbit	r3, r3
 8004c36:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c3a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004c42:	2320      	movs	r3, #32
 8004c44:	e003      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c48:	fab3 f383 	clz	r3, r3
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	2b09      	cmp	r3, #9
 8004c56:	bf94      	ite	ls
 8004c58:	2301      	movls	r3, #1
 8004c5a:	2300      	movhi	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d079      	beq.n	8004d56 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d107      	bne.n	8004c7e <HAL_ADC_ConfigChannel+0x4d2>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	0e9b      	lsrs	r3, r3, #26
 8004c74:	3301      	adds	r3, #1
 8004c76:	069b      	lsls	r3, r3, #26
 8004c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c7c:	e015      	b.n	8004caa <HAL_ADC_ConfigChannel+0x4fe>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c86:	fa93 f3a3 	rbit	r3, r3
 8004c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004c96:	2320      	movs	r3, #32
 8004c98:	e003      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9c:	fab3 f383 	clz	r3, r3
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	069b      	lsls	r3, r3, #26
 8004ca6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x51e>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	0e9b      	lsrs	r3, r3, #26
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	e017      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x54e>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd2:	fa93 f3a3 	rbit	r3, r3
 8004cd6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	e003      	b.n	8004cee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce8:	fab3 f383 	clz	r3, r3
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	ea42 0103 	orr.w	r1, r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x574>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	0e9b      	lsrs	r3, r3, #26
 8004d10:	3301      	adds	r3, #1
 8004d12:	f003 021f 	and.w	r2, r3, #31
 8004d16:	4613      	mov	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	051b      	lsls	r3, r3, #20
 8004d1e:	e018      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x5a6>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	fa93 f3a3 	rbit	r3, r3
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004d38:	2320      	movs	r3, #32
 8004d3a:	e003      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	f003 021f 	and.w	r2, r3, #31
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4413      	add	r3, r2
 8004d50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d52:	430b      	orrs	r3, r1
 8004d54:	e081      	b.n	8004e5a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x5c6>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	0e9b      	lsrs	r3, r3, #26
 8004d68:	3301      	adds	r3, #1
 8004d6a:	069b      	lsls	r3, r3, #26
 8004d6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d70:	e015      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x5f2>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	e003      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	fab3 f383 	clz	r3, r3
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	3301      	adds	r3, #1
 8004d98:	069b      	lsls	r3, r3, #26
 8004d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x612>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	0e9b      	lsrs	r3, r3, #26
 8004db0:	3301      	adds	r3, #1
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2101      	movs	r1, #1
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	e017      	b.n	8004dee <HAL_ADC_ConfigChannel+0x642>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	61fb      	str	r3, [r7, #28]
  return result;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	e003      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	3301      	adds	r3, #1
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	2101      	movs	r1, #1
 8004dea:	fa01 f303 	lsl.w	r3, r1, r3
 8004dee:	ea42 0103 	orr.w	r1, r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x66e>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	0e9b      	lsrs	r3, r3, #26
 8004e04:	3301      	adds	r3, #1
 8004e06:	f003 021f 	and.w	r2, r3, #31
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	3b1e      	subs	r3, #30
 8004e12:	051b      	lsls	r3, r3, #20
 8004e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e18:	e01e      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x6ac>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	613b      	str	r3, [r7, #16]
  return result;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004e32:	2320      	movs	r3, #32
 8004e34:	e006      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x698>
 8004e36:	bf00      	nop
 8004e38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	fab3 f383 	clz	r3, r3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	3301      	adds	r3, #1
 8004e46:	f003 021f 	and.w	r2, r3, #31
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4413      	add	r3, r2
 8004e50:	3b1e      	subs	r3, #30
 8004e52:	051b      	lsls	r3, r3, #20
 8004e54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	6892      	ldr	r2, [r2, #8]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f7fe ff18 	bl	8003c94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b3f      	ldr	r3, [pc, #252]	; (8004f68 <HAL_ADC_ConfigChannel+0x7bc>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d071      	beq.n	8004f54 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e70:	483e      	ldr	r0, [pc, #248]	; (8004f6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004e72:	f7fe fe11 	bl	8003a98 <LL_ADC_GetCommonPathInternalCh>
 8004e76:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a3c      	ldr	r2, [pc, #240]	; (8004f70 <HAL_ADC_ConfigChannel+0x7c4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_ADC_ConfigChannel+0x6e2>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a3a      	ldr	r2, [pc, #232]	; (8004f74 <HAL_ADC_ConfigChannel+0x7c8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d127      	bne.n	8004ede <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d121      	bne.n	8004ede <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea2:	d157      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ea8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eac:	4619      	mov	r1, r3
 8004eae:	482f      	ldr	r0, [pc, #188]	; (8004f6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004eb0:	f7fe fddf 	bl	8003a72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eb4:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <HAL_ADC_ConfigChannel+0x7cc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	4a30      	ldr	r2, [pc, #192]	; (8004f7c <HAL_ADC_ConfigChannel+0x7d0>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ece:	e002      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f9      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004edc:	e03a      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a27      	ldr	r2, [pc, #156]	; (8004f80 <HAL_ADC_ConfigChannel+0x7d4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d113      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x764>
 8004ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10d      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <HAL_ADC_ConfigChannel+0x7d8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d02a      	beq.n	8004f54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f06:	4619      	mov	r1, r3
 8004f08:	4818      	ldr	r0, [pc, #96]	; (8004f6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004f0a:	f7fe fdb2 	bl	8003a72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f0e:	e021      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_ADC_ConfigChannel+0x7dc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d11c      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d116      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_ADC_ConfigChannel+0x7d8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d011      	beq.n	8004f54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f38:	4619      	mov	r1, r3
 8004f3a:	480c      	ldr	r0, [pc, #48]	; (8004f6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004f3c:	f7fe fd99 	bl	8003a72 <LL_ADC_SetCommonPathInternalCh>
 8004f40:	e008      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	37d8      	adds	r7, #216	; 0xd8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	80080000 	.word	0x80080000
 8004f6c:	50000300 	.word	0x50000300
 8004f70:	c3210000 	.word	0xc3210000
 8004f74:	90c00010 	.word	0x90c00010
 8004f78:	200000d8 	.word	0x200000d8
 8004f7c:	053e2d63 	.word	0x053e2d63
 8004f80:	c7520000 	.word	0xc7520000
 8004f84:	50000100 	.word	0x50000100
 8004f88:	cb840000 	.word	0xcb840000

08004f8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fe ff4d 	bl	8003e38 <LL_ADC_IsEnabled>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d14d      	bne.n	8005040 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	4b28      	ldr	r3, [pc, #160]	; (800504c <ADC_Enable+0xc0>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00d      	beq.n	8004fce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb6:	f043 0210 	orr.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc2:	f043 0201 	orr.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e039      	b.n	8005042 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe ff1c 	bl	8003e10 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fd8:	f7fe fd0a 	bl	80039f0 <HAL_GetTick>
 8004fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fde:	e028      	b.n	8005032 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe ff27 	bl	8003e38 <LL_ADC_IsEnabled>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe ff0b 	bl	8003e10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ffa:	f7fe fcf9 	bl	80039f0 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d914      	bls.n	8005032 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b01      	cmp	r3, #1
 8005014:	d00d      	beq.n	8005032 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	f043 0210 	orr.w	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005026:	f043 0201 	orr.w	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e007      	b.n	8005042 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d1cf      	bne.n	8004fe0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	8000003f 	.word	0x8000003f

08005050 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005066:	2b00      	cmp	r3, #0
 8005068:	d14b      	bne.n	8005102 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d021      	beq.n	80050c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fdb1 	bl	8003bf0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d032      	beq.n	80050fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d12b      	bne.n	80050fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11f      	bne.n	80050fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050be:	f043 0201 	orr.w	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80050c6:	e018      	b.n	80050fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d111      	bne.n	80050fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d105      	bne.n	80050fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	f043 0201 	orr.w	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7fc ff46 	bl	8001f8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005100:	e00e      	b.n	8005120 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fb42 	bl	8004798 <HAL_ADC_ErrorCallback>
}
 8005114:	e004      	b.n	8005120 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4798      	blx	r3
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7fc fe16 	bl	8001d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	f043 0204 	orr.w	r2, r3, #4
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fb14 	bl	8004798 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <LL_ADC_IsEnabled>:
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <LL_ADC_IsEnabled+0x18>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <LL_ADC_IsEnabled+0x1a>
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <LL_ADC_REG_IsConversionOngoing>:
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d101      	bne.n	80051b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b0a1      	sub	sp, #132	; 0x84
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005242:	2302      	movs	r3, #2
 8005244:	e08b      	b.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800524e:	2300      	movs	r3, #0
 8005250:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005252:	2300      	movs	r3, #0
 8005254:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800525e:	d102      	bne.n	8005266 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005260:	4b41      	ldr	r3, [pc, #260]	; (8005368 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	e001      	b.n	800526a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005266:	2300      	movs	r3, #0
 8005268:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10b      	bne.n	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e06a      	b.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ff87 	bl	800519e <LL_ADC_REG_IsConversionOngoing>
 8005290:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff ff81 	bl	800519e <LL_ADC_REG_IsConversionOngoing>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d14c      	bne.n	800533c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80052a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d149      	bne.n	800533c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80052a8:	4b30      	ldr	r3, [pc, #192]	; (800536c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80052aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d028      	beq.n	8005306 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80052b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6859      	ldr	r1, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052c6:	035b      	lsls	r3, r3, #13
 80052c8:	430b      	orrs	r3, r1
 80052ca:	431a      	orrs	r2, r3
 80052cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80052d4:	f7ff ff50 	bl	8005178 <LL_ADC_IsEnabled>
 80052d8:	4604      	mov	r4, r0
 80052da:	4823      	ldr	r0, [pc, #140]	; (8005368 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80052dc:	f7ff ff4c 	bl	8005178 <LL_ADC_IsEnabled>
 80052e0:	4603      	mov	r3, r0
 80052e2:	4323      	orrs	r3, r4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d133      	bne.n	8005350 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80052e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80052f0:	f023 030f 	bic.w	r3, r3, #15
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	6811      	ldr	r1, [r2, #0]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	6892      	ldr	r2, [r2, #8]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	431a      	orrs	r2, r3
 8005300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005302:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005304:	e024      	b.n	8005350 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800530e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005310:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005312:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005316:	f7ff ff2f 	bl	8005178 <LL_ADC_IsEnabled>
 800531a:	4604      	mov	r4, r0
 800531c:	4812      	ldr	r0, [pc, #72]	; (8005368 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800531e:	f7ff ff2b 	bl	8005178 <LL_ADC_IsEnabled>
 8005322:	4603      	mov	r3, r0
 8005324:	4323      	orrs	r3, r4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d112      	bne.n	8005350 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800532a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005332:	f023 030f 	bic.w	r3, r3, #15
 8005336:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005338:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800533a:	e009      	b.n	8005350 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800534e:	e000      	b.n	8005352 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005350:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800535a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800535e:	4618      	mov	r0, r3
 8005360:	3784      	adds	r7, #132	; 0x84
 8005362:	46bd      	mov	sp, r7
 8005364:	bd90      	pop	{r4, r7, pc}
 8005366:	bf00      	nop
 8005368:	50000100 	.word	0x50000100
 800536c:	50000300 	.word	0x50000300

08005370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800538c:	4013      	ands	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800539c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053a2:	4a04      	ldr	r2, [pc, #16]	; (80053b4 <__NVIC_SetPriorityGrouping+0x44>)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	60d3      	str	r3, [r2, #12]
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	e000ed00 	.word	0xe000ed00

080053b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053bc:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <__NVIC_GetPriorityGrouping+0x18>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	f003 0307 	and.w	r3, r3, #7
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	e000ed00 	.word	0xe000ed00

080053d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	db0b      	blt.n	80053fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	f003 021f 	and.w	r2, r3, #31
 80053ec:	4907      	ldr	r1, [pc, #28]	; (800540c <__NVIC_EnableIRQ+0x38>)
 80053ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	2001      	movs	r0, #1
 80053f6:	fa00 f202 	lsl.w	r2, r0, r2
 80053fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	e000e100 	.word	0xe000e100

08005410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	6039      	str	r1, [r7, #0]
 800541a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005420:	2b00      	cmp	r3, #0
 8005422:	db0a      	blt.n	800543a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	490c      	ldr	r1, [pc, #48]	; (800545c <__NVIC_SetPriority+0x4c>)
 800542a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542e:	0112      	lsls	r2, r2, #4
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	440b      	add	r3, r1
 8005434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005438:	e00a      	b.n	8005450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	4908      	ldr	r1, [pc, #32]	; (8005460 <__NVIC_SetPriority+0x50>)
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	3b04      	subs	r3, #4
 8005448:	0112      	lsls	r2, r2, #4
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	440b      	add	r3, r1
 800544e:	761a      	strb	r2, [r3, #24]
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	e000e100 	.word	0xe000e100
 8005460:	e000ed00 	.word	0xe000ed00

08005464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005464:	b480      	push	{r7}
 8005466:	b089      	sub	sp, #36	; 0x24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f1c3 0307 	rsb	r3, r3, #7
 800547e:	2b04      	cmp	r3, #4
 8005480:	bf28      	it	cs
 8005482:	2304      	movcs	r3, #4
 8005484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	3304      	adds	r3, #4
 800548a:	2b06      	cmp	r3, #6
 800548c:	d902      	bls.n	8005494 <NVIC_EncodePriority+0x30>
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3b03      	subs	r3, #3
 8005492:	e000      	b.n	8005496 <NVIC_EncodePriority+0x32>
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43da      	mvns	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	401a      	ands	r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054ac:	f04f 31ff 	mov.w	r1, #4294967295
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	43d9      	mvns	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054bc:	4313      	orrs	r3, r2
         );
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3724      	adds	r7, #36	; 0x24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
	...

080054cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054dc:	d301      	bcc.n	80054e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054de:	2301      	movs	r3, #1
 80054e0:	e00f      	b.n	8005502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054e2:	4a0a      	ldr	r2, [pc, #40]	; (800550c <SysTick_Config+0x40>)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ea:	210f      	movs	r1, #15
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295
 80054f0:	f7ff ff8e 	bl	8005410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <SysTick_Config+0x40>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054fa:	4b04      	ldr	r3, [pc, #16]	; (800550c <SysTick_Config+0x40>)
 80054fc:	2207      	movs	r2, #7
 80054fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	e000e010 	.word	0xe000e010

08005510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ff29 	bl	8005370 <__NVIC_SetPriorityGrouping>
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	4603      	mov	r3, r0
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005534:	f7ff ff40 	bl	80053b8 <__NVIC_GetPriorityGrouping>
 8005538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	f7ff ff90 	bl	8005464 <NVIC_EncodePriority>
 8005544:	4602      	mov	r2, r0
 8005546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff ff5f 	bl	8005410 <__NVIC_SetPriority>
}
 8005552:	bf00      	nop
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	4603      	mov	r3, r0
 8005562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff ff33 	bl	80053d4 <__NVIC_EnableIRQ>
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff ffa4 	bl	80054cc <SysTick_Config>
 8005584:	4603      	mov	r3, r0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e014      	b.n	80055ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	791b      	ldrb	r3, [r3, #4]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d105      	bne.n	80055b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fd f977 	bl	80028a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	795b      	ldrb	r3, [r3, #5]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_DAC_ConfigChannel+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e192      	b.n	8005912 <HAL_DAC_ConfigChannel+0x33e>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2202      	movs	r2, #2
 80055f6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d174      	bne.n	80056ea <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005600:	f7fe f9f6 	bl	80039f0 <HAL_GetTick>
 8005604:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d134      	bne.n	8005676 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800560c:	e011      	b.n	8005632 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800560e:	f7fe f9ef 	bl	80039f0 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	d90a      	bls.n	8005632 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f043 0208 	orr.w	r2, r3, #8
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2203      	movs	r2, #3
 800562c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e16f      	b.n	8005912 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e6      	bne.n	800560e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005640:	2001      	movs	r0, #1
 8005642:	f7fe f9e1 	bl	8003a08 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
 8005650:	e01e      	b.n	8005690 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005652:	f7fe f9cd 	bl	80039f0 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d90a      	bls.n	8005676 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f043 0208 	orr.w	r2, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2203      	movs	r2, #3
 8005670:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e14d      	b.n	8005912 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	2b00      	cmp	r3, #0
 800567e:	dbe8      	blt.n	8005652 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005680:	2001      	movs	r0, #1
 8005682:	f7fe f9c1 	bl	8003a08 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800568e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	ea02 0103 	and.w	r1, r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	409a      	lsls	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	21ff      	movs	r1, #255	; 0xff
 80056cc:	fa01 f303 	lsl.w	r3, r1, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	ea02 0103 	and.w	r1, r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	409a      	lsls	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d11d      	bne.n	800572e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	221f      	movs	r2, #31
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570a:	4013      	ands	r3, r2
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005722:	4313      	orrs	r3, r2
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2207      	movs	r2, #7
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005746:	4013      	ands	r3, r2
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d102      	bne.n	8005758 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005752:	2300      	movs	r3, #0
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	e00f      	b.n	8005778 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d102      	bne.n	8005766 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005760:	2301      	movs	r3, #1
 8005762:	623b      	str	r3, [r7, #32]
 8005764:	e008      	b.n	8005778 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800576e:	2301      	movs	r3, #1
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	e001      	b.n	8005778 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005774:	2300      	movs	r3, #0
 8005776:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	4313      	orrs	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43db      	mvns	r3, r3
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	4013      	ands	r3, r2
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	791b      	ldrb	r3, [r3, #4]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d102      	bne.n	80057ac <HAL_DAC_ConfigChannel+0x1d8>
 80057a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057aa:	e000      	b.n	80057ae <HAL_DAC_ConfigChannel+0x1da>
 80057ac:	2300      	movs	r3, #0
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c6:	4013      	ands	r3, r2
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	795b      	ldrb	r3, [r3, #5]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <HAL_DAC_ConfigChannel+0x204>
 80057d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d6:	e000      	b.n	80057da <HAL_DAC_ConfigChannel+0x206>
 80057d8:	2300      	movs	r3, #0
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4313      	orrs	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d114      	bne.n	800581a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80057f0:	f002 f9d2 	bl	8007b98 <HAL_RCC_GetHCLKFreq>
 80057f4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	4a48      	ldr	r2, [pc, #288]	; (800591c <HAL_DAC_ConfigChannel+0x348>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d904      	bls.n	8005808 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
 8005806:	e00f      	b.n	8005828 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4a45      	ldr	r2, [pc, #276]	; (8005920 <HAL_DAC_ConfigChannel+0x34c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d90a      	bls.n	8005826 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
 8005818:	e006      	b.n	8005828 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005820:	4313      	orrs	r3, r2
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
 8005824:	e000      	b.n	8005828 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005826:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005836:	4313      	orrs	r3, r2
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005840:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6819      	ldr	r1, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43da      	mvns	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	400a      	ands	r2, r1
 800585e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	4013      	ands	r3, r2
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	4313      	orrs	r3, r2
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	22c0      	movs	r2, #192	; 0xc0
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	43da      	mvns	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	400a      	ands	r2, r1
 80058b8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	089b      	lsrs	r3, r3, #2
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	ea02 0103 	and.w	r1, r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	409a      	lsls	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3728      	adds	r7, #40	; 0x28
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	09896800 	.word	0x09896800
 8005920:	04c4b400 	.word	0x04c4b400

08005924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e08d      	b.n	8005a52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	4b47      	ldr	r3, [pc, #284]	; (8005a5c <HAL_DMA_Init+0x138>)
 800593e:	429a      	cmp	r2, r3
 8005940:	d80f      	bhi.n	8005962 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	4b45      	ldr	r3, [pc, #276]	; (8005a60 <HAL_DMA_Init+0x13c>)
 800594a:	4413      	add	r3, r2
 800594c:	4a45      	ldr	r2, [pc, #276]	; (8005a64 <HAL_DMA_Init+0x140>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	091b      	lsrs	r3, r3, #4
 8005954:	009a      	lsls	r2, r3, #2
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a42      	ldr	r2, [pc, #264]	; (8005a68 <HAL_DMA_Init+0x144>)
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
 8005960:	e00e      	b.n	8005980 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	4b40      	ldr	r3, [pc, #256]	; (8005a6c <HAL_DMA_Init+0x148>)
 800596a:	4413      	add	r3, r2
 800596c:	4a3d      	ldr	r2, [pc, #244]	; (8005a64 <HAL_DMA_Init+0x140>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	091b      	lsrs	r3, r3, #4
 8005974:	009a      	lsls	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a3c      	ldr	r2, [pc, #240]	; (8005a70 <HAL_DMA_Init+0x14c>)
 800597e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fa76 	bl	8005ec4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059e0:	d102      	bne.n	80059e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d010      	beq.n	8005a28 <HAL_DMA_Init+0x104>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d80c      	bhi.n	8005a28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa96 	bl	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a24:	605a      	str	r2, [r3, #4]
 8005a26:	e008      	b.n	8005a3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40020407 	.word	0x40020407
 8005a60:	bffdfff8 	.word	0xbffdfff8
 8005a64:	cccccccd 	.word	0xcccccccd
 8005a68:	40020000 	.word	0x40020000
 8005a6c:	bffdfbf8 	.word	0xbffdfbf8
 8005a70:	40020400 	.word	0x40020400

08005a74 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_DMA_Start_IT+0x20>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e066      	b.n	8005b62 <HAL_DMA_Start_IT+0xee>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d155      	bne.n	8005b54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f9bb 	bl	8005e48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 020e 	orr.w	r2, r2, #14
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e00f      	b.n	8005b0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0204 	bic.w	r2, r2, #4
 8005afa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 020a 	orr.w	r2, r2, #10
 8005b0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b28:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0201 	orr.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e005      	b.n	8005b60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d005      	beq.n	8005b8e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2204      	movs	r2, #4
 8005b86:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
 8005b8c:	e037      	b.n	8005bfe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 020e 	bic.w	r2, r2, #14
 8005b9c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	f003 021f 	and.w	r2, r3, #31
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	2101      	movs	r1, #1
 8005bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005bda:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00c      	beq.n	8005bfe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005bfc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d00d      	beq.n	8005c50 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2204      	movs	r2, #4
 8005c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
 8005c4e:	e047      	b.n	8005ce0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 020e 	bic.w	r2, r2, #14
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c84:	f003 021f 	and.w	r2, r3, #31
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c92:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c9c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cb4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005cbe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
    }
  }
  return status;
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	409a      	lsls	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d026      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x7a>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d021      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d107      	bne.n	8005d3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0204 	bic.w	r2, r2, #4
 8005d3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	f003 021f 	and.w	r2, r3, #31
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2104      	movs	r1, #4
 8005d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d071      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d62:	e06c      	b.n	8005e3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d02e      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d029      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10b      	bne.n	8005da8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 020a 	bic.w	r2, r2, #10
 8005d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	f003 021f 	and.w	r2, r3, #31
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	2102      	movs	r1, #2
 8005db6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d038      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005dd4:	e033      	b.n	8005e3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2208      	movs	r2, #8
 8005de0:	409a      	lsls	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02a      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d025      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 020e 	bic.w	r2, r2, #14
 8005e02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e08:	f003 021f 	and.w	r2, r3, #31
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	2101      	movs	r1, #1
 8005e12:	fa01 f202 	lsl.w	r2, r1, r2
 8005e16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
}
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	f003 021f 	and.w	r2, r3, #31
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	2101      	movs	r1, #1
 8005e80:	fa01 f202 	lsl.w	r2, r1, r2
 8005e84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d108      	bne.n	8005ea8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ea6:	e007      	b.n	8005eb8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	60da      	str	r2, [r3, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d802      	bhi.n	8005ede <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ed8:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e001      	b.n	8005ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005ede:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ee0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	3b08      	subs	r3, #8
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efc:	089b      	lsrs	r3, r3, #2
 8005efe:	009a      	lsls	r2, r3, #2
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4413      	add	r3, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a0b      	ldr	r2, [pc, #44]	; (8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2201      	movs	r2, #1
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	40020407 	.word	0x40020407
 8005f30:	40020800 	.word	0x40020800
 8005f34:	40020820 	.word	0x40020820
 8005f38:	cccccccd 	.word	0xcccccccd
 8005f3c:	40020880 	.word	0x40020880

08005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f62:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	f003 031f 	and.w	r3, r3, #31
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	1000823f 	.word	0x1000823f
 8005f84:	40020940 	.word	0x40020940

08005f88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e147      	b.n	800622a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fc fd64 	bl	8002a7c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0210 	bic.w	r2, r2, #16
 8005fc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fc4:	f7fd fd14 	bl	80039f0 <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fca:	e012      	b.n	8005ff2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fcc:	f7fd fd10 	bl	80039f0 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b0a      	cmp	r3, #10
 8005fd8:	d90b      	bls.n	8005ff2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fde:	f043 0201 	orr.w	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2203      	movs	r2, #3
 8005fea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e11b      	b.n	800622a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d0e5      	beq.n	8005fcc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006010:	f7fd fcee 	bl	80039f0 <HAL_GetTick>
 8006014:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006016:	e012      	b.n	800603e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006018:	f7fd fcea 	bl	80039f0 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b0a      	cmp	r3, #10
 8006024:	d90b      	bls.n	800603e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602a:	f043 0201 	orr.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2203      	movs	r2, #3
 8006036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e0f5      	b.n	800622a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0e5      	beq.n	8006018 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0202 	orr.w	r2, r2, #2
 800605a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a74      	ldr	r2, [pc, #464]	; (8006234 <HAL_FDCAN_Init+0x2ac>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d103      	bne.n	800606e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006066:	4a74      	ldr	r2, [pc, #464]	; (8006238 <HAL_FDCAN_Init+0x2b0>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	7c1b      	ldrb	r3, [r3, #16]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d108      	bne.n	8006088 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006084:	619a      	str	r2, [r3, #24]
 8006086:	e007      	b.n	8006098 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006096:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7c5b      	ldrb	r3, [r3, #17]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d108      	bne.n	80060b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ae:	619a      	str	r2, [r3, #24]
 80060b0:	e007      	b.n	80060c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7c9b      	ldrb	r3, [r3, #18]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d108      	bne.n	80060dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060d8:	619a      	str	r2, [r3, #24]
 80060da:	e007      	b.n	80060ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006110:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0210 	bic.w	r2, r2, #16
 8006120:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d108      	bne.n	800613c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699a      	ldr	r2, [r3, #24]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0204 	orr.w	r2, r2, #4
 8006138:	619a      	str	r2, [r3, #24]
 800613a:	e02c      	b.n	8006196 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d028      	beq.n	8006196 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d01c      	beq.n	8006186 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800615a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0210 	orr.w	r2, r2, #16
 800616a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d110      	bne.n	8006196 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0220 	orr.w	r2, r2, #32
 8006182:	619a      	str	r2, [r3, #24]
 8006184:	e007      	b.n	8006196 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0220 	orr.w	r2, r2, #32
 8006194:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	3b01      	subs	r3, #1
 800619c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80061ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ca:	d115      	bne.n	80061f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	3b01      	subs	r3, #1
 80061d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	3b01      	subs	r3, #1
 80061e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	3b01      	subs	r3, #1
 80061ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fbe2 	bl	80069d8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40006400 	.word	0x40006400
 8006238:	40006500 	.word	0x40006500

0800623c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b01      	cmp	r3, #1
 800624e:	d110      	bne.n	8006272 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e006      	b.n	8006280 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006276:	f043 0204 	orr.w	r2, r3, #4
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
  }
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d12c      	bne.n	80062fe <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80062ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d007      	beq.n	80062c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e023      	b.n	800630c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80062cc:	0c1b      	lsrs	r3, r3, #16
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fbd2 	bl	8006a84 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2101      	movs	r1, #1
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	fa01 f202 	lsl.w	r2, r1, r2
 80062ec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80062f0:	2201      	movs	r2, #1
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	409a      	lsls	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e006      	b.n	800630c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006302:	f043 0208 	orr.w	r2, r3, #8
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
  }
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006314:	b480      	push	{r7}
 8006316:	b08b      	sub	sp, #44	; 0x2c
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006328:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800632a:	7efb      	ldrb	r3, [r7, #27]
 800632c:	2b02      	cmp	r3, #2
 800632e:	f040 80bc 	bne.w	80064aa <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b40      	cmp	r3, #64	; 0x40
 8006336:	d121      	bne.n	800637c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	2b00      	cmp	r3, #0
 8006346:	d107      	bne.n	8006358 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0af      	b.n	80064b8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006360:	0a1b      	lsrs	r3, r3, #8
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	4613      	mov	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4413      	add	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	440b      	add	r3, r1
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
 800637a:	e020      	b.n	80063be <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	2b00      	cmp	r3, #0
 800638a:	d107      	bne.n	800639c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006390:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e08d      	b.n	80064b8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063a4:	0a1b      	lsrs	r3, r3, #8
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	4613      	mov	r3, r2
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	4413      	add	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	440b      	add	r3, r1
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d107      	bne.n	80063e2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	0c9b      	lsrs	r3, r3, #18
 80063d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	e005      	b.n	80063ee <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	3304      	adds	r3, #4
 800640a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	b29a      	uxth	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	0e1b      	lsrs	r3, r3, #24
 8006440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	0fda      	lsrs	r2, r3, #31
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	3304      	adds	r3, #4
 8006456:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800645c:	2300      	movs	r3, #0
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	e00a      	b.n	8006478 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	441a      	add	r2, r3
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	440b      	add	r3, r1
 800646e:	7812      	ldrb	r2, [r2, #0]
 8006470:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	3301      	adds	r3, #1
 8006476:	623b      	str	r3, [r7, #32]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006480:	5cd3      	ldrb	r3, [r2, r3]
 8006482:	461a      	mov	r2, r3
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	4293      	cmp	r3, r2
 8006488:	d3eb      	bcc.n	8006462 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d105      	bne.n	800649c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800649a:	e004      	b.n	80064a6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e006      	b.n	80064b8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ae:	f043 0208 	orr.w	r2, r3, #8
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
  }
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	372c      	adds	r7, #44	; 0x2c
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	0800c7dc 	.word	0x0800c7dc

080064c8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064da:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d003      	beq.n	80064ea <HAL_FDCAN_ActivateNotification+0x22>
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	f040 80c8 	bne.w	800667a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f003 0307 	and.w	r3, r3, #7
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d03b      	beq.n	800657e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d031      	beq.n	800657e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006520:	2b00      	cmp	r3, #0
 8006522:	d004      	beq.n	800652e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	d027      	beq.n	800657e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01d      	beq.n	800657e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006548:	2b00      	cmp	r3, #0
 800654a:	d004      	beq.n	8006556 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	d013      	beq.n	800657e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800655c:	2b00      	cmp	r3, #0
 800655e:	d004      	beq.n	800656a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d009      	beq.n	800657e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00c      	beq.n	800658e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0201 	orr.w	r2, r2, #1
 800658c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	2b00      	cmp	r3, #0
 8006596:	d004      	beq.n	80065a2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d13b      	bne.n	800661a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d131      	bne.n	800661a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d127      	bne.n	800661a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11d      	bne.n	800661a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d113      	bne.n	800661a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00c      	beq.n	800662a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0202 	orr.w	r2, r2, #2
 8006628:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	430a      	orrs	r2, r1
 8006644:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	430a      	orrs	r2, r1
 8006662:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	430a      	orrs	r2, r1
 8006674:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	e006      	b.n	8006688 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667e:	f043 0202 	orr.w	r2, r3, #2
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
  }
}
 8006688:	4618      	mov	r0, r3
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	; 0x28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b0:	4013      	ands	r3, r2
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c6:	6a3a      	ldr	r2, [r7, #32]
 80066c8:	4013      	ands	r3, r2
 80066ca:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066d6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	4013      	ands	r3, r2
 80066e2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ea:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80066ee:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	4013      	ands	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006702:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006706:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4013      	ands	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00d      	beq.n	800673e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d006      	beq.n	800673e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2240      	movs	r2, #64	; 0x40
 8006736:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f92e 	bl	800699a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01b      	beq.n	8006784 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006756:	2b00      	cmp	r3, #0
 8006758:	d014      	beq.n	8006784 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006762:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4013      	ands	r3, r2
 8006770:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800677a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800677c:	6939      	ldr	r1, [r7, #16]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f8ec 	bl	800695c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006790:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f8b6 	bl	8006906 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6a3a      	ldr	r2, [r7, #32]
 80067a6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80067a8:	6a39      	ldr	r1, [r7, #32]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fb fd84 	bl	80022b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80067be:	69f9      	ldr	r1, [r7, #28]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f8ab 	bl	800691c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00e      	beq.n	80067f2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f8a0 	bl	8006932 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01a      	beq.n	8006836 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680a:	2b00      	cmp	r3, #0
 800680c:	d013      	beq.n	8006836 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006816:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4013      	ands	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2280      	movs	r2, #128	; 0x80
 800682c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f888 	bl	8006946 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00e      	beq.n	8006862 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d007      	beq.n	8006862 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800685a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f888 	bl	8006972 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00e      	beq.n	800688e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006886:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f87c 	bl	8006986 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d011      	beq.n	80068c0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80068ce:	6979      	ldr	r1, [r7, #20]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f876 	bl	80069c2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f858 	bl	80069ae <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80068fe:	bf00      	nop
 8006900:	3728      	adds	r7, #40	; 0x28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80069e0:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80069e2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	041a      	lsls	r2, r3, #16
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a18:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	061a      	lsls	r2, r3, #24
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e005      	b.n	8006a66 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3304      	adds	r3, #4
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d3f3      	bcc.n	8006a5a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	4000a400 	.word	0x4000a400

08006a84 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b089      	sub	sp, #36	; 0x24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006aa2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	61fb      	str	r3, [r7, #28]
 8006aae:	e00a      	b.n	8006ac6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006ab8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006abe:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ad0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006ad6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006adc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	4613      	mov	r3, r2
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	4413      	add	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	440b      	add	r3, r1
 8006af6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	3304      	adds	r3, #4
 8006b02:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e020      	b.n	8006b58 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3303      	adds	r3, #3
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	3302      	adds	r3, #2
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	440b      	add	r3, r1
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b2e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	3301      	adds	r3, #1
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	440b      	add	r3, r1
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b3c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	440a      	add	r2, r1
 8006b44:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b46:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	3304      	adds	r3, #4
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	0c1b      	lsrs	r3, r3, #16
 8006b5e:	4a06      	ldr	r2, [pc, #24]	; (8006b78 <FDCAN_CopyMessageToRAM+0xf4>)
 8006b60:	5cd3      	ldrb	r3, [r2, r3]
 8006b62:	461a      	mov	r2, r3
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d3d5      	bcc.n	8006b16 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	3724      	adds	r7, #36	; 0x24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	0800c7dc 	.word	0x0800c7dc

08006b7c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e033      	b.n	8006bf6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fb ffe0 	bl	8002b68 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f854 	bl	8006c5c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f822 	bl	8006bfe <FMAC_Reset>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d10c      	bne.n	8006bda <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc4:	f043 0210 	orr.w	r2, r3, #16
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	22a0      	movs	r2, #160	; 0xa0
 8006bd0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
 8006bd8:	e008      	b.n	8006bec <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c06:	f7fc fef3 	bl	80039f0 <HAL_GetTick>
 8006c0a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c1a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006c1c:	e00f      	b.n	8006c3e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8006c1e:	f7fc fee7 	bl	80039f0 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006c2c:	d907      	bls.n	8006c3e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e00a      	b.n	8006c54 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e8      	bne.n	8006c1e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f807 	bl	8006c78 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f81b 	bl	8006ca6 <FMAC_ResetOutputStateAndDataPointers>
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ce2:	e15a      	b.n	8006f9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	2101      	movs	r1, #1
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 814c 	beq.w	8006f94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d005      	beq.n	8006d14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d130      	bne.n	8006d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	2203      	movs	r2, #3
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	43db      	mvns	r3, r3
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d52:	43db      	mvns	r3, r3
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4013      	ands	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	091b      	lsrs	r3, r3, #4
 8006d60:	f003 0201 	and.w	r2, r3, #1
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d017      	beq.n	8006db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	43db      	mvns	r3, r3
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4013      	ands	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d123      	bne.n	8006e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	08da      	lsrs	r2, r3, #3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3208      	adds	r2, #8
 8006dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	220f      	movs	r2, #15
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4013      	ands	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	08da      	lsrs	r2, r3, #3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3208      	adds	r2, #8
 8006e00:	6939      	ldr	r1, [r7, #16]
 8006e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	2203      	movs	r2, #3
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43db      	mvns	r3, r3
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f003 0203 	and.w	r2, r3, #3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80a6 	beq.w	8006f94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e48:	4b5b      	ldr	r3, [pc, #364]	; (8006fb8 <HAL_GPIO_Init+0x2e4>)
 8006e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4c:	4a5a      	ldr	r2, [pc, #360]	; (8006fb8 <HAL_GPIO_Init+0x2e4>)
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	6613      	str	r3, [r2, #96]	; 0x60
 8006e54:	4b58      	ldr	r3, [pc, #352]	; (8006fb8 <HAL_GPIO_Init+0x2e4>)
 8006e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	60bb      	str	r3, [r7, #8]
 8006e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e60:	4a56      	ldr	r2, [pc, #344]	; (8006fbc <HAL_GPIO_Init+0x2e8>)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	089b      	lsrs	r3, r3, #2
 8006e66:	3302      	adds	r3, #2
 8006e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	220f      	movs	r2, #15
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4013      	ands	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006e8a:	d01f      	beq.n	8006ecc <HAL_GPIO_Init+0x1f8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a4c      	ldr	r2, [pc, #304]	; (8006fc0 <HAL_GPIO_Init+0x2ec>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d019      	beq.n	8006ec8 <HAL_GPIO_Init+0x1f4>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a4b      	ldr	r2, [pc, #300]	; (8006fc4 <HAL_GPIO_Init+0x2f0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d013      	beq.n	8006ec4 <HAL_GPIO_Init+0x1f0>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a4a      	ldr	r2, [pc, #296]	; (8006fc8 <HAL_GPIO_Init+0x2f4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00d      	beq.n	8006ec0 <HAL_GPIO_Init+0x1ec>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a49      	ldr	r2, [pc, #292]	; (8006fcc <HAL_GPIO_Init+0x2f8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d007      	beq.n	8006ebc <HAL_GPIO_Init+0x1e8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a48      	ldr	r2, [pc, #288]	; (8006fd0 <HAL_GPIO_Init+0x2fc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d101      	bne.n	8006eb8 <HAL_GPIO_Init+0x1e4>
 8006eb4:	2305      	movs	r3, #5
 8006eb6:	e00a      	b.n	8006ece <HAL_GPIO_Init+0x1fa>
 8006eb8:	2306      	movs	r3, #6
 8006eba:	e008      	b.n	8006ece <HAL_GPIO_Init+0x1fa>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	e006      	b.n	8006ece <HAL_GPIO_Init+0x1fa>
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e004      	b.n	8006ece <HAL_GPIO_Init+0x1fa>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e002      	b.n	8006ece <HAL_GPIO_Init+0x1fa>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <HAL_GPIO_Init+0x1fa>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	f002 0203 	and.w	r2, r2, #3
 8006ed4:	0092      	lsls	r2, r2, #2
 8006ed6:	4093      	lsls	r3, r2
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ede:	4937      	ldr	r1, [pc, #220]	; (8006fbc <HAL_GPIO_Init+0x2e8>)
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	089b      	lsrs	r3, r3, #2
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006eec:	4b39      	ldr	r3, [pc, #228]	; (8006fd4 <HAL_GPIO_Init+0x300>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006f10:	4a30      	ldr	r2, [pc, #192]	; (8006fd4 <HAL_GPIO_Init+0x300>)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006f16:	4b2f      	ldr	r3, [pc, #188]	; (8006fd4 <HAL_GPIO_Init+0x300>)
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4013      	ands	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006f3a:	4a26      	ldr	r2, [pc, #152]	; (8006fd4 <HAL_GPIO_Init+0x300>)
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006f40:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <HAL_GPIO_Init+0x300>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006f64:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <HAL_GPIO_Init+0x300>)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f6a:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <HAL_GPIO_Init+0x300>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	43db      	mvns	r3, r3
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4013      	ands	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f8e:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <HAL_GPIO_Init+0x300>)
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3301      	adds	r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f47f ae9d 	bne.w	8006ce4 <HAL_GPIO_Init+0x10>
  }
}
 8006faa:	bf00      	nop
 8006fac:	bf00      	nop
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	40021000 	.word	0x40021000
 8006fbc:	40010000 	.word	0x40010000
 8006fc0:	48000400 	.word	0x48000400
 8006fc4:	48000800 	.word	0x48000800
 8006fc8:	48000c00 	.word	0x48000c00
 8006fcc:	48001000 	.word	0x48001000
 8006fd0:	48001400 	.word	0x48001400
 8006fd4:	40010400 	.word	0x40010400

08006fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	807b      	strh	r3, [r7, #2]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fe8:	787b      	ldrb	r3, [r7, #1]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006fee:	887a      	ldrh	r2, [r7, #2]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ff4:	e002      	b.n	8006ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ff6:	887a      	ldrh	r2, [r7, #2]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800701a:	887a      	ldrh	r2, [r7, #2]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4013      	ands	r3, r2
 8007020:	041a      	lsls	r2, r3, #16
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	43d9      	mvns	r1, r3
 8007026:	887b      	ldrh	r3, [r7, #2]
 8007028:	400b      	ands	r3, r1
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	619a      	str	r2, [r3, #24]
}
 8007030:	bf00      	nop
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d141      	bne.n	80070ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800704a:	4b4b      	ldr	r3, [pc, #300]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007056:	d131      	bne.n	80070bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007058:	4b47      	ldr	r3, [pc, #284]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800705a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800705e:	4a46      	ldr	r2, [pc, #280]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007068:	4b43      	ldr	r3, [pc, #268]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007070:	4a41      	ldr	r2, [pc, #260]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007078:	4b40      	ldr	r3, [pc, #256]	; (800717c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2232      	movs	r2, #50	; 0x32
 800707e:	fb02 f303 	mul.w	r3, r2, r3
 8007082:	4a3f      	ldr	r2, [pc, #252]	; (8007180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007084:	fba2 2303 	umull	r2, r3, r2, r3
 8007088:	0c9b      	lsrs	r3, r3, #18
 800708a:	3301      	adds	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800708e:	e002      	b.n	8007096 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3b01      	subs	r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007096:	4b38      	ldr	r3, [pc, #224]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800709e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a2:	d102      	bne.n	80070aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1f2      	bne.n	8007090 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070aa:	4b33      	ldr	r3, [pc, #204]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b6:	d158      	bne.n	800716a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e057      	b.n	800716c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070bc:	4b2e      	ldr	r3, [pc, #184]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070c2:	4a2d      	ldr	r2, [pc, #180]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80070cc:	e04d      	b.n	800716a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d4:	d141      	bne.n	800715a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070d6:	4b28      	ldr	r3, [pc, #160]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e2:	d131      	bne.n	8007148 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070e4:	4b24      	ldr	r3, [pc, #144]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ea:	4a23      	ldr	r2, [pc, #140]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070f4:	4b20      	ldr	r3, [pc, #128]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070fc:	4a1e      	ldr	r2, [pc, #120]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007104:	4b1d      	ldr	r3, [pc, #116]	; (800717c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2232      	movs	r2, #50	; 0x32
 800710a:	fb02 f303 	mul.w	r3, r2, r3
 800710e:	4a1c      	ldr	r2, [pc, #112]	; (8007180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007110:	fba2 2303 	umull	r2, r3, r2, r3
 8007114:	0c9b      	lsrs	r3, r3, #18
 8007116:	3301      	adds	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800711a:	e002      	b.n	8007122 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3b01      	subs	r3, #1
 8007120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800712a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800712e:	d102      	bne.n	8007136 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f2      	bne.n	800711c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007136:	4b10      	ldr	r3, [pc, #64]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800713e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007142:	d112      	bne.n	800716a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e011      	b.n	800716c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007148:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800714a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800714e:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007158:	e007      	b.n	800716a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800715a:	4b07      	ldr	r3, [pc, #28]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007162:	4a05      	ldr	r2, [pc, #20]	; (8007178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007168:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40007000 	.word	0x40007000
 800717c:	200000d8 	.word	0x200000d8
 8007180:	431bde83 	.word	0x431bde83

08007184 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4a04      	ldr	r2, [pc, #16]	; (80071a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800718e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007192:	6093      	str	r3, [r2, #8]
}
 8007194:	bf00      	nop
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40007000 	.word	0x40007000

080071a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e306      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d075      	beq.n	80072ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071c2:	4b97      	ldr	r3, [pc, #604]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 030c 	and.w	r3, r3, #12
 80071ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071cc:	4b94      	ldr	r3, [pc, #592]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b0c      	cmp	r3, #12
 80071da:	d102      	bne.n	80071e2 <HAL_RCC_OscConfig+0x3e>
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d002      	beq.n	80071e8 <HAL_RCC_OscConfig+0x44>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d10b      	bne.n	8007200 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e8:	4b8d      	ldr	r3, [pc, #564]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d05b      	beq.n	80072ac <HAL_RCC_OscConfig+0x108>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d157      	bne.n	80072ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e2e1      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007208:	d106      	bne.n	8007218 <HAL_RCC_OscConfig+0x74>
 800720a:	4b85      	ldr	r3, [pc, #532]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a84      	ldr	r2, [pc, #528]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	e01d      	b.n	8007254 <HAL_RCC_OscConfig+0xb0>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007220:	d10c      	bne.n	800723c <HAL_RCC_OscConfig+0x98>
 8007222:	4b7f      	ldr	r3, [pc, #508]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a7e      	ldr	r2, [pc, #504]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	4b7c      	ldr	r3, [pc, #496]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a7b      	ldr	r2, [pc, #492]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	e00b      	b.n	8007254 <HAL_RCC_OscConfig+0xb0>
 800723c:	4b78      	ldr	r3, [pc, #480]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a77      	ldr	r2, [pc, #476]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	4b75      	ldr	r3, [pc, #468]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a74      	ldr	r2, [pc, #464]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 800724e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d013      	beq.n	8007284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725c:	f7fc fbc8 	bl	80039f0 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007264:	f7fc fbc4 	bl	80039f0 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b64      	cmp	r3, #100	; 0x64
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e2a6      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007276:	4b6a      	ldr	r3, [pc, #424]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCC_OscConfig+0xc0>
 8007282:	e014      	b.n	80072ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007284:	f7fc fbb4 	bl	80039f0 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800728c:	f7fc fbb0 	bl	80039f0 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b64      	cmp	r3, #100	; 0x64
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e292      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800729e:	4b60      	ldr	r3, [pc, #384]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f0      	bne.n	800728c <HAL_RCC_OscConfig+0xe8>
 80072aa:	e000      	b.n	80072ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d075      	beq.n	80073a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072ba:	4b59      	ldr	r3, [pc, #356]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 030c 	and.w	r3, r3, #12
 80072c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072c4:	4b56      	ldr	r3, [pc, #344]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	2b0c      	cmp	r3, #12
 80072d2:	d102      	bne.n	80072da <HAL_RCC_OscConfig+0x136>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d002      	beq.n	80072e0 <HAL_RCC_OscConfig+0x13c>
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d11f      	bne.n	8007320 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072e0:	4b4f      	ldr	r3, [pc, #316]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <HAL_RCC_OscConfig+0x154>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e265      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f8:	4b49      	ldr	r3, [pc, #292]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	061b      	lsls	r3, r3, #24
 8007306:	4946      	ldr	r1, [pc, #280]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007308:	4313      	orrs	r3, r2
 800730a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800730c:	4b45      	ldr	r3, [pc, #276]	; (8007424 <HAL_RCC_OscConfig+0x280>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f7fc fb21 	bl	8003958 <HAL_InitTick>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d043      	beq.n	80073a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e251      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d023      	beq.n	8007370 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007328:	4b3d      	ldr	r3, [pc, #244]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a3c      	ldr	r2, [pc, #240]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 800732e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fc fb5c 	bl	80039f0 <HAL_GetTick>
 8007338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800733c:	f7fc fb58 	bl	80039f0 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e23a      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800734e:	4b34      	ldr	r3, [pc, #208]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0f0      	beq.n	800733c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735a:	4b31      	ldr	r3, [pc, #196]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	061b      	lsls	r3, r3, #24
 8007368:	492d      	ldr	r1, [pc, #180]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 800736a:	4313      	orrs	r3, r2
 800736c:	604b      	str	r3, [r1, #4]
 800736e:	e01a      	b.n	80073a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007370:	4b2b      	ldr	r3, [pc, #172]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a2a      	ldr	r2, [pc, #168]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800737a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737c:	f7fc fb38 	bl	80039f0 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007384:	f7fc fb34 	bl	80039f0 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e216      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007396:	4b22      	ldr	r3, [pc, #136]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0x1e0>
 80073a2:	e000      	b.n	80073a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d041      	beq.n	8007436 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d01c      	beq.n	80073f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073ba:	4b19      	ldr	r3, [pc, #100]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80073bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073c0:	4a17      	ldr	r2, [pc, #92]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ca:	f7fc fb11 	bl	80039f0 <HAL_GetTick>
 80073ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073d2:	f7fc fb0d 	bl	80039f0 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e1ef      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073e4:	4b0e      	ldr	r3, [pc, #56]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80073e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0ef      	beq.n	80073d2 <HAL_RCC_OscConfig+0x22e>
 80073f2:	e020      	b.n	8007436 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073f4:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80073f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073fa:	4a09      	ldr	r2, [pc, #36]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80073fc:	f023 0301 	bic.w	r3, r3, #1
 8007400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007404:	f7fc faf4 	bl	80039f0 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800740a:	e00d      	b.n	8007428 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800740c:	f7fc faf0 	bl	80039f0 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d906      	bls.n	8007428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e1d2      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
 800741e:	bf00      	nop
 8007420:	40021000 	.word	0x40021000
 8007424:	200000dc 	.word	0x200000dc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007428:	4b8c      	ldr	r3, [pc, #560]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 800742a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1ea      	bne.n	800740c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80a6 	beq.w	8007590 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007444:	2300      	movs	r3, #0
 8007446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007448:	4b84      	ldr	r3, [pc, #528]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 800744a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <HAL_RCC_OscConfig+0x2b4>
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <HAL_RCC_OscConfig+0x2b6>
 8007458:	2300      	movs	r3, #0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00d      	beq.n	800747a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800745e:	4b7f      	ldr	r3, [pc, #508]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	4a7e      	ldr	r2, [pc, #504]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 8007464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007468:	6593      	str	r3, [r2, #88]	; 0x58
 800746a:	4b7c      	ldr	r3, [pc, #496]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007476:	2301      	movs	r3, #1
 8007478:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800747a:	4b79      	ldr	r3, [pc, #484]	; (8007660 <HAL_RCC_OscConfig+0x4bc>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007482:	2b00      	cmp	r3, #0
 8007484:	d118      	bne.n	80074b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007486:	4b76      	ldr	r3, [pc, #472]	; (8007660 <HAL_RCC_OscConfig+0x4bc>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a75      	ldr	r2, [pc, #468]	; (8007660 <HAL_RCC_OscConfig+0x4bc>)
 800748c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007492:	f7fc faad 	bl	80039f0 <HAL_GetTick>
 8007496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007498:	e008      	b.n	80074ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749a:	f7fc faa9 	bl	80039f0 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e18b      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074ac:	4b6c      	ldr	r3, [pc, #432]	; (8007660 <HAL_RCC_OscConfig+0x4bc>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0f0      	beq.n	800749a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d108      	bne.n	80074d2 <HAL_RCC_OscConfig+0x32e>
 80074c0:	4b66      	ldr	r3, [pc, #408]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c6:	4a65      	ldr	r2, [pc, #404]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074d0:	e024      	b.n	800751c <HAL_RCC_OscConfig+0x378>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	2b05      	cmp	r3, #5
 80074d8:	d110      	bne.n	80074fc <HAL_RCC_OscConfig+0x358>
 80074da:	4b60      	ldr	r3, [pc, #384]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80074dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e0:	4a5e      	ldr	r2, [pc, #376]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80074e2:	f043 0304 	orr.w	r3, r3, #4
 80074e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074ea:	4b5c      	ldr	r3, [pc, #368]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80074ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f0:	4a5a      	ldr	r2, [pc, #360]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074fa:	e00f      	b.n	800751c <HAL_RCC_OscConfig+0x378>
 80074fc:	4b57      	ldr	r3, [pc, #348]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007502:	4a56      	ldr	r2, [pc, #344]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800750c:	4b53      	ldr	r3, [pc, #332]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 800750e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007512:	4a52      	ldr	r2, [pc, #328]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 8007514:	f023 0304 	bic.w	r3, r3, #4
 8007518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d016      	beq.n	8007552 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007524:	f7fc fa64 	bl	80039f0 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800752a:	e00a      	b.n	8007542 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800752c:	f7fc fa60 	bl	80039f0 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	f241 3288 	movw	r2, #5000	; 0x1388
 800753a:	4293      	cmp	r3, r2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e140      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007542:	4b46      	ldr	r3, [pc, #280]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0ed      	beq.n	800752c <HAL_RCC_OscConfig+0x388>
 8007550:	e015      	b.n	800757e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007552:	f7fc fa4d 	bl	80039f0 <HAL_GetTick>
 8007556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007558:	e00a      	b.n	8007570 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800755a:	f7fc fa49 	bl	80039f0 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	f241 3288 	movw	r2, #5000	; 0x1388
 8007568:	4293      	cmp	r3, r2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e129      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007570:	4b3a      	ldr	r3, [pc, #232]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 8007572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1ed      	bne.n	800755a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800757e:	7ffb      	ldrb	r3, [r7, #31]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d105      	bne.n	8007590 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007584:	4b35      	ldr	r3, [pc, #212]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 8007586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007588:	4a34      	ldr	r2, [pc, #208]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 800758a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800758e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b00      	cmp	r3, #0
 800759a:	d03c      	beq.n	8007616 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01c      	beq.n	80075de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075a4:	4b2d      	ldr	r3, [pc, #180]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80075a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075aa:	4a2c      	ldr	r2, [pc, #176]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80075ac:	f043 0301 	orr.w	r3, r3, #1
 80075b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b4:	f7fc fa1c 	bl	80039f0 <HAL_GetTick>
 80075b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075ba:	e008      	b.n	80075ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075bc:	f7fc fa18 	bl	80039f0 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e0fa      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075ce:	4b23      	ldr	r3, [pc, #140]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80075d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0ef      	beq.n	80075bc <HAL_RCC_OscConfig+0x418>
 80075dc:	e01b      	b.n	8007616 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075de:	4b1f      	ldr	r3, [pc, #124]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80075e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075e4:	4a1d      	ldr	r2, [pc, #116]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 80075e6:	f023 0301 	bic.w	r3, r3, #1
 80075ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ee:	f7fc f9ff 	bl	80039f0 <HAL_GetTick>
 80075f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075f4:	e008      	b.n	8007608 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075f6:	f7fc f9fb 	bl	80039f0 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e0dd      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007608:	4b14      	ldr	r3, [pc, #80]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 800760a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ef      	bne.n	80075f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 80d1 	beq.w	80077c2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007620:	4b0e      	ldr	r3, [pc, #56]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 030c 	and.w	r3, r3, #12
 8007628:	2b0c      	cmp	r3, #12
 800762a:	f000 808b 	beq.w	8007744 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d15e      	bne.n	80076f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007636:	4b09      	ldr	r3, [pc, #36]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a08      	ldr	r2, [pc, #32]	; (800765c <HAL_RCC_OscConfig+0x4b8>)
 800763c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007642:	f7fc f9d5 	bl	80039f0 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007648:	e00c      	b.n	8007664 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800764a:	f7fc f9d1 	bl	80039f0 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d905      	bls.n	8007664 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e0b3      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
 800765c:	40021000 	.word	0x40021000
 8007660:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007664:	4b59      	ldr	r3, [pc, #356]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1ec      	bne.n	800764a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007670:	4b56      	ldr	r3, [pc, #344]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	4b56      	ldr	r3, [pc, #344]	; (80077d0 <HAL_RCC_OscConfig+0x62c>)
 8007676:	4013      	ands	r3, r2
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6a11      	ldr	r1, [r2, #32]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007680:	3a01      	subs	r2, #1
 8007682:	0112      	lsls	r2, r2, #4
 8007684:	4311      	orrs	r1, r2
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800768a:	0212      	lsls	r2, r2, #8
 800768c:	4311      	orrs	r1, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007692:	0852      	lsrs	r2, r2, #1
 8007694:	3a01      	subs	r2, #1
 8007696:	0552      	lsls	r2, r2, #21
 8007698:	4311      	orrs	r1, r2
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800769e:	0852      	lsrs	r2, r2, #1
 80076a0:	3a01      	subs	r2, #1
 80076a2:	0652      	lsls	r2, r2, #25
 80076a4:	4311      	orrs	r1, r2
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076aa:	06d2      	lsls	r2, r2, #27
 80076ac:	430a      	orrs	r2, r1
 80076ae:	4947      	ldr	r1, [pc, #284]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076b4:	4b45      	ldr	r3, [pc, #276]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a44      	ldr	r2, [pc, #272]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 80076ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076c0:	4b42      	ldr	r3, [pc, #264]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	4a41      	ldr	r2, [pc, #260]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 80076c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076cc:	f7fc f990 	bl	80039f0 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076d4:	f7fc f98c 	bl	80039f0 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e06e      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076e6:	4b39      	ldr	r3, [pc, #228]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f0      	beq.n	80076d4 <HAL_RCC_OscConfig+0x530>
 80076f2:	e066      	b.n	80077c2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f4:	4b35      	ldr	r3, [pc, #212]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a34      	ldr	r2, [pc, #208]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 80076fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076fe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007700:	4b32      	ldr	r3, [pc, #200]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	4a31      	ldr	r2, [pc, #196]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 8007706:	f023 0303 	bic.w	r3, r3, #3
 800770a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800770c:	4b2f      	ldr	r3, [pc, #188]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	4a2e      	ldr	r2, [pc, #184]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 8007712:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800771a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771c:	f7fc f968 	bl	80039f0 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007724:	f7fc f964 	bl	80039f0 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e046      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007736:	4b25      	ldr	r3, [pc, #148]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f0      	bne.n	8007724 <HAL_RCC_OscConfig+0x580>
 8007742:	e03e      	b.n	80077c2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e039      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007750:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <HAL_RCC_OscConfig+0x628>)
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f003 0203 	and.w	r2, r3, #3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	429a      	cmp	r2, r3
 8007762:	d12c      	bne.n	80077be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	3b01      	subs	r3, #1
 8007770:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007772:	429a      	cmp	r2, r3
 8007774:	d123      	bne.n	80077be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007782:	429a      	cmp	r2, r3
 8007784:	d11b      	bne.n	80077be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007792:	429a      	cmp	r2, r3
 8007794:	d113      	bne.n	80077be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	3b01      	subs	r3, #1
 80077a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d109      	bne.n	80077be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	3b01      	subs	r3, #1
 80077b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d001      	beq.n	80077c2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40021000 	.word	0x40021000
 80077d0:	019f800c 	.word	0x019f800c

080077d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e11e      	b.n	8007a2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077ec:	4b91      	ldr	r3, [pc, #580]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 030f 	and.w	r3, r3, #15
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d910      	bls.n	800781c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077fa:	4b8e      	ldr	r3, [pc, #568]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f023 020f 	bic.w	r2, r3, #15
 8007802:	498c      	ldr	r1, [pc, #560]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	4313      	orrs	r3, r2
 8007808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800780a:	4b8a      	ldr	r3, [pc, #552]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d001      	beq.n	800781c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e106      	b.n	8007a2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d073      	beq.n	8007910 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	2b03      	cmp	r3, #3
 800782e:	d129      	bne.n	8007884 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007830:	4b81      	ldr	r3, [pc, #516]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e0f4      	b.n	8007a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007840:	f000 f9e2 	bl	8007c08 <RCC_GetSysClockFreqFromPLLSource>
 8007844:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	4a7c      	ldr	r2, [pc, #496]	; (8007a3c <HAL_RCC_ClockConfig+0x268>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d93f      	bls.n	80078ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800784e:	4b7a      	ldr	r3, [pc, #488]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007862:	2b00      	cmp	r3, #0
 8007864:	d033      	beq.n	80078ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800786a:	2b00      	cmp	r3, #0
 800786c:	d12f      	bne.n	80078ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800786e:	4b72      	ldr	r3, [pc, #456]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007876:	4a70      	ldr	r2, [pc, #448]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800787c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800787e:	2380      	movs	r3, #128	; 0x80
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	e024      	b.n	80078ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b02      	cmp	r3, #2
 800788a:	d107      	bne.n	800789c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800788c:	4b6a      	ldr	r3, [pc, #424]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d109      	bne.n	80078ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e0c6      	b.n	8007a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800789c:	4b66      	ldr	r3, [pc, #408]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0be      	b.n	8007a2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80078ac:	f000 f914 	bl	8007ad8 <HAL_RCC_GetSysClockFreq>
 80078b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	4a61      	ldr	r2, [pc, #388]	; (8007a3c <HAL_RCC_ClockConfig+0x268>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d909      	bls.n	80078ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078ba:	4b5f      	ldr	r3, [pc, #380]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078c2:	4a5d      	ldr	r2, [pc, #372]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 80078c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80078ca:	2380      	movs	r3, #128	; 0x80
 80078cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078ce:	4b5a      	ldr	r3, [pc, #360]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f023 0203 	bic.w	r2, r3, #3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	4957      	ldr	r1, [pc, #348]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e0:	f7fc f886 	bl	80039f0 <HAL_GetTick>
 80078e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e6:	e00a      	b.n	80078fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078e8:	f7fc f882 	bl	80039f0 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e095      	b.n	8007a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078fe:	4b4e      	ldr	r3, [pc, #312]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 020c 	and.w	r2, r3, #12
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	429a      	cmp	r2, r3
 800790e:	d1eb      	bne.n	80078e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d023      	beq.n	8007964 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007928:	4b43      	ldr	r3, [pc, #268]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	4a42      	ldr	r2, [pc, #264]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 800792e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007932:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0308 	and.w	r3, r3, #8
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007940:	4b3d      	ldr	r3, [pc, #244]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007948:	4a3b      	ldr	r2, [pc, #236]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 800794a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800794e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007950:	4b39      	ldr	r3, [pc, #228]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	4936      	ldr	r1, [pc, #216]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 800795e:	4313      	orrs	r3, r2
 8007960:	608b      	str	r3, [r1, #8]
 8007962:	e008      	b.n	8007976 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2b80      	cmp	r3, #128	; 0x80
 8007968:	d105      	bne.n	8007976 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800796a:	4b33      	ldr	r3, [pc, #204]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	4a32      	ldr	r2, [pc, #200]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007970:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007974:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007976:	4b2f      	ldr	r3, [pc, #188]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d21d      	bcs.n	80079c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007984:	4b2b      	ldr	r3, [pc, #172]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f023 020f 	bic.w	r2, r3, #15
 800798c:	4929      	ldr	r1, [pc, #164]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	4313      	orrs	r3, r2
 8007992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007994:	f7fc f82c 	bl	80039f0 <HAL_GetTick>
 8007998:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800799a:	e00a      	b.n	80079b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800799c:	f7fc f828 	bl	80039f0 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e03b      	b.n	8007a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b2:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d1ed      	bne.n	800799c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d008      	beq.n	80079de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079cc:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	4917      	ldr	r1, [pc, #92]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079ea:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	490f      	ldr	r1, [pc, #60]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079fe:	f000 f86b 	bl	8007ad8 <HAL_RCC_GetSysClockFreq>
 8007a02:	4602      	mov	r2, r0
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	091b      	lsrs	r3, r3, #4
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	490c      	ldr	r1, [pc, #48]	; (8007a40 <HAL_RCC_ClockConfig+0x26c>)
 8007a10:	5ccb      	ldrb	r3, [r1, r3]
 8007a12:	f003 031f 	and.w	r3, r3, #31
 8007a16:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <HAL_RCC_ClockConfig+0x270>)
 8007a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <HAL_RCC_ClockConfig+0x274>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fb ff98 	bl	8003958 <HAL_InitTick>
 8007a28:	4603      	mov	r3, r0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40022000 	.word	0x40022000
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	04c4b400 	.word	0x04c4b400
 8007a40:	0800c7c4 	.word	0x0800c7c4
 8007a44:	200000d8 	.word	0x200000d8
 8007a48:	200000dc 	.word	0x200000dc

08007a4c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08c      	sub	sp, #48	; 0x30
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007a58:	2302      	movs	r3, #2
 8007a5a:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	0c1b      	lsrs	r3, r3, #16
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8007a78:	029b      	lsls	r3, r3, #10
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	0c1b      	lsrs	r3, r3, #16
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <HAL_RCC_MCOConfig+0x88>)
 8007a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a92:	4910      	ldr	r1, [pc, #64]	; (8007ad4 <HAL_RCC_MCOConfig+0x88>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	0d1b      	lsrs	r3, r3, #20
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8007aa6:	f107 0310 	add.w	r3, r7, #16
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aae:	f7ff f911 	bl	8006cd4 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007ab8:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <HAL_RCC_MCOConfig+0x88>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ac0:	68b9      	ldr	r1, [r7, #8]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	4903      	ldr	r1, [pc, #12]	; (8007ad4 <HAL_RCC_MCOConfig+0x88>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	608b      	str	r3, [r1, #8]
  }
}
 8007acc:	bf00      	nop
 8007ace:	3730      	adds	r7, #48	; 0x30
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40021000 	.word	0x40021000

08007ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007ade:	4b2c      	ldr	r3, [pc, #176]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 030c 	and.w	r3, r3, #12
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d102      	bne.n	8007af0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007aea:	4b2a      	ldr	r3, [pc, #168]	; (8007b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007aec:	613b      	str	r3, [r7, #16]
 8007aee:	e047      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007af0:	4b27      	ldr	r3, [pc, #156]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 030c 	and.w	r3, r3, #12
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d102      	bne.n	8007b02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007afc:	4b25      	ldr	r3, [pc, #148]	; (8007b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	e03e      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007b02:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 030c 	and.w	r3, r3, #12
 8007b0a:	2b0c      	cmp	r3, #12
 8007b0c:	d136      	bne.n	8007b7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b0e:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	091b      	lsrs	r3, r3, #4
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	3301      	adds	r3, #1
 8007b24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d10c      	bne.n	8007b46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b2c:	4a19      	ldr	r2, [pc, #100]	; (8007b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b34:	4a16      	ldr	r2, [pc, #88]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b36:	68d2      	ldr	r2, [r2, #12]
 8007b38:	0a12      	lsrs	r2, r2, #8
 8007b3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b3e:	fb02 f303 	mul.w	r3, r2, r3
 8007b42:	617b      	str	r3, [r7, #20]
      break;
 8007b44:	e00c      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b46:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4e:	4a10      	ldr	r2, [pc, #64]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b50:	68d2      	ldr	r2, [r2, #12]
 8007b52:	0a12      	lsrs	r2, r2, #8
 8007b54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b58:	fb02 f303 	mul.w	r3, r2, r3
 8007b5c:	617b      	str	r3, [r7, #20]
      break;
 8007b5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	0e5b      	lsrs	r3, r3, #25
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	e001      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007b80:	693b      	ldr	r3, [r7, #16]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40021000 	.word	0x40021000
 8007b94:	00f42400 	.word	0x00f42400

08007b98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b9c:	4b03      	ldr	r3, [pc, #12]	; (8007bac <HAL_RCC_GetHCLKFreq+0x14>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	200000d8 	.word	0x200000d8

08007bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007bb4:	f7ff fff0 	bl	8007b98 <HAL_RCC_GetHCLKFreq>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	0a1b      	lsrs	r3, r3, #8
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	4904      	ldr	r1, [pc, #16]	; (8007bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007bc6:	5ccb      	ldrb	r3, [r1, r3]
 8007bc8:	f003 031f 	and.w	r3, r3, #31
 8007bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40021000 	.word	0x40021000
 8007bd8:	0800c7d4 	.word	0x0800c7d4

08007bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007be0:	f7ff ffda 	bl	8007b98 <HAL_RCC_GetHCLKFreq>
 8007be4:	4602      	mov	r2, r0
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	0adb      	lsrs	r3, r3, #11
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	4904      	ldr	r1, [pc, #16]	; (8007c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bf2:	5ccb      	ldrb	r3, [r1, r3]
 8007bf4:	f003 031f 	and.w	r3, r3, #31
 8007bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	40021000 	.word	0x40021000
 8007c04:	0800c7d4 	.word	0x0800c7d4

08007c08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c0e:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c18:	4b1b      	ldr	r3, [pc, #108]	; (8007c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	091b      	lsrs	r3, r3, #4
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d10c      	bne.n	8007c46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c2c:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	4a14      	ldr	r2, [pc, #80]	; (8007c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c36:	68d2      	ldr	r2, [r2, #12]
 8007c38:	0a12      	lsrs	r2, r2, #8
 8007c3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c3e:	fb02 f303 	mul.w	r3, r2, r3
 8007c42:	617b      	str	r3, [r7, #20]
    break;
 8007c44:	e00c      	b.n	8007c60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c46:	4a11      	ldr	r2, [pc, #68]	; (8007c8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	; (8007c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c50:	68d2      	ldr	r2, [r2, #12]
 8007c52:	0a12      	lsrs	r2, r2, #8
 8007c54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c58:	fb02 f303 	mul.w	r3, r2, r3
 8007c5c:	617b      	str	r3, [r7, #20]
    break;
 8007c5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c60:	4b09      	ldr	r3, [pc, #36]	; (8007c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	0e5b      	lsrs	r3, r3, #25
 8007c66:	f003 0303 	and.w	r3, r3, #3
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007c7a:	687b      	ldr	r3, [r7, #4]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	00f42400 	.word	0x00f42400

08007c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c98:	2300      	movs	r3, #0
 8007c9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8098 	beq.w	8007dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cb2:	4b43      	ldr	r3, [pc, #268]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10d      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cbe:	4b40      	ldr	r3, [pc, #256]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc2:	4a3f      	ldr	r2, [pc, #252]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8007cca:	4b3d      	ldr	r3, [pc, #244]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cd2:	60bb      	str	r3, [r7, #8]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cda:	4b3a      	ldr	r3, [pc, #232]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a39      	ldr	r2, [pc, #228]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ce6:	f7fb fe83 	bl	80039f0 <HAL_GetTick>
 8007cea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cec:	e009      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cee:	f7fb fe7f 	bl	80039f0 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d902      	bls.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	74fb      	strb	r3, [r7, #19]
        break;
 8007d00:	e005      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d02:	4b30      	ldr	r3, [pc, #192]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0ef      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007d0e:	7cfb      	ldrb	r3, [r7, #19]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d159      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d14:	4b2a      	ldr	r3, [pc, #168]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d01e      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d019      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d30:	4b23      	ldr	r3, [pc, #140]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d3c:	4b20      	ldr	r3, [pc, #128]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d42:	4a1f      	ldr	r2, [pc, #124]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d4c:	4b1c      	ldr	r3, [pc, #112]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d52:	4a1b      	ldr	r2, [pc, #108]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d5c:	4a18      	ldr	r2, [pc, #96]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d016      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6e:	f7fb fe3f 	bl	80039f0 <HAL_GetTick>
 8007d72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d74:	e00b      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d76:	f7fb fe3b 	bl	80039f0 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d902      	bls.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	74fb      	strb	r3, [r7, #19]
            break;
 8007d8c:	e006      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0ec      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007d9c:	7cfb      	ldrb	r3, [r7, #19]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10b      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007da2:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	4903      	ldr	r1, [pc, #12]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007db8:	e008      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dba:	7cfb      	ldrb	r3, [r7, #19]
 8007dbc:	74bb      	strb	r3, [r7, #18]
 8007dbe:	e005      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007dc0:	40021000 	.word	0x40021000
 8007dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc8:	7cfb      	ldrb	r3, [r7, #19]
 8007dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007dcc:	7c7b      	ldrb	r3, [r7, #17]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d105      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dd2:	4ba6      	ldr	r3, [pc, #664]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd6:	4aa5      	ldr	r2, [pc, #660]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ddc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007dea:	4ba0      	ldr	r3, [pc, #640]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df0:	f023 0203 	bic.w	r2, r3, #3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	499c      	ldr	r1, [pc, #624]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e0c:	4b97      	ldr	r3, [pc, #604]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e12:	f023 020c 	bic.w	r2, r3, #12
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	4994      	ldr	r1, [pc, #592]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e2e:	4b8f      	ldr	r3, [pc, #572]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	498b      	ldr	r1, [pc, #556]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00a      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e50:	4b86      	ldr	r3, [pc, #536]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	4983      	ldr	r1, [pc, #524]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e72:	4b7e      	ldr	r3, [pc, #504]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	497a      	ldr	r1, [pc, #488]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e94:	4b75      	ldr	r3, [pc, #468]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	4972      	ldr	r1, [pc, #456]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007eb6:	4b6d      	ldr	r3, [pc, #436]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	4969      	ldr	r1, [pc, #420]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ed8:	4b64      	ldr	r3, [pc, #400]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ede:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	4961      	ldr	r1, [pc, #388]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007efa:	4b5c      	ldr	r3, [pc, #368]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	4958      	ldr	r1, [pc, #352]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d015      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f1c:	4b53      	ldr	r3, [pc, #332]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	4950      	ldr	r1, [pc, #320]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f3a:	d105      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f3c:	4b4b      	ldr	r3, [pc, #300]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	4a4a      	ldr	r2, [pc, #296]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d015      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f54:	4b45      	ldr	r3, [pc, #276]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	4942      	ldr	r1, [pc, #264]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f72:	d105      	bne.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f74:	4b3d      	ldr	r3, [pc, #244]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	4a3c      	ldr	r2, [pc, #240]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d015      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f8c:	4b37      	ldr	r3, [pc, #220]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	4934      	ldr	r1, [pc, #208]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007faa:	d105      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fac:	4b2f      	ldr	r3, [pc, #188]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	4a2e      	ldr	r2, [pc, #184]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d015      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fc4:	4b29      	ldr	r3, [pc, #164]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd2:	4926      	ldr	r1, [pc, #152]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fe2:	d105      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fe4:	4b21      	ldr	r3, [pc, #132]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	4a20      	ldr	r2, [pc, #128]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d015      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ffc:	4b1b      	ldr	r3, [pc, #108]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	4918      	ldr	r1, [pc, #96]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800800c:	4313      	orrs	r3, r2
 800800e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800801a:	d105      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800801c:	4b13      	ldr	r3, [pc, #76]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4a12      	ldr	r2, [pc, #72]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008026:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d015      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008042:	490a      	ldr	r1, [pc, #40]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008052:	d105      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008054:	4b05      	ldr	r3, [pc, #20]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	4a04      	ldr	r2, [pc, #16]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800805a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800805e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008060:	7cbb      	ldrb	r3, [r7, #18]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	40021000 	.word	0x40021000

08008070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e09d      	b.n	80081be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	2b00      	cmp	r3, #0
 8008088:	d108      	bne.n	800809c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008092:	d009      	beq.n	80080a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	61da      	str	r2, [r3, #28]
 800809a:	e005      	b.n	80080a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fa ff1c 	bl	8002f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080e8:	d902      	bls.n	80080f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e002      	b.n	80080f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80080f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80080fe:	d007      	beq.n	8008110 <HAL_SPI_Init+0xa0>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008108:	d002      	beq.n	8008110 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	431a      	orrs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	431a      	orrs	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008152:	ea42 0103 	orr.w	r1, r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	0c1b      	lsrs	r3, r3, #16
 800816c:	f003 0204 	and.w	r2, r3, #4
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800818c:	ea42 0103 	orr.w	r1, r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e16c      	b.n	80084c2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081f6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80081fe:	7dbb      	ldrb	r3, [r7, #22]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d00d      	beq.n	8008220 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800820a:	d106      	bne.n	800821a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <HAL_SPI_TransmitReceive_DMA+0x52>
 8008214:	7dbb      	ldrb	r3, [r7, #22]
 8008216:	2b04      	cmp	r3, #4
 8008218:	d002      	beq.n	8008220 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800821a:	2302      	movs	r3, #2
 800821c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800821e:	e14b      	b.n	80084b8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800822c:	887b      	ldrh	r3, [r7, #2]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008236:	e13f      	b.n	80084b8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b04      	cmp	r3, #4
 8008242:	d003      	beq.n	800824c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2205      	movs	r2, #5
 8008248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	887a      	ldrh	r2, [r7, #2]
 800825c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	887a      	ldrh	r2, [r7, #2]
 8008262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	887a      	ldrh	r2, [r7, #2]
 800826e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	887a      	ldrh	r2, [r7, #2]
 8008276:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008294:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800829e:	d908      	bls.n	80082b2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082ae:	605a      	str	r2, [r3, #4]
 80082b0:	e06f      	b.n	8008392 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082c0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082cc:	d126      	bne.n	800831c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10f      	bne.n	80082fa <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082e8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	085b      	lsrs	r3, r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082f8:	e010      	b.n	800831c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008308:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800830e:	b29b      	uxth	r3, r3
 8008310:	085b      	lsrs	r3, r3, #1
 8008312:	b29b      	uxth	r3, r3
 8008314:	3301      	adds	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008326:	d134      	bne.n	8008392 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008336:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800833e:	b29b      	uxth	r3, r3
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d111      	bne.n	800836c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008356:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800835e:	b29b      	uxth	r3, r3
 8008360:	085b      	lsrs	r3, r3, #1
 8008362:	b29a      	uxth	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800836a:	e012      	b.n	8008392 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800837a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008382:	b29b      	uxth	r3, r3
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	b29b      	uxth	r3, r3
 8008388:	3301      	adds	r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b04      	cmp	r3, #4
 800839c:	d108      	bne.n	80083b0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a2:	4a4a      	ldr	r2, [pc, #296]	; (80084cc <HAL_SPI_TransmitReceive_DMA+0x304>)
 80083a4:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083aa:	4a49      	ldr	r2, [pc, #292]	; (80084d0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80083ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80083ae:	e007      	b.n	80083c0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b4:	4a47      	ldr	r2, [pc, #284]	; (80084d4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80083b6:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083bc:	4a46      	ldr	r2, [pc, #280]	; (80084d8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80083be:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c4:	4a45      	ldr	r2, [pc, #276]	; (80084dc <HAL_SPI_TransmitReceive_DMA+0x314>)
 80083c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083cc:	2200      	movs	r2, #0
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	330c      	adds	r3, #12
 80083da:	4619      	mov	r1, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80083ea:	f7fd fb43 	bl	8005a74 <HAL_DMA_Start_IT>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00c      	beq.n	800840e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f8:	f043 0210 	orr.w	r2, r3, #16
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800840c:	e054      	b.n	80084b8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0201 	orr.w	r2, r2, #1
 800841c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008422:	2200      	movs	r2, #0
 8008424:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842a:	2200      	movs	r2, #0
 800842c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008432:	2200      	movs	r2, #0
 8008434:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	2200      	movs	r2, #0
 800843c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	4619      	mov	r1, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	330c      	adds	r3, #12
 800844e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008454:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008456:	f7fd fb0d 	bl	8005a74 <HAL_DMA_Start_IT>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00c      	beq.n	800847a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008464:	f043 0210 	orr.w	r2, r3, #16
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008478:	e01e      	b.n	80084b8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b40      	cmp	r3, #64	; 0x40
 8008486:	d007      	beq.n	8008498 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008496:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0220 	orr.w	r2, r2, #32
 80084a6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0202 	orr.w	r2, r2, #2
 80084b6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	08008851 	.word	0x08008851
 80084d0:	08008719 	.word	0x08008719
 80084d4:	0800886d 	.word	0x0800886d
 80084d8:	080087c1 	.word	0x080087c1
 80084dc:	08008889 	.word	0x08008889

080084e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10e      	bne.n	8008520 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008508:	2b00      	cmp	r3, #0
 800850a:	d009      	beq.n	8008520 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	4798      	blx	r3
    return;
 800851e:	e0ce      	b.n	80086be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d009      	beq.n	800853e <HAL_SPI_IRQHandler+0x5e>
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008530:	2b00      	cmp	r3, #0
 8008532:	d004      	beq.n	800853e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
    return;
 800853c:	e0bf      	b.n	80086be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <HAL_SPI_IRQHandler+0x7e>
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d105      	bne.n	800855e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 80b0 	beq.w	80086be <HAL_SPI_IRQHandler+0x1de>
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	f003 0320 	and.w	r3, r3, #32
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80aa 	beq.w	80086be <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008570:	2b00      	cmp	r3, #0
 8008572:	d023      	beq.n	80085bc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b03      	cmp	r3, #3
 800857e:	d011      	beq.n	80085a4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008584:	f043 0204 	orr.w	r2, r3, #4
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	e00b      	b.n	80085bc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085a4:	2300      	movs	r3, #0
 80085a6:	613b      	str	r3, [r7, #16]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	613b      	str	r3, [r7, #16]
 80085b8:	693b      	ldr	r3, [r7, #16]
        return;
 80085ba:	e080      	b.n	80086be <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d014      	beq.n	80085f0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ca:	f043 0201 	orr.w	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80085d2:	2300      	movs	r3, #0
 80085d4:	60fb      	str	r3, [r7, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00c      	beq.n	8008614 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fe:	f043 0208 	orr.w	r2, r3, #8
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008606:	2300      	movs	r3, #0
 8008608:	60bb      	str	r3, [r7, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008618:	2b00      	cmp	r3, #0
 800861a:	d04f      	beq.n	80086bc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800862a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d104      	bne.n	8008648 <HAL_SPI_IRQHandler+0x168>
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d034      	beq.n	80086b2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0203 	bic.w	r2, r2, #3
 8008656:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865c:	2b00      	cmp	r3, #0
 800865e:	d011      	beq.n	8008684 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008664:	4a17      	ldr	r2, [pc, #92]	; (80086c4 <HAL_SPI_IRQHandler+0x1e4>)
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866c:	4618      	mov	r0, r3
 800866e:	f7fd fad5 	bl	8005c1c <HAL_DMA_Abort_IT>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008688:	2b00      	cmp	r3, #0
 800868a:	d016      	beq.n	80086ba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008690:	4a0c      	ldr	r2, [pc, #48]	; (80086c4 <HAL_SPI_IRQHandler+0x1e4>)
 8008692:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008698:	4618      	mov	r0, r3
 800869a:	f7fd fabf 	bl	8005c1c <HAL_DMA_Abort_IT>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00a      	beq.n	80086ba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80086b0:	e003      	b.n	80086ba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f826 	bl	8008704 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80086b8:	e000      	b.n	80086bc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80086ba:	bf00      	nop
    return;
 80086bc:	bf00      	nop
  }
}
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	080088c9 	.word	0x080088c9

080086c8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008724:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008726:	f7fb f963 	bl	80039f0 <HAL_GetTick>
 800872a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b20      	cmp	r3, #32
 8008738:	d03c      	beq.n	80087b4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0220 	bic.w	r2, r2, #32
 8008748:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10d      	bne.n	800876e <SPI_DMAReceiveCplt+0x56>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800875a:	d108      	bne.n	800876e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0203 	bic.w	r2, r2, #3
 800876a:	605a      	str	r2, [r3, #4]
 800876c:	e007      	b.n	800877e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f022 0201 	bic.w	r2, r2, #1
 800877c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	2164      	movs	r1, #100	; 0x64
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 f9d4 	bl	8008b30 <SPI_EndRxTransaction>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2220      	movs	r2, #32
 8008792:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f7ff ffa9 	bl	8008704 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80087b2:	e002      	b.n	80087ba <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f7ff ff87 	bl	80086c8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087ce:	f7fb f90f 	bl	80039f0 <HAL_GetTick>
 80087d2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b20      	cmp	r3, #32
 80087e0:	d030      	beq.n	8008844 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0220 	bic.w	r2, r2, #32
 80087f0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	2164      	movs	r1, #100	; 0x64
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 f9f2 	bl	8008be0 <SPI_EndRxTxTransaction>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d005      	beq.n	800880e <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008806:	f043 0220 	orr.w	r2, r3, #32
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0203 	bic.w	r2, r2, #3
 800881c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff ff61 	bl	8008704 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008842:	e002      	b.n	800884a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f7f8 feb7 	bl	80015b8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f7ff ff3c 	bl	80086dc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008864:	bf00      	nop
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7ff ff38 	bl	80086f0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008880:	bf00      	nop
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008894:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0203 	bic.w	r2, r2, #3
 80088a4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088aa:	f043 0210 	orr.w	r2, r3, #16
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff ff22 	bl	8008704 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff ff0d 	bl	8008704 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	4613      	mov	r3, r2
 8008902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008904:	f7fb f874 	bl	80039f0 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	4413      	add	r3, r2
 8008912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008914:	f7fb f86c 	bl	80039f0 <HAL_GetTick>
 8008918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800891a:	4b39      	ldr	r3, [pc, #228]	; (8008a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	015b      	lsls	r3, r3, #5
 8008920:	0d1b      	lsrs	r3, r3, #20
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	fb02 f303 	mul.w	r3, r2, r3
 8008928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800892a:	e054      	b.n	80089d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008932:	d050      	beq.n	80089d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008934:	f7fb f85c 	bl	80039f0 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	429a      	cmp	r2, r3
 8008942:	d902      	bls.n	800894a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d13d      	bne.n	80089c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008962:	d111      	bne.n	8008988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800896c:	d004      	beq.n	8008978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008976:	d107      	bne.n	8008988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008990:	d10f      	bne.n	80089b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e017      	b.n	80089f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4013      	ands	r3, r2
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	bf0c      	ite	eq
 80089e6:	2301      	moveq	r3, #1
 80089e8:	2300      	movne	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	79fb      	ldrb	r3, [r7, #7]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d19b      	bne.n	800892c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3720      	adds	r7, #32
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	200000d8 	.word	0x200000d8

08008a04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	; 0x28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a16:	f7fa ffeb 	bl	80039f0 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	4413      	add	r3, r2
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008a26:	f7fa ffe3 	bl	80039f0 <HAL_GetTick>
 8008a2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	330c      	adds	r3, #12
 8008a32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a34:	4b3d      	ldr	r3, [pc, #244]	; (8008b2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	00da      	lsls	r2, r3, #3
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	0d1b      	lsrs	r3, r3, #20
 8008a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008a4c:	e060      	b.n	8008b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008a54:	d107      	bne.n	8008a66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d104      	bne.n	8008a66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d050      	beq.n	8008b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a6e:	f7fa ffbf 	bl	80039f0 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d902      	bls.n	8008a84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d13d      	bne.n	8008b00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a9c:	d111      	bne.n	8008ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aa6:	d004      	beq.n	8008ab2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ab0:	d107      	bne.n	8008ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ac0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aca:	d10f      	bne.n	8008aec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008aea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e010      	b.n	8008b22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d196      	bne.n	8008a4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3728      	adds	r7, #40	; 0x28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200000d8 	.word	0x200000d8

08008b30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b44:	d111      	bne.n	8008b6a <SPI_EndRxTransaction+0x3a>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b4e:	d004      	beq.n	8008b5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b58:	d107      	bne.n	8008b6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2200      	movs	r2, #0
 8008b72:	2180      	movs	r1, #128	; 0x80
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff febd 	bl	80088f4 <SPI_WaitFlagStateUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d007      	beq.n	8008b90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b84:	f043 0220 	orr.w	r2, r3, #32
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e023      	b.n	8008bd8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b98:	d11d      	bne.n	8008bd6 <SPI_EndRxTransaction+0xa6>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ba2:	d004      	beq.n	8008bae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bac:	d113      	bne.n	8008bd6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f7ff ff22 	bl	8008a04 <SPI_WaitFifoStateUntilTimeout>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d007      	beq.n	8008bd6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bca:	f043 0220 	orr.w	r2, r3, #32
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e000      	b.n	8008bd8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff ff03 	bl	8008a04 <SPI_WaitFifoStateUntilTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d007      	beq.n	8008c14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c08:	f043 0220 	orr.w	r2, r3, #32
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e027      	b.n	8008c64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2180      	movs	r1, #128	; 0x80
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff fe68 	bl	80088f4 <SPI_WaitFlagStateUntilTimeout>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c2e:	f043 0220 	orr.w	r2, r3, #32
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e014      	b.n	8008c64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f7ff fedc 	bl	8008a04 <SPI_WaitFifoStateUntilTimeout>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c56:	f043 0220 	orr.w	r2, r3, #32
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e000      	b.n	8008c64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e049      	b.n	8008d12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d106      	bne.n	8008c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7fa fca2 	bl	80035dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f000 fe74 	bl	8009998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6a1a      	ldr	r2, [r3, #32]
 8008d28:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10f      	bne.n	8008d52 <HAL_TIM_Base_Stop+0x38>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6a1a      	ldr	r2, [r3, #32]
 8008d38:	f244 4344 	movw	r3, #17476	; 0x4444
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d107      	bne.n	8008d52 <HAL_TIM_Base_Stop+0x38>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f022 0201 	bic.w	r2, r2, #1
 8008d50:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d001      	beq.n	8008d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e04a      	b.n	8008e16 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a21      	ldr	r2, [pc, #132]	; (8008e24 <HAL_TIM_Base_Start_IT+0xbc>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d018      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008daa:	d013      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a1d      	ldr	r2, [pc, #116]	; (8008e28 <HAL_TIM_Base_Start_IT+0xc0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00e      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a1c      	ldr	r2, [pc, #112]	; (8008e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d009      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a1a      	ldr	r2, [pc, #104]	; (8008e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d004      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a19      	ldr	r2, [pc, #100]	; (8008e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d115      	bne.n	8008e00 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b06      	cmp	r3, #6
 8008de4:	d015      	beq.n	8008e12 <HAL_TIM_Base_Start_IT+0xaa>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dec:	d011      	beq.n	8008e12 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0201 	orr.w	r2, r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dfe:	e008      	b.n	8008e12 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0201 	orr.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e000      	b.n	8008e14 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	40012c00 	.word	0x40012c00
 8008e28:	40000400 	.word	0x40000400
 8008e2c:	40000800 	.word	0x40000800
 8008e30:	40013400 	.word	0x40013400
 8008e34:	40014000 	.word	0x40014000
 8008e38:	00010007 	.word	0x00010007

08008e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e049      	b.n	8008ee2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d106      	bne.n	8008e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f841 	bl	8008eea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f000 fd8c 	bl	8009998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ef2:	bf00      	nop
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
	...

08008f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d109      	bne.n	8008f24 <HAL_TIM_PWM_Start+0x24>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	bf14      	ite	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	2300      	moveq	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	e03c      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d109      	bne.n	8008f3e <HAL_TIM_PWM_Start+0x3e>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	bf14      	ite	ne
 8008f36:	2301      	movne	r3, #1
 8008f38:	2300      	moveq	r3, #0
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	e02f      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d109      	bne.n	8008f58 <HAL_TIM_PWM_Start+0x58>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	bf14      	ite	ne
 8008f50:	2301      	movne	r3, #1
 8008f52:	2300      	moveq	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	e022      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b0c      	cmp	r3, #12
 8008f5c:	d109      	bne.n	8008f72 <HAL_TIM_PWM_Start+0x72>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	bf14      	ite	ne
 8008f6a:	2301      	movne	r3, #1
 8008f6c:	2300      	moveq	r3, #0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	e015      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b10      	cmp	r3, #16
 8008f76:	d109      	bne.n	8008f8c <HAL_TIM_PWM_Start+0x8c>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	bf14      	ite	ne
 8008f84:	2301      	movne	r3, #1
 8008f86:	2300      	moveq	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	e008      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	bf14      	ite	ne
 8008f98:	2301      	movne	r3, #1
 8008f9a:	2300      	moveq	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e097      	b.n	80090d6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <HAL_TIM_PWM_Start+0xb6>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fb4:	e023      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_PWM_Start+0xc6>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fc4:	e01b      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_PWM_Start+0xd6>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fd4:	e013      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b0c      	cmp	r3, #12
 8008fda:	d104      	bne.n	8008fe6 <HAL_TIM_PWM_Start+0xe6>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fe4:	e00b      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b10      	cmp	r3, #16
 8008fea:	d104      	bne.n	8008ff6 <HAL_TIM_PWM_Start+0xf6>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2202      	movs	r2, #2
 8008ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ff4:	e003      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2201      	movs	r2, #1
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	4618      	mov	r0, r3
 8009008:	f001 f8e8 	bl	800a1dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a33      	ldr	r2, [pc, #204]	; (80090e0 <HAL_TIM_PWM_Start+0x1e0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d013      	beq.n	800903e <HAL_TIM_PWM_Start+0x13e>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a32      	ldr	r2, [pc, #200]	; (80090e4 <HAL_TIM_PWM_Start+0x1e4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00e      	beq.n	800903e <HAL_TIM_PWM_Start+0x13e>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a30      	ldr	r2, [pc, #192]	; (80090e8 <HAL_TIM_PWM_Start+0x1e8>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d009      	beq.n	800903e <HAL_TIM_PWM_Start+0x13e>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a2f      	ldr	r2, [pc, #188]	; (80090ec <HAL_TIM_PWM_Start+0x1ec>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d004      	beq.n	800903e <HAL_TIM_PWM_Start+0x13e>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a2d      	ldr	r2, [pc, #180]	; (80090f0 <HAL_TIM_PWM_Start+0x1f0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d101      	bne.n	8009042 <HAL_TIM_PWM_Start+0x142>
 800903e:	2301      	movs	r3, #1
 8009040:	e000      	b.n	8009044 <HAL_TIM_PWM_Start+0x144>
 8009042:	2300      	movs	r3, #0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009056:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a20      	ldr	r2, [pc, #128]	; (80090e0 <HAL_TIM_PWM_Start+0x1e0>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d018      	beq.n	8009094 <HAL_TIM_PWM_Start+0x194>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906a:	d013      	beq.n	8009094 <HAL_TIM_PWM_Start+0x194>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a20      	ldr	r2, [pc, #128]	; (80090f4 <HAL_TIM_PWM_Start+0x1f4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00e      	beq.n	8009094 <HAL_TIM_PWM_Start+0x194>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a1f      	ldr	r2, [pc, #124]	; (80090f8 <HAL_TIM_PWM_Start+0x1f8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d009      	beq.n	8009094 <HAL_TIM_PWM_Start+0x194>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a17      	ldr	r2, [pc, #92]	; (80090e4 <HAL_TIM_PWM_Start+0x1e4>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d004      	beq.n	8009094 <HAL_TIM_PWM_Start+0x194>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a16      	ldr	r2, [pc, #88]	; (80090e8 <HAL_TIM_PWM_Start+0x1e8>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d115      	bne.n	80090c0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	4b18      	ldr	r3, [pc, #96]	; (80090fc <HAL_TIM_PWM_Start+0x1fc>)
 800909c:	4013      	ands	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b06      	cmp	r3, #6
 80090a4:	d015      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x1d2>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ac:	d011      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f042 0201 	orr.w	r2, r2, #1
 80090bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090be:	e008      	b.n	80090d2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0201 	orr.w	r2, r2, #1
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	e000      	b.n	80090d4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	40012c00 	.word	0x40012c00
 80090e4:	40013400 	.word	0x40013400
 80090e8:	40014000 	.word	0x40014000
 80090ec:	40014400 	.word	0x40014400
 80090f0:	40014800 	.word	0x40014800
 80090f4:	40000400 	.word	0x40000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	00010007 	.word	0x00010007

08009100 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2200      	movs	r2, #0
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	4618      	mov	r0, r3
 8009114:	f001 f862 	bl	800a1dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a3e      	ldr	r2, [pc, #248]	; (8009218 <HAL_TIM_PWM_Stop+0x118>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d013      	beq.n	800914a <HAL_TIM_PWM_Stop+0x4a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a3d      	ldr	r2, [pc, #244]	; (800921c <HAL_TIM_PWM_Stop+0x11c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00e      	beq.n	800914a <HAL_TIM_PWM_Stop+0x4a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a3b      	ldr	r2, [pc, #236]	; (8009220 <HAL_TIM_PWM_Stop+0x120>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d009      	beq.n	800914a <HAL_TIM_PWM_Stop+0x4a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a3a      	ldr	r2, [pc, #232]	; (8009224 <HAL_TIM_PWM_Stop+0x124>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d004      	beq.n	800914a <HAL_TIM_PWM_Stop+0x4a>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a38      	ldr	r2, [pc, #224]	; (8009228 <HAL_TIM_PWM_Stop+0x128>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d101      	bne.n	800914e <HAL_TIM_PWM_Stop+0x4e>
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <HAL_TIM_PWM_Stop+0x50>
 800914e:	2300      	movs	r3, #0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d017      	beq.n	8009184 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6a1a      	ldr	r2, [r3, #32]
 800915a:	f241 1311 	movw	r3, #4369	; 0x1111
 800915e:	4013      	ands	r3, r2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10f      	bne.n	8009184 <HAL_TIM_PWM_Stop+0x84>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6a1a      	ldr	r2, [r3, #32]
 800916a:	f244 4344 	movw	r3, #17476	; 0x4444
 800916e:	4013      	ands	r3, r2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d107      	bne.n	8009184 <HAL_TIM_PWM_Stop+0x84>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009182:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a1a      	ldr	r2, [r3, #32]
 800918a:	f241 1311 	movw	r3, #4369	; 0x1111
 800918e:	4013      	ands	r3, r2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10f      	bne.n	80091b4 <HAL_TIM_PWM_Stop+0xb4>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6a1a      	ldr	r2, [r3, #32]
 800919a:	f244 4344 	movw	r3, #17476	; 0x4444
 800919e:	4013      	ands	r3, r2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d107      	bne.n	80091b4 <HAL_TIM_PWM_Stop+0xb4>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0201 	bic.w	r2, r2, #1
 80091b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <HAL_TIM_PWM_Stop+0xc4>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091c2:	e023      	b.n	800920c <HAL_TIM_PWM_Stop+0x10c>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d104      	bne.n	80091d4 <HAL_TIM_PWM_Stop+0xd4>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091d2:	e01b      	b.n	800920c <HAL_TIM_PWM_Stop+0x10c>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d104      	bne.n	80091e4 <HAL_TIM_PWM_Stop+0xe4>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091e2:	e013      	b.n	800920c <HAL_TIM_PWM_Stop+0x10c>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b0c      	cmp	r3, #12
 80091e8:	d104      	bne.n	80091f4 <HAL_TIM_PWM_Stop+0xf4>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091f2:	e00b      	b.n	800920c <HAL_TIM_PWM_Stop+0x10c>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b10      	cmp	r3, #16
 80091f8:	d104      	bne.n	8009204 <HAL_TIM_PWM_Stop+0x104>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009202:	e003      	b.n	800920c <HAL_TIM_PWM_Stop+0x10c>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	40012c00 	.word	0x40012c00
 800921c:	40013400 	.word	0x40013400
 8009220:	40014000 	.word	0x40014000
 8009224:	40014400 	.word	0x40014400
 8009228:	40014800 	.word	0x40014800

0800922c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b02      	cmp	r3, #2
 8009240:	d122      	bne.n	8009288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b02      	cmp	r3, #2
 800924e:	d11b      	bne.n	8009288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f06f 0202 	mvn.w	r2, #2
 8009258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fb74 	bl	800995c <HAL_TIM_IC_CaptureCallback>
 8009274:	e005      	b.n	8009282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fb66 	bl	8009948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fb77 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0304 	and.w	r3, r3, #4
 8009292:	2b04      	cmp	r3, #4
 8009294:	d122      	bne.n	80092dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d11b      	bne.n	80092dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0204 	mvn.w	r2, #4
 80092ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2202      	movs	r2, #2
 80092b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fb4a 	bl	800995c <HAL_TIM_IC_CaptureCallback>
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fb3c 	bl	8009948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fb4d 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b08      	cmp	r3, #8
 80092e8:	d122      	bne.n	8009330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f003 0308 	and.w	r3, r3, #8
 80092f4:	2b08      	cmp	r3, #8
 80092f6:	d11b      	bne.n	8009330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0208 	mvn.w	r2, #8
 8009300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2204      	movs	r2, #4
 8009306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fb20 	bl	800995c <HAL_TIM_IC_CaptureCallback>
 800931c:	e005      	b.n	800932a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fb12 	bl	8009948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fb23 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0310 	and.w	r3, r3, #16
 800933a:	2b10      	cmp	r3, #16
 800933c:	d122      	bne.n	8009384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f003 0310 	and.w	r3, r3, #16
 8009348:	2b10      	cmp	r3, #16
 800934a:	d11b      	bne.n	8009384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f06f 0210 	mvn.w	r2, #16
 8009354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2208      	movs	r2, #8
 800935a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 faf6 	bl	800995c <HAL_TIM_IC_CaptureCallback>
 8009370:	e005      	b.n	800937e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fae8 	bl	8009948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 faf9 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b01      	cmp	r3, #1
 8009390:	d10e      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b01      	cmp	r3, #1
 800939e:	d107      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0201 	mvn.w	r2, #1
 80093a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7f8 f9fe 	bl	80017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ba:	2b80      	cmp	r3, #128	; 0x80
 80093bc:	d10e      	bne.n	80093dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c8:	2b80      	cmp	r3, #128	; 0x80
 80093ca:	d107      	bne.n	80093dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 f964 	bl	800a6a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ea:	d10e      	bne.n	800940a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f6:	2b80      	cmp	r3, #128	; 0x80
 80093f8:	d107      	bne.n	800940a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 f957 	bl	800a6b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009414:	2b40      	cmp	r3, #64	; 0x40
 8009416:	d10e      	bne.n	8009436 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009422:	2b40      	cmp	r3, #64	; 0x40
 8009424:	d107      	bne.n	8009436 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800942e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 faa7 	bl	8009984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b20      	cmp	r3, #32
 8009442:	d10e      	bne.n	8009462 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f003 0320 	and.w	r3, r3, #32
 800944e:	2b20      	cmp	r3, #32
 8009450:	d107      	bne.n	8009462 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f06f 0220 	mvn.w	r2, #32
 800945a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f001 f917 	bl	800a690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800946c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009470:	d10f      	bne.n	8009492 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800947c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009480:	d107      	bne.n	8009492 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800948a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 f91d 	bl	800a6cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800949c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094a0:	d10f      	bne.n	80094c2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094b0:	d107      	bne.n	80094c2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80094ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 f90f 	bl	800a6e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094d0:	d10f      	bne.n	80094f2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094e0:	d107      	bne.n	80094f2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80094ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 f901 	bl	800a6f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009500:	d10f      	bne.n	8009522 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800950c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009510:	d107      	bne.n	8009522 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800951a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 f8f3 	bl	800a708 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009522:	bf00      	nop
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009542:	2b01      	cmp	r3, #1
 8009544:	d101      	bne.n	800954a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009546:	2302      	movs	r3, #2
 8009548:	e0ff      	b.n	800974a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b14      	cmp	r3, #20
 8009556:	f200 80f0 	bhi.w	800973a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800955a:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	080095b5 	.word	0x080095b5
 8009564:	0800973b 	.word	0x0800973b
 8009568:	0800973b 	.word	0x0800973b
 800956c:	0800973b 	.word	0x0800973b
 8009570:	080095f5 	.word	0x080095f5
 8009574:	0800973b 	.word	0x0800973b
 8009578:	0800973b 	.word	0x0800973b
 800957c:	0800973b 	.word	0x0800973b
 8009580:	08009637 	.word	0x08009637
 8009584:	0800973b 	.word	0x0800973b
 8009588:	0800973b 	.word	0x0800973b
 800958c:	0800973b 	.word	0x0800973b
 8009590:	08009677 	.word	0x08009677
 8009594:	0800973b 	.word	0x0800973b
 8009598:	0800973b 	.word	0x0800973b
 800959c:	0800973b 	.word	0x0800973b
 80095a0:	080096b9 	.word	0x080096b9
 80095a4:	0800973b 	.word	0x0800973b
 80095a8:	0800973b 	.word	0x0800973b
 80095ac:	0800973b 	.word	0x0800973b
 80095b0:	080096f9 	.word	0x080096f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68b9      	ldr	r1, [r7, #8]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fa7c 	bl	8009ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	699a      	ldr	r2, [r3, #24]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0208 	orr.w	r2, r2, #8
 80095ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699a      	ldr	r2, [r3, #24]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0204 	bic.w	r2, r2, #4
 80095de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6999      	ldr	r1, [r3, #24]
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	691a      	ldr	r2, [r3, #16]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	619a      	str	r2, [r3, #24]
      break;
 80095f2:	e0a5      	b.n	8009740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68b9      	ldr	r1, [r7, #8]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 faec 	bl	8009bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	699a      	ldr	r2, [r3, #24]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800960e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	699a      	ldr	r2, [r3, #24]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800961e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6999      	ldr	r1, [r3, #24]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	021a      	lsls	r2, r3, #8
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	619a      	str	r2, [r3, #24]
      break;
 8009634:	e084      	b.n	8009740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68b9      	ldr	r1, [r7, #8]
 800963c:	4618      	mov	r0, r3
 800963e:	f000 fb55 	bl	8009cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	69da      	ldr	r2, [r3, #28]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f042 0208 	orr.w	r2, r2, #8
 8009650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	69da      	ldr	r2, [r3, #28]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0204 	bic.w	r2, r2, #4
 8009660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69d9      	ldr	r1, [r3, #28]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	691a      	ldr	r2, [r3, #16]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	61da      	str	r2, [r3, #28]
      break;
 8009674:	e064      	b.n	8009740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	4618      	mov	r0, r3
 800967e:	f000 fbbd 	bl	8009dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69da      	ldr	r2, [r3, #28]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69da      	ldr	r2, [r3, #28]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	69d9      	ldr	r1, [r3, #28]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	021a      	lsls	r2, r3, #8
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	61da      	str	r2, [r3, #28]
      break;
 80096b6:	e043      	b.n	8009740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68b9      	ldr	r1, [r7, #8]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fc26 	bl	8009f10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f042 0208 	orr.w	r2, r2, #8
 80096d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 0204 	bic.w	r2, r2, #4
 80096e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	691a      	ldr	r2, [r3, #16]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80096f6:	e023      	b.n	8009740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fc6a 	bl	8009fd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009712:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009722:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	021a      	lsls	r2, r3, #8
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009738:	e002      	b.n	8009740 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	75fb      	strb	r3, [r7, #23]
      break;
 800973e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009748:	7dfb      	ldrb	r3, [r7, #23]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3718      	adds	r7, #24
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop

08009754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009768:	2b01      	cmp	r3, #1
 800976a:	d101      	bne.n	8009770 <HAL_TIM_ConfigClockSource+0x1c>
 800976c:	2302      	movs	r3, #2
 800976e:	e0de      	b.n	800992e <HAL_TIM_ConfigClockSource+0x1da>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800978e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800979a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a63      	ldr	r2, [pc, #396]	; (8009938 <HAL_TIM_ConfigClockSource+0x1e4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	f000 80a9 	beq.w	8009902 <HAL_TIM_ConfigClockSource+0x1ae>
 80097b0:	4a61      	ldr	r2, [pc, #388]	; (8009938 <HAL_TIM_ConfigClockSource+0x1e4>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	f200 80ae 	bhi.w	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 80097b8:	4a60      	ldr	r2, [pc, #384]	; (800993c <HAL_TIM_ConfigClockSource+0x1e8>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	f000 80a1 	beq.w	8009902 <HAL_TIM_ConfigClockSource+0x1ae>
 80097c0:	4a5e      	ldr	r2, [pc, #376]	; (800993c <HAL_TIM_ConfigClockSource+0x1e8>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	f200 80a6 	bhi.w	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 80097c8:	4a5d      	ldr	r2, [pc, #372]	; (8009940 <HAL_TIM_ConfigClockSource+0x1ec>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	f000 8099 	beq.w	8009902 <HAL_TIM_ConfigClockSource+0x1ae>
 80097d0:	4a5b      	ldr	r2, [pc, #364]	; (8009940 <HAL_TIM_ConfigClockSource+0x1ec>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	f200 809e 	bhi.w	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 80097d8:	4a5a      	ldr	r2, [pc, #360]	; (8009944 <HAL_TIM_ConfigClockSource+0x1f0>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	f000 8091 	beq.w	8009902 <HAL_TIM_ConfigClockSource+0x1ae>
 80097e0:	4a58      	ldr	r2, [pc, #352]	; (8009944 <HAL_TIM_ConfigClockSource+0x1f0>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	f200 8096 	bhi.w	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 80097e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80097ec:	f000 8089 	beq.w	8009902 <HAL_TIM_ConfigClockSource+0x1ae>
 80097f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80097f4:	f200 808e 	bhi.w	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 80097f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097fc:	d03e      	beq.n	800987c <HAL_TIM_ConfigClockSource+0x128>
 80097fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009802:	f200 8087 	bhi.w	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 8009806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800980a:	f000 8086 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x1c6>
 800980e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009812:	d87f      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 8009814:	2b70      	cmp	r3, #112	; 0x70
 8009816:	d01a      	beq.n	800984e <HAL_TIM_ConfigClockSource+0xfa>
 8009818:	2b70      	cmp	r3, #112	; 0x70
 800981a:	d87b      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 800981c:	2b60      	cmp	r3, #96	; 0x60
 800981e:	d050      	beq.n	80098c2 <HAL_TIM_ConfigClockSource+0x16e>
 8009820:	2b60      	cmp	r3, #96	; 0x60
 8009822:	d877      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 8009824:	2b50      	cmp	r3, #80	; 0x50
 8009826:	d03c      	beq.n	80098a2 <HAL_TIM_ConfigClockSource+0x14e>
 8009828:	2b50      	cmp	r3, #80	; 0x50
 800982a:	d873      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 800982c:	2b40      	cmp	r3, #64	; 0x40
 800982e:	d058      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x18e>
 8009830:	2b40      	cmp	r3, #64	; 0x40
 8009832:	d86f      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 8009834:	2b30      	cmp	r3, #48	; 0x30
 8009836:	d064      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0x1ae>
 8009838:	2b30      	cmp	r3, #48	; 0x30
 800983a:	d86b      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 800983c:	2b20      	cmp	r3, #32
 800983e:	d060      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0x1ae>
 8009840:	2b20      	cmp	r3, #32
 8009842:	d867      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
 8009844:	2b00      	cmp	r3, #0
 8009846:	d05c      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0x1ae>
 8009848:	2b10      	cmp	r3, #16
 800984a:	d05a      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0x1ae>
 800984c:	e062      	b.n	8009914 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	6899      	ldr	r1, [r3, #8]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f000 fc9d 	bl	800a19c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	609a      	str	r2, [r3, #8]
      break;
 800987a:	e04f      	b.n	800991c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	6899      	ldr	r1, [r3, #8]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	f000 fc86 	bl	800a19c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800989e:	609a      	str	r2, [r3, #8]
      break;
 80098a0:	e03c      	b.n	800991c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	6859      	ldr	r1, [r3, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f000 fbf8 	bl	800a0a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2150      	movs	r1, #80	; 0x50
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fc51 	bl	800a162 <TIM_ITRx_SetConfig>
      break;
 80098c0:	e02c      	b.n	800991c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	6859      	ldr	r1, [r3, #4]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f000 fc17 	bl	800a102 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2160      	movs	r1, #96	; 0x60
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 fc41 	bl	800a162 <TIM_ITRx_SetConfig>
      break;
 80098e0:	e01c      	b.n	800991c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6818      	ldr	r0, [r3, #0]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	6859      	ldr	r1, [r3, #4]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	461a      	mov	r2, r3
 80098f0:	f000 fbd8 	bl	800a0a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2140      	movs	r1, #64	; 0x40
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fc31 	bl	800a162 <TIM_ITRx_SetConfig>
      break;
 8009900:	e00c      	b.n	800991c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4619      	mov	r1, r3
 800990c:	4610      	mov	r0, r2
 800990e:	f000 fc28 	bl	800a162 <TIM_ITRx_SetConfig>
      break;
 8009912:	e003      	b.n	800991c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	73fb      	strb	r3, [r7, #15]
      break;
 8009918:	e000      	b.n	800991c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800991a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800992c:	7bfb      	ldrb	r3, [r7, #15]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	00100070 	.word	0x00100070
 800993c:	00100040 	.word	0x00100040
 8009940:	00100030 	.word	0x00100030
 8009944:	00100020 	.word	0x00100020

08009948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a3c      	ldr	r2, [pc, #240]	; (8009a9c <TIM_Base_SetConfig+0x104>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00f      	beq.n	80099d0 <TIM_Base_SetConfig+0x38>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b6:	d00b      	beq.n	80099d0 <TIM_Base_SetConfig+0x38>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a39      	ldr	r2, [pc, #228]	; (8009aa0 <TIM_Base_SetConfig+0x108>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d007      	beq.n	80099d0 <TIM_Base_SetConfig+0x38>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a38      	ldr	r2, [pc, #224]	; (8009aa4 <TIM_Base_SetConfig+0x10c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d003      	beq.n	80099d0 <TIM_Base_SetConfig+0x38>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a37      	ldr	r2, [pc, #220]	; (8009aa8 <TIM_Base_SetConfig+0x110>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d108      	bne.n	80099e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a2d      	ldr	r2, [pc, #180]	; (8009a9c <TIM_Base_SetConfig+0x104>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d01b      	beq.n	8009a22 <TIM_Base_SetConfig+0x8a>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f0:	d017      	beq.n	8009a22 <TIM_Base_SetConfig+0x8a>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a2a      	ldr	r2, [pc, #168]	; (8009aa0 <TIM_Base_SetConfig+0x108>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d013      	beq.n	8009a22 <TIM_Base_SetConfig+0x8a>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a29      	ldr	r2, [pc, #164]	; (8009aa4 <TIM_Base_SetConfig+0x10c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00f      	beq.n	8009a22 <TIM_Base_SetConfig+0x8a>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a28      	ldr	r2, [pc, #160]	; (8009aa8 <TIM_Base_SetConfig+0x110>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00b      	beq.n	8009a22 <TIM_Base_SetConfig+0x8a>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a27      	ldr	r2, [pc, #156]	; (8009aac <TIM_Base_SetConfig+0x114>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d007      	beq.n	8009a22 <TIM_Base_SetConfig+0x8a>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a26      	ldr	r2, [pc, #152]	; (8009ab0 <TIM_Base_SetConfig+0x118>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d003      	beq.n	8009a22 <TIM_Base_SetConfig+0x8a>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a25      	ldr	r2, [pc, #148]	; (8009ab4 <TIM_Base_SetConfig+0x11c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d108      	bne.n	8009a34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a10      	ldr	r2, [pc, #64]	; (8009a9c <TIM_Base_SetConfig+0x104>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d00f      	beq.n	8009a80 <TIM_Base_SetConfig+0xe8>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a11      	ldr	r2, [pc, #68]	; (8009aa8 <TIM_Base_SetConfig+0x110>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d00b      	beq.n	8009a80 <TIM_Base_SetConfig+0xe8>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a10      	ldr	r2, [pc, #64]	; (8009aac <TIM_Base_SetConfig+0x114>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d007      	beq.n	8009a80 <TIM_Base_SetConfig+0xe8>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a0f      	ldr	r2, [pc, #60]	; (8009ab0 <TIM_Base_SetConfig+0x118>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d003      	beq.n	8009a80 <TIM_Base_SetConfig+0xe8>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a0e      	ldr	r2, [pc, #56]	; (8009ab4 <TIM_Base_SetConfig+0x11c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d103      	bne.n	8009a88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	615a      	str	r2, [r3, #20]
}
 8009a8e:	bf00      	nop
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	40012c00 	.word	0x40012c00
 8009aa0:	40000400 	.word	0x40000400
 8009aa4:	40000800 	.word	0x40000800
 8009aa8:	40013400 	.word	0x40013400
 8009aac:	40014000 	.word	0x40014000
 8009ab0:	40014400 	.word	0x40014400
 8009ab4:	40014800 	.word	0x40014800

08009ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a1b      	ldr	r3, [r3, #32]
 8009ac6:	f023 0201 	bic.w	r2, r3, #1
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 0303 	bic.w	r3, r3, #3
 8009af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f023 0302 	bic.w	r3, r3, #2
 8009b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a2c      	ldr	r2, [pc, #176]	; (8009bc4 <TIM_OC1_SetConfig+0x10c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d00f      	beq.n	8009b38 <TIM_OC1_SetConfig+0x80>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a2b      	ldr	r2, [pc, #172]	; (8009bc8 <TIM_OC1_SetConfig+0x110>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d00b      	beq.n	8009b38 <TIM_OC1_SetConfig+0x80>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a2a      	ldr	r2, [pc, #168]	; (8009bcc <TIM_OC1_SetConfig+0x114>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d007      	beq.n	8009b38 <TIM_OC1_SetConfig+0x80>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a29      	ldr	r2, [pc, #164]	; (8009bd0 <TIM_OC1_SetConfig+0x118>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d003      	beq.n	8009b38 <TIM_OC1_SetConfig+0x80>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a28      	ldr	r2, [pc, #160]	; (8009bd4 <TIM_OC1_SetConfig+0x11c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d10c      	bne.n	8009b52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	f023 0308 	bic.w	r3, r3, #8
 8009b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f023 0304 	bic.w	r3, r3, #4
 8009b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a1b      	ldr	r2, [pc, #108]	; (8009bc4 <TIM_OC1_SetConfig+0x10c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d00f      	beq.n	8009b7a <TIM_OC1_SetConfig+0xc2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a1a      	ldr	r2, [pc, #104]	; (8009bc8 <TIM_OC1_SetConfig+0x110>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d00b      	beq.n	8009b7a <TIM_OC1_SetConfig+0xc2>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a19      	ldr	r2, [pc, #100]	; (8009bcc <TIM_OC1_SetConfig+0x114>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d007      	beq.n	8009b7a <TIM_OC1_SetConfig+0xc2>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a18      	ldr	r2, [pc, #96]	; (8009bd0 <TIM_OC1_SetConfig+0x118>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d003      	beq.n	8009b7a <TIM_OC1_SetConfig+0xc2>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a17      	ldr	r2, [pc, #92]	; (8009bd4 <TIM_OC1_SetConfig+0x11c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d111      	bne.n	8009b9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	621a      	str	r2, [r3, #32]
}
 8009bb8:	bf00      	nop
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	40012c00 	.word	0x40012c00
 8009bc8:	40013400 	.word	0x40013400
 8009bcc:	40014000 	.word	0x40014000
 8009bd0:	40014400 	.word	0x40014400
 8009bd4:	40014800 	.word	0x40014800

08009bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	f023 0210 	bic.w	r2, r3, #16
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	021b      	lsls	r3, r3, #8
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f023 0320 	bic.w	r3, r3, #32
 8009c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a28      	ldr	r2, [pc, #160]	; (8009cd8 <TIM_OC2_SetConfig+0x100>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d003      	beq.n	8009c44 <TIM_OC2_SetConfig+0x6c>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a27      	ldr	r2, [pc, #156]	; (8009cdc <TIM_OC2_SetConfig+0x104>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d10d      	bne.n	8009c60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	011b      	lsls	r3, r3, #4
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a1d      	ldr	r2, [pc, #116]	; (8009cd8 <TIM_OC2_SetConfig+0x100>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d00f      	beq.n	8009c88 <TIM_OC2_SetConfig+0xb0>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a1c      	ldr	r2, [pc, #112]	; (8009cdc <TIM_OC2_SetConfig+0x104>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d00b      	beq.n	8009c88 <TIM_OC2_SetConfig+0xb0>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a1b      	ldr	r2, [pc, #108]	; (8009ce0 <TIM_OC2_SetConfig+0x108>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d007      	beq.n	8009c88 <TIM_OC2_SetConfig+0xb0>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ce4 <TIM_OC2_SetConfig+0x10c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d003      	beq.n	8009c88 <TIM_OC2_SetConfig+0xb0>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a19      	ldr	r2, [pc, #100]	; (8009ce8 <TIM_OC2_SetConfig+0x110>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d113      	bne.n	8009cb0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	621a      	str	r2, [r3, #32]
}
 8009cca:	bf00      	nop
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40012c00 	.word	0x40012c00
 8009cdc:	40013400 	.word	0x40013400
 8009ce0:	40014000 	.word	0x40014000
 8009ce4:	40014400 	.word	0x40014400
 8009ce8:	40014800 	.word	0x40014800

08009cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0303 	bic.w	r3, r3, #3
 8009d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a27      	ldr	r2, [pc, #156]	; (8009de8 <TIM_OC3_SetConfig+0xfc>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d003      	beq.n	8009d56 <TIM_OC3_SetConfig+0x6a>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a26      	ldr	r2, [pc, #152]	; (8009dec <TIM_OC3_SetConfig+0x100>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d10d      	bne.n	8009d72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a1c      	ldr	r2, [pc, #112]	; (8009de8 <TIM_OC3_SetConfig+0xfc>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00f      	beq.n	8009d9a <TIM_OC3_SetConfig+0xae>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a1b      	ldr	r2, [pc, #108]	; (8009dec <TIM_OC3_SetConfig+0x100>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d00b      	beq.n	8009d9a <TIM_OC3_SetConfig+0xae>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a1a      	ldr	r2, [pc, #104]	; (8009df0 <TIM_OC3_SetConfig+0x104>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d007      	beq.n	8009d9a <TIM_OC3_SetConfig+0xae>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a19      	ldr	r2, [pc, #100]	; (8009df4 <TIM_OC3_SetConfig+0x108>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d003      	beq.n	8009d9a <TIM_OC3_SetConfig+0xae>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a18      	ldr	r2, [pc, #96]	; (8009df8 <TIM_OC3_SetConfig+0x10c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d113      	bne.n	8009dc2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	621a      	str	r2, [r3, #32]
}
 8009ddc:	bf00      	nop
 8009dde:	371c      	adds	r7, #28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	40012c00 	.word	0x40012c00
 8009dec:	40013400 	.word	0x40013400
 8009df0:	40014000 	.word	0x40014000
 8009df4:	40014400 	.word	0x40014400
 8009df8:	40014800 	.word	0x40014800

08009dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	021b      	lsls	r3, r3, #8
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	031b      	lsls	r3, r3, #12
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a28      	ldr	r2, [pc, #160]	; (8009efc <TIM_OC4_SetConfig+0x100>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d003      	beq.n	8009e68 <TIM_OC4_SetConfig+0x6c>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a27      	ldr	r2, [pc, #156]	; (8009f00 <TIM_OC4_SetConfig+0x104>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d10d      	bne.n	8009e84 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	031b      	lsls	r3, r3, #12
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a1d      	ldr	r2, [pc, #116]	; (8009efc <TIM_OC4_SetConfig+0x100>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d00f      	beq.n	8009eac <TIM_OC4_SetConfig+0xb0>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a1c      	ldr	r2, [pc, #112]	; (8009f00 <TIM_OC4_SetConfig+0x104>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d00b      	beq.n	8009eac <TIM_OC4_SetConfig+0xb0>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a1b      	ldr	r2, [pc, #108]	; (8009f04 <TIM_OC4_SetConfig+0x108>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d007      	beq.n	8009eac <TIM_OC4_SetConfig+0xb0>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a1a      	ldr	r2, [pc, #104]	; (8009f08 <TIM_OC4_SetConfig+0x10c>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d003      	beq.n	8009eac <TIM_OC4_SetConfig+0xb0>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a19      	ldr	r2, [pc, #100]	; (8009f0c <TIM_OC4_SetConfig+0x110>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d113      	bne.n	8009ed4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eb2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009eba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	019b      	lsls	r3, r3, #6
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	019b      	lsls	r3, r3, #6
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	621a      	str	r2, [r3, #32]
}
 8009eee:	bf00      	nop
 8009ef0:	371c      	adds	r7, #28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	40012c00 	.word	0x40012c00
 8009f00:	40013400 	.word	0x40013400
 8009f04:	40014000 	.word	0x40014000
 8009f08:	40014400 	.word	0x40014400
 8009f0c:	40014800 	.word	0x40014800

08009f10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009f54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	041b      	lsls	r3, r3, #16
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a17      	ldr	r2, [pc, #92]	; (8009fc4 <TIM_OC5_SetConfig+0xb4>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d00f      	beq.n	8009f8a <TIM_OC5_SetConfig+0x7a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a16      	ldr	r2, [pc, #88]	; (8009fc8 <TIM_OC5_SetConfig+0xb8>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d00b      	beq.n	8009f8a <TIM_OC5_SetConfig+0x7a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a15      	ldr	r2, [pc, #84]	; (8009fcc <TIM_OC5_SetConfig+0xbc>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d007      	beq.n	8009f8a <TIM_OC5_SetConfig+0x7a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a14      	ldr	r2, [pc, #80]	; (8009fd0 <TIM_OC5_SetConfig+0xc0>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d003      	beq.n	8009f8a <TIM_OC5_SetConfig+0x7a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a13      	ldr	r2, [pc, #76]	; (8009fd4 <TIM_OC5_SetConfig+0xc4>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d109      	bne.n	8009f9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	021b      	lsls	r3, r3, #8
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	621a      	str	r2, [r3, #32]
}
 8009fb8:	bf00      	nop
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	40012c00 	.word	0x40012c00
 8009fc8:	40013400 	.word	0x40013400
 8009fcc:	40014000 	.word	0x40014000
 8009fd0:	40014400 	.word	0x40014400
 8009fd4:	40014800 	.word	0x40014800

08009fd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	4313      	orrs	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a01e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	051b      	lsls	r3, r3, #20
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a18      	ldr	r2, [pc, #96]	; (800a090 <TIM_OC6_SetConfig+0xb8>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d00f      	beq.n	800a054 <TIM_OC6_SetConfig+0x7c>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a17      	ldr	r2, [pc, #92]	; (800a094 <TIM_OC6_SetConfig+0xbc>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d00b      	beq.n	800a054 <TIM_OC6_SetConfig+0x7c>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a16      	ldr	r2, [pc, #88]	; (800a098 <TIM_OC6_SetConfig+0xc0>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d007      	beq.n	800a054 <TIM_OC6_SetConfig+0x7c>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a15      	ldr	r2, [pc, #84]	; (800a09c <TIM_OC6_SetConfig+0xc4>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d003      	beq.n	800a054 <TIM_OC6_SetConfig+0x7c>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a14      	ldr	r2, [pc, #80]	; (800a0a0 <TIM_OC6_SetConfig+0xc8>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d109      	bne.n	800a068 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a05a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	029b      	lsls	r3, r3, #10
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	4313      	orrs	r3, r2
 800a066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	621a      	str	r2, [r3, #32]
}
 800a082:	bf00      	nop
 800a084:	371c      	adds	r7, #28
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	40012c00 	.word	0x40012c00
 800a094:	40013400 	.word	0x40013400
 800a098:	40014000 	.word	0x40014000
 800a09c:	40014400 	.word	0x40014400
 800a0a0:	40014800 	.word	0x40014800

0800a0a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	f023 0201 	bic.w	r2, r3, #1
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f023 030a 	bic.w	r3, r3, #10
 800a0e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	621a      	str	r2, [r3, #32]
}
 800a0f6:	bf00      	nop
 800a0f8:	371c      	adds	r7, #28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a102:	b480      	push	{r7}
 800a104:	b087      	sub	sp, #28
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	f023 0210 	bic.w	r2, r3, #16
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a12c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	031b      	lsls	r3, r3, #12
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	4313      	orrs	r3, r2
 800a136:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a13e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	4313      	orrs	r3, r2
 800a148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a162:	b480      	push	{r7}
 800a164:	b085      	sub	sp, #20
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4313      	orrs	r3, r2
 800a184:	f043 0307 	orr.w	r3, r3, #7
 800a188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	609a      	str	r2, [r3, #8]
}
 800a190:	bf00      	nop
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	021a      	lsls	r2, r3, #8
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	609a      	str	r2, [r3, #8]
}
 800a1d0:	bf00      	nop
 800a1d2:	371c      	adds	r7, #28
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b087      	sub	sp, #28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f003 031f 	and.w	r3, r3, #31
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a1a      	ldr	r2, [r3, #32]
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	43db      	mvns	r3, r3
 800a1fe:	401a      	ands	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a1a      	ldr	r2, [r3, #32]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f003 031f 	and.w	r3, r3, #31
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	fa01 f303 	lsl.w	r3, r1, r3
 800a214:	431a      	orrs	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	621a      	str	r2, [r3, #32]
}
 800a21a:	bf00      	nop
 800a21c:	371c      	adds	r7, #28
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
	...

0800a228 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d109      	bne.n	800a24c <HAL_TIMEx_PWMN_Start+0x24>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b01      	cmp	r3, #1
 800a242:	bf14      	ite	ne
 800a244:	2301      	movne	r3, #1
 800a246:	2300      	moveq	r3, #0
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	e022      	b.n	800a292 <HAL_TIMEx_PWMN_Start+0x6a>
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b04      	cmp	r3, #4
 800a250:	d109      	bne.n	800a266 <HAL_TIMEx_PWMN_Start+0x3e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	bf14      	ite	ne
 800a25e:	2301      	movne	r3, #1
 800a260:	2300      	moveq	r3, #0
 800a262:	b2db      	uxtb	r3, r3
 800a264:	e015      	b.n	800a292 <HAL_TIMEx_PWMN_Start+0x6a>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d109      	bne.n	800a280 <HAL_TIMEx_PWMN_Start+0x58>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b01      	cmp	r3, #1
 800a276:	bf14      	ite	ne
 800a278:	2301      	movne	r3, #1
 800a27a:	2300      	moveq	r3, #0
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	e008      	b.n	800a292 <HAL_TIMEx_PWMN_Start+0x6a>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b01      	cmp	r3, #1
 800a28a:	bf14      	ite	ne
 800a28c:	2301      	movne	r3, #1
 800a28e:	2300      	moveq	r3, #0
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e069      	b.n	800a36e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d104      	bne.n	800a2aa <HAL_TIMEx_PWMN_Start+0x82>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2a8:	e013      	b.n	800a2d2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d104      	bne.n	800a2ba <HAL_TIMEx_PWMN_Start+0x92>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2b8:	e00b      	b.n	800a2d2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b08      	cmp	r3, #8
 800a2be:	d104      	bne.n	800a2ca <HAL_TIMEx_PWMN_Start+0xa2>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2c8:	e003      	b.n	800a2d2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2204      	movs	r2, #4
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 fa1e 	bl	800a71c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a20      	ldr	r2, [pc, #128]	; (800a378 <HAL_TIMEx_PWMN_Start+0x150>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d018      	beq.n	800a32c <HAL_TIMEx_PWMN_Start+0x104>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a302:	d013      	beq.n	800a32c <HAL_TIMEx_PWMN_Start+0x104>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a1c      	ldr	r2, [pc, #112]	; (800a37c <HAL_TIMEx_PWMN_Start+0x154>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d00e      	beq.n	800a32c <HAL_TIMEx_PWMN_Start+0x104>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a1b      	ldr	r2, [pc, #108]	; (800a380 <HAL_TIMEx_PWMN_Start+0x158>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d009      	beq.n	800a32c <HAL_TIMEx_PWMN_Start+0x104>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a19      	ldr	r2, [pc, #100]	; (800a384 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d004      	beq.n	800a32c <HAL_TIMEx_PWMN_Start+0x104>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a18      	ldr	r2, [pc, #96]	; (800a388 <HAL_TIMEx_PWMN_Start+0x160>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d115      	bne.n	800a358 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689a      	ldr	r2, [r3, #8]
 800a332:	4b16      	ldr	r3, [pc, #88]	; (800a38c <HAL_TIMEx_PWMN_Start+0x164>)
 800a334:	4013      	ands	r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b06      	cmp	r3, #6
 800a33c:	d015      	beq.n	800a36a <HAL_TIMEx_PWMN_Start+0x142>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a344:	d011      	beq.n	800a36a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f042 0201 	orr.w	r2, r2, #1
 800a354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a356:	e008      	b.n	800a36a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0201 	orr.w	r2, r2, #1
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	e000      	b.n	800a36c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a36a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	40012c00 	.word	0x40012c00
 800a37c:	40000400 	.word	0x40000400
 800a380:	40000800 	.word	0x40000800
 800a384:	40013400 	.word	0x40013400
 800a388:	40014000 	.word	0x40014000
 800a38c:	00010007 	.word	0x00010007

0800a390 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 f9ba 	bl	800a71c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	6a1a      	ldr	r2, [r3, #32]
 800a3ae:	f241 1311 	movw	r3, #4369	; 0x1111
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10f      	bne.n	800a3d8 <HAL_TIMEx_PWMN_Stop+0x48>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6a1a      	ldr	r2, [r3, #32]
 800a3be:	f244 4344 	movw	r3, #17476	; 0x4444
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d107      	bne.n	800a3d8 <HAL_TIMEx_PWMN_Stop+0x48>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6a1a      	ldr	r2, [r3, #32]
 800a3de:	f241 1311 	movw	r3, #4369	; 0x1111
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10f      	bne.n	800a408 <HAL_TIMEx_PWMN_Stop+0x78>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6a1a      	ldr	r2, [r3, #32]
 800a3ee:	f244 4344 	movw	r3, #17476	; 0x4444
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d107      	bne.n	800a408 <HAL_TIMEx_PWMN_Stop+0x78>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 0201 	bic.w	r2, r2, #1
 800a406:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d104      	bne.n	800a418 <HAL_TIMEx_PWMN_Stop+0x88>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a416:	e013      	b.n	800a440 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	2b04      	cmp	r3, #4
 800a41c:	d104      	bne.n	800a428 <HAL_TIMEx_PWMN_Stop+0x98>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a426:	e00b      	b.n	800a440 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	2b08      	cmp	r3, #8
 800a42c:	d104      	bne.n	800a438 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a436:	e003      	b.n	800a440 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d101      	bne.n	800a464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a460:	2302      	movs	r3, #2
 800a462:	e065      	b.n	800a530 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2202      	movs	r2, #2
 800a470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a2c      	ldr	r2, [pc, #176]	; (800a53c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d004      	beq.n	800a498 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a2b      	ldr	r2, [pc, #172]	; (800a540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d108      	bne.n	800a4aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a49e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a4b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	; (800a53c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d018      	beq.n	800a504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4da:	d013      	beq.n	800a504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a18      	ldr	r2, [pc, #96]	; (800a544 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d00e      	beq.n	800a504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a17      	ldr	r2, [pc, #92]	; (800a548 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d009      	beq.n	800a504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a12      	ldr	r2, [pc, #72]	; (800a540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d004      	beq.n	800a504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a13      	ldr	r2, [pc, #76]	; (800a54c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d10c      	bne.n	800a51e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a50a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	4313      	orrs	r3, r2
 800a514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	40012c00 	.word	0x40012c00
 800a540:	40013400 	.word	0x40013400
 800a544:	40000400 	.word	0x40000400
 800a548:	40000800 	.word	0x40000800
 800a54c:	40014000 	.word	0x40014000

0800a550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a564:	2b01      	cmp	r3, #1
 800a566:	d101      	bne.n	800a56c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a568:	2302      	movs	r3, #2
 800a56a:	e087      	b.n	800a67c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	695b      	ldr	r3, [r3, #20]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	041b      	lsls	r3, r3, #16
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a27      	ldr	r2, [pc, #156]	; (800a688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d004      	beq.n	800a5fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a25      	ldr	r2, [pc, #148]	; (800a68c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d106      	bne.n	800a608 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	4313      	orrs	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a1e      	ldr	r2, [pc, #120]	; (800a688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d004      	beq.n	800a61c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a1d      	ldr	r2, [pc, #116]	; (800a68c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d126      	bne.n	800a66a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a626:	051b      	lsls	r3, r3, #20
 800a628:	4313      	orrs	r3, r2
 800a62a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	4313      	orrs	r3, r2
 800a638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a644:	4313      	orrs	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a0e      	ldr	r2, [pc, #56]	; (800a688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d004      	beq.n	800a65c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a0d      	ldr	r2, [pc, #52]	; (800a68c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d106      	bne.n	800a66a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	40012c00 	.word	0x40012c00
 800a68c:	40013400 	.word	0x40013400

0800a690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f003 031f 	and.w	r3, r3, #31
 800a72e:	2204      	movs	r2, #4
 800a730:	fa02 f303 	lsl.w	r3, r2, r3
 800a734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6a1a      	ldr	r2, [r3, #32]
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	43db      	mvns	r3, r3
 800a73e:	401a      	ands	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6a1a      	ldr	r2, [r3, #32]
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f003 031f 	and.w	r3, r3, #31
 800a74e:	6879      	ldr	r1, [r7, #4]
 800a750:	fa01 f303 	lsl.w	r3, r1, r3
 800a754:	431a      	orrs	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	621a      	str	r2, [r3, #32]
}
 800a75a:	bf00      	nop
 800a75c:	371c      	adds	r7, #28
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b082      	sub	sp, #8
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e042      	b.n	800a7fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d106      	bne.n	800a790 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7f9 f814 	bl	80037b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2224      	movs	r2, #36	; 0x24
 800a794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0201 	bic.w	r2, r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fc01 	bl	800afb0 <UART_SetConfig>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d101      	bne.n	800a7b8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e022      	b.n	800a7fe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fec1 	bl	800b548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	689a      	ldr	r2, [r3, #8]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 0201 	orr.w	r2, r2, #1
 800a7f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 ff48 	bl	800b68c <UART_CheckIdleState>
 800a7fc:	4603      	mov	r3, r0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08a      	sub	sp, #40	; 0x28
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	4613      	mov	r3, r2
 800a814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a81c:	2b20      	cmp	r3, #32
 800a81e:	d17a      	bne.n	800a916 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <HAL_UART_Transmit_DMA+0x24>
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e073      	b.n	800a918 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a836:	2b01      	cmp	r3, #1
 800a838:	d101      	bne.n	800a83e <HAL_UART_Transmit_DMA+0x36>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e06c      	b.n	800a918 <HAL_UART_Transmit_DMA+0x110>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2221      	movs	r2, #33	; 0x21
 800a868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a870:	2b00      	cmp	r3, #0
 800a872:	d02c      	beq.n	800a8ce <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a878:	4a29      	ldr	r2, [pc, #164]	; (800a920 <HAL_UART_Transmit_DMA+0x118>)
 800a87a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a880:	4a28      	ldr	r2, [pc, #160]	; (800a924 <HAL_UART_Transmit_DMA+0x11c>)
 800a882:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a888:	4a27      	ldr	r2, [pc, #156]	; (800a928 <HAL_UART_Transmit_DMA+0x120>)
 800a88a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a890:	2200      	movs	r2, #0
 800a892:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a89c:	4619      	mov	r1, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3328      	adds	r3, #40	; 0x28
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	88fb      	ldrh	r3, [r7, #6]
 800a8a8:	f7fb f8e4 	bl	8005a74 <HAL_DMA_Start_IT>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00d      	beq.n	800a8ce <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2210      	movs	r2, #16
 800a8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2220      	movs	r2, #32
 800a8c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e024      	b.n	800a918 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2240      	movs	r2, #64	; 0x40
 800a8d4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	e853 3f00 	ldrex	r3, [r3]
 800a8ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3308      	adds	r3, #8
 800a8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8fe:	623a      	str	r2, [r7, #32]
 800a900:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	69f9      	ldr	r1, [r7, #28]
 800a904:	6a3a      	ldr	r2, [r7, #32]
 800a906:	e841 2300 	strex	r3, r2, [r1]
 800a90a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1e5      	bne.n	800a8de <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	e000      	b.n	800a918 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a916:	2302      	movs	r3, #2
  }
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3728      	adds	r7, #40	; 0x28
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	0800ba01 	.word	0x0800ba01
 800a924:	0800ba9b 	.word	0x0800ba9b
 800a928:	0800bab7 	.word	0x0800bab7

0800a92c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b0ba      	sub	sp, #232	; 0xe8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a952:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a956:	f640 030f 	movw	r3, #2063	; 0x80f
 800a95a:	4013      	ands	r3, r2
 800a95c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a964:	2b00      	cmp	r3, #0
 800a966:	d11b      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96c:	f003 0320 	and.w	r3, r3, #32
 800a970:	2b00      	cmp	r3, #0
 800a972:	d015      	beq.n	800a9a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a978:	f003 0320 	and.w	r3, r3, #32
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d105      	bne.n	800a98c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d009      	beq.n	800a9a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 82d6 	beq.w	800af42 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
      }
      return;
 800a99e:	e2d0      	b.n	800af42 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a9a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 811f 	beq.w	800abe8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a9aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a9ae:	4b8b      	ldr	r3, [pc, #556]	; (800abdc <HAL_UART_IRQHandler+0x2b0>)
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a9b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a9ba:	4b89      	ldr	r3, [pc, #548]	; (800abe0 <HAL_UART_IRQHandler+0x2b4>)
 800a9bc:	4013      	ands	r3, r2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 8112 	beq.w	800abe8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d011      	beq.n	800a9f4 <HAL_UART_IRQHandler+0xc8>
 800a9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00b      	beq.n	800a9f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ea:	f043 0201 	orr.w	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9f8:	f003 0302 	and.w	r3, r3, #2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d011      	beq.n	800aa24 <HAL_UART_IRQHandler+0xf8>
 800aa00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa04:	f003 0301 	and.w	r3, r3, #1
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00b      	beq.n	800aa24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2202      	movs	r2, #2
 800aa12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa1a:	f043 0204 	orr.w	r2, r3, #4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d011      	beq.n	800aa54 <HAL_UART_IRQHandler+0x128>
 800aa30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa34:	f003 0301 	and.w	r3, r3, #1
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00b      	beq.n	800aa54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2204      	movs	r2, #4
 800aa42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa4a:	f043 0202 	orr.w	r2, r3, #2
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa58:	f003 0308 	and.w	r3, r3, #8
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d017      	beq.n	800aa90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa64:	f003 0320 	and.w	r3, r3, #32
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d105      	bne.n	800aa78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aa6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aa70:	4b5a      	ldr	r3, [pc, #360]	; (800abdc <HAL_UART_IRQHandler+0x2b0>)
 800aa72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00b      	beq.n	800aa90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2208      	movs	r2, #8
 800aa7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa86:	f043 0208 	orr.w	r2, r3, #8
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d012      	beq.n	800aac2 <HAL_UART_IRQHandler+0x196>
 800aa9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00c      	beq.n	800aac2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aab8:	f043 0220 	orr.w	r2, r3, #32
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 823c 	beq.w	800af46 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aad2:	f003 0320 	and.w	r3, r3, #32
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d013      	beq.n	800ab02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aade:	f003 0320 	and.w	r3, r3, #32
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d105      	bne.n	800aaf2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d007      	beq.n	800ab02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab16:	2b40      	cmp	r3, #64	; 0x40
 800ab18:	d005      	beq.n	800ab26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d04f      	beq.n	800abc6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 ff04 	bl	800b934 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab36:	2b40      	cmp	r3, #64	; 0x40
 800ab38:	d141      	bne.n	800abbe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3308      	adds	r3, #8
 800ab40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3308      	adds	r3, #8
 800ab62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1d9      	bne.n	800ab3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d013      	beq.n	800abb6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab92:	4a14      	ldr	r2, [pc, #80]	; (800abe4 <HAL_UART_IRQHandler+0x2b8>)
 800ab94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fb f83e 	bl	8005c1c <HAL_DMA_Abort_IT>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d017      	beq.n	800abd6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800abb0:	4610      	mov	r0, r2
 800abb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb4:	e00f      	b.n	800abd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f9e4 	bl	800af84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abbc:	e00b      	b.n	800abd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f9e0 	bl	800af84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abc4:	e007      	b.n	800abd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f9dc 	bl	800af84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800abd4:	e1b7      	b.n	800af46 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abd6:	bf00      	nop
    return;
 800abd8:	e1b5      	b.n	800af46 <HAL_UART_IRQHandler+0x61a>
 800abda:	bf00      	nop
 800abdc:	10000001 	.word	0x10000001
 800abe0:	04000120 	.word	0x04000120
 800abe4:	0800bb37 	.word	0x0800bb37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abec:	2b01      	cmp	r3, #1
 800abee:	f040 814a 	bne.w	800ae86 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800abf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abf6:	f003 0310 	and.w	r3, r3, #16
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 8143 	beq.w	800ae86 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac04:	f003 0310 	and.w	r3, r3, #16
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 813c 	beq.w	800ae86 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2210      	movs	r2, #16
 800ac14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac20:	2b40      	cmp	r3, #64	; 0x40
 800ac22:	f040 80b5 	bne.w	800ad90 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f000 8187 	beq.w	800af4a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac46:	429a      	cmp	r2, r3
 800ac48:	f080 817f 	bcs.w	800af4a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f040 8086 	bne.w	800ad74 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac74:	e853 3f00 	ldrex	r3, [r3]
 800ac78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aca2:	e841 2300 	strex	r3, r2, [r1]
 800aca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800acaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1da      	bne.n	800ac68 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3308      	adds	r3, #8
 800acb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acbc:	e853 3f00 	ldrex	r3, [r3]
 800acc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800acc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acc4:	f023 0301 	bic.w	r3, r3, #1
 800acc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	3308      	adds	r3, #8
 800acd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800acd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800acda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800acde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ace2:	e841 2300 	strex	r3, r2, [r1]
 800ace6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ace8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1e1      	bne.n	800acb2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3308      	adds	r3, #8
 800acf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acf8:	e853 3f00 	ldrex	r3, [r3]
 800acfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800acfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3308      	adds	r3, #8
 800ad0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad12:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e3      	bne.n	800acee <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad44:	f023 0310 	bic.w	r3, r3, #16
 800ad48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	461a      	mov	r2, r3
 800ad52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad56:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e4      	bne.n	800ad34 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fa fefb 	bl	8005b6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f905 	bl	800af98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad8e:	e0dc      	b.n	800af4a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adaa:	b29b      	uxth	r3, r3
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 80ce 	beq.w	800af4e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800adb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 80c9 	beq.w	800af4e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc4:	e853 3f00 	ldrex	r3, [r3]
 800adc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800adca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800add0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	461a      	mov	r2, r3
 800adda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adde:	647b      	str	r3, [r7, #68]	; 0x44
 800ade0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ade4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ade6:	e841 2300 	strex	r3, r2, [r1]
 800adea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1e4      	bne.n	800adbc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3308      	adds	r3, #8
 800adf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	623b      	str	r3, [r7, #32]
   return(result);
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae08:	f023 0301 	bic.w	r3, r3, #1
 800ae0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3308      	adds	r3, #8
 800ae16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae1a:	633a      	str	r2, [r7, #48]	; 0x30
 800ae1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae22:	e841 2300 	strex	r3, r2, [r1]
 800ae26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1e1      	bne.n	800adf2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2220      	movs	r2, #32
 800ae32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	e853 3f00 	ldrex	r3, [r3]
 800ae4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f023 0310 	bic.w	r3, r3, #16
 800ae56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae64:	61fb      	str	r3, [r7, #28]
 800ae66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	69b9      	ldr	r1, [r7, #24]
 800ae6a:	69fa      	ldr	r2, [r7, #28]
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	617b      	str	r3, [r7, #20]
   return(result);
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e4      	bne.n	800ae42 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f88a 	bl	800af98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae84:	e063      	b.n	800af4e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00e      	beq.n	800aeb0 <HAL_UART_IRQHandler+0x584>
 800ae92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d008      	beq.n	800aeb0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aea6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fe85 	bl	800bbb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aeae:	e051      	b.n	800af54 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aeb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d014      	beq.n	800aee6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d105      	bne.n	800aed4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d008      	beq.n	800aee6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d03a      	beq.n	800af52 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	4798      	blx	r3
    }
    return;
 800aee4:	e035      	b.n	800af52 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d009      	beq.n	800af06 <HAL_UART_IRQHandler+0x5da>
 800aef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d003      	beq.n	800af06 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fe2f 	bl	800bb62 <UART_EndTransmit_IT>
    return;
 800af04:	e026      	b.n	800af54 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800af06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d009      	beq.n	800af26 <HAL_UART_IRQHandler+0x5fa>
 800af12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fe5e 	bl	800bbe0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af24:	e016      	b.n	800af54 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800af26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d010      	beq.n	800af54 <HAL_UART_IRQHandler+0x628>
 800af32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af36:	2b00      	cmp	r3, #0
 800af38:	da0c      	bge.n	800af54 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fe46 	bl	800bbcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af40:	e008      	b.n	800af54 <HAL_UART_IRQHandler+0x628>
      return;
 800af42:	bf00      	nop
 800af44:	e006      	b.n	800af54 <HAL_UART_IRQHandler+0x628>
    return;
 800af46:	bf00      	nop
 800af48:	e004      	b.n	800af54 <HAL_UART_IRQHandler+0x628>
      return;
 800af4a:	bf00      	nop
 800af4c:	e002      	b.n	800af54 <HAL_UART_IRQHandler+0x628>
      return;
 800af4e:	bf00      	nop
 800af50:	e000      	b.n	800af54 <HAL_UART_IRQHandler+0x628>
    return;
 800af52:	bf00      	nop
  }
}
 800af54:	37e8      	adds	r7, #232	; 0xe8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop

0800af5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afb4:	b08c      	sub	sp, #48	; 0x30
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	689a      	ldr	r2, [r3, #8]
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	431a      	orrs	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	431a      	orrs	r2, r3
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	69db      	ldr	r3, [r3, #28]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	4bab      	ldr	r3, [pc, #684]	; (800b28c <UART_SetConfig+0x2dc>)
 800afe0:	4013      	ands	r3, r2
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	6812      	ldr	r2, [r2, #0]
 800afe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afe8:	430b      	orrs	r3, r1
 800afea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	68da      	ldr	r2, [r3, #12]
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	430a      	orrs	r2, r1
 800b000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4aa0      	ldr	r2, [pc, #640]	; (800b290 <UART_SetConfig+0x2e0>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d004      	beq.n	800b01c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b018:	4313      	orrs	r3, r2
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b026:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	6812      	ldr	r2, [r2, #0]
 800b02e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b030:	430b      	orrs	r3, r1
 800b032:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03a:	f023 010f 	bic.w	r1, r3, #15
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a91      	ldr	r2, [pc, #580]	; (800b294 <UART_SetConfig+0x2e4>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d125      	bne.n	800b0a0 <UART_SetConfig+0xf0>
 800b054:	4b90      	ldr	r3, [pc, #576]	; (800b298 <UART_SetConfig+0x2e8>)
 800b056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05a:	f003 0303 	and.w	r3, r3, #3
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d81a      	bhi.n	800b098 <UART_SetConfig+0xe8>
 800b062:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <UART_SetConfig+0xb8>)
 800b064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b068:	0800b079 	.word	0x0800b079
 800b06c:	0800b089 	.word	0x0800b089
 800b070:	0800b081 	.word	0x0800b081
 800b074:	0800b091 	.word	0x0800b091
 800b078:	2301      	movs	r3, #1
 800b07a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b07e:	e0d6      	b.n	800b22e <UART_SetConfig+0x27e>
 800b080:	2302      	movs	r3, #2
 800b082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b086:	e0d2      	b.n	800b22e <UART_SetConfig+0x27e>
 800b088:	2304      	movs	r3, #4
 800b08a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b08e:	e0ce      	b.n	800b22e <UART_SetConfig+0x27e>
 800b090:	2308      	movs	r3, #8
 800b092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b096:	e0ca      	b.n	800b22e <UART_SetConfig+0x27e>
 800b098:	2310      	movs	r3, #16
 800b09a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b09e:	e0c6      	b.n	800b22e <UART_SetConfig+0x27e>
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a7d      	ldr	r2, [pc, #500]	; (800b29c <UART_SetConfig+0x2ec>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d138      	bne.n	800b11c <UART_SetConfig+0x16c>
 800b0aa:	4b7b      	ldr	r3, [pc, #492]	; (800b298 <UART_SetConfig+0x2e8>)
 800b0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b0:	f003 030c 	and.w	r3, r3, #12
 800b0b4:	2b0c      	cmp	r3, #12
 800b0b6:	d82d      	bhi.n	800b114 <UART_SetConfig+0x164>
 800b0b8:	a201      	add	r2, pc, #4	; (adr r2, 800b0c0 <UART_SetConfig+0x110>)
 800b0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0be:	bf00      	nop
 800b0c0:	0800b0f5 	.word	0x0800b0f5
 800b0c4:	0800b115 	.word	0x0800b115
 800b0c8:	0800b115 	.word	0x0800b115
 800b0cc:	0800b115 	.word	0x0800b115
 800b0d0:	0800b105 	.word	0x0800b105
 800b0d4:	0800b115 	.word	0x0800b115
 800b0d8:	0800b115 	.word	0x0800b115
 800b0dc:	0800b115 	.word	0x0800b115
 800b0e0:	0800b0fd 	.word	0x0800b0fd
 800b0e4:	0800b115 	.word	0x0800b115
 800b0e8:	0800b115 	.word	0x0800b115
 800b0ec:	0800b115 	.word	0x0800b115
 800b0f0:	0800b10d 	.word	0x0800b10d
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0fa:	e098      	b.n	800b22e <UART_SetConfig+0x27e>
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b102:	e094      	b.n	800b22e <UART_SetConfig+0x27e>
 800b104:	2304      	movs	r3, #4
 800b106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b10a:	e090      	b.n	800b22e <UART_SetConfig+0x27e>
 800b10c:	2308      	movs	r3, #8
 800b10e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b112:	e08c      	b.n	800b22e <UART_SetConfig+0x27e>
 800b114:	2310      	movs	r3, #16
 800b116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b11a:	e088      	b.n	800b22e <UART_SetConfig+0x27e>
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a5f      	ldr	r2, [pc, #380]	; (800b2a0 <UART_SetConfig+0x2f0>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d125      	bne.n	800b172 <UART_SetConfig+0x1c2>
 800b126:	4b5c      	ldr	r3, [pc, #368]	; (800b298 <UART_SetConfig+0x2e8>)
 800b128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b12c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b130:	2b30      	cmp	r3, #48	; 0x30
 800b132:	d016      	beq.n	800b162 <UART_SetConfig+0x1b2>
 800b134:	2b30      	cmp	r3, #48	; 0x30
 800b136:	d818      	bhi.n	800b16a <UART_SetConfig+0x1ba>
 800b138:	2b20      	cmp	r3, #32
 800b13a:	d00a      	beq.n	800b152 <UART_SetConfig+0x1a2>
 800b13c:	2b20      	cmp	r3, #32
 800b13e:	d814      	bhi.n	800b16a <UART_SetConfig+0x1ba>
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <UART_SetConfig+0x19a>
 800b144:	2b10      	cmp	r3, #16
 800b146:	d008      	beq.n	800b15a <UART_SetConfig+0x1aa>
 800b148:	e00f      	b.n	800b16a <UART_SetConfig+0x1ba>
 800b14a:	2300      	movs	r3, #0
 800b14c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b150:	e06d      	b.n	800b22e <UART_SetConfig+0x27e>
 800b152:	2302      	movs	r3, #2
 800b154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b158:	e069      	b.n	800b22e <UART_SetConfig+0x27e>
 800b15a:	2304      	movs	r3, #4
 800b15c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b160:	e065      	b.n	800b22e <UART_SetConfig+0x27e>
 800b162:	2308      	movs	r3, #8
 800b164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b168:	e061      	b.n	800b22e <UART_SetConfig+0x27e>
 800b16a:	2310      	movs	r3, #16
 800b16c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b170:	e05d      	b.n	800b22e <UART_SetConfig+0x27e>
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a4b      	ldr	r2, [pc, #300]	; (800b2a4 <UART_SetConfig+0x2f4>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d125      	bne.n	800b1c8 <UART_SetConfig+0x218>
 800b17c:	4b46      	ldr	r3, [pc, #280]	; (800b298 <UART_SetConfig+0x2e8>)
 800b17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b182:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b186:	2bc0      	cmp	r3, #192	; 0xc0
 800b188:	d016      	beq.n	800b1b8 <UART_SetConfig+0x208>
 800b18a:	2bc0      	cmp	r3, #192	; 0xc0
 800b18c:	d818      	bhi.n	800b1c0 <UART_SetConfig+0x210>
 800b18e:	2b80      	cmp	r3, #128	; 0x80
 800b190:	d00a      	beq.n	800b1a8 <UART_SetConfig+0x1f8>
 800b192:	2b80      	cmp	r3, #128	; 0x80
 800b194:	d814      	bhi.n	800b1c0 <UART_SetConfig+0x210>
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <UART_SetConfig+0x1f0>
 800b19a:	2b40      	cmp	r3, #64	; 0x40
 800b19c:	d008      	beq.n	800b1b0 <UART_SetConfig+0x200>
 800b19e:	e00f      	b.n	800b1c0 <UART_SetConfig+0x210>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1a6:	e042      	b.n	800b22e <UART_SetConfig+0x27e>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1ae:	e03e      	b.n	800b22e <UART_SetConfig+0x27e>
 800b1b0:	2304      	movs	r3, #4
 800b1b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1b6:	e03a      	b.n	800b22e <UART_SetConfig+0x27e>
 800b1b8:	2308      	movs	r3, #8
 800b1ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1be:	e036      	b.n	800b22e <UART_SetConfig+0x27e>
 800b1c0:	2310      	movs	r3, #16
 800b1c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1c6:	e032      	b.n	800b22e <UART_SetConfig+0x27e>
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a30      	ldr	r2, [pc, #192]	; (800b290 <UART_SetConfig+0x2e0>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d12a      	bne.n	800b228 <UART_SetConfig+0x278>
 800b1d2:	4b31      	ldr	r3, [pc, #196]	; (800b298 <UART_SetConfig+0x2e8>)
 800b1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b1dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1e0:	d01a      	beq.n	800b218 <UART_SetConfig+0x268>
 800b1e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1e6:	d81b      	bhi.n	800b220 <UART_SetConfig+0x270>
 800b1e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1ec:	d00c      	beq.n	800b208 <UART_SetConfig+0x258>
 800b1ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1f2:	d815      	bhi.n	800b220 <UART_SetConfig+0x270>
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <UART_SetConfig+0x250>
 800b1f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1fc:	d008      	beq.n	800b210 <UART_SetConfig+0x260>
 800b1fe:	e00f      	b.n	800b220 <UART_SetConfig+0x270>
 800b200:	2300      	movs	r3, #0
 800b202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b206:	e012      	b.n	800b22e <UART_SetConfig+0x27e>
 800b208:	2302      	movs	r3, #2
 800b20a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b20e:	e00e      	b.n	800b22e <UART_SetConfig+0x27e>
 800b210:	2304      	movs	r3, #4
 800b212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b216:	e00a      	b.n	800b22e <UART_SetConfig+0x27e>
 800b218:	2308      	movs	r3, #8
 800b21a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b21e:	e006      	b.n	800b22e <UART_SetConfig+0x27e>
 800b220:	2310      	movs	r3, #16
 800b222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b226:	e002      	b.n	800b22e <UART_SetConfig+0x27e>
 800b228:	2310      	movs	r3, #16
 800b22a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a17      	ldr	r2, [pc, #92]	; (800b290 <UART_SetConfig+0x2e0>)
 800b234:	4293      	cmp	r3, r2
 800b236:	f040 80a8 	bne.w	800b38a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b23a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b23e:	2b08      	cmp	r3, #8
 800b240:	d834      	bhi.n	800b2ac <UART_SetConfig+0x2fc>
 800b242:	a201      	add	r2, pc, #4	; (adr r2, 800b248 <UART_SetConfig+0x298>)
 800b244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b248:	0800b26d 	.word	0x0800b26d
 800b24c:	0800b2ad 	.word	0x0800b2ad
 800b250:	0800b275 	.word	0x0800b275
 800b254:	0800b2ad 	.word	0x0800b2ad
 800b258:	0800b27b 	.word	0x0800b27b
 800b25c:	0800b2ad 	.word	0x0800b2ad
 800b260:	0800b2ad 	.word	0x0800b2ad
 800b264:	0800b2ad 	.word	0x0800b2ad
 800b268:	0800b283 	.word	0x0800b283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b26c:	f7fc fca0 	bl	8007bb0 <HAL_RCC_GetPCLK1Freq>
 800b270:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b272:	e021      	b.n	800b2b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b274:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <UART_SetConfig+0x2f8>)
 800b276:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b278:	e01e      	b.n	800b2b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b27a:	f7fc fc2d 	bl	8007ad8 <HAL_RCC_GetSysClockFreq>
 800b27e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b280:	e01a      	b.n	800b2b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b286:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b288:	e016      	b.n	800b2b8 <UART_SetConfig+0x308>
 800b28a:	bf00      	nop
 800b28c:	cfff69f3 	.word	0xcfff69f3
 800b290:	40008000 	.word	0x40008000
 800b294:	40013800 	.word	0x40013800
 800b298:	40021000 	.word	0x40021000
 800b29c:	40004400 	.word	0x40004400
 800b2a0:	40004800 	.word	0x40004800
 800b2a4:	40004c00 	.word	0x40004c00
 800b2a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b2b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f000 812a 	beq.w	800b514 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	4a9e      	ldr	r2, [pc, #632]	; (800b540 <UART_SetConfig+0x590>)
 800b2c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2d2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	005b      	lsls	r3, r3, #1
 800b2dc:	4413      	add	r3, r2
 800b2de:	69ba      	ldr	r2, [r7, #24]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d305      	bcc.n	800b2f0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2ea:	69ba      	ldr	r2, [r7, #24]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d903      	bls.n	800b2f8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b2f6:	e10d      	b.n	800b514 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	60bb      	str	r3, [r7, #8]
 800b2fe:	60fa      	str	r2, [r7, #12]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	4a8e      	ldr	r2, [pc, #568]	; (800b540 <UART_SetConfig+0x590>)
 800b306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	2200      	movs	r2, #0
 800b30e:	603b      	str	r3, [r7, #0]
 800b310:	607a      	str	r2, [r7, #4]
 800b312:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b31a:	f7f4 ffd9 	bl	80002d0 <__aeabi_uldivmod>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	4610      	mov	r0, r2
 800b324:	4619      	mov	r1, r3
 800b326:	f04f 0200 	mov.w	r2, #0
 800b32a:	f04f 0300 	mov.w	r3, #0
 800b32e:	020b      	lsls	r3, r1, #8
 800b330:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b334:	0202      	lsls	r2, r0, #8
 800b336:	6979      	ldr	r1, [r7, #20]
 800b338:	6849      	ldr	r1, [r1, #4]
 800b33a:	0849      	lsrs	r1, r1, #1
 800b33c:	2000      	movs	r0, #0
 800b33e:	460c      	mov	r4, r1
 800b340:	4605      	mov	r5, r0
 800b342:	eb12 0804 	adds.w	r8, r2, r4
 800b346:	eb43 0905 	adc.w	r9, r3, r5
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	469a      	mov	sl, r3
 800b352:	4693      	mov	fp, r2
 800b354:	4652      	mov	r2, sl
 800b356:	465b      	mov	r3, fp
 800b358:	4640      	mov	r0, r8
 800b35a:	4649      	mov	r1, r9
 800b35c:	f7f4 ffb8 	bl	80002d0 <__aeabi_uldivmod>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	4613      	mov	r3, r2
 800b366:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b36e:	d308      	bcc.n	800b382 <UART_SetConfig+0x3d2>
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b376:	d204      	bcs.n	800b382 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6a3a      	ldr	r2, [r7, #32]
 800b37e:	60da      	str	r2, [r3, #12]
 800b380:	e0c8      	b.n	800b514 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b388:	e0c4      	b.n	800b514 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	69db      	ldr	r3, [r3, #28]
 800b38e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b392:	d167      	bne.n	800b464 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b398:	2b08      	cmp	r3, #8
 800b39a:	d828      	bhi.n	800b3ee <UART_SetConfig+0x43e>
 800b39c:	a201      	add	r2, pc, #4	; (adr r2, 800b3a4 <UART_SetConfig+0x3f4>)
 800b39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a2:	bf00      	nop
 800b3a4:	0800b3c9 	.word	0x0800b3c9
 800b3a8:	0800b3d1 	.word	0x0800b3d1
 800b3ac:	0800b3d9 	.word	0x0800b3d9
 800b3b0:	0800b3ef 	.word	0x0800b3ef
 800b3b4:	0800b3df 	.word	0x0800b3df
 800b3b8:	0800b3ef 	.word	0x0800b3ef
 800b3bc:	0800b3ef 	.word	0x0800b3ef
 800b3c0:	0800b3ef 	.word	0x0800b3ef
 800b3c4:	0800b3e7 	.word	0x0800b3e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3c8:	f7fc fbf2 	bl	8007bb0 <HAL_RCC_GetPCLK1Freq>
 800b3cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b3ce:	e014      	b.n	800b3fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3d0:	f7fc fc04 	bl	8007bdc <HAL_RCC_GetPCLK2Freq>
 800b3d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b3d6:	e010      	b.n	800b3fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3d8:	4b5a      	ldr	r3, [pc, #360]	; (800b544 <UART_SetConfig+0x594>)
 800b3da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b3dc:	e00d      	b.n	800b3fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3de:	f7fc fb7b 	bl	8007ad8 <HAL_RCC_GetSysClockFreq>
 800b3e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b3e4:	e009      	b.n	800b3fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b3ec:	e005      	b.n	800b3fa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b3f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 8089 	beq.w	800b514 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b406:	4a4e      	ldr	r2, [pc, #312]	; (800b540 <UART_SetConfig+0x590>)
 800b408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b40c:	461a      	mov	r2, r3
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	fbb3 f3f2 	udiv	r3, r3, r2
 800b414:	005a      	lsls	r2, r3, #1
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	441a      	add	r2, r3
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	fbb2 f3f3 	udiv	r3, r2, r3
 800b426:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	2b0f      	cmp	r3, #15
 800b42c:	d916      	bls.n	800b45c <UART_SetConfig+0x4ac>
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b434:	d212      	bcs.n	800b45c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b436:	6a3b      	ldr	r3, [r7, #32]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	f023 030f 	bic.w	r3, r3, #15
 800b43e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	085b      	lsrs	r3, r3, #1
 800b444:	b29b      	uxth	r3, r3
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	8bfb      	ldrh	r3, [r7, #30]
 800b44e:	4313      	orrs	r3, r2
 800b450:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	8bfa      	ldrh	r2, [r7, #30]
 800b458:	60da      	str	r2, [r3, #12]
 800b45a:	e05b      	b.n	800b514 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b462:	e057      	b.n	800b514 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b468:	2b08      	cmp	r3, #8
 800b46a:	d828      	bhi.n	800b4be <UART_SetConfig+0x50e>
 800b46c:	a201      	add	r2, pc, #4	; (adr r2, 800b474 <UART_SetConfig+0x4c4>)
 800b46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b472:	bf00      	nop
 800b474:	0800b499 	.word	0x0800b499
 800b478:	0800b4a1 	.word	0x0800b4a1
 800b47c:	0800b4a9 	.word	0x0800b4a9
 800b480:	0800b4bf 	.word	0x0800b4bf
 800b484:	0800b4af 	.word	0x0800b4af
 800b488:	0800b4bf 	.word	0x0800b4bf
 800b48c:	0800b4bf 	.word	0x0800b4bf
 800b490:	0800b4bf 	.word	0x0800b4bf
 800b494:	0800b4b7 	.word	0x0800b4b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b498:	f7fc fb8a 	bl	8007bb0 <HAL_RCC_GetPCLK1Freq>
 800b49c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b49e:	e014      	b.n	800b4ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4a0:	f7fc fb9c 	bl	8007bdc <HAL_RCC_GetPCLK2Freq>
 800b4a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b4a6:	e010      	b.n	800b4ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4a8:	4b26      	ldr	r3, [pc, #152]	; (800b544 <UART_SetConfig+0x594>)
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b4ac:	e00d      	b.n	800b4ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4ae:	f7fc fb13 	bl	8007ad8 <HAL_RCC_GetSysClockFreq>
 800b4b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b4b4:	e009      	b.n	800b4ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b4bc:	e005      	b.n	800b4ca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b4c8:	bf00      	nop
    }

    if (pclk != 0U)
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d021      	beq.n	800b514 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d4:	4a1a      	ldr	r2, [pc, #104]	; (800b540 <UART_SetConfig+0x590>)
 800b4d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	085b      	lsrs	r3, r3, #1
 800b4e8:	441a      	add	r2, r3
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
 800b4f6:	2b0f      	cmp	r3, #15
 800b4f8:	d909      	bls.n	800b50e <UART_SetConfig+0x55e>
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b500:	d205      	bcs.n	800b50e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	b29a      	uxth	r2, r3
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60da      	str	r2, [r3, #12]
 800b50c:	e002      	b.n	800b514 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	2201      	movs	r2, #1
 800b518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2201      	movs	r2, #1
 800b520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	2200      	movs	r2, #0
 800b528:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2200      	movs	r2, #0
 800b52e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b530:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b534:	4618      	mov	r0, r3
 800b536:	3730      	adds	r7, #48	; 0x30
 800b538:	46bd      	mov	sp, r7
 800b53a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b53e:	bf00      	nop
 800b540:	0800c7ec 	.word	0x0800c7ec
 800b544:	00f42400 	.word	0x00f42400

0800b548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00a      	beq.n	800b572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	430a      	orrs	r2, r1
 800b570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00a      	beq.n	800b594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	430a      	orrs	r2, r1
 800b592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00a      	beq.n	800b5b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	430a      	orrs	r2, r1
 800b5b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ba:	f003 0308 	and.w	r3, r3, #8
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00a      	beq.n	800b5d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	430a      	orrs	r2, r1
 800b5d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5dc:	f003 0310 	and.w	r3, r3, #16
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00a      	beq.n	800b5fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fe:	f003 0320 	and.w	r3, r3, #32
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00a      	beq.n	800b61c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b624:	2b00      	cmp	r3, #0
 800b626:	d01a      	beq.n	800b65e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b646:	d10a      	bne.n	800b65e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00a      	beq.n	800b680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	430a      	orrs	r2, r1
 800b67e:	605a      	str	r2, [r3, #4]
  }
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af02      	add	r7, sp, #8
 800b692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b69c:	f7f8 f9a8 	bl	80039f0 <HAL_GetTick>
 800b6a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0308 	and.w	r3, r3, #8
 800b6ac:	2b08      	cmp	r3, #8
 800b6ae:	d10e      	bne.n	800b6ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f82f 	bl	800b722 <UART_WaitOnFlagUntilTimeout>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e025      	b.n	800b71a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f003 0304 	and.w	r3, r3, #4
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d10e      	bne.n	800b6fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f819 	bl	800b722 <UART_WaitOnFlagUntilTimeout>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	e00f      	b.n	800b71a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b09c      	sub	sp, #112	; 0x70
 800b726:	af00      	add	r7, sp, #0
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	603b      	str	r3, [r7, #0]
 800b72e:	4613      	mov	r3, r2
 800b730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b732:	e0a9      	b.n	800b888 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73a:	f000 80a5 	beq.w	800b888 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b73e:	f7f8 f957 	bl	80039f0 <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d302      	bcc.n	800b754 <UART_WaitOnFlagUntilTimeout+0x32>
 800b74e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b750:	2b00      	cmp	r3, #0
 800b752:	d140      	bne.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b75c:	e853 3f00 	ldrex	r3, [r3]
 800b760:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b764:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b768:	667b      	str	r3, [r7, #100]	; 0x64
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b772:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b774:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b776:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b77a:	e841 2300 	strex	r3, r2, [r1]
 800b77e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1e6      	bne.n	800b754 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	3308      	adds	r3, #8
 800b78c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b790:	e853 3f00 	ldrex	r3, [r3]
 800b794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	f023 0301 	bic.w	r3, r3, #1
 800b79c:	663b      	str	r3, [r7, #96]	; 0x60
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3308      	adds	r3, #8
 800b7a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7a6:	64ba      	str	r2, [r7, #72]	; 0x48
 800b7a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7ae:	e841 2300 	strex	r3, r2, [r1]
 800b7b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1e5      	bne.n	800b786 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2220      	movs	r2, #32
 800b7be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2220      	movs	r2, #32
 800b7c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e069      	b.n	800b8aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0304 	and.w	r3, r3, #4
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d051      	beq.n	800b888 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	69db      	ldr	r3, [r3, #28]
 800b7ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7f2:	d149      	bne.n	800b888 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	e853 3f00 	ldrex	r3, [r3]
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b812:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	461a      	mov	r2, r3
 800b81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b81c:	637b      	str	r3, [r7, #52]	; 0x34
 800b81e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b824:	e841 2300 	strex	r3, r2, [r1]
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e6      	bne.n	800b7fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3308      	adds	r3, #8
 800b836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	e853 3f00 	ldrex	r3, [r3]
 800b83e:	613b      	str	r3, [r7, #16]
   return(result);
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f023 0301 	bic.w	r3, r3, #1
 800b846:	66bb      	str	r3, [r7, #104]	; 0x68
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3308      	adds	r3, #8
 800b84e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b850:	623a      	str	r2, [r7, #32]
 800b852:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b854:	69f9      	ldr	r1, [r7, #28]
 800b856:	6a3a      	ldr	r2, [r7, #32]
 800b858:	e841 2300 	strex	r3, r2, [r1]
 800b85c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e5      	bne.n	800b830 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2220      	movs	r2, #32
 800b868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2220      	movs	r2, #32
 800b870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2220      	movs	r2, #32
 800b878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e010      	b.n	800b8aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	69da      	ldr	r2, [r3, #28]
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	4013      	ands	r3, r2
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	429a      	cmp	r2, r3
 800b896:	bf0c      	ite	eq
 800b898:	2301      	moveq	r3, #1
 800b89a:	2300      	movne	r3, #0
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	461a      	mov	r2, r3
 800b8a0:	79fb      	ldrb	r3, [r7, #7]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	f43f af46 	beq.w	800b734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3770      	adds	r7, #112	; 0x70
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b08f      	sub	sp, #60	; 0x3c
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	e853 3f00 	ldrex	r3, [r3]
 800b8c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b8ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8da:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e0:	e841 2300 	strex	r3, r2, [r1]
 800b8e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e6      	bne.n	800b8ba <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	e853 3f00 	ldrex	r3, [r3]
 800b8fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b902:	633b      	str	r3, [r7, #48]	; 0x30
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3308      	adds	r3, #8
 800b90a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b90c:	61ba      	str	r2, [r7, #24]
 800b90e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	6979      	ldr	r1, [r7, #20]
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	613b      	str	r3, [r7, #16]
   return(result);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e5      	bne.n	800b8ec <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2220      	movs	r2, #32
 800b924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b928:	bf00      	nop
 800b92a:	373c      	adds	r7, #60	; 0x3c
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b934:	b480      	push	{r7}
 800b936:	b095      	sub	sp, #84	; 0x54
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b944:	e853 3f00 	ldrex	r3, [r3]
 800b948:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b950:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95a:	643b      	str	r3, [r7, #64]	; 0x40
 800b95c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b962:	e841 2300 	strex	r3, r2, [r1]
 800b966:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1e6      	bne.n	800b93c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	3308      	adds	r3, #8
 800b974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	e853 3f00 	ldrex	r3, [r3]
 800b97c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b984:	f023 0301 	bic.w	r3, r3, #1
 800b988:	64bb      	str	r3, [r7, #72]	; 0x48
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	3308      	adds	r3, #8
 800b990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b992:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b994:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b99a:	e841 2300 	strex	r3, r2, [r1]
 800b99e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1e3      	bne.n	800b96e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d118      	bne.n	800b9e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f023 0310 	bic.w	r3, r3, #16
 800b9c2:	647b      	str	r3, [r7, #68]	; 0x44
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9cc:	61bb      	str	r3, [r7, #24]
 800b9ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d0:	6979      	ldr	r1, [r7, #20]
 800b9d2:	69ba      	ldr	r2, [r7, #24]
 800b9d4:	e841 2300 	strex	r3, r2, [r1]
 800b9d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1e6      	bne.n	800b9ae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b9f4:	bf00      	nop
 800b9f6:	3754      	adds	r7, #84	; 0x54
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b090      	sub	sp, #64	; 0x40
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 0320 	and.w	r3, r3, #32
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d137      	bne.n	800ba8c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ba1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3308      	adds	r3, #8
 800ba2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	e853 3f00 	ldrex	r3, [r3]
 800ba32:	623b      	str	r3, [r7, #32]
   return(result);
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3308      	adds	r3, #8
 800ba42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba44:	633a      	str	r2, [r7, #48]	; 0x30
 800ba46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba4c:	e841 2300 	strex	r3, r2, [r1]
 800ba50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1e5      	bne.n	800ba24 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba76:	61fb      	str	r3, [r7, #28]
 800ba78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	69b9      	ldr	r1, [r7, #24]
 800ba7c:	69fa      	ldr	r2, [r7, #28]
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	617b      	str	r3, [r7, #20]
   return(result);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e6      	bne.n	800ba58 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba8a:	e002      	b.n	800ba92 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ba8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ba8e:	f7ff fa65 	bl	800af5c <HAL_UART_TxCpltCallback>
}
 800ba92:	bf00      	nop
 800ba94:	3740      	adds	r7, #64	; 0x40
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f7ff fa61 	bl	800af70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800baae:	bf00      	nop
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b086      	sub	sp, #24
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bade:	2b80      	cmp	r3, #128	; 0x80
 800bae0:	d109      	bne.n	800baf6 <UART_DMAError+0x40>
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b21      	cmp	r3, #33	; 0x21
 800bae6:	d106      	bne.n	800baf6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2200      	movs	r2, #0
 800baec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800baf0:	6978      	ldr	r0, [r7, #20]
 800baf2:	f7ff fede 	bl	800b8b2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb00:	2b40      	cmp	r3, #64	; 0x40
 800bb02:	d109      	bne.n	800bb18 <UART_DMAError+0x62>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b22      	cmp	r3, #34	; 0x22
 800bb08:	d106      	bne.n	800bb18 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bb12:	6978      	ldr	r0, [r7, #20]
 800bb14:	f7ff ff0e 	bl	800b934 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb1e:	f043 0210 	orr.w	r2, r3, #16
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb28:	6978      	ldr	r0, [r7, #20]
 800bb2a:	f7ff fa2b 	bl	800af84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb2e:	bf00      	nop
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b084      	sub	sp, #16
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff fa15 	bl	800af84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b088      	sub	sp, #32
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	e853 3f00 	ldrex	r3, [r3]
 800bb76:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb7e:	61fb      	str	r3, [r7, #28]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	461a      	mov	r2, r3
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	61bb      	str	r3, [r7, #24]
 800bb8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8c:	6979      	ldr	r1, [r7, #20]
 800bb8e:	69ba      	ldr	r2, [r7, #24]
 800bb90:	e841 2300 	strex	r3, r2, [r1]
 800bb94:	613b      	str	r3, [r7, #16]
   return(result);
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1e6      	bne.n	800bb6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7ff f9d6 	bl	800af5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbb0:	bf00      	nop
 800bbb2:	3720      	adds	r7, #32
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d101      	bne.n	800bc0a <HAL_UARTEx_DisableFifoMode+0x16>
 800bc06:	2302      	movs	r3, #2
 800bc08:	e027      	b.n	800bc5a <HAL_UARTEx_DisableFifoMode+0x66>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2224      	movs	r2, #36	; 0x24
 800bc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f022 0201 	bic.w	r2, r2, #1
 800bc30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2220      	movs	r2, #32
 800bc4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b084      	sub	sp, #16
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d101      	bne.n	800bc7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	e02d      	b.n	800bcda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2224      	movs	r2, #36	; 0x24
 800bc8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f022 0201 	bic.w	r2, r2, #1
 800bca4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	430a      	orrs	r2, r1
 800bcb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f850 	bl	800bd60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b084      	sub	sp, #16
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d101      	bne.n	800bcfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	e02d      	b.n	800bd56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2224      	movs	r2, #36	; 0x24
 800bd06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f022 0201 	bic.w	r2, r2, #1
 800bd20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f812 	bl	800bd60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2220      	movs	r2, #32
 800bd48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
	...

0800bd60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d108      	bne.n	800bd82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd80:	e031      	b.n	800bde6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd82:	2308      	movs	r3, #8
 800bd84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd86:	2308      	movs	r3, #8
 800bd88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	0e5b      	lsrs	r3, r3, #25
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	f003 0307 	and.w	r3, r3, #7
 800bd98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	0f5b      	lsrs	r3, r3, #29
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	f003 0307 	and.w	r3, r3, #7
 800bda8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdaa:	7bbb      	ldrb	r3, [r7, #14]
 800bdac:	7b3a      	ldrb	r2, [r7, #12]
 800bdae:	4911      	ldr	r1, [pc, #68]	; (800bdf4 <UARTEx_SetNbDataToProcess+0x94>)
 800bdb0:	5c8a      	ldrb	r2, [r1, r2]
 800bdb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bdb6:	7b3a      	ldrb	r2, [r7, #12]
 800bdb8:	490f      	ldr	r1, [pc, #60]	; (800bdf8 <UARTEx_SetNbDataToProcess+0x98>)
 800bdba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdbc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
 800bdca:	7b7a      	ldrb	r2, [r7, #13]
 800bdcc:	4909      	ldr	r1, [pc, #36]	; (800bdf4 <UARTEx_SetNbDataToProcess+0x94>)
 800bdce:	5c8a      	ldrb	r2, [r1, r2]
 800bdd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bdd4:	7b7a      	ldrb	r2, [r7, #13]
 800bdd6:	4908      	ldr	r1, [pc, #32]	; (800bdf8 <UARTEx_SetNbDataToProcess+0x98>)
 800bdd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdda:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bde6:	bf00      	nop
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	0800c804 	.word	0x0800c804
 800bdf8:	0800c80c 	.word	0x0800c80c

0800bdfc <_vsniprintf_r>:
 800bdfc:	b530      	push	{r4, r5, lr}
 800bdfe:	4614      	mov	r4, r2
 800be00:	2c00      	cmp	r4, #0
 800be02:	b09b      	sub	sp, #108	; 0x6c
 800be04:	4605      	mov	r5, r0
 800be06:	461a      	mov	r2, r3
 800be08:	da05      	bge.n	800be16 <_vsniprintf_r+0x1a>
 800be0a:	238b      	movs	r3, #139	; 0x8b
 800be0c:	6003      	str	r3, [r0, #0]
 800be0e:	f04f 30ff 	mov.w	r0, #4294967295
 800be12:	b01b      	add	sp, #108	; 0x6c
 800be14:	bd30      	pop	{r4, r5, pc}
 800be16:	f44f 7302 	mov.w	r3, #520	; 0x208
 800be1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800be1e:	bf14      	ite	ne
 800be20:	f104 33ff 	addne.w	r3, r4, #4294967295
 800be24:	4623      	moveq	r3, r4
 800be26:	9302      	str	r3, [sp, #8]
 800be28:	9305      	str	r3, [sp, #20]
 800be2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be2e:	9100      	str	r1, [sp, #0]
 800be30:	9104      	str	r1, [sp, #16]
 800be32:	f8ad 300e 	strh.w	r3, [sp, #14]
 800be36:	4669      	mov	r1, sp
 800be38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800be3a:	f000 f9ad 	bl	800c198 <_svfiprintf_r>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	bfbc      	itt	lt
 800be42:	238b      	movlt	r3, #139	; 0x8b
 800be44:	602b      	strlt	r3, [r5, #0]
 800be46:	2c00      	cmp	r4, #0
 800be48:	d0e3      	beq.n	800be12 <_vsniprintf_r+0x16>
 800be4a:	9b00      	ldr	r3, [sp, #0]
 800be4c:	2200      	movs	r2, #0
 800be4e:	701a      	strb	r2, [r3, #0]
 800be50:	e7df      	b.n	800be12 <_vsniprintf_r+0x16>
	...

0800be54 <vsniprintf>:
 800be54:	b507      	push	{r0, r1, r2, lr}
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	4613      	mov	r3, r2
 800be5a:	460a      	mov	r2, r1
 800be5c:	4601      	mov	r1, r0
 800be5e:	4803      	ldr	r0, [pc, #12]	; (800be6c <vsniprintf+0x18>)
 800be60:	6800      	ldr	r0, [r0, #0]
 800be62:	f7ff ffcb 	bl	800bdfc <_vsniprintf_r>
 800be66:	b003      	add	sp, #12
 800be68:	f85d fb04 	ldr.w	pc, [sp], #4
 800be6c:	20000130 	.word	0x20000130

0800be70 <memset>:
 800be70:	4402      	add	r2, r0
 800be72:	4603      	mov	r3, r0
 800be74:	4293      	cmp	r3, r2
 800be76:	d100      	bne.n	800be7a <memset+0xa>
 800be78:	4770      	bx	lr
 800be7a:	f803 1b01 	strb.w	r1, [r3], #1
 800be7e:	e7f9      	b.n	800be74 <memset+0x4>

0800be80 <__errno>:
 800be80:	4b01      	ldr	r3, [pc, #4]	; (800be88 <__errno+0x8>)
 800be82:	6818      	ldr	r0, [r3, #0]
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	20000130 	.word	0x20000130

0800be8c <__libc_init_array>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	4d0d      	ldr	r5, [pc, #52]	; (800bec4 <__libc_init_array+0x38>)
 800be90:	4c0d      	ldr	r4, [pc, #52]	; (800bec8 <__libc_init_array+0x3c>)
 800be92:	1b64      	subs	r4, r4, r5
 800be94:	10a4      	asrs	r4, r4, #2
 800be96:	2600      	movs	r6, #0
 800be98:	42a6      	cmp	r6, r4
 800be9a:	d109      	bne.n	800beb0 <__libc_init_array+0x24>
 800be9c:	4d0b      	ldr	r5, [pc, #44]	; (800becc <__libc_init_array+0x40>)
 800be9e:	4c0c      	ldr	r4, [pc, #48]	; (800bed0 <__libc_init_array+0x44>)
 800bea0:	f000 fc6a 	bl	800c778 <_init>
 800bea4:	1b64      	subs	r4, r4, r5
 800bea6:	10a4      	asrs	r4, r4, #2
 800bea8:	2600      	movs	r6, #0
 800beaa:	42a6      	cmp	r6, r4
 800beac:	d105      	bne.n	800beba <__libc_init_array+0x2e>
 800beae:	bd70      	pop	{r4, r5, r6, pc}
 800beb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800beb4:	4798      	blx	r3
 800beb6:	3601      	adds	r6, #1
 800beb8:	e7ee      	b.n	800be98 <__libc_init_array+0xc>
 800beba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bebe:	4798      	blx	r3
 800bec0:	3601      	adds	r6, #1
 800bec2:	e7f2      	b.n	800beaa <__libc_init_array+0x1e>
 800bec4:	0800c850 	.word	0x0800c850
 800bec8:	0800c850 	.word	0x0800c850
 800becc:	0800c850 	.word	0x0800c850
 800bed0:	0800c854 	.word	0x0800c854

0800bed4 <__retarget_lock_acquire_recursive>:
 800bed4:	4770      	bx	lr

0800bed6 <__retarget_lock_release_recursive>:
 800bed6:	4770      	bx	lr

0800bed8 <memcpy>:
 800bed8:	440a      	add	r2, r1
 800beda:	4291      	cmp	r1, r2
 800bedc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bee0:	d100      	bne.n	800bee4 <memcpy+0xc>
 800bee2:	4770      	bx	lr
 800bee4:	b510      	push	{r4, lr}
 800bee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beee:	4291      	cmp	r1, r2
 800bef0:	d1f9      	bne.n	800bee6 <memcpy+0xe>
 800bef2:	bd10      	pop	{r4, pc}

0800bef4 <_free_r>:
 800bef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bef6:	2900      	cmp	r1, #0
 800bef8:	d044      	beq.n	800bf84 <_free_r+0x90>
 800befa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800befe:	9001      	str	r0, [sp, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f1a1 0404 	sub.w	r4, r1, #4
 800bf06:	bfb8      	it	lt
 800bf08:	18e4      	addlt	r4, r4, r3
 800bf0a:	f000 f8df 	bl	800c0cc <__malloc_lock>
 800bf0e:	4a1e      	ldr	r2, [pc, #120]	; (800bf88 <_free_r+0x94>)
 800bf10:	9801      	ldr	r0, [sp, #4]
 800bf12:	6813      	ldr	r3, [r2, #0]
 800bf14:	b933      	cbnz	r3, 800bf24 <_free_r+0x30>
 800bf16:	6063      	str	r3, [r4, #4]
 800bf18:	6014      	str	r4, [r2, #0]
 800bf1a:	b003      	add	sp, #12
 800bf1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf20:	f000 b8da 	b.w	800c0d8 <__malloc_unlock>
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	d908      	bls.n	800bf3a <_free_r+0x46>
 800bf28:	6825      	ldr	r5, [r4, #0]
 800bf2a:	1961      	adds	r1, r4, r5
 800bf2c:	428b      	cmp	r3, r1
 800bf2e:	bf01      	itttt	eq
 800bf30:	6819      	ldreq	r1, [r3, #0]
 800bf32:	685b      	ldreq	r3, [r3, #4]
 800bf34:	1949      	addeq	r1, r1, r5
 800bf36:	6021      	streq	r1, [r4, #0]
 800bf38:	e7ed      	b.n	800bf16 <_free_r+0x22>
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	b10b      	cbz	r3, 800bf44 <_free_r+0x50>
 800bf40:	42a3      	cmp	r3, r4
 800bf42:	d9fa      	bls.n	800bf3a <_free_r+0x46>
 800bf44:	6811      	ldr	r1, [r2, #0]
 800bf46:	1855      	adds	r5, r2, r1
 800bf48:	42a5      	cmp	r5, r4
 800bf4a:	d10b      	bne.n	800bf64 <_free_r+0x70>
 800bf4c:	6824      	ldr	r4, [r4, #0]
 800bf4e:	4421      	add	r1, r4
 800bf50:	1854      	adds	r4, r2, r1
 800bf52:	42a3      	cmp	r3, r4
 800bf54:	6011      	str	r1, [r2, #0]
 800bf56:	d1e0      	bne.n	800bf1a <_free_r+0x26>
 800bf58:	681c      	ldr	r4, [r3, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	6053      	str	r3, [r2, #4]
 800bf5e:	440c      	add	r4, r1
 800bf60:	6014      	str	r4, [r2, #0]
 800bf62:	e7da      	b.n	800bf1a <_free_r+0x26>
 800bf64:	d902      	bls.n	800bf6c <_free_r+0x78>
 800bf66:	230c      	movs	r3, #12
 800bf68:	6003      	str	r3, [r0, #0]
 800bf6a:	e7d6      	b.n	800bf1a <_free_r+0x26>
 800bf6c:	6825      	ldr	r5, [r4, #0]
 800bf6e:	1961      	adds	r1, r4, r5
 800bf70:	428b      	cmp	r3, r1
 800bf72:	bf04      	itt	eq
 800bf74:	6819      	ldreq	r1, [r3, #0]
 800bf76:	685b      	ldreq	r3, [r3, #4]
 800bf78:	6063      	str	r3, [r4, #4]
 800bf7a:	bf04      	itt	eq
 800bf7c:	1949      	addeq	r1, r1, r5
 800bf7e:	6021      	streq	r1, [r4, #0]
 800bf80:	6054      	str	r4, [r2, #4]
 800bf82:	e7ca      	b.n	800bf1a <_free_r+0x26>
 800bf84:	b003      	add	sp, #12
 800bf86:	bd30      	pop	{r4, r5, pc}
 800bf88:	20000ec0 	.word	0x20000ec0

0800bf8c <sbrk_aligned>:
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	4e0e      	ldr	r6, [pc, #56]	; (800bfc8 <sbrk_aligned+0x3c>)
 800bf90:	460c      	mov	r4, r1
 800bf92:	6831      	ldr	r1, [r6, #0]
 800bf94:	4605      	mov	r5, r0
 800bf96:	b911      	cbnz	r1, 800bf9e <sbrk_aligned+0x12>
 800bf98:	f000 fba6 	bl	800c6e8 <_sbrk_r>
 800bf9c:	6030      	str	r0, [r6, #0]
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f000 fba1 	bl	800c6e8 <_sbrk_r>
 800bfa6:	1c43      	adds	r3, r0, #1
 800bfa8:	d00a      	beq.n	800bfc0 <sbrk_aligned+0x34>
 800bfaa:	1cc4      	adds	r4, r0, #3
 800bfac:	f024 0403 	bic.w	r4, r4, #3
 800bfb0:	42a0      	cmp	r0, r4
 800bfb2:	d007      	beq.n	800bfc4 <sbrk_aligned+0x38>
 800bfb4:	1a21      	subs	r1, r4, r0
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f000 fb96 	bl	800c6e8 <_sbrk_r>
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d101      	bne.n	800bfc4 <sbrk_aligned+0x38>
 800bfc0:	f04f 34ff 	mov.w	r4, #4294967295
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}
 800bfc8:	20000ec4 	.word	0x20000ec4

0800bfcc <_malloc_r>:
 800bfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd0:	1ccd      	adds	r5, r1, #3
 800bfd2:	f025 0503 	bic.w	r5, r5, #3
 800bfd6:	3508      	adds	r5, #8
 800bfd8:	2d0c      	cmp	r5, #12
 800bfda:	bf38      	it	cc
 800bfdc:	250c      	movcc	r5, #12
 800bfde:	2d00      	cmp	r5, #0
 800bfe0:	4607      	mov	r7, r0
 800bfe2:	db01      	blt.n	800bfe8 <_malloc_r+0x1c>
 800bfe4:	42a9      	cmp	r1, r5
 800bfe6:	d905      	bls.n	800bff4 <_malloc_r+0x28>
 800bfe8:	230c      	movs	r3, #12
 800bfea:	603b      	str	r3, [r7, #0]
 800bfec:	2600      	movs	r6, #0
 800bfee:	4630      	mov	r0, r6
 800bff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c0c8 <_malloc_r+0xfc>
 800bff8:	f000 f868 	bl	800c0cc <__malloc_lock>
 800bffc:	f8d8 3000 	ldr.w	r3, [r8]
 800c000:	461c      	mov	r4, r3
 800c002:	bb5c      	cbnz	r4, 800c05c <_malloc_r+0x90>
 800c004:	4629      	mov	r1, r5
 800c006:	4638      	mov	r0, r7
 800c008:	f7ff ffc0 	bl	800bf8c <sbrk_aligned>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	4604      	mov	r4, r0
 800c010:	d155      	bne.n	800c0be <_malloc_r+0xf2>
 800c012:	f8d8 4000 	ldr.w	r4, [r8]
 800c016:	4626      	mov	r6, r4
 800c018:	2e00      	cmp	r6, #0
 800c01a:	d145      	bne.n	800c0a8 <_malloc_r+0xdc>
 800c01c:	2c00      	cmp	r4, #0
 800c01e:	d048      	beq.n	800c0b2 <_malloc_r+0xe6>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	4631      	mov	r1, r6
 800c024:	4638      	mov	r0, r7
 800c026:	eb04 0903 	add.w	r9, r4, r3
 800c02a:	f000 fb5d 	bl	800c6e8 <_sbrk_r>
 800c02e:	4581      	cmp	r9, r0
 800c030:	d13f      	bne.n	800c0b2 <_malloc_r+0xe6>
 800c032:	6821      	ldr	r1, [r4, #0]
 800c034:	1a6d      	subs	r5, r5, r1
 800c036:	4629      	mov	r1, r5
 800c038:	4638      	mov	r0, r7
 800c03a:	f7ff ffa7 	bl	800bf8c <sbrk_aligned>
 800c03e:	3001      	adds	r0, #1
 800c040:	d037      	beq.n	800c0b2 <_malloc_r+0xe6>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	442b      	add	r3, r5
 800c046:	6023      	str	r3, [r4, #0]
 800c048:	f8d8 3000 	ldr.w	r3, [r8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d038      	beq.n	800c0c2 <_malloc_r+0xf6>
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	42a2      	cmp	r2, r4
 800c054:	d12b      	bne.n	800c0ae <_malloc_r+0xe2>
 800c056:	2200      	movs	r2, #0
 800c058:	605a      	str	r2, [r3, #4]
 800c05a:	e00f      	b.n	800c07c <_malloc_r+0xb0>
 800c05c:	6822      	ldr	r2, [r4, #0]
 800c05e:	1b52      	subs	r2, r2, r5
 800c060:	d41f      	bmi.n	800c0a2 <_malloc_r+0xd6>
 800c062:	2a0b      	cmp	r2, #11
 800c064:	d917      	bls.n	800c096 <_malloc_r+0xca>
 800c066:	1961      	adds	r1, r4, r5
 800c068:	42a3      	cmp	r3, r4
 800c06a:	6025      	str	r5, [r4, #0]
 800c06c:	bf18      	it	ne
 800c06e:	6059      	strne	r1, [r3, #4]
 800c070:	6863      	ldr	r3, [r4, #4]
 800c072:	bf08      	it	eq
 800c074:	f8c8 1000 	streq.w	r1, [r8]
 800c078:	5162      	str	r2, [r4, r5]
 800c07a:	604b      	str	r3, [r1, #4]
 800c07c:	4638      	mov	r0, r7
 800c07e:	f104 060b 	add.w	r6, r4, #11
 800c082:	f000 f829 	bl	800c0d8 <__malloc_unlock>
 800c086:	f026 0607 	bic.w	r6, r6, #7
 800c08a:	1d23      	adds	r3, r4, #4
 800c08c:	1af2      	subs	r2, r6, r3
 800c08e:	d0ae      	beq.n	800bfee <_malloc_r+0x22>
 800c090:	1b9b      	subs	r3, r3, r6
 800c092:	50a3      	str	r3, [r4, r2]
 800c094:	e7ab      	b.n	800bfee <_malloc_r+0x22>
 800c096:	42a3      	cmp	r3, r4
 800c098:	6862      	ldr	r2, [r4, #4]
 800c09a:	d1dd      	bne.n	800c058 <_malloc_r+0x8c>
 800c09c:	f8c8 2000 	str.w	r2, [r8]
 800c0a0:	e7ec      	b.n	800c07c <_malloc_r+0xb0>
 800c0a2:	4623      	mov	r3, r4
 800c0a4:	6864      	ldr	r4, [r4, #4]
 800c0a6:	e7ac      	b.n	800c002 <_malloc_r+0x36>
 800c0a8:	4634      	mov	r4, r6
 800c0aa:	6876      	ldr	r6, [r6, #4]
 800c0ac:	e7b4      	b.n	800c018 <_malloc_r+0x4c>
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	e7cc      	b.n	800c04c <_malloc_r+0x80>
 800c0b2:	230c      	movs	r3, #12
 800c0b4:	603b      	str	r3, [r7, #0]
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	f000 f80e 	bl	800c0d8 <__malloc_unlock>
 800c0bc:	e797      	b.n	800bfee <_malloc_r+0x22>
 800c0be:	6025      	str	r5, [r4, #0]
 800c0c0:	e7dc      	b.n	800c07c <_malloc_r+0xb0>
 800c0c2:	605b      	str	r3, [r3, #4]
 800c0c4:	deff      	udf	#255	; 0xff
 800c0c6:	bf00      	nop
 800c0c8:	20000ec0 	.word	0x20000ec0

0800c0cc <__malloc_lock>:
 800c0cc:	4801      	ldr	r0, [pc, #4]	; (800c0d4 <__malloc_lock+0x8>)
 800c0ce:	f7ff bf01 	b.w	800bed4 <__retarget_lock_acquire_recursive>
 800c0d2:	bf00      	nop
 800c0d4:	20000ebc 	.word	0x20000ebc

0800c0d8 <__malloc_unlock>:
 800c0d8:	4801      	ldr	r0, [pc, #4]	; (800c0e0 <__malloc_unlock+0x8>)
 800c0da:	f7ff befc 	b.w	800bed6 <__retarget_lock_release_recursive>
 800c0de:	bf00      	nop
 800c0e0:	20000ebc 	.word	0x20000ebc

0800c0e4 <__ssputs_r>:
 800c0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e8:	688e      	ldr	r6, [r1, #8]
 800c0ea:	461f      	mov	r7, r3
 800c0ec:	42be      	cmp	r6, r7
 800c0ee:	680b      	ldr	r3, [r1, #0]
 800c0f0:	4682      	mov	sl, r0
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	4690      	mov	r8, r2
 800c0f6:	d82c      	bhi.n	800c152 <__ssputs_r+0x6e>
 800c0f8:	898a      	ldrh	r2, [r1, #12]
 800c0fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0fe:	d026      	beq.n	800c14e <__ssputs_r+0x6a>
 800c100:	6965      	ldr	r5, [r4, #20]
 800c102:	6909      	ldr	r1, [r1, #16]
 800c104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c108:	eba3 0901 	sub.w	r9, r3, r1
 800c10c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c110:	1c7b      	adds	r3, r7, #1
 800c112:	444b      	add	r3, r9
 800c114:	106d      	asrs	r5, r5, #1
 800c116:	429d      	cmp	r5, r3
 800c118:	bf38      	it	cc
 800c11a:	461d      	movcc	r5, r3
 800c11c:	0553      	lsls	r3, r2, #21
 800c11e:	d527      	bpl.n	800c170 <__ssputs_r+0x8c>
 800c120:	4629      	mov	r1, r5
 800c122:	f7ff ff53 	bl	800bfcc <_malloc_r>
 800c126:	4606      	mov	r6, r0
 800c128:	b360      	cbz	r0, 800c184 <__ssputs_r+0xa0>
 800c12a:	6921      	ldr	r1, [r4, #16]
 800c12c:	464a      	mov	r2, r9
 800c12e:	f7ff fed3 	bl	800bed8 <memcpy>
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c13c:	81a3      	strh	r3, [r4, #12]
 800c13e:	6126      	str	r6, [r4, #16]
 800c140:	6165      	str	r5, [r4, #20]
 800c142:	444e      	add	r6, r9
 800c144:	eba5 0509 	sub.w	r5, r5, r9
 800c148:	6026      	str	r6, [r4, #0]
 800c14a:	60a5      	str	r5, [r4, #8]
 800c14c:	463e      	mov	r6, r7
 800c14e:	42be      	cmp	r6, r7
 800c150:	d900      	bls.n	800c154 <__ssputs_r+0x70>
 800c152:	463e      	mov	r6, r7
 800c154:	6820      	ldr	r0, [r4, #0]
 800c156:	4632      	mov	r2, r6
 800c158:	4641      	mov	r1, r8
 800c15a:	f000 faab 	bl	800c6b4 <memmove>
 800c15e:	68a3      	ldr	r3, [r4, #8]
 800c160:	1b9b      	subs	r3, r3, r6
 800c162:	60a3      	str	r3, [r4, #8]
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	4433      	add	r3, r6
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	2000      	movs	r0, #0
 800c16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c170:	462a      	mov	r2, r5
 800c172:	f000 fac9 	bl	800c708 <_realloc_r>
 800c176:	4606      	mov	r6, r0
 800c178:	2800      	cmp	r0, #0
 800c17a:	d1e0      	bne.n	800c13e <__ssputs_r+0x5a>
 800c17c:	6921      	ldr	r1, [r4, #16]
 800c17e:	4650      	mov	r0, sl
 800c180:	f7ff feb8 	bl	800bef4 <_free_r>
 800c184:	230c      	movs	r3, #12
 800c186:	f8ca 3000 	str.w	r3, [sl]
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c190:	81a3      	strh	r3, [r4, #12]
 800c192:	f04f 30ff 	mov.w	r0, #4294967295
 800c196:	e7e9      	b.n	800c16c <__ssputs_r+0x88>

0800c198 <_svfiprintf_r>:
 800c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	4698      	mov	r8, r3
 800c19e:	898b      	ldrh	r3, [r1, #12]
 800c1a0:	061b      	lsls	r3, r3, #24
 800c1a2:	b09d      	sub	sp, #116	; 0x74
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	460d      	mov	r5, r1
 800c1a8:	4614      	mov	r4, r2
 800c1aa:	d50e      	bpl.n	800c1ca <_svfiprintf_r+0x32>
 800c1ac:	690b      	ldr	r3, [r1, #16]
 800c1ae:	b963      	cbnz	r3, 800c1ca <_svfiprintf_r+0x32>
 800c1b0:	2140      	movs	r1, #64	; 0x40
 800c1b2:	f7ff ff0b 	bl	800bfcc <_malloc_r>
 800c1b6:	6028      	str	r0, [r5, #0]
 800c1b8:	6128      	str	r0, [r5, #16]
 800c1ba:	b920      	cbnz	r0, 800c1c6 <_svfiprintf_r+0x2e>
 800c1bc:	230c      	movs	r3, #12
 800c1be:	603b      	str	r3, [r7, #0]
 800c1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c4:	e0d0      	b.n	800c368 <_svfiprintf_r+0x1d0>
 800c1c6:	2340      	movs	r3, #64	; 0x40
 800c1c8:	616b      	str	r3, [r5, #20]
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ce:	2320      	movs	r3, #32
 800c1d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1d8:	2330      	movs	r3, #48	; 0x30
 800c1da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c380 <_svfiprintf_r+0x1e8>
 800c1de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1e2:	f04f 0901 	mov.w	r9, #1
 800c1e6:	4623      	mov	r3, r4
 800c1e8:	469a      	mov	sl, r3
 800c1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1ee:	b10a      	cbz	r2, 800c1f4 <_svfiprintf_r+0x5c>
 800c1f0:	2a25      	cmp	r2, #37	; 0x25
 800c1f2:	d1f9      	bne.n	800c1e8 <_svfiprintf_r+0x50>
 800c1f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1f8:	d00b      	beq.n	800c212 <_svfiprintf_r+0x7a>
 800c1fa:	465b      	mov	r3, fp
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	4638      	mov	r0, r7
 800c202:	f7ff ff6f 	bl	800c0e4 <__ssputs_r>
 800c206:	3001      	adds	r0, #1
 800c208:	f000 80a9 	beq.w	800c35e <_svfiprintf_r+0x1c6>
 800c20c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c20e:	445a      	add	r2, fp
 800c210:	9209      	str	r2, [sp, #36]	; 0x24
 800c212:	f89a 3000 	ldrb.w	r3, [sl]
 800c216:	2b00      	cmp	r3, #0
 800c218:	f000 80a1 	beq.w	800c35e <_svfiprintf_r+0x1c6>
 800c21c:	2300      	movs	r3, #0
 800c21e:	f04f 32ff 	mov.w	r2, #4294967295
 800c222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c226:	f10a 0a01 	add.w	sl, sl, #1
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	9307      	str	r3, [sp, #28]
 800c22e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c232:	931a      	str	r3, [sp, #104]	; 0x68
 800c234:	4654      	mov	r4, sl
 800c236:	2205      	movs	r2, #5
 800c238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c23c:	4850      	ldr	r0, [pc, #320]	; (800c380 <_svfiprintf_r+0x1e8>)
 800c23e:	f7f3 fff7 	bl	8000230 <memchr>
 800c242:	9a04      	ldr	r2, [sp, #16]
 800c244:	b9d8      	cbnz	r0, 800c27e <_svfiprintf_r+0xe6>
 800c246:	06d0      	lsls	r0, r2, #27
 800c248:	bf44      	itt	mi
 800c24a:	2320      	movmi	r3, #32
 800c24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c250:	0711      	lsls	r1, r2, #28
 800c252:	bf44      	itt	mi
 800c254:	232b      	movmi	r3, #43	; 0x2b
 800c256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c25a:	f89a 3000 	ldrb.w	r3, [sl]
 800c25e:	2b2a      	cmp	r3, #42	; 0x2a
 800c260:	d015      	beq.n	800c28e <_svfiprintf_r+0xf6>
 800c262:	9a07      	ldr	r2, [sp, #28]
 800c264:	4654      	mov	r4, sl
 800c266:	2000      	movs	r0, #0
 800c268:	f04f 0c0a 	mov.w	ip, #10
 800c26c:	4621      	mov	r1, r4
 800c26e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c272:	3b30      	subs	r3, #48	; 0x30
 800c274:	2b09      	cmp	r3, #9
 800c276:	d94d      	bls.n	800c314 <_svfiprintf_r+0x17c>
 800c278:	b1b0      	cbz	r0, 800c2a8 <_svfiprintf_r+0x110>
 800c27a:	9207      	str	r2, [sp, #28]
 800c27c:	e014      	b.n	800c2a8 <_svfiprintf_r+0x110>
 800c27e:	eba0 0308 	sub.w	r3, r0, r8
 800c282:	fa09 f303 	lsl.w	r3, r9, r3
 800c286:	4313      	orrs	r3, r2
 800c288:	9304      	str	r3, [sp, #16]
 800c28a:	46a2      	mov	sl, r4
 800c28c:	e7d2      	b.n	800c234 <_svfiprintf_r+0x9c>
 800c28e:	9b03      	ldr	r3, [sp, #12]
 800c290:	1d19      	adds	r1, r3, #4
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	9103      	str	r1, [sp, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	bfbb      	ittet	lt
 800c29a:	425b      	neglt	r3, r3
 800c29c:	f042 0202 	orrlt.w	r2, r2, #2
 800c2a0:	9307      	strge	r3, [sp, #28]
 800c2a2:	9307      	strlt	r3, [sp, #28]
 800c2a4:	bfb8      	it	lt
 800c2a6:	9204      	strlt	r2, [sp, #16]
 800c2a8:	7823      	ldrb	r3, [r4, #0]
 800c2aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c2ac:	d10c      	bne.n	800c2c8 <_svfiprintf_r+0x130>
 800c2ae:	7863      	ldrb	r3, [r4, #1]
 800c2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2b2:	d134      	bne.n	800c31e <_svfiprintf_r+0x186>
 800c2b4:	9b03      	ldr	r3, [sp, #12]
 800c2b6:	1d1a      	adds	r2, r3, #4
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	9203      	str	r2, [sp, #12]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	bfb8      	it	lt
 800c2c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2c4:	3402      	adds	r4, #2
 800c2c6:	9305      	str	r3, [sp, #20]
 800c2c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c390 <_svfiprintf_r+0x1f8>
 800c2cc:	7821      	ldrb	r1, [r4, #0]
 800c2ce:	2203      	movs	r2, #3
 800c2d0:	4650      	mov	r0, sl
 800c2d2:	f7f3 ffad 	bl	8000230 <memchr>
 800c2d6:	b138      	cbz	r0, 800c2e8 <_svfiprintf_r+0x150>
 800c2d8:	9b04      	ldr	r3, [sp, #16]
 800c2da:	eba0 000a 	sub.w	r0, r0, sl
 800c2de:	2240      	movs	r2, #64	; 0x40
 800c2e0:	4082      	lsls	r2, r0
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	3401      	adds	r4, #1
 800c2e6:	9304      	str	r3, [sp, #16]
 800c2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ec:	4825      	ldr	r0, [pc, #148]	; (800c384 <_svfiprintf_r+0x1ec>)
 800c2ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2f2:	2206      	movs	r2, #6
 800c2f4:	f7f3 ff9c 	bl	8000230 <memchr>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d038      	beq.n	800c36e <_svfiprintf_r+0x1d6>
 800c2fc:	4b22      	ldr	r3, [pc, #136]	; (800c388 <_svfiprintf_r+0x1f0>)
 800c2fe:	bb1b      	cbnz	r3, 800c348 <_svfiprintf_r+0x1b0>
 800c300:	9b03      	ldr	r3, [sp, #12]
 800c302:	3307      	adds	r3, #7
 800c304:	f023 0307 	bic.w	r3, r3, #7
 800c308:	3308      	adds	r3, #8
 800c30a:	9303      	str	r3, [sp, #12]
 800c30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c30e:	4433      	add	r3, r6
 800c310:	9309      	str	r3, [sp, #36]	; 0x24
 800c312:	e768      	b.n	800c1e6 <_svfiprintf_r+0x4e>
 800c314:	fb0c 3202 	mla	r2, ip, r2, r3
 800c318:	460c      	mov	r4, r1
 800c31a:	2001      	movs	r0, #1
 800c31c:	e7a6      	b.n	800c26c <_svfiprintf_r+0xd4>
 800c31e:	2300      	movs	r3, #0
 800c320:	3401      	adds	r4, #1
 800c322:	9305      	str	r3, [sp, #20]
 800c324:	4619      	mov	r1, r3
 800c326:	f04f 0c0a 	mov.w	ip, #10
 800c32a:	4620      	mov	r0, r4
 800c32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c330:	3a30      	subs	r2, #48	; 0x30
 800c332:	2a09      	cmp	r2, #9
 800c334:	d903      	bls.n	800c33e <_svfiprintf_r+0x1a6>
 800c336:	2b00      	cmp	r3, #0
 800c338:	d0c6      	beq.n	800c2c8 <_svfiprintf_r+0x130>
 800c33a:	9105      	str	r1, [sp, #20]
 800c33c:	e7c4      	b.n	800c2c8 <_svfiprintf_r+0x130>
 800c33e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c342:	4604      	mov	r4, r0
 800c344:	2301      	movs	r3, #1
 800c346:	e7f0      	b.n	800c32a <_svfiprintf_r+0x192>
 800c348:	ab03      	add	r3, sp, #12
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	462a      	mov	r2, r5
 800c34e:	4b0f      	ldr	r3, [pc, #60]	; (800c38c <_svfiprintf_r+0x1f4>)
 800c350:	a904      	add	r1, sp, #16
 800c352:	4638      	mov	r0, r7
 800c354:	f3af 8000 	nop.w
 800c358:	1c42      	adds	r2, r0, #1
 800c35a:	4606      	mov	r6, r0
 800c35c:	d1d6      	bne.n	800c30c <_svfiprintf_r+0x174>
 800c35e:	89ab      	ldrh	r3, [r5, #12]
 800c360:	065b      	lsls	r3, r3, #25
 800c362:	f53f af2d 	bmi.w	800c1c0 <_svfiprintf_r+0x28>
 800c366:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c368:	b01d      	add	sp, #116	; 0x74
 800c36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36e:	ab03      	add	r3, sp, #12
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	462a      	mov	r2, r5
 800c374:	4b05      	ldr	r3, [pc, #20]	; (800c38c <_svfiprintf_r+0x1f4>)
 800c376:	a904      	add	r1, sp, #16
 800c378:	4638      	mov	r0, r7
 800c37a:	f000 f879 	bl	800c470 <_printf_i>
 800c37e:	e7eb      	b.n	800c358 <_svfiprintf_r+0x1c0>
 800c380:	0800c814 	.word	0x0800c814
 800c384:	0800c81e 	.word	0x0800c81e
 800c388:	00000000 	.word	0x00000000
 800c38c:	0800c0e5 	.word	0x0800c0e5
 800c390:	0800c81a 	.word	0x0800c81a

0800c394 <_printf_common>:
 800c394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c398:	4616      	mov	r6, r2
 800c39a:	4699      	mov	r9, r3
 800c39c:	688a      	ldr	r2, [r1, #8]
 800c39e:	690b      	ldr	r3, [r1, #16]
 800c3a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	bfb8      	it	lt
 800c3a8:	4613      	movlt	r3, r2
 800c3aa:	6033      	str	r3, [r6, #0]
 800c3ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	b10a      	cbz	r2, 800c3ba <_printf_common+0x26>
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	6033      	str	r3, [r6, #0]
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	0699      	lsls	r1, r3, #26
 800c3be:	bf42      	ittt	mi
 800c3c0:	6833      	ldrmi	r3, [r6, #0]
 800c3c2:	3302      	addmi	r3, #2
 800c3c4:	6033      	strmi	r3, [r6, #0]
 800c3c6:	6825      	ldr	r5, [r4, #0]
 800c3c8:	f015 0506 	ands.w	r5, r5, #6
 800c3cc:	d106      	bne.n	800c3dc <_printf_common+0x48>
 800c3ce:	f104 0a19 	add.w	sl, r4, #25
 800c3d2:	68e3      	ldr	r3, [r4, #12]
 800c3d4:	6832      	ldr	r2, [r6, #0]
 800c3d6:	1a9b      	subs	r3, r3, r2
 800c3d8:	42ab      	cmp	r3, r5
 800c3da:	dc26      	bgt.n	800c42a <_printf_common+0x96>
 800c3dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3e0:	1e13      	subs	r3, r2, #0
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	bf18      	it	ne
 800c3e6:	2301      	movne	r3, #1
 800c3e8:	0692      	lsls	r2, r2, #26
 800c3ea:	d42b      	bmi.n	800c444 <_printf_common+0xb0>
 800c3ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3f0:	4649      	mov	r1, r9
 800c3f2:	4638      	mov	r0, r7
 800c3f4:	47c0      	blx	r8
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	d01e      	beq.n	800c438 <_printf_common+0xa4>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	6922      	ldr	r2, [r4, #16]
 800c3fe:	f003 0306 	and.w	r3, r3, #6
 800c402:	2b04      	cmp	r3, #4
 800c404:	bf02      	ittt	eq
 800c406:	68e5      	ldreq	r5, [r4, #12]
 800c408:	6833      	ldreq	r3, [r6, #0]
 800c40a:	1aed      	subeq	r5, r5, r3
 800c40c:	68a3      	ldr	r3, [r4, #8]
 800c40e:	bf0c      	ite	eq
 800c410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c414:	2500      	movne	r5, #0
 800c416:	4293      	cmp	r3, r2
 800c418:	bfc4      	itt	gt
 800c41a:	1a9b      	subgt	r3, r3, r2
 800c41c:	18ed      	addgt	r5, r5, r3
 800c41e:	2600      	movs	r6, #0
 800c420:	341a      	adds	r4, #26
 800c422:	42b5      	cmp	r5, r6
 800c424:	d11a      	bne.n	800c45c <_printf_common+0xc8>
 800c426:	2000      	movs	r0, #0
 800c428:	e008      	b.n	800c43c <_printf_common+0xa8>
 800c42a:	2301      	movs	r3, #1
 800c42c:	4652      	mov	r2, sl
 800c42e:	4649      	mov	r1, r9
 800c430:	4638      	mov	r0, r7
 800c432:	47c0      	blx	r8
 800c434:	3001      	adds	r0, #1
 800c436:	d103      	bne.n	800c440 <_printf_common+0xac>
 800c438:	f04f 30ff 	mov.w	r0, #4294967295
 800c43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c440:	3501      	adds	r5, #1
 800c442:	e7c6      	b.n	800c3d2 <_printf_common+0x3e>
 800c444:	18e1      	adds	r1, r4, r3
 800c446:	1c5a      	adds	r2, r3, #1
 800c448:	2030      	movs	r0, #48	; 0x30
 800c44a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c44e:	4422      	add	r2, r4
 800c450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c458:	3302      	adds	r3, #2
 800c45a:	e7c7      	b.n	800c3ec <_printf_common+0x58>
 800c45c:	2301      	movs	r3, #1
 800c45e:	4622      	mov	r2, r4
 800c460:	4649      	mov	r1, r9
 800c462:	4638      	mov	r0, r7
 800c464:	47c0      	blx	r8
 800c466:	3001      	adds	r0, #1
 800c468:	d0e6      	beq.n	800c438 <_printf_common+0xa4>
 800c46a:	3601      	adds	r6, #1
 800c46c:	e7d9      	b.n	800c422 <_printf_common+0x8e>
	...

0800c470 <_printf_i>:
 800c470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c474:	7e0f      	ldrb	r7, [r1, #24]
 800c476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c478:	2f78      	cmp	r7, #120	; 0x78
 800c47a:	4691      	mov	r9, r2
 800c47c:	4680      	mov	r8, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	469a      	mov	sl, r3
 800c482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c486:	d807      	bhi.n	800c498 <_printf_i+0x28>
 800c488:	2f62      	cmp	r7, #98	; 0x62
 800c48a:	d80a      	bhi.n	800c4a2 <_printf_i+0x32>
 800c48c:	2f00      	cmp	r7, #0
 800c48e:	f000 80d4 	beq.w	800c63a <_printf_i+0x1ca>
 800c492:	2f58      	cmp	r7, #88	; 0x58
 800c494:	f000 80c0 	beq.w	800c618 <_printf_i+0x1a8>
 800c498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c49c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4a0:	e03a      	b.n	800c518 <_printf_i+0xa8>
 800c4a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4a6:	2b15      	cmp	r3, #21
 800c4a8:	d8f6      	bhi.n	800c498 <_printf_i+0x28>
 800c4aa:	a101      	add	r1, pc, #4	; (adr r1, 800c4b0 <_printf_i+0x40>)
 800c4ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4b0:	0800c509 	.word	0x0800c509
 800c4b4:	0800c51d 	.word	0x0800c51d
 800c4b8:	0800c499 	.word	0x0800c499
 800c4bc:	0800c499 	.word	0x0800c499
 800c4c0:	0800c499 	.word	0x0800c499
 800c4c4:	0800c499 	.word	0x0800c499
 800c4c8:	0800c51d 	.word	0x0800c51d
 800c4cc:	0800c499 	.word	0x0800c499
 800c4d0:	0800c499 	.word	0x0800c499
 800c4d4:	0800c499 	.word	0x0800c499
 800c4d8:	0800c499 	.word	0x0800c499
 800c4dc:	0800c621 	.word	0x0800c621
 800c4e0:	0800c549 	.word	0x0800c549
 800c4e4:	0800c5db 	.word	0x0800c5db
 800c4e8:	0800c499 	.word	0x0800c499
 800c4ec:	0800c499 	.word	0x0800c499
 800c4f0:	0800c643 	.word	0x0800c643
 800c4f4:	0800c499 	.word	0x0800c499
 800c4f8:	0800c549 	.word	0x0800c549
 800c4fc:	0800c499 	.word	0x0800c499
 800c500:	0800c499 	.word	0x0800c499
 800c504:	0800c5e3 	.word	0x0800c5e3
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	1d1a      	adds	r2, r3, #4
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	602a      	str	r2, [r5, #0]
 800c510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c518:	2301      	movs	r3, #1
 800c51a:	e09f      	b.n	800c65c <_printf_i+0x1ec>
 800c51c:	6820      	ldr	r0, [r4, #0]
 800c51e:	682b      	ldr	r3, [r5, #0]
 800c520:	0607      	lsls	r7, r0, #24
 800c522:	f103 0104 	add.w	r1, r3, #4
 800c526:	6029      	str	r1, [r5, #0]
 800c528:	d501      	bpl.n	800c52e <_printf_i+0xbe>
 800c52a:	681e      	ldr	r6, [r3, #0]
 800c52c:	e003      	b.n	800c536 <_printf_i+0xc6>
 800c52e:	0646      	lsls	r6, r0, #25
 800c530:	d5fb      	bpl.n	800c52a <_printf_i+0xba>
 800c532:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c536:	2e00      	cmp	r6, #0
 800c538:	da03      	bge.n	800c542 <_printf_i+0xd2>
 800c53a:	232d      	movs	r3, #45	; 0x2d
 800c53c:	4276      	negs	r6, r6
 800c53e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c542:	485a      	ldr	r0, [pc, #360]	; (800c6ac <_printf_i+0x23c>)
 800c544:	230a      	movs	r3, #10
 800c546:	e012      	b.n	800c56e <_printf_i+0xfe>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	6820      	ldr	r0, [r4, #0]
 800c54c:	1d19      	adds	r1, r3, #4
 800c54e:	6029      	str	r1, [r5, #0]
 800c550:	0605      	lsls	r5, r0, #24
 800c552:	d501      	bpl.n	800c558 <_printf_i+0xe8>
 800c554:	681e      	ldr	r6, [r3, #0]
 800c556:	e002      	b.n	800c55e <_printf_i+0xee>
 800c558:	0641      	lsls	r1, r0, #25
 800c55a:	d5fb      	bpl.n	800c554 <_printf_i+0xe4>
 800c55c:	881e      	ldrh	r6, [r3, #0]
 800c55e:	4853      	ldr	r0, [pc, #332]	; (800c6ac <_printf_i+0x23c>)
 800c560:	2f6f      	cmp	r7, #111	; 0x6f
 800c562:	bf0c      	ite	eq
 800c564:	2308      	moveq	r3, #8
 800c566:	230a      	movne	r3, #10
 800c568:	2100      	movs	r1, #0
 800c56a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c56e:	6865      	ldr	r5, [r4, #4]
 800c570:	60a5      	str	r5, [r4, #8]
 800c572:	2d00      	cmp	r5, #0
 800c574:	bfa2      	ittt	ge
 800c576:	6821      	ldrge	r1, [r4, #0]
 800c578:	f021 0104 	bicge.w	r1, r1, #4
 800c57c:	6021      	strge	r1, [r4, #0]
 800c57e:	b90e      	cbnz	r6, 800c584 <_printf_i+0x114>
 800c580:	2d00      	cmp	r5, #0
 800c582:	d04b      	beq.n	800c61c <_printf_i+0x1ac>
 800c584:	4615      	mov	r5, r2
 800c586:	fbb6 f1f3 	udiv	r1, r6, r3
 800c58a:	fb03 6711 	mls	r7, r3, r1, r6
 800c58e:	5dc7      	ldrb	r7, [r0, r7]
 800c590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c594:	4637      	mov	r7, r6
 800c596:	42bb      	cmp	r3, r7
 800c598:	460e      	mov	r6, r1
 800c59a:	d9f4      	bls.n	800c586 <_printf_i+0x116>
 800c59c:	2b08      	cmp	r3, #8
 800c59e:	d10b      	bne.n	800c5b8 <_printf_i+0x148>
 800c5a0:	6823      	ldr	r3, [r4, #0]
 800c5a2:	07de      	lsls	r6, r3, #31
 800c5a4:	d508      	bpl.n	800c5b8 <_printf_i+0x148>
 800c5a6:	6923      	ldr	r3, [r4, #16]
 800c5a8:	6861      	ldr	r1, [r4, #4]
 800c5aa:	4299      	cmp	r1, r3
 800c5ac:	bfde      	ittt	le
 800c5ae:	2330      	movle	r3, #48	; 0x30
 800c5b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5b8:	1b52      	subs	r2, r2, r5
 800c5ba:	6122      	str	r2, [r4, #16]
 800c5bc:	f8cd a000 	str.w	sl, [sp]
 800c5c0:	464b      	mov	r3, r9
 800c5c2:	aa03      	add	r2, sp, #12
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	f7ff fee4 	bl	800c394 <_printf_common>
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d14a      	bne.n	800c666 <_printf_i+0x1f6>
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d4:	b004      	add	sp, #16
 800c5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	f043 0320 	orr.w	r3, r3, #32
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	4833      	ldr	r0, [pc, #204]	; (800c6b0 <_printf_i+0x240>)
 800c5e4:	2778      	movs	r7, #120	; 0x78
 800c5e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	6829      	ldr	r1, [r5, #0]
 800c5ee:	061f      	lsls	r7, r3, #24
 800c5f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5f4:	d402      	bmi.n	800c5fc <_printf_i+0x18c>
 800c5f6:	065f      	lsls	r7, r3, #25
 800c5f8:	bf48      	it	mi
 800c5fa:	b2b6      	uxthmi	r6, r6
 800c5fc:	07df      	lsls	r7, r3, #31
 800c5fe:	bf48      	it	mi
 800c600:	f043 0320 	orrmi.w	r3, r3, #32
 800c604:	6029      	str	r1, [r5, #0]
 800c606:	bf48      	it	mi
 800c608:	6023      	strmi	r3, [r4, #0]
 800c60a:	b91e      	cbnz	r6, 800c614 <_printf_i+0x1a4>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	f023 0320 	bic.w	r3, r3, #32
 800c612:	6023      	str	r3, [r4, #0]
 800c614:	2310      	movs	r3, #16
 800c616:	e7a7      	b.n	800c568 <_printf_i+0xf8>
 800c618:	4824      	ldr	r0, [pc, #144]	; (800c6ac <_printf_i+0x23c>)
 800c61a:	e7e4      	b.n	800c5e6 <_printf_i+0x176>
 800c61c:	4615      	mov	r5, r2
 800c61e:	e7bd      	b.n	800c59c <_printf_i+0x12c>
 800c620:	682b      	ldr	r3, [r5, #0]
 800c622:	6826      	ldr	r6, [r4, #0]
 800c624:	6961      	ldr	r1, [r4, #20]
 800c626:	1d18      	adds	r0, r3, #4
 800c628:	6028      	str	r0, [r5, #0]
 800c62a:	0635      	lsls	r5, r6, #24
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	d501      	bpl.n	800c634 <_printf_i+0x1c4>
 800c630:	6019      	str	r1, [r3, #0]
 800c632:	e002      	b.n	800c63a <_printf_i+0x1ca>
 800c634:	0670      	lsls	r0, r6, #25
 800c636:	d5fb      	bpl.n	800c630 <_printf_i+0x1c0>
 800c638:	8019      	strh	r1, [r3, #0]
 800c63a:	2300      	movs	r3, #0
 800c63c:	6123      	str	r3, [r4, #16]
 800c63e:	4615      	mov	r5, r2
 800c640:	e7bc      	b.n	800c5bc <_printf_i+0x14c>
 800c642:	682b      	ldr	r3, [r5, #0]
 800c644:	1d1a      	adds	r2, r3, #4
 800c646:	602a      	str	r2, [r5, #0]
 800c648:	681d      	ldr	r5, [r3, #0]
 800c64a:	6862      	ldr	r2, [r4, #4]
 800c64c:	2100      	movs	r1, #0
 800c64e:	4628      	mov	r0, r5
 800c650:	f7f3 fdee 	bl	8000230 <memchr>
 800c654:	b108      	cbz	r0, 800c65a <_printf_i+0x1ea>
 800c656:	1b40      	subs	r0, r0, r5
 800c658:	6060      	str	r0, [r4, #4]
 800c65a:	6863      	ldr	r3, [r4, #4]
 800c65c:	6123      	str	r3, [r4, #16]
 800c65e:	2300      	movs	r3, #0
 800c660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c664:	e7aa      	b.n	800c5bc <_printf_i+0x14c>
 800c666:	6923      	ldr	r3, [r4, #16]
 800c668:	462a      	mov	r2, r5
 800c66a:	4649      	mov	r1, r9
 800c66c:	4640      	mov	r0, r8
 800c66e:	47d0      	blx	sl
 800c670:	3001      	adds	r0, #1
 800c672:	d0ad      	beq.n	800c5d0 <_printf_i+0x160>
 800c674:	6823      	ldr	r3, [r4, #0]
 800c676:	079b      	lsls	r3, r3, #30
 800c678:	d413      	bmi.n	800c6a2 <_printf_i+0x232>
 800c67a:	68e0      	ldr	r0, [r4, #12]
 800c67c:	9b03      	ldr	r3, [sp, #12]
 800c67e:	4298      	cmp	r0, r3
 800c680:	bfb8      	it	lt
 800c682:	4618      	movlt	r0, r3
 800c684:	e7a6      	b.n	800c5d4 <_printf_i+0x164>
 800c686:	2301      	movs	r3, #1
 800c688:	4632      	mov	r2, r6
 800c68a:	4649      	mov	r1, r9
 800c68c:	4640      	mov	r0, r8
 800c68e:	47d0      	blx	sl
 800c690:	3001      	adds	r0, #1
 800c692:	d09d      	beq.n	800c5d0 <_printf_i+0x160>
 800c694:	3501      	adds	r5, #1
 800c696:	68e3      	ldr	r3, [r4, #12]
 800c698:	9903      	ldr	r1, [sp, #12]
 800c69a:	1a5b      	subs	r3, r3, r1
 800c69c:	42ab      	cmp	r3, r5
 800c69e:	dcf2      	bgt.n	800c686 <_printf_i+0x216>
 800c6a0:	e7eb      	b.n	800c67a <_printf_i+0x20a>
 800c6a2:	2500      	movs	r5, #0
 800c6a4:	f104 0619 	add.w	r6, r4, #25
 800c6a8:	e7f5      	b.n	800c696 <_printf_i+0x226>
 800c6aa:	bf00      	nop
 800c6ac:	0800c825 	.word	0x0800c825
 800c6b0:	0800c836 	.word	0x0800c836

0800c6b4 <memmove>:
 800c6b4:	4288      	cmp	r0, r1
 800c6b6:	b510      	push	{r4, lr}
 800c6b8:	eb01 0402 	add.w	r4, r1, r2
 800c6bc:	d902      	bls.n	800c6c4 <memmove+0x10>
 800c6be:	4284      	cmp	r4, r0
 800c6c0:	4623      	mov	r3, r4
 800c6c2:	d807      	bhi.n	800c6d4 <memmove+0x20>
 800c6c4:	1e43      	subs	r3, r0, #1
 800c6c6:	42a1      	cmp	r1, r4
 800c6c8:	d008      	beq.n	800c6dc <memmove+0x28>
 800c6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6d2:	e7f8      	b.n	800c6c6 <memmove+0x12>
 800c6d4:	4402      	add	r2, r0
 800c6d6:	4601      	mov	r1, r0
 800c6d8:	428a      	cmp	r2, r1
 800c6da:	d100      	bne.n	800c6de <memmove+0x2a>
 800c6dc:	bd10      	pop	{r4, pc}
 800c6de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6e6:	e7f7      	b.n	800c6d8 <memmove+0x24>

0800c6e8 <_sbrk_r>:
 800c6e8:	b538      	push	{r3, r4, r5, lr}
 800c6ea:	4d06      	ldr	r5, [pc, #24]	; (800c704 <_sbrk_r+0x1c>)
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	4608      	mov	r0, r1
 800c6f2:	602b      	str	r3, [r5, #0]
 800c6f4:	f7f6 fe14 	bl	8003320 <_sbrk>
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	d102      	bne.n	800c702 <_sbrk_r+0x1a>
 800c6fc:	682b      	ldr	r3, [r5, #0]
 800c6fe:	b103      	cbz	r3, 800c702 <_sbrk_r+0x1a>
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	20000eb8 	.word	0x20000eb8

0800c708 <_realloc_r>:
 800c708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70c:	4680      	mov	r8, r0
 800c70e:	4614      	mov	r4, r2
 800c710:	460e      	mov	r6, r1
 800c712:	b921      	cbnz	r1, 800c71e <_realloc_r+0x16>
 800c714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c718:	4611      	mov	r1, r2
 800c71a:	f7ff bc57 	b.w	800bfcc <_malloc_r>
 800c71e:	b92a      	cbnz	r2, 800c72c <_realloc_r+0x24>
 800c720:	f7ff fbe8 	bl	800bef4 <_free_r>
 800c724:	4625      	mov	r5, r4
 800c726:	4628      	mov	r0, r5
 800c728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c72c:	f000 f81b 	bl	800c766 <_malloc_usable_size_r>
 800c730:	4284      	cmp	r4, r0
 800c732:	4607      	mov	r7, r0
 800c734:	d802      	bhi.n	800c73c <_realloc_r+0x34>
 800c736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c73a:	d812      	bhi.n	800c762 <_realloc_r+0x5a>
 800c73c:	4621      	mov	r1, r4
 800c73e:	4640      	mov	r0, r8
 800c740:	f7ff fc44 	bl	800bfcc <_malloc_r>
 800c744:	4605      	mov	r5, r0
 800c746:	2800      	cmp	r0, #0
 800c748:	d0ed      	beq.n	800c726 <_realloc_r+0x1e>
 800c74a:	42bc      	cmp	r4, r7
 800c74c:	4622      	mov	r2, r4
 800c74e:	4631      	mov	r1, r6
 800c750:	bf28      	it	cs
 800c752:	463a      	movcs	r2, r7
 800c754:	f7ff fbc0 	bl	800bed8 <memcpy>
 800c758:	4631      	mov	r1, r6
 800c75a:	4640      	mov	r0, r8
 800c75c:	f7ff fbca 	bl	800bef4 <_free_r>
 800c760:	e7e1      	b.n	800c726 <_realloc_r+0x1e>
 800c762:	4635      	mov	r5, r6
 800c764:	e7df      	b.n	800c726 <_realloc_r+0x1e>

0800c766 <_malloc_usable_size_r>:
 800c766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c76a:	1f18      	subs	r0, r3, #4
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bfbc      	itt	lt
 800c770:	580b      	ldrlt	r3, [r1, r0]
 800c772:	18c0      	addlt	r0, r0, r3
 800c774:	4770      	bx	lr
	...

0800c778 <_init>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	bf00      	nop
 800c77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c77e:	bc08      	pop	{r3}
 800c780:	469e      	mov	lr, r3
 800c782:	4770      	bx	lr

0800c784 <_fini>:
 800c784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c786:	bf00      	nop
 800c788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c78a:	bc08      	pop	{r3}
 800c78c:	469e      	mov	lr, r3
 800c78e:	4770      	bx	lr
