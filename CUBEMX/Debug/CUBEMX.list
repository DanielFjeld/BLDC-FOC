
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c770  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c950  0800c950  0001c950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca08  0800ca08  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca08  0800ca08  0001ca08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca10  0800ca10  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca10  0800ca10  0001ca10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca14  0800ca14  0001ca14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800ca18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da4  20000134  0800cb4c  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed8  0800cb4c  00020ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025476  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e6a  00000000  00000000  0004561d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  0004a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016de  00000000  00000000  0004c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255c7  00000000  00000000  0004d92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029ebb  00000000  00000000  00072ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d0a  00000000  00000000  0009cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000820c  00000000  00000000  00185abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000134 	.word	0x20000134
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c938 	.word	0x0800c938

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000138 	.word	0x20000138
 800021c:	0800c938 	.word	0x0800c938

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <Update_FIR_filter+0x88>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <Update_FIR_filter+0x8c>)
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
	float temp = 0;
 80005e4:	f04f 0300 	mov.w	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	e016      	b.n	800061e <Update_FIR_filter+0x52>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 80005f0:	4a1a      	ldr	r2, [pc, #104]	; (800065c <Update_FIR_filter+0x90>)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	ed93 7a00 	vldr	s14, [r3]
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <Update_FIR_filter+0x8c>)
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	edd3 7a00 	vldr	s15, [r3]
 8000608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800060c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000614:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b09      	cmp	r3, #9
 8000622:	dde5      	ble.n	80005f0 <Update_FIR_filter+0x24>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <Update_FIR_filter+0x88>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b08      	cmp	r3, #8
 800062a:	d806      	bhi.n	800063a <Update_FIR_filter+0x6e>
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <Update_FIR_filter+0x88>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <Update_FIR_filter+0x88>)
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	e002      	b.n	8000640 <Update_FIR_filter+0x74>
	else FIR_index = 0;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <Update_FIR_filter+0x88>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	return temp;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	ee07 3a90 	vmov	s15, r3
}
 8000646:	eeb0 0a67 	vmov.f32	s0, s15
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	2000018c 	.word	0x2000018c
 8000658:	20000190 	.word	0x20000190
 800065c:	20000000 	.word	0x20000000

08000660 <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d008      	beq.n	8000680 <Current_IRQ+0x20>
 800066e:	2210      	movs	r2, #16
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <Current_IRQ+0x28>)
 8000674:	f00b fd10 	bl	800c098 <memcpy>
    else return;
    Current_Callback_flag = 1;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <Current_IRQ+0x2c>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e000      	b.n	8000682 <Current_IRQ+0x22>
    else return;
 8000680:	bf00      	nop
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000160 	.word	0x20000160
 800068c:	20000150 	.word	0x20000150

08000690 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8000698:	2208      	movs	r2, #8
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <Voltage_Temp_IRQ+0x1c>)
 800069e:	f00b fcfb 	bl	800c098 <memcpy>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000170 	.word	0x20000170

080006b0 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 80006b8:	2214      	movs	r2, #20
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <Encoders_IRQ+0x1c>)
 80006be:	f00b fceb 	bl	800c098 <memcpy>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000178 	.word	0x20000178

080006d0 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 80006d8:	220c      	movs	r2, #12
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	4803      	ldr	r0, [pc, #12]	; (80006ec <Can_RX_Status_IRQ+0x1c>)
 80006de:	f00b fcdb 	bl	800c098 <memcpy>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200001b8 	.word	0x200001b8

080006f0 <check_value>:
	.max = 10,
	.min = 0
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000702:	ed97 7a00 	vldr	s14, [r7]
 8000706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070e:	da09      	bge.n	8000724 <check_value+0x34>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	edd3 7a02 	vldr	s15, [r3, #8]
 8000716:	ed97 7a00 	vldr	s14, [r7]
 800071a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800071e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000722:	d801      	bhi.n	8000728 <check_value+0x38>
 8000724:	2302      	movs	r3, #2
 8000726:	e016      	b.n	8000756 <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	edd3 7a04 	vldr	s15, [r3, #16]
 800072e:	ed97 7a00 	vldr	s14, [r7]
 8000732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	da09      	bge.n	8000750 <check_value+0x60>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000742:	ed97 7a00 	vldr	s14, [r7]
 8000746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074e:	d801      	bhi.n	8000754 <check_value+0x64>
 8000750:	2301      	movs	r3, #1
 8000752:	e000      	b.n	8000756 <check_value+0x66>
	return LIMIT_OK;																	//OK
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <BLDC_main>:
	if(value < ptr->min)return ptr->min;
	return value;
}

//------------------------MAIN-------------------------
void BLDC_main(void){
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	f5ad 7d64 	sub.w	sp, sp, #912	; 0x390
 800076a:	af02      	add	r7, sp, #8
	HAL_Delay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f003 fa2a 	bl	8003bc8 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 8000774:	2128      	movs	r1, #40	; 0x28
 8000776:	48a6      	ldr	r0, [pc, #664]	; (8000a10 <BLDC_main+0x2ac>)
 8000778:	f001 f9b4 	bl	8001ae4 <SetSampleTime>
	SetTunings(&Current_PID, 0.0000005f, 0.5f, 0.0f, 1); //alva
 800077c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000780:	ed9f 1aa4 	vldr	s2, [pc, #656]	; 8000a14 <BLDC_main+0x2b0>
 8000784:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000788:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8000a18 <BLDC_main+0x2b4>
 800078c:	48a0      	ldr	r0, [pc, #640]	; (8000a10 <BLDC_main+0x2ac>)
 800078e:	f001 f8ef 	bl	8001970 <SetTunings>
//	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
	SetOutputLimits(&Current_PID, 0, 1499);
 8000792:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8000a1c <BLDC_main+0x2b8>
 8000796:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8000a14 <BLDC_main+0x2b0>
 800079a:	489d      	ldr	r0, [pc, #628]	; (8000a10 <BLDC_main+0x2ac>)
 800079c:	f001 f9d6 	bl	8001b4c <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 80007a0:	2100      	movs	r1, #0
 80007a2:	489b      	ldr	r0, [pc, #620]	; (8000a10 <BLDC_main+0x2ac>)
 80007a4:	f001 fa82 	bl	8001cac <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 80007a8:	2101      	movs	r1, #1
 80007aa:	4899      	ldr	r0, [pc, #612]	; (8000a10 <BLDC_main+0x2ac>)
 80007ac:	f001 fa2a 	bl	8001c04 <SetMode>
	Initialize(&Current_PID);
 80007b0:	4897      	ldr	r0, [pc, #604]	; (8000a10 <BLDC_main+0x2ac>)
 80007b2:	f001 fa49 	bl	8001c48 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 80007b6:	2164      	movs	r1, #100	; 0x64
 80007b8:	4899      	ldr	r0, [pc, #612]	; (8000a20 <BLDC_main+0x2bc>)
 80007ba:	f001 f993 	bl	8001ae4 <SetSampleTime>
	SetTunings(&Velocity_PID, 0.0005f, 0.03f, 0.0f, 1);
 80007be:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80007c2:	ed9f 1a94 	vldr	s2, [pc, #592]	; 8000a14 <BLDC_main+0x2b0>
 80007c6:	eddf 0a97 	vldr	s1, [pc, #604]	; 8000a24 <BLDC_main+0x2c0>
 80007ca:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8000a28 <BLDC_main+0x2c4>
 80007ce:	4894      	ldr	r0, [pc, #592]	; (8000a20 <BLDC_main+0x2bc>)
 80007d0:	f001 f8ce 	bl	8001970 <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 500);
 80007d4:	eddf 0a95 	vldr	s1, [pc, #596]	; 8000a2c <BLDC_main+0x2c8>
 80007d8:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8000a14 <BLDC_main+0x2b0>
 80007dc:	4890      	ldr	r0, [pc, #576]	; (8000a20 <BLDC_main+0x2bc>)
 80007de:	f001 f9b5 	bl	8001b4c <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80007e2:	2100      	movs	r1, #0
 80007e4:	488e      	ldr	r0, [pc, #568]	; (8000a20 <BLDC_main+0x2bc>)
 80007e6:	f001 fa61 	bl	8001cac <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80007ea:	2101      	movs	r1, #1
 80007ec:	488c      	ldr	r0, [pc, #560]	; (8000a20 <BLDC_main+0x2bc>)
 80007ee:	f001 fa09 	bl	8001c04 <SetMode>
	Initialize(&Velocity_PID);
 80007f2:	488b      	ldr	r0, [pc, #556]	; (8000a20 <BLDC_main+0x2bc>)
 80007f4:	f001 fa28 	bl	8001c48 <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80007f8:	2164      	movs	r1, #100	; 0x64
 80007fa:	488d      	ldr	r0, [pc, #564]	; (8000a30 <BLDC_main+0x2cc>)
 80007fc:	f001 f972 	bl	8001ae4 <SetSampleTime>
	SetTunings(&Angle_PID, 10.0f, 0.0f, 0.0f, 1);
 8000800:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000804:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8000a14 <BLDC_main+0x2b0>
 8000808:	eddf 0a82 	vldr	s1, [pc, #520]	; 8000a14 <BLDC_main+0x2b0>
 800080c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000810:	4887      	ldr	r0, [pc, #540]	; (8000a30 <BLDC_main+0x2cc>)
 8000812:	f001 f8ad 	bl	8001970 <SetTunings>
	SetOutputLimits(&Angle_PID, -4000000, 4000000);
 8000816:	eddf 0a87 	vldr	s1, [pc, #540]	; 8000a34 <BLDC_main+0x2d0>
 800081a:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8000a38 <BLDC_main+0x2d4>
 800081e:	4884      	ldr	r0, [pc, #528]	; (8000a30 <BLDC_main+0x2cc>)
 8000820:	f001 f994 	bl	8001b4c <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8000824:	2100      	movs	r1, #0
 8000826:	4882      	ldr	r0, [pc, #520]	; (8000a30 <BLDC_main+0x2cc>)
 8000828:	f001 fa40 	bl	8001cac <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 800082c:	2101      	movs	r1, #1
 800082e:	4880      	ldr	r0, [pc, #512]	; (8000a30 <BLDC_main+0x2cc>)
 8000830:	f001 f9e8 	bl	8001c04 <SetMode>
	Initialize(&Angle_PID);
 8000834:	487e      	ldr	r0, [pc, #504]	; (8000a30 <BLDC_main+0x2cc>)
 8000836:	f001 fa07 	bl	8001c48 <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 800083a:	4880      	ldr	r0, [pc, #512]	; (8000a3c <BLDC_main+0x2d8>)
 800083c:	f000 fe78 	bl	8001530 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 8000840:	487f      	ldr	r0, [pc, #508]	; (8000a40 <BLDC_main+0x2dc>)
 8000842:	f001 fb13 	bl	8001e6c <current_init>

	//calibrate DC current offset
	HAL_Delay(1000); //let thing settle before starting
 8000846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084a:	f003 f9bd 	bl	8003bc8 <HAL_Delay>

	uint16_t current_offset_averaging = 100;
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	f8a7 3386 	strh.w	r3, [r7, #902]	; 0x386
	volatile int32_t current_offset = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
	while (current_offset_averaging){
 800085a:	e013      	b.n	8000884 <BLDC_main+0x120>
		while(!Current_Callback_flag);
 800085c:	bf00      	nop
 800085e:	4b79      	ldr	r3, [pc, #484]	; (8000a44 <BLDC_main+0x2e0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0fb      	beq.n	800085e <BLDC_main+0xfa>
		Current_Callback_flag = 0;
 8000866:	4b77      	ldr	r3, [pc, #476]	; (8000a44 <BLDC_main+0x2e0>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
		current_offset += IRQ_Current.Current_DC;
 800086c:	4b76      	ldr	r3, [pc, #472]	; (8000a48 <BLDC_main+0x2e4>)
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000874:	4413      	add	r3, r2
 8000876:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
		current_offset_averaging--;
 800087a:	f8b7 3386 	ldrh.w	r3, [r7, #902]	; 0x386
 800087e:	3b01      	subs	r3, #1
 8000880:	f8a7 3386 	strh.w	r3, [r7, #902]	; 0x386
	while (current_offset_averaging){
 8000884:	f8b7 3386 	ldrh.w	r3, [r7, #902]	; 0x386
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1e7      	bne.n	800085c <BLDC_main+0xf8>
	}
	current_offset = current_offset/100;
 800088c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000890:	4a6e      	ldr	r2, [pc, #440]	; (8000a4c <BLDC_main+0x2e8>)
 8000892:	fb82 1203 	smull	r1, r2, r2, r3
 8000896:	1152      	asrs	r2, r2, #5
 8000898:	17db      	asrs	r3, r3, #31
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 80008a0:	486b      	ldr	r0, [pc, #428]	; (8000a50 <BLDC_main+0x2ec>)
 80008a2:	f001 faff 	bl	8001ea4 <voltage_temperature_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80008a6:	4a6b      	ldr	r2, [pc, #428]	; (8000a54 <BLDC_main+0x2f0>)
 80008a8:	2136      	movs	r1, #54	; 0x36
 80008aa:	486b      	ldr	r0, [pc, #428]	; (8000a58 <BLDC_main+0x2f4>)
 80008ac:	f001 fd7c 	bl	80023a8 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 80008b0:	4869      	ldr	r0, [pc, #420]	; (8000a58 <BLDC_main+0x2f4>)
 80008b2:	f001 fd5d 	bl	8002370 <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 80008b6:	f000 fc69 	bl	800118c <CTRL_init_PWM>

	HAL_Delay(100); //let thing settle before starting
 80008ba:	2064      	movs	r0, #100	; 0x64
 80008bc:	f003 f984 	bl	8003bc8 <HAL_Delay>

	Current IRQ_Current_BUFF = {0};
 80008c0:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 80008ce:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
	Encoders IRQ_Encoders_BUFF = {0};
 80008d8:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 80008e8:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]

	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385

	float velocity_temp[200] = {0};
 80008fa:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80008fe:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8000902:	4618      	mov	r0, r3
 8000904:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000908:	461a      	mov	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f00b fb90 	bl	800c030 <memset>
	uint32_t last_pos = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
	uint8_t velocity_index = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
	float velocity = 0;
 800091c:	f04f 0300 	mov.w	r3, #0
 8000920:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378

	int32_t position_overflow = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 800092a:	bf00      	nop
 800092c:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <BLDC_main+0x2e0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0fb      	beq.n	800092c <BLDC_main+0x1c8>

		Current_Callback_flag = 0;
 8000934:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <BLDC_main+0x2e0>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 800093a:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <BLDC_main+0x2e4>)
 800093c:	f507 7453 	add.w	r4, r7, #844	; 0x34c
 8000940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8000946:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <BLDC_main+0x2f8>)
 8000948:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800094c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000950:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8000954:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <BLDC_main+0x2fc>)
 8000956:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800095a:	461d      	mov	r5, r3
 800095c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	6023      	str	r3, [r4, #0]
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8000964:	4a3f      	ldr	r2, [pc, #252]	; (8000a64 <BLDC_main+0x300>)
 8000966:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800096a:	ca07      	ldmia	r2, {r0, r1, r2}
 800096c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		IRQ_Current_BUFF.Current_DC -= current_offset;
 8000970:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000974:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358

		//start calibration
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 800097e:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000982:	2b00      	cmp	r3, #0
 8000984:	d107      	bne.n	8000996 <BLDC_main+0x232>
 8000986:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800098a:	2b04      	cmp	r3, #4
 800098c:	d103      	bne.n	8000996 <BLDC_main+0x232>
 800098e:	2302      	movs	r3, #2
 8000990:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
 8000994:	e075      	b.n	8000a82 <BLDC_main+0x31e>

		//reset errors
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8000996:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 800099a:	2b00      	cmp	r3, #0
 800099c:	d107      	bne.n	80009ae <BLDC_main+0x24a>
 800099e:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	d103      	bne.n	80009ae <BLDC_main+0x24a>
 80009a6:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <BLDC_main+0x304>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e069      	b.n	8000a82 <BLDC_main+0x31e>

		//start motor when not running
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 80009ae:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d113      	bne.n	80009de <BLDC_main+0x27a>
 80009b6:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d10f      	bne.n	80009de <BLDC_main+0x27a>
			Status = BLDC_RUNNING;
 80009be:	2303      	movs	r3, #3
 80009c0:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
			SetMode(&Current_PID,  AUTOMATIC);
 80009c4:	2101      	movs	r1, #1
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <BLDC_main+0x2ac>)
 80009c8:	f001 f91c 	bl	8001c04 <SetMode>
			SetMode(&Velocity_PID,  AUTOMATIC);
 80009cc:	2101      	movs	r1, #1
 80009ce:	4814      	ldr	r0, [pc, #80]	; (8000a20 <BLDC_main+0x2bc>)
 80009d0:	f001 f918 	bl	8001c04 <SetMode>
			SetMode(&Angle_PID,  AUTOMATIC);
 80009d4:	2101      	movs	r1, #1
 80009d6:	4816      	ldr	r0, [pc, #88]	; (8000a30 <BLDC_main+0x2cc>)
 80009d8:	f001 f914 	bl	8001c04 <SetMode>
 80009dc:	e051      	b.n	8000a82 <BLDC_main+0x31e>
		}

		//stop motor when running
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 80009de:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d142      	bne.n	8000a6c <BLDC_main+0x308>
 80009e6:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d13e      	bne.n	8000a6c <BLDC_main+0x308>
			Status = BLDC_STOPPED_WITH_BREAK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
			SetMode(&Current_PID,  MANUAL);
 80009f4:	2100      	movs	r1, #0
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <BLDC_main+0x2ac>)
 80009f8:	f001 f904 	bl	8001c04 <SetMode>
			SetMode(&Velocity_PID,  MANUAL);
 80009fc:	2100      	movs	r1, #0
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <BLDC_main+0x2bc>)
 8000a00:	f001 f900 	bl	8001c04 <SetMode>
			SetMode(&Angle_PID,  MANUAL);
 8000a04:	2100      	movs	r1, #0
 8000a06:	480a      	ldr	r0, [pc, #40]	; (8000a30 <BLDC_main+0x2cc>)
 8000a08:	f001 f8fc 	bl	8001c04 <SetMode>
 8000a0c:	e039      	b.n	8000a82 <BLDC_main+0x31e>
 8000a0e:	bf00      	nop
 8000a10:	20000204 	.word	0x20000204
 8000a14:	00000000 	.word	0x00000000
 8000a18:	350637bd 	.word	0x350637bd
 8000a1c:	44bb6000 	.word	0x44bb6000
 8000a20:	20000244 	.word	0x20000244
 8000a24:	3cf5c28f 	.word	0x3cf5c28f
 8000a28:	3a03126f 	.word	0x3a03126f
 8000a2c:	43fa0000 	.word	0x43fa0000
 8000a30:	20000284 	.word	0x20000284
 8000a34:	4a742400 	.word	0x4a742400
 8000a38:	ca742400 	.word	0xca742400
 8000a3c:	080006b1 	.word	0x080006b1
 8000a40:	08000661 	.word	0x08000661
 8000a44:	20000150 	.word	0x20000150
 8000a48:	20000160 	.word	0x20000160
 8000a4c:	51eb851f 	.word	0x51eb851f
 8000a50:	08000691 	.word	0x08000691
 8000a54:	080006d1 	.word	0x080006d1
 8000a58:	2000091c 	.word	0x2000091c
 8000a5c:	20000170 	.word	0x20000170
 8000a60:	20000178 	.word	0x20000178
 8000a64:	200001b8 	.word	0x200001b8
 8000a68:	2000015c 	.word	0x2000015c
		}
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8000a6c:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d106      	bne.n	8000a82 <BLDC_main+0x31e>
 8000a74:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d102      	bne.n	8000a82 <BLDC_main+0x31e>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385

		//time keepers
		timing_CAN_feedback++;
 8000a82:	4bcf      	ldr	r3, [pc, #828]	; (8000dc0 <BLDC_main+0x65c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4acd      	ldr	r2, [pc, #820]	; (8000dc0 <BLDC_main+0x65c>)
 8000a8a:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8000a8c:	4bcd      	ldr	r3, [pc, #820]	; (8000dc4 <BLDC_main+0x660>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4acc      	ldr	r2, [pc, #816]	; (8000dc4 <BLDC_main+0x660>)
 8000a94:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		LIMITS_t Limit_callback;

		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
 8000a9c:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000aa0:	ee07 3a90 	vmov	s15, r3
 8000aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8000aac:	48c6      	ldr	r0, [pc, #792]	; (8000dc8 <BLDC_main+0x664>)
 8000aae:	f7ff fe1f 	bl	80006f0 <check_value>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 0; //warning
 8000ab8:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 0; //error
 8000aca:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000ace:	105b      	asrs	r3, r3, #1
 8000ad0:	f003 0201 	and.w	r2, r3, #1
 8000ad4:	4bbd      	ldr	r3, [pc, #756]	; (8000dcc <BLDC_main+0x668>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	4abc      	ldr	r2, [pc, #752]	; (8000dcc <BLDC_main+0x668>)
 8000adc:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 8000ade:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aea:	eeb0 0a67 	vmov.f32	s0, s15
 8000aee:	48b8      	ldr	r0, [pc, #736]	; (8000dd0 <BLDC_main+0x66c>)
 8000af0:	f7ff fdfe 	bl	80006f0 <check_value>
 8000af4:	4603      	mov	r3, r0
 8000af6:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 1; //warning
 8000afa:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 1; //error
 8000b0e:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b12:	f003 0202 	and.w	r2, r3, #2
 8000b16:	4bad      	ldr	r3, [pc, #692]	; (8000dcc <BLDC_main+0x668>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	4aab      	ldr	r2, [pc, #684]	; (8000dcc <BLDC_main+0x668>)
 8000b1e:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 8000b20:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b30:	48a8      	ldr	r0, [pc, #672]	; (8000dd4 <BLDC_main+0x670>)
 8000b32:	f7ff fddd 	bl	80006f0 <check_value>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 2; //warning
 8000b3c:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 2; //error
 8000b50:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b54:	105b      	asrs	r3, r3, #1
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	f003 0204 	and.w	r2, r3, #4
 8000b5c:	4b9b      	ldr	r3, [pc, #620]	; (8000dcc <BLDC_main+0x668>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	4a9a      	ldr	r2, [pc, #616]	; (8000dcc <BLDC_main+0x668>)
 8000b64:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 8000b66:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000b6a:	ee07 3a90 	vmov	s15, r3
 8000b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b72:	eeb0 0a67 	vmov.f32	s0, s15
 8000b76:	4898      	ldr	r0, [pc, #608]	; (8000dd8 <BLDC_main+0x674>)
 8000b78:	f7ff fdba 	bl	80006f0 <check_value>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 3; //warning
 8000b82:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000b90:	4313      	orrs	r3, r2
 8000b92:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8000b96:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000b9a:	105b      	asrs	r3, r3, #1
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	f003 0208 	and.w	r2, r3, #8
 8000ba2:	4b8a      	ldr	r3, [pc, #552]	; (8000dcc <BLDC_main+0x668>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	4a88      	ldr	r2, [pc, #544]	; (8000dcc <BLDC_main+0x668>)
 8000baa:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 8000bac:	f8b7 3348 	ldrh.w	r3, [r7, #840]	; 0x348
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	4887      	ldr	r0, [pc, #540]	; (8000ddc <BLDC_main+0x678>)
 8000bbe:	f7ff fd97 	bl	80006f0 <check_value>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 4; //warning
 8000bc8:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 4; //error
 8000bdc:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000be0:	105b      	asrs	r3, r3, #1
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	f003 0210 	and.w	r2, r3, #16
 8000be8:	4b78      	ldr	r3, [pc, #480]	; (8000dcc <BLDC_main+0x668>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	4a77      	ldr	r2, [pc, #476]	; (8000dcc <BLDC_main+0x668>)
 8000bf0:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 8000bf2:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8000bf6:	ee07 3a90 	vmov	s15, r3
 8000bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000c02:	4877      	ldr	r0, [pc, #476]	; (8000de0 <BLDC_main+0x67c>)
 8000c04:	f7ff fd74 	bl	80006f0 <check_value>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 5; //warning
 8000c0e:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c12:	015b      	lsls	r3, r3, #5
 8000c14:	f003 0320 	and.w	r3, r3, #32
 8000c18:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 5; //error
 8000c22:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c26:	105b      	asrs	r3, r3, #1
 8000c28:	015b      	lsls	r3, r3, #5
 8000c2a:	f003 0220 	and.w	r2, r3, #32
 8000c2e:	4b67      	ldr	r3, [pc, #412]	; (8000dcc <BLDC_main+0x668>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	4a65      	ldr	r2, [pc, #404]	; (8000dcc <BLDC_main+0x668>)
 8000c36:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 8000c38:	f997 334a 	ldrsb.w	r3, [r7, #842]	; 0x34a
 8000c3c:	ee07 3a90 	vmov	s15, r3
 8000c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c44:	eeb0 0a67 	vmov.f32	s0, s15
 8000c48:	4866      	ldr	r0, [pc, #408]	; (8000de4 <BLDC_main+0x680>)
 8000c4a:	f7ff fd51 	bl	80006f0 <check_value>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 6; //warning
 8000c54:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5e:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000c62:	4313      	orrs	r3, r2
 8000c64:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 6; //error
 8000c68:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c6c:	105b      	asrs	r3, r3, #1
 8000c6e:	019b      	lsls	r3, r3, #6
 8000c70:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <BLDC_main+0x668>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	4a54      	ldr	r2, [pc, #336]	; (8000dcc <BLDC_main+0x668>)
 8000c7c:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 8000c7e:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c8e:	4855      	ldr	r0, [pc, #340]	; (8000de4 <BLDC_main+0x680>)
 8000c90:	f7ff fd2e 	bl	80006f0 <check_value>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 7; //warning
 8000c9a:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000c9e:	01db      	lsls	r3, r3, #7
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8000cac:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8000cb0:	105b      	asrs	r3, r3, #1
 8000cb2:	01db      	lsls	r3, r3, #7
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <BLDC_main+0x668>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	4a43      	ldr	r2, [pc, #268]	; (8000dcc <BLDC_main+0x668>)
 8000cbe:	6013      	str	r3, [r2, #0]

		if (Angle_PID.Input < (IRQ_STATUS_BUFF.setpoint - 20000) || Angle_PID.Input > (IRQ_STATUS_BUFF.setpoint + 20000)) warning |= (1 << 8); //warning
 8000cc0:	4b49      	ldr	r3, [pc, #292]	; (8000de8 <BLDC_main+0x684>)
 8000cc2:	ed93 7a00 	vldr	s14, [r3]
 8000cc6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000cca:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8000cce:	3b20      	subs	r3, #32
 8000cd0:	ee07 3a90 	vmov	s15, r3
 8000cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce0:	d410      	bmi.n	8000d04 <BLDC_main+0x5a0>
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <BLDC_main+0x684>)
 8000ce4:	ed93 7a00 	vldr	s14, [r3]
 8000ce8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000cec:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000cf0:	3320      	adds	r3, #32
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	dd05      	ble.n	8000d10 <BLDC_main+0x5ac>
 8000d04:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370

		//-------------------RUN FIR FILTER---------------------
		float test = Update_FIR_filter((float)(IRQ_Current_BUFF.Current_DC));
 8000d10:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d20:	f7ff fc54 	bl	80005cc <Update_FIR_filter>
 8000d24:	ed87 0ad9 	vstr	s0, [r7, #868]	; 0x364

		//----------------------position-----------------
		if (last_pos > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8000d28:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8000d2c:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <BLDC_main+0x688>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d90a      	bls.n	8000d48 <BLDC_main+0x5e4>
 8000d32:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000d36:	4a2e      	ldr	r2, [pc, #184]	; (8000df0 <BLDC_main+0x68c>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d805      	bhi.n	8000d48 <BLDC_main+0x5e4>
 8000d3c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000d40:	3301      	adds	r3, #1
 8000d42:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8000d46:	e00e      	b.n	8000d66 <BLDC_main+0x602>
		else if (last_pos < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8000d48:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <BLDC_main+0x68c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d809      	bhi.n	8000d66 <BLDC_main+0x602>
 8000d52:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000d56:	4a25      	ldr	r2, [pc, #148]	; (8000dec <BLDC_main+0x688>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d904      	bls.n	8000d66 <BLDC_main+0x602>
 8000d5c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000d60:	3b01      	subs	r3, #1
 8000d62:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374

		//-------------------calculate velocity------------------
		velocity_temp[velocity_index] = (IRQ_Encoders_BUFF.Encoder1_pos - last_pos);
 8000d66:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8000d6a:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8000d6e:	1ad2      	subs	r2, r2, r3
 8000d70:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8000d74:	ee07 2a90 	vmov	s15, r2
 8000d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d7c:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8000d80:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	edc3 7a00 	vstr	s15, [r3]
		last_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8000d8c:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000d90:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		velocity_index++;
 8000d94:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8000d98:	3301      	adds	r3, #1
 8000d9a:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
		velocity_index = velocity_index % 200;
 8000d9e:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <BLDC_main+0x690>)
 8000da4:	fba2 1203 	umull	r1, r2, r2, r3
 8000da8:	0992      	lsrs	r2, r2, #6
 8000daa:	21c8      	movs	r1, #200	; 0xc8
 8000dac:	fb01 f202 	mul.w	r2, r1, r2
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
		for(int i = 0; i > 200; i++){
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8000dbc:	e031      	b.n	8000e22 <BLDC_main+0x6be>
 8000dbe:	bf00      	nop
 8000dc0:	20000154 	.word	0x20000154
 8000dc4:	20000158 	.word	0x20000158
 8000dc8:	200000a0 	.word	0x200000a0
 8000dcc:	2000015c 	.word	0x2000015c
 8000dd0:	20000028 	.word	0x20000028
 8000dd4:	20000040 	.word	0x20000040
 8000dd8:	200000b8 	.word	0x200000b8
 8000ddc:	20000070 	.word	0x20000070
 8000de0:	20000058 	.word	0x20000058
 8000de4:	20000088 	.word	0x20000088
 8000de8:	20000284 	.word	0x20000284
 8000dec:	00041eb0 	.word	0x00041eb0
 8000df0:	00015f8f 	.word	0x00015f8f
 8000df4:	51eb851f 	.word	0x51eb851f
			velocity += velocity_temp[i];
 8000df8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000dfc:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8000e00:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	ed97 7ade 	vldr	s14, [r7, #888]	; 0x378
 8000e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e14:	edc7 7ade 	vstr	s15, [r7, #888]	; 0x378
		for(int i = 0; i > 200; i++){
 8000e18:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8000e22:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000e26:	2bc8      	cmp	r3, #200	; 0xc8
 8000e28:	dce6      	bgt.n	8000df8 <BLDC_main+0x694>
		#endif




		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000;
 8000e2a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e36:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000e3a:	4aa8      	ldr	r2, [pc, #672]	; (80010dc <BLDC_main+0x978>)
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4c:	4ba4      	ldr	r3, [pc, #656]	; (80010e0 <BLDC_main+0x97c>)
 8000e4e:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)(abs(IRQ_Encoders_BUFF.Velocity));
 8000e52:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bfb8      	it	lt
 8000e5a:	425b      	neglt	r3, r3
 8000e5c:	ee07 3a90 	vmov	s15, r3
 8000e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e64:	4b9f      	ldr	r3, [pc, #636]	; (80010e4 <BLDC_main+0x980>)
 8000e66:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = test;
 8000e6a:	4a9f      	ldr	r2, [pc, #636]	; (80010e8 <BLDC_main+0x984>)
 8000e6c:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000e70:	6013      	str	r3, [r2, #0]

		Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
 8000e72:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000e76:	ee07 3a90 	vmov	s15, r3
 8000e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7e:	4b98      	ldr	r3, [pc, #608]	; (80010e0 <BLDC_main+0x97c>)
 8000e80:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Angle_PID);
 8000e84:	4896      	ldr	r0, [pc, #600]	; (80010e0 <BLDC_main+0x97c>)
 8000e86:	f000 fcc1 	bl	800180c <Compute>

		Velocity_PID.Setpoint = (abs(Angle_PID.Output));
 8000e8a:	4b95      	ldr	r3, [pc, #596]	; (80010e0 <BLDC_main+0x97c>)
 8000e8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e94:	ee17 3a90 	vmov	r3, s15
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bfb8      	it	lt
 8000e9c:	425b      	neglt	r3, r3
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea6:	4b8f      	ldr	r3, [pc, #572]	; (80010e4 <BLDC_main+0x980>)
 8000ea8:	edc3 7a02 	vstr	s15, [r3, #8]

		Compute(&Velocity_PID);
 8000eac:	488d      	ldr	r0, [pc, #564]	; (80010e4 <BLDC_main+0x980>)
 8000eae:	f000 fcad 	bl	800180c <Compute>

		int8_t direction = -1;
 8000eb2:	23ff      	movs	r3, #255	; 0xff
 8000eb4:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		#ifndef ZERO_GRAVITY
//		if(IRQ_Voltage_Temp_BUFF.V_Bat > 10000)SetMode(&Current_PID,  AUTOMATIC);//Limit(&LIMIT_Current, Velocity_PID.Output);
//		else SetMode(&Current_PID,  MANUAL);
		//SetMode(&Angle_PID,  AUTOMATIC);
		Current_PID.Setpoint = 500;
 8000eb8:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <BLDC_main+0x984>)
 8000eba:	4a8c      	ldr	r2, [pc, #560]	; (80010ec <BLDC_main+0x988>)
 8000ebc:	609a      	str	r2, [r3, #8]
//		Current_PID.Setpoint = Velocity_PID.Output;

		if(Angle_PID.Output > 0) direction = 1;
 8000ebe:	4b88      	ldr	r3, [pc, #544]	; (80010e0 <BLDC_main+0x97c>)
 8000ec0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ecc:	dd03      	ble.n	8000ed6 <BLDC_main+0x772>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
 8000ed4:	e002      	b.n	8000edc <BLDC_main+0x778>
		else direction = -1;
 8000ed6:	23ff      	movs	r3, #255	; 0xff
 8000ed8:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		Current_PID.Setpoint = weight*(fast_sin_2((abs)((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000));
		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
		else direction = 1;
		#endif

		Compute(&Current_PID);
 8000edc:	4882      	ldr	r0, [pc, #520]	; (80010e8 <BLDC_main+0x984>)
 8000ede:	f000 fc95 	bl	800180c <Compute>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(error){
 8000ee2:	4b83      	ldr	r3, [pc, #524]	; (80010f0 <BLDC_main+0x98c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <BLDC_main+0x792>
			Status = BLDC_ERROR;
 8000eea:	2304      	movs	r3, #4
 8000eec:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
			shutoff();
 8000ef0:	f000 faea 	bl	80014c8 <shutoff>
 8000ef4:	e056      	b.n	8000fa4 <BLDC_main+0x840>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8000ef6:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d104      	bne.n	8000f08 <BLDC_main+0x7a4>
			shutoff();
 8000efe:	f000 fae3 	bl	80014c8 <shutoff>
			shutdown();
 8000f02:	f000 faf3 	bl	80014ec <shutdown>
 8000f06:	e04d      	b.n	8000fa4 <BLDC_main+0x840>
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8000f08:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d11b      	bne.n	8000f48 <BLDC_main+0x7e4>
			uint16_t test2 = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8a7 3362 	strh.w	r3, [r7, #866]	; 0x362
			if(Current_PID.Output != NAN)test2 = (uint16_t)Current_PID.Output;
 8000f16:	4b74      	ldr	r3, [pc, #464]	; (80010e8 <BLDC_main+0x984>)
 8000f18:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f20:	ee17 3a90 	vmov	r3, s15
 8000f24:	f8a7 3362 	strh.w	r3, [r7, #866]	; 0x362
//			shutoff();
//			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), test2);
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), 50);
 8000f28:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000f2c:	4971      	ldr	r1, [pc, #452]	; (80010f4 <BLDC_main+0x990>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f8ee 	bl	8001110 <mech_to_el_deg>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	335a      	adds	r3, #90	; 0x5a
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	2132      	movs	r1, #50	; 0x32
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f96f 	bl	8001224 <inverter>
 8000f46:	e02d      	b.n	8000fa4 <BLDC_main+0x840>


			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), (uint16_t)Limit(&LIMIT_V_motor, Current_PID.Output));
		}
		else if (Status == BLDC_RUNNING){
 8000f48:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d122      	bne.n	8000f96 <BLDC_main+0x832>
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Velocity_PID.Output);
 8000f50:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000f54:	4967      	ldr	r1, [pc, #412]	; (80010f4 <BLDC_main+0x990>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f8da 	bl	8001110 <mech_to_el_deg>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	f997 336b 	ldrsb.w	r3, [r7, #875]	; 0x36b
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	4619      	mov	r1, r3
 8000f68:	0049      	lsls	r1, r1, #1
 8000f6a:	440b      	add	r3, r1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	0109      	lsls	r1, r1, #4
 8000f70:	1acb      	subs	r3, r1, r3
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4a59      	ldr	r2, [pc, #356]	; (80010e4 <BLDC_main+0x980>)
 8000f7e:	edd2 7a01 	vldr	s15, [r2, #4]
 8000f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f86:	ee17 2a90 	vmov	r2, s15
 8000f8a:	b292      	uxth	r2, r2
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f948 	bl	8001224 <inverter>
 8000f94:	e006      	b.n	8000fa4 <BLDC_main+0x840>
//			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 8000f96:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d102      	bne.n	8000fa4 <BLDC_main+0x840>
			//inverter(0, (uint16_t)Limit(&LIMIT_V_motor, Velocity_PID.Output));
			Status = BLDC_STOPPED_WITH_BREAK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8000fa4:	4b54      	ldr	r3, [pc, #336]	; (80010f8 <BLDC_main+0x994>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b95      	cmp	r3, #149	; 0x95
 8000faa:	d965      	bls.n	8001078 <BLDC_main+0x914>
			timing_CAN_feedback = 0;
 8000fac:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <BLDC_main+0x994>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8000fb2:	4a52      	ldr	r2, [pc, #328]	; (80010fc <BLDC_main+0x998>)
 8000fb4:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8000fb8:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <BLDC_main+0x98c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a4f      	ldr	r2, [pc, #316]	; (80010fc <BLDC_main+0x998>)
 8000fc0:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8000fc2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000fc6:	4a4d      	ldr	r2, [pc, #308]	; (80010fc <BLDC_main+0x998>)
 8000fc8:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8000fca:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8000fce:	4a4b      	ldr	r2, [pc, #300]	; (80010fc <BLDC_main+0x998>)
 8000fd0:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8000fd2:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b48      	ldr	r3, [pc, #288]	; (80010fc <BLDC_main+0x998>)
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8000fdc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000fe0:	4a46      	ldr	r2, [pc, #280]	; (80010fc <BLDC_main+0x998>)
 8000fe2:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8000fe4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000fe8:	4a44      	ldr	r2, [pc, #272]	; (80010fc <BLDC_main+0x998>)
 8000fea:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8000fec:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000ff0:	4a42      	ldr	r2, [pc, #264]	; (80010fc <BLDC_main+0x998>)
 8000ff2:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8000ff4:	f8b7 3348 	ldrh.w	r3, [r7, #840]	; 0x348
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b40      	ldr	r3, [pc, #256]	; (80010fc <BLDC_main+0x998>)
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8000ffe:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8001002:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <BLDC_main+0x998>)
 8001004:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8001006:	f997 334a 	ldrsb.w	r3, [r7, #842]	; 0x34a
 800100a:	b21a      	sxth	r2, r3
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <BLDC_main+0x998>)
 800100e:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 8001010:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <BLDC_main+0x998>)
 8001018:	865a      	strh	r2, [r3, #50]	; 0x32

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 800101a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800101e:	4a37      	ldr	r2, [pc, #220]	; (80010fc <BLDC_main+0x998>)
 8001020:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 8001022:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001026:	4a35      	ldr	r2, [pc, #212]	; (80010fc <BLDC_main+0x998>)
 8001028:	6153      	str	r3, [r2, #20]
//			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <BLDC_main+0x97c>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001034:	ee17 2a90 	vmov	r2, s15
 8001038:	4b30      	ldr	r3, [pc, #192]	; (80010fc <BLDC_main+0x998>)
 800103a:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 800103c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8001040:	4a2e      	ldr	r2, [pc, #184]	; (80010fc <BLDC_main+0x998>)
 8001042:	61d3      	str	r3, [r2, #28]
//			Feedback.Position_Velocity = (int32_t)velocity;
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8001044:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <BLDC_main+0x998>)
 8001046:	f240 4136 	movw	r1, #1078	; 0x436
 800104a:	482d      	ldr	r0, [pc, #180]	; (8001100 <BLDC_main+0x99c>)
 800104c:	f001 f9e8 	bl	8002420 <FDCAN_sendData>

			//-----------------PRINTF DEBUGGING-------------------
			//will print same info as on CAN-BUS
			#ifdef PRINT_DEBUG
			PrintServerPrintf(
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <BLDC_main+0x998>)
 8001052:	6a19      	ldr	r1, [r3, #32]
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <BLDC_main+0x998>)
 8001056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <BLDC_main+0x998>)
 800105a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <BLDC_main+0x998>)
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	edd7 7ad9 	vldr	s15, [r7, #868]	; 0x364
 8001064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001068:	ee17 4a90 	vmov	r4, s15
 800106c:	9401      	str	r4, [sp, #4]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4603      	mov	r3, r0
 8001072:	4824      	ldr	r0, [pc, #144]	; (8001104 <BLDC_main+0x9a0>)
 8001074:	f000 fe28 	bl	8001cc8 <PrintServerPrintf>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <BLDC_main+0x98c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <BLDC_main+0x92c>
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f006 f885 	bl	8007198 <HAL_GPIO_WritePin>
 800108e:	e006      	b.n	800109e <BLDC_main+0x93a>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f006 f87d 	bl	8007198 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 800109e:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <BLDC_main+0x94e>
 80010a6:	2201      	movs	r2, #1
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <BLDC_main+0x9a4>)
 80010ac:	f006 f874 	bl	8007198 <HAL_GPIO_WritePin>
 80010b0:	e004      	b.n	80010bc <BLDC_main+0x958>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <BLDC_main+0x9a4>)
 80010b8:	f006 f86e 	bl	8007198 <HAL_GPIO_WritePin>

		#ifndef RUNNING_LED_DEBUG
		#ifndef RUNNING_LED_DEBUG2
		if(running_LED_timing >= LOOP_FREQ_KHZ*100){
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <BLDC_main+0x9a8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80010c4:	4293      	cmp	r3, r2
 80010c6:	f67f ac30 	bls.w	800092a <BLDC_main+0x1c6>
			running_LED_timing = 0;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <BLDC_main+0x9a8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <BLDC_main+0x9a4>)
 80010d4:	f006 f878 	bl	80071c8 <HAL_GPIO_TogglePin>
	while(1){
 80010d8:	e427      	b.n	800092a <BLDC_main+0x1c6>
 80010da:	bf00      	nop
 80010dc:	00057e40 	.word	0x00057e40
 80010e0:	20000284 	.word	0x20000284
 80010e4:	20000244 	.word	0x20000244
 80010e8:	20000204 	.word	0x20000204
 80010ec:	43fa0000 	.word	0x43fa0000
 80010f0:	2000015c 	.word	0x2000015c
 80010f4:	0004d774 	.word	0x0004d774
 80010f8:	20000154 	.word	0x20000154
 80010fc:	200001c4 	.word	0x200001c4
 8001100:	2000091c 	.word	0x2000091c
 8001104:	0800c950 	.word	0x0800c950
 8001108:	48000800 	.word	0x48000800
 800110c:	20000158 	.word	0x20000158

08001110 <mech_to_el_deg>:
		dac_value(test);
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	//return (int16_t)((int32_t)((int32_t)(((int32_t)((int32_t)angle_deg)-offset_deg)%deg_pr_pole))/(deg_pr_pole/360));
	return (int16_t)((abs(((angle_deg)-offset_deg+360000)%(deg_pr_pole)))/(1000/17))%360;
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8001124:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001128:	4a15      	ldr	r2, [pc, #84]	; (8001180 <mech_to_el_deg+0x70>)
 800112a:	fb82 1203 	smull	r1, r2, r2, r3
 800112e:	441a      	add	r2, r3
 8001130:	1391      	asrs	r1, r2, #14
 8001132:	17da      	asrs	r2, r3, #31
 8001134:	1a8a      	subs	r2, r1, r2
 8001136:	f245 21b8 	movw	r1, #21176	; 0x52b8
 800113a:	fb01 f202 	mul.w	r2, r1, r2
 800113e:	1a9a      	subs	r2, r3, r2
 8001140:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8001144:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <mech_to_el_deg+0x74>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	441a      	add	r2, r3
 8001150:	1152      	asrs	r2, r2, #5
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b21b      	sxth	r3, r3
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <mech_to_el_deg+0x78>)
 800115a:	fb82 1203 	smull	r1, r2, r2, r3
 800115e:	441a      	add	r2, r3
 8001160:	1211      	asrs	r1, r2, #8
 8001162:	17da      	asrs	r2, r3, #31
 8001164:	1a8a      	subs	r2, r1, r2
 8001166:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800116a:	fb01 f202 	mul.w	r2, r1, r2
 800116e:	1a9b      	subs	r3, r3, r2
 8001170:	b21b      	sxth	r3, r3
//	return (int16_t)((((int32_t)((int32_t)19400)-offset_deg)%(deg_pr_pole))/(1000/17));
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	c6119a11 	.word	0xc6119a11
 8001184:	8d3dcb09 	.word	0x8d3dcb09
 8001188:	b60b60b7 	.word	0xb60b60b7

0800118c <CTRL_init_PWM>:

//PWM setup
#define duty_max 1499
#define pi 3.1415926535

void CTRL_init_PWM(void){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001190:	2100      	movs	r1, #0
 8001192:	4821      	ldr	r0, [pc, #132]	; (8001218 <CTRL_init_PWM+0x8c>)
 8001194:	f007 ff94 	bl	80090c0 <HAL_TIM_PWM_Start>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <CTRL_init_PWM+0x16>
 800119e:	f001 ff0d 	bl	8002fbc <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 80011a2:	2100      	movs	r1, #0
 80011a4:	481c      	ldr	r0, [pc, #112]	; (8001218 <CTRL_init_PWM+0x8c>)
 80011a6:	f009 f91f 	bl	800a3e8 <HAL_TIMEx_PWMN_Start>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <CTRL_init_PWM+0x28>
 80011b0:	f001 ff04 	bl	8002fbc <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80011b4:	2104      	movs	r1, #4
 80011b6:	4818      	ldr	r0, [pc, #96]	; (8001218 <CTRL_init_PWM+0x8c>)
 80011b8:	f007 ff82 	bl	80090c0 <HAL_TIM_PWM_Start>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <CTRL_init_PWM+0x3a>
 80011c2:	f001 fefb 	bl	8002fbc <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80011c6:	2104      	movs	r1, #4
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <CTRL_init_PWM+0x8c>)
 80011ca:	f009 f90d 	bl	800a3e8 <HAL_TIMEx_PWMN_Start>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <CTRL_init_PWM+0x4c>
 80011d4:	f001 fef2 	bl	8002fbc <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80011d8:	2108      	movs	r1, #8
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <CTRL_init_PWM+0x8c>)
 80011dc:	f007 ff70 	bl	80090c0 <HAL_TIM_PWM_Start>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <CTRL_init_PWM+0x5e>
 80011e6:	f001 fee9 	bl	8002fbc <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80011ea:	2108      	movs	r1, #8
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <CTRL_init_PWM+0x8c>)
 80011ee:	f009 f8fb 	bl	800a3e8 <HAL_TIMEx_PWMN_Start>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <CTRL_init_PWM+0x70>
 80011f8:	f001 fee0 	bl	8002fbc <Error_Handler>

	TIM1->CCR1 = 0;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <CTRL_init_PWM+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <CTRL_init_PWM+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <CTRL_init_PWM+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <CTRL_init_PWM+0x94>)
 8001210:	f007 fe8a 	bl	8008f28 <HAL_TIM_Base_Start_IT>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000c04 	.word	0x20000c04
 800121c:	40012c00 	.word	0x40012c00
 8001220:	20000c50 	.word	0x20000c50

08001224 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage){
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	4613      	mov	r3, r2
 8001232:	80bb      	strh	r3, [r7, #4]
	angle = (angle+360*2)%360;
 8001234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001238:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800123c:	4a9c      	ldr	r2, [pc, #624]	; (80014b0 <inverter+0x28c>)
 800123e:	fb82 1203 	smull	r1, r2, r2, r3
 8001242:	441a      	add	r2, r3
 8001244:	1211      	asrs	r1, r2, #8
 8001246:	17da      	asrs	r2, r3, #31
 8001248:	1a8a      	subs	r2, r1, r2
 800124a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800124e:	fb01 f202 	mul.w	r2, r1, r2
 8001252:	1a9a      	subs	r2, r3, r2
 8001254:	4613      	mov	r3, r2
 8001256:	80fb      	strh	r3, [r7, #6]
	angle = (360 - angle);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800125e:	b29b      	uxth	r3, r3
 8001260:	80fb      	strh	r3, [r7, #6]
	angle = angle%360;
 8001262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001266:	4a92      	ldr	r2, [pc, #584]	; (80014b0 <inverter+0x28c>)
 8001268:	fb82 1203 	smull	r1, r2, r2, r3
 800126c:	441a      	add	r2, r3
 800126e:	1211      	asrs	r1, r2, #8
 8001270:	17da      	asrs	r2, r3, #31
 8001272:	1a8a      	subs	r2, r1, r2
 8001274:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001278:	fb01 f202 	mul.w	r2, r1, r2
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 800128c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001290:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <inverter+0x290>)
 8001292:	fb83 1302 	smull	r1, r3, r3, r2
 8001296:	4413      	add	r3, r2
 8001298:	1159      	asrs	r1, r3, #5
 800129a:	17d3      	asrs	r3, r2, #31
 800129c:	1ac9      	subs	r1, r1, r3
 800129e:	460b      	mov	r3, r1
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	1a5b      	subs	r3, r3, r1
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c0:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80014b8 <inverter+0x294>
 80012c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012cc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80012d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012d4:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80014b8 <inverter+0x294>
 80012d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012e0:	ed9f 6a76 	vldr	s12, [pc, #472]	; 80014bc <inverter+0x298>
 80012e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012e8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80012ec:	eddf 6a72 	vldr	s13, [pc, #456]	; 80014b8 <inverter+0x294>
 80012f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012f8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80014b8 <inverter+0x294>
 80012fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001300:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001304:	eddf 5a6d 	vldr	s11, [pc, #436]	; 80014bc <inverter+0x298>
 8001308:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800130c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001310:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80014c0 <inverter+0x29c>
 8001314:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001318:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001324:	ee17 3a90 	vmov	r3, s15
 8001328:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001334:	edd7 7a04 	vldr	s15, [r7, #16]
 8001338:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800133c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001340:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 80014bc <inverter+0x298>
 8001344:	edd7 7a04 	vldr	s15, [r7, #16]
 8001348:	ee76 7a67 	vsub.f32	s15, s12, s15
 800134c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001350:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80014bc <inverter+0x298>
 8001354:	edd7 7a04 	vldr	s15, [r7, #16]
 8001358:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800135c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	eddf 6a56 	vldr	s13, [pc, #344]	; 80014c0 <inverter+0x29c>
 8001368:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800136c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001378:	ee17 3a90 	vmov	r3, s15
 800137c:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001384:	3303      	adds	r3, #3
 8001386:	89ba      	ldrh	r2, [r7, #12]
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	0fda      	lsrs	r2, r3, #31
 800138c:	4413      	add	r3, r2
 800138e:	105b      	asrs	r3, r3, #1
 8001390:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db10      	blt.n	80013bc <inverter+0x198>
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	2b3b      	cmp	r3, #59	; 0x3b
 80013a0:	dc0c      	bgt.n	80013bc <inverter+0x198>
		compare_M1 = T0;
 80013a2:	897b      	ldrh	r3, [r7, #10]
 80013a4:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 80013a6:	897a      	ldrh	r2, [r7, #10]
 80013a8:	89bb      	ldrh	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 80013ae:	897a      	ldrh	r2, [r7, #10]
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	441a      	add	r2, r3
 80013b4:	89bb      	ldrh	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e06a      	b.n	8001492 <inverter+0x26e>
		}
	else if(angle >= 60 && angle < 120){
 80013bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c0:	2b3b      	cmp	r3, #59	; 0x3b
 80013c2:	dd10      	ble.n	80013e6 <inverter+0x1c2>
 80013c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c8:	2b77      	cmp	r3, #119	; 0x77
 80013ca:	dc0c      	bgt.n	80013e6 <inverter+0x1c2>
		compare_M1 = T0;
 80013cc:	897b      	ldrh	r3, [r7, #10]
 80013ce:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80013d0:	897a      	ldrh	r2, [r7, #10]
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	441a      	add	r2, r3
 80013d6:	89bb      	ldrh	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 80013dc:	897a      	ldrh	r2, [r7, #10]
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	4413      	add	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e055      	b.n	8001492 <inverter+0x26e>
		}
	else if(angle >= 120 && angle < 180){
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	2b77      	cmp	r3, #119	; 0x77
 80013ec:	dd10      	ble.n	8001410 <inverter+0x1ec>
 80013ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f2:	2bb3      	cmp	r3, #179	; 0xb3
 80013f4:	dc0c      	bgt.n	8001410 <inverter+0x1ec>
		compare_M1 = T0+T2;
 80013f6:	897a      	ldrh	r2, [r7, #10]
 80013f8:	89bb      	ldrh	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80013fe:	897a      	ldrh	r2, [r7, #10]
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	441a      	add	r2, r3
 8001404:	89bb      	ldrh	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e040      	b.n	8001492 <inverter+0x26e>
		}
	else if(angle >= 180 && angle < 240){
 8001410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001414:	2bb3      	cmp	r3, #179	; 0xb3
 8001416:	dd10      	ble.n	800143a <inverter+0x216>
 8001418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141c:	2bef      	cmp	r3, #239	; 0xef
 800141e:	dc0c      	bgt.n	800143a <inverter+0x216>
		compare_M1 = T0+T1+T2;
 8001420:	897a      	ldrh	r2, [r7, #10]
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	441a      	add	r2, r3
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 800142c:	897a      	ldrh	r2, [r7, #10]
 800142e:	89fb      	ldrh	r3, [r7, #14]
 8001430:	4413      	add	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001434:	897b      	ldrh	r3, [r7, #10]
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e02b      	b.n	8001492 <inverter+0x26e>
		}
	else if(angle >= 240 && angle < 300){
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	2bef      	cmp	r3, #239	; 0xef
 8001440:	dd11      	ble.n	8001466 <inverter+0x242>
 8001442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001446:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800144a:	da0c      	bge.n	8001466 <inverter+0x242>
		compare_M1 = T0+T1+T2;
 800144c:	897a      	ldrh	r2, [r7, #10]
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	441a      	add	r2, r3
 8001452:	89bb      	ldrh	r3, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001458:	897b      	ldrh	r3, [r7, #10]
 800145a:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 800145c:	897a      	ldrh	r2, [r7, #10]
 800145e:	89bb      	ldrh	r3, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e015      	b.n	8001492 <inverter+0x26e>
		}
	else if(angle >= 300 && angle <= 360){
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800146e:	db10      	blt.n	8001492 <inverter+0x26e>
 8001470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001474:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001478:	dc0b      	bgt.n	8001492 <inverter+0x26e>
		compare_M1 = T0+T1;
 800147a:	897a      	ldrh	r2, [r7, #10]
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	4413      	add	r3, r2
 8001480:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001482:	897b      	ldrh	r3, [r7, #10]
 8001484:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8001486:	897a      	ldrh	r2, [r7, #10]
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	441a      	add	r2, r3
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	617b      	str	r3, [r7, #20]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <inverter+0x2a0>)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <inverter+0x2a0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <inverter+0x2a0>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80014a4:	bf00      	nop
 80014a6:	3724      	adds	r7, #36	; 0x24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	b60b60b7 	.word	0xb60b60b7
 80014b4:	88888889 	.word	0x88888889
 80014b8:	42700000 	.word	0x42700000
 80014bc:	43340000 	.word	0x43340000
 80014c0:	471e3400 	.word	0x471e3400
 80014c4:	40012c00 	.word	0x40012c00

080014c8 <shutoff>:
void shutoff(void){
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <shutoff+0x20>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <shutoff+0x20>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <shutoff+0x20>)
 80014da:	2200      	movs	r2, #0
 80014dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40012c00 	.word	0x40012c00

080014ec <shutdown>:
void shutdown(void){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 80014f0:	2100      	movs	r1, #0
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <shutdown+0x40>)
 80014f4:	f007 fee4 	bl	80092c0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 80014f8:	2100      	movs	r1, #0
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <shutdown+0x40>)
 80014fc:	f009 f828 	bl	800a550 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8001500:	2104      	movs	r1, #4
 8001502:	480a      	ldr	r0, [pc, #40]	; (800152c <shutdown+0x40>)
 8001504:	f007 fedc 	bl	80092c0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8001508:	2104      	movs	r1, #4
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <shutdown+0x40>)
 800150c:	f009 f820 	bl	800a550 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 8001510:	2108      	movs	r1, #8
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <shutdown+0x40>)
 8001514:	f007 fed4 	bl	80092c0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8001518:	2108      	movs	r1, #8
 800151a:	4804      	ldr	r0, [pc, #16]	; (800152c <shutdown+0x40>)
 800151c:	f009 f818 	bl	800a550 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <shutdown+0x40>)
 8001522:	f007 fcda 	bl	8008eda <HAL_TIM_Base_Stop>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000c04 	.word	0x20000c04

08001530 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2140      	movs	r1, #64	; 0x40
 800153c:	4815      	ldr	r0, [pc, #84]	; (8001594 <ORBIS_init+0x64>)
 800153e:	f005 fe2b 	bl	8007198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	2104      	movs	r1, #4
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <ORBIS_init+0x68>)
 8001548:	f005 fe26 	bl	8007198 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <ORBIS_init+0x6c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <ORBIS_init+0x70>)
 8001554:	2274      	movs	r2, #116	; 0x74
 8001556:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <ORBIS_init+0x64>)
 800155e:	f005 fe1b 	bl	8007198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2104      	movs	r1, #4
 8001566:	480c      	ldr	r0, [pc, #48]	; (8001598 <ORBIS_init+0x68>)
 8001568:	f005 fe16 	bl	8007198 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 800156c:	2305      	movs	r3, #5
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <ORBIS_init+0x74>)
 8001570:	490b      	ldr	r1, [pc, #44]	; (80015a0 <ORBIS_init+0x70>)
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <ORBIS_init+0x78>)
 8001574:	f006 ff08 	bl	8008388 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8001578:	2305      	movs	r3, #5
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <ORBIS_init+0x7c>)
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <ORBIS_init+0x80>)
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <ORBIS_init+0x84>)
 8001580:	f006 ff02 	bl	8008388 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <ORBIS_init+0x88>)
 8001586:	f007 fccf 	bl	8008f28 <HAL_TIM_Base_Start_IT>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	48000400 	.word	0x48000400
 8001598:	48000c00 	.word	0x48000c00
 800159c:	200002e4 	.word	0x200002e4
 80015a0:	200002c4 	.word	0x200002c4
 80015a4:	200002cc 	.word	0x200002cc
 80015a8:	200009b8 	.word	0x200009b8
 80015ac:	200002dc 	.word	0x200002dc
 80015b0:	200002d4 	.word	0x200002d4
 80015b4:	20000a1c 	.word	0x20000a1c
 80015b8:	20000c50 	.word	0x20000c50

080015bc <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a68      	ldr	r2, [pc, #416]	; (8001768 <HAL_SPI_TxRxCpltCallback+0x1ac>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	f040 80a5 	bne.w	8001718 <HAL_SPI_TxRxCpltCallback+0x15c>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80015ce:	2201      	movs	r2, #1
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	4866      	ldr	r0, [pc, #408]	; (800176c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 80015d4:	f005 fde0 	bl	8007198 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 80015d8:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80015e0:	609a      	str	r2, [r3, #8]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80015e2:	4b63      	ldr	r3, [pc, #396]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	019b      	lsls	r3, r3, #6
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b61      	ldr	r3, [pc, #388]	; (8001770 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 80015ec:	785b      	ldrb	r3, [r3, #1]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	4a5d      	ldr	r2, [pc, #372]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001600:	6013      	str	r3, [r2, #0]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 8001602:	4b5c      	ldr	r3, [pc, #368]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4a5b      	ldr	r2, [pc, #364]	; (800177c <HAL_SPI_TxRxCpltCallback+0x1c0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	dd10      	ble.n	8001636 <HAL_SPI_TxRxCpltCallback+0x7a>
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 8001624:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	edc7 7a03 	vstr	s15, [r7, #12]
 8001634:	e025      	b.n	8001682 <HAL_SPI_TxRxCpltCallback+0xc6>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8001636:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <HAL_SPI_TxRxCpltCallback+0x1c4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	da10      	bge.n	800166a <HAL_SPI_TxRxCpltCallback+0xae>
 8001648:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8001658:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001664:	edc7 7a03 	vstr	s15, [r7, #12]
 8001668:	e00b      	b.n	8001682 <HAL_SPI_TxRxCpltCallback+0xc6>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 8001682:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800168a:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 800168c:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800168e:	ed93 7a00 	vldr	s14, [r3]
 8001692:	edd7 7a03 	vldr	s15, [r7, #12]
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169a:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800169c:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 80016a0:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 80016a2:	ed93 7a00 	vldr	s14, [r3]
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4a38      	ldr	r2, [pc, #224]	; (800178c <HAL_SPI_TxRxCpltCallback+0x1d0>)
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b8:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 80016ba:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4a32      	ldr	r2, [pc, #200]	; (800178c <HAL_SPI_TxRxCpltCallback+0x1d0>)
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	601a      	str	r2, [r3, #0]
		velocity_index++;
 80016cc:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016d6:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d102      	bne.n	80016e6 <HAL_SPI_TxRxCpltCallback+0x12a>
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001790 <HAL_SPI_TxRxCpltCallback+0x1d4>
 80016f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001794 <HAL_SPI_TxRxCpltCallback+0x1d8>
 80016f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001798 <HAL_SPI_TxRxCpltCallback+0x1dc>
 8001700:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001704:	eddf 6a25 	vldr	s13, [pc, #148]	; 800179c <HAL_SPI_TxRxCpltCallback+0x1e0>
 8001708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800170c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001710:	ee17 2a90 	vmov	r2, s15
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001716:	60da      	str	r2, [r3, #12]
	}
	if (hspi == &hspi3) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d11a      	bne.n	8001756 <HAL_SPI_TxRxCpltCallback+0x19a>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8001720:	2201      	movs	r2, #1
 8001722:	2104      	movs	r1, #4
 8001724:	481f      	ldr	r0, [pc, #124]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8001726:	f005 fd37 	bl	8007198 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 800172c:	78db      	ldrb	r3, [r3, #3]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8001734:	789b      	ldrb	r3, [r3, #2]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21a      	sxth	r2, r3
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800173e:	825a      	strh	r2, [r3, #18]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8001748:	7852      	ldrb	r2, [r2, #1]
 800174a:	0892      	lsrs	r2, r2, #2
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	4313      	orrs	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001754:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_SPI_TxRxCpltCallback+0x1f0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800175c:	4798      	blx	r3
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200009b8 	.word	0x200009b8
 800176c:	48000400 	.word	0x48000400
 8001770:	200002cc 	.word	0x200002cc
 8001774:	200002e8 	.word	0x200002e8
 8001778:	20000300 	.word	0x20000300
 800177c:	0002bf20 	.word	0x0002bf20
 8001780:	fffd40e0 	.word	0xfffd40e0
 8001784:	200002fc 	.word	0x200002fc
 8001788:	20000304 	.word	0x20000304
 800178c:	20000308 	.word	0x20000308
 8001790:	461c4000 	.word	0x461c4000
 8001794:	42700000 	.word	0x42700000
 8001798:	43b40000 	.word	0x43b40000
 800179c:	42c80000 	.word	0x42c80000
 80017a0:	20000a1c 	.word	0x20000a1c
 80017a4:	48000c00 	.word	0x48000c00
 80017a8:	200002dc 	.word	0x200002dc
 80017ac:	200002e4 	.word	0x200002e4

080017b0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2140      	movs	r1, #64	; 0x40
 80017bc:	480b      	ldr	r0, [pc, #44]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017be:	f005 fceb 	bl	8007198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2104      	movs	r1, #4
 80017c6:	480a      	ldr	r0, [pc, #40]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017c8:	f005 fce6 	bl	8007198 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80017cc:	2305      	movs	r3, #5
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017d0:	4909      	ldr	r1, [pc, #36]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017d2:	480a      	ldr	r0, [pc, #40]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017d4:	f006 fdd8 	bl	8008388 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80017d8:	2305      	movs	r3, #5
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017dc:	4909      	ldr	r1, [pc, #36]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017de:	480a      	ldr	r0, [pc, #40]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017e0:	f006 fdd2 	bl	8008388 <HAL_SPI_TransmitReceive_DMA>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000c00 	.word	0x48000c00
 80017f4:	200002cc 	.word	0x200002cc
 80017f8:	200002c4 	.word	0x200002c4
 80017fc:	200009b8 	.word	0x200009b8
 8001800:	200002dc 	.word	0x200002dc
 8001804:	200002d4 	.word	0x200002d4
 8001808:	20000a1c 	.word	0x20000a1c

0800180c <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 80a2 	beq.w	8001964 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	ed93 7a02 	vldr	s14, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001830:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001844:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	ed93 7a03 	vldr	s14, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	edd3 6a06 	vldr	s13, [r3, #24]
 8001854:	edd7 7a03 	vldr	s15, [r7, #12]
 8001858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00e      	beq.n	800188e <Compute+0x82>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	ed93 7a03 	vldr	s14, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800187c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	ed93 7a03 	vldr	s14, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800189a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	dd04      	ble.n	80018ae <Compute+0xa2>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	e00e      	b.n	80018cc <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80018ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	d503      	bpl.n	80018cc <Compute+0xc0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <Compute+0xe0>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80018dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	edc3 7a01 	vstr	s15, [r3, #4]
 80018ea:	e003      	b.n	80018f4 <Compute+0xe8>
	else val->Output = 0;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	ed93 6a07 	vldr	s12, [r3, #28]
 8001906:	edd7 7a02 	vldr	s15, [r7, #8]
 800190a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800190e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	dd04      	ble.n	800193c <Compute+0x130>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	e00e      	b.n	800195a <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	edd3 7a08 	vldr	s15, [r3, #32]
 8001948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	d503      	bpl.n	800195a <Compute+0x14e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1a      	ldr	r2, [r3, #32]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	e000      	b.n	8001966 <Compute+0x15a>
	if(!val->inAuto) return;
 8001964:	bf00      	nop
}
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6178      	str	r0, [r7, #20]
 8001978:	ed87 0a04 	vstr	s0, [r7, #16]
 800197c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001980:	ed87 1a02 	vstr	s2, [r7, #8]
 8001984:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001988:	edd7 7a04 	vldr	s15, [r7, #16]
 800198c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	f100 809b 	bmi.w	8001ace <SetTunings+0x15e>
 8001998:	edd7 7a03 	vldr	s15, [r7, #12]
 800199c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	f100 8093 	bmi.w	8001ace <SetTunings+0x15e>
 80019a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	f100 808b 	bmi.w	8001ace <SetTunings+0x15e>
 80019b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	f100 8083 	bmi.w	8001ace <SetTunings+0x15e>
 80019c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	dc79      	bgt.n	8001ace <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 80019da:	edd7 7a01 	vldr	s15, [r7, #4]
 80019de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	bfcc      	ite	gt
 80019e8:	2301      	movgt	r3, #1
 80019ea:	2300      	movle	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 80019f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	bf4c      	ite	mi
 8001a08:	2301      	movmi	r3, #1
 8001a0a:	2300      	movpl	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a22:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001adc <SetTunings+0x16c>
 8001a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2a:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8001a34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a38:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 8001a46:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d11d      	bne.n	8001a9c <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a66:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001ae0 <SetTunings+0x170>
 8001a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a7a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ae0 <SetTunings+0x170>
 8001a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a8e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001ae0 <SetTunings+0x170>
 8001a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001aa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8001ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ab4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001acc:	e000      	b.n	8001ad0 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001ace:	bf00      	nop
}
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	49742400 	.word	0x49742400
 8001ae0:	00000000 	.word	0x00000000

08001ae4 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	dd25      	ble.n	8001b40 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8001b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0e:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	edd3 6a07 	vldr	s13, [r3, #28]
 8001b2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b58:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8001b5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	dc44      	bgt.n	8001bf8 <SetOutputLimits+0xac>
   val->outMin = Min;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	dd04      	ble.n	8001b9a <SetOutputLimits+0x4e>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	e00e      	b.n	8001bb8 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	d503      	bpl.n	8001bb8 <SetOutputLimits+0x6c>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	dd04      	ble.n	8001bd8 <SetOutputLimits+0x8c>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	e010      	b.n	8001bfa <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	d505      	bpl.n	8001bfa <SetOutputLimits+0xae>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a1a      	ldr	r2, [r3, #32]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	e000      	b.n	8001bfa <SetOutputLimits+0xae>
   if(Min > Max) return;
 8001bf8:	bf00      	nop
}
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2201      	moveq	r2, #1
 8001c2a:	2200      	movne	r2, #0
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d102      	bne.n	8001c38 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f808 	bl	8001c48 <Initialize>
    }
    val->inAuto = newAuto;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <Initialize>:

void Initialize(PID_instance *val)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	dd04      	ble.n	8001c80 <Initialize+0x38>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8001c7e:	e00f      	b.n	8001ca0 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d400      	bmi.n	8001c98 <Initialize+0x50>
}
 8001c96:	e003      	b.n	8001ca0 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8001cc8:	b40f      	push	{r0, r1, r2, r3}
 8001cca:	b590      	push	{r4, r7, lr}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cde:	480b      	ldr	r0, [pc, #44]	; (8001d0c <PrintServerPrintf+0x44>)
 8001ce0:	f00a f998 	bl	800c014 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <PrintServerPrintf+0x48>)
 8001ce6:	681c      	ldr	r4, [r3, #0]
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <PrintServerPrintf+0x44>)
 8001cea:	f7fe fa99 	bl	8000220 <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4905      	ldr	r1, [pc, #20]	; (8001d0c <PrintServerPrintf+0x44>)
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f008 fe66 	bl	800a9c8 <HAL_UART_Transmit_DMA>
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d06:	b004      	add	sp, #16
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000498 	.word	0x20000498
 8001d10:	200000d0 	.word	0x200000d0

08001d14 <ADC_CAL>:

#define Vref 3000

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};
void ADC_CAL(){
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <ADC_CAL+0x134>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b48      	ldr	r3, [pc, #288]	; (8001e4c <ADC_CAL+0x138>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <ADC_CAL+0x13c>)
 8001d38:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8001d3a:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <ADC_CAL+0x138>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	4a43      	ldr	r2, [pc, #268]	; (8001e50 <ADC_CAL+0x13c>)
 8001d42:	8812      	ldrh	r2, [r2, #0]
 8001d44:	b212      	sxth	r2, r2
 8001d46:	fb03 f202 	mul.w	r2, r3, r2
 8001d4a:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <ADC_CAL+0x140>)
 8001d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d50:	1ad2      	subs	r2, r2, r3
 8001d52:	0852      	lsrs	r2, r2, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	0adb      	lsrs	r3, r3, #11
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	011a      	lsls	r2, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	4a3c      	ldr	r2, [pc, #240]	; (8001e58 <ADC_CAL+0x144>)
 8001d66:	fb82 1203 	smull	r1, r2, r2, r3
 8001d6a:	1152      	asrs	r2, r2, #5
 8001d6c:	17db      	asrs	r3, r3, #31
 8001d6e:	1ad2      	subs	r2, r2, r3
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <ADC_CAL+0x148>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a39      	ldr	r2, [pc, #228]	; (8001e5c <ADC_CAL+0x148>)
 8001d78:	6013      	str	r3, [r2, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <ADC_CAL+0x138>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	4a33      	ldr	r2, [pc, #204]	; (8001e50 <ADC_CAL+0x13c>)
 8001d82:	8812      	ldrh	r2, [r2, #0]
 8001d84:	b212      	sxth	r2, r2
 8001d86:	fb03 f202 	mul.w	r2, r3, r2
 8001d8a:	4b32      	ldr	r3, [pc, #200]	; (8001e54 <ADC_CAL+0x140>)
 8001d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d90:	1ad2      	subs	r2, r2, r3
 8001d92:	0852      	lsrs	r2, r2, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	0adb      	lsrs	r3, r3, #11
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	011a      	lsls	r2, r3, #4
 8001da2:	4413      	add	r3, r2
 8001da4:	4a2c      	ldr	r2, [pc, #176]	; (8001e58 <ADC_CAL+0x144>)
 8001da6:	fb82 1203 	smull	r1, r2, r2, r3
 8001daa:	1152      	asrs	r2, r2, #5
 8001dac:	17db      	asrs	r3, r3, #31
 8001dae:	1ad2      	subs	r2, r2, r3
 8001db0:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <ADC_CAL+0x148>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <ADC_CAL+0x148>)
 8001db8:	6053      	str	r3, [r2, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <ADC_CAL+0x138>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <ADC_CAL+0x13c>)
 8001dc2:	8812      	ldrh	r2, [r2, #0]
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	fb03 f202 	mul.w	r2, r3, r2
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <ADC_CAL+0x140>)
 8001dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8001dd0:	1ad2      	subs	r2, r2, r3
 8001dd2:	0852      	lsrs	r2, r2, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	011a      	lsls	r2, r3, #4
 8001de2:	4413      	add	r3, r2
 8001de4:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <ADC_CAL+0x144>)
 8001de6:	fb82 1203 	smull	r1, r2, r2, r3
 8001dea:	1152      	asrs	r2, r2, #5
 8001dec:	17db      	asrs	r3, r3, #31
 8001dee:	1ad2      	subs	r2, r2, r3
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <ADC_CAL+0x148>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <ADC_CAL+0x148>)
 8001df8:	6093      	str	r3, [r2, #8]
	calibrating--;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <ADC_CAL+0x14c>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <ADC_CAL+0x14c>)
 8001e04:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <ADC_CAL+0x14c>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d117      	bne.n	8001e3e <ADC_CAL+0x12a>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <ADC_CAL+0x148>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <ADC_CAL+0x150>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	099b      	lsrs	r3, r3, #6
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <ADC_CAL+0x154>)
 8001e1c:	6013      	str	r3, [r2, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <ADC_CAL+0x148>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a10      	ldr	r2, [pc, #64]	; (8001e64 <ADC_CAL+0x150>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <ADC_CAL+0x154>)
 8001e2c:	6053      	str	r3, [r2, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <ADC_CAL+0x148>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <ADC_CAL+0x150>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <ADC_CAL+0x154>)
 8001e3c:	6093      	str	r3, [r2, #8]
	}
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	200000d4 	.word	0x200000d4
 8001e4c:	20000698 	.word	0x20000698
 8001e50:	200006e4 	.word	0x200006e4
 8001e54:	00100101 	.word	0x00100101
 8001e58:	51eb851f 	.word	0x51eb851f
 8001e5c:	2000070c 	.word	0x2000070c
 8001e60:	20000708 	.word	0x20000708
 8001e64:	10624dd3 	.word	0x10624dd3
 8001e68:	200006d8 	.word	0x200006d8

08001e6c <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <current_init+0x28>)
 8001e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e7a:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <current_init+0x2c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8001e82:	2208      	movs	r2, #8
 8001e84:	4905      	ldr	r1, [pc, #20]	; (8001e9c <current_init+0x30>)
 8001e86:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <current_init+0x34>)
 8001e88:	f002 fa8e 	bl	80043a8 <HAL_ADC_Start_DMA>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000708 	.word	0x20000708
 8001e98:	200006e8 	.word	0x200006e8
 8001e9c:	20000698 	.word	0x20000698
 8001ea0:	2000076c 	.word	0x2000076c

08001ea4 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8001eac:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <voltage_temperature_init+0x20>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	4904      	ldr	r1, [pc, #16]	; (8001ec8 <voltage_temperature_init+0x24>)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <voltage_temperature_init+0x28>)
 8001eb8:	f002 fa76 	bl	80043a8 <HAL_ADC_Start_DMA>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200006fc 	.word	0x200006fc
 8001ec8:	200006b8 	.word	0x200006b8
 8001ecc:	200007d8 	.word	0x200007d8

08001ed0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a83      	ldr	r2, [pc, #524]	; (80020e8 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	f040 80a2 	bne.w	8002026 <HAL_ADC_ConvHalfCpltCallback+0x156>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8001ee2:	4b82      	ldr	r3, [pc, #520]	; (80020ec <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b7e      	ldr	r3, [pc, #504]	; (80020f0 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	4b7c      	ldr	r3, [pc, #496]	; (80020f4 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8001f02:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8001f04:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4b79      	ldr	r3, [pc, #484]	; (80020f0 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da00      	bge.n	8001f14 <HAL_ADC_ConvHalfCpltCallback+0x44>
 8001f12:	330f      	adds	r3, #15
 8001f14:	111b      	asrs	r3, r3, #4
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	4a76      	ldr	r2, [pc, #472]	; (80020fc <HAL_ADC_ConvHalfCpltCallback+0x22c>)
 8001f24:	fb82 0203 	smull	r0, r2, r2, r3
 8001f28:	441a      	add	r2, r3
 8001f2a:	12d2      	asrs	r2, r2, #11
 8001f2c:	17db      	asrs	r3, r3, #31
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	011a      	lsls	r2, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a71      	ldr	r2, [pc, #452]	; (8002100 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8001f3c:	fb82 0203 	smull	r0, r2, r2, r3
 8001f40:	1152      	asrs	r2, r2, #5
 8001f42:	17db      	asrs	r3, r3, #31
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	2232      	movs	r2, #50	; 0x32
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a6d      	ldr	r2, [pc, #436]	; (8002104 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 8001f50:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8001f52:	4b69      	ldr	r3, [pc, #420]	; (80020f8 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4b65      	ldr	r3, [pc, #404]	; (80020f0 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da00      	bge.n	8001f62 <HAL_ADC_ConvHalfCpltCallback+0x92>
 8001f60:	330f      	adds	r3, #15
 8001f62:	111b      	asrs	r3, r3, #4
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	4a62      	ldr	r2, [pc, #392]	; (80020fc <HAL_ADC_ConvHalfCpltCallback+0x22c>)
 8001f72:	fb82 0203 	smull	r0, r2, r2, r3
 8001f76:	441a      	add	r2, r3
 8001f78:	12d2      	asrs	r2, r2, #11
 8001f7a:	17db      	asrs	r3, r3, #31
 8001f7c:	1ad2      	subs	r2, r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	011a      	lsls	r2, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	4a5d      	ldr	r2, [pc, #372]	; (8002100 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8001f8a:	fb82 0203 	smull	r0, r2, r2, r3
 8001f8e:	1152      	asrs	r2, r2, #5
 8001f90:	17db      	asrs	r3, r3, #31
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	2232      	movs	r2, #50	; 0x32
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	4a59      	ldr	r2, [pc, #356]	; (8002104 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 8001f9e:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8001fa0:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da00      	bge.n	8001fb0 <HAL_ADC_ConvHalfCpltCallback+0xe0>
 8001fae:	330f      	adds	r3, #15
 8001fb0:	111b      	asrs	r3, r3, #4
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a4f      	ldr	r2, [pc, #316]	; (80020fc <HAL_ADC_ConvHalfCpltCallback+0x22c>)
 8001fc0:	fb82 0203 	smull	r0, r2, r2, r3
 8001fc4:	441a      	add	r2, r3
 8001fc6:	12d2      	asrs	r2, r2, #11
 8001fc8:	17db      	asrs	r3, r3, #31
 8001fca:	1ad2      	subs	r2, r2, r3
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	011a      	lsls	r2, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a4a      	ldr	r2, [pc, #296]	; (8002100 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8001fd8:	fb82 0203 	smull	r0, r2, r2, r3
 8001fdc:	1152      	asrs	r2, r2, #5
 8001fde:	17db      	asrs	r3, r3, #31
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	2232      	movs	r2, #50	; 0x32
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a46      	ldr	r2, [pc, #280]	; (8002104 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 8001fec:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8001fee:	4b45      	ldr	r3, [pc, #276]	; (8002104 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ff6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ffa:	4b42      	ldr	r3, [pc, #264]	; (8002104 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bfb8      	it	lt
 8002002:	425b      	neglt	r3, r3
 8002004:	441a      	add	r2, r3
 8002006:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	bfb8      	it	lt
 800200e:	425b      	neglt	r3, r3
 8002010:	4413      	add	r3, r2
 8002012:	0fda      	lsrs	r2, r3, #31
 8002014:	4413      	add	r3, r2
 8002016:	105b      	asrs	r3, r3, #1
 8002018:	461a      	mov	r2, r3
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 800201c:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <HAL_ADC_ConvHalfCpltCallback+0x238>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4838      	ldr	r0, [pc, #224]	; (8002104 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 8002024:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a38      	ldr	r2, [pc, #224]	; (800210c <HAL_ADC_ConvHalfCpltCallback+0x23c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d151      	bne.n	80020d2 <HAL_ADC_ConvHalfCpltCallback+0x202>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 800202e:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	4a2f      	ldr	r2, [pc, #188]	; (80020f4 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8002036:	8812      	ldrh	r2, [r2, #0]
 8002038:	b212      	sxth	r2, r2
 800203a:	fb03 f202 	mul.w	r2, r3, r2
 800203e:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002040:	fba3 1302 	umull	r1, r3, r3, r2
 8002044:	1ad2      	subs	r2, r2, r3
 8002046:	0852      	lsrs	r2, r2, #1
 8002048:	4413      	add	r3, r2
 800204a:	0adb      	lsrs	r3, r3, #11
 800204c:	b25a      	sxtb	r2, r3
 800204e:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 8002050:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 800205a:	8812      	ldrh	r2, [r2, #0]
 800205c:	b212      	sxth	r2, r2
 800205e:	fb03 f202 	mul.w	r2, r3, r2
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002064:	fba3 1302 	umull	r1, r3, r3, r2
 8002068:	1ad2      	subs	r2, r2, r3
 800206a:	0852      	lsrs	r2, r2, #1
 800206c:	4413      	add	r3, r2
 800206e:	0adb      	lsrs	r3, r3, #11
 8002070:	b25a      	sxtb	r2, r3
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 8002074:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 800207e:	8812      	ldrh	r2, [r2, #0]
 8002080:	b212      	sxth	r2, r2
 8002082:	fb03 f202 	mul.w	r2, r3, r2
 8002086:	4613      	mov	r3, r2
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	4413      	add	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	461a      	mov	r2, r3
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002092:	fba3 1302 	umull	r1, r3, r3, r2
 8002096:	1ad2      	subs	r2, r2, r3
 8002098:	0852      	lsrs	r2, r2, #1
 800209a:	4413      	add	r3, r2
 800209c:	0adb      	lsrs	r3, r3, #11
 800209e:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 80020a0:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_ADC_ConvHalfCpltCallback+0x240>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 80020aa:	8812      	ldrh	r2, [r2, #0]
 80020ac:	b212      	sxth	r2, r2
 80020ae:	fb03 f202 	mul.w	r2, r3, r2
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0bdb      	lsrs	r3, r3, #15
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 80020c8:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_ADC_ConvHalfCpltCallback+0x250>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4812      	ldr	r0, [pc, #72]	; (8002118 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 80020d0:	4798      	blx	r3
	}
	if(calibrating)ADC_CAL();
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_ADC_ConvHalfCpltCallback+0x20e>
 80020da:	f7ff fe1b 	bl	8001d14 <ADC_CAL>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000076c 	.word	0x2000076c
 80020ec:	200000d4 	.word	0x200000d4
 80020f0:	20000698 	.word	0x20000698
 80020f4:	200006e4 	.word	0x200006e4
 80020f8:	200006d8 	.word	0x200006d8
 80020fc:	80080081 	.word	0x80080081
 8002100:	51eb851f 	.word	0x51eb851f
 8002104:	200006ec 	.word	0x200006ec
 8002108:	200006e8 	.word	0x200006e8
 800210c:	200007d8 	.word	0x200007d8
 8002110:	200006b8 	.word	0x200006b8
 8002114:	00100101 	.word	0x00100101
 8002118:	20000700 	.word	0x20000700
 800211c:	ccd99a67 	.word	0xccd99a67
 8002120:	200006fc 	.word	0x200006fc
 8002124:	20000708 	.word	0x20000708

08002128 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a80      	ldr	r2, [pc, #512]	; (8002334 <HAL_ADC_ConvCpltCallback+0x20c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	f040 80a2 	bne.w	800227e <HAL_ADC_ConvCpltCallback+0x156>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_ADC_ConvCpltCallback+0x210>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	461a      	mov	r2, r3
 800214c:	4b7b      	ldr	r3, [pc, #492]	; (800233c <HAL_ADC_ConvCpltCallback+0x214>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	b21a      	sxth	r2, r3
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <HAL_ADC_ConvCpltCallback+0x218>)
 800215a:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 800215c:	4b79      	ldr	r3, [pc, #484]	; (8002344 <HAL_ADC_ConvCpltCallback+0x21c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_ADC_ConvCpltCallback+0x214>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	da00      	bge.n	800216c <HAL_ADC_ConvCpltCallback+0x44>
 800216a:	330f      	adds	r3, #15
 800216c:	111b      	asrs	r3, r3, #4
 800216e:	461a      	mov	r2, r3
 8002170:	4b73      	ldr	r3, [pc, #460]	; (8002340 <HAL_ADC_ConvCpltCallback+0x218>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b21b      	sxth	r3, r3
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	4a73      	ldr	r2, [pc, #460]	; (8002348 <HAL_ADC_ConvCpltCallback+0x220>)
 800217c:	fb82 0203 	smull	r0, r2, r2, r3
 8002180:	441a      	add	r2, r3
 8002182:	12d2      	asrs	r2, r2, #11
 8002184:	17db      	asrs	r3, r3, #31
 8002186:	1ad2      	subs	r2, r2, r3
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	011a      	lsls	r2, r3, #4
 8002190:	4413      	add	r3, r2
 8002192:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_ADC_ConvCpltCallback+0x224>)
 8002194:	fb82 0203 	smull	r0, r2, r2, r3
 8002198:	1152      	asrs	r2, r2, #5
 800219a:	17db      	asrs	r3, r3, #31
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	440b      	add	r3, r1
 80021a0:	2232      	movs	r2, #50	; 0x32
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	4a6a      	ldr	r2, [pc, #424]	; (8002350 <HAL_ADC_ConvCpltCallback+0x228>)
 80021a8:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80021aa:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_ADC_ConvCpltCallback+0x21c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4619      	mov	r1, r3
 80021b0:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_ADC_ConvCpltCallback+0x214>)
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da00      	bge.n	80021ba <HAL_ADC_ConvCpltCallback+0x92>
 80021b8:	330f      	adds	r3, #15
 80021ba:	111b      	asrs	r3, r3, #4
 80021bc:	461a      	mov	r2, r3
 80021be:	4b60      	ldr	r3, [pc, #384]	; (8002340 <HAL_ADC_ConvCpltCallback+0x218>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	4a5f      	ldr	r2, [pc, #380]	; (8002348 <HAL_ADC_ConvCpltCallback+0x220>)
 80021ca:	fb82 0203 	smull	r0, r2, r2, r3
 80021ce:	441a      	add	r2, r3
 80021d0:	12d2      	asrs	r2, r2, #11
 80021d2:	17db      	asrs	r3, r3, #31
 80021d4:	1ad2      	subs	r2, r2, r3
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	011a      	lsls	r2, r3, #4
 80021de:	4413      	add	r3, r2
 80021e0:	4a5a      	ldr	r2, [pc, #360]	; (800234c <HAL_ADC_ConvCpltCallback+0x224>)
 80021e2:	fb82 0203 	smull	r0, r2, r2, r3
 80021e6:	1152      	asrs	r2, r2, #5
 80021e8:	17db      	asrs	r3, r3, #31
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	2232      	movs	r2, #50	; 0x32
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	4a56      	ldr	r2, [pc, #344]	; (8002350 <HAL_ADC_ConvCpltCallback+0x228>)
 80021f6:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80021f8:	4b52      	ldr	r3, [pc, #328]	; (8002344 <HAL_ADC_ConvCpltCallback+0x21c>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4619      	mov	r1, r3
 80021fe:	4b4f      	ldr	r3, [pc, #316]	; (800233c <HAL_ADC_ConvCpltCallback+0x214>)
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da00      	bge.n	8002208 <HAL_ADC_ConvCpltCallback+0xe0>
 8002206:	330f      	adds	r3, #15
 8002208:	111b      	asrs	r3, r3, #4
 800220a:	461a      	mov	r2, r3
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_ADC_ConvCpltCallback+0x218>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b21b      	sxth	r3, r3
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	4a4c      	ldr	r2, [pc, #304]	; (8002348 <HAL_ADC_ConvCpltCallback+0x220>)
 8002218:	fb82 0203 	smull	r0, r2, r2, r3
 800221c:	441a      	add	r2, r3
 800221e:	12d2      	asrs	r2, r2, #11
 8002220:	17db      	asrs	r3, r3, #31
 8002222:	1ad2      	subs	r2, r2, r3
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	011a      	lsls	r2, r3, #4
 800222c:	4413      	add	r3, r2
 800222e:	4a47      	ldr	r2, [pc, #284]	; (800234c <HAL_ADC_ConvCpltCallback+0x224>)
 8002230:	fb82 0203 	smull	r0, r2, r2, r3
 8002234:	1152      	asrs	r2, r2, #5
 8002236:	17db      	asrs	r3, r3, #31
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	440b      	add	r3, r1
 800223c:	2232      	movs	r2, #50	; 0x32
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	4a43      	ldr	r2, [pc, #268]	; (8002350 <HAL_ADC_ConvCpltCallback+0x228>)
 8002244:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8002246:	4b42      	ldr	r3, [pc, #264]	; (8002350 <HAL_ADC_ConvCpltCallback+0x228>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800224e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002252:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_ADC_ConvCpltCallback+0x228>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	bfb8      	it	lt
 800225a:	425b      	neglt	r3, r3
 800225c:	441a      	add	r2, r3
 800225e:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <HAL_ADC_ConvCpltCallback+0x228>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	bfb8      	it	lt
 8002266:	425b      	neglt	r3, r3
 8002268:	4413      	add	r3, r2
 800226a:	0fda      	lsrs	r2, r3, #31
 800226c:	4413      	add	r3, r2
 800226e:	105b      	asrs	r3, r3, #1
 8002270:	461a      	mov	r2, r3
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <HAL_ADC_ConvCpltCallback+0x228>)
 8002274:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_ADC_ConvCpltCallback+0x22c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4835      	ldr	r0, [pc, #212]	; (8002350 <HAL_ADC_ConvCpltCallback+0x228>)
 800227c:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a35      	ldr	r2, [pc, #212]	; (8002358 <HAL_ADC_ConvCpltCallback+0x230>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d151      	bne.n	800232a <HAL_ADC_ConvCpltCallback+0x202>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_ADC_ConvCpltCallback+0x234>)
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <HAL_ADC_ConvCpltCallback+0x218>)
 800228e:	8812      	ldrh	r2, [r2, #0]
 8002290:	b212      	sxth	r2, r2
 8002292:	fb03 f202 	mul.w	r2, r3, r2
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_ADC_ConvCpltCallback+0x238>)
 8002298:	fba3 1302 	umull	r1, r3, r3, r2
 800229c:	1ad2      	subs	r2, r2, r3
 800229e:	0852      	lsrs	r2, r2, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	0adb      	lsrs	r3, r3, #11
 80022a4:	b25a      	sxtb	r2, r3
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_ADC_ConvCpltCallback+0x23c>)
 80022a8:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 80022aa:	4b2c      	ldr	r3, [pc, #176]	; (800235c <HAL_ADC_ConvCpltCallback+0x234>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	4a23      	ldr	r2, [pc, #140]	; (8002340 <HAL_ADC_ConvCpltCallback+0x218>)
 80022b2:	8812      	ldrh	r2, [r2, #0]
 80022b4:	b212      	sxth	r2, r2
 80022b6:	fb03 f202 	mul.w	r2, r3, r2
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_ADC_ConvCpltCallback+0x238>)
 80022bc:	fba3 1302 	umull	r1, r3, r3, r2
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	0852      	lsrs	r2, r2, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	0adb      	lsrs	r3, r3, #11
 80022c8:	b25a      	sxtb	r2, r3
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_ADC_ConvCpltCallback+0x23c>)
 80022cc:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <HAL_ADC_ConvCpltCallback+0x234>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <HAL_ADC_ConvCpltCallback+0x218>)
 80022d6:	8812      	ldrh	r2, [r2, #0]
 80022d8:	b212      	sxth	r2, r2
 80022da:	fb03 f202 	mul.w	r2, r3, r2
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_ADC_ConvCpltCallback+0x238>)
 80022ea:	fba3 1302 	umull	r1, r3, r3, r2
 80022ee:	1ad2      	subs	r2, r2, r3
 80022f0:	0852      	lsrs	r2, r2, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	0adb      	lsrs	r3, r3, #11
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_ADC_ConvCpltCallback+0x23c>)
 80022f8:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_ADC_ConvCpltCallback+0x234>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <HAL_ADC_ConvCpltCallback+0x218>)
 8002302:	8812      	ldrh	r2, [r2, #0]
 8002304:	b212      	sxth	r2, r2
 8002306:	fb03 f202 	mul.w	r2, r3, r2
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_ADC_ConvCpltCallback+0x240>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0bdb      	lsrs	r3, r3, #15
 800231c:	b29a      	uxth	r2, r3
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_ADC_ConvCpltCallback+0x23c>)
 8002320:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_ADC_ConvCpltCallback+0x244>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	480f      	ldr	r0, [pc, #60]	; (8002364 <HAL_ADC_ConvCpltCallback+0x23c>)
 8002328:	4798      	blx	r3
	}
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000076c 	.word	0x2000076c
 8002338:	200000d4 	.word	0x200000d4
 800233c:	20000698 	.word	0x20000698
 8002340:	200006e4 	.word	0x200006e4
 8002344:	200006d8 	.word	0x200006d8
 8002348:	80080081 	.word	0x80080081
 800234c:	51eb851f 	.word	0x51eb851f
 8002350:	200006ec 	.word	0x200006ec
 8002354:	200006e8 	.word	0x200006e8
 8002358:	200007d8 	.word	0x200007d8
 800235c:	200006b8 	.word	0x200006b8
 8002360:	00100101 	.word	0x00100101
 8002364:	20000700 	.word	0x20000700
 8002368:	ccd99a67 	.word	0xccd99a67
 800236c:	200006fc 	.word	0x200006fc

08002370 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f004 f83f 	bl	80063fc <HAL_FDCAN_Start>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e00a      	b.n	800239e <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002388:	2200      	movs	r2, #0
 800238a:	2101      	movs	r1, #1
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f004 f97b 	bl	8006688 <HAL_FDCAN_ActivateNotification>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <FDCAN_addCallback+0x70>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	d901      	bls.n	80023c0 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 80023bc:	2303      	movs	r3, #3
 80023be:	e025      	b.n	800240c <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	e00c      	b.n	80023e0 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80023c6:	4a15      	ldr	r2, [pc, #84]	; (800241c <FDCAN_addCallback+0x74>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d101      	bne.n	80023da <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e018      	b.n	800240c <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <FDCAN_addCallback+0x70>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d3ed      	bcc.n	80023c6 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <FDCAN_addCallback+0x70>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	490a      	ldr	r1, [pc, #40]	; (800241c <FDCAN_addCallback+0x74>)
 80023f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <FDCAN_addCallback+0x74>)
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <FDCAN_addCallback+0x70>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <FDCAN_addCallback+0x70>)
 8002408:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3724      	adds	r7, #36	; 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000768 	.word	0x20000768
 800241c:	20000718 	.word	0x20000718

08002420 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	; 0x38
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8002430:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8002434:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8002442:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8002448:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800244e:	2300      	movs	r3, #0
 8002450:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4619      	mov	r1, r3
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f003 fff4 	bl	800644c <HAL_FDCAN_AddMessageToTxFifoQ>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3738      	adds	r7, #56	; 0x38
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b09e      	sub	sp, #120	; 0x78
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f004 f821 	bl	80064d4 <HAL_FDCAN_GetRxMessage>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8002498:	f000 fd90 	bl	8002fbc <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800249c:	2300      	movs	r3, #0
 800249e:	677b      	str	r3, [r7, #116]	; 0x74
 80024a0:	e012      	b.n	80024c8 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <HAL_FDCAN_RxFifo0Callback+0x64>)
 80024a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d107      	bne.n	80024c2 <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <HAL_FDCAN_RxFifo0Callback+0x64>)
 80024b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024ba:	f107 020c 	add.w	r2, r7, #12
 80024be:	4610      	mov	r0, r2
 80024c0:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80024c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c4:	3301      	adds	r3, #1
 80024c6:	677b      	str	r3, [r7, #116]	; 0x74
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d3e7      	bcc.n	80024a2 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3778      	adds	r7, #120	; 0x78
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000718 	.word	0x20000718
 80024e0:	20000768 	.word	0x20000768

080024e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80024ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2220      	movs	r2, #32
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f009 fd97 	bl	800c030 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002502:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <MX_ADC1_Init+0x154>)
 8002504:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002508:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800250a:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <MX_ADC1_Init+0x154>)
 800250c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002510:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002512:	4b49      	ldr	r3, [pc, #292]	; (8002638 <MX_ADC1_Init+0x154>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002518:	4b47      	ldr	r3, [pc, #284]	; (8002638 <MX_ADC1_Init+0x154>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800251e:	4b46      	ldr	r3, [pc, #280]	; (8002638 <MX_ADC1_Init+0x154>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002524:	4b44      	ldr	r3, [pc, #272]	; (8002638 <MX_ADC1_Init+0x154>)
 8002526:	2201      	movs	r2, #1
 8002528:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <MX_ADC1_Init+0x154>)
 800252c:	2208      	movs	r2, #8
 800252e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002530:	4b41      	ldr	r3, [pc, #260]	; (8002638 <MX_ADC1_Init+0x154>)
 8002532:	2200      	movs	r2, #0
 8002534:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002536:	4b40      	ldr	r3, [pc, #256]	; (8002638 <MX_ADC1_Init+0x154>)
 8002538:	2201      	movs	r2, #1
 800253a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800253c:	4b3e      	ldr	r3, [pc, #248]	; (8002638 <MX_ADC1_Init+0x154>)
 800253e:	2204      	movs	r2, #4
 8002540:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002542:	4b3d      	ldr	r3, [pc, #244]	; (8002638 <MX_ADC1_Init+0x154>)
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800254a:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <MX_ADC1_Init+0x154>)
 800254c:	2200      	movs	r2, #0
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002550:	4b39      	ldr	r3, [pc, #228]	; (8002638 <MX_ADC1_Init+0x154>)
 8002552:	2200      	movs	r2, #0
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002556:	4b38      	ldr	r3, [pc, #224]	; (8002638 <MX_ADC1_Init+0x154>)
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800255e:	4b36      	ldr	r3, [pc, #216]	; (8002638 <MX_ADC1_Init+0x154>)
 8002560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002564:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8002566:	4b34      	ldr	r3, [pc, #208]	; (8002638 <MX_ADC1_Init+0x154>)
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800256e:	4b32      	ldr	r3, [pc, #200]	; (8002638 <MX_ADC1_Init+0x154>)
 8002570:	220c      	movs	r2, #12
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8002574:	4b30      	ldr	r3, [pc, #192]	; (8002638 <MX_ADC1_Init+0x154>)
 8002576:	2200      	movs	r2, #0
 8002578:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800257a:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <MX_ADC1_Init+0x154>)
 800257c:	2200      	movs	r2, #0
 800257e:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <MX_ADC1_Init+0x154>)
 8002582:	2201      	movs	r2, #1
 8002584:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002586:	482c      	ldr	r0, [pc, #176]	; (8002638 <MX_ADC1_Init+0x154>)
 8002588:	f001 fd84 	bl	8004094 <HAL_ADC_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002592:	f000 fd13 	bl	8002fbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800259a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259e:	4619      	mov	r1, r3
 80025a0:	4825      	ldr	r0, [pc, #148]	; (8002638 <MX_ADC1_Init+0x154>)
 80025a2:	f002 ff21 	bl	80053e8 <HAL_ADCEx_MultiModeConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80025ac:	f000 fd06 	bl	8002fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <MX_ADC1_Init+0x158>)
 80025b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025b4:	2306      	movs	r3, #6
 80025b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80025b8:	2303      	movs	r3, #3
 80025ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025bc:	237f      	movs	r3, #127	; 0x7f
 80025be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025c0:	2304      	movs	r3, #4
 80025c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	4619      	mov	r1, r3
 80025cc:	481a      	ldr	r0, [pc, #104]	; (8002638 <MX_ADC1_Init+0x154>)
 80025ce:	f002 f9cd 	bl	800496c <HAL_ADC_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80025d8:	f000 fcf0 	bl	8002fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <MX_ADC1_Init+0x15c>)
 80025de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025e0:	230c      	movs	r3, #12
 80025e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	4619      	mov	r1, r3
 80025e8:	4813      	ldr	r0, [pc, #76]	; (8002638 <MX_ADC1_Init+0x154>)
 80025ea:	f002 f9bf 	bl	800496c <HAL_ADC_ConfigChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80025f4:	f000 fce2 	bl	8002fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <MX_ADC1_Init+0x160>)
 80025fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025fc:	2312      	movs	r3, #18
 80025fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	4619      	mov	r1, r3
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <MX_ADC1_Init+0x154>)
 8002606:	f002 f9b1 	bl	800496c <HAL_ADC_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8002610:	f000 fcd4 	bl	8002fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_ADC1_Init+0x164>)
 8002616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002618:	2318      	movs	r3, #24
 800261a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_ADC1_Init+0x154>)
 8002622:	f002 f9a3 	bl	800496c <HAL_ADC_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 800262c:	f000 fcc6 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	3730      	adds	r7, #48	; 0x30
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	2000076c 	.word	0x2000076c
 800263c:	04300002 	.word	0x04300002
 8002640:	08600004 	.word	0x08600004
 8002644:	0c900008 	.word	0x0c900008
 8002648:	cb840000 	.word	0xcb840000

0800264c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002652:	463b      	mov	r3, r7
 8002654:	2220      	movs	r2, #32
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f009 fce9 	bl	800c030 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <MX_ADC2_Init+0x130>)
 8002660:	4a47      	ldr	r2, [pc, #284]	; (8002780 <MX_ADC2_Init+0x134>)
 8002662:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002664:	4b45      	ldr	r3, [pc, #276]	; (800277c <MX_ADC2_Init+0x130>)
 8002666:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800266a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800266c:	4b43      	ldr	r3, [pc, #268]	; (800277c <MX_ADC2_Init+0x130>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002672:	4b42      	ldr	r3, [pc, #264]	; (800277c <MX_ADC2_Init+0x130>)
 8002674:	2200      	movs	r2, #0
 8002676:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002678:	4b40      	ldr	r3, [pc, #256]	; (800277c <MX_ADC2_Init+0x130>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800267e:	4b3f      	ldr	r3, [pc, #252]	; (800277c <MX_ADC2_Init+0x130>)
 8002680:	2201      	movs	r2, #1
 8002682:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002684:	4b3d      	ldr	r3, [pc, #244]	; (800277c <MX_ADC2_Init+0x130>)
 8002686:	2204      	movs	r2, #4
 8002688:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800268a:	4b3c      	ldr	r3, [pc, #240]	; (800277c <MX_ADC2_Init+0x130>)
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002690:	4b3a      	ldr	r3, [pc, #232]	; (800277c <MX_ADC2_Init+0x130>)
 8002692:	2201      	movs	r2, #1
 8002694:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <MX_ADC2_Init+0x130>)
 8002698:	2204      	movs	r2, #4
 800269a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <MX_ADC2_Init+0x130>)
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026a4:	4b35      	ldr	r3, [pc, #212]	; (800277c <MX_ADC2_Init+0x130>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <MX_ADC2_Init+0x130>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80026b0:	4b32      	ldr	r3, [pc, #200]	; (800277c <MX_ADC2_Init+0x130>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80026b8:	4b30      	ldr	r3, [pc, #192]	; (800277c <MX_ADC2_Init+0x130>)
 80026ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <MX_ADC2_Init+0x130>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80026c8:	4b2c      	ldr	r3, [pc, #176]	; (800277c <MX_ADC2_Init+0x130>)
 80026ca:	220c      	movs	r2, #12
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80026ce:	4b2b      	ldr	r3, [pc, #172]	; (800277c <MX_ADC2_Init+0x130>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <MX_ADC2_Init+0x130>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80026da:	4b28      	ldr	r3, [pc, #160]	; (800277c <MX_ADC2_Init+0x130>)
 80026dc:	2201      	movs	r2, #1
 80026de:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80026e0:	4826      	ldr	r0, [pc, #152]	; (800277c <MX_ADC2_Init+0x130>)
 80026e2:	f001 fcd7 	bl	8004094 <HAL_ADC_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80026ec:	f000 fc66 	bl	8002fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <MX_ADC2_Init+0x138>)
 80026f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026f4:	2306      	movs	r3, #6
 80026f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80026f8:	2307      	movs	r3, #7
 80026fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026fc:	237f      	movs	r3, #127	; 0x7f
 80026fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002700:	2304      	movs	r3, #4
 8002702:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002708:	463b      	mov	r3, r7
 800270a:	4619      	mov	r1, r3
 800270c:	481b      	ldr	r0, [pc, #108]	; (800277c <MX_ADC2_Init+0x130>)
 800270e:	f002 f92d 	bl	800496c <HAL_ADC_ConfigChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8002718:	f000 fc50 	bl	8002fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <MX_ADC2_Init+0x13c>)
 800271e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002720:	230c      	movs	r3, #12
 8002722:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002728:	463b      	mov	r3, r7
 800272a:	4619      	mov	r1, r3
 800272c:	4813      	ldr	r0, [pc, #76]	; (800277c <MX_ADC2_Init+0x130>)
 800272e:	f002 f91d 	bl	800496c <HAL_ADC_ConfigChannel>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8002738:	f000 fc40 	bl	8002fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <MX_ADC2_Init+0x140>)
 800273e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002740:	2312      	movs	r3, #18
 8002742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002744:	463b      	mov	r3, r7
 8002746:	4619      	mov	r1, r3
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <MX_ADC2_Init+0x130>)
 800274a:	f002 f90f 	bl	800496c <HAL_ADC_ConfigChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 8002754:	f000 fc32 	bl	8002fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <MX_ADC2_Init+0x144>)
 800275a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800275c:	2318      	movs	r3, #24
 800275e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002760:	463b      	mov	r3, r7
 8002762:	4619      	mov	r1, r3
 8002764:	4805      	ldr	r0, [pc, #20]	; (800277c <MX_ADC2_Init+0x130>)
 8002766:	f002 f901 	bl	800496c <HAL_ADC_ConfigChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8002770:	f000 fc24 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200007d8 	.word	0x200007d8
 8002780:	50000100 	.word	0x50000100
 8002784:	32601000 	.word	0x32601000
 8002788:	3ac04000 	.word	0x3ac04000
 800278c:	36902000 	.word	0x36902000
 8002790:	0c900008 	.word	0x0c900008

08002794 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b09e      	sub	sp, #120	; 0x78
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027ac:	f107 0320 	add.w	r3, r7, #32
 80027b0:	2244      	movs	r2, #68	; 0x44
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f009 fc3b 	bl	800c030 <memset>
  if(adcHandle->Instance==ADC1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c2:	d171      	bne.n	80028a8 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80027c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80027ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80027ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027d0:	f107 0320 	add.w	r3, r7, #32
 80027d4:	4618      	mov	r0, r3
 80027d6:	f005 fb3b 	bl	8007e50 <HAL_RCCEx_PeriphCLKConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80027e0:	f000 fbec 	bl	8002fbc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80027e4:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <HAL_ADC_MspInit+0x23c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a79      	ldr	r2, [pc, #484]	; (80029d0 <HAL_ADC_MspInit+0x23c>)
 80027ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80027ee:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <HAL_ADC_MspInit+0x23c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10b      	bne.n	800280e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80027f6:	4b77      	ldr	r3, [pc, #476]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a76      	ldr	r2, [pc, #472]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 80027fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b74      	ldr	r3, [pc, #464]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	4b71      	ldr	r3, [pc, #452]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a70      	ldr	r2, [pc, #448]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281a:	4b6e      	ldr	r3, [pc, #440]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8002826:	2307      	movs	r3, #7
 8002828:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800282a:	2303      	movs	r3, #3
 800282c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002836:	4619      	mov	r1, r3
 8002838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283c:	f004 fb2a 	bl	8006e94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002840:	4b65      	ldr	r3, [pc, #404]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 8002842:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_ADC_MspInit+0x248>)
 8002844:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002846:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 8002848:	2205      	movs	r2, #5
 800284a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800284c:	4b62      	ldr	r3, [pc, #392]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002852:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002858:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800285e:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 8002860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002864:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002866:	4b5c      	ldr	r3, [pc, #368]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 8002868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800286c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800286e:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 8002870:	2220      	movs	r2, #32
 8002872:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002874:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800287a:	4857      	ldr	r0, [pc, #348]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 800287c:	f003 f932 	bl	8005ae4 <HAL_DMA_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002886:	f000 fb99 	bl	8002fbc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
 8002890:	4a51      	ldr	r2, [pc, #324]	; (80029d8 <HAL_ADC_MspInit+0x244>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	2012      	movs	r0, #18
 800289c:	f002 ff23 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028a0:	2012      	movs	r0, #18
 80028a2:	f002 ff3a 	bl	800571a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80028a6:	e08f      	b.n	80029c8 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_ADC_MspInit+0x24c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	f040 808a 	bne.w	80029c8 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80028b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80028ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80028be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c0:	f107 0320 	add.w	r3, r7, #32
 80028c4:	4618      	mov	r0, r3
 80028c6:	f005 fac3 	bl	8007e50 <HAL_RCCEx_PeriphCLKConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 80028d0:	f000 fb74 	bl	8002fbc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80028d4:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_ADC_MspInit+0x23c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <HAL_ADC_MspInit+0x23c>)
 80028dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_ADC_MspInit+0x23c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d10b      	bne.n	80028fe <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80028e6:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	4a3a      	ldr	r2, [pc, #232]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 80028ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4b35      	ldr	r3, [pc, #212]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	4a34      	ldr	r2, [pc, #208]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290a:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002916:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a2e      	ldr	r2, [pc, #184]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <HAL_ADC_MspInit+0x240>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 800292e:	2360      	movs	r3, #96	; 0x60
 8002930:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002932:	2303      	movs	r3, #3
 8002934:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002944:	f004 faa6 	bl	8006e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8002948:	f640 0304 	movw	r3, #2052	; 0x804
 800294c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800294e:	2303      	movs	r3, #3
 8002950:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800295a:	4619      	mov	r1, r3
 800295c:	4821      	ldr	r0, [pc, #132]	; (80029e4 <HAL_ADC_MspInit+0x250>)
 800295e:	f004 fa99 	bl	8006e94 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 8002964:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_ADC_MspInit+0x258>)
 8002966:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800296e:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 8002982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002986:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 800298a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800298e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 8002992:	2220      	movs	r2, #32
 8002994:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800299c:	4812      	ldr	r0, [pc, #72]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 800299e:	f003 f8a1 	bl	8005ae4 <HAL_DMA_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_ADC_MspInit+0x218>
      Error_Handler();
 80029a8:	f000 fb08 	bl	8002fbc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
 80029b2:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <HAL_ADC_MspInit+0x254>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2100      	movs	r1, #0
 80029bc:	2012      	movs	r0, #18
 80029be:	f002 fe92 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80029c2:	2012      	movs	r0, #18
 80029c4:	f002 fea9 	bl	800571a <HAL_NVIC_EnableIRQ>
}
 80029c8:	bf00      	nop
 80029ca:	3778      	adds	r7, #120	; 0x78
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000904 	.word	0x20000904
 80029d4:	40021000 	.word	0x40021000
 80029d8:	20000844 	.word	0x20000844
 80029dc:	40020008 	.word	0x40020008
 80029e0:	50000100 	.word	0x50000100
 80029e4:	48000400 	.word	0x48000400
 80029e8:	200008a4 	.word	0x200008a4
 80029ec:	4002001c 	.word	0x4002001c

080029f0 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	; 0x30
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80029f6:	463b      	mov	r3, r7
 80029f8:	2230      	movs	r2, #48	; 0x30
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f009 fb17 	bl	800c030 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <MX_DAC1_Init+0x6c>)
 8002a04:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <MX_DAC1_Init+0x70>)
 8002a06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002a08:	4814      	ldr	r0, [pc, #80]	; (8002a5c <MX_DAC1_Init+0x6c>)
 8002a0a:	f002 fea0 	bl	800574e <HAL_DAC_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002a14:	f000 fad2 	bl	8002fbc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002a34:	2301      	movs	r3, #1
 8002a36:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4619      	mov	r1, r3
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <MX_DAC1_Init+0x6c>)
 8002a44:	f002 fea6 	bl	8005794 <HAL_DAC_ConfigChannel>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002a4e:	f000 fab5 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	3730      	adds	r7, #48	; 0x30
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000908 	.word	0x20000908
 8002a60:	50000800 	.word	0x50000800

08002a64 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <HAL_DAC_MspInit+0x74>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d124      	bne.n	8002ad0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_DAC_MspInit+0x78>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_DAC_MspInit+0x78>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_DAC_MspInit+0x78>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_DAC_MspInit+0x78>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <HAL_DAC_MspInit+0x78>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <HAL_DAC_MspInit+0x78>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aba:	2303      	movs	r3, #3
 8002abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002acc:	f004 f9e2 	bl	8006e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	50000800 	.word	0x50000800
 8002adc:	40021000 	.word	0x40021000

08002ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ae6:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <MX_DMA_Init+0xc8>)
 8002ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aea:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <MX_DMA_Init+0xc8>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	6493      	str	r3, [r2, #72]	; 0x48
 8002af2:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <MX_DMA_Init+0xc8>)
 8002af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afe:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <MX_DMA_Init+0xc8>)
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	4a29      	ldr	r2, [pc, #164]	; (8002ba8 <MX_DMA_Init+0xc8>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6493      	str	r3, [r2, #72]	; 0x48
 8002b0a:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <MX_DMA_Init+0xc8>)
 8002b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <MX_DMA_Init+0xc8>)
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <MX_DMA_Init+0xc8>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6493      	str	r3, [r2, #72]	; 0x48
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <MX_DMA_Init+0xc8>)
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	200b      	movs	r0, #11
 8002b34:	f002 fdd7 	bl	80056e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b38:	200b      	movs	r0, #11
 8002b3a:	f002 fdee 	bl	800571a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	200c      	movs	r0, #12
 8002b44:	f002 fdcf 	bl	80056e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002b48:	200c      	movs	r0, #12
 8002b4a:	f002 fde6 	bl	800571a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	200d      	movs	r0, #13
 8002b54:	f002 fdc7 	bl	80056e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002b58:	200d      	movs	r0, #13
 8002b5a:	f002 fdde 	bl	800571a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	200e      	movs	r0, #14
 8002b64:	f002 fdbf 	bl	80056e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002b68:	200e      	movs	r0, #14
 8002b6a:	f002 fdd6 	bl	800571a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	2038      	movs	r0, #56	; 0x38
 8002b74:	f002 fdb7 	bl	80056e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002b78:	2038      	movs	r0, #56	; 0x38
 8002b7a:	f002 fdce 	bl	800571a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	2039      	movs	r0, #57	; 0x39
 8002b84:	f002 fdaf 	bl	80056e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002b88:	2039      	movs	r0, #57	; 0x39
 8002b8a:	f002 fdc6 	bl	800571a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	203a      	movs	r0, #58	; 0x3a
 8002b94:	f002 fda7 	bl	80056e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002b98:	203a      	movs	r0, #58	; 0x3a
 8002b9a:	f002 fdbe 	bl	800571a <HAL_NVIC_EnableIRQ>

}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000

08002bac <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bb2:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <MX_FDCAN1_Init+0x8c>)
 8002bb4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bbe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002bc2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8002be2:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bea:	222a      	movs	r2, #42	; 0x2a
 8002bec:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002bfc:	2209      	movs	r2, #9
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002c02:	220a      	movs	r2, #10
 8002c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002c08:	2209      	movs	r2, #9
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_FDCAN1_Init+0x88>)
 8002c20:	f003 fa92 	bl	8006148 <HAL_FDCAN_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002c2a:	f000 f9c7 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000091c 	.word	0x2000091c
 8002c38:	40006400 	.word	0x40006400

08002c3c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b09a      	sub	sp, #104	; 0x68
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	2244      	movs	r2, #68	; 0x44
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f009 f9e7 	bl	800c030 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a24      	ldr	r2, [pc, #144]	; (8002cf8 <HAL_FDCAN_MspInit+0xbc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d141      	bne.n	8002cf0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c70:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c76:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f005 f8e7 	bl	8007e50 <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002c88:	f000 f998 	bl	8002fbc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_FDCAN_MspInit+0xc0>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	4a1a      	ldr	r2, [pc, #104]	; (8002cfc <HAL_FDCAN_MspInit+0xc0>)
 8002c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c96:	6593      	str	r3, [r2, #88]	; 0x58
 8002c98:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_FDCAN_MspInit+0xc0>)
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca4:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_FDCAN_MspInit+0xc0>)
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_FDCAN_MspInit+0xc0>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_FDCAN_MspInit+0xc0>)
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002cbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002cc0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002cce:	2309      	movs	r3, #9
 8002cd0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cdc:	f004 f8da 	bl	8006e94 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	2015      	movs	r0, #21
 8002ce6:	f002 fcfe 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002cea:	2015      	movs	r0, #21
 8002cec:	f002 fd15 	bl	800571a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3768      	adds	r7, #104	; 0x68
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40006400 	.word	0x40006400
 8002cfc:	40021000 	.word	0x40021000

08002d00 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_FMAC_Init+0x20>)
 8002d06:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <MX_FMAC_Init+0x24>)
 8002d08:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_FMAC_Init+0x20>)
 8002d0c:	f004 f816 	bl	8006d3c <HAL_FMAC_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8002d16:	f000 f951 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000980 	.word	0x20000980
 8002d24:	40021400 	.word	0x40021400

08002d28 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <HAL_FMAC_MspInit+0x38>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10b      	bne.n	8002d52 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_FMAC_MspInit+0x3c>)
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3e:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_FMAC_MspInit+0x3c>)
 8002d40:	f043 0310 	orr.w	r3, r3, #16
 8002d44:	6493      	str	r3, [r2, #72]	; 0x48
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_FMAC_MspInit+0x3c>)
 8002d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021400 	.word	0x40021400
 8002d64:	40021000 	.word	0x40021000

08002d68 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d7e:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	4a50      	ldr	r2, [pc, #320]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002d84:	f043 0320 	orr.w	r3, r3, #32
 8002d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8a:	4b4e      	ldr	r3, [pc, #312]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	4b4b      	ldr	r3, [pc, #300]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	4a4a      	ldr	r2, [pc, #296]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da2:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	4a44      	ldr	r2, [pc, #272]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dba:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	4a3e      	ldr	r2, [pc, #248]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd2:	4b3c      	ldr	r3, [pc, #240]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	4a38      	ldr	r2, [pc, #224]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002de4:	f043 0308 	orr.w	r3, r3, #8
 8002de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <MX_GPIO_Init+0x15c>)
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8002df6:	2200      	movs	r2, #0
 8002df8:	21c0      	movs	r1, #192	; 0xc0
 8002dfa:	4833      	ldr	r0, [pc, #204]	; (8002ec8 <MX_GPIO_Init+0x160>)
 8002dfc:	f004 f9cc 	bl	8007198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8002e00:	2200      	movs	r2, #0
 8002e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0a:	f004 f9c5 	bl	8007198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2104      	movs	r1, #4
 8002e12:	482e      	ldr	r0, [pc, #184]	; (8002ecc <MX_GPIO_Init+0x164>)
 8002e14:	f004 f9c0 	bl	8007198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2140      	movs	r1, #64	; 0x40
 8002e1c:	482c      	ldr	r0, [pc, #176]	; (8002ed0 <MX_GPIO_Init+0x168>)
 8002e1e:	f004 f9bb 	bl	8007198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8002e22:	23c0      	movs	r3, #192	; 0xc0
 8002e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	4619      	mov	r1, r3
 8002e38:	4823      	ldr	r0, [pc, #140]	; (8002ec8 <MX_GPIO_Init+0x160>)
 8002e3a:	f004 f82b 	bl	8006e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5e:	f004 f819 	bl	8006e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8002e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2300      	movs	r3, #0
 8002e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e7e:	f004 f809 	bl	8006e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8002e82:	2304      	movs	r3, #4
 8002e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e86:	2301      	movs	r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8002e92:	f107 0314 	add.w	r3, r7, #20
 8002e96:	4619      	mov	r1, r3
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <MX_GPIO_Init+0x164>)
 8002e9a:	f003 fffb 	bl	8006e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8002e9e:	2340      	movs	r3, #64	; 0x40
 8002ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <MX_GPIO_Init+0x168>)
 8002eb6:	f003 ffed 	bl	8006e94 <HAL_GPIO_Init>

}
 8002eba:	bf00      	nop
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	48000800 	.word	0x48000800
 8002ecc:	48000c00 	.word	0x48000c00
 8002ed0:	48000400 	.word	0x48000400

08002ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ed8:	f000 fe05 	bl	8003ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002edc:	f000 f81b 	bl	8002f16 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ee0:	f7ff ff42 	bl	8002d68 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ee4:	f7ff fdfc 	bl	8002ae0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002ee8:	f7ff fe60 	bl	8002bac <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8002eec:	f000 f86c 	bl	8002fc8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002ef0:	f000 f8a8 	bl	8003044 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002ef4:	f000 fb3c 	bl	8003570 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002ef8:	f7ff faf4 	bl	80024e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002efc:	f7ff fba6 	bl	800264c <MX_ADC2_Init>
  MX_DAC1_Init();
 8002f00:	f7ff fd76 	bl	80029f0 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8002f04:	f000 fcec 	bl	80038e0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002f08:	f000 fbfa 	bl	8003700 <MX_TIM3_Init>
  MX_FMAC_Init();
 8002f0c:	f7ff fef8 	bl	8002d00 <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 8002f10:	f7fd fc28 	bl	8000764 <BLDC_main>
 8002f14:	e7fc      	b.n	8002f10 <main+0x3c>

08002f16 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b094      	sub	sp, #80	; 0x50
 8002f1a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f1c:	f107 0318 	add.w	r3, r7, #24
 8002f20:	2238      	movs	r2, #56	; 0x38
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f009 f883 	bl	800c030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f004 f95f 	bl	80071fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f48:	2340      	movs	r3, #64	; 0x40
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f50:	2302      	movs	r3, #2
 8002f52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002f54:	2304      	movs	r3, #4
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002f58:	2350      	movs	r3, #80	; 0x50
 8002f5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002f60:	2308      	movs	r3, #8
 8002f62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f64:	2302      	movs	r3, #2
 8002f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f68:	f107 0318 	add.w	r3, r7, #24
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f004 f9f9 	bl	8007364 <HAL_RCC_OscConfig>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002f78:	f000 f820 	bl	8002fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f80:	2303      	movs	r3, #3
 8002f82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	2104      	movs	r1, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f004 fcfd 	bl	8007994 <HAL_RCC_ClockConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002fa0:	f000 f80c 	bl	8002fbc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8002fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fa8:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8002fac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fb0:	f004 fe2c 	bl	8007c0c <HAL_RCC_MCOConfig>
}
 8002fb4:	bf00      	nop
 8002fb6:	3750      	adds	r7, #80	; 0x50
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc0:	b672      	cpsid	i
}
 8002fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <Error_Handler+0x8>
	...

08002fc8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <MX_SPI1_Init+0x74>)
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <MX_SPI1_Init+0x78>)
 8002fd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <MX_SPI1_Init+0x74>)
 8002fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <MX_SPI1_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <MX_SPI1_Init+0x74>)
 8002fe2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002fe6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <MX_SPI1_Init+0x74>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <MX_SPI1_Init+0x74>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <MX_SPI1_Init+0x74>)
 8002ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <MX_SPI1_Init+0x74>)
 8002ffe:	2228      	movs	r2, #40	; 0x28
 8003000:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <MX_SPI1_Init+0x74>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <MX_SPI1_Init+0x74>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <MX_SPI1_Init+0x74>)
 8003010:	2200      	movs	r2, #0
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <MX_SPI1_Init+0x74>)
 8003016:	2207      	movs	r2, #7
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <MX_SPI1_Init+0x74>)
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <MX_SPI1_Init+0x74>)
 8003022:	2200      	movs	r2, #0
 8003024:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003026:	4805      	ldr	r0, [pc, #20]	; (800303c <MX_SPI1_Init+0x74>)
 8003028:	f005 f902 	bl	8008230 <HAL_SPI_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003032:	f7ff ffc3 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200009b8 	.word	0x200009b8
 8003040:	40013000 	.word	0x40013000

08003044 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <MX_SPI3_Init+0x74>)
 800304a:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <MX_SPI3_Init+0x78>)
 800304c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <MX_SPI3_Init+0x74>)
 8003050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003054:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <MX_SPI3_Init+0x74>)
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MX_SPI3_Init+0x74>)
 800305e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003062:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <MX_SPI3_Init+0x74>)
 8003066:	2200      	movs	r2, #0
 8003068:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_SPI3_Init+0x74>)
 800306c:	2201      	movs	r2, #1
 800306e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <MX_SPI3_Init+0x74>)
 8003072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003076:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <MX_SPI3_Init+0x74>)
 800307a:	2228      	movs	r2, #40	; 0x28
 800307c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <MX_SPI3_Init+0x74>)
 8003080:	2200      	movs	r2, #0
 8003082:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <MX_SPI3_Init+0x74>)
 8003086:	2200      	movs	r2, #0
 8003088:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <MX_SPI3_Init+0x74>)
 800308c:	2200      	movs	r2, #0
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <MX_SPI3_Init+0x74>)
 8003092:	2207      	movs	r2, #7
 8003094:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <MX_SPI3_Init+0x74>)
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_SPI3_Init+0x74>)
 800309e:	2200      	movs	r2, #0
 80030a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80030a2:	4805      	ldr	r0, [pc, #20]	; (80030b8 <MX_SPI3_Init+0x74>)
 80030a4:	f005 f8c4 	bl	8008230 <HAL_SPI_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80030ae:	f7ff ff85 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000a1c 	.word	0x20000a1c
 80030bc:	40003c00 	.word	0x40003c00

080030c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a89      	ldr	r2, [pc, #548]	; (8003304 <HAL_SPI_MspInit+0x244>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	f040 8083 	bne.w	80031ea <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030e4:	4b88      	ldr	r3, [pc, #544]	; (8003308 <HAL_SPI_MspInit+0x248>)
 80030e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e8:	4a87      	ldr	r2, [pc, #540]	; (8003308 <HAL_SPI_MspInit+0x248>)
 80030ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ee:	6613      	str	r3, [r2, #96]	; 0x60
 80030f0:	4b85      	ldr	r3, [pc, #532]	; (8003308 <HAL_SPI_MspInit+0x248>)
 80030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fc:	4b82      	ldr	r3, [pc, #520]	; (8003308 <HAL_SPI_MspInit+0x248>)
 80030fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003100:	4a81      	ldr	r2, [pc, #516]	; (8003308 <HAL_SPI_MspInit+0x248>)
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003108:	4b7f      	ldr	r3, [pc, #508]	; (8003308 <HAL_SPI_MspInit+0x248>)
 800310a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003114:	2338      	movs	r3, #56	; 0x38
 8003116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003120:	2300      	movs	r3, #0
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003124:	2305      	movs	r3, #5
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	4877      	ldr	r0, [pc, #476]	; (800330c <HAL_SPI_MspInit+0x24c>)
 8003130:	f003 feb0 	bl	8006e94 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003134:	4b76      	ldr	r3, [pc, #472]	; (8003310 <HAL_SPI_MspInit+0x250>)
 8003136:	4a77      	ldr	r2, [pc, #476]	; (8003314 <HAL_SPI_MspInit+0x254>)
 8003138:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800313a:	4b75      	ldr	r3, [pc, #468]	; (8003310 <HAL_SPI_MspInit+0x250>)
 800313c:	220a      	movs	r2, #10
 800313e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003140:	4b73      	ldr	r3, [pc, #460]	; (8003310 <HAL_SPI_MspInit+0x250>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003146:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_SPI_MspInit+0x250>)
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800314c:	4b70      	ldr	r3, [pc, #448]	; (8003310 <HAL_SPI_MspInit+0x250>)
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003152:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_SPI_MspInit+0x250>)
 8003154:	2200      	movs	r2, #0
 8003156:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003158:	4b6d      	ldr	r3, [pc, #436]	; (8003310 <HAL_SPI_MspInit+0x250>)
 800315a:	2200      	movs	r2, #0
 800315c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800315e:	4b6c      	ldr	r3, [pc, #432]	; (8003310 <HAL_SPI_MspInit+0x250>)
 8003160:	2200      	movs	r2, #0
 8003162:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_SPI_MspInit+0x250>)
 8003166:	2200      	movs	r2, #0
 8003168:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800316a:	4869      	ldr	r0, [pc, #420]	; (8003310 <HAL_SPI_MspInit+0x250>)
 800316c:	f002 fcba 	bl	8005ae4 <HAL_DMA_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003176:	f7ff ff21 	bl	8002fbc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a64      	ldr	r2, [pc, #400]	; (8003310 <HAL_SPI_MspInit+0x250>)
 800317e:	659a      	str	r2, [r3, #88]	; 0x58
 8003180:	4a63      	ldr	r2, [pc, #396]	; (8003310 <HAL_SPI_MspInit+0x250>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003186:	4b64      	ldr	r3, [pc, #400]	; (8003318 <HAL_SPI_MspInit+0x258>)
 8003188:	4a64      	ldr	r2, [pc, #400]	; (800331c <HAL_SPI_MspInit+0x25c>)
 800318a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800318c:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_SPI_MspInit+0x258>)
 800318e:	220b      	movs	r2, #11
 8003190:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003192:	4b61      	ldr	r3, [pc, #388]	; (8003318 <HAL_SPI_MspInit+0x258>)
 8003194:	2210      	movs	r2, #16
 8003196:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003198:	4b5f      	ldr	r3, [pc, #380]	; (8003318 <HAL_SPI_MspInit+0x258>)
 800319a:	2200      	movs	r2, #0
 800319c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800319e:	4b5e      	ldr	r3, [pc, #376]	; (8003318 <HAL_SPI_MspInit+0x258>)
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031a4:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_SPI_MspInit+0x258>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031aa:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <HAL_SPI_MspInit+0x258>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_SPI_MspInit+0x258>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031b6:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_SPI_MspInit+0x258>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80031bc:	4856      	ldr	r0, [pc, #344]	; (8003318 <HAL_SPI_MspInit+0x258>)
 80031be:	f002 fc91 	bl	8005ae4 <HAL_DMA_Init>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80031c8:	f7ff fef8 	bl	8002fbc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_SPI_MspInit+0x258>)
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
 80031d2:	4a51      	ldr	r2, [pc, #324]	; (8003318 <HAL_SPI_MspInit+0x258>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80031d8:	2200      	movs	r2, #0
 80031da:	2100      	movs	r1, #0
 80031dc:	2023      	movs	r0, #35	; 0x23
 80031de:	f002 fa82 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80031e2:	2023      	movs	r0, #35	; 0x23
 80031e4:	f002 fa99 	bl	800571a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80031e8:	e088      	b.n	80032fc <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4c      	ldr	r2, [pc, #304]	; (8003320 <HAL_SPI_MspInit+0x260>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	f040 8083 	bne.w	80032fc <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031f6:	4b44      	ldr	r3, [pc, #272]	; (8003308 <HAL_SPI_MspInit+0x248>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	4a43      	ldr	r2, [pc, #268]	; (8003308 <HAL_SPI_MspInit+0x248>)
 80031fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_SPI_MspInit+0x248>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320e:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <HAL_SPI_MspInit+0x248>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	4a3d      	ldr	r2, [pc, #244]	; (8003308 <HAL_SPI_MspInit+0x248>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800321a:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_SPI_MspInit+0x248>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003226:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800322a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	2302      	movs	r3, #2
 800322e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003234:	2300      	movs	r3, #0
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003238:	2306      	movs	r3, #6
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323c:	f107 031c 	add.w	r3, r7, #28
 8003240:	4619      	mov	r1, r3
 8003242:	4838      	ldr	r0, [pc, #224]	; (8003324 <HAL_SPI_MspInit+0x264>)
 8003244:	f003 fe26 	bl	8006e94 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8003248:	4b37      	ldr	r3, [pc, #220]	; (8003328 <HAL_SPI_MspInit+0x268>)
 800324a:	4a38      	ldr	r2, [pc, #224]	; (800332c <HAL_SPI_MspInit+0x26c>)
 800324c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <HAL_SPI_MspInit+0x268>)
 8003250:	220e      	movs	r2, #14
 8003252:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003254:	4b34      	ldr	r3, [pc, #208]	; (8003328 <HAL_SPI_MspInit+0x268>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800325a:	4b33      	ldr	r3, [pc, #204]	; (8003328 <HAL_SPI_MspInit+0x268>)
 800325c:	2200      	movs	r2, #0
 800325e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003260:	4b31      	ldr	r3, [pc, #196]	; (8003328 <HAL_SPI_MspInit+0x268>)
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003266:	4b30      	ldr	r3, [pc, #192]	; (8003328 <HAL_SPI_MspInit+0x268>)
 8003268:	2200      	movs	r2, #0
 800326a:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800326c:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_SPI_MspInit+0x268>)
 800326e:	2200      	movs	r2, #0
 8003270:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_SPI_MspInit+0x268>)
 8003274:	2200      	movs	r2, #0
 8003276:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_SPI_MspInit+0x268>)
 800327a:	2200      	movs	r2, #0
 800327c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800327e:	482a      	ldr	r0, [pc, #168]	; (8003328 <HAL_SPI_MspInit+0x268>)
 8003280:	f002 fc30 	bl	8005ae4 <HAL_DMA_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 800328a:	f7ff fe97 	bl	8002fbc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <HAL_SPI_MspInit+0x268>)
 8003292:	659a      	str	r2, [r3, #88]	; 0x58
 8003294:	4a24      	ldr	r2, [pc, #144]	; (8003328 <HAL_SPI_MspInit+0x268>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 800329a:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_SPI_MspInit+0x270>)
 800329c:	4a25      	ldr	r2, [pc, #148]	; (8003334 <HAL_SPI_MspInit+0x274>)
 800329e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032a2:	220f      	movs	r2, #15
 80032a4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032a8:	2210      	movs	r2, #16
 80032aa:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ac:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032b2:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80032d0:	4817      	ldr	r0, [pc, #92]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032d2:	f002 fc07 	bl	8005ae4 <HAL_DMA_Init>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 80032dc:	f7ff fe6e 	bl	8002fbc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a13      	ldr	r2, [pc, #76]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <HAL_SPI_MspInit+0x270>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	2033      	movs	r0, #51	; 0x33
 80032f2:	f002 f9f8 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80032f6:	2033      	movs	r0, #51	; 0x33
 80032f8:	f002 fa0f 	bl	800571a <HAL_NVIC_EnableIRQ>
}
 80032fc:	bf00      	nop
 80032fe:	3730      	adds	r7, #48	; 0x30
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40013000 	.word	0x40013000
 8003308:	40021000 	.word	0x40021000
 800330c:	48000400 	.word	0x48000400
 8003310:	20000a80 	.word	0x20000a80
 8003314:	40020030 	.word	0x40020030
 8003318:	20000ae0 	.word	0x20000ae0
 800331c:	40020044 	.word	0x40020044
 8003320:	40003c00 	.word	0x40003c00
 8003324:	48000800 	.word	0x48000800
 8003328:	20000b40 	.word	0x20000b40
 800332c:	40020408 	.word	0x40020408
 8003330:	20000ba0 	.word	0x20000ba0
 8003334:	4002041c 	.word	0x4002041c

08003338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_MspInit+0x44>)
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_MspInit+0x44>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6613      	str	r3, [r2, #96]	; 0x60
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_MspInit+0x44>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_MspInit+0x44>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4a08      	ldr	r2, [pc, #32]	; (800337c <HAL_MspInit+0x44>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6593      	str	r3, [r2, #88]	; 0x58
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_MspInit+0x44>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800336e:	f003 ffe9 	bl	8007344 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000

08003380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003384:	e7fe      	b.n	8003384 <NMI_Handler+0x4>

08003386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338a:	e7fe      	b.n	800338a <HardFault_Handler+0x4>

0800338c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003390:	e7fe      	b.n	8003390 <MemManage_Handler+0x4>

08003392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003396:	e7fe      	b.n	8003396 <BusFault_Handler+0x4>

08003398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800339c:	e7fe      	b.n	800339c <UsageFault_Handler+0x4>

0800339e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033cc:	f000 fbde 	bl	8003b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <DMA1_Channel1_IRQHandler+0x10>)
 80033da:	f002 fd66 	bl	8005eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000844 	.word	0x20000844

080033e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <DMA1_Channel2_IRQHandler+0x10>)
 80033ee:	f002 fd5c 	bl	8005eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200008a4 	.word	0x200008a4

080033fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <DMA1_Channel3_IRQHandler+0x10>)
 8003402:	f002 fd52 	bl	8005eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000a80 	.word	0x20000a80

08003410 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <DMA1_Channel4_IRQHandler+0x10>)
 8003416:	f002 fd48 	bl	8005eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000ae0 	.word	0x20000ae0

08003424 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003428:	4803      	ldr	r0, [pc, #12]	; (8003438 <ADC1_2_IRQHandler+0x14>)
 800342a:	f001 f871 	bl	8004510 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800342e:	4803      	ldr	r0, [pc, #12]	; (800343c <ADC1_2_IRQHandler+0x18>)
 8003430:	f001 f86e 	bl	8004510 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2000076c 	.word	0x2000076c
 800343c:	200007d8 	.word	0x200007d8

08003440 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <FDCAN1_IT0_IRQHandler+0x10>)
 8003446:	f003 fa05 	bl	8006854 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	2000091c 	.word	0x2000091c

08003454 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <TIM3_IRQHandler+0x10>)
 800345a:	f005 ffc7 	bl	80093ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000c50 	.word	0x20000c50

08003468 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <SPI1_IRQHandler+0x10>)
 800346e:	f005 f917 	bl	80086a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200009b8 	.word	0x200009b8

0800347c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003480:	4802      	ldr	r0, [pc, #8]	; (800348c <USART1_IRQHandler+0x10>)
 8003482:	f007 fb33 	bl	800aaec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000c9c 	.word	0x20000c9c

08003490 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003494:	4802      	ldr	r0, [pc, #8]	; (80034a0 <SPI3_IRQHandler+0x10>)
 8003496:	f005 f903 	bl	80086a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000a1c 	.word	0x20000a1c

080034a4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <DMA2_Channel1_IRQHandler+0x10>)
 80034aa:	f002 fcfe 	bl	8005eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000b40 	.word	0x20000b40

080034b8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <DMA2_Channel2_IRQHandler+0x10>)
 80034be:	f002 fcf4 	bl	8005eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000ba0 	.word	0x20000ba0

080034cc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034d0:	4802      	ldr	r0, [pc, #8]	; (80034dc <DMA2_Channel3_IRQHandler+0x10>)
 80034d2:	f002 fcea 	bl	8005eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000d2c 	.word	0x20000d2c

080034e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e8:	4a14      	ldr	r2, [pc, #80]	; (800353c <_sbrk+0x5c>)
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <_sbrk+0x60>)
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <_sbrk+0x64>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <_sbrk+0x64>)
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <_sbrk+0x68>)
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <_sbrk+0x64>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	d207      	bcs.n	8003520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003510:	f008 fd96 	bl	800c040 <__errno>
 8003514:	4603      	mov	r3, r0
 8003516:	220c      	movs	r2, #12
 8003518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	e009      	b.n	8003534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <_sbrk+0x64>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <_sbrk+0x64>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	4a05      	ldr	r2, [pc, #20]	; (8003544 <_sbrk+0x64>)
 8003530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20008000 	.word	0x20008000
 8003540:	00000400 	.word	0x00000400
 8003544:	20000c00 	.word	0x20000c00
 8003548:	20000ed8 	.word	0x20000ed8

0800354c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <SystemInit+0x20>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	4a05      	ldr	r2, [pc, #20]	; (800356c <SystemInit+0x20>)
 8003558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800355c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b09c      	sub	sp, #112	; 0x70
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003576:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003584:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003590:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
 80035a0:	615a      	str	r2, [r3, #20]
 80035a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	2234      	movs	r2, #52	; 0x34
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f008 fd40 	bl	800c030 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035b0:	4b51      	ldr	r3, [pc, #324]	; (80036f8 <MX_TIM1_Init+0x188>)
 80035b2:	4a52      	ldr	r2, [pc, #328]	; (80036fc <MX_TIM1_Init+0x18c>)
 80035b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035b6:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <MX_TIM1_Init+0x188>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80035bc:	4b4e      	ldr	r3, [pc, #312]	; (80036f8 <MX_TIM1_Init+0x188>)
 80035be:	2220      	movs	r2, #32
 80035c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 80035c2:	4b4d      	ldr	r3, [pc, #308]	; (80036f8 <MX_TIM1_Init+0x188>)
 80035c4:	f240 52db 	movw	r2, #1499	; 0x5db
 80035c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ca:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <MX_TIM1_Init+0x188>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035d0:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <MX_TIM1_Init+0x188>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035d6:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <MX_TIM1_Init+0x188>)
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035dc:	4846      	ldr	r0, [pc, #280]	; (80036f8 <MX_TIM1_Init+0x188>)
 80035de:	f005 fc25 	bl	8008e2c <HAL_TIM_Base_Init>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80035e8:	f7ff fce8 	bl	8002fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80035f6:	4619      	mov	r1, r3
 80035f8:	483f      	ldr	r0, [pc, #252]	; (80036f8 <MX_TIM1_Init+0x188>)
 80035fa:	f006 f98b 	bl	8009914 <HAL_TIM_ConfigClockSource>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003604:	f7ff fcda 	bl	8002fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003608:	483b      	ldr	r0, [pc, #236]	; (80036f8 <MX_TIM1_Init+0x188>)
 800360a:	f005 fcf7 	bl	8008ffc <HAL_TIM_PWM_Init>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003614:	f7ff fcd2 	bl	8002fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003620:	2300      	movs	r3, #0
 8003622:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003628:	4619      	mov	r1, r3
 800362a:	4833      	ldr	r0, [pc, #204]	; (80036f8 <MX_TIM1_Init+0x188>)
 800362c:	f006 ffee 	bl	800a60c <HAL_TIMEx_MasterConfigSynchronization>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003636:	f7ff fcc1 	bl	8002fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800363a:	2360      	movs	r3, #96	; 0x60
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003642:	2302      	movs	r3, #2
 8003644:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003646:	2308      	movs	r3, #8
 8003648:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800364a:	2300      	movs	r3, #0
 800364c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003656:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800365a:	2200      	movs	r2, #0
 800365c:	4619      	mov	r1, r3
 800365e:	4826      	ldr	r0, [pc, #152]	; (80036f8 <MX_TIM1_Init+0x188>)
 8003660:	f006 f844 	bl	80096ec <HAL_TIM_PWM_ConfigChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800366a:	f7ff fca7 	bl	8002fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800366e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003672:	2204      	movs	r2, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4820      	ldr	r0, [pc, #128]	; (80036f8 <MX_TIM1_Init+0x188>)
 8003678:	f006 f838 	bl	80096ec <HAL_TIM_PWM_ConfigChannel>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003682:	f7ff fc9b 	bl	8002fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003686:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800368a:	2208      	movs	r2, #8
 800368c:	4619      	mov	r1, r3
 800368e:	481a      	ldr	r0, [pc, #104]	; (80036f8 <MX_TIM1_Init+0x188>)
 8003690:	f006 f82c 	bl	80096ec <HAL_TIM_PWM_ConfigChannel>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800369a:	f7ff fc8f 	bl	8002fbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80036bc:	2300      	movs	r3, #0
 80036be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80036c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80036ce:	2300      	movs	r3, #0
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4807      	ldr	r0, [pc, #28]	; (80036f8 <MX_TIM1_Init+0x188>)
 80036dc:	f007 f818 	bl	800a710 <HAL_TIMEx_ConfigBreakDeadTime>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80036e6:	f7ff fc69 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036ea:	4803      	ldr	r0, [pc, #12]	; (80036f8 <MX_TIM1_Init+0x188>)
 80036ec:	f000 f890 	bl	8003810 <HAL_TIM_MspPostInit>

}
 80036f0:	bf00      	nop
 80036f2:	3770      	adds	r7, #112	; 0x70
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000c04 	.word	0x20000c04
 80036fc:	40012c00 	.word	0x40012c00

08003700 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003706:	f107 0310 	add.w	r3, r7, #16
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <MX_TIM3_Init+0x94>)
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <MX_TIM3_Init+0x98>)
 8003722:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <MX_TIM3_Init+0x94>)
 8003726:	2203      	movs	r2, #3
 8003728:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <MX_TIM3_Init+0x94>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8003730:	4b18      	ldr	r3, [pc, #96]	; (8003794 <MX_TIM3_Init+0x94>)
 8003732:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003736:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003738:	4b16      	ldr	r3, [pc, #88]	; (8003794 <MX_TIM3_Init+0x94>)
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <MX_TIM3_Init+0x94>)
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003744:	4813      	ldr	r0, [pc, #76]	; (8003794 <MX_TIM3_Init+0x94>)
 8003746:	f005 fb71 	bl	8008e2c <HAL_TIM_Base_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003750:	f7ff fc34 	bl	8002fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003758:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800375a:	f107 0310 	add.w	r3, r7, #16
 800375e:	4619      	mov	r1, r3
 8003760:	480c      	ldr	r0, [pc, #48]	; (8003794 <MX_TIM3_Init+0x94>)
 8003762:	f006 f8d7 	bl	8009914 <HAL_TIM_ConfigClockSource>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800376c:	f7ff fc26 	bl	8002fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003770:	2300      	movs	r3, #0
 8003772:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4805      	ldr	r0, [pc, #20]	; (8003794 <MX_TIM3_Init+0x94>)
 800377e:	f006 ff45 	bl	800a60c <HAL_TIMEx_MasterConfigSynchronization>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003788:	f7ff fc18 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800378c:	bf00      	nop
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000c50 	.word	0x20000c50
 8003798:	40000400 	.word	0x40000400

0800379c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a16      	ldr	r2, [pc, #88]	; (8003804 <HAL_TIM_Base_MspInit+0x68>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10c      	bne.n	80037c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037ae:	4b16      	ldr	r3, [pc, #88]	; (8003808 <HAL_TIM_Base_MspInit+0x6c>)
 80037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b2:	4a15      	ldr	r2, [pc, #84]	; (8003808 <HAL_TIM_Base_MspInit+0x6c>)
 80037b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037b8:	6613      	str	r3, [r2, #96]	; 0x60
 80037ba:	4b13      	ldr	r3, [pc, #76]	; (8003808 <HAL_TIM_Base_MspInit+0x6c>)
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80037c6:	e018      	b.n	80037fa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_TIM_Base_MspInit+0x70>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d113      	bne.n	80037fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037d2:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <HAL_TIM_Base_MspInit+0x6c>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	4a0c      	ldr	r2, [pc, #48]	; (8003808 <HAL_TIM_Base_MspInit+0x6c>)
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	6593      	str	r3, [r2, #88]	; 0x58
 80037de:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <HAL_TIM_Base_MspInit+0x6c>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037ea:	2200      	movs	r2, #0
 80037ec:	2100      	movs	r1, #0
 80037ee:	201d      	movs	r0, #29
 80037f0:	f001 ff79 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037f4:	201d      	movs	r0, #29
 80037f6:	f001 ff90 	bl	800571a <HAL_NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40021000 	.word	0x40021000
 800380c:	40000400 	.word	0x40000400

08003810 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a28      	ldr	r2, [pc, #160]	; (80038d0 <HAL_TIM_MspPostInit+0xc0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d149      	bne.n	80038c6 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003832:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <HAL_TIM_MspPostInit+0xc4>)
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	4a27      	ldr	r2, [pc, #156]	; (80038d4 <HAL_TIM_MspPostInit+0xc4>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_TIM_MspPostInit+0xc4>)
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_TIM_MspPostInit+0xc4>)
 800384c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384e:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <HAL_TIM_MspPostInit+0xc4>)
 8003850:	f043 0302 	orr.w	r3, r3, #2
 8003854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003856:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <HAL_TIM_MspPostInit+0xc4>)
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003862:	2307      	movs	r3, #7
 8003864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386e:	2300      	movs	r3, #0
 8003870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003872:	2302      	movs	r3, #2
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003876:	f107 0314 	add.w	r3, r7, #20
 800387a:	4619      	mov	r1, r3
 800387c:	4816      	ldr	r0, [pc, #88]	; (80038d8 <HAL_TIM_MspPostInit+0xc8>)
 800387e:	f003 fb09 	bl	8006e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003882:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003888:	2302      	movs	r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003890:	2300      	movs	r3, #0
 8003892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003894:	2306      	movs	r3, #6
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4619      	mov	r1, r3
 800389e:	480f      	ldr	r0, [pc, #60]	; (80038dc <HAL_TIM_MspPostInit+0xcc>)
 80038a0:	f003 faf8 	bl	8006e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80038b6:	2304      	movs	r3, #4
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ba:	f107 0314 	add.w	r3, r7, #20
 80038be:	4619      	mov	r1, r3
 80038c0:	4806      	ldr	r0, [pc, #24]	; (80038dc <HAL_TIM_MspPostInit+0xcc>)
 80038c2:	f003 fae7 	bl	8006e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038c6:	bf00      	nop
 80038c8:	3728      	adds	r7, #40	; 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40021000 	.word	0x40021000
 80038d8:	48000800 	.word	0x48000800
 80038dc:	48000400 	.word	0x48000400

080038e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <MX_USART1_UART_Init+0x90>)
 80038e6:	4a23      	ldr	r2, [pc, #140]	; (8003974 <MX_USART1_UART_Init+0x94>)
 80038e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <MX_USART1_UART_Init+0x90>)
 80038ec:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80038f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038f2:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <MX_USART1_UART_Init+0x90>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <MX_USART1_UART_Init+0x90>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038fe:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <MX_USART1_UART_Init+0x90>)
 8003900:	2200      	movs	r2, #0
 8003902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <MX_USART1_UART_Init+0x90>)
 8003906:	220c      	movs	r2, #12
 8003908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800390a:	4b19      	ldr	r3, [pc, #100]	; (8003970 <MX_USART1_UART_Init+0x90>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <MX_USART1_UART_Init+0x90>)
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <MX_USART1_UART_Init+0x90>)
 8003918:	2200      	movs	r2, #0
 800391a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <MX_USART1_UART_Init+0x90>)
 800391e:	2200      	movs	r2, #0
 8003920:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <MX_USART1_UART_Init+0x90>)
 8003924:	2200      	movs	r2, #0
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003928:	4811      	ldr	r0, [pc, #68]	; (8003970 <MX_USART1_UART_Init+0x90>)
 800392a:	f006 fffc 	bl	800a926 <HAL_UART_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003934:	f7ff fb42 	bl	8002fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003938:	2100      	movs	r1, #0
 800393a:	480d      	ldr	r0, [pc, #52]	; (8003970 <MX_USART1_UART_Init+0x90>)
 800393c:	f008 fa73 	bl	800be26 <HAL_UARTEx_SetTxFifoThreshold>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003946:	f7ff fb39 	bl	8002fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800394a:	2100      	movs	r1, #0
 800394c:	4808      	ldr	r0, [pc, #32]	; (8003970 <MX_USART1_UART_Init+0x90>)
 800394e:	f008 faa8 	bl	800bea2 <HAL_UARTEx_SetRxFifoThreshold>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003958:	f7ff fb30 	bl	8002fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800395c:	4804      	ldr	r0, [pc, #16]	; (8003970 <MX_USART1_UART_Init+0x90>)
 800395e:	f008 fa29 	bl	800bdb4 <HAL_UARTEx_DisableFifoMode>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003968:	f7ff fb28 	bl	8002fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000c9c 	.word	0x20000c9c
 8003974:	40013800 	.word	0x40013800

08003978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b09a      	sub	sp, #104	; 0x68
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003990:	f107 0310 	add.w	r3, r7, #16
 8003994:	2244      	movs	r2, #68	; 0x44
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f008 fb49 	bl	800c030 <memset>
  if(uartHandle->Instance==USART1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a37      	ldr	r2, [pc, #220]	; (8003a80 <HAL_UART_MspInit+0x108>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d166      	bne.n	8003a76 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039a8:	2301      	movs	r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039b0:	f107 0310 	add.w	r3, r7, #16
 80039b4:	4618      	mov	r0, r3
 80039b6:	f004 fa4b 	bl	8007e50 <HAL_RCCEx_PeriphCLKConfig>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80039c0:	f7ff fafc 	bl	8002fbc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039c4:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <HAL_UART_MspInit+0x10c>)
 80039c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c8:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <HAL_UART_MspInit+0x10c>)
 80039ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ce:	6613      	str	r3, [r2, #96]	; 0x60
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <HAL_UART_MspInit+0x10c>)
 80039d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039dc:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <HAL_UART_MspInit+0x10c>)
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	4a28      	ldr	r2, [pc, #160]	; (8003a84 <HAL_UART_MspInit+0x10c>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_UART_MspInit+0x10c>)
 80039ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80039f4:	2330      	movs	r3, #48	; 0x30
 80039f6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a00:	2300      	movs	r3, #0
 8003a02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a04:	2307      	movs	r3, #7
 8003a06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	481e      	ldr	r0, [pc, #120]	; (8003a88 <HAL_UART_MspInit+0x110>)
 8003a10:	f003 fa40 	bl	8006e94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8003a14:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a16:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <HAL_UART_MspInit+0x118>)
 8003a18:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003a1a:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a1c:	2219      	movs	r2, #25
 8003a1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a22:	2210      	movs	r2, #16
 8003a24:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a26:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a2c:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a32:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a38:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a4a:	4810      	ldr	r0, [pc, #64]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a4c:	f002 f84a 	bl	8005ae4 <HAL_DMA_Init>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003a56:	f7ff fab1 	bl	8002fbc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a5e:	679a      	str	r2, [r3, #120]	; 0x78
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_UART_MspInit+0x114>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	2025      	movs	r0, #37	; 0x25
 8003a6c:	f001 fe3b 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a70:	2025      	movs	r0, #37	; 0x25
 8003a72:	f001 fe52 	bl	800571a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a76:	bf00      	nop
 8003a78:	3768      	adds	r7, #104	; 0x68
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40021000 	.word	0x40021000
 8003a88:	48000800 	.word	0x48000800
 8003a8c:	20000d2c 	.word	0x20000d2c
 8003a90:	40020430 	.word	0x40020430

08003a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a94:	480d      	ldr	r0, [pc, #52]	; (8003acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a98:	480d      	ldr	r0, [pc, #52]	; (8003ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a9a:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <LoopForever+0xe>)
  movs r3, #0
 8003a9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003aa0:	e002      	b.n	8003aa8 <LoopCopyDataInit>

08003aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aa6:	3304      	adds	r3, #4

08003aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aac:	d3f9      	bcc.n	8003aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aae:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ab0:	4c0b      	ldr	r4, [pc, #44]	; (8003ae0 <LoopForever+0x16>)
  movs r3, #0
 8003ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ab4:	e001      	b.n	8003aba <LoopFillZerobss>

08003ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab8:	3204      	adds	r2, #4

08003aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003abc:	d3fb      	bcc.n	8003ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003abe:	f7ff fd45 	bl	800354c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ac2:	f008 fac3 	bl	800c04c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ac6:	f7ff fa05 	bl	8002ed4 <main>

08003aca <LoopForever>:

LoopForever:
    b LoopForever
 8003aca:	e7fe      	b.n	8003aca <LoopForever>
  ldr   r0, =_estack
 8003acc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ad4:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8003ad8:	0800ca18 	.word	0x0800ca18
  ldr r2, =_sbss
 8003adc:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8003ae0:	20000ed8 	.word	0x20000ed8

08003ae4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ae4:	e7fe      	b.n	8003ae4 <COMP1_2_3_IRQHandler>

08003ae6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003af0:	2003      	movs	r0, #3
 8003af2:	f001 fded 	bl	80056d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003af6:	200f      	movs	r0, #15
 8003af8:	f000 f80e 	bl	8003b18 <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	71fb      	strb	r3, [r7, #7]
 8003b06:	e001      	b.n	8003b0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b08:	f7ff fc16 	bl	8003338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b0c:	79fb      	ldrb	r3, [r7, #7]

}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <HAL_InitTick+0x68>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003b2c:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <HAL_InitTick+0x6c>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <HAL_InitTick+0x68>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 fdf8 	bl	8005736 <HAL_SYSTICK_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	d809      	bhi.n	8003b66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b52:	2200      	movs	r2, #0
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5a:	f001 fdc4 	bl	80056e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <HAL_InitTick+0x70>)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	e007      	b.n	8003b76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	e004      	b.n	8003b76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	e001      	b.n	8003b76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	200000e0 	.word	0x200000e0
 8003b84:	200000d8 	.word	0x200000d8
 8003b88:	200000dc 	.word	0x200000dc

08003b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_IncTick+0x1c>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_IncTick+0x20>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4413      	add	r3, r2
 8003b9a:	4a03      	ldr	r2, [pc, #12]	; (8003ba8 <HAL_IncTick+0x1c>)
 8003b9c:	6013      	str	r3, [r2, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	20000d8c 	.word	0x20000d8c
 8003bac:	200000e0 	.word	0x200000e0

08003bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <HAL_GetTick+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000d8c 	.word	0x20000d8c

08003bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bd0:	f7ff ffee 	bl	8003bb0 <HAL_GetTick>
 8003bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d004      	beq.n	8003bec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_Delay+0x40>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4413      	add	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bec:	bf00      	nop
 8003bee:	f7ff ffdf 	bl	8003bb0 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d8f7      	bhi.n	8003bee <HAL_Delay+0x26>
  {
  }
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200000e0 	.word	0x200000e0

08003c0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3360      	adds	r3, #96	; 0x60
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <LL_ADC_SetOffset+0x44>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	03fff000 	.word	0x03fff000

08003cbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3360      	adds	r3, #96	; 0x60
 8003cca:	461a      	mov	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3360      	adds	r3, #96	; 0x60
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b087      	sub	sp, #28
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3360      	adds	r3, #96	; 0x60
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3360      	adds	r3, #96	; 0x60
 8003d64:	461a      	mov	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	615a      	str	r2, [r3, #20]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3330      	adds	r3, #48	; 0x30
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	4413      	add	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	211f      	movs	r1, #31
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	401a      	ands	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0e9b      	lsrs	r3, r3, #26
 8003e0e:	f003 011f 	and.w	r1, r3, #31
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3314      	adds	r3, #20
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0e5b      	lsrs	r3, r3, #25
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	4413      	add	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	0d1b      	lsrs	r3, r3, #20
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2107      	movs	r1, #7
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	401a      	ands	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	0d1b      	lsrs	r3, r3, #20
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a0f      	ldr	r2, [pc, #60]	; (8003ef8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10a      	bne.n	8003ed6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003ed4:	e00a      	b.n	8003eec <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	401a      	ands	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	407f0000 	.word	0x407f0000

08003efc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 031f 	and.w	r3, r3, #31
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6093      	str	r3, [r2, #8]
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6c:	d101      	bne.n	8003f72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fbc:	d101      	bne.n	8003fc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fe4:	f043 0201 	orr.w	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <LL_ADC_IsEnabled+0x18>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <LL_ADC_IsEnabled+0x1a>
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800402e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d101      	bne.n	800405e <LL_ADC_REG_IsConversionOngoing+0x18>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b08      	cmp	r3, #8
 800407e:	d101      	bne.n	8004084 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b089      	sub	sp, #36	; 0x24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e177      	b.n	800439e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7fe fb69 	bl	8002794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff ff3f 	bl	8003f58 <LL_ADC_IsDeepPowerDownEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff25 	bl	8003f34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff ff5a 	bl	8003fa8 <LL_ADC_IsInternalRegulatorEnabled>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d115      	bne.n	8004126 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ff3e 	bl	8003f80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004104:	4b9c      	ldr	r3, [pc, #624]	; (8004378 <HAL_ADC_Init+0x2e4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	4a9c      	ldr	r2, [pc, #624]	; (800437c <HAL_ADC_Init+0x2e8>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	3301      	adds	r3, #1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004118:	e002      	b.n	8004120 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	3b01      	subs	r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f9      	bne.n	800411a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff3c 	bl	8003fa8 <LL_ADC_IsInternalRegulatorEnabled>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10d      	bne.n	8004152 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	f043 0210 	orr.w	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004146:	f043 0201 	orr.w	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff75 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 800415c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 8110 	bne.w	800438c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 810c 	bne.w	800438c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004178:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff ff35 	bl	8003ff8 <LL_ADC_IsEnabled>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d111      	bne.n	80041b8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004194:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004198:	f7ff ff2e 	bl	8003ff8 <LL_ADC_IsEnabled>
 800419c:	4604      	mov	r4, r0
 800419e:	4878      	ldr	r0, [pc, #480]	; (8004380 <HAL_ADC_Init+0x2ec>)
 80041a0:	f7ff ff2a 	bl	8003ff8 <LL_ADC_IsEnabled>
 80041a4:	4603      	mov	r3, r0
 80041a6:	4323      	orrs	r3, r4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4619      	mov	r1, r3
 80041b2:	4874      	ldr	r0, [pc, #464]	; (8004384 <HAL_ADC_Init+0x2f0>)
 80041b4:	f7ff fd2a 	bl	8003c0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	7f5b      	ldrb	r3, [r3, #29]
 80041bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80041c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80041ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d106      	bne.n	80041f4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	045b      	lsls	r3, r3, #17
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	4b5c      	ldr	r3, [pc, #368]	; (8004388 <HAL_ADC_Init+0x2f4>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	69b9      	ldr	r1, [r7, #24]
 8004220:	430b      	orrs	r3, r1
 8004222:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ff01 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 8004244:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff ff0e 	bl	800406c <LL_ADC_INJ_IsConversionOngoing>
 8004250:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d16d      	bne.n	8004334 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d16a      	bne.n	8004334 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004262:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800426a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427a:	f023 0302 	bic.w	r3, r3, #2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	69b9      	ldr	r1, [r7, #24]
 8004284:	430b      	orrs	r3, r1
 8004286:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d017      	beq.n	80042c0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800429e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6911      	ldr	r1, [r2, #16]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80042be:	e013      	b.n	80042e8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d118      	bne.n	8004324 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004314:	430a      	orrs	r2, r1
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	611a      	str	r2, [r3, #16]
 8004322:	e007      	b.n	8004334 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10c      	bne.n	8004356 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f023 010f 	bic.w	r1, r3, #15
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	1e5a      	subs	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
 8004354:	e007      	b.n	8004366 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 020f 	bic.w	r2, r2, #15
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	f043 0201 	orr.w	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	65da      	str	r2, [r3, #92]	; 0x5c
 8004376:	e011      	b.n	800439c <HAL_ADC_Init+0x308>
 8004378:	200000d8 	.word	0x200000d8
 800437c:	053e2d63 	.word	0x053e2d63
 8004380:	50000100 	.word	0x50000100
 8004384:	50000300 	.word	0x50000300
 8004388:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004390:	f043 0210 	orr.w	r2, r3, #16
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800439c:	7ffb      	ldrb	r3, [r7, #31]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3724      	adds	r7, #36	; 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd90      	pop	{r4, r7, pc}
 80043a6:	bf00      	nop

080043a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043b4:	4851      	ldr	r0, [pc, #324]	; (80044fc <HAL_ADC_Start_DMA+0x154>)
 80043b6:	f7ff fda1 	bl	8003efc <LL_ADC_GetMultimode>
 80043ba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fe40 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 808f 	bne.w	80044ec <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_ADC_Start_DMA+0x34>
 80043d8:	2302      	movs	r3, #2
 80043da:	e08a      	b.n	80044f2 <HAL_ADC_Start_DMA+0x14a>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d002      	beq.n	80043f6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b09      	cmp	r3, #9
 80043f4:	d173      	bne.n	80044de <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fea8 	bl	800514c <ADC_Enable>
 80043fc:	4603      	mov	r3, r0
 80043fe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d166      	bne.n	80044d4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a38      	ldr	r2, [pc, #224]	; (8004500 <HAL_ADC_Start_DMA+0x158>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d002      	beq.n	800442a <HAL_ADC_Start_DMA+0x82>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	e001      	b.n	800442e <HAL_ADC_Start_DMA+0x86>
 800442a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	4293      	cmp	r3, r2
 8004434:	d002      	beq.n	800443c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d006      	beq.n	8004462 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004458:	f023 0206 	bic.w	r2, r3, #6
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	661a      	str	r2, [r3, #96]	; 0x60
 8004460:	e002      	b.n	8004468 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	4a25      	ldr	r2, [pc, #148]	; (8004504 <HAL_ADC_Start_DMA+0x15c>)
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	4a24      	ldr	r2, [pc, #144]	; (8004508 <HAL_ADC_Start_DMA+0x160>)
 8004476:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	4a23      	ldr	r2, [pc, #140]	; (800450c <HAL_ADC_Start_DMA+0x164>)
 800447e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	221c      	movs	r2, #28
 8004486:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0210 	orr.w	r2, r2, #16
 800449e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3340      	adds	r3, #64	; 0x40
 80044ba:	4619      	mov	r1, r3
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f001 fbb8 	bl	8005c34 <HAL_DMA_Start_IT>
 80044c4:	4603      	mov	r3, r0
 80044c6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fda6 	bl	800401e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80044d2:	e00d      	b.n	80044f0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80044dc:	e008      	b.n	80044f0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80044ea:	e001      	b.n	80044f0 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
 80044ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	50000300 	.word	0x50000300
 8004500:	50000100 	.word	0x50000100
 8004504:	08005211 	.word	0x08005211
 8004508:	080052e9 	.word	0x080052e9
 800450c:	08005305 	.word	0x08005305

08004510 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	; 0x28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004518:	2300      	movs	r3, #0
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800452c:	4883      	ldr	r0, [pc, #524]	; (800473c <HAL_ADC_IRQHandler+0x22c>)
 800452e:	f7ff fce5 	bl	8003efc <LL_ADC_GetMultimode>
 8004532:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d017      	beq.n	800456e <HAL_ADC_IRQHandler+0x5e>
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d012      	beq.n	800456e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004558:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 ff37 	bl	80053d4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2202      	movs	r2, #2
 800456c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_ADC_IRQHandler+0x72>
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8085 	beq.w	8004698 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d07f      	beq.n	8004698 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fbfb 	bl	8003db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d064      	beq.n	800468a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a5e      	ldr	r2, [pc, #376]	; (8004740 <HAL_ADC_IRQHandler+0x230>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d002      	beq.n	80045d0 <HAL_ADC_IRQHandler+0xc0>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	e001      	b.n	80045d4 <HAL_ADC_IRQHandler+0xc4>
 80045d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	4293      	cmp	r3, r2
 80045da:	d008      	beq.n	80045ee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	d002      	beq.n	80045ee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b09      	cmp	r3, #9
 80045ec:	d104      	bne.n	80045f8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	e00d      	b.n	8004614 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a50      	ldr	r2, [pc, #320]	; (8004740 <HAL_ADC_IRQHandler+0x230>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d002      	beq.n	8004608 <HAL_ADC_IRQHandler+0xf8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	e001      	b.n	800460c <HAL_ADC_IRQHandler+0xfc>
 8004608:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800460c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d135      	bne.n	800468a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b08      	cmp	r3, #8
 800462a:	d12e      	bne.n	800468a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fd08 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11a      	bne.n	8004672 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 020c 	bic.w	r2, r2, #12
 800464a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d112      	bne.n	800468a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	f043 0201 	orr.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004670:	e00b      	b.n	800468a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	f043 0210 	orr.w	r2, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004682:	f043 0201 	orr.w	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fd fd4c 	bl	8002128 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	220c      	movs	r2, #12
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d004      	beq.n	80046ac <HAL_ADC_IRQHandler+0x19c>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 809e 	beq.w	80047f4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8098 	beq.w	80047f4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fba4 	bl	8003e2e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80046e6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fb5f 	bl	8003db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046f2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a11      	ldr	r2, [pc, #68]	; (8004740 <HAL_ADC_IRQHandler+0x230>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d002      	beq.n	8004704 <HAL_ADC_IRQHandler+0x1f4>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	e001      	b.n	8004708 <HAL_ADC_IRQHandler+0x1f8>
 8004704:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	4293      	cmp	r3, r2
 800470e:	d008      	beq.n	8004722 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d002      	beq.n	8004722 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b07      	cmp	r3, #7
 8004720:	d104      	bne.n	800472c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	623b      	str	r3, [r7, #32]
 800472a:	e011      	b.n	8004750 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a03      	ldr	r2, [pc, #12]	; (8004740 <HAL_ADC_IRQHandler+0x230>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d006      	beq.n	8004744 <HAL_ADC_IRQHandler+0x234>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	e005      	b.n	8004748 <HAL_ADC_IRQHandler+0x238>
 800473c:	50000300 	.word	0x50000300
 8004740:	50000100 	.word	0x50000100
 8004744:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004748:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d047      	beq.n	80047e6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_ADC_IRQHandler+0x260>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d03f      	beq.n	80047e6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	d13a      	bne.n	80047e6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d133      	bne.n	80047e6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d12e      	bne.n	80047e6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fc6d 	bl	800406c <LL_ADC_INJ_IsConversionOngoing>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d11a      	bne.n	80047ce <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047a6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d112      	bne.n	80047e6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c4:	f043 0201 	orr.w	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80047cc:	e00b      	b.n	80047e6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	f043 0210 	orr.w	r2, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fdcc 	bl	8005384 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2260      	movs	r2, #96	; 0x60
 80047f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d011      	beq.n	8004822 <HAL_ADC_IRQHandler+0x312>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00c      	beq.n	8004822 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f895 	bl	8004944 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d012      	beq.n	8004852 <HAL_ADC_IRQHandler+0x342>
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fdb2 	bl	80053ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004850:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004858:	2b00      	cmp	r3, #0
 800485a:	d012      	beq.n	8004882 <HAL_ADC_IRQHandler+0x372>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fda4 	bl	80053c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004880:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b00      	cmp	r3, #0
 800488a:	d036      	beq.n	80048fa <HAL_ADC_IRQHandler+0x3ea>
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	d031      	beq.n	80048fa <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800489e:	2301      	movs	r3, #1
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
 80048a2:	e014      	b.n	80048ce <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80048aa:	4825      	ldr	r0, [pc, #148]	; (8004940 <HAL_ADC_IRQHandler+0x430>)
 80048ac:	f7ff fb34 	bl	8003f18 <LL_ADC_GetMultiDMATransfer>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80048b6:	2301      	movs	r3, #1
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ba:	e008      	b.n	80048ce <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80048ca:	2301      	movs	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d10e      	bne.n	80048f2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e4:	f043 0202 	orr.w	r2, r3, #2
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f833 	bl	8004958 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2210      	movs	r2, #16
 80048f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004900:	2b00      	cmp	r3, #0
 8004902:	d018      	beq.n	8004936 <HAL_ADC_IRQHandler+0x426>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490a:	2b00      	cmp	r3, #0
 800490c:	d013      	beq.n	8004936 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004912:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491e:	f043 0208 	orr.w	r2, r3, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800492e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fd31 	bl	8005398 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004936:	bf00      	nop
 8004938:	3728      	adds	r7, #40	; 0x28
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	50000300 	.word	0x50000300

08004944 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b0b6      	sub	sp, #216	; 0xd8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_ADC_ConfigChannel+0x22>
 800498a:	2302      	movs	r3, #2
 800498c:	e3c8      	b.n	8005120 <HAL_ADC_ConfigChannel+0x7b4>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fb53 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 83ad 	bne.w	8005102 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	f7ff fa0e 	bl	8003dd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fb41 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 80049c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fb4d 	bl	800406c <LL_ADC_INJ_IsConversionOngoing>
 80049d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 81d9 	bne.w	8004d92 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f040 81d4 	bne.w	8004d92 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f2:	d10f      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2200      	movs	r2, #0
 80049fe:	4619      	mov	r1, r3
 8004a00:	f7ff fa28 	bl	8003e54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff f9bc 	bl	8003d8a <LL_ADC_SetSamplingTimeCommonConfig>
 8004a12:	e00e      	b.n	8004a32 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	461a      	mov	r2, r3
 8004a22:	f7ff fa17 	bl	8003e54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f9ac 	bl	8003d8a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d022      	beq.n	8004a9a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	6919      	ldr	r1, [r3, #16]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a64:	f7ff f906 	bl	8003c74 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6919      	ldr	r1, [r3, #16]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	461a      	mov	r2, r3
 8004a76:	f7ff f952 	bl	8003d1e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6919      	ldr	r1, [r3, #16]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	7f1b      	ldrb	r3, [r3, #28]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d102      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x124>
 8004a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a8e:	e000      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x126>
 8004a90:	2300      	movs	r3, #0
 8004a92:	461a      	mov	r2, r3
 8004a94:	f7ff f95e 	bl	8003d54 <LL_ADC_SetOffsetSaturation>
 8004a98:	e17b      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f90b 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x15a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff f900 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004abc:	4603      	mov	r3, r0
 8004abe:	0e9b      	lsrs	r3, r3, #26
 8004ac0:	f003 021f 	and.w	r2, r3, #31
 8004ac4:	e01e      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x198>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff f8f5 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ae4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004aec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004af4:	2320      	movs	r3, #32
 8004af6:	e004      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004af8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004afc:	fab3 f383 	clz	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x1b0>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	0e9b      	lsrs	r3, r3, #26
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	e018      	b.n	8004b4e <HAL_ADC_ConfigChannel+0x1e2>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b28:	fa93 f3a3 	rbit	r3, r3
 8004b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004b30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004b38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004b40:	2320      	movs	r3, #32
 8004b42:	e004      	b.n	8004b4e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004b44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b48:	fab3 f383 	clz	r3, r3
 8004b4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d106      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff f8c4 	bl	8003ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff f8a8 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x220>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff f89d 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004b82:	4603      	mov	r3, r0
 8004b84:	0e9b      	lsrs	r3, r3, #26
 8004b86:	f003 021f 	and.w	r2, r3, #31
 8004b8a:	e01e      	b.n	8004bca <HAL_ADC_ConfigChannel+0x25e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff f892 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004bb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004bba:	2320      	movs	r3, #32
 8004bbc:	e004      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x276>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	0e9b      	lsrs	r3, r3, #26
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	e018      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x2a8>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004bf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004c06:	2320      	movs	r3, #32
 8004c08:	e004      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c0e:	fab3 f383 	clz	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d106      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2101      	movs	r1, #1
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff f861 	bl	8003ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2102      	movs	r1, #2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff f845 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x2e6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2102      	movs	r1, #2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff f83a 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	0e9b      	lsrs	r3, r3, #26
 8004c4c:	f003 021f 	and.w	r2, r3, #31
 8004c50:	e01e      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x324>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2102      	movs	r1, #2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff f82f 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c68:	fa93 f3a3 	rbit	r3, r3
 8004c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004c78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004c80:	2320      	movs	r3, #32
 8004c82:	e004      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004c84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x33c>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	0e9b      	lsrs	r3, r3, #26
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	e016      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x36a>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cb4:	fa93 f3a3 	rbit	r3, r3
 8004cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004cba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004cc8:	2320      	movs	r3, #32
 8004cca:	e004      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cd0:	fab3 f383 	clz	r3, r3
 8004cd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d106      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2102      	movs	r1, #2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f800 	bl	8003ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2103      	movs	r1, #3
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe ffe4 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10a      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x3a8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2103      	movs	r1, #3
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe ffd9 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	0e9b      	lsrs	r3, r3, #26
 8004d0e:	f003 021f 	and.w	r2, r3, #31
 8004d12:	e017      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x3d8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2103      	movs	r1, #3
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe ffce 	bl	8003cbc <LL_ADC_GetOffsetChannel>
 8004d20:	4603      	mov	r3, r0
 8004d22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d26:	fa93 f3a3 	rbit	r3, r3
 8004d2a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d2e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004d36:	2320      	movs	r3, #32
 8004d38:	e003      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d3c:	fab3 f383 	clz	r3, r3
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0x3f0>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	0e9b      	lsrs	r3, r3, #26
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	e011      	b.n	8004d80 <HAL_ADC_ConfigChannel+0x414>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d64:	fa93 f3a3 	rbit	r3, r3
 8004d68:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004d74:	2320      	movs	r3, #32
 8004d76:	e003      	b.n	8004d80 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7a:	fab3 f383 	clz	r3, r3
 8004d7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d106      	bne.n	8004d92 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2103      	movs	r1, #3
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe ffab 	bl	8003ce8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff f92e 	bl	8003ff8 <LL_ADC_IsEnabled>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 8140 	bne.w	8005024 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6819      	ldr	r1, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	461a      	mov	r2, r3
 8004db2:	f7ff f87b 	bl	8003eac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4a8f      	ldr	r2, [pc, #572]	; (8004ff8 <HAL_ADC_ConfigChannel+0x68c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	f040 8131 	bne.w	8005024 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10b      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x47e>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	0e9b      	lsrs	r3, r3, #26
 8004dd8:	3301      	adds	r3, #1
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2b09      	cmp	r3, #9
 8004de0:	bf94      	ite	ls
 8004de2:	2301      	movls	r3, #1
 8004de4:	2300      	movhi	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e019      	b.n	8004e1e <HAL_ADC_ConfigChannel+0x4b2>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df2:	fa93 f3a3 	rbit	r3, r3
 8004df6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dfa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004e02:	2320      	movs	r3, #32
 8004e04:	e003      	b.n	8004e0e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e08:	fab3 f383 	clz	r3, r3
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	2b09      	cmp	r3, #9
 8004e16:	bf94      	ite	ls
 8004e18:	2301      	movls	r3, #1
 8004e1a:	2300      	movhi	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d079      	beq.n	8004f16 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x4d2>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	0e9b      	lsrs	r3, r3, #26
 8004e34:	3301      	adds	r3, #1
 8004e36:	069b      	lsls	r3, r3, #26
 8004e38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e3c:	e015      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x4fe>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e46:	fa93 f3a3 	rbit	r3, r3
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004e56:	2320      	movs	r3, #32
 8004e58:	e003      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e5c:	fab3 f383 	clz	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	3301      	adds	r3, #1
 8004e64:	069b      	lsls	r3, r3, #26
 8004e66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <HAL_ADC_ConfigChannel+0x51e>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	0e9b      	lsrs	r3, r3, #26
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	2101      	movs	r1, #1
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	e017      	b.n	8004eba <HAL_ADC_ConfigChannel+0x54e>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	e003      	b.n	8004eae <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea8:	fab3 f383 	clz	r3, r3
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	3301      	adds	r3, #1
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	ea42 0103 	orr.w	r1, r2, r3
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x574>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	0e9b      	lsrs	r3, r3, #26
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	f003 021f 	and.w	r2, r3, #31
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	4413      	add	r3, r2
 8004edc:	051b      	lsls	r3, r3, #20
 8004ede:	e018      	b.n	8004f12 <HAL_ADC_ConfigChannel+0x5a6>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004ef8:	2320      	movs	r3, #32
 8004efa:	e003      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efe:	fab3 f383 	clz	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	f003 021f 	and.w	r2, r3, #31
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	4413      	add	r3, r2
 8004f10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f12:	430b      	orrs	r3, r1
 8004f14:	e081      	b.n	800501a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d107      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x5c6>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	0e9b      	lsrs	r3, r3, #26
 8004f28:	3301      	adds	r3, #1
 8004f2a:	069b      	lsls	r3, r3, #26
 8004f2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f30:	e015      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x5f2>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	fa93 f3a3 	rbit	r3, r3
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004f4a:	2320      	movs	r3, #32
 8004f4c:	e003      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	fab3 f383 	clz	r3, r3
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	3301      	adds	r3, #1
 8004f58:	069b      	lsls	r3, r3, #26
 8004f5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <HAL_ADC_ConfigChannel+0x612>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	0e9b      	lsrs	r3, r3, #26
 8004f70:	3301      	adds	r3, #1
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2101      	movs	r1, #1
 8004f78:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7c:	e017      	b.n	8004fae <HAL_ADC_ConfigChannel+0x642>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	61fb      	str	r3, [r7, #28]
  return result;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004f96:	2320      	movs	r3, #32
 8004f98:	e003      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	fab3 f383 	clz	r3, r3
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2101      	movs	r1, #1
 8004faa:	fa01 f303 	lsl.w	r3, r1, r3
 8004fae:	ea42 0103 	orr.w	r1, r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x66e>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	0e9b      	lsrs	r3, r3, #26
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f003 021f 	and.w	r2, r3, #31
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	3b1e      	subs	r3, #30
 8004fd2:	051b      	lsls	r3, r3, #20
 8004fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fd8:	e01e      	b.n	8005018 <HAL_ADC_ConfigChannel+0x6ac>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	613b      	str	r3, [r7, #16]
  return result;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d104      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	e006      	b.n	8005004 <HAL_ADC_ConfigChannel+0x698>
 8004ff6:	bf00      	nop
 8004ff8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	fab3 f383 	clz	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	3301      	adds	r3, #1
 8005006:	f003 021f 	and.w	r2, r3, #31
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	3b1e      	subs	r3, #30
 8005012:	051b      	lsls	r3, r3, #20
 8005014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005018:	430b      	orrs	r3, r1
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	6892      	ldr	r2, [r2, #8]
 800501e:	4619      	mov	r1, r3
 8005020:	f7fe ff18 	bl	8003e54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b3f      	ldr	r3, [pc, #252]	; (8005128 <HAL_ADC_ConfigChannel+0x7bc>)
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d071      	beq.n	8005114 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005030:	483e      	ldr	r0, [pc, #248]	; (800512c <HAL_ADC_ConfigChannel+0x7c0>)
 8005032:	f7fe fe11 	bl	8003c58 <LL_ADC_GetCommonPathInternalCh>
 8005036:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <HAL_ADC_ConfigChannel+0x7c4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_ADC_ConfigChannel+0x6e2>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3a      	ldr	r2, [pc, #232]	; (8005134 <HAL_ADC_ConfigChannel+0x7c8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d127      	bne.n	800509e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800504e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d121      	bne.n	800509e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005062:	d157      	bne.n	8005114 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005068:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800506c:	4619      	mov	r1, r3
 800506e:	482f      	ldr	r0, [pc, #188]	; (800512c <HAL_ADC_ConfigChannel+0x7c0>)
 8005070:	f7fe fddf 	bl	8003c32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005074:	4b30      	ldr	r3, [pc, #192]	; (8005138 <HAL_ADC_ConfigChannel+0x7cc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	099b      	lsrs	r3, r3, #6
 800507a:	4a30      	ldr	r2, [pc, #192]	; (800513c <HAL_ADC_ConfigChannel+0x7d0>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	4613      	mov	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800508e:	e002      	b.n	8005096 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3b01      	subs	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f9      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800509c:	e03a      	b.n	8005114 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a27      	ldr	r2, [pc, #156]	; (8005140 <HAL_ADC_ConfigChannel+0x7d4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d113      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x764>
 80050a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10d      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <HAL_ADC_ConfigChannel+0x7d8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d02a      	beq.n	8005114 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050c6:	4619      	mov	r1, r3
 80050c8:	4818      	ldr	r0, [pc, #96]	; (800512c <HAL_ADC_ConfigChannel+0x7c0>)
 80050ca:	f7fe fdb2 	bl	8003c32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050ce:	e021      	b.n	8005114 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <HAL_ADC_ConfigChannel+0x7dc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d11c      	bne.n	8005114 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d116      	bne.n	8005114 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a16      	ldr	r2, [pc, #88]	; (8005144 <HAL_ADC_ConfigChannel+0x7d8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d011      	beq.n	8005114 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050f8:	4619      	mov	r1, r3
 80050fa:	480c      	ldr	r0, [pc, #48]	; (800512c <HAL_ADC_ConfigChannel+0x7c0>)
 80050fc:	f7fe fd99 	bl	8003c32 <LL_ADC_SetCommonPathInternalCh>
 8005100:	e008      	b.n	8005114 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800511c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005120:	4618      	mov	r0, r3
 8005122:	37d8      	adds	r7, #216	; 0xd8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	80080000 	.word	0x80080000
 800512c:	50000300 	.word	0x50000300
 8005130:	c3210000 	.word	0xc3210000
 8005134:	90c00010 	.word	0x90c00010
 8005138:	200000d8 	.word	0x200000d8
 800513c:	053e2d63 	.word	0x053e2d63
 8005140:	c7520000 	.word	0xc7520000
 8005144:	50000100 	.word	0x50000100
 8005148:	cb840000 	.word	0xcb840000

0800514c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f7fe ff4d 	bl	8003ff8 <LL_ADC_IsEnabled>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d14d      	bne.n	8005200 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	4b28      	ldr	r3, [pc, #160]	; (800520c <ADC_Enable+0xc0>)
 800516c:	4013      	ands	r3, r2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	f043 0210 	orr.w	r2, r3, #16
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005182:	f043 0201 	orr.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e039      	b.n	8005202 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe ff1c 	bl	8003fd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005198:	f7fe fd0a 	bl	8003bb0 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800519e:	e028      	b.n	80051f2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe ff27 	bl	8003ff8 <LL_ADC_IsEnabled>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d104      	bne.n	80051ba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fe ff0b 	bl	8003fd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051ba:	f7fe fcf9 	bl	8003bb0 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d914      	bls.n	80051f2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d00d      	beq.n	80051f2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051da:	f043 0210 	orr.w	r2, r3, #16
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e6:	f043 0201 	orr.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e007      	b.n	8005202 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d1cf      	bne.n	80051a0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	8000003f 	.word	0x8000003f

08005210 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005226:	2b00      	cmp	r3, #0
 8005228:	d14b      	bne.n	80052c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d021      	beq.n	8005288 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f7fe fdb1 	bl	8003db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d032      	beq.n	80052ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d12b      	bne.n	80052ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d11f      	bne.n	80052ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527e:	f043 0201 	orr.w	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	65da      	str	r2, [r3, #92]	; 0x5c
 8005286:	e018      	b.n	80052ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d111      	bne.n	80052ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d105      	bne.n	80052ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b2:	f043 0201 	orr.w	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7fc ff34 	bl	8002128 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052c0:	e00e      	b.n	80052e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7ff fb42 	bl	8004958 <HAL_ADC_ErrorCallback>
}
 80052d4:	e004      	b.n	80052e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7fc fdea 	bl	8001ed0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005322:	f043 0204 	orr.w	r2, r3, #4
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff fb14 	bl	8004958 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <LL_ADC_IsEnabled>:
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <LL_ADC_IsEnabled+0x18>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <LL_ADC_IsEnabled+0x1a>
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <LL_ADC_REG_IsConversionOngoing>:
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d101      	bne.n	8005376 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b0a1      	sub	sp, #132	; 0x84
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005402:	2302      	movs	r3, #2
 8005404:	e08b      	b.n	800551e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800540e:	2300      	movs	r3, #0
 8005410:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005412:	2300      	movs	r3, #0
 8005414:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800541e:	d102      	bne.n	8005426 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005420:	4b41      	ldr	r3, [pc, #260]	; (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	e001      	b.n	800542a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e06a      	b.n	800551e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff ff87 	bl	800535e <LL_ADC_REG_IsConversionOngoing>
 8005450:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff ff81 	bl	800535e <LL_ADC_REG_IsConversionOngoing>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d14c      	bne.n	80054fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005464:	2b00      	cmp	r3, #0
 8005466:	d149      	bne.n	80054fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005468:	4b30      	ldr	r3, [pc, #192]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800546a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d028      	beq.n	80054c6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	6859      	ldr	r1, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005486:	035b      	lsls	r3, r3, #13
 8005488:	430b      	orrs	r3, r1
 800548a:	431a      	orrs	r2, r3
 800548c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005490:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005494:	f7ff ff50 	bl	8005338 <LL_ADC_IsEnabled>
 8005498:	4604      	mov	r4, r0
 800549a:	4823      	ldr	r0, [pc, #140]	; (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800549c:	f7ff ff4c 	bl	8005338 <LL_ADC_IsEnabled>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4323      	orrs	r3, r4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d133      	bne.n	8005510 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80054a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80054b0:	f023 030f 	bic.w	r3, r3, #15
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	6811      	ldr	r1, [r2, #0]
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	6892      	ldr	r2, [r2, #8]
 80054bc:	430a      	orrs	r2, r1
 80054be:	431a      	orrs	r2, r3
 80054c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054c4:	e024      	b.n	8005510 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80054c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80054d6:	f7ff ff2f 	bl	8005338 <LL_ADC_IsEnabled>
 80054da:	4604      	mov	r4, r0
 80054dc:	4812      	ldr	r0, [pc, #72]	; (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80054de:	f7ff ff2b 	bl	8005338 <LL_ADC_IsEnabled>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4323      	orrs	r3, r4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d112      	bne.n	8005510 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80054f2:	f023 030f 	bic.w	r3, r3, #15
 80054f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80054f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054fa:	e009      	b.n	8005510 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	f043 0220 	orr.w	r2, r3, #32
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800550e:	e000      	b.n	8005512 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005510:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800551a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800551e:	4618      	mov	r0, r3
 8005520:	3784      	adds	r7, #132	; 0x84
 8005522:	46bd      	mov	sp, r7
 8005524:	bd90      	pop	{r4, r7, pc}
 8005526:	bf00      	nop
 8005528:	50000100 	.word	0x50000100
 800552c:	50000300 	.word	0x50000300

08005530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <__NVIC_SetPriorityGrouping+0x44>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800554c:	4013      	ands	r3, r2
 800554e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800555c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005562:	4a04      	ldr	r2, [pc, #16]	; (8005574 <__NVIC_SetPriorityGrouping+0x44>)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	60d3      	str	r3, [r2, #12]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <__NVIC_GetPriorityGrouping+0x18>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	0a1b      	lsrs	r3, r3, #8
 8005582:	f003 0307 	and.w	r3, r3, #7
}
 8005586:	4618      	mov	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800559e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	db0b      	blt.n	80055be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	f003 021f 	and.w	r2, r3, #31
 80055ac:	4907      	ldr	r1, [pc, #28]	; (80055cc <__NVIC_EnableIRQ+0x38>)
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	2001      	movs	r0, #1
 80055b6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	e000e100 	.word	0xe000e100

080055d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	6039      	str	r1, [r7, #0]
 80055da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	db0a      	blt.n	80055fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	490c      	ldr	r1, [pc, #48]	; (800561c <__NVIC_SetPriority+0x4c>)
 80055ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ee:	0112      	lsls	r2, r2, #4
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	440b      	add	r3, r1
 80055f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055f8:	e00a      	b.n	8005610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	4908      	ldr	r1, [pc, #32]	; (8005620 <__NVIC_SetPriority+0x50>)
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	3b04      	subs	r3, #4
 8005608:	0112      	lsls	r2, r2, #4
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	440b      	add	r3, r1
 800560e:	761a      	strb	r2, [r3, #24]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	e000e100 	.word	0xe000e100
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	; 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f1c3 0307 	rsb	r3, r3, #7
 800563e:	2b04      	cmp	r3, #4
 8005640:	bf28      	it	cs
 8005642:	2304      	movcs	r3, #4
 8005644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3304      	adds	r3, #4
 800564a:	2b06      	cmp	r3, #6
 800564c:	d902      	bls.n	8005654 <NVIC_EncodePriority+0x30>
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3b03      	subs	r3, #3
 8005652:	e000      	b.n	8005656 <NVIC_EncodePriority+0x32>
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005658:	f04f 32ff 	mov.w	r2, #4294967295
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43da      	mvns	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	401a      	ands	r2, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800566c:	f04f 31ff 	mov.w	r1, #4294967295
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	43d9      	mvns	r1, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800567c:	4313      	orrs	r3, r2
         );
}
 800567e:	4618      	mov	r0, r3
 8005680:	3724      	adds	r7, #36	; 0x24
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800569c:	d301      	bcc.n	80056a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800569e:	2301      	movs	r3, #1
 80056a0:	e00f      	b.n	80056c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056a2:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <SysTick_Config+0x40>)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056aa:	210f      	movs	r1, #15
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	f7ff ff8e 	bl	80055d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <SysTick_Config+0x40>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ba:	4b04      	ldr	r3, [pc, #16]	; (80056cc <SysTick_Config+0x40>)
 80056bc:	2207      	movs	r2, #7
 80056be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	e000e010 	.word	0xe000e010

080056d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff29 	bl	8005530 <__NVIC_SetPriorityGrouping>
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b086      	sub	sp, #24
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	4603      	mov	r3, r0
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
 80056f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056f4:	f7ff ff40 	bl	8005578 <__NVIC_GetPriorityGrouping>
 80056f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	6978      	ldr	r0, [r7, #20]
 8005700:	f7ff ff90 	bl	8005624 <NVIC_EncodePriority>
 8005704:	4602      	mov	r2, r0
 8005706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800570a:	4611      	mov	r1, r2
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ff5f 	bl	80055d0 <__NVIC_SetPriority>
}
 8005712:	bf00      	nop
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	4603      	mov	r3, r0
 8005722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff ff33 	bl	8005594 <__NVIC_EnableIRQ>
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff ffa4 	bl	800568c <SysTick_Config>
 8005744:	4603      	mov	r3, r0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e014      	b.n	800578a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	791b      	ldrb	r3, [r3, #4]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d105      	bne.n	8005776 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7fd f977 	bl	8002a64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	; 0x28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	795b      	ldrb	r3, [r3, #5]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_DAC_ConfigChannel+0x18>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e192      	b.n	8005ad2 <HAL_DAC_ConfigChannel+0x33e>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2202      	movs	r2, #2
 80057b6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d174      	bne.n	80058aa <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80057c0:	f7fe f9f6 	bl	8003bb0 <HAL_GetTick>
 80057c4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d134      	bne.n	8005836 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80057cc:	e011      	b.n	80057f2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80057ce:	f7fe f9ef 	bl	8003bb0 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d90a      	bls.n	80057f2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f043 0208 	orr.w	r2, r3, #8
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2203      	movs	r2, #3
 80057ec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e16f      	b.n	8005ad2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e6      	bne.n	80057ce <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005800:	2001      	movs	r0, #1
 8005802:	f7fe f9e1 	bl	8003bc8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
 8005810:	e01e      	b.n	8005850 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005812:	f7fe f9cd 	bl	8003bb0 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d90a      	bls.n	8005836 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f043 0208 	orr.w	r2, r3, #8
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2203      	movs	r2, #3
 8005830:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e14d      	b.n	8005ad2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583c:	2b00      	cmp	r3, #0
 800583e:	dbe8      	blt.n	8005812 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005840:	2001      	movs	r0, #1
 8005842:	f7fe f9c1 	bl	8003bc8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800584e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005860:	fa01 f303 	lsl.w	r3, r1, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	ea02 0103 	and.w	r1, r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	409a      	lsls	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	21ff      	movs	r1, #255	; 0xff
 800588c:	fa01 f303 	lsl.w	r3, r1, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	ea02 0103 	and.w	r1, r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	409a      	lsls	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d11d      	bne.n	80058ee <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	221f      	movs	r2, #31
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ca:	4013      	ands	r3, r2
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e2:	4313      	orrs	r3, r2
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2207      	movs	r2, #7
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005906:	4013      	ands	r3, r2
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d102      	bne.n	8005918 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005912:	2300      	movs	r3, #0
 8005914:	623b      	str	r3, [r7, #32]
 8005916:	e00f      	b.n	8005938 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d102      	bne.n	8005926 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005920:	2301      	movs	r3, #1
 8005922:	623b      	str	r3, [r7, #32]
 8005924:	e008      	b.n	8005938 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d102      	bne.n	8005934 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800592e:	2301      	movs	r3, #1
 8005930:	623b      	str	r3, [r7, #32]
 8005932:	e001      	b.n	8005938 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005934:	2300      	movs	r3, #0
 8005936:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	6a3a      	ldr	r2, [r7, #32]
 8005944:	4313      	orrs	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595a:	4013      	ands	r3, r2
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	791b      	ldrb	r3, [r3, #4]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d102      	bne.n	800596c <HAL_DAC_ConfigChannel+0x1d8>
 8005966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800596a:	e000      	b.n	800596e <HAL_DAC_ConfigChannel+0x1da>
 800596c:	2300      	movs	r3, #0
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f003 0310 	and.w	r3, r3, #16
 800597a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	43db      	mvns	r3, r3
 8005984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005986:	4013      	ands	r3, r2
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	795b      	ldrb	r3, [r3, #5]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d102      	bne.n	8005998 <HAL_DAC_ConfigChannel+0x204>
 8005992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005996:	e000      	b.n	800599a <HAL_DAC_ConfigChannel+0x206>
 8005998:	2300      	movs	r3, #0
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	4313      	orrs	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d114      	bne.n	80059da <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80059b0:	f002 f9d2 	bl	8007d58 <HAL_RCC_GetHCLKFreq>
 80059b4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4a48      	ldr	r2, [pc, #288]	; (8005adc <HAL_DAC_ConfigChannel+0x348>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d904      	bls.n	80059c8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
 80059c6:	e00f      	b.n	80059e8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	4a45      	ldr	r2, [pc, #276]	; (8005ae0 <HAL_DAC_ConfigChannel+0x34c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d90a      	bls.n	80059e6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
 80059d8:	e006      	b.n	80059e8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e0:	4313      	orrs	r3, r2
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
 80059e4:	e000      	b.n	80059e8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80059e6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f6:	4313      	orrs	r3, r2
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6819      	ldr	r1, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43da      	mvns	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	400a      	ands	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	43db      	mvns	r3, r3
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a52:	4313      	orrs	r3, r2
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	22c0      	movs	r2, #192	; 0xc0
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	43da      	mvns	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	400a      	ands	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	089b      	lsrs	r3, r3, #2
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	ea02 0103 	and.w	r1, r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	409a      	lsls	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3728      	adds	r7, #40	; 0x28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	09896800 	.word	0x09896800
 8005ae0:	04c4b400 	.word	0x04c4b400

08005ae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e08d      	b.n	8005c12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	4b47      	ldr	r3, [pc, #284]	; (8005c1c <HAL_DMA_Init+0x138>)
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d80f      	bhi.n	8005b22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	4b45      	ldr	r3, [pc, #276]	; (8005c20 <HAL_DMA_Init+0x13c>)
 8005b0a:	4413      	add	r3, r2
 8005b0c:	4a45      	ldr	r2, [pc, #276]	; (8005c24 <HAL_DMA_Init+0x140>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	091b      	lsrs	r3, r3, #4
 8005b14:	009a      	lsls	r2, r3, #2
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a42      	ldr	r2, [pc, #264]	; (8005c28 <HAL_DMA_Init+0x144>)
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40
 8005b20:	e00e      	b.n	8005b40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	4b40      	ldr	r3, [pc, #256]	; (8005c2c <HAL_DMA_Init+0x148>)
 8005b2a:	4413      	add	r3, r2
 8005b2c:	4a3d      	ldr	r2, [pc, #244]	; (8005c24 <HAL_DMA_Init+0x140>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	009a      	lsls	r2, r3, #2
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a3c      	ldr	r2, [pc, #240]	; (8005c30 <HAL_DMA_Init+0x14c>)
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa76 	bl	8006084 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ba0:	d102      	bne.n	8005ba8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005bbc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d010      	beq.n	8005be8 <HAL_DMA_Init+0x104>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d80c      	bhi.n	8005be8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa96 	bl	8006100 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	e008      	b.n	8005bfa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40020407 	.word	0x40020407
 8005c20:	bffdfff8 	.word	0xbffdfff8
 8005c24:	cccccccd 	.word	0xcccccccd
 8005c28:	40020000 	.word	0x40020000
 8005c2c:	bffdfbf8 	.word	0xbffdfbf8
 8005c30:	40020400 	.word	0x40020400

08005c34 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_DMA_Start_IT+0x20>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e066      	b.n	8005d22 <HAL_DMA_Start_IT+0xee>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d155      	bne.n	8005d14 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f9bb 	bl	8006008 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 020e 	orr.w	r2, r2, #14
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e00f      	b.n	8005ccc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0204 	bic.w	r2, r2, #4
 8005cba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 020a 	orr.w	r2, r2, #10
 8005cca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ce8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0201 	orr.w	r2, r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e005      	b.n	8005d20 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d005      	beq.n	8005d4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2204      	movs	r2, #4
 8005d46:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
 8005d4c:	e037      	b.n	8005dbe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 020e 	bic.w	r2, r2, #14
 8005d5c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d6c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	f003 021f 	and.w	r2, r3, #31
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d90:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005d9a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00c      	beq.n	8005dbe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005db2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005dbc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d00d      	beq.n	8005e10 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2204      	movs	r2, #4
 8005df8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	73fb      	strb	r3, [r7, #15]
 8005e0e:	e047      	b.n	8005ea0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 020e 	bic.w	r2, r2, #14
 8005e1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0201 	bic.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e44:	f003 021f 	and.w	r2, r3, #31
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00c      	beq.n	8005e80 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
    }
  }
  return status;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	2204      	movs	r2, #4
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d026      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x7a>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d021      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d107      	bne.n	8005efe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0204 	bic.w	r2, r2, #4
 8005efc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f02:	f003 021f 	and.w	r2, r3, #31
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	2104      	movs	r1, #4
 8005f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d071      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f22:	e06c      	b.n	8005ffe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	409a      	lsls	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4013      	ands	r3, r2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d02e      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d029      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 020a 	bic.w	r2, r2, #10
 8005f5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6c:	f003 021f 	and.w	r2, r3, #31
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	2102      	movs	r1, #2
 8005f76:	fa01 f202 	lsl.w	r2, r1, r2
 8005f7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d038      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005f94:	e033      	b.n	8005ffe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2208      	movs	r2, #8
 8005fa0:	409a      	lsls	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d02a      	beq.n	8006000 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d025      	beq.n	8006000 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 020e 	bic.w	r2, r2, #14
 8005fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc8:	f003 021f 	and.w	r2, r3, #31
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d004      	beq.n	8006000 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
}
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800601e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006036:	f003 021f 	and.w	r2, r3, #31
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	2101      	movs	r1, #1
 8006040:	fa01 f202 	lsl.w	r2, r1, r2
 8006044:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b10      	cmp	r3, #16
 8006054:	d108      	bne.n	8006068 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006066:	e007      	b.n	8006078 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	60da      	str	r2, [r3, #12]
}
 8006078:	bf00      	nop
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	4b16      	ldr	r3, [pc, #88]	; (80060ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006094:	429a      	cmp	r2, r3
 8006096:	d802      	bhi.n	800609e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006098:	4b15      	ldr	r3, [pc, #84]	; (80060f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e001      	b.n	80060a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800609e:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80060a0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	3b08      	subs	r3, #8
 80060ae:	4a12      	ldr	r2, [pc, #72]	; (80060f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060bc:	089b      	lsrs	r3, r3, #2
 80060be:	009a      	lsls	r2, r3, #2
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	4413      	add	r3, r2
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a0b      	ldr	r2, [pc, #44]	; (80060fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80060ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2201      	movs	r2, #1
 80060d8:	409a      	lsls	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40020407 	.word	0x40020407
 80060f0:	40020800 	.word	0x40020800
 80060f4:	40020820 	.word	0x40020820
 80060f8:	cccccccd 	.word	0xcccccccd
 80060fc:	40020880 	.word	0x40020880

08006100 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	461a      	mov	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a08      	ldr	r2, [pc, #32]	; (8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006122:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3b01      	subs	r3, #1
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	2201      	movs	r2, #1
 800612e:	409a      	lsls	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	1000823f 	.word	0x1000823f
 8006144:	40020940 	.word	0x40020940

08006148 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e147      	b.n	80063ea <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fc fd64 	bl	8002c3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0210 	bic.w	r2, r2, #16
 8006182:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006184:	f7fd fd14 	bl	8003bb0 <HAL_GetTick>
 8006188:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800618a:	e012      	b.n	80061b2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800618c:	f7fd fd10 	bl	8003bb0 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b0a      	cmp	r3, #10
 8006198:	d90b      	bls.n	80061b2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619e:	f043 0201 	orr.w	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2203      	movs	r2, #3
 80061aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e11b      	b.n	80063ea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d0e5      	beq.n	800618c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061d0:	f7fd fcee 	bl	8003bb0 <HAL_GetTick>
 80061d4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061d6:	e012      	b.n	80061fe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061d8:	f7fd fcea 	bl	8003bb0 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b0a      	cmp	r3, #10
 80061e4:	d90b      	bls.n	80061fe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ea:	f043 0201 	orr.w	r2, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2203      	movs	r2, #3
 80061f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e0f5      	b.n	80063ea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0e5      	beq.n	80061d8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0202 	orr.w	r2, r2, #2
 800621a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a74      	ldr	r2, [pc, #464]	; (80063f4 <HAL_FDCAN_Init+0x2ac>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d103      	bne.n	800622e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006226:	4a74      	ldr	r2, [pc, #464]	; (80063f8 <HAL_FDCAN_Init+0x2b0>)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	7c1b      	ldrb	r3, [r3, #16]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d108      	bne.n	8006248 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	699a      	ldr	r2, [r3, #24]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006244:	619a      	str	r2, [r3, #24]
 8006246:	e007      	b.n	8006258 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006256:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7c5b      	ldrb	r3, [r3, #17]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d108      	bne.n	8006272 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800626e:	619a      	str	r2, [r3, #24]
 8006270:	e007      	b.n	8006282 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006280:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	7c9b      	ldrb	r3, [r3, #18]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d108      	bne.n	800629c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006298:	619a      	str	r2, [r3, #24]
 800629a:	e007      	b.n	80062ac <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062aa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	699a      	ldr	r2, [r3, #24]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80062d0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0210 	bic.w	r2, r2, #16
 80062e0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d108      	bne.n	80062fc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0204 	orr.w	r2, r2, #4
 80062f8:	619a      	str	r2, [r3, #24]
 80062fa:	e02c      	b.n	8006356 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d028      	beq.n	8006356 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d01c      	beq.n	8006346 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800631a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0210 	orr.w	r2, r2, #16
 800632a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2b03      	cmp	r3, #3
 8006332:	d110      	bne.n	8006356 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0220 	orr.w	r2, r2, #32
 8006342:	619a      	str	r2, [r3, #24]
 8006344:	e007      	b.n	8006356 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0220 	orr.w	r2, r2, #32
 8006354:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	3b01      	subs	r3, #1
 800635c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	3b01      	subs	r3, #1
 8006364:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006366:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800636e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	3b01      	subs	r3, #1
 8006378:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800637e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006380:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800638a:	d115      	bne.n	80063b8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	3b01      	subs	r3, #1
 8006398:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800639a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	3b01      	subs	r3, #1
 80063a2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80063a4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	3b01      	subs	r3, #1
 80063ae:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80063b4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063b6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fbe2 	bl	8006b98 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40006400 	.word	0x40006400
 80063f8:	40006500 	.word	0x40006500

080063fc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d110      	bne.n	8006432 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0201 	bic.w	r2, r2, #1
 8006426:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e006      	b.n	8006440 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006436:	f043 0204 	orr.w	r2, r3, #4
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
  }
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d12c      	bne.n	80064be <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800646c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006478:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e023      	b.n	80064cc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fbd2 	bl	8006c44 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2101      	movs	r1, #1
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	fa01 f202 	lsl.w	r2, r1, r2
 80064ac:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80064b0:	2201      	movs	r2, #1
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	409a      	lsls	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e006      	b.n	80064cc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c2:	f043 0208 	orr.w	r2, r3, #8
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
  }
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b08b      	sub	sp, #44	; 0x2c
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064e8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80064ea:	7efb      	ldrb	r3, [r7, #27]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	f040 80bc 	bne.w	800666a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d121      	bne.n	800653c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	2b00      	cmp	r3, #0
 8006506:	d107      	bne.n	8006518 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0af      	b.n	8006678 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006520:	0a1b      	lsrs	r3, r3, #8
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	4613      	mov	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4413      	add	r3, r2
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	440b      	add	r3, r1
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
 800653a:	e020      	b.n	800657e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	2b00      	cmp	r3, #0
 800654a:	d107      	bne.n	800655c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006550:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e08d      	b.n	8006678 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006564:	0a1b      	lsrs	r3, r3, #8
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	4613      	mov	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4413      	add	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	440b      	add	r3, r1
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d107      	bne.n	80065a2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	0c9b      	lsrs	r3, r3, #18
 8006598:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e005      	b.n	80065ae <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	3304      	adds	r3, #4
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	0e1b      	lsrs	r3, r3, #24
 8006600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	0fda      	lsrs	r2, r3, #31
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	3304      	adds	r3, #4
 8006616:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800661c:	2300      	movs	r3, #0
 800661e:	623b      	str	r3, [r7, #32]
 8006620:	e00a      	b.n	8006638 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	441a      	add	r2, r3
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	440b      	add	r3, r1
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	3301      	adds	r3, #1
 8006636:	623b      	str	r3, [r7, #32]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	0c1b      	lsrs	r3, r3, #16
 800663e:	4a11      	ldr	r2, [pc, #68]	; (8006684 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006640:	5cd3      	ldrb	r3, [r2, r3]
 8006642:	461a      	mov	r2, r3
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	4293      	cmp	r3, r2
 8006648:	d3eb      	bcc.n	8006622 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d105      	bne.n	800665c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800665a:	e004      	b.n	8006666 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	e006      	b.n	8006678 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666e:	f043 0208 	orr.w	r2, r3, #8
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
  }
}
 8006678:	4618      	mov	r0, r3
 800667a:	372c      	adds	r7, #44	; 0x2c
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	0800c99c 	.word	0x0800c99c

08006688 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800669a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d003      	beq.n	80066aa <HAL_FDCAN_ActivateNotification+0x22>
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	f040 80c8 	bne.w	800683a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d03b      	beq.n	800673e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d031      	beq.n	800673e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d027      	beq.n	800673e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01d      	beq.n	800673e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	d013      	beq.n	800673e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00c      	beq.n	800674e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d13b      	bne.n	80067da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d131      	bne.n	80067da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d127      	bne.n	80067da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d11d      	bne.n	80067da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d113      	bne.n	80067da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d004      	beq.n	80067c6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f003 0320 	and.w	r3, r3, #32
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00c      	beq.n	80067ea <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0202 	orr.w	r2, r2, #2
 80067e8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	430a      	orrs	r2, r1
 8006804:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	430a      	orrs	r2, r1
 8006822:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	430a      	orrs	r2, r1
 8006834:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	e006      	b.n	8006848 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683e:	f043 0202 	orr.w	r2, r3, #2
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
  }
}
 8006848:	4618      	mov	r0, r3
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08a      	sub	sp, #40	; 0x28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006862:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006870:	4013      	ands	r3, r2
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	6a3a      	ldr	r2, [r7, #32]
 8006888:	4013      	ands	r3, r2
 800688a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006896:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	4013      	ands	r3, r2
 80068a2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068aa:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80068ae:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	4013      	ands	r3, r2
 80068ba:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80068c6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4013      	ands	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00d      	beq.n	80068fe <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d006      	beq.n	80068fe <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2240      	movs	r2, #64	; 0x40
 80068f6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f92e 	bl	8006b5a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01b      	beq.n	8006944 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d014      	beq.n	8006944 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006922:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4013      	ands	r3, r2
 8006930:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800693a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800693c:	6939      	ldr	r1, [r7, #16]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8ec 	bl	8006b1c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006950:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f8b6 	bl	8006ac6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d007      	beq.n	8006970 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006968:	6a39      	ldr	r1, [r7, #32]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fb fd84 	bl	8002478 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800697e:	69f9      	ldr	r1, [r7, #28]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f8ab 	bl	8006adc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00e      	beq.n	80069b2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f8a0 	bl	8006af2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01a      	beq.n	80069f6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d013      	beq.n	80069f6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80069d6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4013      	ands	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f888 	bl	8006b06 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00e      	beq.n	8006a22 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f888 	bl	8006b32 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00e      	beq.n	8006a4e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006a46:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f87c 	bl	8006b46 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d011      	beq.n	8006a80 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006a8e:	6979      	ldr	r1, [r7, #20]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f876 	bl	8006b82 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f858 	bl	8006b6e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006abe:	bf00      	nop
 8006ac0:	3728      	adds	r7, #40	; 0x28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006ba0:	4b27      	ldr	r3, [pc, #156]	; (8006c40 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006ba2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	041a      	lsls	r2, r3, #16
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	061a      	lsls	r2, r3, #24
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	e005      	b.n	8006c26 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3304      	adds	r3, #4
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d3f3      	bcc.n	8006c1a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	4000a400 	.word	0x4000a400

08006c44 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b089      	sub	sp, #36	; 0x24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006c62:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	e00a      	b.n	8006c86 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006c78:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006c7e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c84:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006c90:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006c96:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006c9c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	440b      	add	r3, r1
 8006cb6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	e020      	b.n	8006d18 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	3303      	adds	r3, #3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	3302      	adds	r3, #2
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	440b      	add	r3, r1
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006cee:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	440b      	add	r3, r1
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006cfc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	440a      	add	r2, r1
 8006d04:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006d06:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	3304      	adds	r3, #4
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	0c1b      	lsrs	r3, r3, #16
 8006d1e:	4a06      	ldr	r2, [pc, #24]	; (8006d38 <FDCAN_CopyMessageToRAM+0xf4>)
 8006d20:	5cd3      	ldrb	r3, [r2, r3]
 8006d22:	461a      	mov	r2, r3
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d3d5      	bcc.n	8006cd6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	3724      	adds	r7, #36	; 0x24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	0800c99c 	.word	0x0800c99c

08006d3c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e033      	b.n	8006db6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fb ffe0 	bl	8002d28 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f854 	bl	8006e1c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f822 	bl	8006dbe <FMAC_Reset>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d10c      	bne.n	8006d9a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d84:	f043 0210 	orr.w	r2, r3, #16
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	22a0      	movs	r2, #160	; 0xa0
 8006d90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
 8006d98:	e008      	b.n	8006dac <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dc6:	f7fc fef3 	bl	8003bb0 <HAL_GetTick>
 8006dca:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006dda:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006ddc:	e00f      	b.n	8006dfe <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8006dde:	f7fc fee7 	bl	8003bb0 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006dec:	d907      	bls.n	8006dfe <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e00a      	b.n	8006e14 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e8      	bne.n	8006dde <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f807 	bl	8006e38 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f81b 	bl	8006e66 <FMAC_ResetOutputStateAndDataPointers>
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ea2:	e15a      	b.n	800715a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 814c 	beq.w	8007154 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d005      	beq.n	8006ed4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d130      	bne.n	8006f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	2203      	movs	r2, #3
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43db      	mvns	r3, r3
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4013      	ands	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	091b      	lsrs	r3, r3, #4
 8006f20:	f003 0201 	and.w	r2, r3, #1
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d017      	beq.n	8006f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43db      	mvns	r3, r3
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4013      	ands	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d123      	bne.n	8006fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	08da      	lsrs	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3208      	adds	r2, #8
 8006f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	220f      	movs	r2, #15
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	08da      	lsrs	r2, r3, #3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3208      	adds	r2, #8
 8006fc0:	6939      	ldr	r1, [r7, #16]
 8006fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd6:	43db      	mvns	r3, r3
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f003 0203 	and.w	r2, r3, #3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80a6 	beq.w	8007154 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007008:	4b5b      	ldr	r3, [pc, #364]	; (8007178 <HAL_GPIO_Init+0x2e4>)
 800700a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700c:	4a5a      	ldr	r2, [pc, #360]	; (8007178 <HAL_GPIO_Init+0x2e4>)
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	6613      	str	r3, [r2, #96]	; 0x60
 8007014:	4b58      	ldr	r3, [pc, #352]	; (8007178 <HAL_GPIO_Init+0x2e4>)
 8007016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007020:	4a56      	ldr	r2, [pc, #344]	; (800717c <HAL_GPIO_Init+0x2e8>)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	089b      	lsrs	r3, r3, #2
 8007026:	3302      	adds	r3, #2
 8007028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	220f      	movs	r2, #15
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	43db      	mvns	r3, r3
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4013      	ands	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800704a:	d01f      	beq.n	800708c <HAL_GPIO_Init+0x1f8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a4c      	ldr	r2, [pc, #304]	; (8007180 <HAL_GPIO_Init+0x2ec>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d019      	beq.n	8007088 <HAL_GPIO_Init+0x1f4>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a4b      	ldr	r2, [pc, #300]	; (8007184 <HAL_GPIO_Init+0x2f0>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d013      	beq.n	8007084 <HAL_GPIO_Init+0x1f0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a4a      	ldr	r2, [pc, #296]	; (8007188 <HAL_GPIO_Init+0x2f4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00d      	beq.n	8007080 <HAL_GPIO_Init+0x1ec>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a49      	ldr	r2, [pc, #292]	; (800718c <HAL_GPIO_Init+0x2f8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d007      	beq.n	800707c <HAL_GPIO_Init+0x1e8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a48      	ldr	r2, [pc, #288]	; (8007190 <HAL_GPIO_Init+0x2fc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d101      	bne.n	8007078 <HAL_GPIO_Init+0x1e4>
 8007074:	2305      	movs	r3, #5
 8007076:	e00a      	b.n	800708e <HAL_GPIO_Init+0x1fa>
 8007078:	2306      	movs	r3, #6
 800707a:	e008      	b.n	800708e <HAL_GPIO_Init+0x1fa>
 800707c:	2304      	movs	r3, #4
 800707e:	e006      	b.n	800708e <HAL_GPIO_Init+0x1fa>
 8007080:	2303      	movs	r3, #3
 8007082:	e004      	b.n	800708e <HAL_GPIO_Init+0x1fa>
 8007084:	2302      	movs	r3, #2
 8007086:	e002      	b.n	800708e <HAL_GPIO_Init+0x1fa>
 8007088:	2301      	movs	r3, #1
 800708a:	e000      	b.n	800708e <HAL_GPIO_Init+0x1fa>
 800708c:	2300      	movs	r3, #0
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	f002 0203 	and.w	r2, r2, #3
 8007094:	0092      	lsls	r2, r2, #2
 8007096:	4093      	lsls	r3, r2
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800709e:	4937      	ldr	r1, [pc, #220]	; (800717c <HAL_GPIO_Init+0x2e8>)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	089b      	lsrs	r3, r3, #2
 80070a4:	3302      	adds	r3, #2
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070ac:	4b39      	ldr	r3, [pc, #228]	; (8007194 <HAL_GPIO_Init+0x300>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	43db      	mvns	r3, r3
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4013      	ands	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80070d0:	4a30      	ldr	r2, [pc, #192]	; (8007194 <HAL_GPIO_Init+0x300>)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80070d6:	4b2f      	ldr	r3, [pc, #188]	; (8007194 <HAL_GPIO_Init+0x300>)
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	43db      	mvns	r3, r3
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4013      	ands	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80070fa:	4a26      	ldr	r2, [pc, #152]	; (8007194 <HAL_GPIO_Init+0x300>)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007100:	4b24      	ldr	r3, [pc, #144]	; (8007194 <HAL_GPIO_Init+0x300>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	43db      	mvns	r3, r3
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4013      	ands	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007124:	4a1b      	ldr	r2, [pc, #108]	; (8007194 <HAL_GPIO_Init+0x300>)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800712a:	4b1a      	ldr	r3, [pc, #104]	; (8007194 <HAL_GPIO_Init+0x300>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	43db      	mvns	r3, r3
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4013      	ands	r3, r2
 8007138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800714e:	4a11      	ldr	r2, [pc, #68]	; (8007194 <HAL_GPIO_Init+0x300>)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	3301      	adds	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	fa22 f303 	lsr.w	r3, r2, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	f47f ae9d 	bne.w	8006ea4 <HAL_GPIO_Init+0x10>
  }
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40021000 	.word	0x40021000
 800717c:	40010000 	.word	0x40010000
 8007180:	48000400 	.word	0x48000400
 8007184:	48000800 	.word	0x48000800
 8007188:	48000c00 	.word	0x48000c00
 800718c:	48001000 	.word	0x48001000
 8007190:	48001400 	.word	0x48001400
 8007194:	40010400 	.word	0x40010400

08007198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
 80071a4:	4613      	mov	r3, r2
 80071a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071a8:	787b      	ldrb	r3, [r7, #1]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071ae:	887a      	ldrh	r2, [r7, #2]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80071b4:	e002      	b.n	80071bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071b6:	887a      	ldrh	r2, [r7, #2]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071da:	887a      	ldrh	r2, [r7, #2]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4013      	ands	r3, r2
 80071e0:	041a      	lsls	r2, r3, #16
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	43d9      	mvns	r1, r3
 80071e6:	887b      	ldrh	r3, [r7, #2]
 80071e8:	400b      	ands	r3, r1
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	619a      	str	r2, [r3, #24]
}
 80071f0:	bf00      	nop
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d141      	bne.n	800728e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800720a:	4b4b      	ldr	r3, [pc, #300]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007216:	d131      	bne.n	800727c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007218:	4b47      	ldr	r3, [pc, #284]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800721a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800721e:	4a46      	ldr	r2, [pc, #280]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007228:	4b43      	ldr	r3, [pc, #268]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007230:	4a41      	ldr	r2, [pc, #260]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007236:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007238:	4b40      	ldr	r3, [pc, #256]	; (800733c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2232      	movs	r2, #50	; 0x32
 800723e:	fb02 f303 	mul.w	r3, r2, r3
 8007242:	4a3f      	ldr	r2, [pc, #252]	; (8007340 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007244:	fba2 2303 	umull	r2, r3, r2, r3
 8007248:	0c9b      	lsrs	r3, r3, #18
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800724e:	e002      	b.n	8007256 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3b01      	subs	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007256:	4b38      	ldr	r3, [pc, #224]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800725e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007262:	d102      	bne.n	800726a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f2      	bne.n	8007250 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800726a:	4b33      	ldr	r3, [pc, #204]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007276:	d158      	bne.n	800732a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e057      	b.n	800732c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800727c:	4b2e      	ldr	r3, [pc, #184]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800727e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007282:	4a2d      	ldr	r2, [pc, #180]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007288:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800728c:	e04d      	b.n	800732a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007294:	d141      	bne.n	800731a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007296:	4b28      	ldr	r3, [pc, #160]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800729e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a2:	d131      	bne.n	8007308 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072a4:	4b24      	ldr	r3, [pc, #144]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072aa:	4a23      	ldr	r2, [pc, #140]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072b4:	4b20      	ldr	r3, [pc, #128]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80072bc:	4a1e      	ldr	r2, [pc, #120]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072c4:	4b1d      	ldr	r3, [pc, #116]	; (800733c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2232      	movs	r2, #50	; 0x32
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	4a1c      	ldr	r2, [pc, #112]	; (8007340 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	0c9b      	lsrs	r3, r3, #18
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072da:	e002      	b.n	80072e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3b01      	subs	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ee:	d102      	bne.n	80072f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f2      	bne.n	80072dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072f6:	4b10      	ldr	r3, [pc, #64]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007302:	d112      	bne.n	800732a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e011      	b.n	800732c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007308:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800730a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800730e:	4a0a      	ldr	r2, [pc, #40]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007314:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007318:	e007      	b.n	800732a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800731a:	4b07      	ldr	r3, [pc, #28]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007322:	4a05      	ldr	r2, [pc, #20]	; (8007338 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007324:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007328:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	40007000 	.word	0x40007000
 800733c:	200000d8 	.word	0x200000d8
 8007340:	431bde83 	.word	0x431bde83

08007344 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007344:	b480      	push	{r7}
 8007346:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	4a04      	ldr	r2, [pc, #16]	; (8007360 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800734e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007352:	6093      	str	r3, [r2, #8]
}
 8007354:	bf00      	nop
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40007000 	.word	0x40007000

08007364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e306      	b.n	8007984 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d075      	beq.n	800746e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007382:	4b97      	ldr	r3, [pc, #604]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 030c 	and.w	r3, r3, #12
 800738a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800738c:	4b94      	ldr	r3, [pc, #592]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b0c      	cmp	r3, #12
 800739a:	d102      	bne.n	80073a2 <HAL_RCC_OscConfig+0x3e>
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d002      	beq.n	80073a8 <HAL_RCC_OscConfig+0x44>
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d10b      	bne.n	80073c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a8:	4b8d      	ldr	r3, [pc, #564]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d05b      	beq.n	800746c <HAL_RCC_OscConfig+0x108>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d157      	bne.n	800746c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e2e1      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c8:	d106      	bne.n	80073d8 <HAL_RCC_OscConfig+0x74>
 80073ca:	4b85      	ldr	r3, [pc, #532]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a84      	ldr	r2, [pc, #528]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80073d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	e01d      	b.n	8007414 <HAL_RCC_OscConfig+0xb0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073e0:	d10c      	bne.n	80073fc <HAL_RCC_OscConfig+0x98>
 80073e2:	4b7f      	ldr	r3, [pc, #508]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a7e      	ldr	r2, [pc, #504]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80073e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	4b7c      	ldr	r3, [pc, #496]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a7b      	ldr	r2, [pc, #492]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80073f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	e00b      	b.n	8007414 <HAL_RCC_OscConfig+0xb0>
 80073fc:	4b78      	ldr	r3, [pc, #480]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a77      	ldr	r2, [pc, #476]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	4b75      	ldr	r3, [pc, #468]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a74      	ldr	r2, [pc, #464]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 800740e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d013      	beq.n	8007444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fc fbc8 	bl	8003bb0 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007424:	f7fc fbc4 	bl	8003bb0 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b64      	cmp	r3, #100	; 0x64
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e2a6      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007436:	4b6a      	ldr	r3, [pc, #424]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0f0      	beq.n	8007424 <HAL_RCC_OscConfig+0xc0>
 8007442:	e014      	b.n	800746e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007444:	f7fc fbb4 	bl	8003bb0 <HAL_GetTick>
 8007448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800744a:	e008      	b.n	800745e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800744c:	f7fc fbb0 	bl	8003bb0 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b64      	cmp	r3, #100	; 0x64
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e292      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800745e:	4b60      	ldr	r3, [pc, #384]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f0      	bne.n	800744c <HAL_RCC_OscConfig+0xe8>
 800746a:	e000      	b.n	800746e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800746c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d075      	beq.n	8007566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800747a:	4b59      	ldr	r3, [pc, #356]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 030c 	and.w	r3, r3, #12
 8007482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007484:	4b56      	ldr	r3, [pc, #344]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b0c      	cmp	r3, #12
 8007492:	d102      	bne.n	800749a <HAL_RCC_OscConfig+0x136>
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b02      	cmp	r3, #2
 8007498:	d002      	beq.n	80074a0 <HAL_RCC_OscConfig+0x13c>
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b04      	cmp	r3, #4
 800749e:	d11f      	bne.n	80074e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074a0:	4b4f      	ldr	r3, [pc, #316]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_RCC_OscConfig+0x154>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e265      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b8:	4b49      	ldr	r3, [pc, #292]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	061b      	lsls	r3, r3, #24
 80074c6:	4946      	ldr	r1, [pc, #280]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80074cc:	4b45      	ldr	r3, [pc, #276]	; (80075e4 <HAL_RCC_OscConfig+0x280>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fc fb21 	bl	8003b18 <HAL_InitTick>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d043      	beq.n	8007564 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e251      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d023      	beq.n	8007530 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074e8:	4b3d      	ldr	r3, [pc, #244]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a3c      	ldr	r2, [pc, #240]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80074ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f4:	f7fc fb5c 	bl	8003bb0 <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074fc:	f7fc fb58 	bl	8003bb0 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e23a      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800750e:	4b34      	ldr	r3, [pc, #208]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0f0      	beq.n	80074fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800751a:	4b31      	ldr	r3, [pc, #196]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	061b      	lsls	r3, r3, #24
 8007528:	492d      	ldr	r1, [pc, #180]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 800752a:	4313      	orrs	r3, r2
 800752c:	604b      	str	r3, [r1, #4]
 800752e:	e01a      	b.n	8007566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007530:	4b2b      	ldr	r3, [pc, #172]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a2a      	ldr	r2, [pc, #168]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800753a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753c:	f7fc fb38 	bl	8003bb0 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007544:	f7fc fb34 	bl	8003bb0 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e216      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007556:	4b22      	ldr	r3, [pc, #136]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f0      	bne.n	8007544 <HAL_RCC_OscConfig+0x1e0>
 8007562:	e000      	b.n	8007566 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007564:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d041      	beq.n	80075f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01c      	beq.n	80075b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800757a:	4b19      	ldr	r3, [pc, #100]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 800757c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007580:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758a:	f7fc fb11 	bl	8003bb0 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007592:	f7fc fb0d 	bl	8003bb0 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e1ef      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075a4:	4b0e      	ldr	r3, [pc, #56]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80075a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0ef      	beq.n	8007592 <HAL_RCC_OscConfig+0x22e>
 80075b2:	e020      	b.n	80075f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075b4:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80075b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075ba:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <HAL_RCC_OscConfig+0x27c>)
 80075bc:	f023 0301 	bic.w	r3, r3, #1
 80075c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c4:	f7fc faf4 	bl	8003bb0 <HAL_GetTick>
 80075c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075ca:	e00d      	b.n	80075e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075cc:	f7fc faf0 	bl	8003bb0 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d906      	bls.n	80075e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e1d2      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
 80075de:	bf00      	nop
 80075e0:	40021000 	.word	0x40021000
 80075e4:	200000dc 	.word	0x200000dc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075e8:	4b8c      	ldr	r3, [pc, #560]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80075ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1ea      	bne.n	80075cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 80a6 	beq.w	8007750 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007604:	2300      	movs	r3, #0
 8007606:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007608:	4b84      	ldr	r3, [pc, #528]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 800760a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_RCC_OscConfig+0x2b4>
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <HAL_RCC_OscConfig+0x2b6>
 8007618:	2300      	movs	r3, #0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00d      	beq.n	800763a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800761e:	4b7f      	ldr	r3, [pc, #508]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 8007620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007622:	4a7e      	ldr	r2, [pc, #504]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 8007624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007628:	6593      	str	r3, [r2, #88]	; 0x58
 800762a:	4b7c      	ldr	r3, [pc, #496]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 800762c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007636:	2301      	movs	r3, #1
 8007638:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800763a:	4b79      	ldr	r3, [pc, #484]	; (8007820 <HAL_RCC_OscConfig+0x4bc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007642:	2b00      	cmp	r3, #0
 8007644:	d118      	bne.n	8007678 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007646:	4b76      	ldr	r3, [pc, #472]	; (8007820 <HAL_RCC_OscConfig+0x4bc>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a75      	ldr	r2, [pc, #468]	; (8007820 <HAL_RCC_OscConfig+0x4bc>)
 800764c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007652:	f7fc faad 	bl	8003bb0 <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007658:	e008      	b.n	800766c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800765a:	f7fc faa9 	bl	8003bb0 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e18b      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800766c:	4b6c      	ldr	r3, [pc, #432]	; (8007820 <HAL_RCC_OscConfig+0x4bc>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f0      	beq.n	800765a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d108      	bne.n	8007692 <HAL_RCC_OscConfig+0x32e>
 8007680:	4b66      	ldr	r3, [pc, #408]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 8007682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007686:	4a65      	ldr	r2, [pc, #404]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 8007688:	f043 0301 	orr.w	r3, r3, #1
 800768c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007690:	e024      	b.n	80076dc <HAL_RCC_OscConfig+0x378>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	2b05      	cmp	r3, #5
 8007698:	d110      	bne.n	80076bc <HAL_RCC_OscConfig+0x358>
 800769a:	4b60      	ldr	r3, [pc, #384]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 800769c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a0:	4a5e      	ldr	r2, [pc, #376]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80076a2:	f043 0304 	orr.w	r3, r3, #4
 80076a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076aa:	4b5c      	ldr	r3, [pc, #368]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80076ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b0:	4a5a      	ldr	r2, [pc, #360]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80076b2:	f043 0301 	orr.w	r3, r3, #1
 80076b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076ba:	e00f      	b.n	80076dc <HAL_RCC_OscConfig+0x378>
 80076bc:	4b57      	ldr	r3, [pc, #348]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c2:	4a56      	ldr	r2, [pc, #344]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80076c4:	f023 0301 	bic.w	r3, r3, #1
 80076c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076cc:	4b53      	ldr	r3, [pc, #332]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80076ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d2:	4a52      	ldr	r2, [pc, #328]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80076d4:	f023 0304 	bic.w	r3, r3, #4
 80076d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d016      	beq.n	8007712 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e4:	f7fc fa64 	bl	8003bb0 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076ea:	e00a      	b.n	8007702 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ec:	f7fc fa60 	bl	8003bb0 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e140      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007702:	4b46      	ldr	r3, [pc, #280]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 8007704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0ed      	beq.n	80076ec <HAL_RCC_OscConfig+0x388>
 8007710:	e015      	b.n	800773e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007712:	f7fc fa4d 	bl	8003bb0 <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007718:	e00a      	b.n	8007730 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800771a:	f7fc fa49 	bl	8003bb0 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	f241 3288 	movw	r2, #5000	; 0x1388
 8007728:	4293      	cmp	r3, r2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e129      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007730:	4b3a      	ldr	r3, [pc, #232]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 8007732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1ed      	bne.n	800771a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800773e:	7ffb      	ldrb	r3, [r7, #31]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d105      	bne.n	8007750 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007744:	4b35      	ldr	r3, [pc, #212]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 8007746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007748:	4a34      	ldr	r2, [pc, #208]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 800774a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800774e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b00      	cmp	r3, #0
 800775a:	d03c      	beq.n	80077d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01c      	beq.n	800779e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007764:	4b2d      	ldr	r3, [pc, #180]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 8007766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800776a:	4a2c      	ldr	r2, [pc, #176]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007774:	f7fc fa1c 	bl	8003bb0 <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800777c:	f7fc fa18 	bl	8003bb0 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e0fa      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800778e:	4b23      	ldr	r3, [pc, #140]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 8007790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0ef      	beq.n	800777c <HAL_RCC_OscConfig+0x418>
 800779c:	e01b      	b.n	80077d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800779e:	4b1f      	ldr	r3, [pc, #124]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80077a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077a4:	4a1d      	ldr	r2, [pc, #116]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ae:	f7fc f9ff 	bl	8003bb0 <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077b4:	e008      	b.n	80077c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077b6:	f7fc f9fb 	bl	8003bb0 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e0dd      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077c8:	4b14      	ldr	r3, [pc, #80]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80077ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1ef      	bne.n	80077b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 80d1 	beq.w	8007982 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077e0:	4b0e      	ldr	r3, [pc, #56]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 030c 	and.w	r3, r3, #12
 80077e8:	2b0c      	cmp	r3, #12
 80077ea:	f000 808b 	beq.w	8007904 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d15e      	bne.n	80078b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f6:	4b09      	ldr	r3, [pc, #36]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a08      	ldr	r2, [pc, #32]	; (800781c <HAL_RCC_OscConfig+0x4b8>)
 80077fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007802:	f7fc f9d5 	bl	8003bb0 <HAL_GetTick>
 8007806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007808:	e00c      	b.n	8007824 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800780a:	f7fc f9d1 	bl	8003bb0 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d905      	bls.n	8007824 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e0b3      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
 800781c:	40021000 	.word	0x40021000
 8007820:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007824:	4b59      	ldr	r3, [pc, #356]	; (800798c <HAL_RCC_OscConfig+0x628>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1ec      	bne.n	800780a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007830:	4b56      	ldr	r3, [pc, #344]	; (800798c <HAL_RCC_OscConfig+0x628>)
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	4b56      	ldr	r3, [pc, #344]	; (8007990 <HAL_RCC_OscConfig+0x62c>)
 8007836:	4013      	ands	r3, r2
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6a11      	ldr	r1, [r2, #32]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007840:	3a01      	subs	r2, #1
 8007842:	0112      	lsls	r2, r2, #4
 8007844:	4311      	orrs	r1, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800784a:	0212      	lsls	r2, r2, #8
 800784c:	4311      	orrs	r1, r2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007852:	0852      	lsrs	r2, r2, #1
 8007854:	3a01      	subs	r2, #1
 8007856:	0552      	lsls	r2, r2, #21
 8007858:	4311      	orrs	r1, r2
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800785e:	0852      	lsrs	r2, r2, #1
 8007860:	3a01      	subs	r2, #1
 8007862:	0652      	lsls	r2, r2, #25
 8007864:	4311      	orrs	r1, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800786a:	06d2      	lsls	r2, r2, #27
 800786c:	430a      	orrs	r2, r1
 800786e:	4947      	ldr	r1, [pc, #284]	; (800798c <HAL_RCC_OscConfig+0x628>)
 8007870:	4313      	orrs	r3, r2
 8007872:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007874:	4b45      	ldr	r3, [pc, #276]	; (800798c <HAL_RCC_OscConfig+0x628>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a44      	ldr	r2, [pc, #272]	; (800798c <HAL_RCC_OscConfig+0x628>)
 800787a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800787e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007880:	4b42      	ldr	r3, [pc, #264]	; (800798c <HAL_RCC_OscConfig+0x628>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	4a41      	ldr	r2, [pc, #260]	; (800798c <HAL_RCC_OscConfig+0x628>)
 8007886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800788a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800788c:	f7fc f990 	bl	8003bb0 <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007894:	f7fc f98c 	bl	8003bb0 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e06e      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078a6:	4b39      	ldr	r3, [pc, #228]	; (800798c <HAL_RCC_OscConfig+0x628>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0f0      	beq.n	8007894 <HAL_RCC_OscConfig+0x530>
 80078b2:	e066      	b.n	8007982 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b4:	4b35      	ldr	r3, [pc, #212]	; (800798c <HAL_RCC_OscConfig+0x628>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a34      	ldr	r2, [pc, #208]	; (800798c <HAL_RCC_OscConfig+0x628>)
 80078ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80078c0:	4b32      	ldr	r3, [pc, #200]	; (800798c <HAL_RCC_OscConfig+0x628>)
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	4a31      	ldr	r2, [pc, #196]	; (800798c <HAL_RCC_OscConfig+0x628>)
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80078cc:	4b2f      	ldr	r3, [pc, #188]	; (800798c <HAL_RCC_OscConfig+0x628>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	4a2e      	ldr	r2, [pc, #184]	; (800798c <HAL_RCC_OscConfig+0x628>)
 80078d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80078d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078dc:	f7fc f968 	bl	8003bb0 <HAL_GetTick>
 80078e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078e2:	e008      	b.n	80078f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078e4:	f7fc f964 	bl	8003bb0 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e046      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078f6:	4b25      	ldr	r3, [pc, #148]	; (800798c <HAL_RCC_OscConfig+0x628>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1f0      	bne.n	80078e4 <HAL_RCC_OscConfig+0x580>
 8007902:	e03e      	b.n	8007982 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e039      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007910:	4b1e      	ldr	r3, [pc, #120]	; (800798c <HAL_RCC_OscConfig+0x628>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f003 0203 	and.w	r2, r3, #3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	429a      	cmp	r2, r3
 8007922:	d12c      	bne.n	800797e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	3b01      	subs	r3, #1
 8007930:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007932:	429a      	cmp	r2, r3
 8007934:	d123      	bne.n	800797e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007942:	429a      	cmp	r2, r3
 8007944:	d11b      	bne.n	800797e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007952:	429a      	cmp	r2, r3
 8007954:	d113      	bne.n	800797e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	3b01      	subs	r3, #1
 8007964:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007966:	429a      	cmp	r2, r3
 8007968:	d109      	bne.n	800797e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007974:	085b      	lsrs	r3, r3, #1
 8007976:	3b01      	subs	r3, #1
 8007978:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800797a:	429a      	cmp	r2, r3
 800797c:	d001      	beq.n	8007982 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40021000 	.word	0x40021000
 8007990:	019f800c 	.word	0x019f800c

08007994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e11e      	b.n	8007bea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079ac:	4b91      	ldr	r3, [pc, #580]	; (8007bf4 <HAL_RCC_ClockConfig+0x260>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d910      	bls.n	80079dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ba:	4b8e      	ldr	r3, [pc, #568]	; (8007bf4 <HAL_RCC_ClockConfig+0x260>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f023 020f 	bic.w	r2, r3, #15
 80079c2:	498c      	ldr	r1, [pc, #560]	; (8007bf4 <HAL_RCC_ClockConfig+0x260>)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ca:	4b8a      	ldr	r3, [pc, #552]	; (8007bf4 <HAL_RCC_ClockConfig+0x260>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d001      	beq.n	80079dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e106      	b.n	8007bea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d073      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d129      	bne.n	8007a44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079f0:	4b81      	ldr	r3, [pc, #516]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e0f4      	b.n	8007bea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007a00:	f000 f9e2 	bl	8007dc8 <RCC_GetSysClockFreqFromPLLSource>
 8007a04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	4a7c      	ldr	r2, [pc, #496]	; (8007bfc <HAL_RCC_ClockConfig+0x268>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d93f      	bls.n	8007a8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a0e:	4b7a      	ldr	r3, [pc, #488]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d033      	beq.n	8007a8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d12f      	bne.n	8007a8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a2e:	4b72      	ldr	r3, [pc, #456]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a36:	4a70      	ldr	r2, [pc, #448]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a3e:	2380      	movs	r3, #128	; 0x80
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	e024      	b.n	8007a8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d107      	bne.n	8007a5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a4c:	4b6a      	ldr	r3, [pc, #424]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d109      	bne.n	8007a6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e0c6      	b.n	8007bea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a5c:	4b66      	ldr	r3, [pc, #408]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0be      	b.n	8007bea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007a6c:	f000 f914 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 8007a70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	4a61      	ldr	r2, [pc, #388]	; (8007bfc <HAL_RCC_ClockConfig+0x268>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d909      	bls.n	8007a8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a7a:	4b5f      	ldr	r3, [pc, #380]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a82:	4a5d      	ldr	r2, [pc, #372]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007a8a:	2380      	movs	r3, #128	; 0x80
 8007a8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a8e:	4b5a      	ldr	r3, [pc, #360]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f023 0203 	bic.w	r2, r3, #3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	4957      	ldr	r1, [pc, #348]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa0:	f7fc f886 	bl	8003bb0 <HAL_GetTick>
 8007aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aa6:	e00a      	b.n	8007abe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aa8:	f7fc f882 	bl	8003bb0 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e095      	b.n	8007bea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007abe:	4b4e      	ldr	r3, [pc, #312]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f003 020c 	and.w	r2, r3, #12
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d1eb      	bne.n	8007aa8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d023      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ae8:	4b43      	ldr	r3, [pc, #268]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	4a42      	ldr	r2, [pc, #264]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007aee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007af2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0308 	and.w	r3, r3, #8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d007      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007b00:	4b3d      	ldr	r3, [pc, #244]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b08:	4a3b      	ldr	r2, [pc, #236]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b10:	4b39      	ldr	r3, [pc, #228]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4936      	ldr	r1, [pc, #216]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	608b      	str	r3, [r1, #8]
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2b80      	cmp	r3, #128	; 0x80
 8007b28:	d105      	bne.n	8007b36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b2a:	4b33      	ldr	r3, [pc, #204]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	4a32      	ldr	r2, [pc, #200]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b36:	4b2f      	ldr	r3, [pc, #188]	; (8007bf4 <HAL_RCC_ClockConfig+0x260>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d21d      	bcs.n	8007b80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b44:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <HAL_RCC_ClockConfig+0x260>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f023 020f 	bic.w	r2, r3, #15
 8007b4c:	4929      	ldr	r1, [pc, #164]	; (8007bf4 <HAL_RCC_ClockConfig+0x260>)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b54:	f7fc f82c 	bl	8003bb0 <HAL_GetTick>
 8007b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b5a:	e00a      	b.n	8007b72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b5c:	f7fc f828 	bl	8003bb0 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e03b      	b.n	8007bea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b72:	4b20      	ldr	r3, [pc, #128]	; (8007bf4 <HAL_RCC_ClockConfig+0x260>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d1ed      	bne.n	8007b5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b8c:	4b1a      	ldr	r3, [pc, #104]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4917      	ldr	r1, [pc, #92]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0308 	and.w	r3, r3, #8
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d009      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007baa:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	490f      	ldr	r1, [pc, #60]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bbe:	f000 f86b 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <HAL_RCC_ClockConfig+0x264>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	091b      	lsrs	r3, r3, #4
 8007bca:	f003 030f 	and.w	r3, r3, #15
 8007bce:	490c      	ldr	r1, [pc, #48]	; (8007c00 <HAL_RCC_ClockConfig+0x26c>)
 8007bd0:	5ccb      	ldrb	r3, [r1, r3]
 8007bd2:	f003 031f 	and.w	r3, r3, #31
 8007bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bda:	4a0a      	ldr	r2, [pc, #40]	; (8007c04 <HAL_RCC_ClockConfig+0x270>)
 8007bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007bde:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <HAL_RCC_ClockConfig+0x274>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fb ff98 	bl	8003b18 <HAL_InitTick>
 8007be8:	4603      	mov	r3, r0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40022000 	.word	0x40022000
 8007bf8:	40021000 	.word	0x40021000
 8007bfc:	04c4b400 	.word	0x04c4b400
 8007c00:	0800c984 	.word	0x0800c984
 8007c04:	200000d8 	.word	0x200000d8
 8007c08:	200000dc 	.word	0x200000dc

08007c0c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08c      	sub	sp, #48	; 0x30
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	0c1b      	lsrs	r3, r3, #16
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8007c38:	029b      	lsls	r3, r3, #10
 8007c3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	0c1b      	lsrs	r3, r3, #16
 8007c40:	f003 030f 	and.w	r3, r3, #15
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8007c46:	4b13      	ldr	r3, [pc, #76]	; (8007c94 <HAL_RCC_MCOConfig+0x88>)
 8007c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c52:	4910      	ldr	r1, [pc, #64]	; (8007c94 <HAL_RCC_MCOConfig+0x88>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	0d1b      	lsrs	r3, r3, #20
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8007c66:	f107 0310 	add.w	r3, r7, #16
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6e:	f7ff f911 	bl	8006e94 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d109      	bne.n	8007c8c <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <HAL_RCC_MCOConfig+0x88>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c80:	68b9      	ldr	r1, [r7, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	430b      	orrs	r3, r1
 8007c86:	4903      	ldr	r1, [pc, #12]	; (8007c94 <HAL_RCC_MCOConfig+0x88>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	608b      	str	r3, [r1, #8]
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	3730      	adds	r7, #48	; 0x30
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40021000 	.word	0x40021000

08007c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c9e:	4b2c      	ldr	r3, [pc, #176]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 030c 	and.w	r3, r3, #12
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d102      	bne.n	8007cb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007caa:	4b2a      	ldr	r3, [pc, #168]	; (8007d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	e047      	b.n	8007d40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007cb0:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 030c 	and.w	r3, r3, #12
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d102      	bne.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007cbc:	4b25      	ldr	r3, [pc, #148]	; (8007d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	e03e      	b.n	8007d40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007cc2:	4b23      	ldr	r3, [pc, #140]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 030c 	and.w	r3, r3, #12
 8007cca:	2b0c      	cmp	r3, #12
 8007ccc:	d136      	bne.n	8007d3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cce:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	091b      	lsrs	r3, r3, #4
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d10c      	bne.n	8007d06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cec:	4a19      	ldr	r2, [pc, #100]	; (8007d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf4:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cf6:	68d2      	ldr	r2, [r2, #12]
 8007cf8:	0a12      	lsrs	r2, r2, #8
 8007cfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007cfe:	fb02 f303 	mul.w	r3, r2, r3
 8007d02:	617b      	str	r3, [r7, #20]
      break;
 8007d04:	e00c      	b.n	8007d20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d06:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0e:	4a10      	ldr	r2, [pc, #64]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d10:	68d2      	ldr	r2, [r2, #12]
 8007d12:	0a12      	lsrs	r2, r2, #8
 8007d14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d18:	fb02 f303 	mul.w	r3, r2, r3
 8007d1c:	617b      	str	r3, [r7, #20]
      break;
 8007d1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d20:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	0e5b      	lsrs	r3, r3, #25
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	e001      	b.n	8007d40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007d40:	693b      	ldr	r3, [r7, #16]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40021000 	.word	0x40021000
 8007d54:	00f42400 	.word	0x00f42400

08007d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d5c:	4b03      	ldr	r3, [pc, #12]	; (8007d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	200000d8 	.word	0x200000d8

08007d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d74:	f7ff fff0 	bl	8007d58 <HAL_RCC_GetHCLKFreq>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	4904      	ldr	r1, [pc, #16]	; (8007d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d86:	5ccb      	ldrb	r3, [r1, r3]
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	40021000 	.word	0x40021000
 8007d98:	0800c994 	.word	0x0800c994

08007d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007da0:	f7ff ffda 	bl	8007d58 <HAL_RCC_GetHCLKFreq>
 8007da4:	4602      	mov	r2, r0
 8007da6:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	0adb      	lsrs	r3, r3, #11
 8007dac:	f003 0307 	and.w	r3, r3, #7
 8007db0:	4904      	ldr	r1, [pc, #16]	; (8007dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007db2:	5ccb      	ldrb	r3, [r1, r3]
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40021000 	.word	0x40021000
 8007dc4:	0800c994 	.word	0x0800c994

08007dc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007dce:	4b1e      	ldr	r3, [pc, #120]	; (8007e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f003 0303 	and.w	r3, r3, #3
 8007dd6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007dd8:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	091b      	lsrs	r3, r3, #4
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	3301      	adds	r3, #1
 8007de4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d10c      	bne.n	8007e06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df4:	4a14      	ldr	r2, [pc, #80]	; (8007e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007df6:	68d2      	ldr	r2, [r2, #12]
 8007df8:	0a12      	lsrs	r2, r2, #8
 8007dfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	617b      	str	r3, [r7, #20]
    break;
 8007e04:	e00c      	b.n	8007e20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e06:	4a11      	ldr	r2, [pc, #68]	; (8007e4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0e:	4a0e      	ldr	r2, [pc, #56]	; (8007e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e10:	68d2      	ldr	r2, [r2, #12]
 8007e12:	0a12      	lsrs	r2, r2, #8
 8007e14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e18:	fb02 f303 	mul.w	r3, r2, r3
 8007e1c:	617b      	str	r3, [r7, #20]
    break;
 8007e1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e20:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	0e5b      	lsrs	r3, r3, #25
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007e3a:	687b      	ldr	r3, [r7, #4]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	40021000 	.word	0x40021000
 8007e4c:	00f42400 	.word	0x00f42400

08007e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e58:	2300      	movs	r3, #0
 8007e5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 8098 	beq.w	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e72:	4b43      	ldr	r3, [pc, #268]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10d      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e7e:	4b40      	ldr	r3, [pc, #256]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e82:	4a3f      	ldr	r2, [pc, #252]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e88:	6593      	str	r3, [r2, #88]	; 0x58
 8007e8a:	4b3d      	ldr	r3, [pc, #244]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e92:	60bb      	str	r3, [r7, #8]
 8007e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e96:	2301      	movs	r3, #1
 8007e98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e9a:	4b3a      	ldr	r3, [pc, #232]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a39      	ldr	r2, [pc, #228]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ea6:	f7fb fe83 	bl	8003bb0 <HAL_GetTick>
 8007eaa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eac:	e009      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eae:	f7fb fe7f 	bl	8003bb0 <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d902      	bls.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	74fb      	strb	r3, [r7, #19]
        break;
 8007ec0:	e005      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ec2:	4b30      	ldr	r3, [pc, #192]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0ef      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ece:	7cfb      	ldrb	r3, [r7, #19]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d159      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ed4:	4b2a      	ldr	r3, [pc, #168]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ede:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d01e      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d019      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ef0:	4b23      	ldr	r3, [pc, #140]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007efc:	4b20      	ldr	r3, [pc, #128]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f02:	4a1f      	ldr	r2, [pc, #124]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f0c:	4b1c      	ldr	r3, [pc, #112]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f12:	4a1b      	ldr	r2, [pc, #108]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f1c:	4a18      	ldr	r2, [pc, #96]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d016      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2e:	f7fb fe3f 	bl	8003bb0 <HAL_GetTick>
 8007f32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f34:	e00b      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f36:	f7fb fe3b 	bl	8003bb0 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d902      	bls.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	74fb      	strb	r3, [r7, #19]
            break;
 8007f4c:	e006      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0ec      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007f5c:	7cfb      	ldrb	r3, [r7, #19]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f62:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	4903      	ldr	r1, [pc, #12]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f78:	e008      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f7a:	7cfb      	ldrb	r3, [r7, #19]
 8007f7c:	74bb      	strb	r3, [r7, #18]
 8007f7e:	e005      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007f80:	40021000 	.word	0x40021000
 8007f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f88:	7cfb      	ldrb	r3, [r7, #19]
 8007f8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f8c:	7c7b      	ldrb	r3, [r7, #17]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d105      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f92:	4ba6      	ldr	r3, [pc, #664]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f96:	4aa5      	ldr	r2, [pc, #660]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007faa:	4ba0      	ldr	r3, [pc, #640]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb0:	f023 0203 	bic.w	r2, r3, #3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	499c      	ldr	r1, [pc, #624]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007fcc:	4b97      	ldr	r3, [pc, #604]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd2:	f023 020c 	bic.w	r2, r3, #12
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	4994      	ldr	r1, [pc, #592]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0304 	and.w	r3, r3, #4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007fee:	4b8f      	ldr	r3, [pc, #572]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	498b      	ldr	r1, [pc, #556]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008010:	4b86      	ldr	r3, [pc, #536]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008016:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	4983      	ldr	r1, [pc, #524]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008020:	4313      	orrs	r3, r2
 8008022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008032:	4b7e      	ldr	r3, [pc, #504]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008038:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	497a      	ldr	r1, [pc, #488]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00a      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008054:	4b75      	ldr	r3, [pc, #468]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	4972      	ldr	r1, [pc, #456]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008064:	4313      	orrs	r3, r2
 8008066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008076:	4b6d      	ldr	r3, [pc, #436]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	4969      	ldr	r1, [pc, #420]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008086:	4313      	orrs	r3, r2
 8008088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008098:	4b64      	ldr	r3, [pc, #400]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800809a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	4961      	ldr	r1, [pc, #388]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ba:	4b5c      	ldr	r3, [pc, #368]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	4958      	ldr	r1, [pc, #352]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d015      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080dc:	4b53      	ldr	r3, [pc, #332]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	4950      	ldr	r1, [pc, #320]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080fa:	d105      	bne.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080fc:	4b4b      	ldr	r3, [pc, #300]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	4a4a      	ldr	r2, [pc, #296]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008106:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008110:	2b00      	cmp	r3, #0
 8008112:	d015      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008114:	4b45      	ldr	r3, [pc, #276]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	4942      	ldr	r1, [pc, #264]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008124:	4313      	orrs	r3, r2
 8008126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008132:	d105      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008134:	4b3d      	ldr	r3, [pc, #244]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	4a3c      	ldr	r2, [pc, #240]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800813a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800813e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d015      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800814c:	4b37      	ldr	r3, [pc, #220]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800814e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008152:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	4934      	ldr	r1, [pc, #208]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800815c:	4313      	orrs	r3, r2
 800815e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008166:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800816a:	d105      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800816c:	4b2f      	ldr	r3, [pc, #188]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	4a2e      	ldr	r2, [pc, #184]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008176:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d015      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008184:	4b29      	ldr	r3, [pc, #164]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008192:	4926      	ldr	r1, [pc, #152]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008194:	4313      	orrs	r3, r2
 8008196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081a2:	d105      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081a4:	4b21      	ldr	r3, [pc, #132]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	4a20      	ldr	r2, [pc, #128]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d015      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081bc:	4b1b      	ldr	r3, [pc, #108]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ca:	4918      	ldr	r1, [pc, #96]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081da:	d105      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081dc:	4b13      	ldr	r3, [pc, #76]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	4a12      	ldr	r2, [pc, #72]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d015      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80081f4:	4b0d      	ldr	r3, [pc, #52]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008202:	490a      	ldr	r1, [pc, #40]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008204:	4313      	orrs	r3, r2
 8008206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008212:	d105      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	4a04      	ldr	r2, [pc, #16]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800821a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800821e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008220:	7cbb      	ldrb	r3, [r7, #18]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	40021000 	.word	0x40021000

08008230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e09d      	b.n	800837e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	2b00      	cmp	r3, #0
 8008248:	d108      	bne.n	800825c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008252:	d009      	beq.n	8008268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	61da      	str	r2, [r3, #28]
 800825a:	e005      	b.n	8008268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fa ff1c 	bl	80030c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800829e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082a8:	d902      	bls.n	80082b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	e002      	b.n	80082b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80082be:	d007      	beq.n	80082d0 <HAL_SPI_Init+0xa0>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082c8:	d002      	beq.n	80082d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082e0:	431a      	orrs	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	431a      	orrs	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	ea42 0103 	orr.w	r1, r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	0c1b      	lsrs	r3, r3, #16
 800832c:	f003 0204 	and.w	r2, r3, #4
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800834c:	ea42 0103 	orr.w	r1, r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69da      	ldr	r2, [r3, #28]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800836c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e16c      	b.n	8008682 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083b6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80083be:	7dbb      	ldrb	r3, [r7, #22]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d00d      	beq.n	80083e0 <HAL_SPI_TransmitReceive_DMA+0x58>
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083ca:	d106      	bne.n	80083da <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <HAL_SPI_TransmitReceive_DMA+0x52>
 80083d4:	7dbb      	ldrb	r3, [r7, #22]
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d002      	beq.n	80083e0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80083da:	2302      	movs	r3, #2
 80083dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80083de:	e14b      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80083ec:	887b      	ldrh	r3, [r7, #2]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80083f6:	e13f      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b04      	cmp	r3, #4
 8008402:	d003      	beq.n	800840c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2205      	movs	r2, #5
 8008408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	887a      	ldrh	r2, [r7, #2]
 800841c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	887a      	ldrh	r2, [r7, #2]
 8008422:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	887a      	ldrh	r2, [r7, #2]
 800842e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	887a      	ldrh	r2, [r7, #2]
 8008436:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008454:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800845e:	d908      	bls.n	8008472 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800846e:	605a      	str	r2, [r3, #4]
 8008470:	e06f      	b.n	8008552 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008480:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848c:	d126      	bne.n	80084dc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10f      	bne.n	80084ba <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084a8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	085b      	lsrs	r3, r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084b8:	e010      	b.n	80084dc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084c8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	085b      	lsrs	r3, r3, #1
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	3301      	adds	r3, #1
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084e6:	d134      	bne.n	8008552 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084f6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d111      	bne.n	800852c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008516:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800851e:	b29b      	uxth	r3, r3
 8008520:	085b      	lsrs	r3, r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800852a:	e012      	b.n	8008552 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800853a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008542:	b29b      	uxth	r3, r3
 8008544:	085b      	lsrs	r3, r3, #1
 8008546:	b29b      	uxth	r3, r3
 8008548:	3301      	adds	r3, #1
 800854a:	b29a      	uxth	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b04      	cmp	r3, #4
 800855c:	d108      	bne.n	8008570 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008562:	4a4a      	ldr	r2, [pc, #296]	; (800868c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008564:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856a:	4a49      	ldr	r2, [pc, #292]	; (8008690 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800856c:	62da      	str	r2, [r3, #44]	; 0x2c
 800856e:	e007      	b.n	8008580 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008574:	4a47      	ldr	r2, [pc, #284]	; (8008694 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008576:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857c:	4a46      	ldr	r2, [pc, #280]	; (8008698 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800857e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008584:	4a45      	ldr	r2, [pc, #276]	; (800869c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8008586:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858c:	2200      	movs	r2, #0
 800858e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	330c      	adds	r3, #12
 800859a:	4619      	mov	r1, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085a8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80085aa:	f7fd fb43 	bl	8005c34 <HAL_DMA_Start_IT>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00c      	beq.n	80085ce <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b8:	f043 0210 	orr.w	r2, r3, #16
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80085cc:	e054      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0201 	orr.w	r2, r2, #1
 80085dc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	2200      	movs	r2, #0
 80085e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ea:	2200      	movs	r2, #0
 80085ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f2:	2200      	movs	r2, #0
 80085f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fa:	2200      	movs	r2, #0
 80085fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008606:	4619      	mov	r1, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	330c      	adds	r3, #12
 800860e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008614:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008616:	f7fd fb0d 	bl	8005c34 <HAL_DMA_Start_IT>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00c      	beq.n	800863a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008624:	f043 0210 	orr.w	r2, r3, #16
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008638:	e01e      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008644:	2b40      	cmp	r3, #64	; 0x40
 8008646:	d007      	beq.n	8008658 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008656:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0220 	orr.w	r2, r2, #32
 8008666:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0202 	orr.w	r2, r2, #2
 8008676:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	08008a11 	.word	0x08008a11
 8008690:	080088d9 	.word	0x080088d9
 8008694:	08008a2d 	.word	0x08008a2d
 8008698:	08008981 	.word	0x08008981
 800869c:	08008a49 	.word	0x08008a49

080086a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10e      	bne.n	80086e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d009      	beq.n	80086e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d004      	beq.n	80086e0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4798      	blx	r3
    return;
 80086de:	e0ce      	b.n	800887e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <HAL_SPI_IRQHandler+0x5e>
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4798      	blx	r3
    return;
 80086fc:	e0bf      	b.n	800887e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	f003 0320 	and.w	r3, r3, #32
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <HAL_SPI_IRQHandler+0x7e>
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d105      	bne.n	800871e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 80b0 	beq.w	800887e <HAL_SPI_IRQHandler+0x1de>
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 80aa 	beq.w	800887e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008730:	2b00      	cmp	r3, #0
 8008732:	d023      	beq.n	800877c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b03      	cmp	r3, #3
 800873e:	d011      	beq.n	8008764 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008744:	f043 0204 	orr.w	r2, r3, #4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	e00b      	b.n	800877c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008764:	2300      	movs	r3, #0
 8008766:	613b      	str	r3, [r7, #16]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	613b      	str	r3, [r7, #16]
 8008778:	693b      	ldr	r3, [r7, #16]
        return;
 800877a:	e080      	b.n	800887e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d014      	beq.n	80087b0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800878a:	f043 0201 	orr.w	r2, r3, #1
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00c      	beq.n	80087d4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087be:	f043 0208 	orr.w	r2, r3, #8
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80087c6:	2300      	movs	r3, #0
 80087c8:	60bb      	str	r3, [r7, #8]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	60bb      	str	r3, [r7, #8]
 80087d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d04f      	beq.n	800887c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d104      	bne.n	8008808 <HAL_SPI_IRQHandler+0x168>
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b00      	cmp	r3, #0
 8008806:	d034      	beq.n	8008872 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0203 	bic.w	r2, r2, #3
 8008816:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881c:	2b00      	cmp	r3, #0
 800881e:	d011      	beq.n	8008844 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008824:	4a17      	ldr	r2, [pc, #92]	; (8008884 <HAL_SPI_IRQHandler+0x1e4>)
 8008826:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882c:	4618      	mov	r0, r3
 800882e:	f7fd fad5 	bl	8005ddc <HAL_DMA_Abort_IT>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008848:	2b00      	cmp	r3, #0
 800884a:	d016      	beq.n	800887a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008850:	4a0c      	ldr	r2, [pc, #48]	; (8008884 <HAL_SPI_IRQHandler+0x1e4>)
 8008852:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008858:	4618      	mov	r0, r3
 800885a:	f7fd fabf 	bl	8005ddc <HAL_DMA_Abort_IT>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008868:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008870:	e003      	b.n	800887a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f826 	bl	80088c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008878:	e000      	b.n	800887c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800887a:	bf00      	nop
    return;
 800887c:	bf00      	nop
  }
}
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	08008a89 	.word	0x08008a89

08008888 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088e6:	f7fb f963 	bl	8003bb0 <HAL_GetTick>
 80088ea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0320 	and.w	r3, r3, #32
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d03c      	beq.n	8008974 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0220 	bic.w	r2, r2, #32
 8008908:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10d      	bne.n	800892e <SPI_DMAReceiveCplt+0x56>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800891a:	d108      	bne.n	800892e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0203 	bic.w	r2, r2, #3
 800892a:	605a      	str	r2, [r3, #4]
 800892c:	e007      	b.n	800893e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0201 	bic.w	r2, r2, #1
 800893c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	2164      	movs	r1, #100	; 0x64
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 f9d4 	bl	8008cf0 <SPI_EndRxTransaction>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2220      	movs	r2, #32
 8008952:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff ffa9 	bl	80088c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008972:	e002      	b.n	800897a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f7ff ff87 	bl	8008888 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800898e:	f7fb f90f 	bl	8003bb0 <HAL_GetTick>
 8008992:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b20      	cmp	r3, #32
 80089a0:	d030      	beq.n	8008a04 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f022 0220 	bic.w	r2, r2, #32
 80089b0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	2164      	movs	r1, #100	; 0x64
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 f9f2 	bl	8008da0 <SPI_EndRxTxTransaction>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c6:	f043 0220 	orr.w	r2, r3, #32
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0203 	bic.w	r2, r2, #3
 80089dc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d003      	beq.n	8008a04 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff ff61 	bl	80088c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008a02:	e002      	b.n	8008a0a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7f8 fdd9 	bl	80015bc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff ff3c 	bl	800889c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a24:	bf00      	nop
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a38:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff ff38 	bl	80088b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a54:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0203 	bic.w	r2, r2, #3
 8008a64:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a6a:	f043 0210 	orr.w	r2, r3, #16
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f7ff ff22 	bl	80088c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a80:	bf00      	nop
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f7ff ff0d 	bl	80088c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	603b      	str	r3, [r7, #0]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ac4:	f7fb f874 	bl	8003bb0 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	1a9b      	subs	r3, r3, r2
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ad4:	f7fb f86c 	bl	8003bb0 <HAL_GetTick>
 8008ad8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ada:	4b39      	ldr	r3, [pc, #228]	; (8008bc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	015b      	lsls	r3, r3, #5
 8008ae0:	0d1b      	lsrs	r3, r3, #20
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	fb02 f303 	mul.w	r3, r2, r3
 8008ae8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008aea:	e054      	b.n	8008b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d050      	beq.n	8008b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008af4:	f7fb f85c 	bl	8003bb0 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d902      	bls.n	8008b0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d13d      	bne.n	8008b86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b22:	d111      	bne.n	8008b48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b2c:	d004      	beq.n	8008b38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b36:	d107      	bne.n	8008b48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b50:	d10f      	bne.n	8008b72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e017      	b.n	8008bb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	bf0c      	ite	eq
 8008ba6:	2301      	moveq	r3, #1
 8008ba8:	2300      	movne	r3, #0
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d19b      	bne.n	8008aec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	200000d8 	.word	0x200000d8

08008bc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08a      	sub	sp, #40	; 0x28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008bd6:	f7fa ffeb 	bl	8003bb0 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	1a9b      	subs	r3, r3, r2
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	4413      	add	r3, r2
 8008be4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008be6:	f7fa ffe3 	bl	8003bb0 <HAL_GetTick>
 8008bea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	330c      	adds	r3, #12
 8008bf2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008bf4:	4b3d      	ldr	r3, [pc, #244]	; (8008cec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	00da      	lsls	r2, r3, #3
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	0d1b      	lsrs	r3, r3, #20
 8008c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c06:	fb02 f303 	mul.w	r3, r2, r3
 8008c0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008c0c:	e060      	b.n	8008cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c14:	d107      	bne.n	8008c26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d050      	beq.n	8008cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c2e:	f7fa ffbf 	bl	8003bb0 <HAL_GetTick>
 8008c32:	4602      	mov	r2, r0
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d902      	bls.n	8008c44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d13d      	bne.n	8008cc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c5c:	d111      	bne.n	8008c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c66:	d004      	beq.n	8008c72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c70:	d107      	bne.n	8008c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c8a:	d10f      	bne.n	8008cac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008caa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e010      	b.n	8008ce2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d196      	bne.n	8008c0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3728      	adds	r7, #40	; 0x28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	200000d8 	.word	0x200000d8

08008cf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af02      	add	r7, sp, #8
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d04:	d111      	bne.n	8008d2a <SPI_EndRxTransaction+0x3a>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d0e:	d004      	beq.n	8008d1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d18:	d107      	bne.n	8008d2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d28:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2200      	movs	r2, #0
 8008d32:	2180      	movs	r1, #128	; 0x80
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f7ff febd 	bl	8008ab4 <SPI_WaitFlagStateUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d007      	beq.n	8008d50 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d44:	f043 0220 	orr.w	r2, r3, #32
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e023      	b.n	8008d98 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d58:	d11d      	bne.n	8008d96 <SPI_EndRxTransaction+0xa6>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d62:	d004      	beq.n	8008d6e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d6c:	d113      	bne.n	8008d96 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f7ff ff22 	bl	8008bc4 <SPI_WaitFifoStateUntilTimeout>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d007      	beq.n	8008d96 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d8a:	f043 0220 	orr.w	r2, r3, #32
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e000      	b.n	8008d98 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f7ff ff03 	bl	8008bc4 <SPI_WaitFifoStateUntilTimeout>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d007      	beq.n	8008dd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc8:	f043 0220 	orr.w	r2, r3, #32
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e027      	b.n	8008e24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2180      	movs	r1, #128	; 0x80
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f7ff fe68 	bl	8008ab4 <SPI_WaitFlagStateUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d007      	beq.n	8008dfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dee:	f043 0220 	orr.w	r2, r3, #32
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e014      	b.n	8008e24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7ff fedc 	bl	8008bc4 <SPI_WaitFifoStateUntilTimeout>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e16:	f043 0220 	orr.w	r2, r3, #32
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e000      	b.n	8008e24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e049      	b.n	8008ed2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d106      	bne.n	8008e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7fa fca2 	bl	800379c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3304      	adds	r3, #4
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	f000 fe74 	bl	8009b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6a1a      	ldr	r2, [r3, #32]
 8008ee8:	f241 1311 	movw	r3, #4369	; 0x1111
 8008eec:	4013      	ands	r3, r2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10f      	bne.n	8008f12 <HAL_TIM_Base_Stop+0x38>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6a1a      	ldr	r2, [r3, #32]
 8008ef8:	f244 4344 	movw	r3, #17476	; 0x4444
 8008efc:	4013      	ands	r3, r2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d107      	bne.n	8008f12 <HAL_TIM_Base_Stop+0x38>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0201 	bic.w	r2, r2, #1
 8008f10:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d001      	beq.n	8008f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e04a      	b.n	8008fd6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0201 	orr.w	r2, r2, #1
 8008f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a21      	ldr	r2, [pc, #132]	; (8008fe4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d018      	beq.n	8008f94 <HAL_TIM_Base_Start_IT+0x6c>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f6a:	d013      	beq.n	8008f94 <HAL_TIM_Base_Start_IT+0x6c>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1d      	ldr	r2, [pc, #116]	; (8008fe8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d00e      	beq.n	8008f94 <HAL_TIM_Base_Start_IT+0x6c>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a1c      	ldr	r2, [pc, #112]	; (8008fec <HAL_TIM_Base_Start_IT+0xc4>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d009      	beq.n	8008f94 <HAL_TIM_Base_Start_IT+0x6c>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a1a      	ldr	r2, [pc, #104]	; (8008ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d004      	beq.n	8008f94 <HAL_TIM_Base_Start_IT+0x6c>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a19      	ldr	r2, [pc, #100]	; (8008ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d115      	bne.n	8008fc0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	689a      	ldr	r2, [r3, #8]
 8008f9a:	4b17      	ldr	r3, [pc, #92]	; (8008ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b06      	cmp	r3, #6
 8008fa4:	d015      	beq.n	8008fd2 <HAL_TIM_Base_Start_IT+0xaa>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fac:	d011      	beq.n	8008fd2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f042 0201 	orr.w	r2, r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fbe:	e008      	b.n	8008fd2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0201 	orr.w	r2, r2, #1
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	e000      	b.n	8008fd4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	40012c00 	.word	0x40012c00
 8008fe8:	40000400 	.word	0x40000400
 8008fec:	40000800 	.word	0x40000800
 8008ff0:	40013400 	.word	0x40013400
 8008ff4:	40014000 	.word	0x40014000
 8008ff8:	00010007 	.word	0x00010007

08008ffc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e049      	b.n	80090a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f841 	bl	80090aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f000 fd8c 	bl	8009b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80090b2:	bf00      	nop
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
	...

080090c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d109      	bne.n	80090e4 <HAL_TIM_PWM_Start+0x24>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b01      	cmp	r3, #1
 80090da:	bf14      	ite	ne
 80090dc:	2301      	movne	r3, #1
 80090de:	2300      	moveq	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	e03c      	b.n	800915e <HAL_TIM_PWM_Start+0x9e>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d109      	bne.n	80090fe <HAL_TIM_PWM_Start+0x3e>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	bf14      	ite	ne
 80090f6:	2301      	movne	r3, #1
 80090f8:	2300      	moveq	r3, #0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	e02f      	b.n	800915e <HAL_TIM_PWM_Start+0x9e>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b08      	cmp	r3, #8
 8009102:	d109      	bne.n	8009118 <HAL_TIM_PWM_Start+0x58>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b01      	cmp	r3, #1
 800910e:	bf14      	ite	ne
 8009110:	2301      	movne	r3, #1
 8009112:	2300      	moveq	r3, #0
 8009114:	b2db      	uxtb	r3, r3
 8009116:	e022      	b.n	800915e <HAL_TIM_PWM_Start+0x9e>
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2b0c      	cmp	r3, #12
 800911c:	d109      	bne.n	8009132 <HAL_TIM_PWM_Start+0x72>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b01      	cmp	r3, #1
 8009128:	bf14      	ite	ne
 800912a:	2301      	movne	r3, #1
 800912c:	2300      	moveq	r3, #0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	e015      	b.n	800915e <HAL_TIM_PWM_Start+0x9e>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b10      	cmp	r3, #16
 8009136:	d109      	bne.n	800914c <HAL_TIM_PWM_Start+0x8c>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b01      	cmp	r3, #1
 8009142:	bf14      	ite	ne
 8009144:	2301      	movne	r3, #1
 8009146:	2300      	moveq	r3, #0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	e008      	b.n	800915e <HAL_TIM_PWM_Start+0x9e>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b01      	cmp	r3, #1
 8009156:	bf14      	ite	ne
 8009158:	2301      	movne	r3, #1
 800915a:	2300      	moveq	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e097      	b.n	8009296 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d104      	bne.n	8009176 <HAL_TIM_PWM_Start+0xb6>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2202      	movs	r2, #2
 8009170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009174:	e023      	b.n	80091be <HAL_TIM_PWM_Start+0xfe>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b04      	cmp	r3, #4
 800917a:	d104      	bne.n	8009186 <HAL_TIM_PWM_Start+0xc6>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009184:	e01b      	b.n	80091be <HAL_TIM_PWM_Start+0xfe>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b08      	cmp	r3, #8
 800918a:	d104      	bne.n	8009196 <HAL_TIM_PWM_Start+0xd6>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009194:	e013      	b.n	80091be <HAL_TIM_PWM_Start+0xfe>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b0c      	cmp	r3, #12
 800919a:	d104      	bne.n	80091a6 <HAL_TIM_PWM_Start+0xe6>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091a4:	e00b      	b.n	80091be <HAL_TIM_PWM_Start+0xfe>
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	d104      	bne.n	80091b6 <HAL_TIM_PWM_Start+0xf6>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091b4:	e003      	b.n	80091be <HAL_TIM_PWM_Start+0xfe>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2202      	movs	r2, #2
 80091ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2201      	movs	r2, #1
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f001 f8e8 	bl	800a39c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a33      	ldr	r2, [pc, #204]	; (80092a0 <HAL_TIM_PWM_Start+0x1e0>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d013      	beq.n	80091fe <HAL_TIM_PWM_Start+0x13e>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a32      	ldr	r2, [pc, #200]	; (80092a4 <HAL_TIM_PWM_Start+0x1e4>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d00e      	beq.n	80091fe <HAL_TIM_PWM_Start+0x13e>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a30      	ldr	r2, [pc, #192]	; (80092a8 <HAL_TIM_PWM_Start+0x1e8>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d009      	beq.n	80091fe <HAL_TIM_PWM_Start+0x13e>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a2f      	ldr	r2, [pc, #188]	; (80092ac <HAL_TIM_PWM_Start+0x1ec>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d004      	beq.n	80091fe <HAL_TIM_PWM_Start+0x13e>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a2d      	ldr	r2, [pc, #180]	; (80092b0 <HAL_TIM_PWM_Start+0x1f0>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d101      	bne.n	8009202 <HAL_TIM_PWM_Start+0x142>
 80091fe:	2301      	movs	r3, #1
 8009200:	e000      	b.n	8009204 <HAL_TIM_PWM_Start+0x144>
 8009202:	2300      	movs	r3, #0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d007      	beq.n	8009218 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009216:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a20      	ldr	r2, [pc, #128]	; (80092a0 <HAL_TIM_PWM_Start+0x1e0>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d018      	beq.n	8009254 <HAL_TIM_PWM_Start+0x194>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922a:	d013      	beq.n	8009254 <HAL_TIM_PWM_Start+0x194>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a20      	ldr	r2, [pc, #128]	; (80092b4 <HAL_TIM_PWM_Start+0x1f4>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d00e      	beq.n	8009254 <HAL_TIM_PWM_Start+0x194>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a1f      	ldr	r2, [pc, #124]	; (80092b8 <HAL_TIM_PWM_Start+0x1f8>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d009      	beq.n	8009254 <HAL_TIM_PWM_Start+0x194>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a17      	ldr	r2, [pc, #92]	; (80092a4 <HAL_TIM_PWM_Start+0x1e4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d004      	beq.n	8009254 <HAL_TIM_PWM_Start+0x194>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a16      	ldr	r2, [pc, #88]	; (80092a8 <HAL_TIM_PWM_Start+0x1e8>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d115      	bne.n	8009280 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	689a      	ldr	r2, [r3, #8]
 800925a:	4b18      	ldr	r3, [pc, #96]	; (80092bc <HAL_TIM_PWM_Start+0x1fc>)
 800925c:	4013      	ands	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b06      	cmp	r3, #6
 8009264:	d015      	beq.n	8009292 <HAL_TIM_PWM_Start+0x1d2>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800926c:	d011      	beq.n	8009292 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f042 0201 	orr.w	r2, r2, #1
 800927c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800927e:	e008      	b.n	8009292 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0201 	orr.w	r2, r2, #1
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	e000      	b.n	8009294 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	40012c00 	.word	0x40012c00
 80092a4:	40013400 	.word	0x40013400
 80092a8:	40014000 	.word	0x40014000
 80092ac:	40014400 	.word	0x40014400
 80092b0:	40014800 	.word	0x40014800
 80092b4:	40000400 	.word	0x40000400
 80092b8:	40000800 	.word	0x40000800
 80092bc:	00010007 	.word	0x00010007

080092c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 f862 	bl	800a39c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a3e      	ldr	r2, [pc, #248]	; (80093d8 <HAL_TIM_PWM_Stop+0x118>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d013      	beq.n	800930a <HAL_TIM_PWM_Stop+0x4a>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a3d      	ldr	r2, [pc, #244]	; (80093dc <HAL_TIM_PWM_Stop+0x11c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d00e      	beq.n	800930a <HAL_TIM_PWM_Stop+0x4a>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a3b      	ldr	r2, [pc, #236]	; (80093e0 <HAL_TIM_PWM_Stop+0x120>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d009      	beq.n	800930a <HAL_TIM_PWM_Stop+0x4a>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a3a      	ldr	r2, [pc, #232]	; (80093e4 <HAL_TIM_PWM_Stop+0x124>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d004      	beq.n	800930a <HAL_TIM_PWM_Stop+0x4a>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a38      	ldr	r2, [pc, #224]	; (80093e8 <HAL_TIM_PWM_Stop+0x128>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d101      	bne.n	800930e <HAL_TIM_PWM_Stop+0x4e>
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <HAL_TIM_PWM_Stop+0x50>
 800930e:	2300      	movs	r3, #0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d017      	beq.n	8009344 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6a1a      	ldr	r2, [r3, #32]
 800931a:	f241 1311 	movw	r3, #4369	; 0x1111
 800931e:	4013      	ands	r3, r2
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10f      	bne.n	8009344 <HAL_TIM_PWM_Stop+0x84>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6a1a      	ldr	r2, [r3, #32]
 800932a:	f244 4344 	movw	r3, #17476	; 0x4444
 800932e:	4013      	ands	r3, r2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d107      	bne.n	8009344 <HAL_TIM_PWM_Stop+0x84>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009342:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6a1a      	ldr	r2, [r3, #32]
 800934a:	f241 1311 	movw	r3, #4369	; 0x1111
 800934e:	4013      	ands	r3, r2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10f      	bne.n	8009374 <HAL_TIM_PWM_Stop+0xb4>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6a1a      	ldr	r2, [r3, #32]
 800935a:	f244 4344 	movw	r3, #17476	; 0x4444
 800935e:	4013      	ands	r3, r2
 8009360:	2b00      	cmp	r3, #0
 8009362:	d107      	bne.n	8009374 <HAL_TIM_PWM_Stop+0xb4>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0201 	bic.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d104      	bne.n	8009384 <HAL_TIM_PWM_Stop+0xc4>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009382:	e023      	b.n	80093cc <HAL_TIM_PWM_Stop+0x10c>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b04      	cmp	r3, #4
 8009388:	d104      	bne.n	8009394 <HAL_TIM_PWM_Stop+0xd4>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009392:	e01b      	b.n	80093cc <HAL_TIM_PWM_Stop+0x10c>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b08      	cmp	r3, #8
 8009398:	d104      	bne.n	80093a4 <HAL_TIM_PWM_Stop+0xe4>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093a2:	e013      	b.n	80093cc <HAL_TIM_PWM_Stop+0x10c>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b0c      	cmp	r3, #12
 80093a8:	d104      	bne.n	80093b4 <HAL_TIM_PWM_Stop+0xf4>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093b2:	e00b      	b.n	80093cc <HAL_TIM_PWM_Stop+0x10c>
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b10      	cmp	r3, #16
 80093b8:	d104      	bne.n	80093c4 <HAL_TIM_PWM_Stop+0x104>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093c2:	e003      	b.n	80093cc <HAL_TIM_PWM_Stop+0x10c>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	40012c00 	.word	0x40012c00
 80093dc:	40013400 	.word	0x40013400
 80093e0:	40014000 	.word	0x40014000
 80093e4:	40014400 	.word	0x40014400
 80093e8:	40014800 	.word	0x40014800

080093ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d122      	bne.n	8009448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b02      	cmp	r3, #2
 800940e:	d11b      	bne.n	8009448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f06f 0202 	mvn.w	r2, #2
 8009418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d003      	beq.n	8009436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fb74 	bl	8009b1c <HAL_TIM_IC_CaptureCallback>
 8009434:	e005      	b.n	8009442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fb66 	bl	8009b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fb77 	bl	8009b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f003 0304 	and.w	r3, r3, #4
 8009452:	2b04      	cmp	r3, #4
 8009454:	d122      	bne.n	800949c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b04      	cmp	r3, #4
 8009462:	d11b      	bne.n	800949c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f06f 0204 	mvn.w	r2, #4
 800946c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2202      	movs	r2, #2
 8009472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fb4a 	bl	8009b1c <HAL_TIM_IC_CaptureCallback>
 8009488:	e005      	b.n	8009496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fb3c 	bl	8009b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fb4d 	bl	8009b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b08      	cmp	r3, #8
 80094a8:	d122      	bne.n	80094f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f003 0308 	and.w	r3, r3, #8
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d11b      	bne.n	80094f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f06f 0208 	mvn.w	r2, #8
 80094c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2204      	movs	r2, #4
 80094c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fb20 	bl	8009b1c <HAL_TIM_IC_CaptureCallback>
 80094dc:	e005      	b.n	80094ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fb12 	bl	8009b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fb23 	bl	8009b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	f003 0310 	and.w	r3, r3, #16
 80094fa:	2b10      	cmp	r3, #16
 80094fc:	d122      	bne.n	8009544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f003 0310 	and.w	r3, r3, #16
 8009508:	2b10      	cmp	r3, #16
 800950a:	d11b      	bne.n	8009544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f06f 0210 	mvn.w	r2, #16
 8009514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2208      	movs	r2, #8
 800951a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 faf6 	bl	8009b1c <HAL_TIM_IC_CaptureCallback>
 8009530:	e005      	b.n	800953e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fae8 	bl	8009b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 faf9 	bl	8009b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b01      	cmp	r3, #1
 8009550:	d10e      	bne.n	8009570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	2b01      	cmp	r3, #1
 800955e:	d107      	bne.n	8009570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f06f 0201 	mvn.w	r2, #1
 8009568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7f8 f920 	bl	80017b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957a:	2b80      	cmp	r3, #128	; 0x80
 800957c:	d10e      	bne.n	800959c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009588:	2b80      	cmp	r3, #128	; 0x80
 800958a:	d107      	bne.n	800959c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 f964 	bl	800a864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095aa:	d10e      	bne.n	80095ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b6:	2b80      	cmp	r3, #128	; 0x80
 80095b8:	d107      	bne.n	80095ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 f957 	bl	800a878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d4:	2b40      	cmp	r3, #64	; 0x40
 80095d6:	d10e      	bne.n	80095f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d107      	bne.n	80095f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 faa7 	bl	8009b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b20      	cmp	r3, #32
 8009602:	d10e      	bne.n	8009622 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f003 0320 	and.w	r3, r3, #32
 800960e:	2b20      	cmp	r3, #32
 8009610:	d107      	bne.n	8009622 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f06f 0220 	mvn.w	r2, #32
 800961a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 f917 	bl	800a850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800962c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009630:	d10f      	bne.n	8009652 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800963c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009640:	d107      	bne.n	8009652 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800964a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 f91d 	bl	800a88c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800965c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009660:	d10f      	bne.n	8009682 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800966c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009670:	d107      	bne.n	8009682 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800967a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 f90f 	bl	800a8a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800968c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009690:	d10f      	bne.n	80096b2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800969c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096a0:	d107      	bne.n	80096b2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80096aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 f901 	bl	800a8b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096c0:	d10f      	bne.n	80096e2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096d0:	d107      	bne.n	80096e2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80096da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 f8f3 	bl	800a8c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009702:	2b01      	cmp	r3, #1
 8009704:	d101      	bne.n	800970a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009706:	2302      	movs	r3, #2
 8009708:	e0ff      	b.n	800990a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b14      	cmp	r3, #20
 8009716:	f200 80f0 	bhi.w	80098fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800971a:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009720:	08009775 	.word	0x08009775
 8009724:	080098fb 	.word	0x080098fb
 8009728:	080098fb 	.word	0x080098fb
 800972c:	080098fb 	.word	0x080098fb
 8009730:	080097b5 	.word	0x080097b5
 8009734:	080098fb 	.word	0x080098fb
 8009738:	080098fb 	.word	0x080098fb
 800973c:	080098fb 	.word	0x080098fb
 8009740:	080097f7 	.word	0x080097f7
 8009744:	080098fb 	.word	0x080098fb
 8009748:	080098fb 	.word	0x080098fb
 800974c:	080098fb 	.word	0x080098fb
 8009750:	08009837 	.word	0x08009837
 8009754:	080098fb 	.word	0x080098fb
 8009758:	080098fb 	.word	0x080098fb
 800975c:	080098fb 	.word	0x080098fb
 8009760:	08009879 	.word	0x08009879
 8009764:	080098fb 	.word	0x080098fb
 8009768:	080098fb 	.word	0x080098fb
 800976c:	080098fb 	.word	0x080098fb
 8009770:	080098b9 	.word	0x080098b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68b9      	ldr	r1, [r7, #8]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fa7c 	bl	8009c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699a      	ldr	r2, [r3, #24]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 0208 	orr.w	r2, r2, #8
 800978e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699a      	ldr	r2, [r3, #24]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 0204 	bic.w	r2, r2, #4
 800979e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6999      	ldr	r1, [r3, #24]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	691a      	ldr	r2, [r3, #16]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	619a      	str	r2, [r3, #24]
      break;
 80097b2:	e0a5      	b.n	8009900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68b9      	ldr	r1, [r7, #8]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 faec 	bl	8009d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699a      	ldr	r2, [r3, #24]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6999      	ldr	r1, [r3, #24]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	021a      	lsls	r2, r3, #8
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	619a      	str	r2, [r3, #24]
      break;
 80097f4:	e084      	b.n	8009900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68b9      	ldr	r1, [r7, #8]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fb55 	bl	8009eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69da      	ldr	r2, [r3, #28]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f042 0208 	orr.w	r2, r2, #8
 8009810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69da      	ldr	r2, [r3, #28]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 0204 	bic.w	r2, r2, #4
 8009820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	69d9      	ldr	r1, [r3, #28]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	691a      	ldr	r2, [r3, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	61da      	str	r2, [r3, #28]
      break;
 8009834:	e064      	b.n	8009900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fbbd 	bl	8009fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69da      	ldr	r2, [r3, #28]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69da      	ldr	r2, [r3, #28]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69d9      	ldr	r1, [r3, #28]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	021a      	lsls	r2, r3, #8
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	61da      	str	r2, [r3, #28]
      break;
 8009876:	e043      	b.n	8009900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 fc26 	bl	800a0d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 0208 	orr.w	r2, r2, #8
 8009892:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0204 	bic.w	r2, r2, #4
 80098a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80098b6:	e023      	b.n	8009900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fc6a 	bl	800a198 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	021a      	lsls	r2, r3, #8
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80098f8:	e002      	b.n	8009900 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
      break;
 80098fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3718      	adds	r7, #24
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop

08009914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009928:	2b01      	cmp	r3, #1
 800992a:	d101      	bne.n	8009930 <HAL_TIM_ConfigClockSource+0x1c>
 800992c:	2302      	movs	r3, #2
 800992e:	e0de      	b.n	8009aee <HAL_TIM_ConfigClockSource+0x1da>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800994e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800995a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a63      	ldr	r2, [pc, #396]	; (8009af8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800996a:	4293      	cmp	r3, r2
 800996c:	f000 80a9 	beq.w	8009ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009970:	4a61      	ldr	r2, [pc, #388]	; (8009af8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009972:	4293      	cmp	r3, r2
 8009974:	f200 80ae 	bhi.w	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009978:	4a60      	ldr	r2, [pc, #384]	; (8009afc <HAL_TIM_ConfigClockSource+0x1e8>)
 800997a:	4293      	cmp	r3, r2
 800997c:	f000 80a1 	beq.w	8009ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009980:	4a5e      	ldr	r2, [pc, #376]	; (8009afc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	f200 80a6 	bhi.w	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009988:	4a5d      	ldr	r2, [pc, #372]	; (8009b00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800998a:	4293      	cmp	r3, r2
 800998c:	f000 8099 	beq.w	8009ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009990:	4a5b      	ldr	r2, [pc, #364]	; (8009b00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009992:	4293      	cmp	r3, r2
 8009994:	f200 809e 	bhi.w	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009998:	4a5a      	ldr	r2, [pc, #360]	; (8009b04 <HAL_TIM_ConfigClockSource+0x1f0>)
 800999a:	4293      	cmp	r3, r2
 800999c:	f000 8091 	beq.w	8009ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 80099a0:	4a58      	ldr	r2, [pc, #352]	; (8009b04 <HAL_TIM_ConfigClockSource+0x1f0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	f200 8096 	bhi.w	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80099a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80099ac:	f000 8089 	beq.w	8009ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 80099b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80099b4:	f200 808e 	bhi.w	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80099b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099bc:	d03e      	beq.n	8009a3c <HAL_TIM_ConfigClockSource+0x128>
 80099be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c2:	f200 8087 	bhi.w	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80099c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ca:	f000 8086 	beq.w	8009ada <HAL_TIM_ConfigClockSource+0x1c6>
 80099ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d2:	d87f      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80099d4:	2b70      	cmp	r3, #112	; 0x70
 80099d6:	d01a      	beq.n	8009a0e <HAL_TIM_ConfigClockSource+0xfa>
 80099d8:	2b70      	cmp	r3, #112	; 0x70
 80099da:	d87b      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80099dc:	2b60      	cmp	r3, #96	; 0x60
 80099de:	d050      	beq.n	8009a82 <HAL_TIM_ConfigClockSource+0x16e>
 80099e0:	2b60      	cmp	r3, #96	; 0x60
 80099e2:	d877      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80099e4:	2b50      	cmp	r3, #80	; 0x50
 80099e6:	d03c      	beq.n	8009a62 <HAL_TIM_ConfigClockSource+0x14e>
 80099e8:	2b50      	cmp	r3, #80	; 0x50
 80099ea:	d873      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80099ec:	2b40      	cmp	r3, #64	; 0x40
 80099ee:	d058      	beq.n	8009aa2 <HAL_TIM_ConfigClockSource+0x18e>
 80099f0:	2b40      	cmp	r3, #64	; 0x40
 80099f2:	d86f      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80099f4:	2b30      	cmp	r3, #48	; 0x30
 80099f6:	d064      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 80099f8:	2b30      	cmp	r3, #48	; 0x30
 80099fa:	d86b      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	d060      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009a00:	2b20      	cmp	r3, #32
 8009a02:	d867      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d05c      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009a08:	2b10      	cmp	r3, #16
 8009a0a:	d05a      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009a0c:	e062      	b.n	8009ad4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	6899      	ldr	r1, [r3, #8]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f000 fc9d 	bl	800a35c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	609a      	str	r2, [r3, #8]
      break;
 8009a3a:	e04f      	b.n	8009adc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	6899      	ldr	r1, [r3, #8]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f000 fc86 	bl	800a35c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689a      	ldr	r2, [r3, #8]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a5e:	609a      	str	r2, [r3, #8]
      break;
 8009a60:	e03c      	b.n	8009adc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6859      	ldr	r1, [r3, #4]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f000 fbf8 	bl	800a264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2150      	movs	r1, #80	; 0x50
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fc51 	bl	800a322 <TIM_ITRx_SetConfig>
      break;
 8009a80:	e02c      	b.n	8009adc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	6859      	ldr	r1, [r3, #4]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f000 fc17 	bl	800a2c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2160      	movs	r1, #96	; 0x60
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fc41 	bl	800a322 <TIM_ITRx_SetConfig>
      break;
 8009aa0:	e01c      	b.n	8009adc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6859      	ldr	r1, [r3, #4]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f000 fbd8 	bl	800a264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2140      	movs	r1, #64	; 0x40
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fc31 	bl	800a322 <TIM_ITRx_SetConfig>
      break;
 8009ac0:	e00c      	b.n	8009adc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4619      	mov	r1, r3
 8009acc:	4610      	mov	r0, r2
 8009ace:	f000 fc28 	bl	800a322 <TIM_ITRx_SetConfig>
      break;
 8009ad2:	e003      	b.n	8009adc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ad8:	e000      	b.n	8009adc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	00100070 	.word	0x00100070
 8009afc:	00100040 	.word	0x00100040
 8009b00:	00100030 	.word	0x00100030
 8009b04:	00100020 	.word	0x00100020

08009b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a3c      	ldr	r2, [pc, #240]	; (8009c5c <TIM_Base_SetConfig+0x104>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d00f      	beq.n	8009b90 <TIM_Base_SetConfig+0x38>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b76:	d00b      	beq.n	8009b90 <TIM_Base_SetConfig+0x38>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a39      	ldr	r2, [pc, #228]	; (8009c60 <TIM_Base_SetConfig+0x108>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d007      	beq.n	8009b90 <TIM_Base_SetConfig+0x38>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a38      	ldr	r2, [pc, #224]	; (8009c64 <TIM_Base_SetConfig+0x10c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d003      	beq.n	8009b90 <TIM_Base_SetConfig+0x38>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a37      	ldr	r2, [pc, #220]	; (8009c68 <TIM_Base_SetConfig+0x110>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d108      	bne.n	8009ba2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a2d      	ldr	r2, [pc, #180]	; (8009c5c <TIM_Base_SetConfig+0x104>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d01b      	beq.n	8009be2 <TIM_Base_SetConfig+0x8a>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb0:	d017      	beq.n	8009be2 <TIM_Base_SetConfig+0x8a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a2a      	ldr	r2, [pc, #168]	; (8009c60 <TIM_Base_SetConfig+0x108>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d013      	beq.n	8009be2 <TIM_Base_SetConfig+0x8a>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a29      	ldr	r2, [pc, #164]	; (8009c64 <TIM_Base_SetConfig+0x10c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00f      	beq.n	8009be2 <TIM_Base_SetConfig+0x8a>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a28      	ldr	r2, [pc, #160]	; (8009c68 <TIM_Base_SetConfig+0x110>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d00b      	beq.n	8009be2 <TIM_Base_SetConfig+0x8a>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a27      	ldr	r2, [pc, #156]	; (8009c6c <TIM_Base_SetConfig+0x114>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d007      	beq.n	8009be2 <TIM_Base_SetConfig+0x8a>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a26      	ldr	r2, [pc, #152]	; (8009c70 <TIM_Base_SetConfig+0x118>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d003      	beq.n	8009be2 <TIM_Base_SetConfig+0x8a>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a25      	ldr	r2, [pc, #148]	; (8009c74 <TIM_Base_SetConfig+0x11c>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d108      	bne.n	8009bf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a10      	ldr	r2, [pc, #64]	; (8009c5c <TIM_Base_SetConfig+0x104>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d00f      	beq.n	8009c40 <TIM_Base_SetConfig+0xe8>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a11      	ldr	r2, [pc, #68]	; (8009c68 <TIM_Base_SetConfig+0x110>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d00b      	beq.n	8009c40 <TIM_Base_SetConfig+0xe8>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a10      	ldr	r2, [pc, #64]	; (8009c6c <TIM_Base_SetConfig+0x114>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d007      	beq.n	8009c40 <TIM_Base_SetConfig+0xe8>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a0f      	ldr	r2, [pc, #60]	; (8009c70 <TIM_Base_SetConfig+0x118>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d003      	beq.n	8009c40 <TIM_Base_SetConfig+0xe8>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a0e      	ldr	r2, [pc, #56]	; (8009c74 <TIM_Base_SetConfig+0x11c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d103      	bne.n	8009c48 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	691a      	ldr	r2, [r3, #16]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	615a      	str	r2, [r3, #20]
}
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	40012c00 	.word	0x40012c00
 8009c60:	40000400 	.word	0x40000400
 8009c64:	40000800 	.word	0x40000800
 8009c68:	40013400 	.word	0x40013400
 8009c6c:	40014000 	.word	0x40014000
 8009c70:	40014400 	.word	0x40014400
 8009c74:	40014800 	.word	0x40014800

08009c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	f023 0201 	bic.w	r2, r3, #1
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f023 0302 	bic.w	r3, r3, #2
 8009cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a2c      	ldr	r2, [pc, #176]	; (8009d84 <TIM_OC1_SetConfig+0x10c>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d00f      	beq.n	8009cf8 <TIM_OC1_SetConfig+0x80>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a2b      	ldr	r2, [pc, #172]	; (8009d88 <TIM_OC1_SetConfig+0x110>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d00b      	beq.n	8009cf8 <TIM_OC1_SetConfig+0x80>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a2a      	ldr	r2, [pc, #168]	; (8009d8c <TIM_OC1_SetConfig+0x114>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d007      	beq.n	8009cf8 <TIM_OC1_SetConfig+0x80>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a29      	ldr	r2, [pc, #164]	; (8009d90 <TIM_OC1_SetConfig+0x118>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d003      	beq.n	8009cf8 <TIM_OC1_SetConfig+0x80>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a28      	ldr	r2, [pc, #160]	; (8009d94 <TIM_OC1_SetConfig+0x11c>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d10c      	bne.n	8009d12 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f023 0308 	bic.w	r3, r3, #8
 8009cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f023 0304 	bic.w	r3, r3, #4
 8009d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a1b      	ldr	r2, [pc, #108]	; (8009d84 <TIM_OC1_SetConfig+0x10c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00f      	beq.n	8009d3a <TIM_OC1_SetConfig+0xc2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a1a      	ldr	r2, [pc, #104]	; (8009d88 <TIM_OC1_SetConfig+0x110>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00b      	beq.n	8009d3a <TIM_OC1_SetConfig+0xc2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a19      	ldr	r2, [pc, #100]	; (8009d8c <TIM_OC1_SetConfig+0x114>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d007      	beq.n	8009d3a <TIM_OC1_SetConfig+0xc2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a18      	ldr	r2, [pc, #96]	; (8009d90 <TIM_OC1_SetConfig+0x118>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d003      	beq.n	8009d3a <TIM_OC1_SetConfig+0xc2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a17      	ldr	r2, [pc, #92]	; (8009d94 <TIM_OC1_SetConfig+0x11c>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d111      	bne.n	8009d5e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	621a      	str	r2, [r3, #32]
}
 8009d78:	bf00      	nop
 8009d7a:	371c      	adds	r7, #28
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	40012c00 	.word	0x40012c00
 8009d88:	40013400 	.word	0x40013400
 8009d8c:	40014000 	.word	0x40014000
 8009d90:	40014400 	.word	0x40014400
 8009d94:	40014800 	.word	0x40014800

08009d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	f023 0210 	bic.w	r2, r3, #16
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	021b      	lsls	r3, r3, #8
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f023 0320 	bic.w	r3, r3, #32
 8009de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	011b      	lsls	r3, r3, #4
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a28      	ldr	r2, [pc, #160]	; (8009e98 <TIM_OC2_SetConfig+0x100>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d003      	beq.n	8009e04 <TIM_OC2_SetConfig+0x6c>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a27      	ldr	r2, [pc, #156]	; (8009e9c <TIM_OC2_SetConfig+0x104>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d10d      	bne.n	8009e20 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a1d      	ldr	r2, [pc, #116]	; (8009e98 <TIM_OC2_SetConfig+0x100>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00f      	beq.n	8009e48 <TIM_OC2_SetConfig+0xb0>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a1c      	ldr	r2, [pc, #112]	; (8009e9c <TIM_OC2_SetConfig+0x104>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00b      	beq.n	8009e48 <TIM_OC2_SetConfig+0xb0>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a1b      	ldr	r2, [pc, #108]	; (8009ea0 <TIM_OC2_SetConfig+0x108>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d007      	beq.n	8009e48 <TIM_OC2_SetConfig+0xb0>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a1a      	ldr	r2, [pc, #104]	; (8009ea4 <TIM_OC2_SetConfig+0x10c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d003      	beq.n	8009e48 <TIM_OC2_SetConfig+0xb0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a19      	ldr	r2, [pc, #100]	; (8009ea8 <TIM_OC2_SetConfig+0x110>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d113      	bne.n	8009e70 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	621a      	str	r2, [r3, #32]
}
 8009e8a:	bf00      	nop
 8009e8c:	371c      	adds	r7, #28
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	40012c00 	.word	0x40012c00
 8009e9c:	40013400 	.word	0x40013400
 8009ea0:	40014000 	.word	0x40014000
 8009ea4:	40014400 	.word	0x40014400
 8009ea8:	40014800 	.word	0x40014800

08009eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0303 	bic.w	r3, r3, #3
 8009ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	021b      	lsls	r3, r3, #8
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a27      	ldr	r2, [pc, #156]	; (8009fa8 <TIM_OC3_SetConfig+0xfc>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d003      	beq.n	8009f16 <TIM_OC3_SetConfig+0x6a>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a26      	ldr	r2, [pc, #152]	; (8009fac <TIM_OC3_SetConfig+0x100>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d10d      	bne.n	8009f32 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a1c      	ldr	r2, [pc, #112]	; (8009fa8 <TIM_OC3_SetConfig+0xfc>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d00f      	beq.n	8009f5a <TIM_OC3_SetConfig+0xae>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a1b      	ldr	r2, [pc, #108]	; (8009fac <TIM_OC3_SetConfig+0x100>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00b      	beq.n	8009f5a <TIM_OC3_SetConfig+0xae>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a1a      	ldr	r2, [pc, #104]	; (8009fb0 <TIM_OC3_SetConfig+0x104>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d007      	beq.n	8009f5a <TIM_OC3_SetConfig+0xae>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a19      	ldr	r2, [pc, #100]	; (8009fb4 <TIM_OC3_SetConfig+0x108>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d003      	beq.n	8009f5a <TIM_OC3_SetConfig+0xae>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a18      	ldr	r2, [pc, #96]	; (8009fb8 <TIM_OC3_SetConfig+0x10c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d113      	bne.n	8009f82 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	011b      	lsls	r3, r3, #4
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	621a      	str	r2, [r3, #32]
}
 8009f9c:	bf00      	nop
 8009f9e:	371c      	adds	r7, #28
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	40012c00 	.word	0x40012c00
 8009fac:	40013400 	.word	0x40013400
 8009fb0:	40014000 	.word	0x40014000
 8009fb4:	40014400 	.word	0x40014400
 8009fb8:	40014800 	.word	0x40014800

08009fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	021b      	lsls	r3, r3, #8
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	4313      	orrs	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a00a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	031b      	lsls	r3, r3, #12
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	4313      	orrs	r3, r2
 800a016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a28      	ldr	r2, [pc, #160]	; (800a0bc <TIM_OC4_SetConfig+0x100>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d003      	beq.n	800a028 <TIM_OC4_SetConfig+0x6c>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a27      	ldr	r2, [pc, #156]	; (800a0c0 <TIM_OC4_SetConfig+0x104>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d10d      	bne.n	800a044 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a02e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	031b      	lsls	r3, r3, #12
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	4313      	orrs	r3, r2
 800a03a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a042:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a1d      	ldr	r2, [pc, #116]	; (800a0bc <TIM_OC4_SetConfig+0x100>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d00f      	beq.n	800a06c <TIM_OC4_SetConfig+0xb0>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a1c      	ldr	r2, [pc, #112]	; (800a0c0 <TIM_OC4_SetConfig+0x104>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d00b      	beq.n	800a06c <TIM_OC4_SetConfig+0xb0>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a1b      	ldr	r2, [pc, #108]	; (800a0c4 <TIM_OC4_SetConfig+0x108>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d007      	beq.n	800a06c <TIM_OC4_SetConfig+0xb0>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a1a      	ldr	r2, [pc, #104]	; (800a0c8 <TIM_OC4_SetConfig+0x10c>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d003      	beq.n	800a06c <TIM_OC4_SetConfig+0xb0>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a19      	ldr	r2, [pc, #100]	; (800a0cc <TIM_OC4_SetConfig+0x110>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d113      	bne.n	800a094 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a072:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a07a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	019b      	lsls	r3, r3, #6
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	4313      	orrs	r3, r2
 800a086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	019b      	lsls	r3, r3, #6
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	4313      	orrs	r3, r2
 800a092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	621a      	str	r2, [r3, #32]
}
 800a0ae:	bf00      	nop
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	40012c00 	.word	0x40012c00
 800a0c0:	40013400 	.word	0x40013400
 800a0c4:	40014000 	.word	0x40014000
 800a0c8:	40014400 	.word	0x40014400
 800a0cc:	40014800 	.word	0x40014800

0800a0d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a114:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	041b      	lsls	r3, r3, #16
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	4313      	orrs	r3, r2
 800a120:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a17      	ldr	r2, [pc, #92]	; (800a184 <TIM_OC5_SetConfig+0xb4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d00f      	beq.n	800a14a <TIM_OC5_SetConfig+0x7a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a16      	ldr	r2, [pc, #88]	; (800a188 <TIM_OC5_SetConfig+0xb8>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d00b      	beq.n	800a14a <TIM_OC5_SetConfig+0x7a>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a15      	ldr	r2, [pc, #84]	; (800a18c <TIM_OC5_SetConfig+0xbc>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d007      	beq.n	800a14a <TIM_OC5_SetConfig+0x7a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a14      	ldr	r2, [pc, #80]	; (800a190 <TIM_OC5_SetConfig+0xc0>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d003      	beq.n	800a14a <TIM_OC5_SetConfig+0x7a>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a13      	ldr	r2, [pc, #76]	; (800a194 <TIM_OC5_SetConfig+0xc4>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d109      	bne.n	800a15e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a150:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	621a      	str	r2, [r3, #32]
}
 800a178:	bf00      	nop
 800a17a:	371c      	adds	r7, #28
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	40012c00 	.word	0x40012c00
 800a188:	40013400 	.word	0x40013400
 800a18c:	40014000 	.word	0x40014000
 800a190:	40014400 	.word	0x40014400
 800a194:	40014800 	.word	0x40014800

0800a198 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	021b      	lsls	r3, r3, #8
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	051b      	lsls	r3, r3, #20
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a18      	ldr	r2, [pc, #96]	; (800a250 <TIM_OC6_SetConfig+0xb8>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d00f      	beq.n	800a214 <TIM_OC6_SetConfig+0x7c>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a17      	ldr	r2, [pc, #92]	; (800a254 <TIM_OC6_SetConfig+0xbc>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00b      	beq.n	800a214 <TIM_OC6_SetConfig+0x7c>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a16      	ldr	r2, [pc, #88]	; (800a258 <TIM_OC6_SetConfig+0xc0>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d007      	beq.n	800a214 <TIM_OC6_SetConfig+0x7c>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a15      	ldr	r2, [pc, #84]	; (800a25c <TIM_OC6_SetConfig+0xc4>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d003      	beq.n	800a214 <TIM_OC6_SetConfig+0x7c>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a14      	ldr	r2, [pc, #80]	; (800a260 <TIM_OC6_SetConfig+0xc8>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d109      	bne.n	800a228 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a21a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	029b      	lsls	r3, r3, #10
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	4313      	orrs	r3, r2
 800a226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	621a      	str	r2, [r3, #32]
}
 800a242:	bf00      	nop
 800a244:	371c      	adds	r7, #28
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40012c00 	.word	0x40012c00
 800a254:	40013400 	.word	0x40013400
 800a258:	40014000 	.word	0x40014000
 800a25c:	40014400 	.word	0x40014400
 800a260:	40014800 	.word	0x40014800

0800a264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	f023 0201 	bic.w	r2, r3, #1
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a28e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	011b      	lsls	r3, r3, #4
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	4313      	orrs	r3, r2
 800a298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f023 030a 	bic.w	r3, r3, #10
 800a2a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	621a      	str	r2, [r3, #32]
}
 800a2b6:	bf00      	nop
 800a2b8:	371c      	adds	r7, #28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b087      	sub	sp, #28
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	60b9      	str	r1, [r7, #8]
 800a2cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	f023 0210 	bic.w	r2, r3, #16
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a1b      	ldr	r3, [r3, #32]
 800a2e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	031b      	lsls	r3, r3, #12
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	4313      	orrs	r3, r2
 800a308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	621a      	str	r2, [r3, #32]
}
 800a316:	bf00      	nop
 800a318:	371c      	adds	r7, #28
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a322:	b480      	push	{r7}
 800a324:	b085      	sub	sp, #20
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a33c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	f043 0307 	orr.w	r3, r3, #7
 800a348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	609a      	str	r2, [r3, #8]
}
 800a350:	bf00      	nop
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	021a      	lsls	r2, r3, #8
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	431a      	orrs	r2, r3
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	4313      	orrs	r3, r2
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	4313      	orrs	r3, r2
 800a388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	609a      	str	r2, [r3, #8]
}
 800a390:	bf00      	nop
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f003 031f 	and.w	r3, r3, #31
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6a1a      	ldr	r2, [r3, #32]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	43db      	mvns	r3, r3
 800a3be:	401a      	ands	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a1a      	ldr	r2, [r3, #32]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f003 031f 	and.w	r3, r3, #31
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	621a      	str	r2, [r3, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	371c      	adds	r7, #28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
	...

0800a3e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d109      	bne.n	800a40c <HAL_TIMEx_PWMN_Start+0x24>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b01      	cmp	r3, #1
 800a402:	bf14      	ite	ne
 800a404:	2301      	movne	r3, #1
 800a406:	2300      	moveq	r3, #0
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	e022      	b.n	800a452 <HAL_TIMEx_PWMN_Start+0x6a>
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d109      	bne.n	800a426 <HAL_TIMEx_PWMN_Start+0x3e>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	bf14      	ite	ne
 800a41e:	2301      	movne	r3, #1
 800a420:	2300      	moveq	r3, #0
 800a422:	b2db      	uxtb	r3, r3
 800a424:	e015      	b.n	800a452 <HAL_TIMEx_PWMN_Start+0x6a>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	2b08      	cmp	r3, #8
 800a42a:	d109      	bne.n	800a440 <HAL_TIMEx_PWMN_Start+0x58>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b01      	cmp	r3, #1
 800a436:	bf14      	ite	ne
 800a438:	2301      	movne	r3, #1
 800a43a:	2300      	moveq	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	e008      	b.n	800a452 <HAL_TIMEx_PWMN_Start+0x6a>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b01      	cmp	r3, #1
 800a44a:	bf14      	ite	ne
 800a44c:	2301      	movne	r3, #1
 800a44e:	2300      	moveq	r3, #0
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e069      	b.n	800a52e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d104      	bne.n	800a46a <HAL_TIMEx_PWMN_Start+0x82>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a468:	e013      	b.n	800a492 <HAL_TIMEx_PWMN_Start+0xaa>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	d104      	bne.n	800a47a <HAL_TIMEx_PWMN_Start+0x92>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2202      	movs	r2, #2
 800a474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a478:	e00b      	b.n	800a492 <HAL_TIMEx_PWMN_Start+0xaa>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b08      	cmp	r3, #8
 800a47e:	d104      	bne.n	800a48a <HAL_TIMEx_PWMN_Start+0xa2>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2202      	movs	r2, #2
 800a484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a488:	e003      	b.n	800a492 <HAL_TIMEx_PWMN_Start+0xaa>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2202      	movs	r2, #2
 800a48e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2204      	movs	r2, #4
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fa1e 	bl	800a8dc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a20      	ldr	r2, [pc, #128]	; (800a538 <HAL_TIMEx_PWMN_Start+0x150>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d018      	beq.n	800a4ec <HAL_TIMEx_PWMN_Start+0x104>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c2:	d013      	beq.n	800a4ec <HAL_TIMEx_PWMN_Start+0x104>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a1c      	ldr	r2, [pc, #112]	; (800a53c <HAL_TIMEx_PWMN_Start+0x154>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d00e      	beq.n	800a4ec <HAL_TIMEx_PWMN_Start+0x104>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a1b      	ldr	r2, [pc, #108]	; (800a540 <HAL_TIMEx_PWMN_Start+0x158>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d009      	beq.n	800a4ec <HAL_TIMEx_PWMN_Start+0x104>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a19      	ldr	r2, [pc, #100]	; (800a544 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d004      	beq.n	800a4ec <HAL_TIMEx_PWMN_Start+0x104>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a18      	ldr	r2, [pc, #96]	; (800a548 <HAL_TIMEx_PWMN_Start+0x160>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d115      	bne.n	800a518 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689a      	ldr	r2, [r3, #8]
 800a4f2:	4b16      	ldr	r3, [pc, #88]	; (800a54c <HAL_TIMEx_PWMN_Start+0x164>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b06      	cmp	r3, #6
 800a4fc:	d015      	beq.n	800a52a <HAL_TIMEx_PWMN_Start+0x142>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a504:	d011      	beq.n	800a52a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f042 0201 	orr.w	r2, r2, #1
 800a514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a516:	e008      	b.n	800a52a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f042 0201 	orr.w	r2, r2, #1
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	e000      	b.n	800a52c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a52a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	40012c00 	.word	0x40012c00
 800a53c:	40000400 	.word	0x40000400
 800a540:	40000800 	.word	0x40000800
 800a544:	40013400 	.word	0x40013400
 800a548:	40014000 	.word	0x40014000
 800a54c:	00010007 	.word	0x00010007

0800a550 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2200      	movs	r2, #0
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 f9ba 	bl	800a8dc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6a1a      	ldr	r2, [r3, #32]
 800a56e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a572:	4013      	ands	r3, r2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10f      	bne.n	800a598 <HAL_TIMEx_PWMN_Stop+0x48>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6a1a      	ldr	r2, [r3, #32]
 800a57e:	f244 4344 	movw	r3, #17476	; 0x4444
 800a582:	4013      	ands	r3, r2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d107      	bne.n	800a598 <HAL_TIMEx_PWMN_Stop+0x48>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a596:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6a1a      	ldr	r2, [r3, #32]
 800a59e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10f      	bne.n	800a5c8 <HAL_TIMEx_PWMN_Stop+0x78>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6a1a      	ldr	r2, [r3, #32]
 800a5ae:	f244 4344 	movw	r3, #17476	; 0x4444
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d107      	bne.n	800a5c8 <HAL_TIMEx_PWMN_Stop+0x78>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 0201 	bic.w	r2, r2, #1
 800a5c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d104      	bne.n	800a5d8 <HAL_TIMEx_PWMN_Stop+0x88>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5d6:	e013      	b.n	800a600 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	d104      	bne.n	800a5e8 <HAL_TIMEx_PWMN_Stop+0x98>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5e6:	e00b      	b.n	800a600 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	d104      	bne.n	800a5f8 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5f6:	e003      	b.n	800a600 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a620:	2302      	movs	r3, #2
 800a622:	e065      	b.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a2c      	ldr	r2, [pc, #176]	; (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d004      	beq.n	800a658 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a2b      	ldr	r2, [pc, #172]	; (800a700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d108      	bne.n	800a66a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a65e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a1b      	ldr	r2, [pc, #108]	; (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d018      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69a:	d013      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a18      	ldr	r2, [pc, #96]	; (800a704 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00e      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a17      	ldr	r2, [pc, #92]	; (800a708 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d009      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a12      	ldr	r2, [pc, #72]	; (800a700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d004      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a13      	ldr	r2, [pc, #76]	; (800a70c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d10c      	bne.n	800a6de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	40012c00 	.word	0x40012c00
 800a700:	40013400 	.word	0x40013400
 800a704:	40000400 	.word	0x40000400
 800a708:	40000800 	.word	0x40000800
 800a70c:	40014000 	.word	0x40014000

0800a710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a724:	2b01      	cmp	r3, #1
 800a726:	d101      	bne.n	800a72c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a728:	2302      	movs	r3, #2
 800a72a:	e087      	b.n	800a83c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	4313      	orrs	r3, r2
 800a740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4313      	orrs	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	4313      	orrs	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	4313      	orrs	r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	4313      	orrs	r3, r2
 800a794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	041b      	lsls	r3, r3, #16
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a27      	ldr	r2, [pc, #156]	; (800a848 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d004      	beq.n	800a7ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a25      	ldr	r2, [pc, #148]	; (800a84c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d106      	bne.n	800a7c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a1e      	ldr	r2, [pc, #120]	; (800a848 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d004      	beq.n	800a7dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a1d      	ldr	r2, [pc, #116]	; (800a84c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d126      	bne.n	800a82a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e6:	051b      	lsls	r3, r3, #20
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a804:	4313      	orrs	r3, r2
 800a806:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a0e      	ldr	r2, [pc, #56]	; (800a848 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d004      	beq.n	800a81c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a0d      	ldr	r2, [pc, #52]	; (800a84c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d106      	bne.n	800a82a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	40012c00 	.word	0x40012c00
 800a84c:	40013400 	.word	0x40013400

0800a850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	f003 031f 	and.w	r3, r3, #31
 800a8ee:	2204      	movs	r2, #4
 800a8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6a1a      	ldr	r2, [r3, #32]
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	43db      	mvns	r3, r3
 800a8fe:	401a      	ands	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6a1a      	ldr	r2, [r3, #32]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	f003 031f 	and.w	r3, r3, #31
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	fa01 f303 	lsl.w	r3, r1, r3
 800a914:	431a      	orrs	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	621a      	str	r2, [r3, #32]
}
 800a91a:	bf00      	nop
 800a91c:	371c      	adds	r7, #28
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e042      	b.n	800a9be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d106      	bne.n	800a950 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7f9 f814 	bl	8003978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2224      	movs	r2, #36	; 0x24
 800a954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f022 0201 	bic.w	r2, r2, #1
 800a966:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fc01 	bl	800b170 <UART_SetConfig>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b01      	cmp	r3, #1
 800a972:	d101      	bne.n	800a978 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e022      	b.n	800a9be <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fec1 	bl	800b708 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a994:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f042 0201 	orr.w	r2, r2, #1
 800a9b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 ff48 	bl	800b84c <UART_CheckIdleState>
 800a9bc:	4603      	mov	r3, r0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08a      	sub	sp, #40	; 0x28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9dc:	2b20      	cmp	r3, #32
 800a9de:	d17a      	bne.n	800aad6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <HAL_UART_Transmit_DMA+0x24>
 800a9e6:	88fb      	ldrh	r3, [r7, #6]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d101      	bne.n	800a9f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e073      	b.n	800aad8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d101      	bne.n	800a9fe <HAL_UART_Transmit_DMA+0x36>
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	e06c      	b.n	800aad8 <HAL_UART_Transmit_DMA+0x110>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	88fa      	ldrh	r2, [r7, #6]
 800aa10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	88fa      	ldrh	r2, [r7, #6]
 800aa18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2221      	movs	r2, #33	; 0x21
 800aa28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d02c      	beq.n	800aa8e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa38:	4a29      	ldr	r2, [pc, #164]	; (800aae0 <HAL_UART_Transmit_DMA+0x118>)
 800aa3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa40:	4a28      	ldr	r2, [pc, #160]	; (800aae4 <HAL_UART_Transmit_DMA+0x11c>)
 800aa42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa48:	4a27      	ldr	r2, [pc, #156]	; (800aae8 <HAL_UART_Transmit_DMA+0x120>)
 800aa4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa50:	2200      	movs	r2, #0
 800aa52:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3328      	adds	r3, #40	; 0x28
 800aa64:	461a      	mov	r2, r3
 800aa66:	88fb      	ldrh	r3, [r7, #6]
 800aa68:	f7fb f8e4 	bl	8005c34 <HAL_DMA_Start_IT>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00d      	beq.n	800aa8e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2210      	movs	r2, #16
 800aa76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2220      	movs	r2, #32
 800aa86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e024      	b.n	800aad8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2240      	movs	r2, #64	; 0x40
 800aa94:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	613b      	str	r3, [r7, #16]
   return(result);
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab4:	627b      	str	r3, [r7, #36]	; 0x24
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3308      	adds	r3, #8
 800aabc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aabe:	623a      	str	r2, [r7, #32]
 800aac0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	69f9      	ldr	r1, [r7, #28]
 800aac4:	6a3a      	ldr	r2, [r7, #32]
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	61bb      	str	r3, [r7, #24]
   return(result);
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e5      	bne.n	800aa9e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	e000      	b.n	800aad8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800aad6:	2302      	movs	r3, #2
  }
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3728      	adds	r7, #40	; 0x28
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	0800bbc1 	.word	0x0800bbc1
 800aae4:	0800bc5b 	.word	0x0800bc5b
 800aae8:	0800bc77 	.word	0x0800bc77

0800aaec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b0ba      	sub	sp, #232	; 0xe8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ab16:	f640 030f 	movw	r3, #2063	; 0x80f
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ab20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d11b      	bne.n	800ab60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab2c:	f003 0320 	and.w	r3, r3, #32
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d015      	beq.n	800ab60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab38:	f003 0320 	and.w	r3, r3, #32
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d105      	bne.n	800ab4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d009      	beq.n	800ab60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 82d6 	beq.w	800b102 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	4798      	blx	r3
      }
      return;
 800ab5e:	e2d0      	b.n	800b102 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 811f 	beq.w	800ada8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ab6e:	4b8b      	ldr	r3, [pc, #556]	; (800ad9c <HAL_UART_IRQHandler+0x2b0>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ab7a:	4b89      	ldr	r3, [pc, #548]	; (800ada0 <HAL_UART_IRQHandler+0x2b4>)
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 8112 	beq.w	800ada8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d011      	beq.n	800abb4 <HAL_UART_IRQHandler+0xc8>
 800ab90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2201      	movs	r2, #1
 800aba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abaa:	f043 0201 	orr.w	r2, r3, #1
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abb8:	f003 0302 	and.w	r3, r3, #2
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d011      	beq.n	800abe4 <HAL_UART_IRQHandler+0xf8>
 800abc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abc4:	f003 0301 	and.w	r3, r3, #1
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00b      	beq.n	800abe4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2202      	movs	r2, #2
 800abd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abda:	f043 0204 	orr.w	r2, r3, #4
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d011      	beq.n	800ac14 <HAL_UART_IRQHandler+0x128>
 800abf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2204      	movs	r2, #4
 800ac02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac0a:	f043 0202 	orr.w	r2, r3, #2
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac18:	f003 0308 	and.w	r3, r3, #8
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d017      	beq.n	800ac50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac24:	f003 0320 	and.w	r3, r3, #32
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d105      	bne.n	800ac38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ac30:	4b5a      	ldr	r3, [pc, #360]	; (800ad9c <HAL_UART_IRQHandler+0x2b0>)
 800ac32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00b      	beq.n	800ac50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2208      	movs	r2, #8
 800ac3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac46:	f043 0208 	orr.w	r2, r3, #8
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d012      	beq.n	800ac82 <HAL_UART_IRQHandler+0x196>
 800ac5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00c      	beq.n	800ac82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac78:	f043 0220 	orr.w	r2, r3, #32
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 823c 	beq.w	800b106 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac92:	f003 0320 	and.w	r3, r3, #32
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d013      	beq.n	800acc2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac9e:	f003 0320 	and.w	r3, r3, #32
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d105      	bne.n	800acb2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d007      	beq.n	800acc2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd6:	2b40      	cmp	r3, #64	; 0x40
 800acd8:	d005      	beq.n	800ace6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d04f      	beq.n	800ad86 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 ff04 	bl	800baf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf6:	2b40      	cmp	r3, #64	; 0x40
 800acf8:	d141      	bne.n	800ad7e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3308      	adds	r3, #8
 800ad00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad08:	e853 3f00 	ldrex	r3, [r3]
 800ad0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ad10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3308      	adds	r3, #8
 800ad22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1d9      	bne.n	800acfa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d013      	beq.n	800ad76 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad52:	4a14      	ldr	r2, [pc, #80]	; (800ada4 <HAL_UART_IRQHandler+0x2b8>)
 800ad54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fb f83e 	bl	8005ddc <HAL_DMA_Abort_IT>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d017      	beq.n	800ad96 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ad70:	4610      	mov	r0, r2
 800ad72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad74:	e00f      	b.n	800ad96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f9e4 	bl	800b144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad7c:	e00b      	b.n	800ad96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f9e0 	bl	800b144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad84:	e007      	b.n	800ad96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f9dc 	bl	800b144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ad94:	e1b7      	b.n	800b106 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad96:	bf00      	nop
    return;
 800ad98:	e1b5      	b.n	800b106 <HAL_UART_IRQHandler+0x61a>
 800ad9a:	bf00      	nop
 800ad9c:	10000001 	.word	0x10000001
 800ada0:	04000120 	.word	0x04000120
 800ada4:	0800bcf7 	.word	0x0800bcf7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adac:	2b01      	cmp	r3, #1
 800adae:	f040 814a 	bne.w	800b046 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800adb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adb6:	f003 0310 	and.w	r3, r3, #16
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 8143 	beq.w	800b046 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800adc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adc4:	f003 0310 	and.w	r3, r3, #16
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 813c 	beq.w	800b046 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2210      	movs	r2, #16
 800add4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade0:	2b40      	cmp	r3, #64	; 0x40
 800ade2:	f040 80b5 	bne.w	800af50 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800adf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 8187 	beq.w	800b10a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae06:	429a      	cmp	r2, r3
 800ae08:	f080 817f 	bcs.w	800b10a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0320 	and.w	r3, r3, #32
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f040 8086 	bne.w	800af34 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae34:	e853 3f00 	ldrex	r3, [r3]
 800ae38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ae56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae62:	e841 2300 	strex	r3, r2, [r1]
 800ae66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1da      	bne.n	800ae28 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3308      	adds	r3, #8
 800ae78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae7c:	e853 3f00 	ldrex	r3, [r3]
 800ae80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae84:	f023 0301 	bic.w	r3, r3, #1
 800ae88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3308      	adds	r3, #8
 800ae92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aea2:	e841 2300 	strex	r3, r2, [r1]
 800aea6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e1      	bne.n	800ae72 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3308      	adds	r3, #8
 800aeb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aeb8:	e853 3f00 	ldrex	r3, [r3]
 800aebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	3308      	adds	r3, #8
 800aece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aed2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aed4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e3      	bne.n	800aeae <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aefc:	e853 3f00 	ldrex	r3, [r3]
 800af00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af04:	f023 0310 	bic.w	r3, r3, #16
 800af08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	461a      	mov	r2, r3
 800af12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af16:	65bb      	str	r3, [r7, #88]	; 0x58
 800af18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af1e:	e841 2300 	strex	r3, r2, [r1]
 800af22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1e4      	bne.n	800aef4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fa fefb 	bl	8005d2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af40:	b29b      	uxth	r3, r3
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	b29b      	uxth	r3, r3
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f905 	bl	800b158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af4e:	e0dc      	b.n	800b10a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 80ce 	beq.w	800b10e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800af72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af76:	2b00      	cmp	r3, #0
 800af78:	f000 80c9 	beq.w	800b10e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	e853 3f00 	ldrex	r3, [r3]
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af9e:	647b      	str	r3, [r7, #68]	; 0x44
 800afa0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afa6:	e841 2300 	strex	r3, r2, [r1]
 800afaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1e4      	bne.n	800af7c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	3308      	adds	r3, #8
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	e853 3f00 	ldrex	r3, [r3]
 800afc0:	623b      	str	r3, [r7, #32]
   return(result);
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afc8:	f023 0301 	bic.w	r3, r3, #1
 800afcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3308      	adds	r3, #8
 800afd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800afda:	633a      	str	r2, [r7, #48]	; 0x30
 800afdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e1      	bne.n	800afb2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2220      	movs	r2, #32
 800aff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	e853 3f00 	ldrex	r3, [r3]
 800b00e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f023 0310 	bic.w	r3, r3, #16
 800b016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b024:	61fb      	str	r3, [r7, #28]
 800b026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b028:	69b9      	ldr	r1, [r7, #24]
 800b02a:	69fa      	ldr	r2, [r7, #28]
 800b02c:	e841 2300 	strex	r3, r2, [r1]
 800b030:	617b      	str	r3, [r7, #20]
   return(result);
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e4      	bne.n	800b002 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f88a 	bl	800b158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b044:	e063      	b.n	800b10e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b04a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00e      	beq.n	800b070 <HAL_UART_IRQHandler+0x584>
 800b052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d008      	beq.n	800b070 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b066:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fe85 	bl	800bd78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b06e:	e051      	b.n	800b114 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d014      	beq.n	800b0a6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b084:	2b00      	cmp	r3, #0
 800b086:	d105      	bne.n	800b094 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b08c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d008      	beq.n	800b0a6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d03a      	beq.n	800b112 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	4798      	blx	r3
    }
    return;
 800b0a4:	e035      	b.n	800b112 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d009      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x5da>
 800b0b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d003      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fe2f 	bl	800bd22 <UART_EndTransmit_IT>
    return;
 800b0c4:	e026      	b.n	800b114 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d009      	beq.n	800b0e6 <HAL_UART_IRQHandler+0x5fa>
 800b0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fe5e 	bl	800bda0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0e4:	e016      	b.n	800b114 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b0e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d010      	beq.n	800b114 <HAL_UART_IRQHandler+0x628>
 800b0f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	da0c      	bge.n	800b114 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fe46 	bl	800bd8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b100:	e008      	b.n	800b114 <HAL_UART_IRQHandler+0x628>
      return;
 800b102:	bf00      	nop
 800b104:	e006      	b.n	800b114 <HAL_UART_IRQHandler+0x628>
    return;
 800b106:	bf00      	nop
 800b108:	e004      	b.n	800b114 <HAL_UART_IRQHandler+0x628>
      return;
 800b10a:	bf00      	nop
 800b10c:	e002      	b.n	800b114 <HAL_UART_IRQHandler+0x628>
      return;
 800b10e:	bf00      	nop
 800b110:	e000      	b.n	800b114 <HAL_UART_IRQHandler+0x628>
    return;
 800b112:	bf00      	nop
  }
}
 800b114:	37e8      	adds	r7, #232	; 0xe8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop

0800b11c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	460b      	mov	r3, r1
 800b162:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b174:	b08c      	sub	sp, #48	; 0x30
 800b176:	af00      	add	r7, sp, #0
 800b178:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	689a      	ldr	r2, [r3, #8]
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	431a      	orrs	r2, r3
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	431a      	orrs	r2, r3
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	4313      	orrs	r3, r2
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	4bab      	ldr	r3, [pc, #684]	; (800b44c <UART_SetConfig+0x2dc>)
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	6812      	ldr	r2, [r2, #0]
 800b1a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1a8:	430b      	orrs	r3, r1
 800b1aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	68da      	ldr	r2, [r3, #12]
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	430a      	orrs	r2, r1
 800b1c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4aa0      	ldr	r2, [pc, #640]	; (800b450 <UART_SetConfig+0x2e0>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d004      	beq.n	800b1dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b1e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	6812      	ldr	r2, [r2, #0]
 800b1ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1f0:	430b      	orrs	r3, r1
 800b1f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fa:	f023 010f 	bic.w	r1, r3, #15
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	430a      	orrs	r2, r1
 800b208:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a91      	ldr	r2, [pc, #580]	; (800b454 <UART_SetConfig+0x2e4>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d125      	bne.n	800b260 <UART_SetConfig+0xf0>
 800b214:	4b90      	ldr	r3, [pc, #576]	; (800b458 <UART_SetConfig+0x2e8>)
 800b216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b21a:	f003 0303 	and.w	r3, r3, #3
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d81a      	bhi.n	800b258 <UART_SetConfig+0xe8>
 800b222:	a201      	add	r2, pc, #4	; (adr r2, 800b228 <UART_SetConfig+0xb8>)
 800b224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b228:	0800b239 	.word	0x0800b239
 800b22c:	0800b249 	.word	0x0800b249
 800b230:	0800b241 	.word	0x0800b241
 800b234:	0800b251 	.word	0x0800b251
 800b238:	2301      	movs	r3, #1
 800b23a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b23e:	e0d6      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b240:	2302      	movs	r3, #2
 800b242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b246:	e0d2      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b248:	2304      	movs	r3, #4
 800b24a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b24e:	e0ce      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b250:	2308      	movs	r3, #8
 800b252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b256:	e0ca      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b258:	2310      	movs	r3, #16
 800b25a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b25e:	e0c6      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a7d      	ldr	r2, [pc, #500]	; (800b45c <UART_SetConfig+0x2ec>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d138      	bne.n	800b2dc <UART_SetConfig+0x16c>
 800b26a:	4b7b      	ldr	r3, [pc, #492]	; (800b458 <UART_SetConfig+0x2e8>)
 800b26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b270:	f003 030c 	and.w	r3, r3, #12
 800b274:	2b0c      	cmp	r3, #12
 800b276:	d82d      	bhi.n	800b2d4 <UART_SetConfig+0x164>
 800b278:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <UART_SetConfig+0x110>)
 800b27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27e:	bf00      	nop
 800b280:	0800b2b5 	.word	0x0800b2b5
 800b284:	0800b2d5 	.word	0x0800b2d5
 800b288:	0800b2d5 	.word	0x0800b2d5
 800b28c:	0800b2d5 	.word	0x0800b2d5
 800b290:	0800b2c5 	.word	0x0800b2c5
 800b294:	0800b2d5 	.word	0x0800b2d5
 800b298:	0800b2d5 	.word	0x0800b2d5
 800b29c:	0800b2d5 	.word	0x0800b2d5
 800b2a0:	0800b2bd 	.word	0x0800b2bd
 800b2a4:	0800b2d5 	.word	0x0800b2d5
 800b2a8:	0800b2d5 	.word	0x0800b2d5
 800b2ac:	0800b2d5 	.word	0x0800b2d5
 800b2b0:	0800b2cd 	.word	0x0800b2cd
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2ba:	e098      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b2bc:	2302      	movs	r3, #2
 800b2be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2c2:	e094      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b2c4:	2304      	movs	r3, #4
 800b2c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2ca:	e090      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2d2:	e08c      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b2d4:	2310      	movs	r3, #16
 800b2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2da:	e088      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a5f      	ldr	r2, [pc, #380]	; (800b460 <UART_SetConfig+0x2f0>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d125      	bne.n	800b332 <UART_SetConfig+0x1c2>
 800b2e6:	4b5c      	ldr	r3, [pc, #368]	; (800b458 <UART_SetConfig+0x2e8>)
 800b2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b2f0:	2b30      	cmp	r3, #48	; 0x30
 800b2f2:	d016      	beq.n	800b322 <UART_SetConfig+0x1b2>
 800b2f4:	2b30      	cmp	r3, #48	; 0x30
 800b2f6:	d818      	bhi.n	800b32a <UART_SetConfig+0x1ba>
 800b2f8:	2b20      	cmp	r3, #32
 800b2fa:	d00a      	beq.n	800b312 <UART_SetConfig+0x1a2>
 800b2fc:	2b20      	cmp	r3, #32
 800b2fe:	d814      	bhi.n	800b32a <UART_SetConfig+0x1ba>
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <UART_SetConfig+0x19a>
 800b304:	2b10      	cmp	r3, #16
 800b306:	d008      	beq.n	800b31a <UART_SetConfig+0x1aa>
 800b308:	e00f      	b.n	800b32a <UART_SetConfig+0x1ba>
 800b30a:	2300      	movs	r3, #0
 800b30c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b310:	e06d      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b312:	2302      	movs	r3, #2
 800b314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b318:	e069      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b31a:	2304      	movs	r3, #4
 800b31c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b320:	e065      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b322:	2308      	movs	r3, #8
 800b324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b328:	e061      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b32a:	2310      	movs	r3, #16
 800b32c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b330:	e05d      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a4b      	ldr	r2, [pc, #300]	; (800b464 <UART_SetConfig+0x2f4>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d125      	bne.n	800b388 <UART_SetConfig+0x218>
 800b33c:	4b46      	ldr	r3, [pc, #280]	; (800b458 <UART_SetConfig+0x2e8>)
 800b33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b342:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b346:	2bc0      	cmp	r3, #192	; 0xc0
 800b348:	d016      	beq.n	800b378 <UART_SetConfig+0x208>
 800b34a:	2bc0      	cmp	r3, #192	; 0xc0
 800b34c:	d818      	bhi.n	800b380 <UART_SetConfig+0x210>
 800b34e:	2b80      	cmp	r3, #128	; 0x80
 800b350:	d00a      	beq.n	800b368 <UART_SetConfig+0x1f8>
 800b352:	2b80      	cmp	r3, #128	; 0x80
 800b354:	d814      	bhi.n	800b380 <UART_SetConfig+0x210>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <UART_SetConfig+0x1f0>
 800b35a:	2b40      	cmp	r3, #64	; 0x40
 800b35c:	d008      	beq.n	800b370 <UART_SetConfig+0x200>
 800b35e:	e00f      	b.n	800b380 <UART_SetConfig+0x210>
 800b360:	2300      	movs	r3, #0
 800b362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b366:	e042      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b368:	2302      	movs	r3, #2
 800b36a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b36e:	e03e      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b370:	2304      	movs	r3, #4
 800b372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b376:	e03a      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b378:	2308      	movs	r3, #8
 800b37a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b37e:	e036      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b380:	2310      	movs	r3, #16
 800b382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b386:	e032      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a30      	ldr	r2, [pc, #192]	; (800b450 <UART_SetConfig+0x2e0>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d12a      	bne.n	800b3e8 <UART_SetConfig+0x278>
 800b392:	4b31      	ldr	r3, [pc, #196]	; (800b458 <UART_SetConfig+0x2e8>)
 800b394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b39c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3a0:	d01a      	beq.n	800b3d8 <UART_SetConfig+0x268>
 800b3a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3a6:	d81b      	bhi.n	800b3e0 <UART_SetConfig+0x270>
 800b3a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3ac:	d00c      	beq.n	800b3c8 <UART_SetConfig+0x258>
 800b3ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b2:	d815      	bhi.n	800b3e0 <UART_SetConfig+0x270>
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <UART_SetConfig+0x250>
 800b3b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3bc:	d008      	beq.n	800b3d0 <UART_SetConfig+0x260>
 800b3be:	e00f      	b.n	800b3e0 <UART_SetConfig+0x270>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3c6:	e012      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3ce:	e00e      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b3d0:	2304      	movs	r3, #4
 800b3d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3d6:	e00a      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b3d8:	2308      	movs	r3, #8
 800b3da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3de:	e006      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b3e0:	2310      	movs	r3, #16
 800b3e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3e6:	e002      	b.n	800b3ee <UART_SetConfig+0x27e>
 800b3e8:	2310      	movs	r3, #16
 800b3ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a17      	ldr	r2, [pc, #92]	; (800b450 <UART_SetConfig+0x2e0>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	f040 80a8 	bne.w	800b54a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3fe:	2b08      	cmp	r3, #8
 800b400:	d834      	bhi.n	800b46c <UART_SetConfig+0x2fc>
 800b402:	a201      	add	r2, pc, #4	; (adr r2, 800b408 <UART_SetConfig+0x298>)
 800b404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b408:	0800b42d 	.word	0x0800b42d
 800b40c:	0800b46d 	.word	0x0800b46d
 800b410:	0800b435 	.word	0x0800b435
 800b414:	0800b46d 	.word	0x0800b46d
 800b418:	0800b43b 	.word	0x0800b43b
 800b41c:	0800b46d 	.word	0x0800b46d
 800b420:	0800b46d 	.word	0x0800b46d
 800b424:	0800b46d 	.word	0x0800b46d
 800b428:	0800b443 	.word	0x0800b443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b42c:	f7fc fca0 	bl	8007d70 <HAL_RCC_GetPCLK1Freq>
 800b430:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b432:	e021      	b.n	800b478 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b434:	4b0c      	ldr	r3, [pc, #48]	; (800b468 <UART_SetConfig+0x2f8>)
 800b436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b438:	e01e      	b.n	800b478 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b43a:	f7fc fc2d 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 800b43e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b440:	e01a      	b.n	800b478 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b448:	e016      	b.n	800b478 <UART_SetConfig+0x308>
 800b44a:	bf00      	nop
 800b44c:	cfff69f3 	.word	0xcfff69f3
 800b450:	40008000 	.word	0x40008000
 800b454:	40013800 	.word	0x40013800
 800b458:	40021000 	.word	0x40021000
 800b45c:	40004400 	.word	0x40004400
 800b460:	40004800 	.word	0x40004800
 800b464:	40004c00 	.word	0x40004c00
 800b468:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b46c:	2300      	movs	r3, #0
 800b46e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b476:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 812a 	beq.w	800b6d4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	4a9e      	ldr	r2, [pc, #632]	; (800b700 <UART_SetConfig+0x590>)
 800b486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b48a:	461a      	mov	r2, r3
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b492:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	4613      	mov	r3, r2
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	4413      	add	r3, r2
 800b49e:	69ba      	ldr	r2, [r7, #24]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d305      	bcc.n	800b4b0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4aa:	69ba      	ldr	r2, [r7, #24]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d903      	bls.n	800b4b8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b4b6:	e10d      	b.n	800b6d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	60bb      	str	r3, [r7, #8]
 800b4be:	60fa      	str	r2, [r7, #12]
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	4a8e      	ldr	r2, [pc, #568]	; (800b700 <UART_SetConfig+0x590>)
 800b4c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	603b      	str	r3, [r7, #0]
 800b4d0:	607a      	str	r2, [r7, #4]
 800b4d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b4da:	f7f4 fef9 	bl	80002d0 <__aeabi_uldivmod>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	f04f 0200 	mov.w	r2, #0
 800b4ea:	f04f 0300 	mov.w	r3, #0
 800b4ee:	020b      	lsls	r3, r1, #8
 800b4f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b4f4:	0202      	lsls	r2, r0, #8
 800b4f6:	6979      	ldr	r1, [r7, #20]
 800b4f8:	6849      	ldr	r1, [r1, #4]
 800b4fa:	0849      	lsrs	r1, r1, #1
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	460c      	mov	r4, r1
 800b500:	4605      	mov	r5, r0
 800b502:	eb12 0804 	adds.w	r8, r2, r4
 800b506:	eb43 0905 	adc.w	r9, r3, r5
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	469a      	mov	sl, r3
 800b512:	4693      	mov	fp, r2
 800b514:	4652      	mov	r2, sl
 800b516:	465b      	mov	r3, fp
 800b518:	4640      	mov	r0, r8
 800b51a:	4649      	mov	r1, r9
 800b51c:	f7f4 fed8 	bl	80002d0 <__aeabi_uldivmod>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	4613      	mov	r3, r2
 800b526:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b52e:	d308      	bcc.n	800b542 <UART_SetConfig+0x3d2>
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b536:	d204      	bcs.n	800b542 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6a3a      	ldr	r2, [r7, #32]
 800b53e:	60da      	str	r2, [r3, #12]
 800b540:	e0c8      	b.n	800b6d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b548:	e0c4      	b.n	800b6d4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	69db      	ldr	r3, [r3, #28]
 800b54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b552:	d167      	bne.n	800b624 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b554:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b558:	2b08      	cmp	r3, #8
 800b55a:	d828      	bhi.n	800b5ae <UART_SetConfig+0x43e>
 800b55c:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <UART_SetConfig+0x3f4>)
 800b55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b562:	bf00      	nop
 800b564:	0800b589 	.word	0x0800b589
 800b568:	0800b591 	.word	0x0800b591
 800b56c:	0800b599 	.word	0x0800b599
 800b570:	0800b5af 	.word	0x0800b5af
 800b574:	0800b59f 	.word	0x0800b59f
 800b578:	0800b5af 	.word	0x0800b5af
 800b57c:	0800b5af 	.word	0x0800b5af
 800b580:	0800b5af 	.word	0x0800b5af
 800b584:	0800b5a7 	.word	0x0800b5a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b588:	f7fc fbf2 	bl	8007d70 <HAL_RCC_GetPCLK1Freq>
 800b58c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b58e:	e014      	b.n	800b5ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b590:	f7fc fc04 	bl	8007d9c <HAL_RCC_GetPCLK2Freq>
 800b594:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b596:	e010      	b.n	800b5ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b598:	4b5a      	ldr	r3, [pc, #360]	; (800b704 <UART_SetConfig+0x594>)
 800b59a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b59c:	e00d      	b.n	800b5ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b59e:	f7fc fb7b 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 800b5a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b5a4:	e009      	b.n	800b5ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b5ac:	e005      	b.n	800b5ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b5b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 8089 	beq.w	800b6d4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c6:	4a4e      	ldr	r2, [pc, #312]	; (800b700 <UART_SetConfig+0x590>)
 800b5c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5d4:	005a      	lsls	r2, r3, #1
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	085b      	lsrs	r3, r3, #1
 800b5dc:	441a      	add	r2, r3
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	2b0f      	cmp	r3, #15
 800b5ec:	d916      	bls.n	800b61c <UART_SetConfig+0x4ac>
 800b5ee:	6a3b      	ldr	r3, [r7, #32]
 800b5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5f4:	d212      	bcs.n	800b61c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	f023 030f 	bic.w	r3, r3, #15
 800b5fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	085b      	lsrs	r3, r3, #1
 800b604:	b29b      	uxth	r3, r3
 800b606:	f003 0307 	and.w	r3, r3, #7
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	8bfb      	ldrh	r3, [r7, #30]
 800b60e:	4313      	orrs	r3, r2
 800b610:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	8bfa      	ldrh	r2, [r7, #30]
 800b618:	60da      	str	r2, [r3, #12]
 800b61a:	e05b      	b.n	800b6d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b622:	e057      	b.n	800b6d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b624:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b628:	2b08      	cmp	r3, #8
 800b62a:	d828      	bhi.n	800b67e <UART_SetConfig+0x50e>
 800b62c:	a201      	add	r2, pc, #4	; (adr r2, 800b634 <UART_SetConfig+0x4c4>)
 800b62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b632:	bf00      	nop
 800b634:	0800b659 	.word	0x0800b659
 800b638:	0800b661 	.word	0x0800b661
 800b63c:	0800b669 	.word	0x0800b669
 800b640:	0800b67f 	.word	0x0800b67f
 800b644:	0800b66f 	.word	0x0800b66f
 800b648:	0800b67f 	.word	0x0800b67f
 800b64c:	0800b67f 	.word	0x0800b67f
 800b650:	0800b67f 	.word	0x0800b67f
 800b654:	0800b677 	.word	0x0800b677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b658:	f7fc fb8a 	bl	8007d70 <HAL_RCC_GetPCLK1Freq>
 800b65c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b65e:	e014      	b.n	800b68a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b660:	f7fc fb9c 	bl	8007d9c <HAL_RCC_GetPCLK2Freq>
 800b664:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b666:	e010      	b.n	800b68a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b668:	4b26      	ldr	r3, [pc, #152]	; (800b704 <UART_SetConfig+0x594>)
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b66c:	e00d      	b.n	800b68a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b66e:	f7fc fb13 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 800b672:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b674:	e009      	b.n	800b68a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b67a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b67c:	e005      	b.n	800b68a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b67e:	2300      	movs	r3, #0
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b688:	bf00      	nop
    }

    if (pclk != 0U)
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d021      	beq.n	800b6d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	4a1a      	ldr	r2, [pc, #104]	; (800b700 <UART_SetConfig+0x590>)
 800b696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b69a:	461a      	mov	r2, r3
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	085b      	lsrs	r3, r3, #1
 800b6a8:	441a      	add	r2, r3
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	2b0f      	cmp	r3, #15
 800b6b8:	d909      	bls.n	800b6ce <UART_SetConfig+0x55e>
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6c0:	d205      	bcs.n	800b6ce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60da      	str	r2, [r3, #12]
 800b6cc:	e002      	b.n	800b6d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b6f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3730      	adds	r7, #48	; 0x30
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6fe:	bf00      	nop
 800b700:	0800c9ac 	.word	0x0800c9ac
 800b704:	00f42400 	.word	0x00f42400

0800b708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00a      	beq.n	800b732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	430a      	orrs	r2, r1
 800b730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00a      	beq.n	800b754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	430a      	orrs	r2, r1
 800b752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00a      	beq.n	800b776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	430a      	orrs	r2, r1
 800b774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77a:	f003 0308 	and.w	r3, r3, #8
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00a      	beq.n	800b798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	430a      	orrs	r2, r1
 800b796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79c:	f003 0310 	and.w	r3, r3, #16
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00a      	beq.n	800b7ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7be:	f003 0320 	and.w	r3, r3, #32
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00a      	beq.n	800b7dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	430a      	orrs	r2, r1
 800b7da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d01a      	beq.n	800b81e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b806:	d10a      	bne.n	800b81e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	430a      	orrs	r2, r1
 800b81c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00a      	beq.n	800b840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	430a      	orrs	r2, r1
 800b83e:	605a      	str	r2, [r3, #4]
  }
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af02      	add	r7, sp, #8
 800b852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b85c:	f7f8 f9a8 	bl	8003bb0 <HAL_GetTick>
 800b860:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 0308 	and.w	r3, r3, #8
 800b86c:	2b08      	cmp	r3, #8
 800b86e:	d10e      	bne.n	800b88e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b874:	9300      	str	r3, [sp, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f82f 	bl	800b8e2 <UART_WaitOnFlagUntilTimeout>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e025      	b.n	800b8da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 0304 	and.w	r3, r3, #4
 800b898:	2b04      	cmp	r3, #4
 800b89a:	d10e      	bne.n	800b8ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b89c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f819 	bl	800b8e2 <UART_WaitOnFlagUntilTimeout>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	e00f      	b.n	800b8da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2220      	movs	r2, #32
 800b8be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b09c      	sub	sp, #112	; 0x70
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	60f8      	str	r0, [r7, #12]
 800b8ea:	60b9      	str	r1, [r7, #8]
 800b8ec:	603b      	str	r3, [r7, #0]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8f2:	e0a9      	b.n	800ba48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fa:	f000 80a5 	beq.w	800ba48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8fe:	f7f8 f957 	bl	8003bb0 <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d302      	bcc.n	800b914 <UART_WaitOnFlagUntilTimeout+0x32>
 800b90e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b910:	2b00      	cmp	r3, #0
 800b912:	d140      	bne.n	800b996 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b91c:	e853 3f00 	ldrex	r3, [r3]
 800b920:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b924:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b928:	667b      	str	r3, [r7, #100]	; 0x64
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b932:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b934:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b936:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b938:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b93a:	e841 2300 	strex	r3, r2, [r1]
 800b93e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1e6      	bne.n	800b914 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3308      	adds	r3, #8
 800b94c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b950:	e853 3f00 	ldrex	r3, [r3]
 800b954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	f023 0301 	bic.w	r3, r3, #1
 800b95c:	663b      	str	r3, [r7, #96]	; 0x60
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3308      	adds	r3, #8
 800b964:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b966:	64ba      	str	r2, [r7, #72]	; 0x48
 800b968:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b96c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b96e:	e841 2300 	strex	r3, r2, [r1]
 800b972:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1e5      	bne.n	800b946 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2220      	movs	r2, #32
 800b97e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2220      	movs	r2, #32
 800b986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b992:	2303      	movs	r3, #3
 800b994:	e069      	b.n	800ba6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0304 	and.w	r3, r3, #4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d051      	beq.n	800ba48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	69db      	ldr	r3, [r3, #28]
 800b9aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9b2:	d149      	bne.n	800ba48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	e853 3f00 	ldrex	r3, [r3]
 800b9ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b9d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b9de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9e4:	e841 2300 	strex	r3, r2, [r1]
 800b9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1e6      	bne.n	800b9be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	e853 3f00 	ldrex	r3, [r3]
 800b9fe:	613b      	str	r3, [r7, #16]
   return(result);
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f023 0301 	bic.w	r3, r3, #1
 800ba06:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3308      	adds	r3, #8
 800ba0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ba10:	623a      	str	r2, [r7, #32]
 800ba12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba14:	69f9      	ldr	r1, [r7, #28]
 800ba16:	6a3a      	ldr	r2, [r7, #32]
 800ba18:	e841 2300 	strex	r3, r2, [r1]
 800ba1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1e5      	bne.n	800b9f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2220      	movs	r2, #32
 800ba28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2220      	movs	r2, #32
 800ba30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e010      	b.n	800ba6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	69da      	ldr	r2, [r3, #28]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	4013      	ands	r3, r2
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	bf0c      	ite	eq
 800ba58:	2301      	moveq	r3, #1
 800ba5a:	2300      	movne	r3, #0
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	461a      	mov	r2, r3
 800ba60:	79fb      	ldrb	r3, [r7, #7]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	f43f af46 	beq.w	800b8f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3770      	adds	r7, #112	; 0x70
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b08f      	sub	sp, #60	; 0x3c
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	e853 3f00 	ldrex	r3, [r3]
 800ba86:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	461a      	mov	r2, r3
 800ba96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba9a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baa0:	e841 2300 	strex	r3, r2, [r1]
 800baa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800baa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1e6      	bne.n	800ba7a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3308      	adds	r3, #8
 800bab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	e853 3f00 	ldrex	r3, [r3]
 800baba:	60bb      	str	r3, [r7, #8]
   return(result);
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bac2:	633b      	str	r3, [r7, #48]	; 0x30
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	3308      	adds	r3, #8
 800baca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bacc:	61ba      	str	r2, [r7, #24]
 800bace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad0:	6979      	ldr	r1, [r7, #20]
 800bad2:	69ba      	ldr	r2, [r7, #24]
 800bad4:	e841 2300 	strex	r3, r2, [r1]
 800bad8:	613b      	str	r3, [r7, #16]
   return(result);
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1e5      	bne.n	800baac <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2220      	movs	r2, #32
 800bae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800bae8:	bf00      	nop
 800baea:	373c      	adds	r7, #60	; 0x3c
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b095      	sub	sp, #84	; 0x54
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb04:	e853 3f00 	ldrex	r3, [r3]
 800bb08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1a:	643b      	str	r3, [r7, #64]	; 0x40
 800bb1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb22:	e841 2300 	strex	r3, r2, [r1]
 800bb26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1e6      	bne.n	800bafc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3308      	adds	r3, #8
 800bb34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	e853 3f00 	ldrex	r3, [r3]
 800bb3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb44:	f023 0301 	bic.w	r3, r3, #1
 800bb48:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	3308      	adds	r3, #8
 800bb50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb52:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb5a:	e841 2300 	strex	r3, r2, [r1]
 800bb5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1e3      	bne.n	800bb2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d118      	bne.n	800bba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	e853 3f00 	ldrex	r3, [r3]
 800bb7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	f023 0310 	bic.w	r3, r3, #16
 800bb82:	647b      	str	r3, [r7, #68]	; 0x44
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	461a      	mov	r2, r3
 800bb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb8c:	61bb      	str	r3, [r7, #24]
 800bb8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb90:	6979      	ldr	r1, [r7, #20]
 800bb92:	69ba      	ldr	r2, [r7, #24]
 800bb94:	e841 2300 	strex	r3, r2, [r1]
 800bb98:	613b      	str	r3, [r7, #16]
   return(result);
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e6      	bne.n	800bb6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2220      	movs	r2, #32
 800bba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bbb4:	bf00      	nop
 800bbb6:	3754      	adds	r7, #84	; 0x54
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b090      	sub	sp, #64	; 0x40
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbcc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0320 	and.w	r3, r3, #32
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d137      	bne.n	800bc4c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3308      	adds	r3, #8
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	e853 3f00 	ldrex	r3, [r3]
 800bbf2:	623b      	str	r3, [r7, #32]
   return(result);
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbfa:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	3308      	adds	r3, #8
 800bc02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc04:	633a      	str	r2, [r7, #48]	; 0x30
 800bc06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc0c:	e841 2300 	strex	r3, r2, [r1]
 800bc10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1e5      	bne.n	800bbe4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	e853 3f00 	ldrex	r3, [r3]
 800bc24:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3a:	69b9      	ldr	r1, [r7, #24]
 800bc3c:	69fa      	ldr	r2, [r7, #28]
 800bc3e:	e841 2300 	strex	r3, r2, [r1]
 800bc42:	617b      	str	r3, [r7, #20]
   return(result);
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1e6      	bne.n	800bc18 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc4a:	e002      	b.n	800bc52 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bc4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc4e:	f7ff fa65 	bl	800b11c <HAL_UART_TxCpltCallback>
}
 800bc52:	bf00      	nop
 800bc54:	3740      	adds	r7, #64	; 0x40
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b084      	sub	sp, #16
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f7ff fa61 	bl	800b130 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc6e:	bf00      	nop
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b086      	sub	sp, #24
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc82:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc8a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9e:	2b80      	cmp	r3, #128	; 0x80
 800bca0:	d109      	bne.n	800bcb6 <UART_DMAError+0x40>
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	2b21      	cmp	r3, #33	; 0x21
 800bca6:	d106      	bne.n	800bcb6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bcb0:	6978      	ldr	r0, [r7, #20]
 800bcb2:	f7ff fede 	bl	800ba72 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc0:	2b40      	cmp	r3, #64	; 0x40
 800bcc2:	d109      	bne.n	800bcd8 <UART_DMAError+0x62>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2b22      	cmp	r3, #34	; 0x22
 800bcc8:	d106      	bne.n	800bcd8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bcd2:	6978      	ldr	r0, [r7, #20]
 800bcd4:	f7ff ff0e 	bl	800baf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcde:	f043 0210 	orr.w	r2, r3, #16
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bce8:	6978      	ldr	r0, [r7, #20]
 800bcea:	f7ff fa2b 	bl	800b144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcee:	bf00      	nop
 800bcf0:	3718      	adds	r7, #24
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b084      	sub	sp, #16
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f7ff fa15 	bl	800b144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd1a:	bf00      	nop
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b088      	sub	sp, #32
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	e853 3f00 	ldrex	r3, [r3]
 800bd36:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd3e:	61fb      	str	r3, [r7, #28]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	461a      	mov	r2, r3
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	61bb      	str	r3, [r7, #24]
 800bd4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4c:	6979      	ldr	r1, [r7, #20]
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	e841 2300 	strex	r3, r2, [r1]
 800bd54:	613b      	str	r3, [r7, #16]
   return(result);
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e6      	bne.n	800bd2a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2220      	movs	r2, #32
 800bd60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff f9d6 	bl	800b11c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd70:	bf00      	nop
 800bd72:	3720      	adds	r7, #32
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d101      	bne.n	800bdca <HAL_UARTEx_DisableFifoMode+0x16>
 800bdc6:	2302      	movs	r3, #2
 800bdc8:	e027      	b.n	800be1a <HAL_UARTEx_DisableFifoMode+0x66>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2224      	movs	r2, #36	; 0x24
 800bdd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f022 0201 	bic.w	r2, r2, #1
 800bdf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bdf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2220      	movs	r2, #32
 800be0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b084      	sub	sp, #16
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be36:	2b01      	cmp	r3, #1
 800be38:	d101      	bne.n	800be3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be3a:	2302      	movs	r3, #2
 800be3c:	e02d      	b.n	800be9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2201      	movs	r2, #1
 800be42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2224      	movs	r2, #36	; 0x24
 800be4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f022 0201 	bic.w	r2, r2, #1
 800be64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	430a      	orrs	r2, r1
 800be78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f850 	bl	800bf20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2220      	movs	r2, #32
 800be8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b084      	sub	sp, #16
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d101      	bne.n	800beba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800beb6:	2302      	movs	r3, #2
 800beb8:	e02d      	b.n	800bf16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2224      	movs	r2, #36	; 0x24
 800bec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f022 0201 	bic.w	r2, r2, #1
 800bee0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f812 	bl	800bf20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2220      	movs	r2, #32
 800bf08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d108      	bne.n	800bf42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf40:	e031      	b.n	800bfa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf42:	2308      	movs	r3, #8
 800bf44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf46:	2308      	movs	r3, #8
 800bf48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	0e5b      	lsrs	r3, r3, #25
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	f003 0307 	and.w	r3, r3, #7
 800bf58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	0f5b      	lsrs	r3, r3, #29
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	f003 0307 	and.w	r3, r3, #7
 800bf68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf6a:	7bbb      	ldrb	r3, [r7, #14]
 800bf6c:	7b3a      	ldrb	r2, [r7, #12]
 800bf6e:	4911      	ldr	r1, [pc, #68]	; (800bfb4 <UARTEx_SetNbDataToProcess+0x94>)
 800bf70:	5c8a      	ldrb	r2, [r1, r2]
 800bf72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bf76:	7b3a      	ldrb	r2, [r7, #12]
 800bf78:	490f      	ldr	r1, [pc, #60]	; (800bfb8 <UARTEx_SetNbDataToProcess+0x98>)
 800bf7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf88:	7bfb      	ldrb	r3, [r7, #15]
 800bf8a:	7b7a      	ldrb	r2, [r7, #13]
 800bf8c:	4909      	ldr	r1, [pc, #36]	; (800bfb4 <UARTEx_SetNbDataToProcess+0x94>)
 800bf8e:	5c8a      	ldrb	r2, [r1, r2]
 800bf90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf94:	7b7a      	ldrb	r2, [r7, #13]
 800bf96:	4908      	ldr	r1, [pc, #32]	; (800bfb8 <UARTEx_SetNbDataToProcess+0x98>)
 800bf98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bfa6:	bf00      	nop
 800bfa8:	3714      	adds	r7, #20
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	0800c9c4 	.word	0x0800c9c4
 800bfb8:	0800c9cc 	.word	0x0800c9cc

0800bfbc <_vsniprintf_r>:
 800bfbc:	b530      	push	{r4, r5, lr}
 800bfbe:	4614      	mov	r4, r2
 800bfc0:	2c00      	cmp	r4, #0
 800bfc2:	b09b      	sub	sp, #108	; 0x6c
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	da05      	bge.n	800bfd6 <_vsniprintf_r+0x1a>
 800bfca:	238b      	movs	r3, #139	; 0x8b
 800bfcc:	6003      	str	r3, [r0, #0]
 800bfce:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd2:	b01b      	add	sp, #108	; 0x6c
 800bfd4:	bd30      	pop	{r4, r5, pc}
 800bfd6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bfda:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bfde:	bf14      	ite	ne
 800bfe0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bfe4:	4623      	moveq	r3, r4
 800bfe6:	9302      	str	r3, [sp, #8]
 800bfe8:	9305      	str	r3, [sp, #20]
 800bfea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfee:	9100      	str	r1, [sp, #0]
 800bff0:	9104      	str	r1, [sp, #16]
 800bff2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bff6:	4669      	mov	r1, sp
 800bff8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bffa:	f000 f9ad 	bl	800c358 <_svfiprintf_r>
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	bfbc      	itt	lt
 800c002:	238b      	movlt	r3, #139	; 0x8b
 800c004:	602b      	strlt	r3, [r5, #0]
 800c006:	2c00      	cmp	r4, #0
 800c008:	d0e3      	beq.n	800bfd2 <_vsniprintf_r+0x16>
 800c00a:	9b00      	ldr	r3, [sp, #0]
 800c00c:	2200      	movs	r2, #0
 800c00e:	701a      	strb	r2, [r3, #0]
 800c010:	e7df      	b.n	800bfd2 <_vsniprintf_r+0x16>
	...

0800c014 <vsniprintf>:
 800c014:	b507      	push	{r0, r1, r2, lr}
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	4613      	mov	r3, r2
 800c01a:	460a      	mov	r2, r1
 800c01c:	4601      	mov	r1, r0
 800c01e:	4803      	ldr	r0, [pc, #12]	; (800c02c <vsniprintf+0x18>)
 800c020:	6800      	ldr	r0, [r0, #0]
 800c022:	f7ff ffcb 	bl	800bfbc <_vsniprintf_r>
 800c026:	b003      	add	sp, #12
 800c028:	f85d fb04 	ldr.w	pc, [sp], #4
 800c02c:	20000130 	.word	0x20000130

0800c030 <memset>:
 800c030:	4402      	add	r2, r0
 800c032:	4603      	mov	r3, r0
 800c034:	4293      	cmp	r3, r2
 800c036:	d100      	bne.n	800c03a <memset+0xa>
 800c038:	4770      	bx	lr
 800c03a:	f803 1b01 	strb.w	r1, [r3], #1
 800c03e:	e7f9      	b.n	800c034 <memset+0x4>

0800c040 <__errno>:
 800c040:	4b01      	ldr	r3, [pc, #4]	; (800c048 <__errno+0x8>)
 800c042:	6818      	ldr	r0, [r3, #0]
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	20000130 	.word	0x20000130

0800c04c <__libc_init_array>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	4d0d      	ldr	r5, [pc, #52]	; (800c084 <__libc_init_array+0x38>)
 800c050:	4c0d      	ldr	r4, [pc, #52]	; (800c088 <__libc_init_array+0x3c>)
 800c052:	1b64      	subs	r4, r4, r5
 800c054:	10a4      	asrs	r4, r4, #2
 800c056:	2600      	movs	r6, #0
 800c058:	42a6      	cmp	r6, r4
 800c05a:	d109      	bne.n	800c070 <__libc_init_array+0x24>
 800c05c:	4d0b      	ldr	r5, [pc, #44]	; (800c08c <__libc_init_array+0x40>)
 800c05e:	4c0c      	ldr	r4, [pc, #48]	; (800c090 <__libc_init_array+0x44>)
 800c060:	f000 fc6a 	bl	800c938 <_init>
 800c064:	1b64      	subs	r4, r4, r5
 800c066:	10a4      	asrs	r4, r4, #2
 800c068:	2600      	movs	r6, #0
 800c06a:	42a6      	cmp	r6, r4
 800c06c:	d105      	bne.n	800c07a <__libc_init_array+0x2e>
 800c06e:	bd70      	pop	{r4, r5, r6, pc}
 800c070:	f855 3b04 	ldr.w	r3, [r5], #4
 800c074:	4798      	blx	r3
 800c076:	3601      	adds	r6, #1
 800c078:	e7ee      	b.n	800c058 <__libc_init_array+0xc>
 800c07a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c07e:	4798      	blx	r3
 800c080:	3601      	adds	r6, #1
 800c082:	e7f2      	b.n	800c06a <__libc_init_array+0x1e>
 800c084:	0800ca10 	.word	0x0800ca10
 800c088:	0800ca10 	.word	0x0800ca10
 800c08c:	0800ca10 	.word	0x0800ca10
 800c090:	0800ca14 	.word	0x0800ca14

0800c094 <__retarget_lock_acquire_recursive>:
 800c094:	4770      	bx	lr

0800c096 <__retarget_lock_release_recursive>:
 800c096:	4770      	bx	lr

0800c098 <memcpy>:
 800c098:	440a      	add	r2, r1
 800c09a:	4291      	cmp	r1, r2
 800c09c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0a0:	d100      	bne.n	800c0a4 <memcpy+0xc>
 800c0a2:	4770      	bx	lr
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0ae:	4291      	cmp	r1, r2
 800c0b0:	d1f9      	bne.n	800c0a6 <memcpy+0xe>
 800c0b2:	bd10      	pop	{r4, pc}

0800c0b4 <_free_r>:
 800c0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0b6:	2900      	cmp	r1, #0
 800c0b8:	d044      	beq.n	800c144 <_free_r+0x90>
 800c0ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0be:	9001      	str	r0, [sp, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c0c6:	bfb8      	it	lt
 800c0c8:	18e4      	addlt	r4, r4, r3
 800c0ca:	f000 f8df 	bl	800c28c <__malloc_lock>
 800c0ce:	4a1e      	ldr	r2, [pc, #120]	; (800c148 <_free_r+0x94>)
 800c0d0:	9801      	ldr	r0, [sp, #4]
 800c0d2:	6813      	ldr	r3, [r2, #0]
 800c0d4:	b933      	cbnz	r3, 800c0e4 <_free_r+0x30>
 800c0d6:	6063      	str	r3, [r4, #4]
 800c0d8:	6014      	str	r4, [r2, #0]
 800c0da:	b003      	add	sp, #12
 800c0dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0e0:	f000 b8da 	b.w	800c298 <__malloc_unlock>
 800c0e4:	42a3      	cmp	r3, r4
 800c0e6:	d908      	bls.n	800c0fa <_free_r+0x46>
 800c0e8:	6825      	ldr	r5, [r4, #0]
 800c0ea:	1961      	adds	r1, r4, r5
 800c0ec:	428b      	cmp	r3, r1
 800c0ee:	bf01      	itttt	eq
 800c0f0:	6819      	ldreq	r1, [r3, #0]
 800c0f2:	685b      	ldreq	r3, [r3, #4]
 800c0f4:	1949      	addeq	r1, r1, r5
 800c0f6:	6021      	streq	r1, [r4, #0]
 800c0f8:	e7ed      	b.n	800c0d6 <_free_r+0x22>
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	b10b      	cbz	r3, 800c104 <_free_r+0x50>
 800c100:	42a3      	cmp	r3, r4
 800c102:	d9fa      	bls.n	800c0fa <_free_r+0x46>
 800c104:	6811      	ldr	r1, [r2, #0]
 800c106:	1855      	adds	r5, r2, r1
 800c108:	42a5      	cmp	r5, r4
 800c10a:	d10b      	bne.n	800c124 <_free_r+0x70>
 800c10c:	6824      	ldr	r4, [r4, #0]
 800c10e:	4421      	add	r1, r4
 800c110:	1854      	adds	r4, r2, r1
 800c112:	42a3      	cmp	r3, r4
 800c114:	6011      	str	r1, [r2, #0]
 800c116:	d1e0      	bne.n	800c0da <_free_r+0x26>
 800c118:	681c      	ldr	r4, [r3, #0]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	6053      	str	r3, [r2, #4]
 800c11e:	440c      	add	r4, r1
 800c120:	6014      	str	r4, [r2, #0]
 800c122:	e7da      	b.n	800c0da <_free_r+0x26>
 800c124:	d902      	bls.n	800c12c <_free_r+0x78>
 800c126:	230c      	movs	r3, #12
 800c128:	6003      	str	r3, [r0, #0]
 800c12a:	e7d6      	b.n	800c0da <_free_r+0x26>
 800c12c:	6825      	ldr	r5, [r4, #0]
 800c12e:	1961      	adds	r1, r4, r5
 800c130:	428b      	cmp	r3, r1
 800c132:	bf04      	itt	eq
 800c134:	6819      	ldreq	r1, [r3, #0]
 800c136:	685b      	ldreq	r3, [r3, #4]
 800c138:	6063      	str	r3, [r4, #4]
 800c13a:	bf04      	itt	eq
 800c13c:	1949      	addeq	r1, r1, r5
 800c13e:	6021      	streq	r1, [r4, #0]
 800c140:	6054      	str	r4, [r2, #4]
 800c142:	e7ca      	b.n	800c0da <_free_r+0x26>
 800c144:	b003      	add	sp, #12
 800c146:	bd30      	pop	{r4, r5, pc}
 800c148:	20000ed0 	.word	0x20000ed0

0800c14c <sbrk_aligned>:
 800c14c:	b570      	push	{r4, r5, r6, lr}
 800c14e:	4e0e      	ldr	r6, [pc, #56]	; (800c188 <sbrk_aligned+0x3c>)
 800c150:	460c      	mov	r4, r1
 800c152:	6831      	ldr	r1, [r6, #0]
 800c154:	4605      	mov	r5, r0
 800c156:	b911      	cbnz	r1, 800c15e <sbrk_aligned+0x12>
 800c158:	f000 fba6 	bl	800c8a8 <_sbrk_r>
 800c15c:	6030      	str	r0, [r6, #0]
 800c15e:	4621      	mov	r1, r4
 800c160:	4628      	mov	r0, r5
 800c162:	f000 fba1 	bl	800c8a8 <_sbrk_r>
 800c166:	1c43      	adds	r3, r0, #1
 800c168:	d00a      	beq.n	800c180 <sbrk_aligned+0x34>
 800c16a:	1cc4      	adds	r4, r0, #3
 800c16c:	f024 0403 	bic.w	r4, r4, #3
 800c170:	42a0      	cmp	r0, r4
 800c172:	d007      	beq.n	800c184 <sbrk_aligned+0x38>
 800c174:	1a21      	subs	r1, r4, r0
 800c176:	4628      	mov	r0, r5
 800c178:	f000 fb96 	bl	800c8a8 <_sbrk_r>
 800c17c:	3001      	adds	r0, #1
 800c17e:	d101      	bne.n	800c184 <sbrk_aligned+0x38>
 800c180:	f04f 34ff 	mov.w	r4, #4294967295
 800c184:	4620      	mov	r0, r4
 800c186:	bd70      	pop	{r4, r5, r6, pc}
 800c188:	20000ed4 	.word	0x20000ed4

0800c18c <_malloc_r>:
 800c18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c190:	1ccd      	adds	r5, r1, #3
 800c192:	f025 0503 	bic.w	r5, r5, #3
 800c196:	3508      	adds	r5, #8
 800c198:	2d0c      	cmp	r5, #12
 800c19a:	bf38      	it	cc
 800c19c:	250c      	movcc	r5, #12
 800c19e:	2d00      	cmp	r5, #0
 800c1a0:	4607      	mov	r7, r0
 800c1a2:	db01      	blt.n	800c1a8 <_malloc_r+0x1c>
 800c1a4:	42a9      	cmp	r1, r5
 800c1a6:	d905      	bls.n	800c1b4 <_malloc_r+0x28>
 800c1a8:	230c      	movs	r3, #12
 800c1aa:	603b      	str	r3, [r7, #0]
 800c1ac:	2600      	movs	r6, #0
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c288 <_malloc_r+0xfc>
 800c1b8:	f000 f868 	bl	800c28c <__malloc_lock>
 800c1bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c1c0:	461c      	mov	r4, r3
 800c1c2:	bb5c      	cbnz	r4, 800c21c <_malloc_r+0x90>
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	f7ff ffc0 	bl	800c14c <sbrk_aligned>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	d155      	bne.n	800c27e <_malloc_r+0xf2>
 800c1d2:	f8d8 4000 	ldr.w	r4, [r8]
 800c1d6:	4626      	mov	r6, r4
 800c1d8:	2e00      	cmp	r6, #0
 800c1da:	d145      	bne.n	800c268 <_malloc_r+0xdc>
 800c1dc:	2c00      	cmp	r4, #0
 800c1de:	d048      	beq.n	800c272 <_malloc_r+0xe6>
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	eb04 0903 	add.w	r9, r4, r3
 800c1ea:	f000 fb5d 	bl	800c8a8 <_sbrk_r>
 800c1ee:	4581      	cmp	r9, r0
 800c1f0:	d13f      	bne.n	800c272 <_malloc_r+0xe6>
 800c1f2:	6821      	ldr	r1, [r4, #0]
 800c1f4:	1a6d      	subs	r5, r5, r1
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	4638      	mov	r0, r7
 800c1fa:	f7ff ffa7 	bl	800c14c <sbrk_aligned>
 800c1fe:	3001      	adds	r0, #1
 800c200:	d037      	beq.n	800c272 <_malloc_r+0xe6>
 800c202:	6823      	ldr	r3, [r4, #0]
 800c204:	442b      	add	r3, r5
 800c206:	6023      	str	r3, [r4, #0]
 800c208:	f8d8 3000 	ldr.w	r3, [r8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d038      	beq.n	800c282 <_malloc_r+0xf6>
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	42a2      	cmp	r2, r4
 800c214:	d12b      	bne.n	800c26e <_malloc_r+0xe2>
 800c216:	2200      	movs	r2, #0
 800c218:	605a      	str	r2, [r3, #4]
 800c21a:	e00f      	b.n	800c23c <_malloc_r+0xb0>
 800c21c:	6822      	ldr	r2, [r4, #0]
 800c21e:	1b52      	subs	r2, r2, r5
 800c220:	d41f      	bmi.n	800c262 <_malloc_r+0xd6>
 800c222:	2a0b      	cmp	r2, #11
 800c224:	d917      	bls.n	800c256 <_malloc_r+0xca>
 800c226:	1961      	adds	r1, r4, r5
 800c228:	42a3      	cmp	r3, r4
 800c22a:	6025      	str	r5, [r4, #0]
 800c22c:	bf18      	it	ne
 800c22e:	6059      	strne	r1, [r3, #4]
 800c230:	6863      	ldr	r3, [r4, #4]
 800c232:	bf08      	it	eq
 800c234:	f8c8 1000 	streq.w	r1, [r8]
 800c238:	5162      	str	r2, [r4, r5]
 800c23a:	604b      	str	r3, [r1, #4]
 800c23c:	4638      	mov	r0, r7
 800c23e:	f104 060b 	add.w	r6, r4, #11
 800c242:	f000 f829 	bl	800c298 <__malloc_unlock>
 800c246:	f026 0607 	bic.w	r6, r6, #7
 800c24a:	1d23      	adds	r3, r4, #4
 800c24c:	1af2      	subs	r2, r6, r3
 800c24e:	d0ae      	beq.n	800c1ae <_malloc_r+0x22>
 800c250:	1b9b      	subs	r3, r3, r6
 800c252:	50a3      	str	r3, [r4, r2]
 800c254:	e7ab      	b.n	800c1ae <_malloc_r+0x22>
 800c256:	42a3      	cmp	r3, r4
 800c258:	6862      	ldr	r2, [r4, #4]
 800c25a:	d1dd      	bne.n	800c218 <_malloc_r+0x8c>
 800c25c:	f8c8 2000 	str.w	r2, [r8]
 800c260:	e7ec      	b.n	800c23c <_malloc_r+0xb0>
 800c262:	4623      	mov	r3, r4
 800c264:	6864      	ldr	r4, [r4, #4]
 800c266:	e7ac      	b.n	800c1c2 <_malloc_r+0x36>
 800c268:	4634      	mov	r4, r6
 800c26a:	6876      	ldr	r6, [r6, #4]
 800c26c:	e7b4      	b.n	800c1d8 <_malloc_r+0x4c>
 800c26e:	4613      	mov	r3, r2
 800c270:	e7cc      	b.n	800c20c <_malloc_r+0x80>
 800c272:	230c      	movs	r3, #12
 800c274:	603b      	str	r3, [r7, #0]
 800c276:	4638      	mov	r0, r7
 800c278:	f000 f80e 	bl	800c298 <__malloc_unlock>
 800c27c:	e797      	b.n	800c1ae <_malloc_r+0x22>
 800c27e:	6025      	str	r5, [r4, #0]
 800c280:	e7dc      	b.n	800c23c <_malloc_r+0xb0>
 800c282:	605b      	str	r3, [r3, #4]
 800c284:	deff      	udf	#255	; 0xff
 800c286:	bf00      	nop
 800c288:	20000ed0 	.word	0x20000ed0

0800c28c <__malloc_lock>:
 800c28c:	4801      	ldr	r0, [pc, #4]	; (800c294 <__malloc_lock+0x8>)
 800c28e:	f7ff bf01 	b.w	800c094 <__retarget_lock_acquire_recursive>
 800c292:	bf00      	nop
 800c294:	20000ecc 	.word	0x20000ecc

0800c298 <__malloc_unlock>:
 800c298:	4801      	ldr	r0, [pc, #4]	; (800c2a0 <__malloc_unlock+0x8>)
 800c29a:	f7ff befc 	b.w	800c096 <__retarget_lock_release_recursive>
 800c29e:	bf00      	nop
 800c2a0:	20000ecc 	.word	0x20000ecc

0800c2a4 <__ssputs_r>:
 800c2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a8:	688e      	ldr	r6, [r1, #8]
 800c2aa:	461f      	mov	r7, r3
 800c2ac:	42be      	cmp	r6, r7
 800c2ae:	680b      	ldr	r3, [r1, #0]
 800c2b0:	4682      	mov	sl, r0
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	4690      	mov	r8, r2
 800c2b6:	d82c      	bhi.n	800c312 <__ssputs_r+0x6e>
 800c2b8:	898a      	ldrh	r2, [r1, #12]
 800c2ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2be:	d026      	beq.n	800c30e <__ssputs_r+0x6a>
 800c2c0:	6965      	ldr	r5, [r4, #20]
 800c2c2:	6909      	ldr	r1, [r1, #16]
 800c2c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2c8:	eba3 0901 	sub.w	r9, r3, r1
 800c2cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2d0:	1c7b      	adds	r3, r7, #1
 800c2d2:	444b      	add	r3, r9
 800c2d4:	106d      	asrs	r5, r5, #1
 800c2d6:	429d      	cmp	r5, r3
 800c2d8:	bf38      	it	cc
 800c2da:	461d      	movcc	r5, r3
 800c2dc:	0553      	lsls	r3, r2, #21
 800c2de:	d527      	bpl.n	800c330 <__ssputs_r+0x8c>
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	f7ff ff53 	bl	800c18c <_malloc_r>
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	b360      	cbz	r0, 800c344 <__ssputs_r+0xa0>
 800c2ea:	6921      	ldr	r1, [r4, #16]
 800c2ec:	464a      	mov	r2, r9
 800c2ee:	f7ff fed3 	bl	800c098 <memcpy>
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2fc:	81a3      	strh	r3, [r4, #12]
 800c2fe:	6126      	str	r6, [r4, #16]
 800c300:	6165      	str	r5, [r4, #20]
 800c302:	444e      	add	r6, r9
 800c304:	eba5 0509 	sub.w	r5, r5, r9
 800c308:	6026      	str	r6, [r4, #0]
 800c30a:	60a5      	str	r5, [r4, #8]
 800c30c:	463e      	mov	r6, r7
 800c30e:	42be      	cmp	r6, r7
 800c310:	d900      	bls.n	800c314 <__ssputs_r+0x70>
 800c312:	463e      	mov	r6, r7
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	4632      	mov	r2, r6
 800c318:	4641      	mov	r1, r8
 800c31a:	f000 faab 	bl	800c874 <memmove>
 800c31e:	68a3      	ldr	r3, [r4, #8]
 800c320:	1b9b      	subs	r3, r3, r6
 800c322:	60a3      	str	r3, [r4, #8]
 800c324:	6823      	ldr	r3, [r4, #0]
 800c326:	4433      	add	r3, r6
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	2000      	movs	r0, #0
 800c32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c330:	462a      	mov	r2, r5
 800c332:	f000 fac9 	bl	800c8c8 <_realloc_r>
 800c336:	4606      	mov	r6, r0
 800c338:	2800      	cmp	r0, #0
 800c33a:	d1e0      	bne.n	800c2fe <__ssputs_r+0x5a>
 800c33c:	6921      	ldr	r1, [r4, #16]
 800c33e:	4650      	mov	r0, sl
 800c340:	f7ff feb8 	bl	800c0b4 <_free_r>
 800c344:	230c      	movs	r3, #12
 800c346:	f8ca 3000 	str.w	r3, [sl]
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c350:	81a3      	strh	r3, [r4, #12]
 800c352:	f04f 30ff 	mov.w	r0, #4294967295
 800c356:	e7e9      	b.n	800c32c <__ssputs_r+0x88>

0800c358 <_svfiprintf_r>:
 800c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35c:	4698      	mov	r8, r3
 800c35e:	898b      	ldrh	r3, [r1, #12]
 800c360:	061b      	lsls	r3, r3, #24
 800c362:	b09d      	sub	sp, #116	; 0x74
 800c364:	4607      	mov	r7, r0
 800c366:	460d      	mov	r5, r1
 800c368:	4614      	mov	r4, r2
 800c36a:	d50e      	bpl.n	800c38a <_svfiprintf_r+0x32>
 800c36c:	690b      	ldr	r3, [r1, #16]
 800c36e:	b963      	cbnz	r3, 800c38a <_svfiprintf_r+0x32>
 800c370:	2140      	movs	r1, #64	; 0x40
 800c372:	f7ff ff0b 	bl	800c18c <_malloc_r>
 800c376:	6028      	str	r0, [r5, #0]
 800c378:	6128      	str	r0, [r5, #16]
 800c37a:	b920      	cbnz	r0, 800c386 <_svfiprintf_r+0x2e>
 800c37c:	230c      	movs	r3, #12
 800c37e:	603b      	str	r3, [r7, #0]
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	e0d0      	b.n	800c528 <_svfiprintf_r+0x1d0>
 800c386:	2340      	movs	r3, #64	; 0x40
 800c388:	616b      	str	r3, [r5, #20]
 800c38a:	2300      	movs	r3, #0
 800c38c:	9309      	str	r3, [sp, #36]	; 0x24
 800c38e:	2320      	movs	r3, #32
 800c390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c394:	f8cd 800c 	str.w	r8, [sp, #12]
 800c398:	2330      	movs	r3, #48	; 0x30
 800c39a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c540 <_svfiprintf_r+0x1e8>
 800c39e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3a2:	f04f 0901 	mov.w	r9, #1
 800c3a6:	4623      	mov	r3, r4
 800c3a8:	469a      	mov	sl, r3
 800c3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3ae:	b10a      	cbz	r2, 800c3b4 <_svfiprintf_r+0x5c>
 800c3b0:	2a25      	cmp	r2, #37	; 0x25
 800c3b2:	d1f9      	bne.n	800c3a8 <_svfiprintf_r+0x50>
 800c3b4:	ebba 0b04 	subs.w	fp, sl, r4
 800c3b8:	d00b      	beq.n	800c3d2 <_svfiprintf_r+0x7a>
 800c3ba:	465b      	mov	r3, fp
 800c3bc:	4622      	mov	r2, r4
 800c3be:	4629      	mov	r1, r5
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7ff ff6f 	bl	800c2a4 <__ssputs_r>
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	f000 80a9 	beq.w	800c51e <_svfiprintf_r+0x1c6>
 800c3cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3ce:	445a      	add	r2, fp
 800c3d0:	9209      	str	r2, [sp, #36]	; 0x24
 800c3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 80a1 	beq.w	800c51e <_svfiprintf_r+0x1c6>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f04f 32ff 	mov.w	r2, #4294967295
 800c3e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3e6:	f10a 0a01 	add.w	sl, sl, #1
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	9307      	str	r3, [sp, #28]
 800c3ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3f2:	931a      	str	r3, [sp, #104]	; 0x68
 800c3f4:	4654      	mov	r4, sl
 800c3f6:	2205      	movs	r2, #5
 800c3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3fc:	4850      	ldr	r0, [pc, #320]	; (800c540 <_svfiprintf_r+0x1e8>)
 800c3fe:	f7f3 ff17 	bl	8000230 <memchr>
 800c402:	9a04      	ldr	r2, [sp, #16]
 800c404:	b9d8      	cbnz	r0, 800c43e <_svfiprintf_r+0xe6>
 800c406:	06d0      	lsls	r0, r2, #27
 800c408:	bf44      	itt	mi
 800c40a:	2320      	movmi	r3, #32
 800c40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c410:	0711      	lsls	r1, r2, #28
 800c412:	bf44      	itt	mi
 800c414:	232b      	movmi	r3, #43	; 0x2b
 800c416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c41a:	f89a 3000 	ldrb.w	r3, [sl]
 800c41e:	2b2a      	cmp	r3, #42	; 0x2a
 800c420:	d015      	beq.n	800c44e <_svfiprintf_r+0xf6>
 800c422:	9a07      	ldr	r2, [sp, #28]
 800c424:	4654      	mov	r4, sl
 800c426:	2000      	movs	r0, #0
 800c428:	f04f 0c0a 	mov.w	ip, #10
 800c42c:	4621      	mov	r1, r4
 800c42e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c432:	3b30      	subs	r3, #48	; 0x30
 800c434:	2b09      	cmp	r3, #9
 800c436:	d94d      	bls.n	800c4d4 <_svfiprintf_r+0x17c>
 800c438:	b1b0      	cbz	r0, 800c468 <_svfiprintf_r+0x110>
 800c43a:	9207      	str	r2, [sp, #28]
 800c43c:	e014      	b.n	800c468 <_svfiprintf_r+0x110>
 800c43e:	eba0 0308 	sub.w	r3, r0, r8
 800c442:	fa09 f303 	lsl.w	r3, r9, r3
 800c446:	4313      	orrs	r3, r2
 800c448:	9304      	str	r3, [sp, #16]
 800c44a:	46a2      	mov	sl, r4
 800c44c:	e7d2      	b.n	800c3f4 <_svfiprintf_r+0x9c>
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	1d19      	adds	r1, r3, #4
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	9103      	str	r1, [sp, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	bfbb      	ittet	lt
 800c45a:	425b      	neglt	r3, r3
 800c45c:	f042 0202 	orrlt.w	r2, r2, #2
 800c460:	9307      	strge	r3, [sp, #28]
 800c462:	9307      	strlt	r3, [sp, #28]
 800c464:	bfb8      	it	lt
 800c466:	9204      	strlt	r2, [sp, #16]
 800c468:	7823      	ldrb	r3, [r4, #0]
 800c46a:	2b2e      	cmp	r3, #46	; 0x2e
 800c46c:	d10c      	bne.n	800c488 <_svfiprintf_r+0x130>
 800c46e:	7863      	ldrb	r3, [r4, #1]
 800c470:	2b2a      	cmp	r3, #42	; 0x2a
 800c472:	d134      	bne.n	800c4de <_svfiprintf_r+0x186>
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	1d1a      	adds	r2, r3, #4
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	9203      	str	r2, [sp, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	bfb8      	it	lt
 800c480:	f04f 33ff 	movlt.w	r3, #4294967295
 800c484:	3402      	adds	r4, #2
 800c486:	9305      	str	r3, [sp, #20]
 800c488:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c550 <_svfiprintf_r+0x1f8>
 800c48c:	7821      	ldrb	r1, [r4, #0]
 800c48e:	2203      	movs	r2, #3
 800c490:	4650      	mov	r0, sl
 800c492:	f7f3 fecd 	bl	8000230 <memchr>
 800c496:	b138      	cbz	r0, 800c4a8 <_svfiprintf_r+0x150>
 800c498:	9b04      	ldr	r3, [sp, #16]
 800c49a:	eba0 000a 	sub.w	r0, r0, sl
 800c49e:	2240      	movs	r2, #64	; 0x40
 800c4a0:	4082      	lsls	r2, r0
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	3401      	adds	r4, #1
 800c4a6:	9304      	str	r3, [sp, #16]
 800c4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ac:	4825      	ldr	r0, [pc, #148]	; (800c544 <_svfiprintf_r+0x1ec>)
 800c4ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4b2:	2206      	movs	r2, #6
 800c4b4:	f7f3 febc 	bl	8000230 <memchr>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d038      	beq.n	800c52e <_svfiprintf_r+0x1d6>
 800c4bc:	4b22      	ldr	r3, [pc, #136]	; (800c548 <_svfiprintf_r+0x1f0>)
 800c4be:	bb1b      	cbnz	r3, 800c508 <_svfiprintf_r+0x1b0>
 800c4c0:	9b03      	ldr	r3, [sp, #12]
 800c4c2:	3307      	adds	r3, #7
 800c4c4:	f023 0307 	bic.w	r3, r3, #7
 800c4c8:	3308      	adds	r3, #8
 800c4ca:	9303      	str	r3, [sp, #12]
 800c4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ce:	4433      	add	r3, r6
 800c4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d2:	e768      	b.n	800c3a6 <_svfiprintf_r+0x4e>
 800c4d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4d8:	460c      	mov	r4, r1
 800c4da:	2001      	movs	r0, #1
 800c4dc:	e7a6      	b.n	800c42c <_svfiprintf_r+0xd4>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	3401      	adds	r4, #1
 800c4e2:	9305      	str	r3, [sp, #20]
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	f04f 0c0a 	mov.w	ip, #10
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4f0:	3a30      	subs	r2, #48	; 0x30
 800c4f2:	2a09      	cmp	r2, #9
 800c4f4:	d903      	bls.n	800c4fe <_svfiprintf_r+0x1a6>
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0c6      	beq.n	800c488 <_svfiprintf_r+0x130>
 800c4fa:	9105      	str	r1, [sp, #20]
 800c4fc:	e7c4      	b.n	800c488 <_svfiprintf_r+0x130>
 800c4fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c502:	4604      	mov	r4, r0
 800c504:	2301      	movs	r3, #1
 800c506:	e7f0      	b.n	800c4ea <_svfiprintf_r+0x192>
 800c508:	ab03      	add	r3, sp, #12
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	462a      	mov	r2, r5
 800c50e:	4b0f      	ldr	r3, [pc, #60]	; (800c54c <_svfiprintf_r+0x1f4>)
 800c510:	a904      	add	r1, sp, #16
 800c512:	4638      	mov	r0, r7
 800c514:	f3af 8000 	nop.w
 800c518:	1c42      	adds	r2, r0, #1
 800c51a:	4606      	mov	r6, r0
 800c51c:	d1d6      	bne.n	800c4cc <_svfiprintf_r+0x174>
 800c51e:	89ab      	ldrh	r3, [r5, #12]
 800c520:	065b      	lsls	r3, r3, #25
 800c522:	f53f af2d 	bmi.w	800c380 <_svfiprintf_r+0x28>
 800c526:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c528:	b01d      	add	sp, #116	; 0x74
 800c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52e:	ab03      	add	r3, sp, #12
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	462a      	mov	r2, r5
 800c534:	4b05      	ldr	r3, [pc, #20]	; (800c54c <_svfiprintf_r+0x1f4>)
 800c536:	a904      	add	r1, sp, #16
 800c538:	4638      	mov	r0, r7
 800c53a:	f000 f879 	bl	800c630 <_printf_i>
 800c53e:	e7eb      	b.n	800c518 <_svfiprintf_r+0x1c0>
 800c540:	0800c9d4 	.word	0x0800c9d4
 800c544:	0800c9de 	.word	0x0800c9de
 800c548:	00000000 	.word	0x00000000
 800c54c:	0800c2a5 	.word	0x0800c2a5
 800c550:	0800c9da 	.word	0x0800c9da

0800c554 <_printf_common>:
 800c554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c558:	4616      	mov	r6, r2
 800c55a:	4699      	mov	r9, r3
 800c55c:	688a      	ldr	r2, [r1, #8]
 800c55e:	690b      	ldr	r3, [r1, #16]
 800c560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c564:	4293      	cmp	r3, r2
 800c566:	bfb8      	it	lt
 800c568:	4613      	movlt	r3, r2
 800c56a:	6033      	str	r3, [r6, #0]
 800c56c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c570:	4607      	mov	r7, r0
 800c572:	460c      	mov	r4, r1
 800c574:	b10a      	cbz	r2, 800c57a <_printf_common+0x26>
 800c576:	3301      	adds	r3, #1
 800c578:	6033      	str	r3, [r6, #0]
 800c57a:	6823      	ldr	r3, [r4, #0]
 800c57c:	0699      	lsls	r1, r3, #26
 800c57e:	bf42      	ittt	mi
 800c580:	6833      	ldrmi	r3, [r6, #0]
 800c582:	3302      	addmi	r3, #2
 800c584:	6033      	strmi	r3, [r6, #0]
 800c586:	6825      	ldr	r5, [r4, #0]
 800c588:	f015 0506 	ands.w	r5, r5, #6
 800c58c:	d106      	bne.n	800c59c <_printf_common+0x48>
 800c58e:	f104 0a19 	add.w	sl, r4, #25
 800c592:	68e3      	ldr	r3, [r4, #12]
 800c594:	6832      	ldr	r2, [r6, #0]
 800c596:	1a9b      	subs	r3, r3, r2
 800c598:	42ab      	cmp	r3, r5
 800c59a:	dc26      	bgt.n	800c5ea <_printf_common+0x96>
 800c59c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5a0:	1e13      	subs	r3, r2, #0
 800c5a2:	6822      	ldr	r2, [r4, #0]
 800c5a4:	bf18      	it	ne
 800c5a6:	2301      	movne	r3, #1
 800c5a8:	0692      	lsls	r2, r2, #26
 800c5aa:	d42b      	bmi.n	800c604 <_printf_common+0xb0>
 800c5ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5b0:	4649      	mov	r1, r9
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	47c0      	blx	r8
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	d01e      	beq.n	800c5f8 <_printf_common+0xa4>
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	6922      	ldr	r2, [r4, #16]
 800c5be:	f003 0306 	and.w	r3, r3, #6
 800c5c2:	2b04      	cmp	r3, #4
 800c5c4:	bf02      	ittt	eq
 800c5c6:	68e5      	ldreq	r5, [r4, #12]
 800c5c8:	6833      	ldreq	r3, [r6, #0]
 800c5ca:	1aed      	subeq	r5, r5, r3
 800c5cc:	68a3      	ldr	r3, [r4, #8]
 800c5ce:	bf0c      	ite	eq
 800c5d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5d4:	2500      	movne	r5, #0
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	bfc4      	itt	gt
 800c5da:	1a9b      	subgt	r3, r3, r2
 800c5dc:	18ed      	addgt	r5, r5, r3
 800c5de:	2600      	movs	r6, #0
 800c5e0:	341a      	adds	r4, #26
 800c5e2:	42b5      	cmp	r5, r6
 800c5e4:	d11a      	bne.n	800c61c <_printf_common+0xc8>
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	e008      	b.n	800c5fc <_printf_common+0xa8>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	4652      	mov	r2, sl
 800c5ee:	4649      	mov	r1, r9
 800c5f0:	4638      	mov	r0, r7
 800c5f2:	47c0      	blx	r8
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	d103      	bne.n	800c600 <_printf_common+0xac>
 800c5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c600:	3501      	adds	r5, #1
 800c602:	e7c6      	b.n	800c592 <_printf_common+0x3e>
 800c604:	18e1      	adds	r1, r4, r3
 800c606:	1c5a      	adds	r2, r3, #1
 800c608:	2030      	movs	r0, #48	; 0x30
 800c60a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c60e:	4422      	add	r2, r4
 800c610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c618:	3302      	adds	r3, #2
 800c61a:	e7c7      	b.n	800c5ac <_printf_common+0x58>
 800c61c:	2301      	movs	r3, #1
 800c61e:	4622      	mov	r2, r4
 800c620:	4649      	mov	r1, r9
 800c622:	4638      	mov	r0, r7
 800c624:	47c0      	blx	r8
 800c626:	3001      	adds	r0, #1
 800c628:	d0e6      	beq.n	800c5f8 <_printf_common+0xa4>
 800c62a:	3601      	adds	r6, #1
 800c62c:	e7d9      	b.n	800c5e2 <_printf_common+0x8e>
	...

0800c630 <_printf_i>:
 800c630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c634:	7e0f      	ldrb	r7, [r1, #24]
 800c636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c638:	2f78      	cmp	r7, #120	; 0x78
 800c63a:	4691      	mov	r9, r2
 800c63c:	4680      	mov	r8, r0
 800c63e:	460c      	mov	r4, r1
 800c640:	469a      	mov	sl, r3
 800c642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c646:	d807      	bhi.n	800c658 <_printf_i+0x28>
 800c648:	2f62      	cmp	r7, #98	; 0x62
 800c64a:	d80a      	bhi.n	800c662 <_printf_i+0x32>
 800c64c:	2f00      	cmp	r7, #0
 800c64e:	f000 80d4 	beq.w	800c7fa <_printf_i+0x1ca>
 800c652:	2f58      	cmp	r7, #88	; 0x58
 800c654:	f000 80c0 	beq.w	800c7d8 <_printf_i+0x1a8>
 800c658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c65c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c660:	e03a      	b.n	800c6d8 <_printf_i+0xa8>
 800c662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c666:	2b15      	cmp	r3, #21
 800c668:	d8f6      	bhi.n	800c658 <_printf_i+0x28>
 800c66a:	a101      	add	r1, pc, #4	; (adr r1, 800c670 <_printf_i+0x40>)
 800c66c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c670:	0800c6c9 	.word	0x0800c6c9
 800c674:	0800c6dd 	.word	0x0800c6dd
 800c678:	0800c659 	.word	0x0800c659
 800c67c:	0800c659 	.word	0x0800c659
 800c680:	0800c659 	.word	0x0800c659
 800c684:	0800c659 	.word	0x0800c659
 800c688:	0800c6dd 	.word	0x0800c6dd
 800c68c:	0800c659 	.word	0x0800c659
 800c690:	0800c659 	.word	0x0800c659
 800c694:	0800c659 	.word	0x0800c659
 800c698:	0800c659 	.word	0x0800c659
 800c69c:	0800c7e1 	.word	0x0800c7e1
 800c6a0:	0800c709 	.word	0x0800c709
 800c6a4:	0800c79b 	.word	0x0800c79b
 800c6a8:	0800c659 	.word	0x0800c659
 800c6ac:	0800c659 	.word	0x0800c659
 800c6b0:	0800c803 	.word	0x0800c803
 800c6b4:	0800c659 	.word	0x0800c659
 800c6b8:	0800c709 	.word	0x0800c709
 800c6bc:	0800c659 	.word	0x0800c659
 800c6c0:	0800c659 	.word	0x0800c659
 800c6c4:	0800c7a3 	.word	0x0800c7a3
 800c6c8:	682b      	ldr	r3, [r5, #0]
 800c6ca:	1d1a      	adds	r2, r3, #4
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	602a      	str	r2, [r5, #0]
 800c6d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e09f      	b.n	800c81c <_printf_i+0x1ec>
 800c6dc:	6820      	ldr	r0, [r4, #0]
 800c6de:	682b      	ldr	r3, [r5, #0]
 800c6e0:	0607      	lsls	r7, r0, #24
 800c6e2:	f103 0104 	add.w	r1, r3, #4
 800c6e6:	6029      	str	r1, [r5, #0]
 800c6e8:	d501      	bpl.n	800c6ee <_printf_i+0xbe>
 800c6ea:	681e      	ldr	r6, [r3, #0]
 800c6ec:	e003      	b.n	800c6f6 <_printf_i+0xc6>
 800c6ee:	0646      	lsls	r6, r0, #25
 800c6f0:	d5fb      	bpl.n	800c6ea <_printf_i+0xba>
 800c6f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c6f6:	2e00      	cmp	r6, #0
 800c6f8:	da03      	bge.n	800c702 <_printf_i+0xd2>
 800c6fa:	232d      	movs	r3, #45	; 0x2d
 800c6fc:	4276      	negs	r6, r6
 800c6fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c702:	485a      	ldr	r0, [pc, #360]	; (800c86c <_printf_i+0x23c>)
 800c704:	230a      	movs	r3, #10
 800c706:	e012      	b.n	800c72e <_printf_i+0xfe>
 800c708:	682b      	ldr	r3, [r5, #0]
 800c70a:	6820      	ldr	r0, [r4, #0]
 800c70c:	1d19      	adds	r1, r3, #4
 800c70e:	6029      	str	r1, [r5, #0]
 800c710:	0605      	lsls	r5, r0, #24
 800c712:	d501      	bpl.n	800c718 <_printf_i+0xe8>
 800c714:	681e      	ldr	r6, [r3, #0]
 800c716:	e002      	b.n	800c71e <_printf_i+0xee>
 800c718:	0641      	lsls	r1, r0, #25
 800c71a:	d5fb      	bpl.n	800c714 <_printf_i+0xe4>
 800c71c:	881e      	ldrh	r6, [r3, #0]
 800c71e:	4853      	ldr	r0, [pc, #332]	; (800c86c <_printf_i+0x23c>)
 800c720:	2f6f      	cmp	r7, #111	; 0x6f
 800c722:	bf0c      	ite	eq
 800c724:	2308      	moveq	r3, #8
 800c726:	230a      	movne	r3, #10
 800c728:	2100      	movs	r1, #0
 800c72a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c72e:	6865      	ldr	r5, [r4, #4]
 800c730:	60a5      	str	r5, [r4, #8]
 800c732:	2d00      	cmp	r5, #0
 800c734:	bfa2      	ittt	ge
 800c736:	6821      	ldrge	r1, [r4, #0]
 800c738:	f021 0104 	bicge.w	r1, r1, #4
 800c73c:	6021      	strge	r1, [r4, #0]
 800c73e:	b90e      	cbnz	r6, 800c744 <_printf_i+0x114>
 800c740:	2d00      	cmp	r5, #0
 800c742:	d04b      	beq.n	800c7dc <_printf_i+0x1ac>
 800c744:	4615      	mov	r5, r2
 800c746:	fbb6 f1f3 	udiv	r1, r6, r3
 800c74a:	fb03 6711 	mls	r7, r3, r1, r6
 800c74e:	5dc7      	ldrb	r7, [r0, r7]
 800c750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c754:	4637      	mov	r7, r6
 800c756:	42bb      	cmp	r3, r7
 800c758:	460e      	mov	r6, r1
 800c75a:	d9f4      	bls.n	800c746 <_printf_i+0x116>
 800c75c:	2b08      	cmp	r3, #8
 800c75e:	d10b      	bne.n	800c778 <_printf_i+0x148>
 800c760:	6823      	ldr	r3, [r4, #0]
 800c762:	07de      	lsls	r6, r3, #31
 800c764:	d508      	bpl.n	800c778 <_printf_i+0x148>
 800c766:	6923      	ldr	r3, [r4, #16]
 800c768:	6861      	ldr	r1, [r4, #4]
 800c76a:	4299      	cmp	r1, r3
 800c76c:	bfde      	ittt	le
 800c76e:	2330      	movle	r3, #48	; 0x30
 800c770:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c774:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c778:	1b52      	subs	r2, r2, r5
 800c77a:	6122      	str	r2, [r4, #16]
 800c77c:	f8cd a000 	str.w	sl, [sp]
 800c780:	464b      	mov	r3, r9
 800c782:	aa03      	add	r2, sp, #12
 800c784:	4621      	mov	r1, r4
 800c786:	4640      	mov	r0, r8
 800c788:	f7ff fee4 	bl	800c554 <_printf_common>
 800c78c:	3001      	adds	r0, #1
 800c78e:	d14a      	bne.n	800c826 <_printf_i+0x1f6>
 800c790:	f04f 30ff 	mov.w	r0, #4294967295
 800c794:	b004      	add	sp, #16
 800c796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	f043 0320 	orr.w	r3, r3, #32
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	4833      	ldr	r0, [pc, #204]	; (800c870 <_printf_i+0x240>)
 800c7a4:	2778      	movs	r7, #120	; 0x78
 800c7a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	6829      	ldr	r1, [r5, #0]
 800c7ae:	061f      	lsls	r7, r3, #24
 800c7b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c7b4:	d402      	bmi.n	800c7bc <_printf_i+0x18c>
 800c7b6:	065f      	lsls	r7, r3, #25
 800c7b8:	bf48      	it	mi
 800c7ba:	b2b6      	uxthmi	r6, r6
 800c7bc:	07df      	lsls	r7, r3, #31
 800c7be:	bf48      	it	mi
 800c7c0:	f043 0320 	orrmi.w	r3, r3, #32
 800c7c4:	6029      	str	r1, [r5, #0]
 800c7c6:	bf48      	it	mi
 800c7c8:	6023      	strmi	r3, [r4, #0]
 800c7ca:	b91e      	cbnz	r6, 800c7d4 <_printf_i+0x1a4>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	f023 0320 	bic.w	r3, r3, #32
 800c7d2:	6023      	str	r3, [r4, #0]
 800c7d4:	2310      	movs	r3, #16
 800c7d6:	e7a7      	b.n	800c728 <_printf_i+0xf8>
 800c7d8:	4824      	ldr	r0, [pc, #144]	; (800c86c <_printf_i+0x23c>)
 800c7da:	e7e4      	b.n	800c7a6 <_printf_i+0x176>
 800c7dc:	4615      	mov	r5, r2
 800c7de:	e7bd      	b.n	800c75c <_printf_i+0x12c>
 800c7e0:	682b      	ldr	r3, [r5, #0]
 800c7e2:	6826      	ldr	r6, [r4, #0]
 800c7e4:	6961      	ldr	r1, [r4, #20]
 800c7e6:	1d18      	adds	r0, r3, #4
 800c7e8:	6028      	str	r0, [r5, #0]
 800c7ea:	0635      	lsls	r5, r6, #24
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	d501      	bpl.n	800c7f4 <_printf_i+0x1c4>
 800c7f0:	6019      	str	r1, [r3, #0]
 800c7f2:	e002      	b.n	800c7fa <_printf_i+0x1ca>
 800c7f4:	0670      	lsls	r0, r6, #25
 800c7f6:	d5fb      	bpl.n	800c7f0 <_printf_i+0x1c0>
 800c7f8:	8019      	strh	r1, [r3, #0]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	6123      	str	r3, [r4, #16]
 800c7fe:	4615      	mov	r5, r2
 800c800:	e7bc      	b.n	800c77c <_printf_i+0x14c>
 800c802:	682b      	ldr	r3, [r5, #0]
 800c804:	1d1a      	adds	r2, r3, #4
 800c806:	602a      	str	r2, [r5, #0]
 800c808:	681d      	ldr	r5, [r3, #0]
 800c80a:	6862      	ldr	r2, [r4, #4]
 800c80c:	2100      	movs	r1, #0
 800c80e:	4628      	mov	r0, r5
 800c810:	f7f3 fd0e 	bl	8000230 <memchr>
 800c814:	b108      	cbz	r0, 800c81a <_printf_i+0x1ea>
 800c816:	1b40      	subs	r0, r0, r5
 800c818:	6060      	str	r0, [r4, #4]
 800c81a:	6863      	ldr	r3, [r4, #4]
 800c81c:	6123      	str	r3, [r4, #16]
 800c81e:	2300      	movs	r3, #0
 800c820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c824:	e7aa      	b.n	800c77c <_printf_i+0x14c>
 800c826:	6923      	ldr	r3, [r4, #16]
 800c828:	462a      	mov	r2, r5
 800c82a:	4649      	mov	r1, r9
 800c82c:	4640      	mov	r0, r8
 800c82e:	47d0      	blx	sl
 800c830:	3001      	adds	r0, #1
 800c832:	d0ad      	beq.n	800c790 <_printf_i+0x160>
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	079b      	lsls	r3, r3, #30
 800c838:	d413      	bmi.n	800c862 <_printf_i+0x232>
 800c83a:	68e0      	ldr	r0, [r4, #12]
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	4298      	cmp	r0, r3
 800c840:	bfb8      	it	lt
 800c842:	4618      	movlt	r0, r3
 800c844:	e7a6      	b.n	800c794 <_printf_i+0x164>
 800c846:	2301      	movs	r3, #1
 800c848:	4632      	mov	r2, r6
 800c84a:	4649      	mov	r1, r9
 800c84c:	4640      	mov	r0, r8
 800c84e:	47d0      	blx	sl
 800c850:	3001      	adds	r0, #1
 800c852:	d09d      	beq.n	800c790 <_printf_i+0x160>
 800c854:	3501      	adds	r5, #1
 800c856:	68e3      	ldr	r3, [r4, #12]
 800c858:	9903      	ldr	r1, [sp, #12]
 800c85a:	1a5b      	subs	r3, r3, r1
 800c85c:	42ab      	cmp	r3, r5
 800c85e:	dcf2      	bgt.n	800c846 <_printf_i+0x216>
 800c860:	e7eb      	b.n	800c83a <_printf_i+0x20a>
 800c862:	2500      	movs	r5, #0
 800c864:	f104 0619 	add.w	r6, r4, #25
 800c868:	e7f5      	b.n	800c856 <_printf_i+0x226>
 800c86a:	bf00      	nop
 800c86c:	0800c9e5 	.word	0x0800c9e5
 800c870:	0800c9f6 	.word	0x0800c9f6

0800c874 <memmove>:
 800c874:	4288      	cmp	r0, r1
 800c876:	b510      	push	{r4, lr}
 800c878:	eb01 0402 	add.w	r4, r1, r2
 800c87c:	d902      	bls.n	800c884 <memmove+0x10>
 800c87e:	4284      	cmp	r4, r0
 800c880:	4623      	mov	r3, r4
 800c882:	d807      	bhi.n	800c894 <memmove+0x20>
 800c884:	1e43      	subs	r3, r0, #1
 800c886:	42a1      	cmp	r1, r4
 800c888:	d008      	beq.n	800c89c <memmove+0x28>
 800c88a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c88e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c892:	e7f8      	b.n	800c886 <memmove+0x12>
 800c894:	4402      	add	r2, r0
 800c896:	4601      	mov	r1, r0
 800c898:	428a      	cmp	r2, r1
 800c89a:	d100      	bne.n	800c89e <memmove+0x2a>
 800c89c:	bd10      	pop	{r4, pc}
 800c89e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8a6:	e7f7      	b.n	800c898 <memmove+0x24>

0800c8a8 <_sbrk_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d06      	ldr	r5, [pc, #24]	; (800c8c4 <_sbrk_r+0x1c>)
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	602b      	str	r3, [r5, #0]
 800c8b4:	f7f6 fe14 	bl	80034e0 <_sbrk>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_sbrk_r+0x1a>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_sbrk_r+0x1a>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	20000ec8 	.word	0x20000ec8

0800c8c8 <_realloc_r>:
 800c8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	4614      	mov	r4, r2
 800c8d0:	460e      	mov	r6, r1
 800c8d2:	b921      	cbnz	r1, 800c8de <_realloc_r+0x16>
 800c8d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d8:	4611      	mov	r1, r2
 800c8da:	f7ff bc57 	b.w	800c18c <_malloc_r>
 800c8de:	b92a      	cbnz	r2, 800c8ec <_realloc_r+0x24>
 800c8e0:	f7ff fbe8 	bl	800c0b4 <_free_r>
 800c8e4:	4625      	mov	r5, r4
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ec:	f000 f81b 	bl	800c926 <_malloc_usable_size_r>
 800c8f0:	4284      	cmp	r4, r0
 800c8f2:	4607      	mov	r7, r0
 800c8f4:	d802      	bhi.n	800c8fc <_realloc_r+0x34>
 800c8f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8fa:	d812      	bhi.n	800c922 <_realloc_r+0x5a>
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	4640      	mov	r0, r8
 800c900:	f7ff fc44 	bl	800c18c <_malloc_r>
 800c904:	4605      	mov	r5, r0
 800c906:	2800      	cmp	r0, #0
 800c908:	d0ed      	beq.n	800c8e6 <_realloc_r+0x1e>
 800c90a:	42bc      	cmp	r4, r7
 800c90c:	4622      	mov	r2, r4
 800c90e:	4631      	mov	r1, r6
 800c910:	bf28      	it	cs
 800c912:	463a      	movcs	r2, r7
 800c914:	f7ff fbc0 	bl	800c098 <memcpy>
 800c918:	4631      	mov	r1, r6
 800c91a:	4640      	mov	r0, r8
 800c91c:	f7ff fbca 	bl	800c0b4 <_free_r>
 800c920:	e7e1      	b.n	800c8e6 <_realloc_r+0x1e>
 800c922:	4635      	mov	r5, r6
 800c924:	e7df      	b.n	800c8e6 <_realloc_r+0x1e>

0800c926 <_malloc_usable_size_r>:
 800c926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c92a:	1f18      	subs	r0, r3, #4
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	bfbc      	itt	lt
 800c930:	580b      	ldrlt	r3, [r1, r0]
 800c932:	18c0      	addlt	r0, r0, r3
 800c934:	4770      	bx	lr
	...

0800c938 <_init>:
 800c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93a:	bf00      	nop
 800c93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c93e:	bc08      	pop	{r3}
 800c940:	469e      	mov	lr, r3
 800c942:	4770      	bx	lr

0800c944 <_fini>:
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	bf00      	nop
 800c948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94a:	bc08      	pop	{r3}
 800c94c:	469e      	mov	lr, r3
 800c94e:	4770      	bx	lr
