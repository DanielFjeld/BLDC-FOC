
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e618  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800e7f8  0800e7f8  0001e7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8d8  0800e8d8  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8d8  0800e8d8  0001e8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8e0  0800e8e0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8e0  0800e8e0  0001e8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8e4  0800e8e4  0001e8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e8e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004acc  20000190  0800ea78  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004c5c  0800ea78  00024c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f606  00000000  00000000  00020203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000616d  00000000  00000000  0004f809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002488  00000000  00000000  00055978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c19  00000000  00000000  00057e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002689c  00000000  00000000  00059a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000300a2  00000000  00000000  000802b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1607  00000000  00000000  000b0357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009eac  00000000  00000000  001a1960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001ab80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000190 	.word	0x20000190
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e7e0 	.word	0x0800e7e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000194 	.word	0x20000194
 800021c:	0800e7e0 	.word	0x0800e7e0

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b970 	b.w	8000e04 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	460f      	mov	r7, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4694      	mov	ip, r2
 8000b50:	d965      	bls.n	8000c1e <__udivmoddi4+0xe2>
 8000b52:	fab2 f382 	clz	r3, r2
 8000b56:	b143      	cbz	r3, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b5c:	f1c3 0220 	rsb	r2, r3, #32
 8000b60:	409f      	lsls	r7, r3
 8000b62:	fa20 f202 	lsr.w	r2, r0, r2
 8000b66:	4317      	orrs	r7, r2
 8000b68:	409c      	lsls	r4, r3
 8000b6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b6e:	fa1f f58c 	uxth.w	r5, ip
 8000b72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b76:	0c22      	lsrs	r2, r4, #16
 8000b78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b80:	fb01 f005 	mul.w	r0, r1, r5
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b88:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b90:	f080 811c 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000b94:	4290      	cmp	r0, r2
 8000b96:	f240 8119 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a12      	subs	r2, r2, r0
 8000ba0:	b2a4      	uxth	r4, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bae:	fb00 f505 	mul.w	r5, r0, r5
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x90>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x294>
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x294>
 8000bc8:	4464      	add	r4, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11e      	cbz	r6, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40dc      	lsrs	r4, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e9c6 4300 	strd	r4, r3, [r6]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0xbc>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80ed 	beq.w	8000dc6 <__udivmoddi4+0x28a>
 8000bec:	2100      	movs	r1, #0
 8000bee:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	fab3 f183 	clz	r1, r3
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d149      	bne.n	8000c94 <__udivmoddi4+0x158>
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	d302      	bcc.n	8000c0a <__udivmoddi4+0xce>
 8000c04:	4282      	cmp	r2, r0
 8000c06:	f200 80f8 	bhi.w	8000dfa <__udivmoddi4+0x2be>
 8000c0a:	1a84      	subs	r4, r0, r2
 8000c0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c10:	2001      	movs	r0, #1
 8000c12:	4617      	mov	r7, r2
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d0e2      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	e9c6 4700 	strd	r4, r7, [r6]
 8000c1c:	e7df      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xe6>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8090 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2c:	1a8a      	subs	r2, r1, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2101      	movs	r1, #1
 8000c38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c40:	0c22      	lsrs	r2, r4, #16
 8000c42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c46:	fb0e f005 	mul.w	r0, lr, r5
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2b8>
 8000c5e:	4645      	mov	r5, r8
 8000c60:	1a12      	subs	r2, r2, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c68:	fb07 2210 	mls	r2, r7, r0, r2
 8000c6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x14e>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x14c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2c2>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c92:	e79f      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca6:	fa20 f307 	lsr.w	r3, r0, r7
 8000caa:	40fd      	lsrs	r5, r7
 8000cac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb0:	4323      	orrs	r3, r4
 8000cb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	fb09 5518 	mls	r5, r9, r8, r5
 8000cbe:	0c1c      	lsrs	r4, r3, #16
 8000cc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	fa00 f001 	lsl.w	r0, r0, r1
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4464      	add	r4, ip
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	b29d      	uxth	r5, r3
 8000cf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2ac>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2ac>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46ae      	mov	lr, r5
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x29c>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x298>
 8000d2c:	b156      	cbz	r6, 8000d44 <__udivmoddi4+0x208>
 8000d2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d32:	eb64 040e 	sbc.w	r4, r4, lr
 8000d36:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3a:	40ca      	lsrs	r2, r1
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	e9c6 7400 	strd	r7, r4, [r6]
 8000d44:	4618      	mov	r0, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f1c3 0120 	rsb	r1, r3, #32
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	fa20 f201 	lsr.w	r2, r0, r1
 8000d58:	fa25 f101 	lsr.w	r1, r5, r1
 8000d5c:	409d      	lsls	r5, r3
 8000d5e:	432a      	orrs	r2, r5
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d76:	fb00 f50e 	mul.w	r5, r0, lr
 8000d7a:	428d      	cmp	r5, r1
 8000d7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x258>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000d8c:	428d      	cmp	r5, r1
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1b49      	subs	r1, r1, r5
 8000d96:	b292      	uxth	r2, r2
 8000d98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000da0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da4:	fb05 f10e 	mul.w	r1, r5, lr
 8000da8:	4291      	cmp	r1, r2
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x282>
 8000dac:	eb1c 0202 	adds.w	r2, ip, r2
 8000db0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000dba:	3d02      	subs	r5, #2
 8000dbc:	4462      	add	r2, ip
 8000dbe:	1a52      	subs	r2, r2, r1
 8000dc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0xfc>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xa2>
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e6e6      	b.n	8000b9e <__udivmoddi4+0x62>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x90>
 8000dd4:	4548      	cmp	r0, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de4:	4645      	mov	r5, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x282>
 8000de8:	462b      	mov	r3, r5
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x258>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df4:	3d02      	subs	r5, #2
 8000df6:	4462      	add	r2, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x124>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e70a      	b.n	8000c14 <__udivmoddi4+0xd8>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x14e>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <CTRL_init>:

//angle PID


//initialization
void CTRL_init(void){
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	//create thread
//	CTRL_attr.name = "Control thread";
//	CTRL_attr.priority = 8;
//	CTRL_thread_id = osThreadNew((void *)CTRL_thread, NULL, &CTRL_attr);
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <CTRL_init_PWM>:

//thread
void CTRL_init_PWM(void){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4823      	ldr	r0, [pc, #140]	; (8000eb0 <CTRL_init_PWM+0x98>)
 8000e22:	f006 ff1d 	bl	8007c60 <HAL_TIM_PWM_Start>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <CTRL_init_PWM+0x18>
 8000e2c:	f001 fdde 	bl	80029ec <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8000e30:	2100      	movs	r1, #0
 8000e32:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <CTRL_init_PWM+0x98>)
 8000e34:	f008 f812 	bl	8008e5c <HAL_TIMEx_PWMN_Start>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <CTRL_init_PWM+0x2a>
 8000e3e:	f001 fdd5 	bl	80029ec <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8000e42:	2104      	movs	r1, #4
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <CTRL_init_PWM+0x98>)
 8000e46:	f006 ff0b 	bl	8007c60 <HAL_TIM_PWM_Start>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <CTRL_init_PWM+0x3c>
 8000e50:	f001 fdcc 	bl	80029ec <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8000e54:	2104      	movs	r1, #4
 8000e56:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <CTRL_init_PWM+0x98>)
 8000e58:	f008 f800 	bl	8008e5c <HAL_TIMEx_PWMN_Start>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <CTRL_init_PWM+0x4e>
 8000e62:	f001 fdc3 	bl	80029ec <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8000e66:	2108      	movs	r1, #8
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <CTRL_init_PWM+0x98>)
 8000e6a:	f006 fef9 	bl	8007c60 <HAL_TIM_PWM_Start>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <CTRL_init_PWM+0x60>
 8000e74:	f001 fdba 	bl	80029ec <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8000e78:	2108      	movs	r1, #8
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <CTRL_init_PWM+0x98>)
 8000e7c:	f007 ffee 	bl	8008e5c <HAL_TIMEx_PWMN_Start>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <CTRL_init_PWM+0x72>
 8000e86:	f001 fdb1 	bl	80029ec <Error_Handler>

	TIM1->CCR1 = 0;
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <CTRL_init_PWM+0x9c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <CTRL_init_PWM+0x9c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <CTRL_init_PWM+0x9c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 8000e9c:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <CTRL_init_PWM+0xa0>)
 8000e9e:	f006 fe13 	bl	8007ac8 <HAL_TIM_Base_Start_IT>

	uint16_t setpoint = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	80fb      	strh	r3, [r7, #6]
//		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
////		osDelay(1000);
////		inverter(90, 1000); //1499 is max voltage
////		osDelay(1000);
//	}
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200007bc 	.word	0x200007bc
 8000eb4:	40012c00 	.word	0x40012c00
 8000eb8:	20000808 	.word	0x20000808

08000ebc <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
float _sin(float deg){
	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
}

void inverter(uint16_t angle, uint16_t voltage){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	80fb      	strh	r3, [r7, #6]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	80bb      	strh	r3, [r7, #4]

	angle = angle%360;
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	4987      	ldr	r1, [pc, #540]	; (80010f0 <inverter+0x234>)
 8000ed2:	fba1 1202 	umull	r1, r2, r1, r2
 8000ed6:	0892      	lsrs	r2, r2, #2
 8000ed8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000edc:	fb01 f202 	mul.w	r2, r1, r2
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 8000ef0:	88fa      	ldrh	r2, [r7, #6]
 8000ef2:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <inverter+0x238>)
 8000ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef8:	0959      	lsrs	r1, r3, #5
 8000efa:	460b      	mov	r3, r1
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	1a5b      	subs	r3, r3, r1
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0e:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8000f12:	88bb      	ldrh	r3, [r7, #4]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1c:	eddf 6a76 	vldr	s13, [pc, #472]	; 80010f8 <inverter+0x23c>
 8000f20:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f28:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000f2c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f30:	ed9f 6a71 	vldr	s12, [pc, #452]	; 80010f8 <inverter+0x23c>
 8000f34:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f3c:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 80010fc <inverter+0x240>
 8000f40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f44:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000f48:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80010f8 <inverter+0x23c>
 8000f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f54:	eddf 5a68 	vldr	s11, [pc, #416]	; 80010f8 <inverter+0x23c>
 8000f58:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f5c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000f60:	eddf 5a66 	vldr	s11, [pc, #408]	; 80010fc <inverter+0x240>
 8000f64:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001100 <inverter+0x244>
 8000f70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f74:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f80:	ee17 3a90 	vmov	r3, s15
 8000f84:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))) );
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f94:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000f98:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f9c:	ed9f 6a57 	vldr	s12, [pc, #348]	; 80010fc <inverter+0x240>
 8000fa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fa4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000fa8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000fac:	eddf 6a53 	vldr	s13, [pc, #332]	; 80010fc <inverter+0x240>
 8000fb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc0:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001100 <inverter+0x244>
 8000fc4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fc8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd4:	ee17 3a90 	vmov	r3, s15
 8000fd8:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000fe0:	3303      	adds	r3, #3
 8000fe2:	89ba      	ldrh	r2, [r7, #12]
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	0fda      	lsrs	r2, r3, #31
 8000fe8:	4413      	add	r3, r2
 8000fea:	105b      	asrs	r3, r3, #1
 8000fec:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2b3b      	cmp	r3, #59	; 0x3b
 8000ff2:	d80c      	bhi.n	800100e <inverter+0x152>
		compare_M1 = T0;
 8000ff4:	897b      	ldrh	r3, [r7, #10]
 8000ff6:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 8000ff8:	897a      	ldrh	r2, [r7, #10]
 8000ffa:	89bb      	ldrh	r3, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8001000:	897a      	ldrh	r2, [r7, #10]
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	441a      	add	r2, r3
 8001006:	89bb      	ldrh	r3, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e060      	b.n	80010d0 <inverter+0x214>
		}
	else if(angle >= 60 && angle < 120){
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	2b3b      	cmp	r3, #59	; 0x3b
 8001012:	d90f      	bls.n	8001034 <inverter+0x178>
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	2b77      	cmp	r3, #119	; 0x77
 8001018:	d80c      	bhi.n	8001034 <inverter+0x178>
		compare_M1 = T0;
 800101a:	897b      	ldrh	r3, [r7, #10]
 800101c:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 800101e:	897a      	ldrh	r2, [r7, #10]
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	441a      	add	r2, r3
 8001024:	89bb      	ldrh	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 800102a:	897a      	ldrh	r2, [r7, #10]
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	4413      	add	r3, r2
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e04d      	b.n	80010d0 <inverter+0x214>
		}
	else if(angle >= 120 && angle < 180){
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	2b77      	cmp	r3, #119	; 0x77
 8001038:	d90f      	bls.n	800105a <inverter+0x19e>
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	2bb3      	cmp	r3, #179	; 0xb3
 800103e:	d80c      	bhi.n	800105a <inverter+0x19e>
		compare_M1 = T0+T2;
 8001040:	897a      	ldrh	r2, [r7, #10]
 8001042:	89bb      	ldrh	r3, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8001048:	897a      	ldrh	r2, [r7, #10]
 800104a:	89fb      	ldrh	r3, [r7, #14]
 800104c:	441a      	add	r2, r3
 800104e:	89bb      	ldrh	r3, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001054:	897b      	ldrh	r3, [r7, #10]
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e03a      	b.n	80010d0 <inverter+0x214>
		}
	else if(angle >= 180 && angle < 240){
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2bb3      	cmp	r3, #179	; 0xb3
 800105e:	d90f      	bls.n	8001080 <inverter+0x1c4>
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	2bef      	cmp	r3, #239	; 0xef
 8001064:	d80c      	bhi.n	8001080 <inverter+0x1c4>
		compare_M1 = T0+T1+T2;
 8001066:	897a      	ldrh	r2, [r7, #10]
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	441a      	add	r2, r3
 800106c:	89bb      	ldrh	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 8001072:	897a      	ldrh	r2, [r7, #10]
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	4413      	add	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 800107a:	897b      	ldrh	r3, [r7, #10]
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e027      	b.n	80010d0 <inverter+0x214>
		}
	else if(angle >= 240 && angle < 300){
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	2bef      	cmp	r3, #239	; 0xef
 8001084:	d910      	bls.n	80010a8 <inverter+0x1ec>
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800108c:	d20c      	bcs.n	80010a8 <inverter+0x1ec>
		compare_M1 = T0+T1+T2;
 800108e:	897a      	ldrh	r2, [r7, #10]
 8001090:	89fb      	ldrh	r3, [r7, #14]
 8001092:	441a      	add	r2, r3
 8001094:	89bb      	ldrh	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 800109a:	897b      	ldrh	r3, [r7, #10]
 800109c:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 800109e:	897a      	ldrh	r2, [r7, #10]
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e013      	b.n	80010d0 <inverter+0x214>
		}
	else if(angle >= 300 && angle < 360){
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010ae:	d30f      	bcc.n	80010d0 <inverter+0x214>
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80010b6:	d20b      	bcs.n	80010d0 <inverter+0x214>
		compare_M1 = T0+T1;
 80010b8:	897a      	ldrh	r2, [r7, #10]
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	4413      	add	r3, r2
 80010be:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 80010c0:	897b      	ldrh	r3, [r7, #10]
 80010c2:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 80010c4:	897a      	ldrh	r2, [r7, #10]
 80010c6:	89fb      	ldrh	r3, [r7, #14]
 80010c8:	441a      	add	r2, r3
 80010ca:	89bb      	ldrh	r3, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]
		}

	//PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <inverter+0x248>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <inverter+0x248>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 80010dc:	4a09      	ldr	r2, [pc, #36]	; (8001104 <inverter+0x248>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80010e2:	bf00      	nop
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	16c16c17 	.word	0x16c16c17
 80010f4:	88888889 	.word	0x88888889
 80010f8:	42700000 	.word	0x42700000
 80010fc:	43340000 	.word	0x43340000
 8001100:	471e3400 	.word	0x471e3400
 8001104:	40012c00 	.word	0x40012c00

08001108 <shutoff>:
void shutoff(void){
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <shutoff+0x20>)
 800110e:	2200      	movs	r2, #0
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <shutoff+0x20>)
 8001114:	2200      	movs	r2, #0
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <shutoff+0x20>)
 800111a:	2200      	movs	r2, #0
 800111c:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40012c00 	.word	0x40012c00

0800112c <tim1_PWM_PulseFinishedCallback>:
void tim1_PWM_PulseFinishedCallback(void){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	//osThreadFlagsSet(CTRL_thread_id, update_flag);
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <FOC_init>:
#include "print_server.h"

void test_thread(void);
osThreadId_t test_thread_id;
osThreadAttr_t test_attr;
void FOC_init(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	test_attr.name = "Test thread";
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <FOC_init+0x30>)
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <FOC_init+0x34>)
 8001144:	601a      	str	r2, [r3, #0]
	test_attr.priority = 10;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <FOC_init+0x30>)
 8001148:	220a      	movs	r2, #10
 800114a:	619a      	str	r2, [r3, #24]
	test_thread_id = osThreadNew((void *)test_thread, NULL, &test_attr);
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <FOC_init+0x30>)
 800114e:	2100      	movs	r1, #0
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <FOC_init+0x38>)
 8001152:	f009 fc93 	bl	800aa7c <osThreadNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <FOC_init+0x3c>)
 800115a:	6013      	str	r3, [r2, #0]

	//Print_Server (USART communication)
	PrintServerInit(); //Priority 5
 800115c:	f000 fea8 	bl	8001eb0 <PrintServerInit>

	//Current measure thread
	current_init(); //Priority 0
 8001160:	f000 fb22 	bl	80017a8 <current_init>

	//Encoder 1 and 2 thread
	//encoder_init(); //Priority 1

	//CTRL thread (PWM generation, fault handling)
	CTRL_init(); //Priority 2
 8001164:	f7ff fe50 	bl	8000e08 <CTRL_init>

	//CAN thread
	//CAN_init(); //Priority 4


}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001b0 	.word	0x200001b0
 8001170:	0800e7f8 	.word	0x0800e7f8
 8001174:	0800117d 	.word	0x0800117d
 8001178:	200001ac 	.word	0x200001ac

0800117c <test_thread>:

void test_thread(void){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	while(1){
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	4811      	ldr	r0, [pc, #68]	; (80011cc <test_thread+0x50>)
 8001186:	f005 fa25 	bl	80065d4 <HAL_GPIO_WritePin>
		osDelay(100);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f009 fdd7 	bl	800ad3e <osDelay>
		HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8001190:	2201      	movs	r2, #1
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <test_thread+0x50>)
 8001196:	f005 fa1d 	bl	80065d4 <HAL_GPIO_WritePin>
		osDelay(100);
 800119a:	2064      	movs	r0, #100	; 0x64
 800119c:	f009 fdcf 	bl	800ad3e <osDelay>
//		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
//		osDelay(100);
//		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
		osDelay(100);
 80011a0:	2064      	movs	r0, #100	; 0x64
 80011a2:	f009 fdcc 	bl	800ad3e <osDelay>
		HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <test_thread+0x50>)
 80011ac:	f005 fa12 	bl	80065d4 <HAL_GPIO_WritePin>
		osDelay(100);
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f009 fdc4 	bl	800ad3e <osDelay>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <test_thread+0x50>)
 80011bc:	f005 fa0a 	bl	80065d4 <HAL_GPIO_WritePin>
		osDelay(500);
 80011c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c4:	f009 fdbb 	bl	800ad3e <osDelay>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 80011c8:	e7da      	b.n	8001180 <test_thread+0x4>
 80011ca:	bf00      	nop
 80011cc:	48000800 	.word	0x48000800

080011d0 <HAL_ADC_ConvCpltCallback>:
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	//set flag to indicate end of conversion
	if(hadc == &hadc1)ADC1_ConvCpltCallback(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <HAL_ADC_ConvCpltCallback+0x20>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d102      	bne.n	80011e6 <HAL_ADC_ConvCpltCallback+0x16>
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 fd87 	bl	8001cf4 <ADC1_ConvCpltCallback>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000310 	.word	0x20000310

080011f4 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 80011f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80cb 	beq.w	80013a0 <Compute+0x1ac>
	/*Compute all the working error variables*/
	double error = val->Setpoint - val->Input;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f807 	bl	8000228 <__aeabi_dsub>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double dInput = (val->Input - val->lastInput);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800122e:	f7fe fffb 	bl	8000228 <__aeabi_dsub>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	e9c7 2302 	strd	r2, r3, [r7, #8]
	val->outputSum+= (val->ki * error);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001246:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800124a:	f7ff f9a5 	bl	8000598 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4620      	mov	r0, r4
 8001254:	4629      	mov	r1, r5
 8001256:	f7fe ffe9 	bl	800022c <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800126a:	2b00      	cmp	r3, #0
 800126c:	d014      	beq.n	8001298 <Compute+0xa4>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800127a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800127e:	f7ff f98b 	bl	8000598 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7fe ffcd 	bl	8000228 <__aeabi_dsub>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80012a4:	f7ff fc08 	bl	8000ab8 <__aeabi_dcmpgt>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <Compute+0xc8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80012ba:	e010      	b.n	80012de <Compute+0xea>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80012c8:	f7ff fbd8 	bl	8000a7c <__aeabi_dcmplt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <Compute+0xea>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00c      	beq.n	8001302 <Compute+0x10e>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80012ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012f2:	f7ff f951 	bl	8000598 <__aeabi_dmul>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001300:	e006      	b.n	8001310 <Compute+0x11c>
	else val->Output = 0;
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001326:	f7ff f937 	bl	8000598 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4640      	mov	r0, r8
 8001330:	4649      	mov	r1, r9
 8001332:	f7fe ff79 	bl	8000228 <__aeabi_dsub>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4620      	mov	r0, r4
 800133c:	4629      	mov	r1, r5
 800133e:	f7fe ff75 	bl	800022c <__adddf3>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	e9c1 2302 	strd	r2, r3, [r1, #8]

	if(val->Output > val->outMax) val->Output = val->outMax;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001358:	f7ff fbae 	bl	8000ab8 <__aeabi_dcmpgt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <Compute+0x17c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800136e:	e010      	b.n	8001392 <Compute+0x19e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800137c:	f7ff fb7e 	bl	8000a7c <__aeabi_dcmplt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <Compute+0x19e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800139e:	e000      	b.n	80013a2 <Compute+0x1ae>
	if(!val->inAuto) return;
 80013a0:	bf00      	nop
}
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013aa:	0000      	movs	r0, r0
 80013ac:	0000      	movs	r0, r0
	...

080013b0 <SetTunings>:

void SetTunings(PID_instance *val, double Kp, double Ki, double Kd, double pOn)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08d      	sub	sp, #52	; 0x34
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6278      	str	r0, [r7, #36]	; 0x24
 80013b8:	ed87 0b06 	vstr	d0, [r7, #24]
 80013bc:	ed87 1b04 	vstr	d1, [r7, #16]
 80013c0:	ed87 2b02 	vstr	d2, [r7, #8]
 80013c4:	ed87 3b00 	vstr	d3, [r7]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013d4:	f7ff fb52 	bl	8000a7c <__aeabi_dcmplt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f040 80cf 	bne.w	800157e <SetTunings+0x1ce>
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ec:	f7ff fb46 	bl	8000a7c <__aeabi_dcmplt>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 80c3 	bne.w	800157e <SetTunings+0x1ce>
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001404:	f7ff fb3a 	bl	8000a7c <__aeabi_dcmplt>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 80b7 	bne.w	800157e <SetTunings+0x1ce>
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800141c:	f7ff fb2e 	bl	8000a7c <__aeabi_dcmplt>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 80ab 	bne.w	800157e <SetTunings+0x1ce>
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b58      	ldr	r3, [pc, #352]	; (8001590 <SetTunings+0x1e0>)
 800142e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001432:	f7ff fb41 	bl	8000ab8 <__aeabi_dcmpgt>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 80a0 	bne.w	800157e <SetTunings+0x1ce>

   val->pOnE = pOn>0; //some p on error is desired;
 800143e:	2301      	movs	r3, #1
 8001440:	461c      	mov	r4, r3
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800144e:	f7ff fb33 	bl	8000ab8 <__aeabi_dcmpgt>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <SetTunings+0xac>
 8001458:	2300      	movs	r3, #0
 800145a:	461c      	mov	r4, r3
 800145c:	b2e3      	uxtb	r3, r4
 800145e:	461a      	mov	r2, r3
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   val->pOnM = pOn<1; //some p on measurement is desired;
 8001466:	2301      	movs	r3, #1
 8001468:	461c      	mov	r4, r3
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b48      	ldr	r3, [pc, #288]	; (8001590 <SetTunings+0x1e0>)
 8001470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001474:	f7ff fb02 	bl	8000a7c <__aeabi_dcmplt>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <SetTunings+0xd2>
 800147e:	2300      	movs	r3, #0
 8001480:	461c      	mov	r4, r3
 8001482:	b2e3      	uxtb	r3, r4
 8001484:	461a      	mov	r2, r3
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

   double SampleTimeInSec = ((double)val->SampleTime)/1000000;
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f807 	bl	80004a4 <__aeabi_ui2d>
 8001496:	a33c      	add	r3, pc, #240	; (adr r3, 8001588 <SetTunings+0x1d8>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f9a6 	bl	80007ec <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   val->kp = Kp;
 80014a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   val->ki = Ki * SampleTimeInSec;
 80014b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014ba:	f7ff f86d 	bl	8000598 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
   val->kd = Kd / SampleTimeInSec;
 80014c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014d0:	f7ff f98c 	bl	80007ec <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014da:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  if(val->controllerDirection ==REVERSE)
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d129      	bne.n	800153a <SetTunings+0x18a>
   {
	  val->kp = (0 - val->kp);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014ec:	f04f 0000 	mov.w	r0, #0
 80014f0:	f04f 0100 	mov.w	r1, #0
 80014f4:	f7fe fe98 	bl	8000228 <__aeabi_dsub>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  val->ki = (0 - val->ki);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	f04f 0100 	mov.w	r1, #0
 8001510:	f7fe fe8a 	bl	8000228 <__aeabi_dsub>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800151a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	  val->kd = (0 - val->kd);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001524:	f04f 0000 	mov.w	r0, #0
 8001528:	f04f 0100 	mov.w	r1, #0
 800152c:	f7fe fe7c 	bl	8000228 <__aeabi_dsub>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001536:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
   }

  val->pOnEKp = pOn * val->kp;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001544:	f7ff f828 	bl	8000598 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800154e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
  val->pOnMKp = (1 - pOn) * val->kp;
 8001552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001556:	f04f 0000 	mov.w	r0, #0
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <SetTunings+0x1e0>)
 800155c:	f7fe fe64 	bl	8000228 <__aeabi_dsub>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800156e:	f7ff f813 	bl	8000598 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001578:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800157c:	e000      	b.n	8001580 <SetTunings+0x1d0>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 800157e:	bf00      	nop
}
 8001580:	3734      	adds	r7, #52	; 0x34
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	bf00      	nop
 8001588:	00000000 	.word	0x00000000
 800158c:	412e8480 	.word	0x412e8480
 8001590:	3ff00000 	.word	0x3ff00000

08001594 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	dd2e      	ble.n	8001602 <SetSampleTime+0x6e>
   {
      double ratio  = (double)NewSampleTime
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7fe ff8d 	bl	80004c4 <__aeabi_i2d>
 80015aa:	4604      	mov	r4, r0
 80015ac:	460d      	mov	r5, r1
                      / (double)val->SampleTime;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ff76 	bl	80004a4 <__aeabi_ui2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7ff f914 	bl	80007ec <__aeabi_ddiv>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      val->ki *= ratio;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80015d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015d6:	f7fe ffdf 	bl	8000598 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
      val->kd /= ratio;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80015ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015ee:	f7ff f8fd 	bl	80007ec <__aeabi_ddiv>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
      val->SampleTime = (unsigned long)NewSampleTime;
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	651a      	str	r2, [r3, #80]	; 0x50
   }
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bdb0      	pop	{r4, r5, r7, pc}

0800160a <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, double Min, double Max)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	6178      	str	r0, [r7, #20]
 8001612:	ed87 0b02 	vstr	d0, [r7, #8]
 8001616:	ed87 1b00 	vstr	d1, [r7]
   if(Min > Max) return;
 800161a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800161e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001622:	f7ff fa49 	bl	8000ab8 <__aeabi_dcmpgt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d150      	bne.n	80016ce <SetOutputLimits+0xc4>
   val->outMin = Min;
 800162c:	6979      	ldr	r1, [r7, #20]
 800162e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001632:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
   val->outMax = Max;
 8001636:	6979      	ldr	r1, [r7, #20]
 8001638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

   if(val->Output > val->outMax) val->Output = val->outMax;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800164c:	f7ff fa34 	bl	8000ab8 <__aeabi_dcmpgt>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <SetOutputLimits+0x5a>
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800165c:	6979      	ldr	r1, [r7, #20]
 800165e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001662:	e010      	b.n	8001686 <SetOutputLimits+0x7c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001670:	f7ff fa04 	bl	8000a7c <__aeabi_dcmplt>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <SetOutputLimits+0x7c>
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001680:	6979      	ldr	r1, [r7, #20]
 8001682:	e9c1 2302 	strd	r2, r3, [r1, #8]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001692:	f7ff fa11 	bl	8000ab8 <__aeabi_dcmpgt>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <SetOutputLimits+0xa0>
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80016a2:	6979      	ldr	r1, [r7, #20]
 80016a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80016a8:	e012      	b.n	80016d0 <SetOutputLimits+0xc6>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80016b6:	f7ff f9e1 	bl	8000a7c <__aeabi_dcmplt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <SetOutputLimits+0xc6>
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80016c6:	6979      	ldr	r1, [r7, #20]
 80016c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80016cc:	e000      	b.n	80016d0 <SetOutputLimits+0xc6>
   if(Min > Max) return;
 80016ce:	bf00      	nop
}
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	bf0c      	ite	eq
 80016e6:	2301      	moveq	r3, #1
 80016e8:	2300      	movne	r3, #0
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	bf0c      	ite	eq
 80016fa:	2201      	moveq	r2, #1
 80016fc:	2200      	movne	r2, #0
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	4293      	cmp	r3, r2
 8001702:	d102      	bne.n	800170a <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f808 	bl	800171a <Initialize>
    }
    val->inAuto = newAuto;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <Initialize>:

void Initialize(PID_instance *val)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	val->outputSum = val->Output;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	e9c1 2306 	strd	r2, r3, [r1, #24]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001746:	f7ff f9b7 	bl	8000ab8 <__aeabi_dcmpgt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <Initialize+0x44>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	e9c1 2306 	strd	r2, r3, [r1, #24]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 800175c:	e011      	b.n	8001782 <Initialize+0x68>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800176a:	f7ff f987 	bl	8000a7c <__aeabi_dcmplt>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d100      	bne.n	8001776 <Initialize+0x5c>
}
 8001774:	e005      	b.n	8001782 <Initialize+0x68>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	659a      	str	r2, [r3, #88]	; 0x58
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <current_init>:
//Safety
#define Current_limit 2000 //mA
#define Temperature_limit 40 //degrees C

//initialization
void current_init(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	//create thread
	current_attr.name = "Current thread";
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <current_init+0x20>)
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <current_init+0x24>)
 80017b0:	601a      	str	r2, [r3, #0]
	//current_attr.priority = 9;
	current_thread_id = osThreadNew((void *)current_thread, NULL, &current_attr);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <current_init+0x20>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <current_init+0x28>)
 80017b8:	f009 f960 	bl	800aa7c <osThreadNew>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <current_init+0x2c>)
 80017c0:	6013      	str	r3, [r2, #0]
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200001d8 	.word	0x200001d8
 80017cc:	0800e804 	.word	0x0800e804
 80017d0:	08001809 	.word	0x08001809
 80017d4:	200001d4 	.word	0x200001d4

080017d8 <frequenzy>:


uint16_t frequenzy(uint16_t freq){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)return !0;
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <frequenzy+0x14>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e005      	b.n	80017f8 <frequenzy+0x20>
	return 12500/freq;
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80017f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017f6:	b29b      	uxth	r3, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	0000      	movs	r0, r0
	...

08001808 <current_thread>:

//thread
void current_thread(void){
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
	CTRL_init_PWM();
 800180e:	f7ff fb03 	bl	8000e18 <CTRL_init_PWM>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8001812:	2208      	movs	r2, #8
 8001814:	49a0      	ldr	r1, [pc, #640]	; (8001a98 <current_thread+0x290>)
 8001816:	48a1      	ldr	r0, [pc, #644]	; (8001a9c <current_thread+0x294>)
 8001818:	f002 fae0 	bl	8003ddc <HAL_ADC_Start_DMA>

	uint32_t DC_current = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
	SetSampleTime(&Current_PID, sampletime);
 8001820:	211a      	movs	r1, #26
 8001822:	489f      	ldr	r0, [pc, #636]	; (8001aa0 <current_thread+0x298>)
 8001824:	f7ff feb6 	bl	8001594 <SetSampleTime>
	SetTunings(&Current_PID, Kp, Ki, Kd, 1);
 8001828:	4b9e      	ldr	r3, [pc, #632]	; (8001aa4 <current_thread+0x29c>)
 800182a:	ed93 7b00 	vldr	d7, [r3]
 800182e:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <current_thread+0x2a0>)
 8001830:	ed93 6b00 	vldr	d6, [r3]
 8001834:	4b9d      	ldr	r3, [pc, #628]	; (8001aac <current_thread+0x2a4>)
 8001836:	ed93 5b00 	vldr	d5, [r3]
 800183a:	ed9f 3b8f 	vldr	d3, [pc, #572]	; 8001a78 <current_thread+0x270>
 800183e:	eeb0 2a45 	vmov.f32	s4, s10
 8001842:	eef0 2a65 	vmov.f32	s5, s11
 8001846:	eeb0 1a46 	vmov.f32	s2, s12
 800184a:	eef0 1a66 	vmov.f32	s3, s13
 800184e:	eeb0 0a47 	vmov.f32	s0, s14
 8001852:	eef0 0a67 	vmov.f32	s1, s15
 8001856:	4892      	ldr	r0, [pc, #584]	; (8001aa0 <current_thread+0x298>)
 8001858:	f7ff fdaa 	bl	80013b0 <SetTunings>
	SetOutputLimits(&Current_PID, min_voltage, max_voltage);
 800185c:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8001a80 <current_thread+0x278>
 8001860:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8001a88 <current_thread+0x280>
 8001864:	488e      	ldr	r0, [pc, #568]	; (8001aa0 <current_thread+0x298>)
 8001866:	f7ff fed0 	bl	800160a <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 800186a:	2100      	movs	r1, #0
 800186c:	488c      	ldr	r0, [pc, #560]	; (8001aa0 <current_thread+0x298>)
 800186e:	f7ff ff8c 	bl	800178a <SetControllerDirection>
	SetMode(&Current_PID,  MANUAL);
 8001872:	2100      	movs	r1, #0
 8001874:	488a      	ldr	r0, [pc, #552]	; (8001aa0 <current_thread+0x298>)
 8001876:	f7ff ff2e 	bl	80016d6 <SetMode>
	Initialize(&Current_PID);
 800187a:	4889      	ldr	r0, [pc, #548]	; (8001aa0 <current_thread+0x298>)
 800187c:	f7ff ff4d 	bl	800171a <Initialize>


	//--------------------------------TEST--------------------------------------
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001880:	2100      	movs	r1, #0
 8001882:	488b      	ldr	r0, [pc, #556]	; (8001ab0 <current_thread+0x2a8>)
 8001884:	f003 fc70 	bl	8005168 <HAL_DAC_Start>
	uint32_t time_to_die = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
	uint32_t melody_time = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
	uint8_t melody_index = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
	float increment = 0.01;
 8001894:	4b87      	ldr	r3, [pc, #540]	; (8001ab4 <current_thread+0x2ac>)
 8001896:	607b      	str	r3, [r7, #4]

	uint8_t calibrating = 100;
 8001898:	2364      	movs	r3, #100	; 0x64
 800189a:	73bb      	strb	r3, [r7, #14]
	while(calibrating){
 800189c:	e046      	b.n	800192c <current_thread+0x124>



		if(!half_flag && !full_flag)continue; //return to While(1);
 800189e:	4b86      	ldr	r3, [pc, #536]	; (8001ab8 <current_thread+0x2b0>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <current_thread+0xac>
 80018a8:	4b84      	ldr	r3, [pc, #528]	; (8001abc <current_thread+0x2b4>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d100      	bne.n	80018b4 <current_thread+0xac>
 80018b2:	e03b      	b.n	800192c <current_thread+0x124>
		half_flag = 0;
 80018b4:	4b80      	ldr	r3, [pc, #512]	; (8001ab8 <current_thread+0x2b0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
		full_flag = 0;
 80018ba:	4b80      	ldr	r3, [pc, #512]	; (8001abc <current_thread+0x2b4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]

		Voltage_offset_temp[0] += current[0];
 80018c0:	4b7f      	ldr	r3, [pc, #508]	; (8001ac0 <current_thread+0x2b8>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <current_thread+0x2bc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a7e      	ldr	r2, [pc, #504]	; (8001ac4 <current_thread+0x2bc>)
 80018cc:	6013      	str	r3, [r2, #0]
		Voltage_offset_temp[1] += current[1];
 80018ce:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <current_thread+0x2b8>)
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4b7c      	ldr	r3, [pc, #496]	; (8001ac4 <current_thread+0x2bc>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <current_thread+0x2bc>)
 80018da:	6053      	str	r3, [r2, #4]
		Voltage_offset_temp[2] += current[2];
 80018dc:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <current_thread+0x2b8>)
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4b78      	ldr	r3, [pc, #480]	; (8001ac4 <current_thread+0x2bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a77      	ldr	r2, [pc, #476]	; (8001ac4 <current_thread+0x2bc>)
 80018e8:	6093      	str	r3, [r2, #8]

		calibrating--;
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	73bb      	strb	r3, [r7, #14]

		if(!calibrating){
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11a      	bne.n	800192c <current_thread+0x124>
			Voltage_offset[0] = -Voltage_offset_temp[0]/50/lpf;
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <current_thread+0x2bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	425b      	negs	r3, r3
 80018fc:	4a72      	ldr	r2, [pc, #456]	; (8001ac8 <current_thread+0x2c0>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0b1b      	lsrs	r3, r3, #12
 8001904:	4a71      	ldr	r2, [pc, #452]	; (8001acc <current_thread+0x2c4>)
 8001906:	6013      	str	r3, [r2, #0]
			Voltage_offset[1] = -Voltage_offset_temp[1]/50/lpf;
 8001908:	4b6e      	ldr	r3, [pc, #440]	; (8001ac4 <current_thread+0x2bc>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	425b      	negs	r3, r3
 800190e:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <current_thread+0x2c0>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	0b1b      	lsrs	r3, r3, #12
 8001916:	4a6d      	ldr	r2, [pc, #436]	; (8001acc <current_thread+0x2c4>)
 8001918:	6053      	str	r3, [r2, #4]
			Voltage_offset[2] = -Voltage_offset_temp[2]/50/lpf;
 800191a:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <current_thread+0x2bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	425b      	negs	r3, r3
 8001920:	4a69      	ldr	r2, [pc, #420]	; (8001ac8 <current_thread+0x2c0>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0b1b      	lsrs	r3, r3, #12
 8001928:	4a68      	ldr	r2, [pc, #416]	; (8001acc <current_thread+0x2c4>)
 800192a:	6093      	str	r3, [r2, #8]
	while(calibrating){
 800192c:	7bbb      	ldrb	r3, [r7, #14]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1b5      	bne.n	800189e <current_thread+0x96>
		}
	}

	SetMode(&Current_PID,  AUTOMATIC);
 8001932:	2101      	movs	r1, #1
 8001934:	485a      	ldr	r0, [pc, #360]	; (8001aa0 <current_thread+0x298>)
 8001936:	f7ff fece 	bl	80016d6 <SetMode>
		//HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);

		//wait until callback
		//uint32_t thread_flag = 0;
		//thread_flag = osThreadFlagsWait (adc_cplt_flag | adc_half_cplt_flag , osFlagsWaitAny, osWaitForever);
		if(!half_flag && !full_flag)continue; //return to While(1);
 800193a:	4b5f      	ldr	r3, [pc, #380]	; (8001ab8 <current_thread+0x2b0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <current_thread+0x148>
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <current_thread+0x2b4>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8135 	beq.w	8001bba <current_thread+0x3b2>
		half_flag = 0;
 8001950:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <current_thread+0x2b0>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
		full_flag = 0;
 8001956:	4b59      	ldr	r3, [pc, #356]	; (8001abc <current_thread+0x2b4>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 800195c:	2201      	movs	r2, #1
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	485b      	ldr	r0, [pc, #364]	; (8001ad0 <current_thread+0x2c8>)
 8001962:	f004 fe37 	bl	80065d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	4859      	ldr	r0, [pc, #356]	; (8001ad0 <current_thread+0x2c8>)
 800196c:	f004 fe32 	bl	80065d4 <HAL_GPIO_WritePin>
		//results in buffer now

		DC_current = (uint32_t)((abs((int)current[0])+abs((int)current[1])+abs((int)current[2]))/2);
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <current_thread+0x2b8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001978:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <current_thread+0x2b8>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	bfb8      	it	lt
 8001984:	425b      	neglt	r3, r3
 8001986:	441a      	add	r2, r3
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <current_thread+0x2b8>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	bfb8      	it	lt
 8001990:	425b      	neglt	r3, r3
 8001992:	4413      	add	r3, r2
 8001994:	0fda      	lsrs	r2, r3, #31
 8001996:	4413      	add	r3, r2
 8001998:	105b      	asrs	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
		int32_t DC_current_offset = (current[0]+current[1]+current[2])/3;
 800199c:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <current_thread+0x2b8>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <current_thread+0x2b8>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	441a      	add	r2, r3
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <current_thread+0x2b8>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a49      	ldr	r2, [pc, #292]	; (8001ad4 <current_thread+0x2cc>)
 80019ae:	fb82 1203 	smull	r1, r2, r2, r3
 80019b2:	17db      	asrs	r3, r3, #31
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	603b      	str	r3, [r7, #0]
			//PrintServerPrintf("Set%4d %4d %4d\r\n", (int32_t)Current_PID.Setpoint, (int32_t)Current_PID.Input, (int32_t)Current_PID.Output);
			//PrintServerPrintf("M1:%5dmA M2:%5dmA M3:%5dmA DC:%4d Vref:%4dmV\r\n", current[0], current[1], current[2], DC_current, VDDA+2);
		//}

		//test time
		time_to_die++;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
//			}
//			Angle -= 360;
//		}

		//--------------------------Music-------------------------------
		Current_PID.Setpoint = 300;
 80019be:	4938      	ldr	r1, [pc, #224]	; (8001aa0 <current_thread+0x298>)
 80019c0:	a333      	add	r3, pc, #204	; (adr r3, 8001a90 <current_thread+0x288>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		uint16_t freq = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	81bb      	strh	r3, [r7, #12]
		if((time_to_die-melody_time) >=  (melody[melody_index][1]*25)){
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad2      	subs	r2, r2, r3
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	4940      	ldr	r1, [pc, #256]	; (8001ad8 <current_thread+0x2d0>)
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	885b      	ldrh	r3, [r3, #2]
 80019de:	4619      	mov	r1, r3
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	0099      	lsls	r1, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d317      	bcc.n	8001a1e <current_thread+0x216>
			if ((time_to_die-melody_time)+25 >=  (melody[melody_index][1]*25)){
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f103 0219 	add.w	r2, r3, #25
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	4937      	ldr	r1, [pc, #220]	; (8001ad8 <current_thread+0x2d0>)
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	885b      	ldrh	r3, [r3, #2]
 8001a02:	4619      	mov	r1, r3
 8001a04:	460b      	mov	r3, r1
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	0099      	lsls	r1, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d30a      	bcc.n	8001a28 <current_thread+0x220>
				melody_index++;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	3301      	adds	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
				melody_time= time_to_die;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	e004      	b.n	8001a28 <current_thread+0x220>
			}
		}
		else freq = melody[melody_index][0];
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	4a2d      	ldr	r2, [pc, #180]	; (8001ad8 <current_thread+0x2d0>)
 8001a22:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001a26:	81bb      	strh	r3, [r7, #12]

		if(melody_index == NUM_NOTES){
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b46      	cmp	r3, #70	; 0x46
 8001a2c:	d102      	bne.n	8001a34 <current_thread+0x22c>
			shutoff();
 8001a2e:	f7ff fb6b 	bl	8001108 <shutoff>
			while(1); //done playing
 8001a32:	e7fe      	b.n	8001a32 <current_thread+0x22a>
		}
		if(freq == 0)Angle = 0;
 8001a34:	89bb      	ldrh	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d104      	bne.n	8001a44 <current_thread+0x23c>
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <current_thread+0x2d4>)
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e06b      	b.n	8001b1c <current_thread+0x314>
		else if(!(time_to_die%frequenzy(freq)) && Angle == 0)Angle = 90;
 8001a44:	89bb      	ldrh	r3, [r7, #12]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fec6 	bl	80017d8 <frequenzy>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a56:	fb01 f202 	mul.w	r2, r1, r2
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d141      	bne.n	8001ae4 <current_thread+0x2dc>
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <current_thread+0x2d4>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	d139      	bne.n	8001ae4 <current_thread+0x2dc>
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <current_thread+0x2d4>)
 8001a72:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <current_thread+0x2d8>)
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e051      	b.n	8001b1c <current_thread+0x314>
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	3ff00000 	.word	0x3ff00000
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40976c00 	.word	0x40976c00
	...
 8001a94:	4072c000 	.word	0x4072c000
 8001a98:	200001fc 	.word	0x200001fc
 8001a9c:	20000310 	.word	0x20000310
 8001aa0:	20000248 	.word	0x20000248
 8001aa4:	20000120 	.word	0x20000120
 8001aa8:	20000128 	.word	0x20000128
 8001aac:	200002c0 	.word	0x200002c0
 8001ab0:	200004b0 	.word	0x200004b0
 8001ab4:	3c23d70a 	.word	0x3c23d70a
 8001ab8:	20000242 	.word	0x20000242
 8001abc:	20000243 	.word	0x20000243
 8001ac0:	20000234 	.word	0x20000234
 8001ac4:	20000228 	.word	0x20000228
 8001ac8:	d1b71759 	.word	0xd1b71759
 8001acc:	2000021c 	.word	0x2000021c
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	55555556 	.word	0x55555556
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	200002b8 	.word	0x200002b8
 8001ae0:	42b40000 	.word	0x42b40000
		else if(!(time_to_die%frequenzy(freq)) && Angle == 90)Angle = 0;
 8001ae4:	89bb      	ldrh	r3, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fe76 	bl	80017d8 <frequenzy>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001af6:	fb01 f202 	mul.w	r2, r1, r2
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10d      	bne.n	8001b1c <current_thread+0x314>
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <current_thread+0x3b8>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001bc4 <current_thread+0x3bc>
 8001b0a:	eef4 7a47 	vcmp.f32	s15, s14
 8001b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b12:	d103      	bne.n	8001b1c <current_thread+0x314>
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <current_thread+0x3b8>)
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
//		if(time_to_die > 25000*2)Current_PID.Setpoint = 0;
//		if(time_to_die > 25000*3)Current_PID.Setpoint = 400;
//		if(time_to_die > 25000*4)Current_PID.Setpoint = 0;


		if(DC_current == Current_limit){
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b22:	d109      	bne.n	8001b38 <current_thread+0x330>
			shutoff();
 8001b24:	f7ff faf0 	bl	8001108 <shutoff>
			HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b32:	f004 fd4f 	bl	80065d4 <HAL_GPIO_WritePin>
			while(1);
 8001b36:	e7fe      	b.n	8001b36 <current_thread+0x32e>
		}


		//----------------------------Current PID loop------------------------------
		Current_PID.Input = (double)DC_current;
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f7fe fcb3 	bl	80004a4 <__aeabi_ui2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4921      	ldr	r1, [pc, #132]	; (8001bc8 <current_thread+0x3c0>)
 8001b44:	e9c1 2300 	strd	r2, r3, [r1]
		Compute(&Current_PID);
 8001b48:	481f      	ldr	r0, [pc, #124]	; (8001bc8 <current_thread+0x3c0>)
 8001b4a:	f7ff fb53 	bl	80011f4 <Compute>

		if(Voltage_offset[0] == 0)shutoff();
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <current_thread+0x3c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <current_thread+0x354>
 8001b56:	f7ff fad7 	bl	8001108 <shutoff>
 8001b5a:	e014      	b.n	8001b86 <current_thread+0x37e>
		else inverter((uint16_t)Angle, Current_PID.Output);
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <current_thread+0x3b8>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b66:	ee17 3a90 	vmov	r3, s15
 8001b6a:	b29c      	uxth	r4, r3
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <current_thread+0x3c0>)
 8001b6e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7fe ffa9 	bl	8000acc <__aeabi_d2uiz>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff f99b 	bl	8000ebc <inverter>
		//osThreadFlagsSet(CTRL_thread_id, update_flag);


		//DAC for measuring fast signals
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)Current_PID.Input*4096/VDDA);
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <current_thread+0x3c0>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7fe ff9c 	bl	8000acc <__aeabi_d2uiz>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	031b      	lsls	r3, r3, #12
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <current_thread+0x3c8>)
 8001b9c:	8812      	ldrh	r2, [r2, #0]
 8001b9e:	b212      	sxth	r2, r2
 8001ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <current_thread+0x3cc>)
 8001baa:	f003 fb30 	bl	800520e <HAL_DAC_SetValue>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2140      	movs	r1, #64	; 0x40
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <current_thread+0x3d0>)
 8001bb4:	f004 fd0e 	bl	80065d4 <HAL_GPIO_WritePin>
 8001bb8:	e6bf      	b.n	800193a <current_thread+0x132>
		if(!half_flag && !full_flag)continue; //return to While(1);
 8001bba:	bf00      	nop
	while(1){
 8001bbc:	e6bd      	b.n	800193a <current_thread+0x132>
 8001bbe:	bf00      	nop
 8001bc0:	200002b8 	.word	0x200002b8
 8001bc4:	42b40000 	.word	0x42b40000
 8001bc8:	20000248 	.word	0x20000248
 8001bcc:	2000021c 	.word	0x2000021c
 8001bd0:	20000240 	.word	0x20000240
 8001bd4:	200004b0 	.word	0x200004b0
 8001bd8:	48000800 	.word	0x48000800

08001bdc <HAL_ADC_ConvHalfCpltCallback>:
	}
}



void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	483a      	ldr	r0, [pc, #232]	; (8001cd4 <HAL_ADC_ConvHalfCpltCallback+0xf8>)
 8001bea:	f004 fcf3 	bl	80065d4 <HAL_GPIO_WritePin>
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_ADC_ConvHalfCpltCallback+0xfc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001c0e:	801a      	strh	r2, [r3, #0]
	current[0] = -(int32_t)(adc_result_DMA[2]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[0])*50;
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	091a      	lsrs	r2, r3, #4
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	460b      	mov	r3, r1
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	0119      	lsls	r1, r3, #4
 8001c26:	440b      	add	r3, r1
 8001c28:	492e      	ldr	r1, [pc, #184]	; (8001ce4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001c2a:	fb81 0103 	smull	r0, r1, r1, r3
 8001c2e:	1449      	asrs	r1, r1, #17
 8001c30:	17db      	asrs	r3, r3, #31
 8001c32:	1acb      	subs	r3, r1, r3
 8001c34:	fb03 f202 	mul.w	r2, r3, r2
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001c44:	fb02 f303 	mul.w	r3, r2, r3
 8001c48:	4a28      	ldr	r2, [pc, #160]	; (8001cec <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001c4a:	6013      	str	r3, [r2, #0]
	current[1] = -(int32_t)(adc_result_DMA[1]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[1])*50;
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091a      	lsrs	r2, r3, #4
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	0119      	lsls	r1, r3, #4
 8001c62:	440b      	add	r3, r1
 8001c64:	491f      	ldr	r1, [pc, #124]	; (8001ce4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001c66:	fb81 0103 	smull	r0, r1, r1, r3
 8001c6a:	1449      	asrs	r1, r1, #17
 8001c6c:	17db      	asrs	r3, r3, #31
 8001c6e:	1acb      	subs	r3, r1, r3
 8001c70:	fb03 f202 	mul.w	r2, r3, r2
 8001c74:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001c86:	6053      	str	r3, [r2, #4]
	current[2] = -(int32_t)(adc_result_DMA[0]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[2])*50;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	091a      	lsrs	r2, r3, #4
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4619      	mov	r1, r3
 8001c96:	460b      	mov	r3, r1
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	0119      	lsls	r1, r3, #4
 8001c9e:	440b      	add	r3, r1
 8001ca0:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001ca2:	fb81 0103 	smull	r0, r1, r1, r3
 8001ca6:	1449      	asrs	r1, r1, #17
 8001ca8:	17db      	asrs	r3, r3, #31
 8001caa:	1acb      	subs	r3, r1, r3
 8001cac:	fb03 f202 	mul.w	r2, r3, r2
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001cc2:	6093      	str	r3, [r2, #8]
	half_flag = 1;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	48000800 	.word	0x48000800
 8001cd8:	20000118 	.word	0x20000118
 8001cdc:	200001fc 	.word	0x200001fc
 8001ce0:	20000240 	.word	0x20000240
 8001ce4:	51f0a429 	.word	0x51f0a429
 8001ce8:	2000021c 	.word	0x2000021c
 8001cec:	20000234 	.word	0x20000234
 8001cf0:	20000242 	.word	0x20000242

08001cf4 <ADC1_ConvCpltCallback>:
void ADC1_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2140      	movs	r1, #64	; 0x40
 8001d00:	483a      	ldr	r0, [pc, #232]	; (8001dec <ADC1_ConvCpltCallback+0xf8>)
 8001d02:	f004 fc67 	bl	80065d4 <HAL_GPIO_WritePin>
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <ADC1_ConvCpltCallback+0xfc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <ADC1_ConvCpltCallback+0x100>)
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <ADC1_ConvCpltCallback+0x104>)
 8001d26:	801a      	strh	r2, [r3, #0]
	current[0] = -(int32_t)(adc_result_DMA[6]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[0])*50;
 8001d28:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <ADC1_ConvCpltCallback+0x100>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	091a      	lsrs	r2, r3, #4
 8001d2e:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <ADC1_ConvCpltCallback+0x104>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4619      	mov	r1, r3
 8001d36:	460b      	mov	r3, r1
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	0119      	lsls	r1, r3, #4
 8001d3e:	440b      	add	r3, r1
 8001d40:	492e      	ldr	r1, [pc, #184]	; (8001dfc <ADC1_ConvCpltCallback+0x108>)
 8001d42:	fb81 0103 	smull	r0, r1, r1, r3
 8001d46:	1449      	asrs	r1, r1, #17
 8001d48:	17db      	asrs	r3, r3, #31
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	fb03 f202 	mul.w	r2, r3, r2
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <ADC1_ConvCpltCallback+0x10c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <ADC1_ConvCpltCallback+0x110>)
 8001d62:	6013      	str	r3, [r2, #0]
	current[1] = -(int32_t)(adc_result_DMA[5]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[1])*50;
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <ADC1_ConvCpltCallback+0x100>)
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	091a      	lsrs	r2, r3, #4
 8001d6a:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <ADC1_ConvCpltCallback+0x104>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4619      	mov	r1, r3
 8001d72:	460b      	mov	r3, r1
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	0119      	lsls	r1, r3, #4
 8001d7a:	440b      	add	r3, r1
 8001d7c:	491f      	ldr	r1, [pc, #124]	; (8001dfc <ADC1_ConvCpltCallback+0x108>)
 8001d7e:	fb81 0103 	smull	r0, r1, r1, r3
 8001d82:	1449      	asrs	r1, r1, #17
 8001d84:	17db      	asrs	r3, r3, #31
 8001d86:	1acb      	subs	r3, r1, r3
 8001d88:	fb03 f202 	mul.w	r2, r3, r2
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <ADC1_ConvCpltCallback+0x10c>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <ADC1_ConvCpltCallback+0x110>)
 8001d9e:	6053      	str	r3, [r2, #4]
	current[2] = -(int32_t)(adc_result_DMA[4]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[2])*50;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <ADC1_ConvCpltCallback+0x100>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	091a      	lsrs	r2, r3, #4
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <ADC1_ConvCpltCallback+0x104>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4619      	mov	r1, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	0119      	lsls	r1, r3, #4
 8001db6:	440b      	add	r3, r1
 8001db8:	4910      	ldr	r1, [pc, #64]	; (8001dfc <ADC1_ConvCpltCallback+0x108>)
 8001dba:	fb81 0103 	smull	r0, r1, r1, r3
 8001dbe:	1449      	asrs	r1, r1, #17
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1acb      	subs	r3, r1, r3
 8001dc4:	fb03 f202 	mul.w	r2, r3, r2
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <ADC1_ConvCpltCallback+0x10c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <ADC1_ConvCpltCallback+0x110>)
 8001dda:	6093      	str	r3, [r2, #8]
	full_flag = 1;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <ADC1_ConvCpltCallback+0x114>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	48000800 	.word	0x48000800
 8001df0:	20000118 	.word	0x20000118
 8001df4:	200001fc 	.word	0x200001fc
 8001df8:	20000240 	.word	0x20000240
 8001dfc:	51f0a429 	.word	0x51f0a429
 8001e00:	2000021c 	.word	0x2000021c
 8001e04:	20000234 	.word	0x20000234
 8001e08:	20000243 	.word	0x20000243

08001e0c <HAL_UART_TxCpltCallback>:
	uint8_t Idx;
	uint8_t Buf[print_size];
}pool_mem;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	//create thread flag to signal finish transferring
	osThreadFlagsSet(thread_id, 0x01);
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_UART_TxCpltCallback+0x1c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f008 fec0 	bl	800aba0 <osThreadFlagsSet>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	2000030c 	.word	0x2000030c

08001e2c <PrintServer>:

void PrintServer(void){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
	pool_mem *mem_ptr;
	while(1){
		//get pointer to pool from print_serve
		osMessageQueueGet(print_message_queue_id, &mem_ptr, 0U, osWaitForever);
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <PrintServer+0x78>)
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	4639      	mov	r1, r7
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f009 f80d 	bl	800ae5c <osMessageQueueGet>

		if (mem_ptr != NULL) { // mem Block was available
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f4      	beq.n	8001e32 <PrintServer+0x6>
			//print the string that is stored at the pointer location
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)mem_ptr->Buf, mem_ptr->Idx);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <PrintServer+0x7c>)
 8001e56:	f007 fa93 	bl	8009380 <HAL_UART_Transmit_DMA>
			//wait until UART is done transmitting
			osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8001e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2001      	movs	r0, #1
 8001e62:	f008 feeb 	bl	800ac3c <osThreadFlagsWait>

			//free the memory pool id
			osStatus_t status = osMemoryPoolFree(pool_id, mem_ptr); // free mem block
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <PrintServer+0x80>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f009 f928 	bl	800b0c4 <osMemoryPoolFree>
 8001e74:	6078      	str	r0, [r7, #4]
			switch (status)  {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <PrintServer+0x68>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	dc0a      	bgt.n	8001e98 <PrintServer+0x6c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f113 0f05 	cmn.w	r3, #5
 8001e88:	d008      	beq.n	8001e9c <PrintServer+0x70>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f113 0f04 	cmn.w	r3, #4
 8001e90:	d006      	beq.n	8001ea0 <PrintServer+0x74>
				case osErrorParameter:
				  break;
				case osErrorNoMemory:
				  break;
				default:
				  break;
 8001e92:	e001      	b.n	8001e98 <PrintServer+0x6c>
				  break;
 8001e94:	bf00      	nop
 8001e96:	e7cc      	b.n	8001e32 <PrintServer+0x6>
				  break;
 8001e98:	bf00      	nop
 8001e9a:	e7ca      	b.n	8001e32 <PrintServer+0x6>
				  break;
 8001e9c:	bf00      	nop
 8001e9e:	e7c8      	b.n	8001e32 <PrintServer+0x6>
				  break;
 8001ea0:	bf00      	nop
		osMessageQueueGet(print_message_queue_id, &mem_ptr, 0U, osWaitForever);
 8001ea2:	e7c6      	b.n	8001e32 <PrintServer+0x6>
 8001ea4:	200002c8 	.word	0x200002c8
 8001ea8:	20000854 	.word	0x20000854
 8001eac:	200002cc 	.word	0x200002cc

08001eb0 <PrintServerInit>:
			}
		}
	}
}

_Bool PrintServerInit(void){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	//create memory pool
	pool_id = osMemoryPoolNew (size_of_pool_and_queue, sizeof(pool_mem), NULL);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2141      	movs	r1, #65	; 0x41
 8001eb8:	2020      	movs	r0, #32
 8001eba:	f009 f82d 	bl	800af18 <osMemoryPoolNew>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <PrintServerInit+0x4c>)
 8001ec2:	6013      	str	r3, [r2, #0]

	//create message queue
	message_queue_attr.name = "message queue printServer";
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <PrintServerInit+0x50>)
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <PrintServerInit+0x54>)
 8001ec8:	601a      	str	r2, [r3, #0]
	print_message_queue_id = osMessageQueueNew(size_of_pool_and_queue, 4, &message_queue_attr);
 8001eca:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <PrintServerInit+0x50>)
 8001ecc:	2104      	movs	r1, #4
 8001ece:	2020      	movs	r0, #32
 8001ed0:	f008 ff50 	bl	800ad74 <osMessageQueueNew>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <PrintServerInit+0x58>)
 8001ed8:	6013      	str	r3, [r2, #0]

	//create printServer thread
	print_server_thread_attr.priority = 9;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <PrintServerInit+0x5c>)
 8001edc:	2209      	movs	r2, #9
 8001ede:	619a      	str	r2, [r3, #24]
	print_server_thread_attr.name = "print thread";
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <PrintServerInit+0x5c>)
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <PrintServerInit+0x60>)
 8001ee4:	601a      	str	r2, [r3, #0]
	thread_id = osThreadNew((void *)PrintServer, NULL, &print_server_thread_attr);
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <PrintServerInit+0x5c>)
 8001ee8:	2100      	movs	r1, #0
 8001eea:	480a      	ldr	r0, [pc, #40]	; (8001f14 <PrintServerInit+0x64>)
 8001eec:	f008 fdc6 	bl	800aa7c <osThreadNew>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <PrintServerInit+0x68>)
 8001ef4:	6013      	str	r3, [r2, #0]

	return 0;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200002cc 	.word	0x200002cc
 8001f00:	200002d0 	.word	0x200002d0
 8001f04:	0800e814 	.word	0x0800e814
 8001f08:	200002c8 	.word	0x200002c8
 8001f0c:	200002e8 	.word	0x200002e8
 8001f10:	0800e830 	.word	0x0800e830
 8001f14:	08001e2d 	.word	0x08001e2d
 8001f18:	2000030c 	.word	0x2000030c

08001f1c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2220      	movs	r2, #32
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00c fb69 	bl	800e60c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f3a:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f42:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f4a:	4b49      	ldr	r3, [pc, #292]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f50:	4b47      	ldr	r3, [pc, #284]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f56:	4b46      	ldr	r3, [pc, #280]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f5c:	4b44      	ldr	r3, [pc, #272]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f64:	2208      	movs	r2, #8
 8001f66:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f6e:	4b40      	ldr	r3, [pc, #256]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001f74:	4b3e      	ldr	r3, [pc, #248]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f76:	2204      	movs	r2, #4
 8001f78:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f8e:	4b38      	ldr	r3, [pc, #224]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <MX_ADC1_Init+0x154>)
 8001f98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <MX_ADC1_Init+0x154>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001fa6:	4b32      	ldr	r3, [pc, #200]	; (8002070 <MX_ADC1_Init+0x154>)
 8001fa8:	220c      	movs	r2, #12
 8001faa:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001fac:	4b30      	ldr	r3, [pc, #192]	; (8002070 <MX_ADC1_Init+0x154>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <MX_ADC1_Init+0x154>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <MX_ADC1_Init+0x154>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fbe:	482c      	ldr	r0, [pc, #176]	; (8002070 <MX_ADC1_Init+0x154>)
 8001fc0:	f001 fd82 	bl	8003ac8 <HAL_ADC_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001fca:	f000 fd0f 	bl	80029ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4825      	ldr	r0, [pc, #148]	; (8002070 <MX_ADC1_Init+0x154>)
 8001fda:	f002 ff1f 	bl	8004e1c <HAL_ADCEx_MultiModeConfigChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001fe4:	f000 fd02 	bl	80029ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <MX_ADC1_Init+0x158>)
 8001fea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fec:	2306      	movs	r3, #6
 8001fee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ff4:	237f      	movs	r3, #127	; 0x7f
 8001ff6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4619      	mov	r1, r3
 8002004:	481a      	ldr	r0, [pc, #104]	; (8002070 <MX_ADC1_Init+0x154>)
 8002006:	f002 f9cb 	bl	80043a0 <HAL_ADC_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002010:	f000 fcec 	bl	80029ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_ADC1_Init+0x15c>)
 8002016:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002018:	230c      	movs	r3, #12
 800201a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	4619      	mov	r1, r3
 8002020:	4813      	ldr	r0, [pc, #76]	; (8002070 <MX_ADC1_Init+0x154>)
 8002022:	f002 f9bd 	bl	80043a0 <HAL_ADC_ConfigChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800202c:	f000 fcde 	bl	80029ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <MX_ADC1_Init+0x160>)
 8002032:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002034:	2312      	movs	r3, #18
 8002036:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4619      	mov	r1, r3
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <MX_ADC1_Init+0x154>)
 800203e:	f002 f9af 	bl	80043a0 <HAL_ADC_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8002048:	f000 fcd0 	bl	80029ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_ADC1_Init+0x164>)
 800204e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002050:	2318      	movs	r3, #24
 8002052:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_ADC1_Init+0x154>)
 800205a:	f002 f9a1 	bl	80043a0 <HAL_ADC_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8002064:	f000 fcc2 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000310 	.word	0x20000310
 8002074:	04300002 	.word	0x04300002
 8002078:	08600004 	.word	0x08600004
 800207c:	0c900008 	.word	0x0c900008
 8002080:	cb840000 	.word	0xcb840000

08002084 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800208a:	463b      	mov	r3, r7
 800208c:	2220      	movs	r2, #32
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f00c fabb 	bl	800e60c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <MX_ADC2_Init+0xc0>)
 8002098:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <MX_ADC2_Init+0xc4>)
 800209a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <MX_ADC2_Init+0xc0>)
 800209e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020be:	2204      	movs	r2, #4
 80020c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <MX_ADC2_Init+0xc0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80020fe:	4811      	ldr	r0, [pc, #68]	; (8002144 <MX_ADC2_Init+0xc0>)
 8002100:	f001 fce2 	bl	8003ac8 <HAL_ADC_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800210a:	f000 fc6f 	bl	80029ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_ADC2_Init+0xc8>)
 8002110:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002112:	2306      	movs	r3, #6
 8002114:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800211a:	237f      	movs	r3, #127	; 0x7f
 800211c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800211e:	2304      	movs	r3, #4
 8002120:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002126:	463b      	mov	r3, r7
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <MX_ADC2_Init+0xc0>)
 800212c:	f002 f938 	bl	80043a0 <HAL_ADC_ConfigChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002136:	f000 fc59 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	2000037c 	.word	0x2000037c
 8002148:	50000100 	.word	0x50000100
 800214c:	36902000 	.word	0x36902000

08002150 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b09e      	sub	sp, #120	; 0x78
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002168:	f107 0320 	add.w	r3, r7, #32
 800216c:	2244      	movs	r2, #68	; 0x44
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f00c fa4b 	bl	800e60c <memset>
  if(adcHandle->Instance==ADC1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217e:	d171      	bne.n	8002264 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002184:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002186:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800218a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800218c:	f107 0320 	add.w	r3, r7, #32
 8002190:	4618      	mov	r0, r3
 8002192:	f005 f893 	bl	80072bc <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800219c:	f000 fc26 	bl	80029ec <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021a0:	4b7a      	ldr	r3, [pc, #488]	; (800238c <HAL_ADC_MspInit+0x23c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	4a79      	ldr	r2, [pc, #484]	; (800238c <HAL_ADC_MspInit+0x23c>)
 80021a8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021aa:	4b78      	ldr	r3, [pc, #480]	; (800238c <HAL_ADC_MspInit+0x23c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10b      	bne.n	80021ca <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021b2:	4b77      	ldr	r3, [pc, #476]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a76      	ldr	r2, [pc, #472]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80021b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b74      	ldr	r3, [pc, #464]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b71      	ldr	r3, [pc, #452]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a70      	ldr	r2, [pc, #448]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b6e      	ldr	r3, [pc, #440]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 80021e2:	2307      	movs	r3, #7
 80021e4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	2303      	movs	r3, #3
 80021e8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f8:	f004 f86a 	bl	80062d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021fc:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_ADC_MspInit+0x244>)
 80021fe:	4a66      	ldr	r2, [pc, #408]	; (8002398 <HAL_ADC_MspInit+0x248>)
 8002200:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002202:	4b64      	ldr	r3, [pc, #400]	; (8002394 <HAL_ADC_MspInit+0x244>)
 8002204:	2205      	movs	r2, #5
 8002206:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002208:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_ADC_MspInit+0x244>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800220e:	4b61      	ldr	r3, [pc, #388]	; (8002394 <HAL_ADC_MspInit+0x244>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002214:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_ADC_MspInit+0x244>)
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800221a:	4b5e      	ldr	r3, [pc, #376]	; (8002394 <HAL_ADC_MspInit+0x244>)
 800221c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002220:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002222:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <HAL_ADC_MspInit+0x244>)
 8002224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002228:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800222a:	4b5a      	ldr	r3, [pc, #360]	; (8002394 <HAL_ADC_MspInit+0x244>)
 800222c:	2220      	movs	r2, #32
 800222e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002230:	4b58      	ldr	r3, [pc, #352]	; (8002394 <HAL_ADC_MspInit+0x244>)
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002236:	4857      	ldr	r0, [pc, #348]	; (8002394 <HAL_ADC_MspInit+0x244>)
 8002238:	f003 f9ba 	bl	80055b0 <HAL_DMA_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002242:	f000 fbd3 	bl	80029ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_ADC_MspInit+0x244>)
 800224a:	655a      	str	r2, [r3, #84]	; 0x54
 800224c:	4a51      	ldr	r2, [pc, #324]	; (8002394 <HAL_ADC_MspInit+0x244>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2105      	movs	r1, #5
 8002256:	2012      	movs	r0, #18
 8002258:	f002 ff3c 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800225c:	2012      	movs	r0, #18
 800225e:	f002 ff53 	bl	8005108 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002262:	e08f      	b.n	8002384 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a4c      	ldr	r2, [pc, #304]	; (800239c <HAL_ADC_MspInit+0x24c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	f040 808a 	bne.w	8002384 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002274:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002276:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800227a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800227c:	f107 0320 	add.w	r3, r7, #32
 8002280:	4618      	mov	r0, r3
 8002282:	f005 f81b 	bl	80072bc <HAL_RCCEx_PeriphCLKConfig>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 800228c:	f000 fbae 	bl	80029ec <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002290:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_ADC_MspInit+0x23c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a3d      	ldr	r2, [pc, #244]	; (800238c <HAL_ADC_MspInit+0x23c>)
 8002298:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800229a:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_ADC_MspInit+0x23c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10b      	bne.n	80022ba <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022a2:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80022a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ae:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	4a34      	ldr	r2, [pc, #208]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c6:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	4a2e      	ldr	r2, [pc, #184]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_ADC_MspInit+0x240>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 80022ea:	2360      	movs	r3, #96	; 0x60
 80022ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ee:	2303      	movs	r3, #3
 80022f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002300:	f003 ffe6 	bl	80062d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8002304:	f640 0304 	movw	r3, #2052	; 0x804
 8002308:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230a:	2303      	movs	r3, #3
 800230c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002312:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002316:	4619      	mov	r1, r3
 8002318:	4821      	ldr	r0, [pc, #132]	; (80023a0 <HAL_ADC_MspInit+0x250>)
 800231a:	f003 ffd9 	bl	80062d0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 8002320:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <HAL_ADC_MspInit+0x258>)
 8002322:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 800233e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002342:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 8002346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002358:	4812      	ldr	r0, [pc, #72]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 800235a:	f003 f929 	bl	80055b0 <HAL_DMA_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8002364:	f000 fb42 	bl	80029ec <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
 800236e:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <HAL_ADC_MspInit+0x254>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2105      	movs	r1, #5
 8002378:	2012      	movs	r0, #18
 800237a:	f002 feab 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800237e:	2012      	movs	r0, #18
 8002380:	f002 fec2 	bl	8005108 <HAL_NVIC_EnableIRQ>
}
 8002384:	bf00      	nop
 8002386:	3778      	adds	r7, #120	; 0x78
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200004a8 	.word	0x200004a8
 8002390:	40021000 	.word	0x40021000
 8002394:	200003e8 	.word	0x200003e8
 8002398:	40020008 	.word	0x40020008
 800239c:	50000100 	.word	0x50000100
 80023a0:	48000400 	.word	0x48000400
 80023a4:	20000448 	.word	0x20000448
 80023a8:	4002001c 	.word	0x4002001c

080023ac <vApplicationIdleHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <PreSleepProcessing>:
/* USER CODE END 4 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <MX_FREERTOS_Init+0x1c>)
 800240e:	2100      	movs	r1, #0
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_FREERTOS_Init+0x20>)
 8002412:	f008 fb33 	bl	800aa7c <osThreadNew>
 8002416:	4603      	mov	r3, r0
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <MX_FREERTOS_Init+0x24>)
 800241a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  FOC_init();
 800241c:	f7fe fe8e 	bl	800113c <FOC_init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	0800e874 	.word	0x0800e874
 8002428:	08002431 	.word	0x08002431
 800242c:	200004ac 	.word	0x200004ac

08002430 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002438:	2001      	movs	r0, #1
 800243a:	f008 fc80 	bl	800ad3e <osDelay>
 800243e:	e7fb      	b.n	8002438 <StartDefaultTask+0x8>

08002440 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	; 0x30
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002446:	463b      	mov	r3, r7
 8002448:	2230      	movs	r2, #48	; 0x30
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f00c f8dd 	bl	800e60c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <MX_DAC1_Init+0x6c>)
 8002454:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <MX_DAC1_Init+0x70>)
 8002456:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002458:	4814      	ldr	r0, [pc, #80]	; (80024ac <MX_DAC1_Init+0x6c>)
 800245a:	f002 fe63 	bl	8005124 <HAL_DAC_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002464:	f000 fac2 	bl	80029ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002484:	2301      	movs	r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800248c:	463b      	mov	r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	; (80024ac <MX_DAC1_Init+0x6c>)
 8002494:	f002 fee4 	bl	8005260 <HAL_DAC_ConfigChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800249e:	f000 faa5 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	3730      	adds	r7, #48	; 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200004b0 	.word	0x200004b0
 80024b0:	50000800 	.word	0x50000800

080024b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a15      	ldr	r2, [pc, #84]	; (8002528 <HAL_DAC_MspInit+0x74>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d124      	bne.n	8002520 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_DAC_MspInit+0x78>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_DAC_MspInit+0x78>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_DAC_MspInit+0x78>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_DAC_MspInit+0x78>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <HAL_DAC_MspInit+0x78>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_DAC_MspInit+0x78>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002506:	2310      	movs	r3, #16
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250a:	2303      	movs	r3, #3
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251c:	f003 fed8 	bl	80062d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002520:	bf00      	nop
 8002522:	3728      	adds	r7, #40	; 0x28
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	50000800 	.word	0x50000800
 800252c:	40021000 	.word	0x40021000

08002530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <MX_DMA_Init+0xc8>)
 8002538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253a:	4a2f      	ldr	r2, [pc, #188]	; (80025f8 <MX_DMA_Init+0xc8>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6493      	str	r3, [r2, #72]	; 0x48
 8002542:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <MX_DMA_Init+0xc8>)
 8002544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800254e:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <MX_DMA_Init+0xc8>)
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	4a29      	ldr	r2, [pc, #164]	; (80025f8 <MX_DMA_Init+0xc8>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6493      	str	r3, [r2, #72]	; 0x48
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <MX_DMA_Init+0xc8>)
 800255c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <MX_DMA_Init+0xc8>)
 8002568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256a:	4a23      	ldr	r2, [pc, #140]	; (80025f8 <MX_DMA_Init+0xc8>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6493      	str	r3, [r2, #72]	; 0x48
 8002572:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <MX_DMA_Init+0xc8>)
 8002574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2105      	movs	r1, #5
 8002582:	200b      	movs	r0, #11
 8002584:	f002 fda6 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002588:	200b      	movs	r0, #11
 800258a:	f002 fdbd 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2105      	movs	r1, #5
 8002592:	200c      	movs	r0, #12
 8002594:	f002 fd9e 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002598:	200c      	movs	r0, #12
 800259a:	f002 fdb5 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2105      	movs	r1, #5
 80025a2:	200d      	movs	r0, #13
 80025a4:	f002 fd96 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80025a8:	200d      	movs	r0, #13
 80025aa:	f002 fdad 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2105      	movs	r1, #5
 80025b2:	200e      	movs	r0, #14
 80025b4:	f002 fd8e 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80025b8:	200e      	movs	r0, #14
 80025ba:	f002 fda5 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2105      	movs	r1, #5
 80025c2:	2038      	movs	r0, #56	; 0x38
 80025c4:	f002 fd86 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80025c8:	2038      	movs	r0, #56	; 0x38
 80025ca:	f002 fd9d 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2105      	movs	r1, #5
 80025d2:	2039      	movs	r0, #57	; 0x39
 80025d4:	f002 fd7e 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80025d8:	2039      	movs	r0, #57	; 0x39
 80025da:	f002 fd95 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2105      	movs	r1, #5
 80025e2:	203a      	movs	r0, #58	; 0x3a
 80025e4:	f002 fd76 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80025e8:	203a      	movs	r0, #58	; 0x3a
 80025ea:	f002 fd8d 	bl	8005108 <HAL_NVIC_EnableIRQ>

}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002602:	4a20      	ldr	r2, [pc, #128]	; (8002684 <MX_FDCAN1_Init+0x88>)
 8002604:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002608:	2200      	movs	r2, #0
 800260a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <MX_FDCAN1_Init+0x84>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002614:	2200      	movs	r2, #0
 8002616:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <MX_FDCAN1_Init+0x84>)
 800261a:	2200      	movs	r2, #0
 800261c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002620:	2200      	movs	r2, #0
 8002622:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002626:	2200      	movs	r2, #0
 8002628:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <MX_FDCAN1_Init+0x84>)
 800262c:	2210      	movs	r2, #16
 800262e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002632:	2201      	movs	r2, #1
 8002634:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002638:	2202      	movs	r2, #2
 800263a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <MX_FDCAN1_Init+0x84>)
 800263e:	2202      	movs	r2, #2
 8002640:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002644:	2201      	movs	r2, #1
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <MX_FDCAN1_Init+0x84>)
 800264a:	2201      	movs	r2, #1
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002650:	2201      	movs	r2, #1
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002656:	2201      	movs	r2, #1
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <MX_FDCAN1_Init+0x84>)
 800265c:	2200      	movs	r2, #0
 800265e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002662:	2200      	movs	r2, #0
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <MX_FDCAN1_Init+0x84>)
 8002668:	2200      	movs	r2, #0
 800266a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <MX_FDCAN1_Init+0x84>)
 800266e:	f003 fad1 	bl	8005c14 <HAL_FDCAN_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002678:	f000 f9b8 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200004c4 	.word	0x200004c4
 8002684:	40006400 	.word	0x40006400

08002688 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b09a      	sub	sp, #104	; 0x68
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	2244      	movs	r2, #68	; 0x44
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00b ffaf 	bl	800e60c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a28      	ldr	r2, [pc, #160]	; (8002754 <HAL_FDCAN_MspInit+0xcc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d149      	bne.n	800274c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80026be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 fdf7 	bl	80072bc <HAL_RCCEx_PeriphCLKConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80026d4:	f000 f98a 	bl	80029ec <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <HAL_FDCAN_MspInit+0xd0>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <HAL_FDCAN_MspInit+0xd0>)
 80026de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e2:	6593      	str	r3, [r2, #88]	; 0x58
 80026e4:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <HAL_FDCAN_MspInit+0xd0>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_FDCAN_MspInit+0xd0>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_FDCAN_MspInit+0xd0>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_FDCAN_MspInit+0xd0>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002708:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800270c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800271a:	2309      	movs	r3, #9
 800271c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002722:	4619      	mov	r1, r3
 8002724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002728:	f003 fdd2 	bl	80062d0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2105      	movs	r1, #5
 8002730:	2015      	movs	r0, #21
 8002732:	f002 fccf 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002736:	2015      	movs	r0, #21
 8002738:	f002 fce6 	bl	8005108 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2105      	movs	r1, #5
 8002740:	2016      	movs	r0, #22
 8002742:	f002 fcc7 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002746:	2016      	movs	r0, #22
 8002748:	f002 fcde 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800274c:	bf00      	nop
 800274e:	3768      	adds	r7, #104	; 0x68
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40006400 	.word	0x40006400
 8002758:	40021000 	.word	0x40021000

0800275c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002772:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <MX_GPIO_Init+0x15c>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	4a50      	ldr	r2, [pc, #320]	; (80028b8 <MX_GPIO_Init+0x15c>)
 8002778:	f043 0320 	orr.w	r3, r3, #32
 800277c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277e:	4b4e      	ldr	r3, [pc, #312]	; (80028b8 <MX_GPIO_Init+0x15c>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <MX_GPIO_Init+0x15c>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <MX_GPIO_Init+0x15c>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002796:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <MX_GPIO_Init+0x15c>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <MX_GPIO_Init+0x15c>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	4a44      	ldr	r2, [pc, #272]	; (80028b8 <MX_GPIO_Init+0x15c>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ae:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <MX_GPIO_Init+0x15c>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <MX_GPIO_Init+0x15c>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	4a3e      	ldr	r2, [pc, #248]	; (80028b8 <MX_GPIO_Init+0x15c>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c6:	4b3c      	ldr	r3, [pc, #240]	; (80028b8 <MX_GPIO_Init+0x15c>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <MX_GPIO_Init+0x15c>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	4a38      	ldr	r2, [pc, #224]	; (80028b8 <MX_GPIO_Init+0x15c>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027de:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <MX_GPIO_Init+0x15c>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 80027ea:	2200      	movs	r2, #0
 80027ec:	21c0      	movs	r1, #192	; 0xc0
 80027ee:	4833      	ldr	r0, [pc, #204]	; (80028bc <MX_GPIO_Init+0x160>)
 80027f0:	f003 fef0 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027fe:	f003 fee9 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8002802:	2200      	movs	r2, #0
 8002804:	2104      	movs	r1, #4
 8002806:	482e      	ldr	r0, [pc, #184]	; (80028c0 <MX_GPIO_Init+0x164>)
 8002808:	f003 fee4 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 800280c:	2200      	movs	r2, #0
 800280e:	2140      	movs	r1, #64	; 0x40
 8002810:	482c      	ldr	r0, [pc, #176]	; (80028c4 <MX_GPIO_Init+0x168>)
 8002812:	f003 fedf 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8002816:	23c0      	movs	r3, #192	; 0xc0
 8002818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281a:	2301      	movs	r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	4823      	ldr	r0, [pc, #140]	; (80028bc <MX_GPIO_Init+0x160>)
 800282e:	f003 fd4f 	bl	80062d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002852:	f003 fd3d 	bl	80062d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8002856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285c:	2301      	movs	r3, #1
 800285e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002872:	f003 fd2d 	bl	80062d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8002876:	2304      	movs	r3, #4
 8002878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287a:	2301      	movs	r3, #1
 800287c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	4619      	mov	r1, r3
 800288c:	480c      	ldr	r0, [pc, #48]	; (80028c0 <MX_GPIO_Init+0x164>)
 800288e:	f003 fd1f 	bl	80062d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8002892:	2340      	movs	r3, #64	; 0x40
 8002894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4806      	ldr	r0, [pc, #24]	; (80028c4 <MX_GPIO_Init+0x168>)
 80028aa:	f003 fd11 	bl	80062d0 <HAL_GPIO_Init>

}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	48000800 	.word	0x48000800
 80028c0:	48000c00 	.word	0x48000c00
 80028c4:	48000400 	.word	0x48000400

080028c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028cc:	f000 fe5f 	bl	800358e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028d0:	f000 f81d 	bl	800290e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028d4:	f7ff ff42 	bl	800275c <MX_GPIO_Init>
  MX_DMA_Init();
 80028d8:	f7ff fe2a 	bl	8002530 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80028dc:	f7ff fe8e 	bl	80025fc <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80028e0:	f000 f88a 	bl	80029f8 <MX_SPI1_Init>
  MX_SPI3_Init();
 80028e4:	f000 f8c6 	bl	8002a74 <MX_SPI3_Init>
  MX_TIM1_Init();
 80028e8:	f000 fb96 	bl	8003018 <MX_TIM1_Init>
  MX_ADC1_Init();
 80028ec:	f7ff fb16 	bl	8001f1c <MX_ADC1_Init>
  MX_ADC2_Init();
 80028f0:	f7ff fbc8 	bl	8002084 <MX_ADC2_Init>
  MX_DAC1_Init();
 80028f4:	f7ff fda4 	bl	8002440 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80028f8:	f000 fd46 	bl	8003388 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80028fc:	f000 fc54 	bl	80031a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002900:	f008 f872 	bl	800a9e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002904:	f7ff fd80 	bl	8002408 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002908:	f008 f892 	bl	800aa30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800290c:	e7fe      	b.n	800290c <main+0x44>

0800290e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b094      	sub	sp, #80	; 0x50
 8002912:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002914:	f107 0318 	add.w	r3, r7, #24
 8002918:	2238      	movs	r2, #56	; 0x38
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f00b fe75 	bl	800e60c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002930:	2000      	movs	r0, #0
 8002932:	f003 fe67 	bl	8006604 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002936:	2303      	movs	r3, #3
 8002938:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800293a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800293e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002946:	2340      	movs	r3, #64	; 0x40
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800294a:	2302      	movs	r3, #2
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800294e:	2303      	movs	r3, #3
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002952:	2302      	movs	r3, #2
 8002954:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002956:	2328      	movs	r3, #40	; 0x28
 8002958:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800295a:	2302      	movs	r3, #2
 800295c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800295e:	2302      	movs	r3, #2
 8002960:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002962:	2302      	movs	r3, #2
 8002964:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002966:	f107 0318 	add.w	r3, r7, #24
 800296a:	4618      	mov	r0, r3
 800296c:	f003 fefe 	bl	800676c <HAL_RCC_OscConfig>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002976:	f000 f839 	bl	80029ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800297a:	230f      	movs	r3, #15
 800297c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800297e:	2303      	movs	r3, #3
 8002980:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	2104      	movs	r1, #4
 8002992:	4618      	mov	r0, r3
 8002994:	f004 fa02 	bl	8006d9c <HAL_RCC_ClockConfig>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800299e:	f000 f825 	bl	80029ec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 80029a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a6:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 80029aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029ae:	f004 fb31 	bl	8007014 <HAL_RCC_MCOConfig>
}
 80029b2:	bf00      	nop
 80029b4:	3750      	adds	r7, #80	; 0x50
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029cc:	d101      	bne.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029ce:	f000 fdf7 	bl	80035c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_TIM_PeriodElapsedCallback+0x24>
		  tim1_PWM_PulseFinishedCallback();
 80029dc:	f7fe fba6 	bl	800112c <tim1_PWM_PulseFinishedCallback>
    }
  /* USER CODE END Callback 1 */
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40000400 	.word	0x40000400

080029ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f0:	b672      	cpsid	i
}
 80029f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <Error_Handler+0x8>
	...

080029f8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <MX_SPI1_Init+0x74>)
 80029fe:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <MX_SPI1_Init+0x78>)
 8002a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a2e:	2220      	movs	r2, #32
 8002a30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a46:	2207      	movs	r2, #7
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a52:	2208      	movs	r2, #8
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_SPI1_Init+0x74>)
 8002a58:	f004 fe20 	bl	800769c <HAL_SPI_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a62:	f7ff ffc3 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000528 	.word	0x20000528
 8002a70:	40013000 	.word	0x40013000

08002a74 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <MX_SPI3_Init+0x78>)
 8002a7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002a80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002a86:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a8c:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002a8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002aaa:	2220      	movs	r2, #32
 8002aac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002ace:	2208      	movs	r2, #8
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ad2:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <MX_SPI3_Init+0x74>)
 8002ad4:	f004 fde2 	bl	800769c <HAL_SPI_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002ade:	f7ff ff85 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000058c 	.word	0x2000058c
 8002aec:	40003c00 	.word	0x40003c00

08002af0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	; 0x30
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a89      	ldr	r2, [pc, #548]	; (8002d34 <HAL_SPI_MspInit+0x244>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 8083 	bne.w	8002c1a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b14:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b18:	4a87      	ldr	r2, [pc, #540]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002b1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b1e:	6613      	str	r3, [r2, #96]	; 0x60
 8002b20:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2c:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	4a81      	ldr	r2, [pc, #516]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b38:	4b7f      	ldr	r3, [pc, #508]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b44:	2338      	movs	r3, #56	; 0x38
 8002b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b54:	2305      	movs	r3, #5
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b58:	f107 031c 	add.w	r3, r7, #28
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4877      	ldr	r0, [pc, #476]	; (8002d3c <HAL_SPI_MspInit+0x24c>)
 8002b60:	f003 fbb6 	bl	80062d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8002b64:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b66:	4a77      	ldr	r2, [pc, #476]	; (8002d44 <HAL_SPI_MspInit+0x254>)
 8002b68:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002b6a:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b6c:	220a      	movs	r2, #10
 8002b6e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b70:	4b73      	ldr	r3, [pc, #460]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b76:	4b72      	ldr	r3, [pc, #456]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7c:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b88:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002b8e:	4b6c      	ldr	r3, [pc, #432]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b94:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002b9a:	4869      	ldr	r0, [pc, #420]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002b9c:	f002 fd08 	bl	80055b0 <HAL_DMA_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002ba6:	f7ff ff21 	bl	80029ec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a64      	ldr	r2, [pc, #400]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002bae:	659a      	str	r2, [r3, #88]	; 0x58
 8002bb0:	4a63      	ldr	r2, [pc, #396]	; (8002d40 <HAL_SPI_MspInit+0x250>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8002bb6:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002bb8:	4a64      	ldr	r2, [pc, #400]	; (8002d4c <HAL_SPI_MspInit+0x25c>)
 8002bba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002bbc:	4b62      	ldr	r3, [pc, #392]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002bbe:	220b      	movs	r2, #11
 8002bc0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bc2:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc8:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bce:	4b5e      	ldr	r3, [pc, #376]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd4:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bda:	4b5b      	ldr	r3, [pc, #364]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002be0:	4b59      	ldr	r3, [pc, #356]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002be6:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002bec:	4856      	ldr	r0, [pc, #344]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002bee:	f002 fcdf 	bl	80055b0 <HAL_DMA_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002bf8:	f7ff fef8 	bl	80029ec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
 8002c02:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_SPI_MspInit+0x258>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2105      	movs	r1, #5
 8002c0c:	2023      	movs	r0, #35	; 0x23
 8002c0e:	f002 fa61 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002c12:	2023      	movs	r0, #35	; 0x23
 8002c14:	f002 fa78 	bl	8005108 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002c18:	e088      	b.n	8002d2c <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a4c      	ldr	r2, [pc, #304]	; (8002d50 <HAL_SPI_MspInit+0x260>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	f040 8083 	bne.w	8002d2c <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c26:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	4a43      	ldr	r2, [pc, #268]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c30:	6593      	str	r3, [r2, #88]	; 0x58
 8002c32:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	4a3d      	ldr	r2, [pc, #244]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_SPI_MspInit+0x248>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002c56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c68:	2306      	movs	r3, #6
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	4619      	mov	r1, r3
 8002c72:	4838      	ldr	r0, [pc, #224]	; (8002d54 <HAL_SPI_MspInit+0x264>)
 8002c74:	f003 fb2c 	bl	80062d0 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8002c78:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002c7a:	4a38      	ldr	r2, [pc, #224]	; (8002d5c <HAL_SPI_MspInit+0x26c>)
 8002c7c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002c80:	220e      	movs	r2, #14
 8002c82:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c84:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8a:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c90:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c9c:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002cae:	482a      	ldr	r0, [pc, #168]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002cb0:	f002 fc7e 	bl	80055b0 <HAL_DMA_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 8002cba:	f7ff fe97 	bl	80029ec <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc4:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_SPI_MspInit+0x268>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002ccc:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <HAL_SPI_MspInit+0x274>)
 8002cce:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002cd8:	2210      	movs	r2, #16
 8002cda:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cee:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cfa:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002d00:	4817      	ldr	r0, [pc, #92]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002d02:	f002 fc55 	bl	80055b0 <HAL_DMA_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8002d0c:	f7ff fe6e 	bl	80029ec <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
 8002d16:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <HAL_SPI_MspInit+0x270>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2105      	movs	r1, #5
 8002d20:	2033      	movs	r0, #51	; 0x33
 8002d22:	f002 f9d7 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002d26:	2033      	movs	r0, #51	; 0x33
 8002d28:	f002 f9ee 	bl	8005108 <HAL_NVIC_EnableIRQ>
}
 8002d2c:	bf00      	nop
 8002d2e:	3730      	adds	r7, #48	; 0x30
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40013000 	.word	0x40013000
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	48000400 	.word	0x48000400
 8002d40:	200005f0 	.word	0x200005f0
 8002d44:	40020030 	.word	0x40020030
 8002d48:	20000650 	.word	0x20000650
 8002d4c:	40020044 	.word	0x40020044
 8002d50:	40003c00 	.word	0x40003c00
 8002d54:	48000800 	.word	0x48000800
 8002d58:	200006b0 	.word	0x200006b0
 8002d5c:	40020408 	.word	0x40020408
 8002d60:	20000710 	.word	0x20000710
 8002d64:	4002041c 	.word	0x4002041c

08002d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_MspInit+0x50>)
 8002d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d72:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <HAL_MspInit+0x50>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6613      	str	r3, [r2, #96]	; 0x60
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_MspInit+0x50>)
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_MspInit+0x50>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <HAL_MspInit+0x50>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d90:	6593      	str	r3, [r2, #88]	; 0x58
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_MspInit+0x50>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	210f      	movs	r1, #15
 8002da2:	f06f 0001 	mvn.w	r0, #1
 8002da6:	f002 f995 	bl	80050d4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002daa:	f003 fccf 	bl	800674c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_InitTick+0xc8>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	4a2c      	ldr	r2, [pc, #176]	; (8002e84 <HAL_InitTick+0xc8>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_InitTick+0xc8>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002de4:	f107 020c 	add.w	r2, r7, #12
 8002de8:	f107 0310 	add.w	r3, r7, #16
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 f9ee 	bl	80071d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002df4:	f004 f9c0 	bl	8007178 <HAL_RCC_GetPCLK1Freq>
 8002df8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <HAL_InitTick+0xcc>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0c9b      	lsrs	r3, r3, #18
 8002e04:	3b01      	subs	r3, #1
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002e08:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_InitTick+0xd0>)
 8002e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002e10:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_InitTick+0xd0>)
 8002e12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e16:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002e18:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_InitTick+0xd0>)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_InitTick+0xd0>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_InitTick+0xd0>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8002e2a:	4818      	ldr	r0, [pc, #96]	; (8002e8c <HAL_InitTick+0xd0>)
 8002e2c:	f004 fdf5 	bl	8007a1a <HAL_TIM_Base_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11b      	bne.n	8002e76 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002e3e:	4813      	ldr	r0, [pc, #76]	; (8002e8c <HAL_InitTick+0xd0>)
 8002e40:	f004 fe42 	bl	8007ac8 <HAL_TIM_Base_Start_IT>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d111      	bne.n	8002e76 <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e52:	201c      	movs	r0, #28
 8002e54:	f002 f958 	bl	8005108 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	d808      	bhi.n	8002e70 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	201c      	movs	r0, #28
 8002e64:	f002 f936 	bl	80050d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e68:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_InitTick+0xd4>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e002      	b.n	8002e76 <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3730      	adds	r7, #48	; 0x30
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	431bde83 	.word	0x431bde83
 8002e8c:	20000770 	.word	0x20000770
 8002e90:	20000134 	.word	0x20000134

08002e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <NMI_Handler+0x4>

08002e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e9e:	e7fe      	b.n	8002e9e <HardFault_Handler+0x4>

08002ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <MemManage_Handler+0x4>

08002ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eaa:	e7fe      	b.n	8002eaa <BusFault_Handler+0x4>

08002eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <UsageFault_Handler+0x4>

08002eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <DMA1_Channel1_IRQHandler+0x10>)
 8002ec6:	f002 fd56 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200003e8 	.word	0x200003e8

08002ed4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <DMA1_Channel2_IRQHandler+0x10>)
 8002eda:	f002 fd4c 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000448 	.word	0x20000448

08002ee8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <DMA1_Channel3_IRQHandler+0x10>)
 8002eee:	f002 fd42 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200005f0 	.word	0x200005f0

08002efc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <DMA1_Channel4_IRQHandler+0x10>)
 8002f02:	f002 fd38 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000650 	.word	0x20000650

08002f10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f14:	4803      	ldr	r0, [pc, #12]	; (8002f24 <ADC1_2_IRQHandler+0x14>)
 8002f16:	f001 f815 	bl	8003f44 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002f1a:	4803      	ldr	r0, [pc, #12]	; (8002f28 <ADC1_2_IRQHandler+0x18>)
 8002f1c:	f001 f812 	bl	8003f44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000310 	.word	0x20000310
 8002f28:	2000037c 	.word	0x2000037c

08002f2c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <FDCAN1_IT0_IRQHandler+0x10>)
 8002f32:	f002 ffc9 	bl	8005ec8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200004c4 	.word	0x200004c4

08002f40 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <FDCAN1_IT1_IRQHandler+0x10>)
 8002f46:	f002 ffbf 	bl	8005ec8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200004c4 	.word	0x200004c4

08002f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <TIM2_IRQHandler+0x10>)
 8002f5a:	f004 ff81 	bl	8007e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000770 	.word	0x20000770

08002f68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <TIM3_IRQHandler+0x10>)
 8002f6e:	f004 ff77 	bl	8007e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000808 	.word	0x20000808

08002f7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <SPI1_IRQHandler+0x10>)
 8002f82:	f004 fc37 	bl	80077f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000528 	.word	0x20000528

08002f90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <USART1_IRQHandler+0x10>)
 8002f96:	f006 fa85 	bl	80094a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000854 	.word	0x20000854

08002fa4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <SPI3_IRQHandler+0x10>)
 8002faa:	f004 fc23 	bl	80077f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000058c 	.word	0x2000058c

08002fb8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <DMA2_Channel1_IRQHandler+0x10>)
 8002fbe:	f002 fcda 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200006b0 	.word	0x200006b0

08002fcc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <DMA2_Channel2_IRQHandler+0x10>)
 8002fd2:	f002 fcd0 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000710 	.word	0x20000710

08002fe0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <DMA2_Channel3_IRQHandler+0x10>)
 8002fe6:	f002 fcc6 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200008e4 	.word	0x200008e4

08002ff4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <SystemInit+0x20>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <SystemInit+0x20>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b09c      	sub	sp, #112	; 0x70
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800301e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800302c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003038:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
 8003048:	615a      	str	r2, [r3, #20]
 800304a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	2234      	movs	r2, #52	; 0x34
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f00b fada 	bl	800e60c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003058:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <MX_TIM1_Init+0x188>)
 800305a:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <MX_TIM1_Init+0x18c>)
 800305c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800305e:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003060:	2200      	movs	r2, #0
 8003062:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003064:	4b4e      	ldr	r3, [pc, #312]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003066:	2220      	movs	r2, #32
 8003068:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 800306a:	4b4d      	ldr	r3, [pc, #308]	; (80031a0 <MX_TIM1_Init+0x188>)
 800306c:	f240 52db 	movw	r2, #1499	; 0x5db
 8003070:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003072:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003078:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <MX_TIM1_Init+0x188>)
 800307a:	2200      	movs	r2, #0
 800307c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800307e:	4b48      	ldr	r3, [pc, #288]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003084:	4846      	ldr	r0, [pc, #280]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003086:	f004 fcc8 	bl	8007a1a <HAL_TIM_Base_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003090:	f7ff fcac 	bl	80029ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003098:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800309a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800309e:	4619      	mov	r1, r3
 80030a0:	483f      	ldr	r0, [pc, #252]	; (80031a0 <MX_TIM1_Init+0x188>)
 80030a2:	f005 f971 	bl	8008388 <HAL_TIM_ConfigClockSource>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80030ac:	f7ff fc9e 	bl	80029ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030b0:	483b      	ldr	r0, [pc, #236]	; (80031a0 <MX_TIM1_Init+0x188>)
 80030b2:	f004 fd73 	bl	8007b9c <HAL_TIM_PWM_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80030bc:	f7ff fc96 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030c4:	2300      	movs	r3, #0
 80030c6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030d0:	4619      	mov	r1, r3
 80030d2:	4833      	ldr	r0, [pc, #204]	; (80031a0 <MX_TIM1_Init+0x188>)
 80030d4:	f005 ff76 	bl	8008fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80030de:	f7ff fc85 	bl	80029ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030e2:	2360      	movs	r3, #96	; 0x60
 80030e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80030ea:	2302      	movs	r3, #2
 80030ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80030ee:	2308      	movs	r3, #8
 80030f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003102:	2200      	movs	r2, #0
 8003104:	4619      	mov	r1, r3
 8003106:	4826      	ldr	r0, [pc, #152]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003108:	f005 f82a 	bl	8008160 <HAL_TIM_PWM_ConfigChannel>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003112:	f7ff fc6b 	bl	80029ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800311a:	2204      	movs	r2, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4820      	ldr	r0, [pc, #128]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003120:	f005 f81e 	bl	8008160 <HAL_TIM_PWM_ConfigChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800312a:	f7ff fc5f 	bl	80029ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800312e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003132:	2208      	movs	r2, #8
 8003134:	4619      	mov	r1, r3
 8003136:	481a      	ldr	r0, [pc, #104]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003138:	f005 f812 	bl	8008160 <HAL_TIM_PWM_ConfigChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003142:	f7ff fc53 	bl	80029ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800315a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800315e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800316c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003176:	2300      	movs	r3, #0
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4807      	ldr	r0, [pc, #28]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003184:	f005 ffa0 	bl	80090c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800318e:	f7ff fc2d 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003192:	4803      	ldr	r0, [pc, #12]	; (80031a0 <MX_TIM1_Init+0x188>)
 8003194:	f000 f890 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8003198:	bf00      	nop
 800319a:	3770      	adds	r7, #112	; 0x70
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200007bc 	.word	0x200007bc
 80031a4:	40012c00 	.word	0x40012c00

080031a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ae:	f107 0310 	add.w	r3, r7, #16
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031bc:	1d3b      	adds	r3, r7, #4
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <MX_TIM3_Init+0x94>)
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <MX_TIM3_Init+0x98>)
 80031ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <MX_TIM3_Init+0x94>)
 80031ce:	2204      	movs	r2, #4
 80031d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <MX_TIM3_Init+0x94>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <MX_TIM3_Init+0x94>)
 80031da:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80031de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <MX_TIM3_Init+0x94>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <MX_TIM3_Init+0x94>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031ec:	4813      	ldr	r0, [pc, #76]	; (800323c <MX_TIM3_Init+0x94>)
 80031ee:	f004 fc14 	bl	8007a1a <HAL_TIM_Base_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80031f8:	f7ff fbf8 	bl	80029ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003200:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003202:	f107 0310 	add.w	r3, r7, #16
 8003206:	4619      	mov	r1, r3
 8003208:	480c      	ldr	r0, [pc, #48]	; (800323c <MX_TIM3_Init+0x94>)
 800320a:	f005 f8bd 	bl	8008388 <HAL_TIM_ConfigClockSource>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003214:	f7ff fbea 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	4619      	mov	r1, r3
 8003224:	4805      	ldr	r0, [pc, #20]	; (800323c <MX_TIM3_Init+0x94>)
 8003226:	f005 fecd 	bl	8008fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003230:	f7ff fbdc 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003234:	bf00      	nop
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000808 	.word	0x20000808
 8003240:	40000400 	.word	0x40000400

08003244 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_TIM_Base_MspInit+0x68>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d10c      	bne.n	8003270 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003256:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 8003258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325a:	4a15      	ldr	r2, [pc, #84]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 800325c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003260:	6613      	str	r3, [r2, #96]	; 0x60
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800326e:	e018      	b.n	80032a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <HAL_TIM_Base_MspInit+0x70>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d113      	bne.n	80032a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	4a0c      	ldr	r2, [pc, #48]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	6593      	str	r3, [r2, #88]	; 0x58
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2105      	movs	r1, #5
 8003296:	201d      	movs	r0, #29
 8003298:	f001 ff1c 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800329c:	201d      	movs	r0, #29
 800329e:	f001 ff33 	bl	8005108 <HAL_NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40000400 	.word	0x40000400

080032b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <HAL_TIM_MspPostInit+0xc0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d149      	bne.n	800336e <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <HAL_TIM_MspPostInit+0xc4>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	4a27      	ldr	r2, [pc, #156]	; (800337c <HAL_TIM_MspPostInit+0xc4>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032e6:	4b25      	ldr	r3, [pc, #148]	; (800337c <HAL_TIM_MspPostInit+0xc4>)
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	4b22      	ldr	r3, [pc, #136]	; (800337c <HAL_TIM_MspPostInit+0xc4>)
 80032f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f6:	4a21      	ldr	r2, [pc, #132]	; (800337c <HAL_TIM_MspPostInit+0xc4>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032fe:	4b1f      	ldr	r3, [pc, #124]	; (800337c <HAL_TIM_MspPostInit+0xc4>)
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800330a:	2307      	movs	r3, #7
 800330c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800331a:	2302      	movs	r3, #2
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	4816      	ldr	r0, [pc, #88]	; (8003380 <HAL_TIM_MspPostInit+0xc8>)
 8003326:	f002 ffd3 	bl	80062d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800332a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800332e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	2300      	movs	r3, #0
 800333a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800333c:	2306      	movs	r3, #6
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	4619      	mov	r1, r3
 8003346:	480f      	ldr	r0, [pc, #60]	; (8003384 <HAL_TIM_MspPostInit+0xcc>)
 8003348:	f002 ffc2 	bl	80062d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800334c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800335e:	2304      	movs	r3, #4
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	4806      	ldr	r0, [pc, #24]	; (8003384 <HAL_TIM_MspPostInit+0xcc>)
 800336a:	f002 ffb1 	bl	80062d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800336e:	bf00      	nop
 8003370:	3728      	adds	r7, #40	; 0x28
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40021000 	.word	0x40021000
 8003380:	48000800 	.word	0x48000800
 8003384:	48000400 	.word	0x48000400

08003388 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800338c:	4b22      	ldr	r3, [pc, #136]	; (8003418 <MX_USART1_UART_Init+0x90>)
 800338e:	4a23      	ldr	r2, [pc, #140]	; (800341c <MX_USART1_UART_Init+0x94>)
 8003390:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003392:	4b21      	ldr	r3, [pc, #132]	; (8003418 <MX_USART1_UART_Init+0x90>)
 8003394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003398:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800339a:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <MX_USART1_UART_Init+0x90>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033a6:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033ae:	220c      	movs	r2, #12
 80033b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033d0:	4811      	ldr	r0, [pc, #68]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033d2:	f005 ff84 	bl	80092de <HAL_UART_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80033dc:	f7ff fb06 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033e0:	2100      	movs	r1, #0
 80033e2:	480d      	ldr	r0, [pc, #52]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033e4:	f007 f9f1 	bl	800a7ca <HAL_UARTEx_SetTxFifoThreshold>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80033ee:	f7ff fafd 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033f2:	2100      	movs	r1, #0
 80033f4:	4808      	ldr	r0, [pc, #32]	; (8003418 <MX_USART1_UART_Init+0x90>)
 80033f6:	f007 fa26 	bl	800a846 <HAL_UARTEx_SetRxFifoThreshold>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003400:	f7ff faf4 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003404:	4804      	ldr	r0, [pc, #16]	; (8003418 <MX_USART1_UART_Init+0x90>)
 8003406:	f007 f9a7 	bl	800a758 <HAL_UARTEx_DisableFifoMode>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003410:	f7ff faec 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000854 	.word	0x20000854
 800341c:	40013800 	.word	0x40013800

08003420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b09a      	sub	sp, #104	; 0x68
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	2244      	movs	r2, #68	; 0x44
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f00b f8e3 	bl	800e60c <memset>
  if(uartHandle->Instance==USART1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a37      	ldr	r2, [pc, #220]	; (8003528 <HAL_UART_MspInit+0x108>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d166      	bne.n	800351e <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003450:	2301      	movs	r3, #1
 8003452:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003458:	f107 0310 	add.w	r3, r7, #16
 800345c:	4618      	mov	r0, r3
 800345e:	f003 ff2d 	bl	80072bc <HAL_RCCEx_PeriphCLKConfig>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003468:	f7ff fac0 	bl	80029ec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800346c:	4b2f      	ldr	r3, [pc, #188]	; (800352c <HAL_UART_MspInit+0x10c>)
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	4a2e      	ldr	r2, [pc, #184]	; (800352c <HAL_UART_MspInit+0x10c>)
 8003472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003476:	6613      	str	r3, [r2, #96]	; 0x60
 8003478:	4b2c      	ldr	r3, [pc, #176]	; (800352c <HAL_UART_MspInit+0x10c>)
 800347a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003484:	4b29      	ldr	r3, [pc, #164]	; (800352c <HAL_UART_MspInit+0x10c>)
 8003486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003488:	4a28      	ldr	r2, [pc, #160]	; (800352c <HAL_UART_MspInit+0x10c>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_UART_MspInit+0x10c>)
 8003492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800349c:	2330      	movs	r3, #48	; 0x30
 800349e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ac:	2307      	movs	r3, #7
 80034ae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034b4:	4619      	mov	r1, r3
 80034b6:	481e      	ldr	r0, [pc, #120]	; (8003530 <HAL_UART_MspInit+0x110>)
 80034b8:	f002 ff0a 	bl	80062d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034be:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <HAL_UART_MspInit+0x118>)
 80034c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034c4:	2219      	movs	r2, #25
 80034c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034ca:	2210      	movs	r2, #16
 80034cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034dc:	2200      	movs	r2, #0
 80034de:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034f2:	4810      	ldr	r0, [pc, #64]	; (8003534 <HAL_UART_MspInit+0x114>)
 80034f4:	f002 f85c 	bl	80055b0 <HAL_DMA_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80034fe:	f7ff fa75 	bl	80029ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <HAL_UART_MspInit+0x114>)
 8003506:	679a      	str	r2, [r3, #120]	; 0x78
 8003508:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <HAL_UART_MspInit+0x114>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2105      	movs	r1, #5
 8003512:	2025      	movs	r0, #37	; 0x25
 8003514:	f001 fdde 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003518:	2025      	movs	r0, #37	; 0x25
 800351a:	f001 fdf5 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800351e:	bf00      	nop
 8003520:	3768      	adds	r7, #104	; 0x68
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40013800 	.word	0x40013800
 800352c:	40021000 	.word	0x40021000
 8003530:	48000800 	.word	0x48000800
 8003534:	200008e4 	.word	0x200008e4
 8003538:	40020430 	.word	0x40020430

0800353c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800353c:	480d      	ldr	r0, [pc, #52]	; (8003574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800353e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003540:	480d      	ldr	r0, [pc, #52]	; (8003578 <LoopForever+0x6>)
  ldr r1, =_edata
 8003542:	490e      	ldr	r1, [pc, #56]	; (800357c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003544:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <LoopForever+0xe>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003548:	e002      	b.n	8003550 <LoopCopyDataInit>

0800354a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800354c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354e:	3304      	adds	r3, #4

08003550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003554:	d3f9      	bcc.n	800354a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003558:	4c0b      	ldr	r4, [pc, #44]	; (8003588 <LoopForever+0x16>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800355c:	e001      	b.n	8003562 <LoopFillZerobss>

0800355e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003560:	3204      	adds	r2, #4

08003562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003564:	d3fb      	bcc.n	800355e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003566:	f7ff fd45 	bl	8002ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356a:	f00b f8ad 	bl	800e6c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800356e:	f7ff f9ab 	bl	80028c8 <main>

08003572 <LoopForever>:

LoopForever:
    b LoopForever
 8003572:	e7fe      	b.n	8003572 <LoopForever>
  ldr   r0, =_estack
 8003574:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800357c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003580:	0800e8e8 	.word	0x0800e8e8
  ldr r2, =_sbss
 8003584:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003588:	20004c5c 	.word	0x20004c5c

0800358c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800358c:	e7fe      	b.n	800358c <COMP1_2_3_IRQHandler>

0800358e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003598:	2003      	movs	r0, #3
 800359a:	f001 fd90 	bl	80050be <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800359e:	200f      	movs	r0, #15
 80035a0:	f7ff fc0c 	bl	8002dbc <HAL_InitTick>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	71fb      	strb	r3, [r7, #7]
 80035ae:	e001      	b.n	80035b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035b0:	f7ff fbda 	bl	8002d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035b4:	79fb      	ldrb	r3, [r7, #7]

}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_IncTick+0x1c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_IncTick+0x20>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	4a03      	ldr	r2, [pc, #12]	; (80035dc <HAL_IncTick+0x1c>)
 80035d0:	6013      	str	r3, [r2, #0]
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	20000944 	.word	0x20000944
 80035e0:	20000138 	.word	0x20000138

080035e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return uwTick;
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_GetTick+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000944 	.word	0x20000944

080035fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003604:	f7ff ffee 	bl	80035e4 <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d004      	beq.n	8003620 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_Delay+0x40>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003620:	bf00      	nop
 8003622:	f7ff ffdf 	bl	80035e4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	429a      	cmp	r2, r3
 8003630:	d8f7      	bhi.n	8003622 <HAL_Delay+0x26>
  {
  }
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000138 	.word	0x20000138

08003640 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3360      	adds	r3, #96	; 0x60
 80036ba:	461a      	mov	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <LL_ADC_SetOffset+0x44>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	03fff000 	.word	0x03fff000

080036f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3360      	adds	r3, #96	; 0x60
 80036fe:	461a      	mov	r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3360      	adds	r3, #96	; 0x60
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	431a      	orrs	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3360      	adds	r3, #96	; 0x60
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	431a      	orrs	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3360      	adds	r3, #96	; 0x60
 8003798:	461a      	mov	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	615a      	str	r2, [r3, #20]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800380a:	b480      	push	{r7}
 800380c:	b087      	sub	sp, #28
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3330      	adds	r3, #48	; 0x30
 800381a:	461a      	mov	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	4413      	add	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	211f      	movs	r1, #31
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	401a      	ands	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	f003 011f 	and.w	r1, r3, #31
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	431a      	orrs	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3314      	adds	r3, #20
 8003898:	461a      	mov	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	4413      	add	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	0d1b      	lsrs	r3, r3, #20
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	2107      	movs	r1, #7
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	401a      	ands	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	0d1b      	lsrs	r3, r3, #20
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	431a      	orrs	r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0f      	ldr	r2, [pc, #60]	; (800392c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d10a      	bne.n	800390a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003908:	e00a      	b.n	8003920 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003916:	43db      	mvns	r3, r3
 8003918:	401a      	ands	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	407f0000 	.word	0x407f0000

08003930 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 031f 	and.w	r3, r3, #31
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6093      	str	r3, [r2, #8]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800399c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a0:	d101      	bne.n	80039a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80039c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f0:	d101      	bne.n	80039f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a18:	f043 0201 	orr.w	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <LL_ADC_IsEnabled+0x18>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <LL_ADC_IsEnabled+0x1a>
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a66:	f043 0204 	orr.w	r2, r3, #4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d101      	bne.n	8003a92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d101      	bne.n	8003ab8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e177      	b.n	8003dd2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d109      	bne.n	8003b04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fe fb2d 	bl	8002150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff3f 	bl	800398c <LL_ADC_IsDeepPowerDownEnabled>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff25 	bl	8003968 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff5a 	bl	80039dc <LL_ADC_IsInternalRegulatorEnabled>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d115      	bne.n	8003b5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff3e 	bl	80039b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b38:	4b9c      	ldr	r3, [pc, #624]	; (8003dac <HAL_ADC_Init+0x2e4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	4a9c      	ldr	r2, [pc, #624]	; (8003db0 <HAL_ADC_Init+0x2e8>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	099b      	lsrs	r3, r3, #6
 8003b46:	3301      	adds	r3, #1
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b4c:	e002      	b.n	8003b54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f9      	bne.n	8003b4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff3c 	bl	80039dc <LL_ADC_IsInternalRegulatorEnabled>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10d      	bne.n	8003b86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	f043 0210 	orr.w	r2, r3, #16
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7a:	f043 0201 	orr.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff75 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 8003b90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 8110 	bne.w	8003dc0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 810c 	bne.w	8003dc0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003bb0:	f043 0202 	orr.w	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff35 	bl	8003a2c <LL_ADC_IsEnabled>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d111      	bne.n	8003bec <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003bcc:	f7ff ff2e 	bl	8003a2c <LL_ADC_IsEnabled>
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	4878      	ldr	r0, [pc, #480]	; (8003db4 <HAL_ADC_Init+0x2ec>)
 8003bd4:	f7ff ff2a 	bl	8003a2c <LL_ADC_IsEnabled>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4323      	orrs	r3, r4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4619      	mov	r1, r3
 8003be6:	4874      	ldr	r0, [pc, #464]	; (8003db8 <HAL_ADC_Init+0x2f0>)
 8003be8:	f7ff fd2a 	bl	8003640 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	7f5b      	ldrb	r3, [r3, #29]
 8003bf0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bf6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003bfc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003c02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d106      	bne.n	8003c28 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	045b      	lsls	r3, r3, #17
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	4b5c      	ldr	r3, [pc, #368]	; (8003dbc <HAL_ADC_Init+0x2f4>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	69b9      	ldr	r1, [r7, #24]
 8003c54:	430b      	orrs	r3, r1
 8003c56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff ff01 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 8003c78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff0e 	bl	8003aa0 <LL_ADC_INJ_IsConversionOngoing>
 8003c84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d16d      	bne.n	8003d68 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d16a      	bne.n	8003d68 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c9e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cae:	f023 0302 	bic.w	r3, r3, #2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003cd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cdc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6911      	ldr	r1, [r2, #16]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003cf2:	e013      	b.n	8003d1c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d118      	bne.n	8003d58 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d3c:	4311      	orrs	r1, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	611a      	str	r2, [r3, #16]
 8003d56:	e007      	b.n	8003d68 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10c      	bne.n	8003d8a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f023 010f 	bic.w	r1, r3, #15
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	1e5a      	subs	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
 8003d88:	e007      	b.n	8003d9a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 020f 	bic.w	r2, r2, #15
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	f043 0201 	orr.w	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003daa:	e011      	b.n	8003dd0 <HAL_ADC_Init+0x308>
 8003dac:	20000130 	.word	0x20000130
 8003db0:	053e2d63 	.word	0x053e2d63
 8003db4:	50000100 	.word	0x50000100
 8003db8:	50000300 	.word	0x50000300
 8003dbc:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	f043 0210 	orr.w	r2, r3, #16
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3724      	adds	r7, #36	; 0x24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}
 8003dda:	bf00      	nop

08003ddc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003de8:	4851      	ldr	r0, [pc, #324]	; (8003f30 <HAL_ADC_Start_DMA+0x154>)
 8003dea:	f7ff fda1 	bl	8003930 <LL_ADC_GetMultimode>
 8003dee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fe40 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 808f 	bne.w	8003f20 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_ADC_Start_DMA+0x34>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e08a      	b.n	8003f26 <HAL_ADC_Start_DMA+0x14a>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d002      	beq.n	8003e2a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b09      	cmp	r3, #9
 8003e28:	d173      	bne.n	8003f12 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fea8 	bl	8004b80 <ADC_Enable>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d166      	bne.n	8003f08 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <HAL_ADC_Start_DMA+0x158>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d002      	beq.n	8003e5e <HAL_ADC_Start_DMA+0x82>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	e001      	b.n	8003e62 <HAL_ADC_Start_DMA+0x86>
 8003e5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d002      	beq.n	8003e70 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8c:	f023 0206 	bic.w	r2, r3, #6
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	661a      	str	r2, [r3, #96]	; 0x60
 8003e94:	e002      	b.n	8003e9c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <HAL_ADC_Start_DMA+0x15c>)
 8003ea2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	4a24      	ldr	r2, [pc, #144]	; (8003f3c <HAL_ADC_Start_DMA+0x160>)
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb0:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <HAL_ADC_Start_DMA+0x164>)
 8003eb2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	221c      	movs	r2, #28
 8003eba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0210 	orr.w	r2, r2, #16
 8003ed2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3340      	adds	r3, #64	; 0x40
 8003eee:	4619      	mov	r1, r3
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f001 fc04 	bl	8005700 <HAL_DMA_Start_IT>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fda6 	bl	8003a52 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003f06:	e00d      	b.n	8003f24 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003f10:	e008      	b.n	8003f24 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003f1e:	e001      	b.n	8003f24 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
 8003f22:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	50000300 	.word	0x50000300
 8003f34:	50000100 	.word	0x50000100
 8003f38:	08004c45 	.word	0x08004c45
 8003f3c:	08004d1d 	.word	0x08004d1d
 8003f40:	08004d39 	.word	0x08004d39

08003f44 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f60:	4883      	ldr	r0, [pc, #524]	; (8004170 <HAL_ADC_IRQHandler+0x22c>)
 8003f62:	f7ff fce5 	bl	8003930 <LL_ADC_GetMultimode>
 8003f66:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d017      	beq.n	8003fa2 <HAL_ADC_IRQHandler+0x5e>
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 ff37 	bl	8004e08 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_ADC_IRQHandler+0x72>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8085 	beq.w	80040cc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d07f      	beq.n	80040cc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fbfb 	bl	80037e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d064      	beq.n	80040be <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5e      	ldr	r2, [pc, #376]	; (8004174 <HAL_ADC_IRQHandler+0x230>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d002      	beq.n	8004004 <HAL_ADC_IRQHandler+0xc0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	e001      	b.n	8004008 <HAL_ADC_IRQHandler+0xc4>
 8004004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	4293      	cmp	r3, r2
 800400e:	d008      	beq.n	8004022 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b05      	cmp	r3, #5
 800401a:	d002      	beq.n	8004022 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b09      	cmp	r3, #9
 8004020:	d104      	bne.n	800402c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	e00d      	b.n	8004048 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a50      	ldr	r2, [pc, #320]	; (8004174 <HAL_ADC_IRQHandler+0x230>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d002      	beq.n	800403c <HAL_ADC_IRQHandler+0xf8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	e001      	b.n	8004040 <HAL_ADC_IRQHandler+0xfc>
 800403c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004040:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d135      	bne.n	80040be <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b08      	cmp	r3, #8
 800405e:	d12e      	bne.n	80040be <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fd08 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d11a      	bne.n	80040a6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 020c 	bic.w	r2, r2, #12
 800407e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004084:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d112      	bne.n	80040be <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409c:	f043 0201 	orr.w	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80040a4:	e00b      	b.n	80040be <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	f043 0210 	orr.w	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd f886 	bl	80011d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	220c      	movs	r2, #12
 80040ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <HAL_ADC_IRQHandler+0x19c>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 809e 	beq.w	8004228 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8098 	beq.w	8004228 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fba4 	bl	8003862 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800411a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fb5f 	bl	80037e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004126:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a11      	ldr	r2, [pc, #68]	; (8004174 <HAL_ADC_IRQHandler+0x230>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d002      	beq.n	8004138 <HAL_ADC_IRQHandler+0x1f4>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	e001      	b.n	800413c <HAL_ADC_IRQHandler+0x1f8>
 8004138:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	4293      	cmp	r3, r2
 8004142:	d008      	beq.n	8004156 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b06      	cmp	r3, #6
 800414e:	d002      	beq.n	8004156 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b07      	cmp	r3, #7
 8004154:	d104      	bne.n	8004160 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	e011      	b.n	8004184 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a03      	ldr	r2, [pc, #12]	; (8004174 <HAL_ADC_IRQHandler+0x230>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d006      	beq.n	8004178 <HAL_ADC_IRQHandler+0x234>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	e005      	b.n	800417c <HAL_ADC_IRQHandler+0x238>
 8004170:	50000300 	.word	0x50000300
 8004174:	50000100 	.word	0x50000100
 8004178:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800417c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d047      	beq.n	800421a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <HAL_ADC_IRQHandler+0x260>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d03f      	beq.n	800421a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d13a      	bne.n	800421a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d133      	bne.n	800421a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d12e      	bne.n	800421a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fc6d 	bl	8003aa0 <LL_ADC_INJ_IsConversionOngoing>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11a      	bne.n	8004202 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041da:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d112      	bne.n	800421a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004200:	e00b      	b.n	800421a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004206:	f043 0210 	orr.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fdcc 	bl	8004db8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2260      	movs	r2, #96	; 0x60
 8004226:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d011      	beq.n	8004256 <HAL_ADC_IRQHandler+0x312>
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00c      	beq.n	8004256 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f895 	bl	8004378 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d012      	beq.n	8004286 <HAL_ADC_IRQHandler+0x342>
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00d      	beq.n	8004286 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fdb2 	bl	8004de0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428c:	2b00      	cmp	r3, #0
 800428e:	d012      	beq.n	80042b6 <HAL_ADC_IRQHandler+0x372>
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00d      	beq.n	80042b6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fda4 	bl	8004df4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d036      	beq.n	800432e <HAL_ADC_IRQHandler+0x3ea>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d031      	beq.n	800432e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80042d2:	2301      	movs	r3, #1
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
 80042d6:	e014      	b.n	8004302 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80042de:	4825      	ldr	r0, [pc, #148]	; (8004374 <HAL_ADC_IRQHandler+0x430>)
 80042e0:	f7ff fb34 	bl	800394c <LL_ADC_GetMultiDMATransfer>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80042ea:	2301      	movs	r3, #1
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	e008      	b.n	8004302 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80042fe:	2301      	movs	r3, #1
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	2b01      	cmp	r3, #1
 8004306:	d10e      	bne.n	8004326 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004318:	f043 0202 	orr.w	r2, r3, #2
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f833 	bl	800438c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2210      	movs	r2, #16
 800432c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	2b00      	cmp	r3, #0
 8004336:	d018      	beq.n	800436a <HAL_ADC_IRQHandler+0x426>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433e:	2b00      	cmp	r3, #0
 8004340:	d013      	beq.n	800436a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004346:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004352:	f043 0208 	orr.w	r2, r3, #8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004362:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fd31 	bl	8004dcc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800436a:	bf00      	nop
 800436c:	3728      	adds	r7, #40	; 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	50000300 	.word	0x50000300

08004378 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b0b6      	sub	sp, #216	; 0xd8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x22>
 80043be:	2302      	movs	r3, #2
 80043c0:	e3c8      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x7b4>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fb53 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f040 83ad 	bne.w	8004b36 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	f7ff fa0e 	bl	800380a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fb41 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 80043f8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fb4d 	bl	8003aa0 <LL_ADC_INJ_IsConversionOngoing>
 8004406:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800440a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 81d9 	bne.w	80047c6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 81d4 	bne.w	80047c6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004426:	d10f      	bne.n	8004448 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2200      	movs	r2, #0
 8004432:	4619      	mov	r1, r3
 8004434:	f7ff fa28 	bl	8003888 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff f9bc 	bl	80037be <LL_ADC_SetSamplingTimeCommonConfig>
 8004446:	e00e      	b.n	8004466 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	461a      	mov	r2, r3
 8004456:	f7ff fa17 	bl	8003888 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff f9ac 	bl	80037be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	08db      	lsrs	r3, r3, #3
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d022      	beq.n	80044ce <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6919      	ldr	r1, [r3, #16]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004498:	f7ff f906 	bl	80036a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6919      	ldr	r1, [r3, #16]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f7ff f952 	bl	8003752 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	7f1b      	ldrb	r3, [r3, #28]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d102      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x124>
 80044be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044c2:	e000      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x126>
 80044c4:	2300      	movs	r3, #0
 80044c6:	461a      	mov	r2, r3
 80044c8:	f7ff f95e 	bl	8003788 <LL_ADC_SetOffsetSaturation>
 80044cc:	e17b      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff f90b 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 80044da:	4603      	mov	r3, r0
 80044dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x15a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff f900 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 80044f0:	4603      	mov	r3, r0
 80044f2:	0e9b      	lsrs	r3, r3, #26
 80044f4:	f003 021f 	and.w	r2, r3, #31
 80044f8:	e01e      	b.n	8004538 <HAL_ADC_ConfigChannel+0x198>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff f8f5 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8004506:	4603      	mov	r3, r0
 8004508:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800451c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004528:	2320      	movs	r3, #32
 800452a:	e004      	b.n	8004536 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800452c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004530:	fab3 f383 	clz	r3, r3
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1b0>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	0e9b      	lsrs	r3, r3, #26
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	e018      	b.n	8004582 <HAL_ADC_ConfigChannel+0x1e2>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800455c:	fa93 f3a3 	rbit	r3, r3
 8004560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800456c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e004      	b.n	8004582 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004582:	429a      	cmp	r2, r3
 8004584:	d106      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2200      	movs	r2, #0
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff f8c4 	bl	800371c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff f8a8 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x220>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2101      	movs	r1, #1
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff f89d 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 80045b6:	4603      	mov	r3, r0
 80045b8:	0e9b      	lsrs	r3, r3, #26
 80045ba:	f003 021f 	and.w	r2, r3, #31
 80045be:	e01e      	b.n	80045fe <HAL_ADC_ConfigChannel+0x25e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff f892 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80045de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80045e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80045ee:	2320      	movs	r3, #32
 80045f0:	e004      	b.n	80045fc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80045f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045f6:	fab3 f383 	clz	r3, r3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x276>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	0e9b      	lsrs	r3, r3, #26
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	e018      	b.n	8004648 <HAL_ADC_ConfigChannel+0x2a8>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800462a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800462e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004632:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800463a:	2320      	movs	r3, #32
 800463c:	e004      	b.n	8004648 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800463e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004648:	429a      	cmp	r2, r3
 800464a:	d106      	bne.n	800465a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2200      	movs	r2, #0
 8004652:	2101      	movs	r1, #1
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff f861 	bl	800371c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2102      	movs	r1, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff f845 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8004666:	4603      	mov	r3, r0
 8004668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x2e6>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2102      	movs	r1, #2
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff f83a 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 800467c:	4603      	mov	r3, r0
 800467e:	0e9b      	lsrs	r3, r3, #26
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	e01e      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x324>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff f82f 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8004692:	4603      	mov	r3, r0
 8004694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80046a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80046ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80046b4:	2320      	movs	r3, #32
 80046b6:	e004      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80046b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046bc:	fab3 f383 	clz	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x33c>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	0e9b      	lsrs	r3, r3, #26
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	e016      	b.n	800470a <HAL_ADC_ConfigChannel+0x36a>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046e8:	fa93 f3a3 	rbit	r3, r3
 80046ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80046ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80046f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80046fc:	2320      	movs	r3, #32
 80046fe:	e004      	b.n	800470a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800470a:	429a      	cmp	r2, r3
 800470c:	d106      	bne.n	800471c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	2102      	movs	r1, #2
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff f800 	bl	800371c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2103      	movs	r1, #3
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe ffe4 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8004728:	4603      	mov	r3, r0
 800472a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x3a8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2103      	movs	r1, #3
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe ffd9 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 800473e:	4603      	mov	r3, r0
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	f003 021f 	and.w	r2, r3, #31
 8004746:	e017      	b.n	8004778 <HAL_ADC_ConfigChannel+0x3d8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2103      	movs	r1, #3
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe ffce 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8004754:	4603      	mov	r3, r0
 8004756:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004760:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004762:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800476a:	2320      	movs	r3, #32
 800476c:	e003      	b.n	8004776 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800476e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004770:	fab3 f383 	clz	r3, r3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x3f0>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	0e9b      	lsrs	r3, r3, #26
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	e011      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x414>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004798:	fa93 f3a3 	rbit	r3, r3
 800479c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800479e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80047a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80047a8:	2320      	movs	r3, #32
 80047aa:	e003      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80047ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d106      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2200      	movs	r2, #0
 80047be:	2103      	movs	r1, #3
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe ffab 	bl	800371c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff f92e 	bl	8003a2c <LL_ADC_IsEnabled>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 8140 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	461a      	mov	r2, r3
 80047e6:	f7ff f87b 	bl	80038e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	4a8f      	ldr	r2, [pc, #572]	; (8004a2c <HAL_ADC_ConfigChannel+0x68c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	f040 8131 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <HAL_ADC_ConfigChannel+0x47e>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0e9b      	lsrs	r3, r3, #26
 800480c:	3301      	adds	r3, #1
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	2b09      	cmp	r3, #9
 8004814:	bf94      	ite	ls
 8004816:	2301      	movls	r3, #1
 8004818:	2300      	movhi	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	e019      	b.n	8004852 <HAL_ADC_ConfigChannel+0x4b2>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004826:	fa93 f3a3 	rbit	r3, r3
 800482a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800482c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800482e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004836:	2320      	movs	r3, #32
 8004838:	e003      	b.n	8004842 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800483a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800483c:	fab3 f383 	clz	r3, r3
 8004840:	b2db      	uxtb	r3, r3
 8004842:	3301      	adds	r3, #1
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	2b09      	cmp	r3, #9
 800484a:	bf94      	ite	ls
 800484c:	2301      	movls	r3, #1
 800484e:	2300      	movhi	r3, #0
 8004850:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004852:	2b00      	cmp	r3, #0
 8004854:	d079      	beq.n	800494a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x4d2>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	0e9b      	lsrs	r3, r3, #26
 8004868:	3301      	adds	r3, #1
 800486a:	069b      	lsls	r3, r3, #26
 800486c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004870:	e015      	b.n	800489e <HAL_ADC_ConfigChannel+0x4fe>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004882:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800488a:	2320      	movs	r3, #32
 800488c:	e003      	b.n	8004896 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800488e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	3301      	adds	r3, #1
 8004898:	069b      	lsls	r3, r3, #26
 800489a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HAL_ADC_ConfigChannel+0x51e>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	0e9b      	lsrs	r3, r3, #26
 80048b0:	3301      	adds	r3, #1
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2101      	movs	r1, #1
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	e017      	b.n	80048ee <HAL_ADC_ConfigChannel+0x54e>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c6:	fa93 f3a3 	rbit	r3, r3
 80048ca:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80048cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80048d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80048d6:	2320      	movs	r3, #32
 80048d8:	e003      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80048da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	3301      	adds	r3, #1
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	ea42 0103 	orr.w	r1, r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x574>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	0e9b      	lsrs	r3, r3, #26
 8004904:	3301      	adds	r3, #1
 8004906:	f003 021f 	and.w	r2, r3, #31
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	051b      	lsls	r3, r3, #20
 8004912:	e018      	b.n	8004946 <HAL_ADC_ConfigChannel+0x5a6>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004924:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800492c:	2320      	movs	r3, #32
 800492e:	e003      	b.n	8004938 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	3301      	adds	r3, #1
 800493a:	f003 021f 	and.w	r2, r3, #31
 800493e:	4613      	mov	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004946:	430b      	orrs	r3, r1
 8004948:	e081      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x5c6>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0e9b      	lsrs	r3, r3, #26
 800495c:	3301      	adds	r3, #1
 800495e:	069b      	lsls	r3, r3, #26
 8004960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004964:	e015      	b.n	8004992 <HAL_ADC_ConfigChannel+0x5f2>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496e:	fa93 f3a3 	rbit	r3, r3
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800497e:	2320      	movs	r3, #32
 8004980:	e003      	b.n	800498a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	fab3 f383 	clz	r3, r3
 8004988:	b2db      	uxtb	r3, r3
 800498a:	3301      	adds	r3, #1
 800498c:	069b      	lsls	r3, r3, #26
 800498e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x612>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	0e9b      	lsrs	r3, r3, #26
 80049a4:	3301      	adds	r3, #1
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2101      	movs	r1, #1
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	e017      	b.n	80049e2 <HAL_ADC_ConfigChannel+0x642>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	61fb      	str	r3, [r7, #28]
  return result;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80049ca:	2320      	movs	r3, #32
 80049cc:	e003      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	ea42 0103 	orr.w	r1, r2, r3
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x66e>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	0e9b      	lsrs	r3, r3, #26
 80049f8:	3301      	adds	r3, #1
 80049fa:	f003 021f 	and.w	r2, r3, #31
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	3b1e      	subs	r3, #30
 8004a06:	051b      	lsls	r3, r3, #20
 8004a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a0c:	e01e      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x6ac>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	fa93 f3a3 	rbit	r3, r3
 8004a1a:	613b      	str	r3, [r7, #16]
  return result;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004a26:	2320      	movs	r3, #32
 8004a28:	e006      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x698>
 8004a2a:	bf00      	nop
 8004a2c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f003 021f 	and.w	r2, r3, #31
 8004a3e:	4613      	mov	r3, r2
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	4413      	add	r3, r2
 8004a44:	3b1e      	subs	r3, #30
 8004a46:	051b      	lsls	r3, r3, #20
 8004a48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	4619      	mov	r1, r3
 8004a54:	f7fe ff18 	bl	8003888 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <HAL_ADC_ConfigChannel+0x7bc>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d071      	beq.n	8004b48 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a64:	483e      	ldr	r0, [pc, #248]	; (8004b60 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a66:	f7fe fe11 	bl	800368c <LL_ADC_GetCommonPathInternalCh>
 8004a6a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a3c      	ldr	r2, [pc, #240]	; (8004b64 <HAL_ADC_ConfigChannel+0x7c4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d004      	beq.n	8004a82 <HAL_ADC_ConfigChannel+0x6e2>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a3a      	ldr	r2, [pc, #232]	; (8004b68 <HAL_ADC_ConfigChannel+0x7c8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d127      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d121      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a96:	d157      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	482f      	ldr	r0, [pc, #188]	; (8004b60 <HAL_ADC_ConfigChannel+0x7c0>)
 8004aa4:	f7fe fddf 	bl	8003666 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004aa8:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <HAL_ADC_ConfigChannel+0x7cc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	099b      	lsrs	r3, r3, #6
 8004aae:	4a30      	ldr	r2, [pc, #192]	; (8004b70 <HAL_ADC_ConfigChannel+0x7d0>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	099b      	lsrs	r3, r3, #6
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ac2:	e002      	b.n	8004aca <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f9      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ad0:	e03a      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <HAL_ADC_ConfigChannel+0x7d4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d113      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x764>
 8004adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10d      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a22      	ldr	r2, [pc, #136]	; (8004b78 <HAL_ADC_ConfigChannel+0x7d8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d02a      	beq.n	8004b48 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004afa:	4619      	mov	r1, r3
 8004afc:	4818      	ldr	r0, [pc, #96]	; (8004b60 <HAL_ADC_ConfigChannel+0x7c0>)
 8004afe:	f7fe fdb2 	bl	8003666 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b02:	e021      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_ADC_ConfigChannel+0x7dc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d11c      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d116      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <HAL_ADC_ConfigChannel+0x7d8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d011      	beq.n	8004b48 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	480c      	ldr	r0, [pc, #48]	; (8004b60 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b30:	f7fe fd99 	bl	8003666 <LL_ADC_SetCommonPathInternalCh>
 8004b34:	e008      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	f043 0220 	orr.w	r2, r3, #32
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b50:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	37d8      	adds	r7, #216	; 0xd8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	80080000 	.word	0x80080000
 8004b60:	50000300 	.word	0x50000300
 8004b64:	c3210000 	.word	0xc3210000
 8004b68:	90c00010 	.word	0x90c00010
 8004b6c:	20000130 	.word	0x20000130
 8004b70:	053e2d63 	.word	0x053e2d63
 8004b74:	c7520000 	.word	0xc7520000
 8004b78:	50000100 	.word	0x50000100
 8004b7c:	cb840000 	.word	0xcb840000

08004b80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe ff4d 	bl	8003a2c <LL_ADC_IsEnabled>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d14d      	bne.n	8004c34 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <ADC_Enable+0xc0>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	f043 0210 	orr.w	r2, r3, #16
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb6:	f043 0201 	orr.w	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e039      	b.n	8004c36 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe ff1c 	bl	8003a04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004bcc:	f7fe fd0a 	bl	80035e4 <HAL_GetTick>
 8004bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bd2:	e028      	b.n	8004c26 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe ff27 	bl	8003a2c <LL_ADC_IsEnabled>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe ff0b 	bl	8003a04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bee:	f7fe fcf9 	bl	80035e4 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d914      	bls.n	8004c26 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d00d      	beq.n	8004c26 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	f043 0210 	orr.w	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1a:	f043 0201 	orr.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e007      	b.n	8004c36 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d1cf      	bne.n	8004bd4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	8000003f 	.word	0x8000003f

08004c44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d14b      	bne.n	8004cf6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d021      	beq.n	8004cbc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fe fdb1 	bl	80037e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d032      	beq.n	8004cee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d12b      	bne.n	8004cee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d11f      	bne.n	8004cee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cba:	e018      	b.n	8004cee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d111      	bne.n	8004cee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce6:	f043 0201 	orr.w	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7fc fa6e 	bl	80011d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cf4:	e00e      	b.n	8004d14 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fb42 	bl	800438c <HAL_ADC_ErrorCallback>
}
 8004d08:	e004      	b.n	8004d14 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7fc ff56 	bl	8001bdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d56:	f043 0204 	orr.w	r2, r3, #4
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff fb14 	bl	800438c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <LL_ADC_IsEnabled>:
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <LL_ADC_IsEnabled+0x18>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <LL_ADC_IsEnabled+0x1a>
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d101      	bne.n	8004daa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b0a1      	sub	sp, #132	; 0x84
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e08b      	b.n	8004f52 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004e42:	2300      	movs	r3, #0
 8004e44:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004e46:	2300      	movs	r3, #0
 8004e48:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e52:	d102      	bne.n	8004e5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e54:	4b41      	ldr	r3, [pc, #260]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	e001      	b.n	8004e5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e68:	f043 0220 	orr.w	r2, r3, #32
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e06a      	b.n	8004f52 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff ff87 	bl	8004d92 <LL_ADC_REG_IsConversionOngoing>
 8004e84:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff ff81 	bl	8004d92 <LL_ADC_REG_IsConversionOngoing>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d14c      	bne.n	8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d149      	bne.n	8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e9c:	4b30      	ldr	r3, [pc, #192]	; (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004e9e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d028      	beq.n	8004efa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6859      	ldr	r1, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004eba:	035b      	lsls	r3, r3, #13
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ec4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004ec8:	f7ff ff50 	bl	8004d6c <LL_ADC_IsEnabled>
 8004ecc:	4604      	mov	r4, r0
 8004ece:	4823      	ldr	r0, [pc, #140]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ed0:	f7ff ff4c 	bl	8004d6c <LL_ADC_IsEnabled>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4323      	orrs	r3, r4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d133      	bne.n	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ee4:	f023 030f 	bic.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	6811      	ldr	r1, [r2, #0]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	6892      	ldr	r2, [r2, #8]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ef8:	e024      	b.n	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f06:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004f0a:	f7ff ff2f 	bl	8004d6c <LL_ADC_IsEnabled>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4812      	ldr	r0, [pc, #72]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f12:	f7ff ff2b 	bl	8004d6c <LL_ADC_IsEnabled>
 8004f16:	4603      	mov	r3, r0
 8004f18:	4323      	orrs	r3, r4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d112      	bne.n	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f26:	f023 030f 	bic.w	r3, r3, #15
 8004f2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f2e:	e009      	b.n	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f42:	e000      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3784      	adds	r7, #132	; 0x84
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd90      	pop	{r4, r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	50000100 	.word	0x50000100
 8004f60:	50000300 	.word	0x50000300

08004f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f80:	4013      	ands	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f96:	4a04      	ldr	r2, [pc, #16]	; (8004fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	60d3      	str	r3, [r2, #12]
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb0:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	0a1b      	lsrs	r3, r3, #8
 8004fb6:	f003 0307 	and.w	r3, r3, #7
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000ed00 	.word	0xe000ed00

08004fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	db0b      	blt.n	8004ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	f003 021f 	and.w	r2, r3, #31
 8004fe0:	4907      	ldr	r1, [pc, #28]	; (8005000 <__NVIC_EnableIRQ+0x38>)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	2001      	movs	r0, #1
 8004fea:	fa00 f202 	lsl.w	r2, r0, r2
 8004fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	e000e100 	.word	0xe000e100

08005004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005014:	2b00      	cmp	r3, #0
 8005016:	db0a      	blt.n	800502e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	490c      	ldr	r1, [pc, #48]	; (8005050 <__NVIC_SetPriority+0x4c>)
 800501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005022:	0112      	lsls	r2, r2, #4
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	440b      	add	r3, r1
 8005028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800502c:	e00a      	b.n	8005044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	4908      	ldr	r1, [pc, #32]	; (8005054 <__NVIC_SetPriority+0x50>)
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	3b04      	subs	r3, #4
 800503c:	0112      	lsls	r2, r2, #4
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	440b      	add	r3, r1
 8005042:	761a      	strb	r2, [r3, #24]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	e000e100 	.word	0xe000e100
 8005054:	e000ed00 	.word	0xe000ed00

08005058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f1c3 0307 	rsb	r3, r3, #7
 8005072:	2b04      	cmp	r3, #4
 8005074:	bf28      	it	cs
 8005076:	2304      	movcs	r3, #4
 8005078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3304      	adds	r3, #4
 800507e:	2b06      	cmp	r3, #6
 8005080:	d902      	bls.n	8005088 <NVIC_EncodePriority+0x30>
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3b03      	subs	r3, #3
 8005086:	e000      	b.n	800508a <NVIC_EncodePriority+0x32>
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43da      	mvns	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	401a      	ands	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a0:	f04f 31ff 	mov.w	r1, #4294967295
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	fa01 f303 	lsl.w	r3, r1, r3
 80050aa:	43d9      	mvns	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b0:	4313      	orrs	r3, r2
         );
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3724      	adds	r7, #36	; 0x24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff ff4c 	bl	8004f64 <__NVIC_SetPriorityGrouping>
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050e2:	f7ff ff63 	bl	8004fac <__NVIC_GetPriorityGrouping>
 80050e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	6978      	ldr	r0, [r7, #20]
 80050ee:	f7ff ffb3 	bl	8005058 <NVIC_EncodePriority>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ff82 	bl	8005004 <__NVIC_SetPriority>
}
 8005100:	bf00      	nop
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ff56 	bl	8004fc8 <__NVIC_EnableIRQ>
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e014      	b.n	8005160 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	791b      	ldrb	r3, [r3, #4]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d105      	bne.n	800514c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fd f9b4 	bl	80024b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	795b      	ldrb	r3, [r3, #5]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_DAC_Start+0x16>
 800517a:	2302      	movs	r3, #2
 800517c:	e043      	b.n	8005206 <HAL_DAC_Start+0x9e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2201      	movs	r2, #1
 8005198:	409a      	lsls	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80051a2:	2001      	movs	r0, #1
 80051a4:	f7fe fa2a 	bl	80035fc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d11d      	bne.n	80051f8 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	605a      	str	r2, [r3, #4]
 80051cc:	e014      	b.n	80051f8 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2102      	movs	r1, #2
 80051e0:	fa01 f303 	lsl.w	r3, r1, r3
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d107      	bne.n	80051f8 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0202 	orr.w	r2, r2, #2
 80051f6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800520e:	b480      	push	{r7}
 8005210:	b087      	sub	sp, #28
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d105      	bne.n	800523e <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	3308      	adds	r3, #8
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e004      	b.n	8005248 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4413      	add	r3, r2
 8005244:	3314      	adds	r3, #20
 8005246:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	461a      	mov	r2, r3
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	; 0x28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	795b      	ldrb	r3, [r3, #5]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_DAC_ConfigChannel+0x18>
 8005274:	2302      	movs	r3, #2
 8005276:	e192      	b.n	800559e <HAL_DAC_ConfigChannel+0x33e>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2202      	movs	r2, #2
 8005282:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b04      	cmp	r3, #4
 800528a:	d174      	bne.n	8005376 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800528c:	f7fe f9aa 	bl	80035e4 <HAL_GetTick>
 8005290:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d134      	bne.n	8005302 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005298:	e011      	b.n	80052be <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800529a:	f7fe f9a3 	bl	80035e4 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d90a      	bls.n	80052be <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f043 0208 	orr.w	r2, r3, #8
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2203      	movs	r2, #3
 80052b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e16f      	b.n	800559e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e6      	bne.n	800529a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80052cc:	2001      	movs	r0, #1
 80052ce:	f7fe f995 	bl	80035fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
 80052dc:	e01e      	b.n	800531c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80052de:	f7fe f981 	bl	80035e4 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d90a      	bls.n	8005302 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f043 0208 	orr.w	r2, r3, #8
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2203      	movs	r2, #3
 80052fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e14d      	b.n	800559e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	2b00      	cmp	r3, #0
 800530a:	dbe8      	blt.n	80052de <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800530c:	2001      	movs	r0, #1
 800530e:	f7fe f975 	bl	80035fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800531a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	ea02 0103 	and.w	r1, r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	409a      	lsls	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f003 0310 	and.w	r3, r3, #16
 8005356:	21ff      	movs	r1, #255	; 0xff
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	ea02 0103 	and.w	r1, r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	409a      	lsls	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d11d      	bne.n	80053ba <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	221f      	movs	r2, #31
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005396:	4013      	ands	r3, r2
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0310 	and.w	r3, r3, #16
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	4313      	orrs	r3, r2
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2207      	movs	r2, #7
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d2:	4013      	ands	r3, r2
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d102      	bne.n	80053e4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80053de:	2300      	movs	r3, #0
 80053e0:	623b      	str	r3, [r7, #32]
 80053e2:	e00f      	b.n	8005404 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d102      	bne.n	80053f2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80053ec:	2301      	movs	r3, #1
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	e008      	b.n	8005404 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80053fa:	2301      	movs	r3, #1
 80053fc:	623b      	str	r3, [r7, #32]
 80053fe:	e001      	b.n	8005404 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005400:	2300      	movs	r3, #0
 8005402:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	6a3a      	ldr	r2, [r7, #32]
 8005410:	4313      	orrs	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	43db      	mvns	r3, r3
 8005424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005426:	4013      	ands	r3, r2
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	791b      	ldrb	r3, [r3, #4]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d102      	bne.n	8005438 <HAL_DAC_ConfigChannel+0x1d8>
 8005432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005436:	e000      	b.n	800543a <HAL_DAC_ConfigChannel+0x1da>
 8005438:	2300      	movs	r3, #0
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4313      	orrs	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005452:	4013      	ands	r3, r2
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	795b      	ldrb	r3, [r3, #5]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d102      	bne.n	8005464 <HAL_DAC_ConfigChannel+0x204>
 800545e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005462:	e000      	b.n	8005466 <HAL_DAC_ConfigChannel+0x206>
 8005464:	2300      	movs	r3, #0
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4313      	orrs	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d114      	bne.n	80054a6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800547c:	f001 fe70 	bl	8007160 <HAL_RCC_GetHCLKFreq>
 8005480:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4a48      	ldr	r2, [pc, #288]	; (80055a8 <HAL_DAC_ConfigChannel+0x348>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d904      	bls.n	8005494 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
 8005492:	e00f      	b.n	80054b4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4a45      	ldr	r2, [pc, #276]	; (80055ac <HAL_DAC_ConfigChannel+0x34c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d90a      	bls.n	80054b2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
 80054a4:	e006      	b.n	80054b4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ac:	4313      	orrs	r3, r2
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
 80054b0:	e000      	b.n	80054b4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80054b2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c2:	4313      	orrs	r3, r2
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	400a      	ands	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	4013      	ands	r3, r2
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551e:	4313      	orrs	r3, r2
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005528:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	22c0      	movs	r2, #192	; 0xc0
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	43da      	mvns	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	400a      	ands	r2, r1
 8005544:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	089b      	lsrs	r3, r3, #2
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	4313      	orrs	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005574:	fa01 f303 	lsl.w	r3, r1, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	ea02 0103 	and.w	r1, r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	409a      	lsls	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	09896800 	.word	0x09896800
 80055ac:	04c4b400 	.word	0x04c4b400

080055b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e08d      	b.n	80056de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	4b47      	ldr	r3, [pc, #284]	; (80056e8 <HAL_DMA_Init+0x138>)
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d80f      	bhi.n	80055ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	4b45      	ldr	r3, [pc, #276]	; (80056ec <HAL_DMA_Init+0x13c>)
 80055d6:	4413      	add	r3, r2
 80055d8:	4a45      	ldr	r2, [pc, #276]	; (80056f0 <HAL_DMA_Init+0x140>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	009a      	lsls	r2, r3, #2
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a42      	ldr	r2, [pc, #264]	; (80056f4 <HAL_DMA_Init+0x144>)
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40
 80055ec:	e00e      	b.n	800560c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	4b40      	ldr	r3, [pc, #256]	; (80056f8 <HAL_DMA_Init+0x148>)
 80055f6:	4413      	add	r3, r2
 80055f8:	4a3d      	ldr	r2, [pc, #244]	; (80056f0 <HAL_DMA_Init+0x140>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	009a      	lsls	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a3c      	ldr	r2, [pc, #240]	; (80056fc <HAL_DMA_Init+0x14c>)
 800560a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800563c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa76 	bl	8005b50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566c:	d102      	bne.n	8005674 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005688:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d010      	beq.n	80056b4 <HAL_DMA_Init+0x104>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d80c      	bhi.n	80056b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fa96 	bl	8005bcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e008      	b.n	80056c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40020407 	.word	0x40020407
 80056ec:	bffdfff8 	.word	0xbffdfff8
 80056f0:	cccccccd 	.word	0xcccccccd
 80056f4:	40020000 	.word	0x40020000
 80056f8:	bffdfbf8 	.word	0xbffdfbf8
 80056fc:	40020400 	.word	0x40020400

08005700 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_DMA_Start_IT+0x20>
 800571c:	2302      	movs	r3, #2
 800571e:	e066      	b.n	80057ee <HAL_DMA_Start_IT+0xee>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d155      	bne.n	80057e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0201 	bic.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f9bb 	bl	8005ad4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 020e 	orr.w	r2, r2, #14
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e00f      	b.n	8005798 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0204 	bic.w	r2, r2, #4
 8005786:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 020a 	orr.w	r2, r2, #10
 8005796:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	e005      	b.n	80057ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
 80057ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d005      	beq.n	800581a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2204      	movs	r2, #4
 8005812:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
 8005818:	e037      	b.n	800588a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 020e 	bic.w	r2, r2, #14
 8005828:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005838:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0201 	bic.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	f003 021f 	and.w	r2, r3, #31
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	2101      	movs	r1, #1
 8005858:	fa01 f202 	lsl.w	r2, r1, r2
 800585c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005866:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00c      	beq.n	800588a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800587e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005888:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d00d      	beq.n	80058dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2204      	movs	r2, #4
 80058c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
 80058da:	e047      	b.n	800596c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 020e 	bic.w	r2, r2, #14
 80058ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800590a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	f003 021f 	and.w	r2, r3, #31
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	2101      	movs	r1, #1
 800591a:	fa01 f202 	lsl.w	r2, r1, r2
 800591e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005928:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00c      	beq.n	800594c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005940:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800594a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	4798      	blx	r3
    }
  }
  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2204      	movs	r2, #4
 8005998:	409a      	lsls	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4013      	ands	r3, r2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d026      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x7a>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d021      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0204 	bic.w	r2, r2, #4
 80059c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	f003 021f 	and.w	r2, r3, #31
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	2104      	movs	r1, #4
 80059d8:	fa01 f202 	lsl.w	r2, r1, r2
 80059dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d071      	beq.n	8005aca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059ee:	e06c      	b.n	8005aca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	2202      	movs	r2, #2
 80059fa:	409a      	lsls	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02e      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d029      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10b      	bne.n	8005a34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 020a 	bic.w	r2, r2, #10
 8005a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	f003 021f 	and.w	r2, r3, #31
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	2102      	movs	r1, #2
 8005a42:	fa01 f202 	lsl.w	r2, r1, r2
 8005a46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d038      	beq.n	8005aca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a60:	e033      	b.n	8005aca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d02a      	beq.n	8005acc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d025      	beq.n	8005acc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 020e 	bic.w	r2, r2, #14
 8005a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a94:	f003 021f 	and.w	r2, r3, #31
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
}
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005aea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005afc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	f003 021f 	and.w	r2, r3, #31
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d108      	bne.n	8005b34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b32:	e007      	b.n	8005b44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d802      	bhi.n	8005b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005b64:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e001      	b.n	8005b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005b6c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	3b08      	subs	r3, #8
 8005b7a:	4a12      	ldr	r2, [pc, #72]	; (8005bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b88:	089b      	lsrs	r3, r3, #2
 8005b8a:	009a      	lsls	r2, r3, #2
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4413      	add	r3, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a0b      	ldr	r2, [pc, #44]	; (8005bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005b9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	409a      	lsls	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40020407 	.word	0x40020407
 8005bbc:	40020800 	.word	0x40020800
 8005bc0:	40020820 	.word	0x40020820
 8005bc4:	cccccccd 	.word	0xcccccccd
 8005bc8:	40020880 	.word	0x40020880

08005bcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	461a      	mov	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005bee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005c00:	bf00      	nop
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	1000823f 	.word	0x1000823f
 8005c10:	40020940 	.word	0x40020940

08005c14 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e147      	b.n	8005eb6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fc fd24 	bl	8002688 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0210 	bic.w	r2, r2, #16
 8005c4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c50:	f7fd fcc8 	bl	80035e4 <HAL_GetTick>
 8005c54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c56:	e012      	b.n	8005c7e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c58:	f7fd fcc4 	bl	80035e4 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b0a      	cmp	r3, #10
 8005c64:	d90b      	bls.n	8005c7e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2203      	movs	r2, #3
 8005c76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e11b      	b.n	8005eb6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d0e5      	beq.n	8005c58 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c9c:	f7fd fca2 	bl	80035e4 <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ca2:	e012      	b.n	8005cca <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ca4:	f7fd fc9e 	bl	80035e4 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b0a      	cmp	r3, #10
 8005cb0:	d90b      	bls.n	8005cca <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb6:	f043 0201 	orr.w	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e0f5      	b.n	8005eb6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0e5      	beq.n	8005ca4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0202 	orr.w	r2, r2, #2
 8005ce6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a74      	ldr	r2, [pc, #464]	; (8005ec0 <HAL_FDCAN_Init+0x2ac>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d103      	bne.n	8005cfa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005cf2:	4a74      	ldr	r2, [pc, #464]	; (8005ec4 <HAL_FDCAN_Init+0x2b0>)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	7c1b      	ldrb	r3, [r3, #16]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d108      	bne.n	8005d14 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d10:	619a      	str	r2, [r3, #24]
 8005d12:	e007      	b.n	8005d24 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d22:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	7c5b      	ldrb	r3, [r3, #17]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d108      	bne.n	8005d3e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d3a:	619a      	str	r2, [r3, #24]
 8005d3c:	e007      	b.n	8005d4e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	7c9b      	ldrb	r3, [r3, #18]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d108      	bne.n	8005d68 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d64:	619a      	str	r2, [r3, #24]
 8005d66:	e007      	b.n	8005d78 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d76:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005d9c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0210 	bic.w	r2, r2, #16
 8005dac:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d108      	bne.n	8005dc8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0204 	orr.w	r2, r2, #4
 8005dc4:	619a      	str	r2, [r3, #24]
 8005dc6:	e02c      	b.n	8005e22 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d028      	beq.n	8005e22 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d01c      	beq.n	8005e12 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005de6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0210 	orr.w	r2, r2, #16
 8005df6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d110      	bne.n	8005e22 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0220 	orr.w	r2, r2, #32
 8005e0e:	619a      	str	r2, [r3, #24]
 8005e10:	e007      	b.n	8005e22 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0220 	orr.w	r2, r2, #32
 8005e20:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e32:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e3a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e4a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e4c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e56:	d115      	bne.n	8005e84 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	3b01      	subs	r3, #1
 8005e64:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e66:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e70:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e80:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e82:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9c2 	bl	8006224 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40006400 	.word	0x40006400
 8005ec4:	40006500 	.word	0x40006500

08005ec8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	6a3a      	ldr	r2, [r7, #32]
 8005efc:	4013      	ands	r3, r2
 8005efe:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f0a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	4013      	ands	r3, r2
 8005f16:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8005f22:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005f3a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4013      	ands	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d006      	beq.n	8005f72 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2240      	movs	r2, #64	; 0x40
 8005f6a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f939 	bl	80061e4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01b      	beq.n	8005fb8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d014      	beq.n	8005fb8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f96:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005fb0:	6939      	ldr	r1, [r7, #16]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8f7 	bl	80061a6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f8b6 	bl	800613a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a3a      	ldr	r2, [r7, #32]
 8005fda:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005fdc:	6a39      	ldr	r1, [r7, #32]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8b6 	bl	8006150 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ff2:	69f9      	ldr	r1, [r7, #28]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f8b6 	bl	8006166 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00e      	beq.n	8006026 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800601e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f8ab 	bl	800617c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01a      	beq.n	800606a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603e:	2b00      	cmp	r3, #0
 8006040:	d013      	beq.n	800606a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800604a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4013      	ands	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2280      	movs	r2, #128	; 0x80
 8006060:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f893 	bl	8006190 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00e      	beq.n	8006096 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800608e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f893 	bl	80061bc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00e      	beq.n	80060c2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f887 	bl	80061d0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d011      	beq.n	80060f4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006102:	6979      	ldr	r1, [r7, #20]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f881 	bl	800620c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d009      	beq.n	8006124 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f863 	bl	80061f8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006132:	bf00      	nop
 8006134:	3728      	adds	r7, #40	; 0x28
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800622c:	4b27      	ldr	r3, [pc, #156]	; (80062cc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800622e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800623e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006246:	041a      	lsls	r2, r3, #16
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006264:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	061a      	lsls	r2, r3, #24
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e005      	b.n	80062b2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3304      	adds	r3, #4
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d3f3      	bcc.n	80062a6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80062be:	bf00      	nop
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	4000a400 	.word	0x4000a400

080062d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80062de:	e15a      	b.n	8006596 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	2101      	movs	r1, #1
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ec:	4013      	ands	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 814c 	beq.w	8006590 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	2b01      	cmp	r3, #1
 8006302:	d005      	beq.n	8006310 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800630c:	2b02      	cmp	r3, #2
 800630e:	d130      	bne.n	8006372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	2203      	movs	r2, #3
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4013      	ands	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006346:	2201      	movs	r2, #1
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	43db      	mvns	r3, r3
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4013      	ands	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	f003 0201 	and.w	r2, r3, #1
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b03      	cmp	r3, #3
 800637c:	d017      	beq.n	80063ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	2203      	movs	r2, #3
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	43db      	mvns	r3, r3
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4013      	ands	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d123      	bne.n	8006402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	08da      	lsrs	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3208      	adds	r2, #8
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	220f      	movs	r2, #15
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	43db      	mvns	r3, r3
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4013      	ands	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	08da      	lsrs	r2, r3, #3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3208      	adds	r2, #8
 80063fc:	6939      	ldr	r1, [r7, #16]
 80063fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	2203      	movs	r2, #3
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43db      	mvns	r3, r3
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4013      	ands	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f003 0203 	and.w	r2, r3, #3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80a6 	beq.w	8006590 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006444:	4b5b      	ldr	r3, [pc, #364]	; (80065b4 <HAL_GPIO_Init+0x2e4>)
 8006446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006448:	4a5a      	ldr	r2, [pc, #360]	; (80065b4 <HAL_GPIO_Init+0x2e4>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	6613      	str	r3, [r2, #96]	; 0x60
 8006450:	4b58      	ldr	r3, [pc, #352]	; (80065b4 <HAL_GPIO_Init+0x2e4>)
 8006452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800645c:	4a56      	ldr	r2, [pc, #344]	; (80065b8 <HAL_GPIO_Init+0x2e8>)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	3302      	adds	r3, #2
 8006464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	220f      	movs	r2, #15
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	43db      	mvns	r3, r3
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4013      	ands	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006486:	d01f      	beq.n	80064c8 <HAL_GPIO_Init+0x1f8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a4c      	ldr	r2, [pc, #304]	; (80065bc <HAL_GPIO_Init+0x2ec>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d019      	beq.n	80064c4 <HAL_GPIO_Init+0x1f4>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a4b      	ldr	r2, [pc, #300]	; (80065c0 <HAL_GPIO_Init+0x2f0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d013      	beq.n	80064c0 <HAL_GPIO_Init+0x1f0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a4a      	ldr	r2, [pc, #296]	; (80065c4 <HAL_GPIO_Init+0x2f4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00d      	beq.n	80064bc <HAL_GPIO_Init+0x1ec>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a49      	ldr	r2, [pc, #292]	; (80065c8 <HAL_GPIO_Init+0x2f8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d007      	beq.n	80064b8 <HAL_GPIO_Init+0x1e8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a48      	ldr	r2, [pc, #288]	; (80065cc <HAL_GPIO_Init+0x2fc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d101      	bne.n	80064b4 <HAL_GPIO_Init+0x1e4>
 80064b0:	2305      	movs	r3, #5
 80064b2:	e00a      	b.n	80064ca <HAL_GPIO_Init+0x1fa>
 80064b4:	2306      	movs	r3, #6
 80064b6:	e008      	b.n	80064ca <HAL_GPIO_Init+0x1fa>
 80064b8:	2304      	movs	r3, #4
 80064ba:	e006      	b.n	80064ca <HAL_GPIO_Init+0x1fa>
 80064bc:	2303      	movs	r3, #3
 80064be:	e004      	b.n	80064ca <HAL_GPIO_Init+0x1fa>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e002      	b.n	80064ca <HAL_GPIO_Init+0x1fa>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <HAL_GPIO_Init+0x1fa>
 80064c8:	2300      	movs	r3, #0
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	f002 0203 	and.w	r2, r2, #3
 80064d0:	0092      	lsls	r2, r2, #2
 80064d2:	4093      	lsls	r3, r2
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064da:	4937      	ldr	r1, [pc, #220]	; (80065b8 <HAL_GPIO_Init+0x2e8>)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	089b      	lsrs	r3, r3, #2
 80064e0:	3302      	adds	r3, #2
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064e8:	4b39      	ldr	r3, [pc, #228]	; (80065d0 <HAL_GPIO_Init+0x300>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	43db      	mvns	r3, r3
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4013      	ands	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800650c:	4a30      	ldr	r2, [pc, #192]	; (80065d0 <HAL_GPIO_Init+0x300>)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006512:	4b2f      	ldr	r3, [pc, #188]	; (80065d0 <HAL_GPIO_Init+0x300>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	43db      	mvns	r3, r3
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4013      	ands	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006536:	4a26      	ldr	r2, [pc, #152]	; (80065d0 <HAL_GPIO_Init+0x300>)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800653c:	4b24      	ldr	r3, [pc, #144]	; (80065d0 <HAL_GPIO_Init+0x300>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	43db      	mvns	r3, r3
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4013      	ands	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006560:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <HAL_GPIO_Init+0x300>)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006566:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <HAL_GPIO_Init+0x300>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	43db      	mvns	r3, r3
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4013      	ands	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800658a:	4a11      	ldr	r2, [pc, #68]	; (80065d0 <HAL_GPIO_Init+0x300>)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	3301      	adds	r3, #1
 8006594:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f47f ae9d 	bne.w	80062e0 <HAL_GPIO_Init+0x10>
  }
}
 80065a6:	bf00      	nop
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40010000 	.word	0x40010000
 80065bc:	48000400 	.word	0x48000400
 80065c0:	48000800 	.word	0x48000800
 80065c4:	48000c00 	.word	0x48000c00
 80065c8:	48001000 	.word	0x48001000
 80065cc:	48001400 	.word	0x48001400
 80065d0:	40010400 	.word	0x40010400

080065d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	807b      	strh	r3, [r7, #2]
 80065e0:	4613      	mov	r3, r2
 80065e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065e4:	787b      	ldrb	r3, [r7, #1]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065ea:	887a      	ldrh	r2, [r7, #2]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065f0:	e002      	b.n	80065f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065f2:	887a      	ldrh	r2, [r7, #2]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d141      	bne.n	8006696 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006612:	4b4b      	ldr	r3, [pc, #300]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d131      	bne.n	8006684 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006620:	4b47      	ldr	r3, [pc, #284]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006626:	4a46      	ldr	r2, [pc, #280]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800662c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006630:	4b43      	ldr	r3, [pc, #268]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006638:	4a41      	ldr	r2, [pc, #260]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800663a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800663e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006640:	4b40      	ldr	r3, [pc, #256]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2232      	movs	r2, #50	; 0x32
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	4a3f      	ldr	r2, [pc, #252]	; (8006748 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	0c9b      	lsrs	r3, r3, #18
 8006652:	3301      	adds	r3, #1
 8006654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006656:	e002      	b.n	800665e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3b01      	subs	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800665e:	4b38      	ldr	r3, [pc, #224]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666a:	d102      	bne.n	8006672 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f2      	bne.n	8006658 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006672:	4b33      	ldr	r3, [pc, #204]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800667a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667e:	d158      	bne.n	8006732 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e057      	b.n	8006734 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006684:	4b2e      	ldr	r3, [pc, #184]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668a:	4a2d      	ldr	r2, [pc, #180]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006694:	e04d      	b.n	8006732 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669c:	d141      	bne.n	8006722 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800669e:	4b28      	ldr	r3, [pc, #160]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066aa:	d131      	bne.n	8006710 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066ac:	4b24      	ldr	r3, [pc, #144]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b2:	4a23      	ldr	r2, [pc, #140]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066bc:	4b20      	ldr	r3, [pc, #128]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066c4:	4a1e      	ldr	r2, [pc, #120]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066cc:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2232      	movs	r2, #50	; 0x32
 80066d2:	fb02 f303 	mul.w	r3, r2, r3
 80066d6:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066d8:	fba2 2303 	umull	r2, r3, r2, r3
 80066dc:	0c9b      	lsrs	r3, r3, #18
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066e2:	e002      	b.n	80066ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066ea:	4b15      	ldr	r3, [pc, #84]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f6:	d102      	bne.n	80066fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1f2      	bne.n	80066e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670a:	d112      	bne.n	8006732 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e011      	b.n	8006734 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006710:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006716:	4a0a      	ldr	r2, [pc, #40]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006720:	e007      	b.n	8006732 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006722:	4b07      	ldr	r3, [pc, #28]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800672a:	4a05      	ldr	r2, [pc, #20]	; (8006740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800672c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006730:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	40007000 	.word	0x40007000
 8006744:	20000130 	.word	0x20000130
 8006748:	431bde83 	.word	0x431bde83

0800674c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	4a04      	ldr	r2, [pc, #16]	; (8006768 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800675a:	6093      	str	r3, [r2, #8]
}
 800675c:	bf00      	nop
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40007000 	.word	0x40007000

0800676c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e306      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d075      	beq.n	8006876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800678a:	4b97      	ldr	r3, [pc, #604]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 030c 	and.w	r3, r3, #12
 8006792:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006794:	4b94      	ldr	r3, [pc, #592]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d102      	bne.n	80067aa <HAL_RCC_OscConfig+0x3e>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d002      	beq.n	80067b0 <HAL_RCC_OscConfig+0x44>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d10b      	bne.n	80067c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b0:	4b8d      	ldr	r3, [pc, #564]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d05b      	beq.n	8006874 <HAL_RCC_OscConfig+0x108>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d157      	bne.n	8006874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e2e1      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d0:	d106      	bne.n	80067e0 <HAL_RCC_OscConfig+0x74>
 80067d2:	4b85      	ldr	r3, [pc, #532]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a84      	ldr	r2, [pc, #528]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80067d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	e01d      	b.n	800681c <HAL_RCC_OscConfig+0xb0>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067e8:	d10c      	bne.n	8006804 <HAL_RCC_OscConfig+0x98>
 80067ea:	4b7f      	ldr	r3, [pc, #508]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a7e      	ldr	r2, [pc, #504]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80067f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	4b7c      	ldr	r3, [pc, #496]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a7b      	ldr	r2, [pc, #492]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80067fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	e00b      	b.n	800681c <HAL_RCC_OscConfig+0xb0>
 8006804:	4b78      	ldr	r3, [pc, #480]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a77      	ldr	r2, [pc, #476]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 800680a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	4b75      	ldr	r3, [pc, #468]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a74      	ldr	r2, [pc, #464]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800681a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d013      	beq.n	800684c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fc fede 	bl	80035e4 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800682c:	f7fc feda 	bl	80035e4 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b64      	cmp	r3, #100	; 0x64
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e2a6      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800683e:	4b6a      	ldr	r3, [pc, #424]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0f0      	beq.n	800682c <HAL_RCC_OscConfig+0xc0>
 800684a:	e014      	b.n	8006876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fc feca 	bl	80035e4 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006854:	f7fc fec6 	bl	80035e4 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b64      	cmp	r3, #100	; 0x64
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e292      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006866:	4b60      	ldr	r3, [pc, #384]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f0      	bne.n	8006854 <HAL_RCC_OscConfig+0xe8>
 8006872:	e000      	b.n	8006876 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d075      	beq.n	800696e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006882:	4b59      	ldr	r3, [pc, #356]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 030c 	and.w	r3, r3, #12
 800688a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800688c:	4b56      	ldr	r3, [pc, #344]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b0c      	cmp	r3, #12
 800689a:	d102      	bne.n	80068a2 <HAL_RCC_OscConfig+0x136>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d002      	beq.n	80068a8 <HAL_RCC_OscConfig+0x13c>
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d11f      	bne.n	80068e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a8:	4b4f      	ldr	r3, [pc, #316]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCC_OscConfig+0x154>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e265      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c0:	4b49      	ldr	r3, [pc, #292]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	061b      	lsls	r3, r3, #24
 80068ce:	4946      	ldr	r1, [pc, #280]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068d4:	4b45      	ldr	r3, [pc, #276]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fc fa6f 	bl	8002dbc <HAL_InitTick>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d043      	beq.n	800696c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e251      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d023      	beq.n	8006938 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068f0:	4b3d      	ldr	r3, [pc, #244]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3c      	ldr	r2, [pc, #240]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80068f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fc:	f7fc fe72 	bl	80035e4 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006904:	f7fc fe6e 	bl	80035e4 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e23a      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006916:	4b34      	ldr	r3, [pc, #208]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0f0      	beq.n	8006904 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006922:	4b31      	ldr	r3, [pc, #196]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	061b      	lsls	r3, r3, #24
 8006930:	492d      	ldr	r1, [pc, #180]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006932:	4313      	orrs	r3, r2
 8006934:	604b      	str	r3, [r1, #4]
 8006936:	e01a      	b.n	800696e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006938:	4b2b      	ldr	r3, [pc, #172]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 800693e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fc fe4e 	bl	80035e4 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800694c:	f7fc fe4a 	bl	80035e4 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e216      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800695e:	4b22      	ldr	r3, [pc, #136]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f0      	bne.n	800694c <HAL_RCC_OscConfig+0x1e0>
 800696a:	e000      	b.n	800696e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800696c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d041      	beq.n	80069fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d01c      	beq.n	80069bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006982:	4b19      	ldr	r3, [pc, #100]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 8006984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006988:	4a17      	ldr	r2, [pc, #92]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006992:	f7fc fe27 	bl	80035e4 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800699a:	f7fc fe23 	bl	80035e4 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e1ef      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069ac:	4b0e      	ldr	r3, [pc, #56]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80069ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0ef      	beq.n	800699a <HAL_RCC_OscConfig+0x22e>
 80069ba:	e020      	b.n	80069fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80069be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c2:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <HAL_RCC_OscConfig+0x27c>)
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069cc:	f7fc fe0a 	bl	80035e4 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069d2:	e00d      	b.n	80069f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d4:	f7fc fe06 	bl	80035e4 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d906      	bls.n	80069f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e1d2      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
 80069e6:	bf00      	nop
 80069e8:	40021000 	.word	0x40021000
 80069ec:	20000134 	.word	0x20000134
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069f0:	4b8c      	ldr	r3, [pc, #560]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 80069f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1ea      	bne.n	80069d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 80a6 	beq.w	8006b58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a10:	4b84      	ldr	r3, [pc, #528]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <HAL_RCC_OscConfig+0x2b4>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <HAL_RCC_OscConfig+0x2b6>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00d      	beq.n	8006a42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a26:	4b7f      	ldr	r3, [pc, #508]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2a:	4a7e      	ldr	r2, [pc, #504]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a30:	6593      	str	r3, [r2, #88]	; 0x58
 8006a32:	4b7c      	ldr	r3, [pc, #496]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a42:	4b79      	ldr	r3, [pc, #484]	; (8006c28 <HAL_RCC_OscConfig+0x4bc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d118      	bne.n	8006a80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a4e:	4b76      	ldr	r3, [pc, #472]	; (8006c28 <HAL_RCC_OscConfig+0x4bc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a75      	ldr	r2, [pc, #468]	; (8006c28 <HAL_RCC_OscConfig+0x4bc>)
 8006a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a5a:	f7fc fdc3 	bl	80035e4 <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a60:	e008      	b.n	8006a74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a62:	f7fc fdbf 	bl	80035e4 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e18b      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a74:	4b6c      	ldr	r3, [pc, #432]	; (8006c28 <HAL_RCC_OscConfig+0x4bc>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0f0      	beq.n	8006a62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d108      	bne.n	8006a9a <HAL_RCC_OscConfig+0x32e>
 8006a88:	4b66      	ldr	r3, [pc, #408]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8e:	4a65      	ldr	r2, [pc, #404]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a98:	e024      	b.n	8006ae4 <HAL_RCC_OscConfig+0x378>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	d110      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x358>
 8006aa2:	4b60      	ldr	r3, [pc, #384]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa8:	4a5e      	ldr	r2, [pc, #376]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006aaa:	f043 0304 	orr.w	r3, r3, #4
 8006aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ab2:	4b5c      	ldr	r3, [pc, #368]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab8:	4a5a      	ldr	r2, [pc, #360]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ac2:	e00f      	b.n	8006ae4 <HAL_RCC_OscConfig+0x378>
 8006ac4:	4b57      	ldr	r3, [pc, #348]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aca:	4a56      	ldr	r2, [pc, #344]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006acc:	f023 0301 	bic.w	r3, r3, #1
 8006ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ad4:	4b53      	ldr	r3, [pc, #332]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ada:	4a52      	ldr	r2, [pc, #328]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006adc:	f023 0304 	bic.w	r3, r3, #4
 8006ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d016      	beq.n	8006b1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aec:	f7fc fd7a 	bl	80035e4 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006af2:	e00a      	b.n	8006b0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af4:	f7fc fd76 	bl	80035e4 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e140      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b0a:	4b46      	ldr	r3, [pc, #280]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0ed      	beq.n	8006af4 <HAL_RCC_OscConfig+0x388>
 8006b18:	e015      	b.n	8006b46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1a:	f7fc fd63 	bl	80035e4 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b20:	e00a      	b.n	8006b38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b22:	f7fc fd5f 	bl	80035e4 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e129      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b38:	4b3a      	ldr	r3, [pc, #232]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1ed      	bne.n	8006b22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b46:	7ffb      	ldrb	r3, [r7, #31]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d105      	bne.n	8006b58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b4c:	4b35      	ldr	r3, [pc, #212]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b50:	4a34      	ldr	r2, [pc, #208]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d03c      	beq.n	8006bde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01c      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b6c:	4b2d      	ldr	r3, [pc, #180]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b72:	4a2c      	ldr	r2, [pc, #176]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7c:	f7fc fd32 	bl	80035e4 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b84:	f7fc fd2e 	bl	80035e4 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e0fa      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b96:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0ef      	beq.n	8006b84 <HAL_RCC_OscConfig+0x418>
 8006ba4:	e01b      	b.n	8006bde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ba6:	4b1f      	ldr	r3, [pc, #124]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006bae:	f023 0301 	bic.w	r3, r3, #1
 8006bb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb6:	f7fc fd15 	bl	80035e4 <HAL_GetTick>
 8006bba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bbe:	f7fc fd11 	bl	80035e4 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e0dd      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bd0:	4b14      	ldr	r3, [pc, #80]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1ef      	bne.n	8006bbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 80d1 	beq.w	8006d8a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006be8:	4b0e      	ldr	r3, [pc, #56]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b0c      	cmp	r3, #12
 8006bf2:	f000 808b 	beq.w	8006d0c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d15e      	bne.n	8006cbc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfe:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a08      	ldr	r2, [pc, #32]	; (8006c24 <HAL_RCC_OscConfig+0x4b8>)
 8006c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0a:	f7fc fceb 	bl	80035e4 <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c10:	e00c      	b.n	8006c2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c12:	f7fc fce7 	bl	80035e4 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d905      	bls.n	8006c2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0b3      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c2c:	4b59      	ldr	r3, [pc, #356]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1ec      	bne.n	8006c12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c38:	4b56      	ldr	r3, [pc, #344]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	4b56      	ldr	r3, [pc, #344]	; (8006d98 <HAL_RCC_OscConfig+0x62c>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6a11      	ldr	r1, [r2, #32]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c48:	3a01      	subs	r2, #1
 8006c4a:	0112      	lsls	r2, r2, #4
 8006c4c:	4311      	orrs	r1, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006c52:	0212      	lsls	r2, r2, #8
 8006c54:	4311      	orrs	r1, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c5a:	0852      	lsrs	r2, r2, #1
 8006c5c:	3a01      	subs	r2, #1
 8006c5e:	0552      	lsls	r2, r2, #21
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c66:	0852      	lsrs	r2, r2, #1
 8006c68:	3a01      	subs	r2, #1
 8006c6a:	0652      	lsls	r2, r2, #25
 8006c6c:	4311      	orrs	r1, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c72:	06d2      	lsls	r2, r2, #27
 8006c74:	430a      	orrs	r2, r1
 8006c76:	4947      	ldr	r1, [pc, #284]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c7c:	4b45      	ldr	r3, [pc, #276]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a44      	ldr	r2, [pc, #272]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c88:	4b42      	ldr	r3, [pc, #264]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4a41      	ldr	r2, [pc, #260]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fc fca6 	bl	80035e4 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fc fca2 	bl	80035e4 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e06e      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cae:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x530>
 8006cba:	e066      	b.n	8006d8a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cbc:	4b35      	ldr	r3, [pc, #212]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a34      	ldr	r2, [pc, #208]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cc6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006cc8:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	4a31      	ldr	r2, [pc, #196]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006cce:	f023 0303 	bic.w	r3, r3, #3
 8006cd2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006cd4:	4b2f      	ldr	r3, [pc, #188]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	4a2e      	ldr	r2, [pc, #184]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006cda:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce4:	f7fc fc7e 	bl	80035e4 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cea:	e008      	b.n	8006cfe <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cec:	f7fc fc7a 	bl	80035e4 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e046      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cfe:	4b25      	ldr	r3, [pc, #148]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f0      	bne.n	8006cec <HAL_RCC_OscConfig+0x580>
 8006d0a:	e03e      	b.n	8006d8a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e039      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006d18:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <HAL_RCC_OscConfig+0x628>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f003 0203 	and.w	r2, r3, #3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d12c      	bne.n	8006d86 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	3b01      	subs	r3, #1
 8006d38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d123      	bne.n	8006d86 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d11b      	bne.n	8006d86 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d113      	bne.n	8006d86 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	085b      	lsrs	r3, r3, #1
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d109      	bne.n	8006d86 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d001      	beq.n	8006d8a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3720      	adds	r7, #32
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40021000 	.word	0x40021000
 8006d98:	019f800c 	.word	0x019f800c

08006d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e11e      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006db4:	4b91      	ldr	r3, [pc, #580]	; (8006ffc <HAL_RCC_ClockConfig+0x260>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 030f 	and.w	r3, r3, #15
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d910      	bls.n	8006de4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc2:	4b8e      	ldr	r3, [pc, #568]	; (8006ffc <HAL_RCC_ClockConfig+0x260>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f023 020f 	bic.w	r2, r3, #15
 8006dca:	498c      	ldr	r1, [pc, #560]	; (8006ffc <HAL_RCC_ClockConfig+0x260>)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd2:	4b8a      	ldr	r3, [pc, #552]	; (8006ffc <HAL_RCC_ClockConfig+0x260>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d001      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e106      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d073      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d129      	bne.n	8006e4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006df8:	4b81      	ldr	r3, [pc, #516]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e0f4      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e08:	f000 fa14 	bl	8007234 <RCC_GetSysClockFreqFromPLLSource>
 8006e0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	4a7c      	ldr	r2, [pc, #496]	; (8007004 <HAL_RCC_ClockConfig+0x268>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d93f      	bls.n	8006e96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e16:	4b7a      	ldr	r3, [pc, #488]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d033      	beq.n	8006e96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d12f      	bne.n	8006e96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e36:	4b72      	ldr	r3, [pc, #456]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e3e:	4a70      	ldr	r2, [pc, #448]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e46:	2380      	movs	r3, #128	; 0x80
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	e024      	b.n	8006e96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d107      	bne.n	8006e64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e54:	4b6a      	ldr	r3, [pc, #424]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0c6      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e64:	4b66      	ldr	r3, [pc, #408]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0be      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006e74:	f000 f914 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	4a61      	ldr	r2, [pc, #388]	; (8007004 <HAL_RCC_ClockConfig+0x268>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d909      	bls.n	8006e96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e82:	4b5f      	ldr	r3, [pc, #380]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e8a:	4a5d      	ldr	r2, [pc, #372]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e92:	2380      	movs	r3, #128	; 0x80
 8006e94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e96:	4b5a      	ldr	r3, [pc, #360]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f023 0203 	bic.w	r2, r3, #3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	4957      	ldr	r1, [pc, #348]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea8:	f7fc fb9c 	bl	80035e4 <HAL_GetTick>
 8006eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eae:	e00a      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb0:	f7fc fb98 	bl	80035e4 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e095      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec6:	4b4e      	ldr	r3, [pc, #312]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 020c 	and.w	r2, r3, #12
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d1eb      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d023      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ef0:	4b43      	ldr	r3, [pc, #268]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4a42      	ldr	r2, [pc, #264]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006efa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006f08:	4b3d      	ldr	r3, [pc, #244]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f10:	4a3b      	ldr	r2, [pc, #236]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f18:	4b39      	ldr	r3, [pc, #228]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	4936      	ldr	r1, [pc, #216]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	608b      	str	r3, [r1, #8]
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d105      	bne.n	8006f3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f32:	4b33      	ldr	r3, [pc, #204]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	4a32      	ldr	r2, [pc, #200]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f3e:	4b2f      	ldr	r3, [pc, #188]	; (8006ffc <HAL_RCC_ClockConfig+0x260>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d21d      	bcs.n	8006f88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f4c:	4b2b      	ldr	r3, [pc, #172]	; (8006ffc <HAL_RCC_ClockConfig+0x260>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f023 020f 	bic.w	r2, r3, #15
 8006f54:	4929      	ldr	r1, [pc, #164]	; (8006ffc <HAL_RCC_ClockConfig+0x260>)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f5c:	f7fc fb42 	bl	80035e4 <HAL_GetTick>
 8006f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f62:	e00a      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f64:	f7fc fb3e 	bl	80035e4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e03b      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7a:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <HAL_RCC_ClockConfig+0x260>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d1ed      	bne.n	8006f64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f94:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	4917      	ldr	r1, [pc, #92]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fb2:	4b13      	ldr	r3, [pc, #76]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	490f      	ldr	r1, [pc, #60]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fc6:	f000 f86b 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <HAL_RCC_ClockConfig+0x264>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	091b      	lsrs	r3, r3, #4
 8006fd2:	f003 030f 	and.w	r3, r3, #15
 8006fd6:	490c      	ldr	r1, [pc, #48]	; (8007008 <HAL_RCC_ClockConfig+0x26c>)
 8006fd8:	5ccb      	ldrb	r3, [r1, r3]
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe2:	4a0a      	ldr	r2, [pc, #40]	; (800700c <HAL_RCC_ClockConfig+0x270>)
 8006fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006fe6:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <HAL_RCC_ClockConfig+0x274>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fb fee6 	bl	8002dbc <HAL_InitTick>
 8006ff0:	4603      	mov	r3, r0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40022000 	.word	0x40022000
 8007000:	40021000 	.word	0x40021000
 8007004:	04c4b400 	.word	0x04c4b400
 8007008:	0800e898 	.word	0x0800e898
 800700c:	20000130 	.word	0x20000130
 8007010:	20000134 	.word	0x20000134

08007014 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08c      	sub	sp, #48	; 0x30
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007020:	2302      	movs	r3, #2
 8007022:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007024:	2303      	movs	r3, #3
 8007026:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007028:	2300      	movs	r3, #0
 800702a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	0c1b      	lsrs	r3, r3, #16
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8007040:	029b      	lsls	r3, r3, #10
 8007042:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	0c1b      	lsrs	r3, r3, #16
 8007048:	f003 030f 	and.w	r3, r3, #15
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800704e:	4b13      	ldr	r3, [pc, #76]	; (800709c <HAL_RCC_MCOConfig+0x88>)
 8007050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007052:	2101      	movs	r1, #1
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	fa01 f303 	lsl.w	r3, r1, r3
 800705a:	4910      	ldr	r1, [pc, #64]	; (800709c <HAL_RCC_MCOConfig+0x88>)
 800705c:	4313      	orrs	r3, r2
 800705e:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	b29b      	uxth	r3, r3
 8007064:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	0d1b      	lsrs	r3, r3, #20
 800706a:	b2db      	uxtb	r3, r3
 800706c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800706e:	f107 0310 	add.w	r3, r7, #16
 8007072:	4619      	mov	r1, r3
 8007074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007076:	f7ff f92b 	bl	80062d0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007080:	4b06      	ldr	r3, [pc, #24]	; (800709c <HAL_RCC_MCOConfig+0x88>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	430b      	orrs	r3, r1
 800708e:	4903      	ldr	r1, [pc, #12]	; (800709c <HAL_RCC_MCOConfig+0x88>)
 8007090:	4313      	orrs	r3, r2
 8007092:	608b      	str	r3, [r1, #8]
  }
}
 8007094:	bf00      	nop
 8007096:	3730      	adds	r7, #48	; 0x30
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	40021000 	.word	0x40021000

080070a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80070a6:	4b2c      	ldr	r3, [pc, #176]	; (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 030c 	and.w	r3, r3, #12
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d102      	bne.n	80070b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070b2:	4b2a      	ldr	r3, [pc, #168]	; (800715c <HAL_RCC_GetSysClockFreq+0xbc>)
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	e047      	b.n	8007148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80070b8:	4b27      	ldr	r3, [pc, #156]	; (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 030c 	and.w	r3, r3, #12
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d102      	bne.n	80070ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070c4:	4b25      	ldr	r3, [pc, #148]	; (800715c <HAL_RCC_GetSysClockFreq+0xbc>)
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	e03e      	b.n	8007148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80070ca:	4b23      	ldr	r3, [pc, #140]	; (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 030c 	and.w	r3, r3, #12
 80070d2:	2b0c      	cmp	r3, #12
 80070d4:	d136      	bne.n	8007144 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070d6:	4b20      	ldr	r3, [pc, #128]	; (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070e0:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	3301      	adds	r3, #1
 80070ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d10c      	bne.n	800710e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070f4:	4a19      	ldr	r2, [pc, #100]	; (800715c <HAL_RCC_GetSysClockFreq+0xbc>)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	4a16      	ldr	r2, [pc, #88]	; (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070fe:	68d2      	ldr	r2, [r2, #12]
 8007100:	0a12      	lsrs	r2, r2, #8
 8007102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	617b      	str	r3, [r7, #20]
      break;
 800710c:	e00c      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800710e:	4a13      	ldr	r2, [pc, #76]	; (800715c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	4a10      	ldr	r2, [pc, #64]	; (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007118:	68d2      	ldr	r2, [r2, #12]
 800711a:	0a12      	lsrs	r2, r2, #8
 800711c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	617b      	str	r3, [r7, #20]
      break;
 8007126:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	0e5b      	lsrs	r3, r3, #25
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	3301      	adds	r3, #1
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	613b      	str	r3, [r7, #16]
 8007142:	e001      	b.n	8007148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007148:	693b      	ldr	r3, [r7, #16]
}
 800714a:	4618      	mov	r0, r3
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40021000 	.word	0x40021000
 800715c:	00f42400 	.word	0x00f42400

08007160 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007164:	4b03      	ldr	r3, [pc, #12]	; (8007174 <HAL_RCC_GetHCLKFreq+0x14>)
 8007166:	681b      	ldr	r3, [r3, #0]
}
 8007168:	4618      	mov	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000130 	.word	0x20000130

08007178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800717c:	f7ff fff0 	bl	8007160 <HAL_RCC_GetHCLKFreq>
 8007180:	4602      	mov	r2, r0
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	4904      	ldr	r1, [pc, #16]	; (80071a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800718e:	5ccb      	ldrb	r3, [r1, r3]
 8007190:	f003 031f 	and.w	r3, r3, #31
 8007194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007198:	4618      	mov	r0, r3
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40021000 	.word	0x40021000
 80071a0:	0800e8a8 	.word	0x0800e8a8

080071a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80071a8:	f7ff ffda 	bl	8007160 <HAL_RCC_GetHCLKFreq>
 80071ac:	4602      	mov	r2, r0
 80071ae:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	0adb      	lsrs	r3, r3, #11
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	4904      	ldr	r1, [pc, #16]	; (80071cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80071ba:	5ccb      	ldrb	r3, [r1, r3]
 80071bc:	f003 031f 	and.w	r3, r3, #31
 80071c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40021000 	.word	0x40021000
 80071cc:	0800e8a8 	.word	0x0800e8a8

080071d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	220f      	movs	r2, #15
 80071de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80071e0:	4b12      	ldr	r3, [pc, #72]	; (800722c <HAL_RCC_GetClockConfig+0x5c>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 0203 	and.w	r2, r3, #3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80071ec:	4b0f      	ldr	r3, [pc, #60]	; (800722c <HAL_RCC_GetClockConfig+0x5c>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <HAL_RCC_GetClockConfig+0x5c>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007204:	4b09      	ldr	r3, [pc, #36]	; (800722c <HAL_RCC_GetClockConfig+0x5c>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	08db      	lsrs	r3, r3, #3
 800720a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007212:	4b07      	ldr	r3, [pc, #28]	; (8007230 <HAL_RCC_GetClockConfig+0x60>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 020f 	and.w	r2, r3, #15
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	601a      	str	r2, [r3, #0]
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40021000 	.word	0x40021000
 8007230:	40022000 	.word	0x40022000

08007234 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800723a:	4b1e      	ldr	r3, [pc, #120]	; (80072b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007244:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	091b      	lsrs	r3, r3, #4
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	3301      	adds	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b03      	cmp	r3, #3
 8007256:	d10c      	bne.n	8007272 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007258:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007260:	4a14      	ldr	r2, [pc, #80]	; (80072b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007262:	68d2      	ldr	r2, [r2, #12]
 8007264:	0a12      	lsrs	r2, r2, #8
 8007266:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800726a:	fb02 f303 	mul.w	r3, r2, r3
 800726e:	617b      	str	r3, [r7, #20]
    break;
 8007270:	e00c      	b.n	800728c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007272:	4a11      	ldr	r2, [pc, #68]	; (80072b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	fbb2 f3f3 	udiv	r3, r2, r3
 800727a:	4a0e      	ldr	r2, [pc, #56]	; (80072b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800727c:	68d2      	ldr	r2, [r2, #12]
 800727e:	0a12      	lsrs	r2, r2, #8
 8007280:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007284:	fb02 f303 	mul.w	r3, r2, r3
 8007288:	617b      	str	r3, [r7, #20]
    break;
 800728a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800728c:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	0e5b      	lsrs	r3, r3, #25
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	3301      	adds	r3, #1
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80072a6:	687b      	ldr	r3, [r7, #4]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	40021000 	.word	0x40021000
 80072b8:	00f42400 	.word	0x00f42400

080072bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072c4:	2300      	movs	r3, #0
 80072c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072c8:	2300      	movs	r3, #0
 80072ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8098 	beq.w	800740a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072da:	2300      	movs	r3, #0
 80072dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072de:	4b43      	ldr	r3, [pc, #268]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10d      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072ea:	4b40      	ldr	r3, [pc, #256]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ee:	4a3f      	ldr	r2, [pc, #252]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f4:	6593      	str	r3, [r2, #88]	; 0x58
 80072f6:	4b3d      	ldr	r3, [pc, #244]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fe:	60bb      	str	r3, [r7, #8]
 8007300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007302:	2301      	movs	r3, #1
 8007304:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007306:	4b3a      	ldr	r3, [pc, #232]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a39      	ldr	r2, [pc, #228]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800730c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007310:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007312:	f7fc f967 	bl	80035e4 <HAL_GetTick>
 8007316:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007318:	e009      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800731a:	f7fc f963 	bl	80035e4 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d902      	bls.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	74fb      	strb	r3, [r7, #19]
        break;
 800732c:	e005      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800732e:	4b30      	ldr	r3, [pc, #192]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0ef      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800733a:	7cfb      	ldrb	r3, [r7, #19]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d159      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007340:	4b2a      	ldr	r3, [pc, #168]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800734a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d01e      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	429a      	cmp	r2, r3
 800735a:	d019      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800735c:	4b23      	ldr	r3, [pc, #140]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800735e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007368:	4b20      	ldr	r3, [pc, #128]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800736a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736e:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007378:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800737a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737e:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007388:	4a18      	ldr	r2, [pc, #96]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d016      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739a:	f7fc f923 	bl	80035e4 <HAL_GetTick>
 800739e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073a0:	e00b      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073a2:	f7fc f91f 	bl	80035e4 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d902      	bls.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	74fb      	strb	r3, [r7, #19]
            break;
 80073b8:	e006      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ba:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0ec      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80073c8:	7cfb      	ldrb	r3, [r7, #19]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073ce:	4b07      	ldr	r3, [pc, #28]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	4903      	ldr	r1, [pc, #12]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80073e4:	e008      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073e6:	7cfb      	ldrb	r3, [r7, #19]
 80073e8:	74bb      	strb	r3, [r7, #18]
 80073ea:	e005      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80073ec:	40021000 	.word	0x40021000
 80073f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f4:	7cfb      	ldrb	r3, [r7, #19]
 80073f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073f8:	7c7b      	ldrb	r3, [r7, #17]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d105      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073fe:	4ba6      	ldr	r3, [pc, #664]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007402:	4aa5      	ldr	r2, [pc, #660]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007408:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007416:	4ba0      	ldr	r3, [pc, #640]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741c:	f023 0203 	bic.w	r2, r3, #3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	499c      	ldr	r1, [pc, #624]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007438:	4b97      	ldr	r3, [pc, #604]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800743a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743e:	f023 020c 	bic.w	r2, r3, #12
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	4994      	ldr	r1, [pc, #592]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007448:	4313      	orrs	r3, r2
 800744a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800745a:	4b8f      	ldr	r3, [pc, #572]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800745c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007460:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	498b      	ldr	r1, [pc, #556]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800746a:	4313      	orrs	r3, r2
 800746c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800747c:	4b86      	ldr	r3, [pc, #536]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800747e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007482:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	4983      	ldr	r1, [pc, #524]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800748c:	4313      	orrs	r3, r2
 800748e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800749e:	4b7e      	ldr	r3, [pc, #504]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	497a      	ldr	r1, [pc, #488]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074c0:	4b75      	ldr	r3, [pc, #468]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	4972      	ldr	r1, [pc, #456]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074e2:	4b6d      	ldr	r3, [pc, #436]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	4969      	ldr	r1, [pc, #420]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007504:	4b64      	ldr	r3, [pc, #400]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	4961      	ldr	r1, [pc, #388]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007526:	4b5c      	ldr	r3, [pc, #368]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	4958      	ldr	r1, [pc, #352]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007544:	2b00      	cmp	r3, #0
 8007546:	d015      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007548:	4b53      	ldr	r3, [pc, #332]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800754a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	4950      	ldr	r1, [pc, #320]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007566:	d105      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007568:	4b4b      	ldr	r3, [pc, #300]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4a4a      	ldr	r2, [pc, #296]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800756e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007572:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800757c:	2b00      	cmp	r3, #0
 800757e:	d015      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007580:	4b45      	ldr	r3, [pc, #276]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007586:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	4942      	ldr	r1, [pc, #264]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800759e:	d105      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075a0:	4b3d      	ldr	r3, [pc, #244]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4a3c      	ldr	r2, [pc, #240]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d015      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075b8:	4b37      	ldr	r3, [pc, #220]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	4934      	ldr	r1, [pc, #208]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075d6:	d105      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075d8:	4b2f      	ldr	r3, [pc, #188]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a2e      	ldr	r2, [pc, #184]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d015      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075f0:	4b29      	ldr	r3, [pc, #164]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fe:	4926      	ldr	r1, [pc, #152]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800760e:	d105      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007610:	4b21      	ldr	r3, [pc, #132]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	4a20      	ldr	r2, [pc, #128]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800761a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d015      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007628:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	4918      	ldr	r1, [pc, #96]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007646:	d105      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007648:	4b13      	ldr	r3, [pc, #76]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	4a12      	ldr	r2, [pc, #72]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800764e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007652:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d015      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007660:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	490a      	ldr	r1, [pc, #40]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007670:	4313      	orrs	r3, r2
 8007672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800767e:	d105      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	4a04      	ldr	r2, [pc, #16]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800768a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800768c:	7cbb      	ldrb	r3, [r7, #18]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	40021000 	.word	0x40021000

0800769c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e09d      	b.n	80077ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d108      	bne.n	80076c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076be:	d009      	beq.n	80076d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	61da      	str	r2, [r3, #28]
 80076c6:	e005      	b.n	80076d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fb f9fe 	bl	8002af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800770a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007714:	d902      	bls.n	800771c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	e002      	b.n	8007722 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800771c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007720:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800772a:	d007      	beq.n	800773c <HAL_SPI_Init+0xa0>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007734:	d002      	beq.n	800773c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777e:	ea42 0103 	orr.w	r1, r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	0c1b      	lsrs	r3, r3, #16
 8007798:	f003 0204 	and.w	r2, r3, #4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077aa:	f003 0308 	and.w	r3, r3, #8
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80077b8:	ea42 0103 	orr.w	r1, r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10e      	bne.n	8007834 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800781c:	2b00      	cmp	r3, #0
 800781e:	d009      	beq.n	8007834 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
    return;
 8007832:	e0ce      	b.n	80079d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <HAL_SPI_IRQHandler+0x5e>
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
    return;
 8007850:	e0bf      	b.n	80079d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <HAL_SPI_IRQHandler+0x7e>
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d105      	bne.n	8007872 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 80b0 	beq.w	80079d2 <HAL_SPI_IRQHandler+0x1de>
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80aa 	beq.w	80079d2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d023      	beq.n	80078d0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b03      	cmp	r3, #3
 8007892:	d011      	beq.n	80078b8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007898:	f043 0204 	orr.w	r2, r3, #4
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	e00b      	b.n	80078d0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	613b      	str	r3, [r7, #16]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	693b      	ldr	r3, [r7, #16]
        return;
 80078ce:	e080      	b.n	80079d2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d014      	beq.n	8007904 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078de:	f043 0201 	orr.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00c      	beq.n	8007928 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007912:	f043 0208 	orr.w	r2, r3, #8
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	60bb      	str	r3, [r7, #8]
 8007926:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792c:	2b00      	cmp	r3, #0
 800792e:	d04f      	beq.n	80079d0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800793e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b00      	cmp	r3, #0
 8007950:	d104      	bne.n	800795c <HAL_SPI_IRQHandler+0x168>
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d034      	beq.n	80079c6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0203 	bic.w	r2, r2, #3
 800796a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	2b00      	cmp	r3, #0
 8007972:	d011      	beq.n	8007998 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007978:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <HAL_SPI_IRQHandler+0x1e4>)
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007980:	4618      	mov	r0, r3
 8007982:	f7fd ff91 	bl	80058a8 <HAL_DMA_Abort_IT>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799c:	2b00      	cmp	r3, #0
 800799e:	d016      	beq.n	80079ce <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a4:	4a0c      	ldr	r2, [pc, #48]	; (80079d8 <HAL_SPI_IRQHandler+0x1e4>)
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fd ff7b 	bl	80058a8 <HAL_DMA_Abort_IT>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80079c4:	e003      	b.n	80079ce <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f808 	bl	80079dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80079cc:	e000      	b.n	80079d0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80079ce:	bf00      	nop
    return;
 80079d0:	bf00      	nop
  }
}
 80079d2:	3720      	adds	r7, #32
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	080079f1 	.word	0x080079f1

080079dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff ffe5 	bl	80079dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e049      	b.n	8007ac0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d106      	bne.n	8007a46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7fb fbff 	bl	8003244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f000 fdb7 	bl	80085cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d001      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e04a      	b.n	8007b76 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a21      	ldr	r2, [pc, #132]	; (8007b84 <HAL_TIM_Base_Start_IT+0xbc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d018      	beq.n	8007b34 <HAL_TIM_Base_Start_IT+0x6c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b0a:	d013      	beq.n	8007b34 <HAL_TIM_Base_Start_IT+0x6c>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <HAL_TIM_Base_Start_IT+0xc0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00e      	beq.n	8007b34 <HAL_TIM_Base_Start_IT+0x6c>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1c      	ldr	r2, [pc, #112]	; (8007b8c <HAL_TIM_Base_Start_IT+0xc4>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d009      	beq.n	8007b34 <HAL_TIM_Base_Start_IT+0x6c>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1a      	ldr	r2, [pc, #104]	; (8007b90 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <HAL_TIM_Base_Start_IT+0x6c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a19      	ldr	r2, [pc, #100]	; (8007b94 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d115      	bne.n	8007b60 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	4b17      	ldr	r3, [pc, #92]	; (8007b98 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b06      	cmp	r3, #6
 8007b44:	d015      	beq.n	8007b72 <HAL_TIM_Base_Start_IT+0xaa>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b4c:	d011      	beq.n	8007b72 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5e:	e008      	b.n	8007b72 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e000      	b.n	8007b74 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	40012c00 	.word	0x40012c00
 8007b88:	40000400 	.word	0x40000400
 8007b8c:	40000800 	.word	0x40000800
 8007b90:	40013400 	.word	0x40013400
 8007b94:	40014000 	.word	0x40014000
 8007b98:	00010007 	.word	0x00010007

08007b9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e049      	b.n	8007c42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f841 	bl	8007c4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	f000 fcf6 	bl	80085cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <HAL_TIM_PWM_Start+0x24>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	bf14      	ite	ne
 8007c7c:	2301      	movne	r3, #1
 8007c7e:	2300      	moveq	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e03c      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d109      	bne.n	8007c9e <HAL_TIM_PWM_Start+0x3e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	bf14      	ite	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	2300      	moveq	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	e02f      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d109      	bne.n	8007cb8 <HAL_TIM_PWM_Start+0x58>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	e022      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b0c      	cmp	r3, #12
 8007cbc:	d109      	bne.n	8007cd2 <HAL_TIM_PWM_Start+0x72>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	bf14      	ite	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	2300      	moveq	r3, #0
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	e015      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	d109      	bne.n	8007cec <HAL_TIM_PWM_Start+0x8c>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	bf14      	ite	ne
 8007ce4:	2301      	movne	r3, #1
 8007ce6:	2300      	moveq	r3, #0
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	e008      	b.n	8007cfe <HAL_TIM_PWM_Start+0x9e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	bf14      	ite	ne
 8007cf8:	2301      	movne	r3, #1
 8007cfa:	2300      	moveq	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e097      	b.n	8007e36 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_PWM_Start+0xb6>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d14:	e023      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_PWM_Start+0xc6>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d24:	e01b      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_PWM_Start+0xd6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d34:	e013      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_PWM_Start+0xe6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d44:	e00b      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b10      	cmp	r3, #16
 8007d4a:	d104      	bne.n	8007d56 <HAL_TIM_PWM_Start+0xf6>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d54:	e003      	b.n	8007d5e <HAL_TIM_PWM_Start+0xfe>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2201      	movs	r2, #1
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 f852 	bl	8008e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a33      	ldr	r2, [pc, #204]	; (8007e40 <HAL_TIM_PWM_Start+0x1e0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x13e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a32      	ldr	r2, [pc, #200]	; (8007e44 <HAL_TIM_PWM_Start+0x1e4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x13e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a30      	ldr	r2, [pc, #192]	; (8007e48 <HAL_TIM_PWM_Start+0x1e8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x13e>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a2f      	ldr	r2, [pc, #188]	; (8007e4c <HAL_TIM_PWM_Start+0x1ec>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x13e>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a2d      	ldr	r2, [pc, #180]	; (8007e50 <HAL_TIM_PWM_Start+0x1f0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d101      	bne.n	8007da2 <HAL_TIM_PWM_Start+0x142>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <HAL_TIM_PWM_Start+0x144>
 8007da2:	2300      	movs	r3, #0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007db6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a20      	ldr	r2, [pc, #128]	; (8007e40 <HAL_TIM_PWM_Start+0x1e0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d018      	beq.n	8007df4 <HAL_TIM_PWM_Start+0x194>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dca:	d013      	beq.n	8007df4 <HAL_TIM_PWM_Start+0x194>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a20      	ldr	r2, [pc, #128]	; (8007e54 <HAL_TIM_PWM_Start+0x1f4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00e      	beq.n	8007df4 <HAL_TIM_PWM_Start+0x194>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a1f      	ldr	r2, [pc, #124]	; (8007e58 <HAL_TIM_PWM_Start+0x1f8>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d009      	beq.n	8007df4 <HAL_TIM_PWM_Start+0x194>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a17      	ldr	r2, [pc, #92]	; (8007e44 <HAL_TIM_PWM_Start+0x1e4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <HAL_TIM_PWM_Start+0x194>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a16      	ldr	r2, [pc, #88]	; (8007e48 <HAL_TIM_PWM_Start+0x1e8>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d115      	bne.n	8007e20 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	4b18      	ldr	r3, [pc, #96]	; (8007e5c <HAL_TIM_PWM_Start+0x1fc>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b06      	cmp	r3, #6
 8007e04:	d015      	beq.n	8007e32 <HAL_TIM_PWM_Start+0x1d2>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0c:	d011      	beq.n	8007e32 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0201 	orr.w	r2, r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e1e:	e008      	b.n	8007e32 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	e000      	b.n	8007e34 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40012c00 	.word	0x40012c00
 8007e44:	40013400 	.word	0x40013400
 8007e48:	40014000 	.word	0x40014000
 8007e4c:	40014400 	.word	0x40014400
 8007e50:	40014800 	.word	0x40014800
 8007e54:	40000400 	.word	0x40000400
 8007e58:	40000800 	.word	0x40000800
 8007e5c:	00010007 	.word	0x00010007

08007e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d122      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d11b      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0202 	mvn.w	r2, #2
 8007e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fb74 	bl	8008590 <HAL_TIM_IC_CaptureCallback>
 8007ea8:	e005      	b.n	8007eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb66 	bl	800857c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fb77 	bl	80085a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d122      	bne.n	8007f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d11b      	bne.n	8007f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0204 	mvn.w	r2, #4
 8007ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fb4a 	bl	8008590 <HAL_TIM_IC_CaptureCallback>
 8007efc:	e005      	b.n	8007f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fb3c 	bl	800857c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fb4d 	bl	80085a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b08      	cmp	r3, #8
 8007f1c:	d122      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d11b      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0208 	mvn.w	r2, #8
 8007f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2204      	movs	r2, #4
 8007f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fb20 	bl	8008590 <HAL_TIM_IC_CaptureCallback>
 8007f50:	e005      	b.n	8007f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fb12 	bl	800857c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fb23 	bl	80085a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f003 0310 	and.w	r3, r3, #16
 8007f6e:	2b10      	cmp	r3, #16
 8007f70:	d122      	bne.n	8007fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d11b      	bne.n	8007fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0210 	mvn.w	r2, #16
 8007f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 faf6 	bl	8008590 <HAL_TIM_IC_CaptureCallback>
 8007fa4:	e005      	b.n	8007fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fae8 	bl	800857c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 faf9 	bl	80085a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d10e      	bne.n	8007fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d107      	bne.n	8007fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f06f 0201 	mvn.w	r2, #1
 8007fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7fa fcec 	bl	80029bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fee:	2b80      	cmp	r3, #128	; 0x80
 8007ff0:	d10e      	bne.n	8008010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffc:	2b80      	cmp	r3, #128	; 0x80
 8007ffe:	d107      	bne.n	8008010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 f906 	bl	800921c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801e:	d10e      	bne.n	800803e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802a:	2b80      	cmp	r3, #128	; 0x80
 800802c:	d107      	bne.n	800803e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 f8f9 	bl	8009230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008048:	2b40      	cmp	r3, #64	; 0x40
 800804a:	d10e      	bne.n	800806a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008056:	2b40      	cmp	r3, #64	; 0x40
 8008058:	d107      	bne.n	800806a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 faa7 	bl	80085b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	f003 0320 	and.w	r3, r3, #32
 8008074:	2b20      	cmp	r3, #32
 8008076:	d10e      	bne.n	8008096 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b20      	cmp	r3, #32
 8008084:	d107      	bne.n	8008096 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f06f 0220 	mvn.w	r2, #32
 800808e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 f8b9 	bl	8009208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a4:	d10f      	bne.n	80080c6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b4:	d107      	bne.n	80080c6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80080be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f8bf 	bl	8009244 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d4:	d10f      	bne.n	80080f6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080e4:	d107      	bne.n	80080f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80080ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 f8b1 	bl	8009258 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008104:	d10f      	bne.n	8008126 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008114:	d107      	bne.n	8008126 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800811e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 f8a3 	bl	800926c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008130:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008134:	d10f      	bne.n	8008156 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008140:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008144:	d107      	bne.n	8008156 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800814e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 f895 	bl	8009280 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008176:	2b01      	cmp	r3, #1
 8008178:	d101      	bne.n	800817e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800817a:	2302      	movs	r3, #2
 800817c:	e0ff      	b.n	800837e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b14      	cmp	r3, #20
 800818a:	f200 80f0 	bhi.w	800836e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081e9 	.word	0x080081e9
 8008198:	0800836f 	.word	0x0800836f
 800819c:	0800836f 	.word	0x0800836f
 80081a0:	0800836f 	.word	0x0800836f
 80081a4:	08008229 	.word	0x08008229
 80081a8:	0800836f 	.word	0x0800836f
 80081ac:	0800836f 	.word	0x0800836f
 80081b0:	0800836f 	.word	0x0800836f
 80081b4:	0800826b 	.word	0x0800826b
 80081b8:	0800836f 	.word	0x0800836f
 80081bc:	0800836f 	.word	0x0800836f
 80081c0:	0800836f 	.word	0x0800836f
 80081c4:	080082ab 	.word	0x080082ab
 80081c8:	0800836f 	.word	0x0800836f
 80081cc:	0800836f 	.word	0x0800836f
 80081d0:	0800836f 	.word	0x0800836f
 80081d4:	080082ed 	.word	0x080082ed
 80081d8:	0800836f 	.word	0x0800836f
 80081dc:	0800836f 	.word	0x0800836f
 80081e0:	0800836f 	.word	0x0800836f
 80081e4:	0800832d 	.word	0x0800832d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fa7c 	bl	80086ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0208 	orr.w	r2, r2, #8
 8008202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0204 	bic.w	r2, r2, #4
 8008212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6999      	ldr	r1, [r3, #24]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	691a      	ldr	r2, [r3, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	619a      	str	r2, [r3, #24]
      break;
 8008226:	e0a5      	b.n	8008374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 faec 	bl	800880c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699a      	ldr	r2, [r3, #24]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	699a      	ldr	r2, [r3, #24]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6999      	ldr	r1, [r3, #24]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	021a      	lsls	r2, r3, #8
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	619a      	str	r2, [r3, #24]
      break;
 8008268:	e084      	b.n	8008374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 fb55 	bl	8008920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69da      	ldr	r2, [r3, #28]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0208 	orr.w	r2, r2, #8
 8008284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0204 	bic.w	r2, r2, #4
 8008294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69d9      	ldr	r1, [r3, #28]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	61da      	str	r2, [r3, #28]
      break;
 80082a8:	e064      	b.n	8008374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68b9      	ldr	r1, [r7, #8]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fbbd 	bl	8008a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69da      	ldr	r2, [r3, #28]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69da      	ldr	r2, [r3, #28]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69d9      	ldr	r1, [r3, #28]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	021a      	lsls	r2, r3, #8
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	61da      	str	r2, [r3, #28]
      break;
 80082ea:	e043      	b.n	8008374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68b9      	ldr	r1, [r7, #8]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fc26 	bl	8008b44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0208 	orr.w	r2, r2, #8
 8008306:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0204 	bic.w	r2, r2, #4
 8008316:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	691a      	ldr	r2, [r3, #16]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800832a:	e023      	b.n	8008374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68b9      	ldr	r1, [r7, #8]
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fc6a 	bl	8008c0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008346:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008356:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	021a      	lsls	r2, r3, #8
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800836c:	e002      	b.n	8008374 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]
      break;
 8008372:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop

08008388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_TIM_ConfigClockSource+0x1c>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e0de      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x1da>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80083c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a63      	ldr	r2, [pc, #396]	; (800856c <HAL_TIM_ConfigClockSource+0x1e4>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	f000 80a9 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1ae>
 80083e4:	4a61      	ldr	r2, [pc, #388]	; (800856c <HAL_TIM_ConfigClockSource+0x1e4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	f200 80ae 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 80083ec:	4a60      	ldr	r2, [pc, #384]	; (8008570 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	f000 80a1 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1ae>
 80083f4:	4a5e      	ldr	r2, [pc, #376]	; (8008570 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	f200 80a6 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 80083fc:	4a5d      	ldr	r2, [pc, #372]	; (8008574 <HAL_TIM_ConfigClockSource+0x1ec>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	f000 8099 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1ae>
 8008404:	4a5b      	ldr	r2, [pc, #364]	; (8008574 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008406:	4293      	cmp	r3, r2
 8008408:	f200 809e 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 800840c:	4a5a      	ldr	r2, [pc, #360]	; (8008578 <HAL_TIM_ConfigClockSource+0x1f0>)
 800840e:	4293      	cmp	r3, r2
 8008410:	f000 8091 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1ae>
 8008414:	4a58      	ldr	r2, [pc, #352]	; (8008578 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	f200 8096 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 800841c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008420:	f000 8089 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1ae>
 8008424:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008428:	f200 808e 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 800842c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008430:	d03e      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0x128>
 8008432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008436:	f200 8087 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843e:	f000 8086 	beq.w	800854e <HAL_TIM_ConfigClockSource+0x1c6>
 8008442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008446:	d87f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 8008448:	2b70      	cmp	r3, #112	; 0x70
 800844a:	d01a      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0xfa>
 800844c:	2b70      	cmp	r3, #112	; 0x70
 800844e:	d87b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 8008450:	2b60      	cmp	r3, #96	; 0x60
 8008452:	d050      	beq.n	80084f6 <HAL_TIM_ConfigClockSource+0x16e>
 8008454:	2b60      	cmp	r3, #96	; 0x60
 8008456:	d877      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 8008458:	2b50      	cmp	r3, #80	; 0x50
 800845a:	d03c      	beq.n	80084d6 <HAL_TIM_ConfigClockSource+0x14e>
 800845c:	2b50      	cmp	r3, #80	; 0x50
 800845e:	d873      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 8008460:	2b40      	cmp	r3, #64	; 0x40
 8008462:	d058      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0x18e>
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d86f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 8008468:	2b30      	cmp	r3, #48	; 0x30
 800846a:	d064      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1ae>
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d86b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d060      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1ae>
 8008474:	2b20      	cmp	r3, #32
 8008476:	d867      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d05c      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1ae>
 800847c:	2b10      	cmp	r3, #16
 800847e:	d05a      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1ae>
 8008480:	e062      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6899      	ldr	r1, [r3, #8]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f000 fc9d 	bl	8008dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	609a      	str	r2, [r3, #8]
      break;
 80084ae:	e04f      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6899      	ldr	r1, [r3, #8]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f000 fc86 	bl	8008dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084d2:	609a      	str	r2, [r3, #8]
      break;
 80084d4:	e03c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6859      	ldr	r1, [r3, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	461a      	mov	r2, r3
 80084e4:	f000 fbf8 	bl	8008cd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2150      	movs	r1, #80	; 0x50
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fc51 	bl	8008d96 <TIM_ITRx_SetConfig>
      break;
 80084f4:	e02c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6859      	ldr	r1, [r3, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	461a      	mov	r2, r3
 8008504:	f000 fc17 	bl	8008d36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2160      	movs	r1, #96	; 0x60
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fc41 	bl	8008d96 <TIM_ITRx_SetConfig>
      break;
 8008514:	e01c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6859      	ldr	r1, [r3, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	461a      	mov	r2, r3
 8008524:	f000 fbd8 	bl	8008cd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2140      	movs	r1, #64	; 0x40
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fc31 	bl	8008d96 <TIM_ITRx_SetConfig>
      break;
 8008534:	e00c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f000 fc28 	bl	8008d96 <TIM_ITRx_SetConfig>
      break;
 8008546:	e003      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	73fb      	strb	r3, [r7, #15]
      break;
 800854c:	e000      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800854e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	00100070 	.word	0x00100070
 8008570:	00100040 	.word	0x00100040
 8008574:	00100030 	.word	0x00100030
 8008578:	00100020 	.word	0x00100020

0800857c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a3c      	ldr	r2, [pc, #240]	; (80086d0 <TIM_Base_SetConfig+0x104>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00f      	beq.n	8008604 <TIM_Base_SetConfig+0x38>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ea:	d00b      	beq.n	8008604 <TIM_Base_SetConfig+0x38>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a39      	ldr	r2, [pc, #228]	; (80086d4 <TIM_Base_SetConfig+0x108>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d007      	beq.n	8008604 <TIM_Base_SetConfig+0x38>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a38      	ldr	r2, [pc, #224]	; (80086d8 <TIM_Base_SetConfig+0x10c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_Base_SetConfig+0x38>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a37      	ldr	r2, [pc, #220]	; (80086dc <TIM_Base_SetConfig+0x110>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d108      	bne.n	8008616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a2d      	ldr	r2, [pc, #180]	; (80086d0 <TIM_Base_SetConfig+0x104>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d01b      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008624:	d017      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a2a      	ldr	r2, [pc, #168]	; (80086d4 <TIM_Base_SetConfig+0x108>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d013      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a29      	ldr	r2, [pc, #164]	; (80086d8 <TIM_Base_SetConfig+0x10c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00f      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a28      	ldr	r2, [pc, #160]	; (80086dc <TIM_Base_SetConfig+0x110>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00b      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a27      	ldr	r2, [pc, #156]	; (80086e0 <TIM_Base_SetConfig+0x114>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d007      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a26      	ldr	r2, [pc, #152]	; (80086e4 <TIM_Base_SetConfig+0x118>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d003      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <TIM_Base_SetConfig+0x11c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d108      	bne.n	8008668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800865c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4313      	orrs	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a10      	ldr	r2, [pc, #64]	; (80086d0 <TIM_Base_SetConfig+0x104>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00f      	beq.n	80086b4 <TIM_Base_SetConfig+0xe8>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a11      	ldr	r2, [pc, #68]	; (80086dc <TIM_Base_SetConfig+0x110>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00b      	beq.n	80086b4 <TIM_Base_SetConfig+0xe8>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a10      	ldr	r2, [pc, #64]	; (80086e0 <TIM_Base_SetConfig+0x114>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d007      	beq.n	80086b4 <TIM_Base_SetConfig+0xe8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a0f      	ldr	r2, [pc, #60]	; (80086e4 <TIM_Base_SetConfig+0x118>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d003      	beq.n	80086b4 <TIM_Base_SetConfig+0xe8>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a0e      	ldr	r2, [pc, #56]	; (80086e8 <TIM_Base_SetConfig+0x11c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d103      	bne.n	80086bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	691a      	ldr	r2, [r3, #16]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	615a      	str	r2, [r3, #20]
}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	40012c00 	.word	0x40012c00
 80086d4:	40000400 	.word	0x40000400
 80086d8:	40000800 	.word	0x40000800
 80086dc:	40013400 	.word	0x40013400
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40014400 	.word	0x40014400
 80086e8:	40014800 	.word	0x40014800

080086ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	f023 0201 	bic.w	r2, r3, #1
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800871a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 0303 	bic.w	r3, r3, #3
 8008726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f023 0302 	bic.w	r3, r3, #2
 8008738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4313      	orrs	r3, r2
 8008742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a2c      	ldr	r2, [pc, #176]	; (80087f8 <TIM_OC1_SetConfig+0x10c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d00f      	beq.n	800876c <TIM_OC1_SetConfig+0x80>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a2b      	ldr	r2, [pc, #172]	; (80087fc <TIM_OC1_SetConfig+0x110>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00b      	beq.n	800876c <TIM_OC1_SetConfig+0x80>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a2a      	ldr	r2, [pc, #168]	; (8008800 <TIM_OC1_SetConfig+0x114>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d007      	beq.n	800876c <TIM_OC1_SetConfig+0x80>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a29      	ldr	r2, [pc, #164]	; (8008804 <TIM_OC1_SetConfig+0x118>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d003      	beq.n	800876c <TIM_OC1_SetConfig+0x80>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a28      	ldr	r2, [pc, #160]	; (8008808 <TIM_OC1_SetConfig+0x11c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d10c      	bne.n	8008786 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f023 0308 	bic.w	r3, r3, #8
 8008772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f023 0304 	bic.w	r3, r3, #4
 8008784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a1b      	ldr	r2, [pc, #108]	; (80087f8 <TIM_OC1_SetConfig+0x10c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00f      	beq.n	80087ae <TIM_OC1_SetConfig+0xc2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a1a      	ldr	r2, [pc, #104]	; (80087fc <TIM_OC1_SetConfig+0x110>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00b      	beq.n	80087ae <TIM_OC1_SetConfig+0xc2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a19      	ldr	r2, [pc, #100]	; (8008800 <TIM_OC1_SetConfig+0x114>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d007      	beq.n	80087ae <TIM_OC1_SetConfig+0xc2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a18      	ldr	r2, [pc, #96]	; (8008804 <TIM_OC1_SetConfig+0x118>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d003      	beq.n	80087ae <TIM_OC1_SetConfig+0xc2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a17      	ldr	r2, [pc, #92]	; (8008808 <TIM_OC1_SetConfig+0x11c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d111      	bne.n	80087d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	621a      	str	r2, [r3, #32]
}
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40012c00 	.word	0x40012c00
 80087fc:	40013400 	.word	0x40013400
 8008800:	40014000 	.word	0x40014000
 8008804:	40014400 	.word	0x40014400
 8008808:	40014800 	.word	0x40014800

0800880c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	f023 0210 	bic.w	r2, r3, #16
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800883a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800883e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f023 0320 	bic.w	r3, r3, #32
 800885a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a28      	ldr	r2, [pc, #160]	; (800890c <TIM_OC2_SetConfig+0x100>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_OC2_SetConfig+0x6c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a27      	ldr	r2, [pc, #156]	; (8008910 <TIM_OC2_SetConfig+0x104>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d10d      	bne.n	8008894 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800887e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	011b      	lsls	r3, r3, #4
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4313      	orrs	r3, r2
 800888a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008892:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a1d      	ldr	r2, [pc, #116]	; (800890c <TIM_OC2_SetConfig+0x100>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00f      	beq.n	80088bc <TIM_OC2_SetConfig+0xb0>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a1c      	ldr	r2, [pc, #112]	; (8008910 <TIM_OC2_SetConfig+0x104>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00b      	beq.n	80088bc <TIM_OC2_SetConfig+0xb0>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a1b      	ldr	r2, [pc, #108]	; (8008914 <TIM_OC2_SetConfig+0x108>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d007      	beq.n	80088bc <TIM_OC2_SetConfig+0xb0>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a1a      	ldr	r2, [pc, #104]	; (8008918 <TIM_OC2_SetConfig+0x10c>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_OC2_SetConfig+0xb0>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a19      	ldr	r2, [pc, #100]	; (800891c <TIM_OC2_SetConfig+0x110>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d113      	bne.n	80088e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	621a      	str	r2, [r3, #32]
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	40012c00 	.word	0x40012c00
 8008910:	40013400 	.word	0x40013400
 8008914:	40014000 	.word	0x40014000
 8008918:	40014400 	.word	0x40014400
 800891c:	40014800 	.word	0x40014800

08008920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0303 	bic.w	r3, r3, #3
 800895a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800896c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	021b      	lsls	r3, r3, #8
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a27      	ldr	r2, [pc, #156]	; (8008a1c <TIM_OC3_SetConfig+0xfc>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d003      	beq.n	800898a <TIM_OC3_SetConfig+0x6a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a26      	ldr	r2, [pc, #152]	; (8008a20 <TIM_OC3_SetConfig+0x100>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d10d      	bne.n	80089a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	4313      	orrs	r3, r2
 800899c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a1c      	ldr	r2, [pc, #112]	; (8008a1c <TIM_OC3_SetConfig+0xfc>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d00f      	beq.n	80089ce <TIM_OC3_SetConfig+0xae>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a1b      	ldr	r2, [pc, #108]	; (8008a20 <TIM_OC3_SetConfig+0x100>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d00b      	beq.n	80089ce <TIM_OC3_SetConfig+0xae>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <TIM_OC3_SetConfig+0x104>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d007      	beq.n	80089ce <TIM_OC3_SetConfig+0xae>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a19      	ldr	r2, [pc, #100]	; (8008a28 <TIM_OC3_SetConfig+0x108>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d003      	beq.n	80089ce <TIM_OC3_SetConfig+0xae>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a18      	ldr	r2, [pc, #96]	; (8008a2c <TIM_OC3_SetConfig+0x10c>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d113      	bne.n	80089f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	011b      	lsls	r3, r3, #4
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	621a      	str	r2, [r3, #32]
}
 8008a10:	bf00      	nop
 8008a12:	371c      	adds	r7, #28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	40012c00 	.word	0x40012c00
 8008a20:	40013400 	.word	0x40013400
 8008a24:	40014000 	.word	0x40014000
 8008a28:	40014400 	.word	0x40014400
 8008a2c:	40014800 	.word	0x40014800

08008a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	031b      	lsls	r3, r3, #12
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a28      	ldr	r2, [pc, #160]	; (8008b30 <TIM_OC4_SetConfig+0x100>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_OC4_SetConfig+0x6c>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a27      	ldr	r2, [pc, #156]	; (8008b34 <TIM_OC4_SetConfig+0x104>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d10d      	bne.n	8008ab8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	031b      	lsls	r3, r3, #12
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a1d      	ldr	r2, [pc, #116]	; (8008b30 <TIM_OC4_SetConfig+0x100>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00f      	beq.n	8008ae0 <TIM_OC4_SetConfig+0xb0>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a1c      	ldr	r2, [pc, #112]	; (8008b34 <TIM_OC4_SetConfig+0x104>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_OC4_SetConfig+0xb0>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <TIM_OC4_SetConfig+0x108>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_OC4_SetConfig+0xb0>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a1a      	ldr	r2, [pc, #104]	; (8008b3c <TIM_OC4_SetConfig+0x10c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_OC4_SetConfig+0xb0>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <TIM_OC4_SetConfig+0x110>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d113      	bne.n	8008b08 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ae6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	019b      	lsls	r3, r3, #6
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	019b      	lsls	r3, r3, #6
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40012c00 	.word	0x40012c00
 8008b34:	40013400 	.word	0x40013400
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	40014400 	.word	0x40014400
 8008b40:	40014800 	.word	0x40014800

08008b44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a17      	ldr	r2, [pc, #92]	; (8008bf8 <TIM_OC5_SetConfig+0xb4>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d00f      	beq.n	8008bbe <TIM_OC5_SetConfig+0x7a>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a16      	ldr	r2, [pc, #88]	; (8008bfc <TIM_OC5_SetConfig+0xb8>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00b      	beq.n	8008bbe <TIM_OC5_SetConfig+0x7a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a15      	ldr	r2, [pc, #84]	; (8008c00 <TIM_OC5_SetConfig+0xbc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d007      	beq.n	8008bbe <TIM_OC5_SetConfig+0x7a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a14      	ldr	r2, [pc, #80]	; (8008c04 <TIM_OC5_SetConfig+0xc0>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d003      	beq.n	8008bbe <TIM_OC5_SetConfig+0x7a>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a13      	ldr	r2, [pc, #76]	; (8008c08 <TIM_OC5_SetConfig+0xc4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d109      	bne.n	8008bd2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	621a      	str	r2, [r3, #32]
}
 8008bec:	bf00      	nop
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	40012c00 	.word	0x40012c00
 8008bfc:	40013400 	.word	0x40013400
 8008c00:	40014000 	.word	0x40014000
 8008c04:	40014400 	.word	0x40014400
 8008c08:	40014800 	.word	0x40014800

08008c0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	021b      	lsls	r3, r3, #8
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	051b      	lsls	r3, r3, #20
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a18      	ldr	r2, [pc, #96]	; (8008cc4 <TIM_OC6_SetConfig+0xb8>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00f      	beq.n	8008c88 <TIM_OC6_SetConfig+0x7c>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <TIM_OC6_SetConfig+0xbc>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d00b      	beq.n	8008c88 <TIM_OC6_SetConfig+0x7c>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a16      	ldr	r2, [pc, #88]	; (8008ccc <TIM_OC6_SetConfig+0xc0>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d007      	beq.n	8008c88 <TIM_OC6_SetConfig+0x7c>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a15      	ldr	r2, [pc, #84]	; (8008cd0 <TIM_OC6_SetConfig+0xc4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d003      	beq.n	8008c88 <TIM_OC6_SetConfig+0x7c>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a14      	ldr	r2, [pc, #80]	; (8008cd4 <TIM_OC6_SetConfig+0xc8>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d109      	bne.n	8008c9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	029b      	lsls	r3, r3, #10
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	621a      	str	r2, [r3, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	40012c00 	.word	0x40012c00
 8008cc8:	40013400 	.word	0x40013400
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	40014400 	.word	0x40014400
 8008cd4:	40014800 	.word	0x40014800

08008cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	f023 0201 	bic.w	r2, r3, #1
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f023 030a 	bic.w	r3, r3, #10
 8008d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	621a      	str	r2, [r3, #32]
}
 8008d2a:	bf00      	nop
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b087      	sub	sp, #28
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	60b9      	str	r1, [r7, #8]
 8008d40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f023 0210 	bic.w	r2, r3, #16
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	031b      	lsls	r3, r3, #12
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	621a      	str	r2, [r3, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b085      	sub	sp, #20
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f043 0307 	orr.w	r3, r3, #7
 8008dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	609a      	str	r2, [r3, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	021a      	lsls	r2, r3, #8
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	431a      	orrs	r2, r3
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	609a      	str	r2, [r3, #8]
}
 8008e04:	bf00      	nop
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f003 031f 	and.w	r3, r3, #31
 8008e22:	2201      	movs	r2, #1
 8008e24:	fa02 f303 	lsl.w	r3, r2, r3
 8008e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a1a      	ldr	r2, [r3, #32]
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	43db      	mvns	r3, r3
 8008e32:	401a      	ands	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a1a      	ldr	r2, [r3, #32]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f003 031f 	and.w	r3, r3, #31
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	fa01 f303 	lsl.w	r3, r1, r3
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	621a      	str	r2, [r3, #32]
}
 8008e4e:	bf00      	nop
 8008e50:	371c      	adds	r7, #28
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
	...

08008e5c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d109      	bne.n	8008e80 <HAL_TIMEx_PWMN_Start+0x24>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	bf14      	ite	ne
 8008e78:	2301      	movne	r3, #1
 8008e7a:	2300      	moveq	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	e022      	b.n	8008ec6 <HAL_TIMEx_PWMN_Start+0x6a>
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d109      	bne.n	8008e9a <HAL_TIMEx_PWMN_Start+0x3e>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	bf14      	ite	ne
 8008e92:	2301      	movne	r3, #1
 8008e94:	2300      	moveq	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	e015      	b.n	8008ec6 <HAL_TIMEx_PWMN_Start+0x6a>
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b08      	cmp	r3, #8
 8008e9e:	d109      	bne.n	8008eb4 <HAL_TIMEx_PWMN_Start+0x58>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	bf14      	ite	ne
 8008eac:	2301      	movne	r3, #1
 8008eae:	2300      	moveq	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	e008      	b.n	8008ec6 <HAL_TIMEx_PWMN_Start+0x6a>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	bf14      	ite	ne
 8008ec0:	2301      	movne	r3, #1
 8008ec2:	2300      	moveq	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e069      	b.n	8008fa2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <HAL_TIMEx_PWMN_Start+0x82>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008edc:	e013      	b.n	8008f06 <HAL_TIMEx_PWMN_Start+0xaa>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d104      	bne.n	8008eee <HAL_TIMEx_PWMN_Start+0x92>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eec:	e00b      	b.n	8008f06 <HAL_TIMEx_PWMN_Start+0xaa>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	d104      	bne.n	8008efe <HAL_TIMEx_PWMN_Start+0xa2>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008efc:	e003      	b.n	8008f06 <HAL_TIMEx_PWMN_Start+0xaa>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2202      	movs	r2, #2
 8008f02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2204      	movs	r2, #4
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f9c0 	bl	8009294 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a20      	ldr	r2, [pc, #128]	; (8008fac <HAL_TIMEx_PWMN_Start+0x150>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d018      	beq.n	8008f60 <HAL_TIMEx_PWMN_Start+0x104>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f36:	d013      	beq.n	8008f60 <HAL_TIMEx_PWMN_Start+0x104>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1c      	ldr	r2, [pc, #112]	; (8008fb0 <HAL_TIMEx_PWMN_Start+0x154>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d00e      	beq.n	8008f60 <HAL_TIMEx_PWMN_Start+0x104>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a1b      	ldr	r2, [pc, #108]	; (8008fb4 <HAL_TIMEx_PWMN_Start+0x158>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d009      	beq.n	8008f60 <HAL_TIMEx_PWMN_Start+0x104>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a19      	ldr	r2, [pc, #100]	; (8008fb8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d004      	beq.n	8008f60 <HAL_TIMEx_PWMN_Start+0x104>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a18      	ldr	r2, [pc, #96]	; (8008fbc <HAL_TIMEx_PWMN_Start+0x160>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d115      	bne.n	8008f8c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <HAL_TIMEx_PWMN_Start+0x164>)
 8008f68:	4013      	ands	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b06      	cmp	r3, #6
 8008f70:	d015      	beq.n	8008f9e <HAL_TIMEx_PWMN_Start+0x142>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f78:	d011      	beq.n	8008f9e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f042 0201 	orr.w	r2, r2, #1
 8008f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f8a:	e008      	b.n	8008f9e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0201 	orr.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	e000      	b.n	8008fa0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	40012c00 	.word	0x40012c00
 8008fb0:	40000400 	.word	0x40000400
 8008fb4:	40000800 	.word	0x40000800
 8008fb8:	40013400 	.word	0x40013400
 8008fbc:	40014000 	.word	0x40014000
 8008fc0:	00010007 	.word	0x00010007

08008fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e065      	b.n	80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a2c      	ldr	r2, [pc, #176]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d004      	beq.n	8009010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a2b      	ldr	r2, [pc, #172]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d108      	bne.n	8009022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800902c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	4313      	orrs	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a1b      	ldr	r2, [pc, #108]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d018      	beq.n	800907c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009052:	d013      	beq.n	800907c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a18      	ldr	r2, [pc, #96]	; (80090bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d00e      	beq.n	800907c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a17      	ldr	r2, [pc, #92]	; (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d009      	beq.n	800907c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a12      	ldr	r2, [pc, #72]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d004      	beq.n	800907c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a13      	ldr	r2, [pc, #76]	; (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d10c      	bne.n	8009096 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	4313      	orrs	r3, r2
 800908c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	40012c00 	.word	0x40012c00
 80090b8:	40013400 	.word	0x40013400
 80090bc:	40000400 	.word	0x40000400
 80090c0:	40000800 	.word	0x40000800
 80090c4:	40014000 	.word	0x40014000

080090c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090d2:	2300      	movs	r3, #0
 80090d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d101      	bne.n	80090e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090e0:	2302      	movs	r3, #2
 80090e2:	e087      	b.n	80091f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	4313      	orrs	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	4313      	orrs	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4313      	orrs	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914a:	4313      	orrs	r3, r2
 800914c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	041b      	lsls	r3, r3, #16
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a27      	ldr	r2, [pc, #156]	; (8009200 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d004      	beq.n	8009172 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a25      	ldr	r2, [pc, #148]	; (8009204 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d106      	bne.n	8009180 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	4313      	orrs	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a1e      	ldr	r2, [pc, #120]	; (8009200 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d004      	beq.n	8009194 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a1d      	ldr	r2, [pc, #116]	; (8009204 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d126      	bne.n	80091e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	051b      	lsls	r3, r3, #20
 80091a0:	4313      	orrs	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	4313      	orrs	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a0e      	ldr	r2, [pc, #56]	; (8009200 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d004      	beq.n	80091d4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a0d      	ldr	r2, [pc, #52]	; (8009204 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d106      	bne.n	80091e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	40012c00 	.word	0x40012c00
 8009204:	40013400 	.word	0x40013400

08009208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f003 031f 	and.w	r3, r3, #31
 80092a6:	2204      	movs	r2, #4
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a1a      	ldr	r2, [r3, #32]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	43db      	mvns	r3, r3
 80092b6:	401a      	ands	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a1a      	ldr	r2, [r3, #32]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 031f 	and.w	r3, r3, #31
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	fa01 f303 	lsl.w	r3, r1, r3
 80092cc:	431a      	orrs	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e042      	b.n	8009376 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d106      	bne.n	8009308 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7fa f88c 	bl	8003420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2224      	movs	r2, #36	; 0x24
 800930c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 0201 	bic.w	r2, r2, #1
 800931e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fbf7 	bl	8009b14 <UART_SetConfig>
 8009326:	4603      	mov	r3, r0
 8009328:	2b01      	cmp	r3, #1
 800932a:	d101      	bne.n	8009330 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e022      	b.n	8009376 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 feb7 	bl	800a0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800934c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800935c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0201 	orr.w	r2, r2, #1
 800936c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 ff3e 	bl	800a1f0 <UART_CheckIdleState>
 8009374:	4603      	mov	r3, r0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009394:	2b20      	cmp	r3, #32
 8009396:	d17a      	bne.n	800948e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <HAL_UART_Transmit_DMA+0x24>
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e073      	b.n	8009490 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <HAL_UART_Transmit_DMA+0x36>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e06c      	b.n	8009490 <HAL_UART_Transmit_DMA+0x110>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	88fa      	ldrh	r2, [r7, #6]
 80093c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	88fa      	ldrh	r2, [r7, #6]
 80093d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2221      	movs	r2, #33	; 0x21
 80093e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d02c      	beq.n	8009446 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093f0:	4a29      	ldr	r2, [pc, #164]	; (8009498 <HAL_UART_Transmit_DMA+0x118>)
 80093f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093f8:	4a28      	ldr	r2, [pc, #160]	; (800949c <HAL_UART_Transmit_DMA+0x11c>)
 80093fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009400:	4a27      	ldr	r2, [pc, #156]	; (80094a0 <HAL_UART_Transmit_DMA+0x120>)
 8009402:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009408:	2200      	movs	r2, #0
 800940a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009414:	4619      	mov	r1, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3328      	adds	r3, #40	; 0x28
 800941c:	461a      	mov	r2, r3
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	f7fc f96e 	bl	8005700 <HAL_DMA_Start_IT>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00d      	beq.n	8009446 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2210      	movs	r2, #16
 800942e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e024      	b.n	8009490 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2240      	movs	r2, #64	; 0x40
 800944c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3308      	adds	r3, #8
 800945c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	613b      	str	r3, [r7, #16]
   return(result);
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3308      	adds	r3, #8
 8009474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009476:	623a      	str	r2, [r7, #32]
 8009478:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	69f9      	ldr	r1, [r7, #28]
 800947c:	6a3a      	ldr	r2, [r7, #32]
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	61bb      	str	r3, [r7, #24]
   return(result);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e5      	bne.n	8009456 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	e000      	b.n	8009490 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800948e:	2302      	movs	r3, #2
  }
}
 8009490:	4618      	mov	r0, r3
 8009492:	3728      	adds	r7, #40	; 0x28
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	0800a565 	.word	0x0800a565
 800949c:	0800a5ff 	.word	0x0800a5ff
 80094a0:	0800a61b 	.word	0x0800a61b

080094a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b0ba      	sub	sp, #232	; 0xe8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80094ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80094d2:	4013      	ands	r3, r2
 80094d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80094d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d11b      	bne.n	8009518 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e4:	f003 0320 	and.w	r3, r3, #32
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d015      	beq.n	8009518 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d105      	bne.n	8009504 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d009      	beq.n	8009518 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 82d6 	beq.w	8009aba <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
      }
      return;
 8009516:	e2d0      	b.n	8009aba <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 811f 	beq.w	8009760 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009522:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009526:	4b8b      	ldr	r3, [pc, #556]	; (8009754 <HAL_UART_IRQHandler+0x2b0>)
 8009528:	4013      	ands	r3, r2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d106      	bne.n	800953c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800952e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009532:	4b89      	ldr	r3, [pc, #548]	; (8009758 <HAL_UART_IRQHandler+0x2b4>)
 8009534:	4013      	ands	r3, r2
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 8112 	beq.w	8009760 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800953c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d011      	beq.n	800956c <HAL_UART_IRQHandler+0xc8>
 8009548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800954c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2201      	movs	r2, #1
 800955a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009562:	f043 0201 	orr.w	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800956c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b00      	cmp	r3, #0
 8009576:	d011      	beq.n	800959c <HAL_UART_IRQHandler+0xf8>
 8009578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00b      	beq.n	800959c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2202      	movs	r2, #2
 800958a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009592:	f043 0204 	orr.w	r2, r3, #4
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800959c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d011      	beq.n	80095cc <HAL_UART_IRQHandler+0x128>
 80095a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2204      	movs	r2, #4
 80095ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c2:	f043 0202 	orr.w	r2, r3, #2
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d0:	f003 0308 	and.w	r3, r3, #8
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d017      	beq.n	8009608 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095dc:	f003 0320 	and.w	r3, r3, #32
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d105      	bne.n	80095f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80095e8:	4b5a      	ldr	r3, [pc, #360]	; (8009754 <HAL_UART_IRQHandler+0x2b0>)
 80095ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2208      	movs	r2, #8
 80095f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095fe:	f043 0208 	orr.w	r2, r3, #8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800960c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009610:	2b00      	cmp	r3, #0
 8009612:	d012      	beq.n	800963a <HAL_UART_IRQHandler+0x196>
 8009614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00c      	beq.n	800963a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009630:	f043 0220 	orr.w	r2, r3, #32
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 823c 	beq.w	8009abe <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964a:	f003 0320 	and.w	r3, r3, #32
 800964e:	2b00      	cmp	r3, #0
 8009650:	d013      	beq.n	800967a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009656:	f003 0320 	and.w	r3, r3, #32
 800965a:	2b00      	cmp	r3, #0
 800965c:	d105      	bne.n	800966a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800965e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d007      	beq.n	800967a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	d005      	beq.n	800969e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800969a:	2b00      	cmp	r3, #0
 800969c:	d04f      	beq.n	800973e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fefa 	bl	800a498 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ae:	2b40      	cmp	r3, #64	; 0x40
 80096b0:	d141      	bne.n	8009736 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3308      	adds	r3, #8
 80096da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1d9      	bne.n	80096b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d013      	beq.n	800972e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800970a:	4a14      	ldr	r2, [pc, #80]	; (800975c <HAL_UART_IRQHandler+0x2b8>)
 800970c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009712:	4618      	mov	r0, r3
 8009714:	f7fc f8c8 	bl	80058a8 <HAL_DMA_Abort_IT>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d017      	beq.n	800974e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972c:	e00f      	b.n	800974e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f9da 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	e00b      	b.n	800974e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f9d6 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800973c:	e007      	b.n	800974e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f9d2 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800974c:	e1b7      	b.n	8009abe <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800974e:	bf00      	nop
    return;
 8009750:	e1b5      	b.n	8009abe <HAL_UART_IRQHandler+0x61a>
 8009752:	bf00      	nop
 8009754:	10000001 	.word	0x10000001
 8009758:	04000120 	.word	0x04000120
 800975c:	0800a69b 	.word	0x0800a69b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009764:	2b01      	cmp	r3, #1
 8009766:	f040 814a 	bne.w	80099fe <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800976a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800976e:	f003 0310 	and.w	r3, r3, #16
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8143 	beq.w	80099fe <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800977c:	f003 0310 	and.w	r3, r3, #16
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 813c 	beq.w	80099fe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2210      	movs	r2, #16
 800978c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009798:	2b40      	cmp	r3, #64	; 0x40
 800979a:	f040 80b5 	bne.w	8009908 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 8187 	beq.w	8009ac2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097be:	429a      	cmp	r2, r3
 80097c0:	f080 817f 	bcs.w	8009ac2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f040 8086 	bne.w	80098ec <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800980a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800980e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009816:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1da      	bne.n	80097e0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3308      	adds	r3, #8
 8009830:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800983a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800983c:	f023 0301 	bic.w	r3, r3, #1
 8009840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3308      	adds	r3, #8
 800984a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800984e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009852:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009856:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e1      	bne.n	800982a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3308      	adds	r3, #8
 800986c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800987c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3308      	adds	r3, #8
 8009886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800988a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800988c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009890:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009892:	e841 2300 	strex	r3, r2, [r1]
 8009896:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1e3      	bne.n	8009866 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2220      	movs	r2, #32
 80098a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098bc:	f023 0310 	bic.w	r3, r3, #16
 80098c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80098d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e4      	bne.n	80098ac <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fb ff85 	bl	80057f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f8fb 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009906:	e0dc      	b.n	8009ac2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009914:	b29b      	uxth	r3, r3
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009922:	b29b      	uxth	r3, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 80ce 	beq.w	8009ac6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800992a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 80c9 	beq.w	8009ac6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009956:	647b      	str	r3, [r7, #68]	; 0x44
 8009958:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800995c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e4      	bne.n	8009934 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	623b      	str	r3, [r7, #32]
   return(result);
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009980:	f023 0301 	bic.w	r3, r3, #1
 8009984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3308      	adds	r3, #8
 800998e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009992:	633a      	str	r2, [r7, #48]	; 0x30
 8009994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1e1      	bne.n	800996a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2220      	movs	r2, #32
 80099aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0310 	bic.w	r3, r3, #16
 80099ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099dc:	61fb      	str	r3, [r7, #28]
 80099de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e0:	69b9      	ldr	r1, [r7, #24]
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	e841 2300 	strex	r3, r2, [r1]
 80099e8:	617b      	str	r3, [r7, #20]
   return(result);
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1e4      	bne.n	80099ba <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f880 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099fc:	e063      	b.n	8009ac6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00e      	beq.n	8009a28 <HAL_UART_IRQHandler+0x584>
 8009a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d008      	beq.n	8009a28 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fe7b 	bl	800a71c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a26:	e051      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d014      	beq.n	8009a5e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d008      	beq.n	8009a5e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d03a      	beq.n	8009aca <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
    }
    return;
 8009a5c:	e035      	b.n	8009aca <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <HAL_UART_IRQHandler+0x5da>
 8009a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fe25 	bl	800a6c6 <UART_EndTransmit_IT>
    return;
 8009a7c:	e026      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d009      	beq.n	8009a9e <HAL_UART_IRQHandler+0x5fa>
 8009a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fe54 	bl	800a744 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a9c:	e016      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d010      	beq.n	8009acc <HAL_UART_IRQHandler+0x628>
 8009aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	da0c      	bge.n	8009acc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fe3c 	bl	800a730 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ab8:	e008      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
      return;
 8009aba:	bf00      	nop
 8009abc:	e006      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
    return;
 8009abe:	bf00      	nop
 8009ac0:	e004      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
      return;
 8009ac2:	bf00      	nop
 8009ac4:	e002      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
      return;
 8009ac6:	bf00      	nop
 8009ac8:	e000      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
    return;
 8009aca:	bf00      	nop
  }
}
 8009acc:	37e8      	adds	r7, #232	; 0xe8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop

08009ad4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b18:	b08c      	sub	sp, #48	; 0x30
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	431a      	orrs	r2, r3
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4bab      	ldr	r3, [pc, #684]	; (8009df0 <UART_SetConfig+0x2dc>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	6812      	ldr	r2, [r2, #0]
 8009b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4aa0      	ldr	r2, [pc, #640]	; (8009df4 <UART_SetConfig+0x2e0>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009b8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b94:	430b      	orrs	r3, r1
 8009b96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	f023 010f 	bic.w	r1, r3, #15
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a91      	ldr	r2, [pc, #580]	; (8009df8 <UART_SetConfig+0x2e4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d125      	bne.n	8009c04 <UART_SetConfig+0xf0>
 8009bb8:	4b90      	ldr	r3, [pc, #576]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbe:	f003 0303 	and.w	r3, r3, #3
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d81a      	bhi.n	8009bfc <UART_SetConfig+0xe8>
 8009bc6:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <UART_SetConfig+0xb8>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009bdd 	.word	0x08009bdd
 8009bd0:	08009bed 	.word	0x08009bed
 8009bd4:	08009be5 	.word	0x08009be5
 8009bd8:	08009bf5 	.word	0x08009bf5
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be2:	e0d6      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009be4:	2302      	movs	r3, #2
 8009be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bea:	e0d2      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009bec:	2304      	movs	r3, #4
 8009bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bf2:	e0ce      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009bf4:	2308      	movs	r3, #8
 8009bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bfa:	e0ca      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c02:	e0c6      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a7d      	ldr	r2, [pc, #500]	; (8009e00 <UART_SetConfig+0x2ec>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d138      	bne.n	8009c80 <UART_SetConfig+0x16c>
 8009c0e:	4b7b      	ldr	r3, [pc, #492]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c14:	f003 030c 	and.w	r3, r3, #12
 8009c18:	2b0c      	cmp	r3, #12
 8009c1a:	d82d      	bhi.n	8009c78 <UART_SetConfig+0x164>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x110>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c59 	.word	0x08009c59
 8009c28:	08009c79 	.word	0x08009c79
 8009c2c:	08009c79 	.word	0x08009c79
 8009c30:	08009c79 	.word	0x08009c79
 8009c34:	08009c69 	.word	0x08009c69
 8009c38:	08009c79 	.word	0x08009c79
 8009c3c:	08009c79 	.word	0x08009c79
 8009c40:	08009c79 	.word	0x08009c79
 8009c44:	08009c61 	.word	0x08009c61
 8009c48:	08009c79 	.word	0x08009c79
 8009c4c:	08009c79 	.word	0x08009c79
 8009c50:	08009c79 	.word	0x08009c79
 8009c54:	08009c71 	.word	0x08009c71
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c5e:	e098      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c60:	2302      	movs	r3, #2
 8009c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c66:	e094      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c6e:	e090      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c70:	2308      	movs	r3, #8
 8009c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c76:	e08c      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c78:	2310      	movs	r3, #16
 8009c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c7e:	e088      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a5f      	ldr	r2, [pc, #380]	; (8009e04 <UART_SetConfig+0x2f0>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d125      	bne.n	8009cd6 <UART_SetConfig+0x1c2>
 8009c8a:	4b5c      	ldr	r3, [pc, #368]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c94:	2b30      	cmp	r3, #48	; 0x30
 8009c96:	d016      	beq.n	8009cc6 <UART_SetConfig+0x1b2>
 8009c98:	2b30      	cmp	r3, #48	; 0x30
 8009c9a:	d818      	bhi.n	8009cce <UART_SetConfig+0x1ba>
 8009c9c:	2b20      	cmp	r3, #32
 8009c9e:	d00a      	beq.n	8009cb6 <UART_SetConfig+0x1a2>
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	d814      	bhi.n	8009cce <UART_SetConfig+0x1ba>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <UART_SetConfig+0x19a>
 8009ca8:	2b10      	cmp	r3, #16
 8009caa:	d008      	beq.n	8009cbe <UART_SetConfig+0x1aa>
 8009cac:	e00f      	b.n	8009cce <UART_SetConfig+0x1ba>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cb4:	e06d      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cbc:	e069      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cbe:	2304      	movs	r3, #4
 8009cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cc4:	e065      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ccc:	e061      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cce:	2310      	movs	r3, #16
 8009cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cd4:	e05d      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a4b      	ldr	r2, [pc, #300]	; (8009e08 <UART_SetConfig+0x2f4>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d125      	bne.n	8009d2c <UART_SetConfig+0x218>
 8009ce0:	4b46      	ldr	r3, [pc, #280]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009cea:	2bc0      	cmp	r3, #192	; 0xc0
 8009cec:	d016      	beq.n	8009d1c <UART_SetConfig+0x208>
 8009cee:	2bc0      	cmp	r3, #192	; 0xc0
 8009cf0:	d818      	bhi.n	8009d24 <UART_SetConfig+0x210>
 8009cf2:	2b80      	cmp	r3, #128	; 0x80
 8009cf4:	d00a      	beq.n	8009d0c <UART_SetConfig+0x1f8>
 8009cf6:	2b80      	cmp	r3, #128	; 0x80
 8009cf8:	d814      	bhi.n	8009d24 <UART_SetConfig+0x210>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <UART_SetConfig+0x1f0>
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d008      	beq.n	8009d14 <UART_SetConfig+0x200>
 8009d02:	e00f      	b.n	8009d24 <UART_SetConfig+0x210>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d0a:	e042      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d12:	e03e      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d14:	2304      	movs	r3, #4
 8009d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d1a:	e03a      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d1c:	2308      	movs	r3, #8
 8009d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d22:	e036      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d24:	2310      	movs	r3, #16
 8009d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d2a:	e032      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a30      	ldr	r2, [pc, #192]	; (8009df4 <UART_SetConfig+0x2e0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d12a      	bne.n	8009d8c <UART_SetConfig+0x278>
 8009d36:	4b31      	ldr	r3, [pc, #196]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d44:	d01a      	beq.n	8009d7c <UART_SetConfig+0x268>
 8009d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d4a:	d81b      	bhi.n	8009d84 <UART_SetConfig+0x270>
 8009d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d50:	d00c      	beq.n	8009d6c <UART_SetConfig+0x258>
 8009d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d56:	d815      	bhi.n	8009d84 <UART_SetConfig+0x270>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <UART_SetConfig+0x250>
 8009d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d60:	d008      	beq.n	8009d74 <UART_SetConfig+0x260>
 8009d62:	e00f      	b.n	8009d84 <UART_SetConfig+0x270>
 8009d64:	2300      	movs	r3, #0
 8009d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d6a:	e012      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d72:	e00e      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d74:	2304      	movs	r3, #4
 8009d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d7a:	e00a      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d7c:	2308      	movs	r3, #8
 8009d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d82:	e006      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d84:	2310      	movs	r3, #16
 8009d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d8a:	e002      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a17      	ldr	r2, [pc, #92]	; (8009df4 <UART_SetConfig+0x2e0>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	f040 80a8 	bne.w	8009eee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009da2:	2b08      	cmp	r3, #8
 8009da4:	d834      	bhi.n	8009e10 <UART_SetConfig+0x2fc>
 8009da6:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <UART_SetConfig+0x298>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009e11 	.word	0x08009e11
 8009db4:	08009dd9 	.word	0x08009dd9
 8009db8:	08009e11 	.word	0x08009e11
 8009dbc:	08009ddf 	.word	0x08009ddf
 8009dc0:	08009e11 	.word	0x08009e11
 8009dc4:	08009e11 	.word	0x08009e11
 8009dc8:	08009e11 	.word	0x08009e11
 8009dcc:	08009de7 	.word	0x08009de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dd0:	f7fd f9d2 	bl	8007178 <HAL_RCC_GetPCLK1Freq>
 8009dd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dd6:	e021      	b.n	8009e1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <UART_SetConfig+0x2f8>)
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ddc:	e01e      	b.n	8009e1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dde:	f7fd f95f 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 8009de2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009de4:	e01a      	b.n	8009e1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009dec:	e016      	b.n	8009e1c <UART_SetConfig+0x308>
 8009dee:	bf00      	nop
 8009df0:	cfff69f3 	.word	0xcfff69f3
 8009df4:	40008000 	.word	0x40008000
 8009df8:	40013800 	.word	0x40013800
 8009dfc:	40021000 	.word	0x40021000
 8009e00:	40004400 	.word	0x40004400
 8009e04:	40004800 	.word	0x40004800
 8009e08:	40004c00 	.word	0x40004c00
 8009e0c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009e1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 812a 	beq.w	800a078 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	4a9e      	ldr	r2, [pc, #632]	; (800a0a4 <UART_SetConfig+0x590>)
 8009e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e36:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	005b      	lsls	r3, r3, #1
 8009e40:	4413      	add	r3, r2
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d305      	bcc.n	8009e54 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d903      	bls.n	8009e5c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e5a:	e10d      	b.n	800a078 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	2200      	movs	r2, #0
 8009e60:	60bb      	str	r3, [r7, #8]
 8009e62:	60fa      	str	r2, [r7, #12]
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	4a8e      	ldr	r2, [pc, #568]	; (800a0a4 <UART_SetConfig+0x590>)
 8009e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	2200      	movs	r2, #0
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e7e:	f7f6 fe45 	bl	8000b0c <__aeabi_uldivmod>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	4610      	mov	r0, r2
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f04f 0200 	mov.w	r2, #0
 8009e8e:	f04f 0300 	mov.w	r3, #0
 8009e92:	020b      	lsls	r3, r1, #8
 8009e94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e98:	0202      	lsls	r2, r0, #8
 8009e9a:	6979      	ldr	r1, [r7, #20]
 8009e9c:	6849      	ldr	r1, [r1, #4]
 8009e9e:	0849      	lsrs	r1, r1, #1
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	eb12 0804 	adds.w	r8, r2, r4
 8009eaa:	eb43 0905 	adc.w	r9, r3, r5
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	469a      	mov	sl, r3
 8009eb6:	4693      	mov	fp, r2
 8009eb8:	4652      	mov	r2, sl
 8009eba:	465b      	mov	r3, fp
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	f7f6 fe24 	bl	8000b0c <__aeabi_uldivmod>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4613      	mov	r3, r2
 8009eca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ed2:	d308      	bcc.n	8009ee6 <UART_SetConfig+0x3d2>
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eda:	d204      	bcs.n	8009ee6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6a3a      	ldr	r2, [r7, #32]
 8009ee2:	60da      	str	r2, [r3, #12]
 8009ee4:	e0c8      	b.n	800a078 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009eec:	e0c4      	b.n	800a078 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ef6:	d167      	bne.n	8009fc8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009efc:	2b08      	cmp	r3, #8
 8009efe:	d828      	bhi.n	8009f52 <UART_SetConfig+0x43e>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <UART_SetConfig+0x3f4>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	08009f2d 	.word	0x08009f2d
 8009f0c:	08009f35 	.word	0x08009f35
 8009f10:	08009f3d 	.word	0x08009f3d
 8009f14:	08009f53 	.word	0x08009f53
 8009f18:	08009f43 	.word	0x08009f43
 8009f1c:	08009f53 	.word	0x08009f53
 8009f20:	08009f53 	.word	0x08009f53
 8009f24:	08009f53 	.word	0x08009f53
 8009f28:	08009f4b 	.word	0x08009f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f2c:	f7fd f924 	bl	8007178 <HAL_RCC_GetPCLK1Freq>
 8009f30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f32:	e014      	b.n	8009f5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f34:	f7fd f936 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8009f38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f3a:	e010      	b.n	8009f5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f3c:	4b5a      	ldr	r3, [pc, #360]	; (800a0a8 <UART_SetConfig+0x594>)
 8009f3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f40:	e00d      	b.n	8009f5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f42:	f7fd f8ad 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 8009f46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f48:	e009      	b.n	8009f5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f50:	e005      	b.n	8009f5e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 8089 	beq.w	800a078 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	4a4e      	ldr	r2, [pc, #312]	; (800a0a4 <UART_SetConfig+0x590>)
 8009f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f78:	005a      	lsls	r2, r3, #1
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	085b      	lsrs	r3, r3, #1
 8009f80:	441a      	add	r2, r3
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	2b0f      	cmp	r3, #15
 8009f90:	d916      	bls.n	8009fc0 <UART_SetConfig+0x4ac>
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f98:	d212      	bcs.n	8009fc0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f023 030f 	bic.w	r3, r3, #15
 8009fa2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	085b      	lsrs	r3, r3, #1
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	f003 0307 	and.w	r3, r3, #7
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	8bfb      	ldrh	r3, [r7, #30]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	8bfa      	ldrh	r2, [r7, #30]
 8009fbc:	60da      	str	r2, [r3, #12]
 8009fbe:	e05b      	b.n	800a078 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009fc6:	e057      	b.n	800a078 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009fcc:	2b08      	cmp	r3, #8
 8009fce:	d828      	bhi.n	800a022 <UART_SetConfig+0x50e>
 8009fd0:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <UART_SetConfig+0x4c4>)
 8009fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd6:	bf00      	nop
 8009fd8:	08009ffd 	.word	0x08009ffd
 8009fdc:	0800a005 	.word	0x0800a005
 8009fe0:	0800a00d 	.word	0x0800a00d
 8009fe4:	0800a023 	.word	0x0800a023
 8009fe8:	0800a013 	.word	0x0800a013
 8009fec:	0800a023 	.word	0x0800a023
 8009ff0:	0800a023 	.word	0x0800a023
 8009ff4:	0800a023 	.word	0x0800a023
 8009ff8:	0800a01b 	.word	0x0800a01b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ffc:	f7fd f8bc 	bl	8007178 <HAL_RCC_GetPCLK1Freq>
 800a000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a002:	e014      	b.n	800a02e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a004:	f7fd f8ce 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 800a008:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a00a:	e010      	b.n	800a02e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a00c:	4b26      	ldr	r3, [pc, #152]	; (800a0a8 <UART_SetConfig+0x594>)
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a010:	e00d      	b.n	800a02e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a012:	f7fd f845 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 800a016:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a018:	e009      	b.n	800a02e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a01a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a020:	e005      	b.n	800a02e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a022:	2300      	movs	r3, #0
 800a024:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a02c:	bf00      	nop
    }

    if (pclk != 0U)
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d021      	beq.n	800a078 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	4a1a      	ldr	r2, [pc, #104]	; (800a0a4 <UART_SetConfig+0x590>)
 800a03a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a03e:	461a      	mov	r2, r3
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	fbb3 f2f2 	udiv	r2, r3, r2
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	441a      	add	r2, r3
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	fbb2 f3f3 	udiv	r3, r2, r3
 800a056:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	2b0f      	cmp	r3, #15
 800a05c:	d909      	bls.n	800a072 <UART_SetConfig+0x55e>
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a064:	d205      	bcs.n	800a072 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	b29a      	uxth	r2, r3
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	60da      	str	r2, [r3, #12]
 800a070:	e002      	b.n	800a078 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2201      	movs	r2, #1
 800a084:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2200      	movs	r2, #0
 800a092:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a094:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3730      	adds	r7, #48	; 0x30
 800a09c:	46bd      	mov	sp, r7
 800a09e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0a2:	bf00      	nop
 800a0a4:	0800e8b0 	.word	0x0800e8b0
 800a0a8:	00f42400 	.word	0x00f42400

0800a0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0da:	f003 0302 	and.w	r3, r3, #2
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	f003 0304 	and.w	r3, r3, #4
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00a      	beq.n	800a11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11e:	f003 0308 	and.w	r3, r3, #8
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00a      	beq.n	800a13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a140:	f003 0310 	and.w	r3, r3, #16
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00a      	beq.n	800a180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01a      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1aa:	d10a      	bne.n	800a1c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	605a      	str	r2, [r3, #4]
  }
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af02      	add	r7, sp, #8
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a200:	f7f9 f9f0 	bl	80035e4 <HAL_GetTick>
 800a204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0308 	and.w	r3, r3, #8
 800a210:	2b08      	cmp	r3, #8
 800a212:	d10e      	bne.n	800a232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f82f 	bl	800a286 <UART_WaitOnFlagUntilTimeout>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e025      	b.n	800a27e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d10e      	bne.n	800a25e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f819 	bl	800a286 <UART_WaitOnFlagUntilTimeout>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e00f      	b.n	800a27e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2220      	movs	r2, #32
 800a262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b09c      	sub	sp, #112	; 0x70
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	603b      	str	r3, [r7, #0]
 800a292:	4613      	mov	r3, r2
 800a294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a296:	e0a9      	b.n	800a3ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29e:	f000 80a5 	beq.w	800a3ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2a2:	f7f9 f99f 	bl	80035e4 <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d302      	bcc.n	800a2b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a2b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d140      	bne.n	800a33a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2c0:	e853 3f00 	ldrex	r3, [r3]
 800a2c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2cc:	667b      	str	r3, [r7, #100]	; 0x64
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a2dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e6      	bne.n	800a2b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	663b      	str	r3, [r7, #96]	; 0x60
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3308      	adds	r3, #8
 800a308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a30a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a30c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e5      	bne.n	800a2ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2220      	movs	r2, #32
 800a322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2220      	movs	r2, #32
 800a32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e069      	b.n	800a40e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b00      	cmp	r3, #0
 800a346:	d051      	beq.n	800a3ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a356:	d149      	bne.n	800a3ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a360:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	e853 3f00 	ldrex	r3, [r3]
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a376:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a380:	637b      	str	r3, [r7, #52]	; 0x34
 800a382:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e6      	bne.n	800a362 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3308      	adds	r3, #8
 800a39a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f023 0301 	bic.w	r3, r3, #1
 800a3aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3b4:	623a      	str	r2, [r7, #32]
 800a3b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	69f9      	ldr	r1, [r7, #28]
 800a3ba:	6a3a      	ldr	r2, [r7, #32]
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e5      	bne.n	800a394 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e010      	b.n	800a40e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	69da      	ldr	r2, [r3, #28]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	bf0c      	ite	eq
 800a3fc:	2301      	moveq	r3, #1
 800a3fe:	2300      	movne	r3, #0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	461a      	mov	r2, r3
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	429a      	cmp	r2, r3
 800a408:	f43f af46 	beq.w	800a298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3770      	adds	r7, #112	; 0x70
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a416:	b480      	push	{r7}
 800a418:	b08f      	sub	sp, #60	; 0x3c
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	e853 3f00 	ldrex	r3, [r3]
 800a42a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a432:	637b      	str	r3, [r7, #52]	; 0x34
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	461a      	mov	r2, r3
 800a43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a43e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a444:	e841 2300 	strex	r3, r2, [r1]
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e6      	bne.n	800a41e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3308      	adds	r3, #8
 800a456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	e853 3f00 	ldrex	r3, [r3]
 800a45e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a466:	633b      	str	r3, [r7, #48]	; 0x30
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3308      	adds	r3, #8
 800a46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a470:	61ba      	str	r2, [r7, #24]
 800a472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a474:	6979      	ldr	r1, [r7, #20]
 800a476:	69ba      	ldr	r2, [r7, #24]
 800a478:	e841 2300 	strex	r3, r2, [r1]
 800a47c:	613b      	str	r3, [r7, #16]
   return(result);
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1e5      	bne.n	800a450 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2220      	movs	r2, #32
 800a488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a48c:	bf00      	nop
 800a48e:	373c      	adds	r7, #60	; 0x3c
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b095      	sub	sp, #84	; 0x54
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a8:	e853 3f00 	ldrex	r3, [r3]
 800a4ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4be:	643b      	str	r3, [r7, #64]	; 0x40
 800a4c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4c6:	e841 2300 	strex	r3, r2, [r1]
 800a4ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e6      	bne.n	800a4a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4da:	6a3b      	ldr	r3, [r7, #32]
 800a4dc:	e853 3f00 	ldrex	r3, [r3]
 800a4e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4e8:	f023 0301 	bic.w	r3, r3, #1
 800a4ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4fe:	e841 2300 	strex	r3, r2, [r1]
 800a502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1e3      	bne.n	800a4d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d118      	bne.n	800a544 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	e853 3f00 	ldrex	r3, [r3]
 800a51e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f023 0310 	bic.w	r3, r3, #16
 800a526:	647b      	str	r3, [r7, #68]	; 0x44
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	461a      	mov	r2, r3
 800a52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	6979      	ldr	r1, [r7, #20]
 800a536:	69ba      	ldr	r2, [r7, #24]
 800a538:	e841 2300 	strex	r3, r2, [r1]
 800a53c:	613b      	str	r3, [r7, #16]
   return(result);
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e6      	bne.n	800a512 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2220      	movs	r2, #32
 800a548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a558:	bf00      	nop
 800a55a:	3754      	adds	r7, #84	; 0x54
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b090      	sub	sp, #64	; 0x40
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0320 	and.w	r3, r3, #32
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d137      	bne.n	800a5f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a582:	2200      	movs	r2, #0
 800a584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3308      	adds	r3, #8
 800a58e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	e853 3f00 	ldrex	r3, [r3]
 800a596:	623b      	str	r3, [r7, #32]
   return(result);
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a59e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5a8:	633a      	str	r2, [r7, #48]	; 0x30
 800a5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b0:	e841 2300 	strex	r3, r2, [r1]
 800a5b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1e5      	bne.n	800a588 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	e853 3f00 	ldrex	r3, [r3]
 800a5c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5da:	61fb      	str	r3, [r7, #28]
 800a5dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5de:	69b9      	ldr	r1, [r7, #24]
 800a5e0:	69fa      	ldr	r2, [r7, #28]
 800a5e2:	e841 2300 	strex	r3, r2, [r1]
 800a5e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e6      	bne.n	800a5bc <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5ee:	e002      	b.n	800a5f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a5f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a5f2:	f7f7 fc0b 	bl	8001e0c <HAL_UART_TxCpltCallback>
}
 800a5f6:	bf00      	nop
 800a5f8:	3740      	adds	r7, #64	; 0x40
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b084      	sub	sp, #16
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f7ff fa61 	bl	8009ad4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a612:	bf00      	nop
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b086      	sub	sp, #24
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a626:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a62e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a636:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a642:	2b80      	cmp	r3, #128	; 0x80
 800a644:	d109      	bne.n	800a65a <UART_DMAError+0x40>
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	2b21      	cmp	r3, #33	; 0x21
 800a64a:	d106      	bne.n	800a65a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a654:	6978      	ldr	r0, [r7, #20]
 800a656:	f7ff fede 	bl	800a416 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a664:	2b40      	cmp	r3, #64	; 0x40
 800a666:	d109      	bne.n	800a67c <UART_DMAError+0x62>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2b22      	cmp	r3, #34	; 0x22
 800a66c:	d106      	bne.n	800a67c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2200      	movs	r2, #0
 800a672:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a676:	6978      	ldr	r0, [r7, #20]
 800a678:	f7ff ff0e 	bl	800a498 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a682:	f043 0210 	orr.w	r2, r3, #16
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a68c:	6978      	ldr	r0, [r7, #20]
 800a68e:	f7ff fa2b 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a692:	bf00      	nop
 800a694:	3718      	adds	r7, #24
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b084      	sub	sp, #16
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f7ff fa15 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6be:	bf00      	nop
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b088      	sub	sp, #32
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	e853 3f00 	ldrex	r3, [r3]
 800a6da:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6e2:	61fb      	str	r3, [r7, #28]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	61bb      	str	r3, [r7, #24]
 800a6ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f0:	6979      	ldr	r1, [r7, #20]
 800a6f2:	69ba      	ldr	r2, [r7, #24]
 800a6f4:	e841 2300 	strex	r3, r2, [r1]
 800a6f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1e6      	bne.n	800a6ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2220      	movs	r2, #32
 800a704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7f7 fb7c 	bl	8001e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a714:	bf00      	nop
 800a716:	3720      	adds	r7, #32
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a766:	2b01      	cmp	r3, #1
 800a768:	d101      	bne.n	800a76e <HAL_UARTEx_DisableFifoMode+0x16>
 800a76a:	2302      	movs	r3, #2
 800a76c:	e027      	b.n	800a7be <HAL_UARTEx_DisableFifoMode+0x66>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2224      	movs	r2, #36	; 0x24
 800a77a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 0201 	bic.w	r2, r2, #1
 800a794:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a79c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d101      	bne.n	800a7e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7de:	2302      	movs	r3, #2
 800a7e0:	e02d      	b.n	800a83e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2224      	movs	r2, #36	; 0x24
 800a7ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 0201 	bic.w	r2, r2, #1
 800a808:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f850 	bl	800a8c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2220      	movs	r2, #32
 800a830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b084      	sub	sp, #16
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a856:	2b01      	cmp	r3, #1
 800a858:	d101      	bne.n	800a85e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e02d      	b.n	800a8ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2224      	movs	r2, #36	; 0x24
 800a86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f022 0201 	bic.w	r2, r2, #1
 800a884:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f812 	bl	800a8c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d108      	bne.n	800a8e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8e4:	e031      	b.n	800a94a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8e6:	2308      	movs	r3, #8
 800a8e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8ea:	2308      	movs	r3, #8
 800a8ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	0e5b      	lsrs	r3, r3, #25
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f003 0307 	and.w	r3, r3, #7
 800a8fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	0f5b      	lsrs	r3, r3, #29
 800a906:	b2db      	uxtb	r3, r3
 800a908:	f003 0307 	and.w	r3, r3, #7
 800a90c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	7b3a      	ldrb	r2, [r7, #12]
 800a912:	4911      	ldr	r1, [pc, #68]	; (800a958 <UARTEx_SetNbDataToProcess+0x94>)
 800a914:	5c8a      	ldrb	r2, [r1, r2]
 800a916:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a91a:	7b3a      	ldrb	r2, [r7, #12]
 800a91c:	490f      	ldr	r1, [pc, #60]	; (800a95c <UARTEx_SetNbDataToProcess+0x98>)
 800a91e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a920:	fb93 f3f2 	sdiv	r3, r3, r2
 800a924:	b29a      	uxth	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	7b7a      	ldrb	r2, [r7, #13]
 800a930:	4909      	ldr	r1, [pc, #36]	; (800a958 <UARTEx_SetNbDataToProcess+0x94>)
 800a932:	5c8a      	ldrb	r2, [r1, r2]
 800a934:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a938:	7b7a      	ldrb	r2, [r7, #13]
 800a93a:	4908      	ldr	r1, [pc, #32]	; (800a95c <UARTEx_SetNbDataToProcess+0x98>)
 800a93c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a93e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a94a:	bf00      	nop
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	0800e8c8 	.word	0x0800e8c8
 800a95c:	0800e8d0 	.word	0x0800e8d0

0800a960 <__NVIC_SetPriority>:
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	6039      	str	r1, [r7, #0]
 800a96a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a96c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a970:	2b00      	cmp	r3, #0
 800a972:	db0a      	blt.n	800a98a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	b2da      	uxtb	r2, r3
 800a978:	490c      	ldr	r1, [pc, #48]	; (800a9ac <__NVIC_SetPriority+0x4c>)
 800a97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a97e:	0112      	lsls	r2, r2, #4
 800a980:	b2d2      	uxtb	r2, r2
 800a982:	440b      	add	r3, r1
 800a984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a988:	e00a      	b.n	800a9a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	4908      	ldr	r1, [pc, #32]	; (800a9b0 <__NVIC_SetPriority+0x50>)
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	f003 030f 	and.w	r3, r3, #15
 800a996:	3b04      	subs	r3, #4
 800a998:	0112      	lsls	r2, r2, #4
 800a99a:	b2d2      	uxtb	r2, r2
 800a99c:	440b      	add	r3, r1
 800a99e:	761a      	strb	r2, [r3, #24]
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	e000e100 	.word	0xe000e100
 800a9b0:	e000ed00 	.word	0xe000ed00

0800a9b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a9b8:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <SysTick_Handler+0x1c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a9bc:	f002 fff4 	bl	800d9a8 <xTaskGetSchedulerState>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d001      	beq.n	800a9ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a9c6:	f001 f8b7 	bl	800bb38 <xPortSysTickHandler>
  }
}
 800a9ca:	bf00      	nop
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	e000e010 	.word	0xe000e010

0800a9d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a9d8:	2100      	movs	r1, #0
 800a9da:	f06f 0004 	mvn.w	r0, #4
 800a9de:	f7ff ffbf 	bl	800a960 <__NVIC_SetPriority>
#endif
}
 800a9e2:	bf00      	nop
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9ee:	f3ef 8305 	mrs	r3, IPSR
 800a9f2:	603b      	str	r3, [r7, #0]
  return(result);
 800a9f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d003      	beq.n	800aa02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a9fa:	f06f 0305 	mvn.w	r3, #5
 800a9fe:	607b      	str	r3, [r7, #4]
 800aa00:	e00c      	b.n	800aa1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aa02:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <osKernelInitialize+0x44>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d105      	bne.n	800aa16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aa0a:	4b08      	ldr	r3, [pc, #32]	; (800aa2c <osKernelInitialize+0x44>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	607b      	str	r3, [r7, #4]
 800aa14:	e002      	b.n	800aa1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aa16:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa1c:	687b      	ldr	r3, [r7, #4]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	20000948 	.word	0x20000948

0800aa30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa36:	f3ef 8305 	mrs	r3, IPSR
 800aa3a:	603b      	str	r3, [r7, #0]
  return(result);
 800aa3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <osKernelStart+0x1a>
    stat = osErrorISR;
 800aa42:	f06f 0305 	mvn.w	r3, #5
 800aa46:	607b      	str	r3, [r7, #4]
 800aa48:	e010      	b.n	800aa6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aa4a:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <osKernelStart+0x48>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d109      	bne.n	800aa66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aa52:	f7ff ffbf 	bl	800a9d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aa56:	4b08      	ldr	r3, [pc, #32]	; (800aa78 <osKernelStart+0x48>)
 800aa58:	2202      	movs	r2, #2
 800aa5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa5c:	f002 fa76 	bl	800cf4c <vTaskStartScheduler>
      stat = osOK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	607b      	str	r3, [r7, #4]
 800aa64:	e002      	b.n	800aa6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa6c:	687b      	ldr	r3, [r7, #4]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	20000948 	.word	0x20000948

0800aa7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08e      	sub	sp, #56	; 0x38
 800aa80:	af04      	add	r7, sp, #16
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa8c:	f3ef 8305 	mrs	r3, IPSR
 800aa90:	617b      	str	r3, [r7, #20]
  return(result);
 800aa92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d17e      	bne.n	800ab96 <osThreadNew+0x11a>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d07b      	beq.n	800ab96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aa9e:	2380      	movs	r3, #128	; 0x80
 800aaa0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aaa2:	2318      	movs	r3, #24
 800aaa4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800aaaa:	f04f 33ff 	mov.w	r3, #4294967295
 800aaae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d045      	beq.n	800ab42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <osThreadNew+0x48>
        name = attr->name;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d008      	beq.n	800aaea <osThreadNew+0x6e>
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	2b38      	cmp	r3, #56	; 0x38
 800aadc:	d805      	bhi.n	800aaea <osThreadNew+0x6e>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <osThreadNew+0x72>
        return (NULL);
 800aaea:	2300      	movs	r3, #0
 800aaec:	e054      	b.n	800ab98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d003      	beq.n	800aafe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	089b      	lsrs	r3, r3, #2
 800aafc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00e      	beq.n	800ab24 <osThreadNew+0xa8>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	2baf      	cmp	r3, #175	; 0xaf
 800ab0c:	d90a      	bls.n	800ab24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d006      	beq.n	800ab24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d002      	beq.n	800ab24 <osThreadNew+0xa8>
        mem = 1;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	61bb      	str	r3, [r7, #24]
 800ab22:	e010      	b.n	800ab46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10c      	bne.n	800ab46 <osThreadNew+0xca>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d108      	bne.n	800ab46 <osThreadNew+0xca>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d104      	bne.n	800ab46 <osThreadNew+0xca>
          mem = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	61bb      	str	r3, [r7, #24]
 800ab40:	e001      	b.n	800ab46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d110      	bne.n	800ab6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab54:	9202      	str	r2, [sp, #8]
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	6a3a      	ldr	r2, [r7, #32]
 800ab60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f002 f800 	bl	800cb68 <xTaskCreateStatic>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	613b      	str	r3, [r7, #16]
 800ab6c:	e013      	b.n	800ab96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d110      	bne.n	800ab96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	f107 0310 	add.w	r3, r7, #16
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f002 f84b 	bl	800cc22 <xTaskCreate>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d001      	beq.n	800ab96 <osThreadNew+0x11a>
            hTask = NULL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab96:	693b      	ldr	r3, [r7, #16]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3728      	adds	r7, #40	; 0x28
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <osThreadFlagsSet+0x1a>
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	da03      	bge.n	800abc2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800abba:	f06f 0303 	mvn.w	r3, #3
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e035      	b.n	800ac2e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800abc2:	f04f 33ff 	mov.w	r3, #4294967295
 800abc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abc8:	f3ef 8305 	mrs	r3, IPSR
 800abcc:	613b      	str	r3, [r7, #16]
  return(result);
 800abce:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01f      	beq.n	800ac14 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800abd4:	2300      	movs	r3, #0
 800abd6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800abd8:	f107 0308 	add.w	r3, r7, #8
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	2300      	movs	r3, #0
 800abe0:	2201      	movs	r2, #1
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6978      	ldr	r0, [r7, #20]
 800abe6:	f003 f88b 	bl	800dd00 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800abea:	f107 030c 	add.w	r3, r7, #12
 800abee:	2200      	movs	r2, #0
 800abf0:	9200      	str	r2, [sp, #0]
 800abf2:	2200      	movs	r2, #0
 800abf4:	2100      	movs	r1, #0
 800abf6:	6978      	ldr	r0, [r7, #20]
 800abf8:	f003 f882 	bl	800dd00 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d015      	beq.n	800ac2e <osThreadFlagsSet+0x8e>
 800ac02:	4b0d      	ldr	r3, [pc, #52]	; (800ac38 <osThreadFlagsSet+0x98>)
 800ac04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac08:	601a      	str	r2, [r3, #0]
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	e00c      	b.n	800ac2e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ac14:	2300      	movs	r3, #0
 800ac16:	2201      	movs	r2, #1
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6978      	ldr	r0, [r7, #20]
 800ac1c:	f002 ffb0 	bl	800db80 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ac20:	f107 030c 	add.w	r3, r7, #12
 800ac24:	2200      	movs	r2, #0
 800ac26:	2100      	movs	r1, #0
 800ac28:	6978      	ldr	r0, [r7, #20]
 800ac2a:	f002 ffa9 	bl	800db80 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3718      	adds	r7, #24
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	e000ed04 	.word	0xe000ed04

0800ac3c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08c      	sub	sp, #48	; 0x30
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac48:	f3ef 8305 	mrs	r3, IPSR
 800ac4c:	617b      	str	r3, [r7, #20]
  return(result);
 800ac4e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800ac54:	f06f 0305 	mvn.w	r3, #5
 800ac58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac5a:	e06b      	b.n	800ad34 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	da03      	bge.n	800ac6a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800ac62:	f06f 0303 	mvn.w	r3, #3
 800ac66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac68:	e064      	b.n	800ad34 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <osThreadFlagsWait+0x3e>
      clear = 0U;
 800ac74:	2300      	movs	r3, #0
 800ac76:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac78:	e001      	b.n	800ac7e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800ac86:	f002 fab5 	bl	800d1f4 <xTaskGetTickCount>
 800ac8a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ac8c:	f107 0210 	add.w	r2, r7, #16
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac94:	2000      	movs	r0, #0
 800ac96:	f002 ff13 	bl	800dac0 <xTaskNotifyWait>
 800ac9a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d137      	bne.n	800ad12 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800aca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	4013      	ands	r3, r2
 800aca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acae:	4313      	orrs	r3, r2
 800acb0:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	f003 0301 	and.w	r3, r3, #1
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00c      	beq.n	800acd6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	4013      	ands	r3, r2
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d032      	beq.n	800ad2e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10f      	bne.n	800acee <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800acce:	f06f 0302 	mvn.w	r3, #2
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800acd4:	e02e      	b.n	800ad34 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acda:	4013      	ands	r3, r2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d128      	bne.n	800ad32 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d103      	bne.n	800acee <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ace6:	f06f 0302 	mvn.w	r3, #2
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800acec:	e022      	b.n	800ad34 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800acee:	f002 fa81 	bl	800d1f4 <xTaskGetTickCount>
 800acf2:	4602      	mov	r2, r0
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d902      	bls.n	800ad08 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	627b      	str	r3, [r7, #36]	; 0x24
 800ad06:	e00e      	b.n	800ad26 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800ad08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad10:	e009      	b.n	800ad26 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800ad18:	f06f 0302 	mvn.w	r3, #2
 800ad1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad1e:	e002      	b.n	800ad26 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ad20:	f06f 0301 	mvn.w	r3, #1
 800ad24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1af      	bne.n	800ac8c <osThreadFlagsWait+0x50>
 800ad2c:	e002      	b.n	800ad34 <osThreadFlagsWait+0xf8>
            break;
 800ad2e:	bf00      	nop
 800ad30:	e000      	b.n	800ad34 <osThreadFlagsWait+0xf8>
            break;
 800ad32:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3730      	adds	r7, #48	; 0x30
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad46:	f3ef 8305 	mrs	r3, IPSR
 800ad4a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <osDelay+0x1c>
    stat = osErrorISR;
 800ad52:	f06f 0305 	mvn.w	r3, #5
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	e007      	b.n	800ad6a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <osDelay+0x2c>
      vTaskDelay(ticks);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f002 f8bd 	bl	800cee4 <vTaskDelay>
    }
  }

  return (stat);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08a      	sub	sp, #40	; 0x28
 800ad78:	af02      	add	r7, sp, #8
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad84:	f3ef 8305 	mrs	r3, IPSR
 800ad88:	613b      	str	r3, [r7, #16]
  return(result);
 800ad8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d15f      	bne.n	800ae50 <osMessageQueueNew+0xdc>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d05c      	beq.n	800ae50 <osMessageQueueNew+0xdc>
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d059      	beq.n	800ae50 <osMessageQueueNew+0xdc>
    mem = -1;
 800ad9c:	f04f 33ff 	mov.w	r3, #4294967295
 800ada0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d029      	beq.n	800adfc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d012      	beq.n	800add6 <osMessageQueueNew+0x62>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	2b4f      	cmp	r3, #79	; 0x4f
 800adb6:	d90e      	bls.n	800add6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00a      	beq.n	800add6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	695a      	ldr	r2, [r3, #20]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	fb01 f303 	mul.w	r3, r1, r3
 800adcc:	429a      	cmp	r2, r3
 800adce:	d302      	bcc.n	800add6 <osMessageQueueNew+0x62>
        mem = 1;
 800add0:	2301      	movs	r3, #1
 800add2:	61bb      	str	r3, [r7, #24]
 800add4:	e014      	b.n	800ae00 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d110      	bne.n	800ae00 <osMessageQueueNew+0x8c>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10c      	bne.n	800ae00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800adea:	2b00      	cmp	r3, #0
 800adec:	d108      	bne.n	800ae00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d104      	bne.n	800ae00 <osMessageQueueNew+0x8c>
          mem = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	61bb      	str	r3, [r7, #24]
 800adfa:	e001      	b.n	800ae00 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d10b      	bne.n	800ae1e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691a      	ldr	r2, [r3, #16]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	2100      	movs	r1, #0
 800ae10:	9100      	str	r1, [sp, #0]
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f001 f86b 	bl	800bef0 <xQueueGenericCreateStatic>
 800ae1a:	61f8      	str	r0, [r7, #28]
 800ae1c:	e008      	b.n	800ae30 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d105      	bne.n	800ae30 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ae24:	2200      	movs	r2, #0
 800ae26:	68b9      	ldr	r1, [r7, #8]
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f001 f8d9 	bl	800bfe0 <xQueueGenericCreate>
 800ae2e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00c      	beq.n	800ae50 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d003      	beq.n	800ae44 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	617b      	str	r3, [r7, #20]
 800ae42:	e001      	b.n	800ae48 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ae44:	2300      	movs	r3, #0
 800ae46:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ae48:	6979      	ldr	r1, [r7, #20]
 800ae4a:	69f8      	ldr	r0, [r7, #28]
 800ae4c:	f001 fe2e 	bl	800caac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ae50:	69fb      	ldr	r3, [r7, #28]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3720      	adds	r7, #32
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae72:	f3ef 8305 	mrs	r3, IPSR
 800ae76:	617b      	str	r3, [r7, #20]
  return(result);
 800ae78:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d028      	beq.n	800aed0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d005      	beq.n	800ae90 <osMessageQueueGet+0x34>
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <osMessageQueueGet+0x34>
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d003      	beq.n	800ae98 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ae90:	f06f 0303 	mvn.w	r3, #3
 800ae94:	61fb      	str	r3, [r7, #28]
 800ae96:	e037      	b.n	800af08 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ae9c:	f107 0310 	add.w	r3, r7, #16
 800aea0:	461a      	mov	r2, r3
 800aea2:	68b9      	ldr	r1, [r7, #8]
 800aea4:	69b8      	ldr	r0, [r7, #24]
 800aea6:	f001 fc35 	bl	800c714 <xQueueReceiveFromISR>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d003      	beq.n	800aeb8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800aeb0:	f06f 0302 	mvn.w	r3, #2
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	e027      	b.n	800af08 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d024      	beq.n	800af08 <osMessageQueueGet+0xac>
 800aebe:	4b15      	ldr	r3, [pc, #84]	; (800af14 <osMessageQueueGet+0xb8>)
 800aec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	e01b      	b.n	800af08 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d002      	beq.n	800aedc <osMessageQueueGet+0x80>
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d103      	bne.n	800aee4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800aedc:	f06f 0303 	mvn.w	r3, #3
 800aee0:	61fb      	str	r3, [r7, #28]
 800aee2:	e011      	b.n	800af08 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	69b8      	ldr	r0, [r7, #24]
 800aeea:	f001 fb33 	bl	800c554 <xQueueReceive>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d009      	beq.n	800af08 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aefa:	f06f 0301 	mvn.w	r3, #1
 800aefe:	61fb      	str	r3, [r7, #28]
 800af00:	e002      	b.n	800af08 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800af02:	f06f 0302 	mvn.w	r3, #2
 800af06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800af08:	69fb      	ldr	r3, [r7, #28]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3720      	adds	r7, #32
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	e000ed04 	.word	0xe000ed04

0800af18 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08a      	sub	sp, #40	; 0x28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af24:	f3ef 8305 	mrs	r3, IPSR
 800af28:	613b      	str	r3, [r7, #16]
  return(result);
 800af2a:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <osMemoryPoolNew+0x1e>
    mp = NULL;
 800af30:	2300      	movs	r3, #0
 800af32:	627b      	str	r3, [r7, #36]	; 0x24
 800af34:	e0be      	b.n	800b0b4 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <osMemoryPoolNew+0x2a>
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <osMemoryPoolNew+0x30>
    mp = NULL;
 800af42:	2300      	movs	r3, #0
 800af44:	627b      	str	r3, [r7, #36]	; 0x24
 800af46:	e0b5      	b.n	800b0b4 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 800af48:	2300      	movs	r3, #0
 800af4a:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	3303      	adds	r3, #3
 800af50:	f023 0203 	bic.w	r2, r3, #3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	fb02 f303 	mul.w	r3, r2, r3
 800af5a:	617b      	str	r3, [r7, #20]

    name = NULL;
 800af5c:	2300      	movs	r3, #0
 800af5e:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 800af60:	f04f 33ff 	mov.w	r3, #4294967295
 800af64:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 800af66:	f04f 33ff 	mov.w	r3, #4294967295
 800af6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d038      	beq.n	800afe4 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d002      	beq.n	800af80 <osMemoryPoolNew+0x68>
        name = attr->name;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d006      	beq.n	800af96 <osMemoryPoolNew+0x7e>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	2b73      	cmp	r3, #115	; 0x73
 800af8e:	d902      	bls.n	800af96 <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 800af90:	2301      	movs	r3, #1
 800af92:	61fb      	str	r3, [r7, #28]
 800af94:	e009      	b.n	800afaa <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d105      	bne.n	800afaa <osMemoryPoolNew+0x92>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d106      	bne.n	800afc0 <osMemoryPoolNew+0xa8>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d102      	bne.n	800afc0 <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	61bb      	str	r3, [r7, #24]
 800afbe:	e015      	b.n	800afec <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d011      	beq.n	800afec <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	f003 0303 	and.w	r3, r3, #3
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10b      	bne.n	800afec <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	695b      	ldr	r3, [r3, #20]
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d806      	bhi.n	800afec <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 800afde:	2301      	movs	r3, #1
 800afe0:	61bb      	str	r3, [r7, #24]
 800afe2:	e003      	b.n	800afec <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d104      	bne.n	800affc <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 800aff2:	2074      	movs	r0, #116	; 0x74
 800aff4:	f000 f946 	bl	800b284 <pvPortMalloc>
 800aff8:	6278      	str	r0, [r7, #36]	; 0x24
 800affa:	e002      	b.n	800b002 <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	2b00      	cmp	r3, #0
 800b006:	d01b      	beq.n	800b040 <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	3324      	adds	r3, #36	; 0x24
 800b00c:	461a      	mov	r2, r3
 800b00e:	68f9      	ldr	r1, [r7, #12]
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f001 f842 	bl	800c09a <xQueueCreateCountingSemaphoreStatic>
 800b016:	4602      	mov	r2, r0
 800b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01a:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00d      	beq.n	800b040 <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d106      	bne.n	800b038 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 800b02a:	6978      	ldr	r0, [r7, #20]
 800b02c:	f000 f92a 	bl	800b284 <pvPortMalloc>
 800b030:	4602      	mov	r2, r0
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	609a      	str	r2, [r3, #8]
 800b036:	e003      	b.n	800b040 <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	691a      	ldr	r2, [r3, #16]
 800b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03e:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	2b00      	cmp	r3, #0
 800b044:	d02b      	beq.n	800b09e <osMemoryPoolNew+0x186>
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d027      	beq.n	800b09e <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 800b04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b050:	2200      	movs	r2, #0
 800b052:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	6a3a      	ldr	r2, [r7, #32]
 800b05e:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	2200      	movs	r2, #0
 800b070:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 800b072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b074:	4a12      	ldr	r2, [pc, #72]	; (800b0c0 <osMemoryPoolNew+0x1a8>)
 800b076:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d105      	bne.n	800b08a <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	f043 0201 	orr.w	r2, r3, #1
 800b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b088:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d111      	bne.n	800b0b4 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	6a1b      	ldr	r3, [r3, #32]
 800b094:	f043 0202 	orr.w	r2, r3, #2
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 800b09c:	e00a      	b.n	800b0b4 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d105      	bne.n	800b0b0 <osMemoryPoolNew+0x198>
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 800b0aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0ac:	f000 f9b6 	bl	800b41c <vPortFree>
      }
      mp = NULL;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3728      	adds	r7, #40	; 0x28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	5eed0000 	.word	0x5eed0000

0800b0c4 <osMemoryPoolFree>:
  }

  return (block);
}

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08a      	sub	sp, #40	; 0x28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <osMemoryPoolFree+0x16>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d103      	bne.n	800b0e2 <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 800b0da:	f06f 0303 	mvn.w	r3, #3
 800b0de:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e0:	e07f      	b.n	800b1e2 <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	6a1a      	ldr	r2, [r3, #32]
 800b0ea:	4b40      	ldr	r3, [pc, #256]	; (800b1ec <osMemoryPoolFree+0x128>)
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	4a3f      	ldr	r2, [pc, #252]	; (800b1ec <osMemoryPoolFree+0x128>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d003      	beq.n	800b0fc <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 800b0f4:	f06f 0302 	mvn.w	r3, #2
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0fa:	e072      	b.n	800b1e2 <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	d308      	bcc.n	800b118 <osMemoryPoolFree+0x54>
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	689a      	ldr	r2, [r3, #8]
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	3b01      	subs	r3, #1
 800b110:	4413      	add	r3, r2
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	429a      	cmp	r2, r3
 800b116:	d903      	bls.n	800b120 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 800b118:	f06f 0303 	mvn.w	r3, #3
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
 800b11e:	e060      	b.n	800b1e2 <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 800b120:	2300      	movs	r3, #0
 800b122:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b124:	f3ef 8305 	mrs	r3, IPSR
 800b128:	61bb      	str	r3, [r7, #24]
  return(result);
 800b12a:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d03b      	beq.n	800b1a8 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	4618      	mov	r0, r3
 800b136:	f001 fb8b 	bl	800c850 <uxQueueMessagesWaitingFromISR>
 800b13a:	4602      	mov	r2, r0
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	429a      	cmp	r2, r3
 800b142:	d103      	bne.n	800b14c <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 800b144:	f06f 0302 	mvn.w	r3, #2
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
 800b14a:	e04a      	b.n	800b1e2 <osMemoryPoolFree+0x11e>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b14c:	f3ef 8211 	mrs	r2, BASEPRI
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	613a      	str	r2, [r7, #16]
 800b162:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b164:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 800b166:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6a38      	ldr	r0, [r7, #32]
 800b16c:	f000 f842 	bl	800b1f4 <FreeBlock>
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b17a:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 800b17c:	2300      	movs	r3, #0
 800b17e:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f107 0208 	add.w	r2, r7, #8
 800b188:	4611      	mov	r1, r2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f001 f955 	bl	800c43a <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d025      	beq.n	800b1e2 <osMemoryPoolFree+0x11e>
 800b196:	4b16      	ldr	r3, [pc, #88]	; (800b1f0 <osMemoryPoolFree+0x12c>)
 800b198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	e01c      	b.n	800b1e2 <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f001 fb31 	bl	800c814 <uxQueueMessagesWaiting>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d103      	bne.n	800b1c4 <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 800b1bc:	f06f 0302 	mvn.w	r3, #2
 800b1c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b1c2:	e00e      	b.n	800b1e2 <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 800b1c4:	f000 fc26 	bl	800ba14 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6a38      	ldr	r0, [r7, #32]
 800b1cc:	f000 f812 	bl	800b1f4 <FreeBlock>

          taskEXIT_CRITICAL();
 800b1d0:	f000 fc50 	bl	800ba74 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	6858      	ldr	r0, [r3, #4]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2100      	movs	r1, #0
 800b1de:	f000 ff93 	bl	800c108 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3728      	adds	r7, #40	; 0x28
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	5eed0000 	.word	0x5eed0000
 800b1f0:	e000ed04 	.word	0xe000ed04

0800b1f4 <FreeBlock>:
}

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	601a      	str	r2, [r3, #0]
}
 800b210:	bf00      	nop
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	4a07      	ldr	r2, [pc, #28]	; (800b248 <vApplicationGetIdleTaskMemory+0x2c>)
 800b22c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	4a06      	ldr	r2, [pc, #24]	; (800b24c <vApplicationGetIdleTaskMemory+0x30>)
 800b232:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2280      	movs	r2, #128	; 0x80
 800b238:	601a      	str	r2, [r3, #0]
}
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	2000094c 	.word	0x2000094c
 800b24c:	200009fc 	.word	0x200009fc

0800b250 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4a07      	ldr	r2, [pc, #28]	; (800b27c <vApplicationGetTimerTaskMemory+0x2c>)
 800b260:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	4a06      	ldr	r2, [pc, #24]	; (800b280 <vApplicationGetTimerTaskMemory+0x30>)
 800b266:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b26e:	601a      	str	r2, [r3, #0]
}
 800b270:	bf00      	nop
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	20000bfc 	.word	0x20000bfc
 800b280:	20000cac 	.word	0x20000cac

0800b284 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b08a      	sub	sp, #40	; 0x28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b28c:	2300      	movs	r3, #0
 800b28e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b290:	f001 fecc 	bl	800d02c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b294:	4b5b      	ldr	r3, [pc, #364]	; (800b404 <pvPortMalloc+0x180>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b29c:	f000 f920 	bl	800b4e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2a0:	4b59      	ldr	r3, [pc, #356]	; (800b408 <pvPortMalloc+0x184>)
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f040 8093 	bne.w	800b3d4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d01d      	beq.n	800b2f0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b2b4:	2208      	movs	r2, #8
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d014      	beq.n	800b2f0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f023 0307 	bic.w	r3, r3, #7
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f003 0307 	and.w	r3, r3, #7
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00a      	beq.n	800b2f0 <pvPortMalloc+0x6c>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	617b      	str	r3, [r7, #20]
}
 800b2ec:	bf00      	nop
 800b2ee:	e7fe      	b.n	800b2ee <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d06e      	beq.n	800b3d4 <pvPortMalloc+0x150>
 800b2f6:	4b45      	ldr	r3, [pc, #276]	; (800b40c <pvPortMalloc+0x188>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d869      	bhi.n	800b3d4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b300:	4b43      	ldr	r3, [pc, #268]	; (800b410 <pvPortMalloc+0x18c>)
 800b302:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b304:	4b42      	ldr	r3, [pc, #264]	; (800b410 <pvPortMalloc+0x18c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b30a:	e004      	b.n	800b316 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d903      	bls.n	800b328 <pvPortMalloc+0xa4>
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1f1      	bne.n	800b30c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b328:	4b36      	ldr	r3, [pc, #216]	; (800b404 <pvPortMalloc+0x180>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b32e:	429a      	cmp	r2, r3
 800b330:	d050      	beq.n	800b3d4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2208      	movs	r2, #8
 800b338:	4413      	add	r3, r2
 800b33a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	1ad2      	subs	r2, r2, r3
 800b34c:	2308      	movs	r3, #8
 800b34e:	005b      	lsls	r3, r3, #1
 800b350:	429a      	cmp	r2, r3
 800b352:	d91f      	bls.n	800b394 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4413      	add	r3, r2
 800b35a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	f003 0307 	and.w	r3, r3, #7
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00a      	beq.n	800b37c <pvPortMalloc+0xf8>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	613b      	str	r3, [r7, #16]
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	685a      	ldr	r2, [r3, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	1ad2      	subs	r2, r2, r3
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b38e:	69b8      	ldr	r0, [r7, #24]
 800b390:	f000 f908 	bl	800b5a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b394:	4b1d      	ldr	r3, [pc, #116]	; (800b40c <pvPortMalloc+0x188>)
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	4a1b      	ldr	r2, [pc, #108]	; (800b40c <pvPortMalloc+0x188>)
 800b3a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3a2:	4b1a      	ldr	r3, [pc, #104]	; (800b40c <pvPortMalloc+0x188>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	4b1b      	ldr	r3, [pc, #108]	; (800b414 <pvPortMalloc+0x190>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d203      	bcs.n	800b3b6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3ae:	4b17      	ldr	r3, [pc, #92]	; (800b40c <pvPortMalloc+0x188>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a18      	ldr	r2, [pc, #96]	; (800b414 <pvPortMalloc+0x190>)
 800b3b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	685a      	ldr	r2, [r3, #4]
 800b3ba:	4b13      	ldr	r3, [pc, #76]	; (800b408 <pvPortMalloc+0x184>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b3ca:	4b13      	ldr	r3, [pc, #76]	; (800b418 <pvPortMalloc+0x194>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	4a11      	ldr	r2, [pc, #68]	; (800b418 <pvPortMalloc+0x194>)
 800b3d2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b3d4:	f001 fe70 	bl	800d0b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	f003 0307 	and.w	r3, r3, #7
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <pvPortMalloc+0x174>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	60fb      	str	r3, [r7, #12]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <pvPortMalloc+0x172>
	return pvReturn;
 800b3f8:	69fb      	ldr	r3, [r7, #28]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3728      	adds	r7, #40	; 0x28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	200043c4 	.word	0x200043c4
 800b408:	200043d8 	.word	0x200043d8
 800b40c:	200043c8 	.word	0x200043c8
 800b410:	200043bc 	.word	0x200043bc
 800b414:	200043cc 	.word	0x200043cc
 800b418:	200043d0 	.word	0x200043d0

0800b41c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d04d      	beq.n	800b4ca <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b42e:	2308      	movs	r3, #8
 800b430:	425b      	negs	r3, r3
 800b432:	697a      	ldr	r2, [r7, #20]
 800b434:	4413      	add	r3, r2
 800b436:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	4b24      	ldr	r3, [pc, #144]	; (800b4d4 <vPortFree+0xb8>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4013      	ands	r3, r2
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10a      	bne.n	800b460 <vPortFree+0x44>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	60fb      	str	r3, [r7, #12]
}
 800b45c:	bf00      	nop
 800b45e:	e7fe      	b.n	800b45e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00a      	beq.n	800b47e <vPortFree+0x62>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	60bb      	str	r3, [r7, #8]
}
 800b47a:	bf00      	nop
 800b47c:	e7fe      	b.n	800b47c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	685a      	ldr	r2, [r3, #4]
 800b482:	4b14      	ldr	r3, [pc, #80]	; (800b4d4 <vPortFree+0xb8>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4013      	ands	r3, r2
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d01e      	beq.n	800b4ca <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d11a      	bne.n	800b4ca <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <vPortFree+0xb8>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	43db      	mvns	r3, r3
 800b49e:	401a      	ands	r2, r3
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4a4:	f001 fdc2 	bl	800d02c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	4b0a      	ldr	r3, [pc, #40]	; (800b4d8 <vPortFree+0xbc>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	4a09      	ldr	r2, [pc, #36]	; (800b4d8 <vPortFree+0xbc>)
 800b4b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4b6:	6938      	ldr	r0, [r7, #16]
 800b4b8:	f000 f874 	bl	800b5a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b4bc:	4b07      	ldr	r3, [pc, #28]	; (800b4dc <vPortFree+0xc0>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	4a06      	ldr	r2, [pc, #24]	; (800b4dc <vPortFree+0xc0>)
 800b4c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b4c6:	f001 fdf7 	bl	800d0b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4ca:	bf00      	nop
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200043d8 	.word	0x200043d8
 800b4d8:	200043c8 	.word	0x200043c8
 800b4dc:	200043d4 	.word	0x200043d4

0800b4e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b4e6:	f242 7310 	movw	r3, #10000	; 0x2710
 800b4ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b4ec:	4b27      	ldr	r3, [pc, #156]	; (800b58c <prvHeapInit+0xac>)
 800b4ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f003 0307 	and.w	r3, r3, #7
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00c      	beq.n	800b514 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3307      	adds	r3, #7
 800b4fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f023 0307 	bic.w	r3, r3, #7
 800b506:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	4a1f      	ldr	r2, [pc, #124]	; (800b58c <prvHeapInit+0xac>)
 800b510:	4413      	add	r3, r2
 800b512:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b518:	4a1d      	ldr	r2, [pc, #116]	; (800b590 <prvHeapInit+0xb0>)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b51e:	4b1c      	ldr	r3, [pc, #112]	; (800b590 <prvHeapInit+0xb0>)
 800b520:	2200      	movs	r2, #0
 800b522:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4413      	add	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b52c:	2208      	movs	r2, #8
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	1a9b      	subs	r3, r3, r2
 800b532:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 0307 	bic.w	r3, r3, #7
 800b53a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4a15      	ldr	r2, [pc, #84]	; (800b594 <prvHeapInit+0xb4>)
 800b540:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b542:	4b14      	ldr	r3, [pc, #80]	; (800b594 <prvHeapInit+0xb4>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2200      	movs	r2, #0
 800b548:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b54a:	4b12      	ldr	r3, [pc, #72]	; (800b594 <prvHeapInit+0xb4>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	1ad2      	subs	r2, r2, r3
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b560:	4b0c      	ldr	r3, [pc, #48]	; (800b594 <prvHeapInit+0xb4>)
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	4a0a      	ldr	r2, [pc, #40]	; (800b598 <prvHeapInit+0xb8>)
 800b56e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	4a09      	ldr	r2, [pc, #36]	; (800b59c <prvHeapInit+0xbc>)
 800b576:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b578:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <prvHeapInit+0xc0>)
 800b57a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b57e:	601a      	str	r2, [r3, #0]
}
 800b580:	bf00      	nop
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	20001cac 	.word	0x20001cac
 800b590:	200043bc 	.word	0x200043bc
 800b594:	200043c4 	.word	0x200043c4
 800b598:	200043cc 	.word	0x200043cc
 800b59c:	200043c8 	.word	0x200043c8
 800b5a0:	200043d8 	.word	0x200043d8

0800b5a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5ac:	4b28      	ldr	r3, [pc, #160]	; (800b650 <prvInsertBlockIntoFreeList+0xac>)
 800b5ae:	60fb      	str	r3, [r7, #12]
 800b5b0:	e002      	b.n	800b5b8 <prvInsertBlockIntoFreeList+0x14>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	60fb      	str	r3, [r7, #12]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d8f7      	bhi.n	800b5b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d108      	bne.n	800b5e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	685a      	ldr	r2, [r3, #4]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	441a      	add	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	441a      	add	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d118      	bne.n	800b62c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	4b15      	ldr	r3, [pc, #84]	; (800b654 <prvInsertBlockIntoFreeList+0xb0>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	429a      	cmp	r2, r3
 800b604:	d00d      	beq.n	800b622 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	441a      	add	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	e008      	b.n	800b634 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b622:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <prvInsertBlockIntoFreeList+0xb0>)
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	e003      	b.n	800b634 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d002      	beq.n	800b642 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	200043bc 	.word	0x200043bc
 800b654:	200043c4 	.word	0x200043c4

0800b658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f103 0208 	add.w	r2, r3, #8
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f04f 32ff 	mov.w	r2, #4294967295
 800b670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f103 0208 	add.w	r2, r3, #8
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f103 0208 	add.w	r2, r3, #8
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr

0800b6b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6b2:	b480      	push	{r7}
 800b6b4:	b085      	sub	sp, #20
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	689a      	ldr	r2, [r3, #8]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	601a      	str	r2, [r3, #0]
}
 800b6ee:	bf00      	nop
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b710:	d103      	bne.n	800b71a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	60fb      	str	r3, [r7, #12]
 800b718:	e00c      	b.n	800b734 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3308      	adds	r3, #8
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	e002      	b.n	800b728 <vListInsert+0x2e>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68ba      	ldr	r2, [r7, #8]
 800b730:	429a      	cmp	r2, r3
 800b732:	d2f6      	bcs.n	800b722 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	1c5a      	adds	r2, r3, #1
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	601a      	str	r2, [r3, #0]
}
 800b760:	bf00      	nop
 800b762:	3714      	adds	r7, #20
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	6892      	ldr	r2, [r2, #8]
 800b782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	6852      	ldr	r2, [r2, #4]
 800b78c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	429a      	cmp	r2, r3
 800b796:	d103      	bne.n	800b7a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689a      	ldr	r2, [r3, #8]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	1e5a      	subs	r2, r3, #1
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3b04      	subs	r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f023 0201 	bic.w	r2, r3, #1
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7f0:	4a0c      	ldr	r2, [pc, #48]	; (800b824 <pxPortInitialiseStack+0x64>)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3b14      	subs	r3, #20
 800b7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3b04      	subs	r3, #4
 800b806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f06f 0202 	mvn.w	r2, #2
 800b80e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3b20      	subs	r3, #32
 800b814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b816:	68fb      	ldr	r3, [r7, #12]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	0800b829 	.word	0x0800b829

0800b828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b832:	4b12      	ldr	r3, [pc, #72]	; (800b87c <prvTaskExitError+0x54>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83a:	d00a      	beq.n	800b852 <prvTaskExitError+0x2a>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	60fb      	str	r3, [r7, #12]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <prvTaskExitError+0x28>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	60bb      	str	r3, [r7, #8]
}
 800b864:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b866:	bf00      	nop
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d0fc      	beq.n	800b868 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	2000013c 	.word	0x2000013c

0800b880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b880:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <pxCurrentTCBConst2>)
 800b882:	6819      	ldr	r1, [r3, #0]
 800b884:	6808      	ldr	r0, [r1, #0]
 800b886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88a:	f380 8809 	msr	PSP, r0
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f04f 0000 	mov.w	r0, #0
 800b896:	f380 8811 	msr	BASEPRI, r0
 800b89a:	4770      	bx	lr
 800b89c:	f3af 8000 	nop.w

0800b8a0 <pxCurrentTCBConst2>:
 800b8a0:	200044f0 	.word	0x200044f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop

0800b8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8a8:	4808      	ldr	r0, [pc, #32]	; (800b8cc <prvPortStartFirstTask+0x24>)
 800b8aa:	6800      	ldr	r0, [r0, #0]
 800b8ac:	6800      	ldr	r0, [r0, #0]
 800b8ae:	f380 8808 	msr	MSP, r0
 800b8b2:	f04f 0000 	mov.w	r0, #0
 800b8b6:	f380 8814 	msr	CONTROL, r0
 800b8ba:	b662      	cpsie	i
 800b8bc:	b661      	cpsie	f
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	df00      	svc	0
 800b8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8ca:	bf00      	nop
 800b8cc:	e000ed08 	.word	0xe000ed08

0800b8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8d6:	4b46      	ldr	r3, [pc, #280]	; (800b9f0 <xPortStartScheduler+0x120>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a46      	ldr	r2, [pc, #280]	; (800b9f4 <xPortStartScheduler+0x124>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d10a      	bne.n	800b8f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	613b      	str	r3, [r7, #16]
}
 800b8f2:	bf00      	nop
 800b8f4:	e7fe      	b.n	800b8f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8f6:	4b3e      	ldr	r3, [pc, #248]	; (800b9f0 <xPortStartScheduler+0x120>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a3f      	ldr	r2, [pc, #252]	; (800b9f8 <xPortStartScheduler+0x128>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d10a      	bne.n	800b916 <xPortStartScheduler+0x46>
	__asm volatile
 800b900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	60fb      	str	r3, [r7, #12]
}
 800b912:	bf00      	nop
 800b914:	e7fe      	b.n	800b914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b916:	4b39      	ldr	r3, [pc, #228]	; (800b9fc <xPortStartScheduler+0x12c>)
 800b918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	22ff      	movs	r2, #255	; 0xff
 800b926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	b2db      	uxtb	r3, r3
 800b934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	4b31      	ldr	r3, [pc, #196]	; (800ba00 <xPortStartScheduler+0x130>)
 800b93c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b93e:	4b31      	ldr	r3, [pc, #196]	; (800ba04 <xPortStartScheduler+0x134>)
 800b940:	2207      	movs	r2, #7
 800b942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b944:	e009      	b.n	800b95a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b946:	4b2f      	ldr	r3, [pc, #188]	; (800ba04 <xPortStartScheduler+0x134>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	4a2d      	ldr	r2, [pc, #180]	; (800ba04 <xPortStartScheduler+0x134>)
 800b94e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b950:	78fb      	ldrb	r3, [r7, #3]
 800b952:	b2db      	uxtb	r3, r3
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	b2db      	uxtb	r3, r3
 800b958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b962:	2b80      	cmp	r3, #128	; 0x80
 800b964:	d0ef      	beq.n	800b946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b966:	4b27      	ldr	r3, [pc, #156]	; (800ba04 <xPortStartScheduler+0x134>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f1c3 0307 	rsb	r3, r3, #7
 800b96e:	2b04      	cmp	r3, #4
 800b970:	d00a      	beq.n	800b988 <xPortStartScheduler+0xb8>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60bb      	str	r3, [r7, #8]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b988:	4b1e      	ldr	r3, [pc, #120]	; (800ba04 <xPortStartScheduler+0x134>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	021b      	lsls	r3, r3, #8
 800b98e:	4a1d      	ldr	r2, [pc, #116]	; (800ba04 <xPortStartScheduler+0x134>)
 800b990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b992:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <xPortStartScheduler+0x134>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b99a:	4a1a      	ldr	r2, [pc, #104]	; (800ba04 <xPortStartScheduler+0x134>)
 800b99c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9a6:	4b18      	ldr	r3, [pc, #96]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a17      	ldr	r2, [pc, #92]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9b2:	4b15      	ldr	r3, [pc, #84]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a14      	ldr	r2, [pc, #80]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b9bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9be:	f000 f9a9 	bl	800bd14 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9c2:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <xPortStartScheduler+0x13c>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9c8:	f000 f9e0 	bl	800bd8c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9cc:	4b10      	ldr	r3, [pc, #64]	; (800ba10 <xPortStartScheduler+0x140>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a0f      	ldr	r2, [pc, #60]	; (800ba10 <xPortStartScheduler+0x140>)
 800b9d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b9d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9d8:	f7ff ff66 	bl	800b8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9dc:	f001 fd04 	bl	800d3e8 <vTaskSwitchContext>
	prvTaskExitError();
 800b9e0:	f7ff ff22 	bl	800b828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	e000ed00 	.word	0xe000ed00
 800b9f4:	410fc271 	.word	0x410fc271
 800b9f8:	410fc270 	.word	0x410fc270
 800b9fc:	e000e400 	.word	0xe000e400
 800ba00:	200043e8 	.word	0x200043e8
 800ba04:	200043ec 	.word	0x200043ec
 800ba08:	e000ed20 	.word	0xe000ed20
 800ba0c:	2000013c 	.word	0x2000013c
 800ba10:	e000ef34 	.word	0xe000ef34

0800ba14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	607b      	str	r3, [r7, #4]
}
 800ba2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <vPortEnterCritical+0x58>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3301      	adds	r3, #1
 800ba34:	4a0d      	ldr	r2, [pc, #52]	; (800ba6c <vPortEnterCritical+0x58>)
 800ba36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba38:	4b0c      	ldr	r3, [pc, #48]	; (800ba6c <vPortEnterCritical+0x58>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d10f      	bne.n	800ba60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba40:	4b0b      	ldr	r3, [pc, #44]	; (800ba70 <vPortEnterCritical+0x5c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00a      	beq.n	800ba60 <vPortEnterCritical+0x4c>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	603b      	str	r3, [r7, #0]
}
 800ba5c:	bf00      	nop
 800ba5e:	e7fe      	b.n	800ba5e <vPortEnterCritical+0x4a>
	}
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr
 800ba6c:	2000013c 	.word	0x2000013c
 800ba70:	e000ed04 	.word	0xe000ed04

0800ba74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba7a:	4b12      	ldr	r3, [pc, #72]	; (800bac4 <vPortExitCritical+0x50>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10a      	bne.n	800ba98 <vPortExitCritical+0x24>
	__asm volatile
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	607b      	str	r3, [r7, #4]
}
 800ba94:	bf00      	nop
 800ba96:	e7fe      	b.n	800ba96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba98:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <vPortExitCritical+0x50>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	4a09      	ldr	r2, [pc, #36]	; (800bac4 <vPortExitCritical+0x50>)
 800baa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800baa2:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <vPortExitCritical+0x50>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d105      	bne.n	800bab6 <vPortExitCritical+0x42>
 800baaa:	2300      	movs	r3, #0
 800baac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	f383 8811 	msr	BASEPRI, r3
}
 800bab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bab6:	bf00      	nop
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	2000013c 	.word	0x2000013c
	...

0800bad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bad0:	f3ef 8009 	mrs	r0, PSP
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	4b15      	ldr	r3, [pc, #84]	; (800bb30 <pxCurrentTCBConst>)
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	f01e 0f10 	tst.w	lr, #16
 800bae0:	bf08      	it	eq
 800bae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baea:	6010      	str	r0, [r2, #0]
 800baec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800baf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800baf4:	f380 8811 	msr	BASEPRI, r0
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f001 fc72 	bl	800d3e8 <vTaskSwitchContext>
 800bb04:	f04f 0000 	mov.w	r0, #0
 800bb08:	f380 8811 	msr	BASEPRI, r0
 800bb0c:	bc09      	pop	{r0, r3}
 800bb0e:	6819      	ldr	r1, [r3, #0]
 800bb10:	6808      	ldr	r0, [r1, #0]
 800bb12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb16:	f01e 0f10 	tst.w	lr, #16
 800bb1a:	bf08      	it	eq
 800bb1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb20:	f380 8809 	msr	PSP, r0
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	f3af 8000 	nop.w

0800bb30 <pxCurrentTCBConst>:
 800bb30:	200044f0 	.word	0x200044f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop

0800bb38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	607b      	str	r3, [r7, #4]
}
 800bb50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb52:	f001 fb87 	bl	800d264 <xTaskIncrementTick>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d003      	beq.n	800bb64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb5c:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <xPortSysTickHandler+0x40>)
 800bb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb62:	601a      	str	r2, [r3, #0]
 800bb64:	2300      	movs	r3, #0
 800bb66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f383 8811 	msr	BASEPRI, r3
}
 800bb6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	e000ed04 	.word	0xe000ed04

0800bb7c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800bb84:	4b5d      	ldr	r3, [pc, #372]	; (800bcfc <vPortSuppressTicksAndSleep+0x180>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d902      	bls.n	800bb94 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800bb8e:	4b5b      	ldr	r3, [pc, #364]	; (800bcfc <vPortSuppressTicksAndSleep+0x180>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800bb94:	4b5a      	ldr	r3, [pc, #360]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a59      	ldr	r2, [pc, #356]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bb9a:	f023 0301 	bic.w	r3, r3, #1
 800bb9e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800bba0:	4b58      	ldr	r3, [pc, #352]	; (800bd04 <vPortSuppressTicksAndSleep+0x188>)
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	4957      	ldr	r1, [pc, #348]	; (800bd08 <vPortSuppressTicksAndSleep+0x18c>)
 800bbaa:	6809      	ldr	r1, [r1, #0]
 800bbac:	fb01 f303 	mul.w	r3, r1, r3
 800bbb0:	4413      	add	r3, r2
 800bbb2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800bbb4:	4b55      	ldr	r3, [pc, #340]	; (800bd0c <vPortSuppressTicksAndSleep+0x190>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	69fa      	ldr	r2, [r7, #28]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d904      	bls.n	800bbc8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800bbbe:	4b53      	ldr	r3, [pc, #332]	; (800bd0c <vPortSuppressTicksAndSleep+0x190>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800bbc8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800bbca:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800bbce:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800bbd2:	f001 fdf9 	bl	800d7c8 <eTaskConfirmSleepModeStatus>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d110      	bne.n	800bbfe <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800bbdc:	4b49      	ldr	r3, [pc, #292]	; (800bd04 <vPortSuppressTicksAndSleep+0x188>)
 800bbde:	4a4c      	ldr	r2, [pc, #304]	; (800bd10 <vPortSuppressTicksAndSleep+0x194>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800bbe4:	4b46      	ldr	r3, [pc, #280]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a45      	ldr	r2, [pc, #276]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bbea:	f043 0301 	orr.w	r3, r3, #1
 800bbee:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800bbf0:	4b45      	ldr	r3, [pc, #276]	; (800bd08 <vPortSuppressTicksAndSleep+0x18c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a46      	ldr	r2, [pc, #280]	; (800bd10 <vPortSuppressTicksAndSleep+0x194>)
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800bbfa:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800bbfc:	e079      	b.n	800bcf2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800bbfe:	4a44      	ldr	r2, [pc, #272]	; (800bd10 <vPortSuppressTicksAndSleep+0x194>)
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc04:	4b3f      	ldr	r3, [pc, #252]	; (800bd04 <vPortSuppressTicksAndSleep+0x188>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800bc0a:	4b3d      	ldr	r3, [pc, #244]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a3c      	ldr	r2, [pc, #240]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bc10:	f043 0301 	orr.w	r3, r3, #1
 800bc14:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	613b      	str	r3, [r7, #16]
 800bc1e:	6938      	ldr	r0, [r7, #16]
 800bc20:	f7f6 fbdd 	bl	80023de <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d004      	beq.n	800bc34 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800bc2a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800bc2e:	bf30      	wfi
				__asm volatile( "isb" );
 800bc30:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7f6 fbdc 	bl	80023f2 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800bc3a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800bc3c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800bc40:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800bc44:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800bc46:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800bc4a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800bc4e:	4b2c      	ldr	r3, [pc, #176]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bc50:	2206      	movs	r2, #6
 800bc52:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800bc54:	4b2a      	ldr	r3, [pc, #168]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01d      	beq.n	800bc9c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800bc60:	4b29      	ldr	r3, [pc, #164]	; (800bd08 <vPortSuppressTicksAndSleep+0x18c>)
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	4b27      	ldr	r3, [pc, #156]	; (800bd04 <vPortSuppressTicksAndSleep+0x188>)
 800bc66:	6819      	ldr	r1, [r3, #0]
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	1acb      	subs	r3, r1, r3
 800bc6c:	4413      	add	r3, r2
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800bc72:	4b26      	ldr	r3, [pc, #152]	; (800bd0c <vPortSuppressTicksAndSleep+0x190>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d304      	bcc.n	800bc86 <vPortSuppressTicksAndSleep+0x10a>
 800bc7c:	4b22      	ldr	r3, [pc, #136]	; (800bd08 <vPortSuppressTicksAndSleep+0x18c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d903      	bls.n	800bc8e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800bc86:	4b20      	ldr	r3, [pc, #128]	; (800bd08 <vPortSuppressTicksAndSleep+0x18c>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800bc8e:	4a20      	ldr	r2, [pc, #128]	; (800bd10 <vPortSuppressTicksAndSleep+0x194>)
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	61bb      	str	r3, [r7, #24]
 800bc9a:	e018      	b.n	800bcce <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800bc9c:	4b1a      	ldr	r3, [pc, #104]	; (800bd08 <vPortSuppressTicksAndSleep+0x18c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	fb03 f202 	mul.w	r2, r3, r2
 800bca6:	4b17      	ldr	r3, [pc, #92]	; (800bd04 <vPortSuppressTicksAndSleep+0x188>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800bcae:	4b16      	ldr	r3, [pc, #88]	; (800bd08 <vPortSuppressTicksAndSleep+0x18c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	4a12      	ldr	r2, [pc, #72]	; (800bd08 <vPortSuppressTicksAndSleep+0x18c>)
 800bcc0:	6812      	ldr	r2, [r2, #0]
 800bcc2:	fb03 f202 	mul.w	r2, r3, r2
 800bcc6:	4912      	ldr	r1, [pc, #72]	; (800bd10 <vPortSuppressTicksAndSleep+0x194>)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcce:	4b0d      	ldr	r3, [pc, #52]	; (800bd04 <vPortSuppressTicksAndSleep+0x188>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a09      	ldr	r2, [pc, #36]	; (800bd00 <vPortSuppressTicksAndSleep+0x184>)
 800bcda:	f043 0301 	orr.w	r3, r3, #1
 800bcde:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800bce0:	69b8      	ldr	r0, [r7, #24]
 800bce2:	f001 fa97 	bl	800d214 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800bce6:	4b08      	ldr	r3, [pc, #32]	; (800bd08 <vPortSuppressTicksAndSleep+0x18c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a09      	ldr	r2, [pc, #36]	; (800bd10 <vPortSuppressTicksAndSleep+0x194>)
 800bcec:	3b01      	subs	r3, #1
 800bcee:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800bcf0:	b662      	cpsie	i
	}
 800bcf2:	bf00      	nop
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	200043e0 	.word	0x200043e0
 800bd00:	e000e010 	.word	0xe000e010
 800bd04:	e000e018 	.word	0xe000e018
 800bd08:	200043dc 	.word	0x200043dc
 800bd0c:	200043e4 	.word	0x200043e4
 800bd10:	e000e014 	.word	0xe000e014

0800bd14 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd14:	b480      	push	{r7}
 800bd16:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800bd18:	4b14      	ldr	r3, [pc, #80]	; (800bd6c <vPortSetupTimerInterrupt+0x58>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a14      	ldr	r2, [pc, #80]	; (800bd70 <vPortSetupTimerInterrupt+0x5c>)
 800bd1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd22:	099b      	lsrs	r3, r3, #6
 800bd24:	4a13      	ldr	r2, [pc, #76]	; (800bd74 <vPortSetupTimerInterrupt+0x60>)
 800bd26:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800bd28:	4b12      	ldr	r3, [pc, #72]	; (800bd74 <vPortSetupTimerInterrupt+0x60>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800bd30:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd34:	4a10      	ldr	r2, [pc, #64]	; (800bd78 <vPortSetupTimerInterrupt+0x64>)
 800bd36:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800bd38:	4b10      	ldr	r3, [pc, #64]	; (800bd7c <vPortSetupTimerInterrupt+0x68>)
 800bd3a:	222d      	movs	r2, #45	; 0x2d
 800bd3c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd3e:	4b10      	ldr	r3, [pc, #64]	; (800bd80 <vPortSetupTimerInterrupt+0x6c>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd44:	4b0f      	ldr	r3, [pc, #60]	; (800bd84 <vPortSetupTimerInterrupt+0x70>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd4a:	4b08      	ldr	r3, [pc, #32]	; (800bd6c <vPortSetupTimerInterrupt+0x58>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a08      	ldr	r2, [pc, #32]	; (800bd70 <vPortSetupTimerInterrupt+0x5c>)
 800bd50:	fba2 2303 	umull	r2, r3, r2, r3
 800bd54:	099b      	lsrs	r3, r3, #6
 800bd56:	4a0c      	ldr	r2, [pc, #48]	; (800bd88 <vPortSetupTimerInterrupt+0x74>)
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd5c:	4b08      	ldr	r3, [pc, #32]	; (800bd80 <vPortSetupTimerInterrupt+0x6c>)
 800bd5e:	2207      	movs	r2, #7
 800bd60:	601a      	str	r2, [r3, #0]
}
 800bd62:	bf00      	nop
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	20000130 	.word	0x20000130
 800bd70:	10624dd3 	.word	0x10624dd3
 800bd74:	200043dc 	.word	0x200043dc
 800bd78:	200043e0 	.word	0x200043e0
 800bd7c:	200043e4 	.word	0x200043e4
 800bd80:	e000e010 	.word	0xe000e010
 800bd84:	e000e018 	.word	0xe000e018
 800bd88:	e000e014 	.word	0xe000e014

0800bd8c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd8c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd9c <vPortEnableVFP+0x10>
 800bd90:	6801      	ldr	r1, [r0, #0]
 800bd92:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd96:	6001      	str	r1, [r0, #0]
 800bd98:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd9a:	bf00      	nop
 800bd9c:	e000ed88 	.word	0xe000ed88

0800bda0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bda6:	f3ef 8305 	mrs	r3, IPSR
 800bdaa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b0f      	cmp	r3, #15
 800bdb0:	d914      	bls.n	800bddc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdb2:	4a17      	ldr	r2, [pc, #92]	; (800be10 <vPortValidateInterruptPriority+0x70>)
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdbc:	4b15      	ldr	r3, [pc, #84]	; (800be14 <vPortValidateInterruptPriority+0x74>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	7afa      	ldrb	r2, [r7, #11]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d20a      	bcs.n	800bddc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	607b      	str	r3, [r7, #4]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bddc:	4b0e      	ldr	r3, [pc, #56]	; (800be18 <vPortValidateInterruptPriority+0x78>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bde4:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <vPortValidateInterruptPriority+0x7c>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d90a      	bls.n	800be02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	603b      	str	r3, [r7, #0]
}
 800bdfe:	bf00      	nop
 800be00:	e7fe      	b.n	800be00 <vPortValidateInterruptPriority+0x60>
	}
 800be02:	bf00      	nop
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	e000e3f0 	.word	0xe000e3f0
 800be14:	200043e8 	.word	0x200043e8
 800be18:	e000ed0c 	.word	0xe000ed0c
 800be1c:	200043ec 	.word	0x200043ec

0800be20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10a      	bne.n	800be4a <xQueueGenericReset+0x2a>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	60bb      	str	r3, [r7, #8]
}
 800be46:	bf00      	nop
 800be48:	e7fe      	b.n	800be48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800be4a:	f7ff fde3 	bl	800ba14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be56:	68f9      	ldr	r1, [r7, #12]
 800be58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be5a:	fb01 f303 	mul.w	r3, r1, r3
 800be5e:	441a      	add	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be7a:	3b01      	subs	r3, #1
 800be7c:	68f9      	ldr	r1, [r7, #12]
 800be7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be80:	fb01 f303 	mul.w	r3, r1, r3
 800be84:	441a      	add	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	22ff      	movs	r2, #255	; 0xff
 800be8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	22ff      	movs	r2, #255	; 0xff
 800be96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d114      	bne.n	800beca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d01a      	beq.n	800bede <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3310      	adds	r3, #16
 800beac:	4618      	mov	r0, r3
 800beae:	f001 fb5f 	bl	800d570 <xTaskRemoveFromEventList>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d012      	beq.n	800bede <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800beb8:	4b0c      	ldr	r3, [pc, #48]	; (800beec <xQueueGenericReset+0xcc>)
 800beba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	e009      	b.n	800bede <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3310      	adds	r3, #16
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff fbc2 	bl	800b658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3324      	adds	r3, #36	; 0x24
 800bed8:	4618      	mov	r0, r3
 800beda:	f7ff fbbd 	bl	800b658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bede:	f7ff fdc9 	bl	800ba74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bee2:	2301      	movs	r3, #1
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	e000ed04 	.word	0xe000ed04

0800bef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b08e      	sub	sp, #56	; 0x38
 800bef4:	af02      	add	r7, sp, #8
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
 800befc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10a      	bne.n	800bf1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf16:	bf00      	nop
 800bf18:	e7fe      	b.n	800bf18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10a      	bne.n	800bf36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf32:	bf00      	nop
 800bf34:	e7fe      	b.n	800bf34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <xQueueGenericCreateStatic+0x52>
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <xQueueGenericCreateStatic+0x56>
 800bf42:	2301      	movs	r3, #1
 800bf44:	e000      	b.n	800bf48 <xQueueGenericCreateStatic+0x58>
 800bf46:	2300      	movs	r3, #0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10a      	bne.n	800bf62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	623b      	str	r3, [r7, #32]
}
 800bf5e:	bf00      	nop
 800bf60:	e7fe      	b.n	800bf60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d102      	bne.n	800bf6e <xQueueGenericCreateStatic+0x7e>
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d101      	bne.n	800bf72 <xQueueGenericCreateStatic+0x82>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e000      	b.n	800bf74 <xQueueGenericCreateStatic+0x84>
 800bf72:	2300      	movs	r3, #0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10a      	bne.n	800bf8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	61fb      	str	r3, [r7, #28]
}
 800bf8a:	bf00      	nop
 800bf8c:	e7fe      	b.n	800bf8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf8e:	2350      	movs	r3, #80	; 0x50
 800bf90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b50      	cmp	r3, #80	; 0x50
 800bf96:	d00a      	beq.n	800bfae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	61bb      	str	r3, [r7, #24]
}
 800bfaa:	bf00      	nop
 800bfac:	e7fe      	b.n	800bfac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bfae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00d      	beq.n	800bfd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	68b9      	ldr	r1, [r7, #8]
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 f83f 	bl	800c054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3730      	adds	r7, #48	; 0x30
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b08a      	sub	sp, #40	; 0x28
 800bfe4:	af02      	add	r7, sp, #8
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	4613      	mov	r3, r2
 800bfec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10a      	bne.n	800c00a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	613b      	str	r3, [r7, #16]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
 800c012:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	3350      	adds	r3, #80	; 0x50
 800c018:	4618      	mov	r0, r3
 800c01a:	f7ff f933 	bl	800b284 <pvPortMalloc>
 800c01e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d011      	beq.n	800c04a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	3350      	adds	r3, #80	; 0x50
 800c02e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c038:	79fa      	ldrb	r2, [r7, #7]
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	4613      	mov	r3, r2
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 f805 	bl	800c054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c04a:	69bb      	ldr	r3, [r7, #24]
	}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3720      	adds	r7, #32
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d103      	bne.n	800c070 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	69ba      	ldr	r2, [r7, #24]
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	e002      	b.n	800c076 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c082:	2101      	movs	r1, #1
 800c084:	69b8      	ldr	r0, [r7, #24]
 800c086:	f7ff fecb 	bl	800be20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	78fa      	ldrb	r2, [r7, #3]
 800c08e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c092:	bf00      	nop
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b08a      	sub	sp, #40	; 0x28
 800c09e:	af02      	add	r7, sp, #8
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10a      	bne.n	800c0c2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	61bb      	str	r3, [r7, #24]
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d90a      	bls.n	800c0e0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	617b      	str	r3, [r7, #20]
}
 800c0dc:	bf00      	nop
 800c0de:	e7fe      	b.n	800c0de <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f7ff ff00 	bl	800bef0 <xQueueGenericCreateStatic>
 800c0f0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c0fe:	69fb      	ldr	r3, [r7, #28]
	}
 800c100:	4618      	mov	r0, r3
 800c102:	3720      	adds	r7, #32
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08e      	sub	sp, #56	; 0x38
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
 800c114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c116:	2300      	movs	r3, #0
 800c118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10a      	bne.n	800c13a <xQueueGenericSend+0x32>
	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c136:	bf00      	nop
 800c138:	e7fe      	b.n	800c138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d103      	bne.n	800c148 <xQueueGenericSend+0x40>
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <xQueueGenericSend+0x44>
 800c148:	2301      	movs	r3, #1
 800c14a:	e000      	b.n	800c14e <xQueueGenericSend+0x46>
 800c14c:	2300      	movs	r3, #0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10a      	bne.n	800c168 <xQueueGenericSend+0x60>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c164:	bf00      	nop
 800c166:	e7fe      	b.n	800c166 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d103      	bne.n	800c176 <xQueueGenericSend+0x6e>
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c172:	2b01      	cmp	r3, #1
 800c174:	d101      	bne.n	800c17a <xQueueGenericSend+0x72>
 800c176:	2301      	movs	r3, #1
 800c178:	e000      	b.n	800c17c <xQueueGenericSend+0x74>
 800c17a:	2300      	movs	r3, #0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <xQueueGenericSend+0x8e>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	623b      	str	r3, [r7, #32]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c196:	f001 fc07 	bl	800d9a8 <xTaskGetSchedulerState>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d102      	bne.n	800c1a6 <xQueueGenericSend+0x9e>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <xQueueGenericSend+0xa2>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e000      	b.n	800c1ac <xQueueGenericSend+0xa4>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10a      	bne.n	800c1c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	61fb      	str	r3, [r7, #28]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1c6:	f7ff fc25 	bl	800ba14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d302      	bcc.n	800c1dc <xQueueGenericSend+0xd4>
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	d129      	bne.n	800c230 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	68b9      	ldr	r1, [r7, #8]
 800c1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1e2:	f000 fb53 	bl	800c88c <prvCopyDataToQueue>
 800c1e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d010      	beq.n	800c212 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	3324      	adds	r3, #36	; 0x24
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f001 f9bb 	bl	800d570 <xTaskRemoveFromEventList>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d013      	beq.n	800c228 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c200:	4b3f      	ldr	r3, [pc, #252]	; (800c300 <xQueueGenericSend+0x1f8>)
 800c202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	e00a      	b.n	800c228 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	2b00      	cmp	r3, #0
 800c216:	d007      	beq.n	800c228 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c218:	4b39      	ldr	r3, [pc, #228]	; (800c300 <xQueueGenericSend+0x1f8>)
 800c21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c21e:	601a      	str	r2, [r3, #0]
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c228:	f7ff fc24 	bl	800ba74 <vPortExitCritical>
				return pdPASS;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e063      	b.n	800c2f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d103      	bne.n	800c23e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c236:	f7ff fc1d 	bl	800ba74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	e05c      	b.n	800c2f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c240:	2b00      	cmp	r3, #0
 800c242:	d106      	bne.n	800c252 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c244:	f107 0314 	add.w	r3, r7, #20
 800c248:	4618      	mov	r0, r3
 800c24a:	f001 f9f7 	bl	800d63c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c24e:	2301      	movs	r3, #1
 800c250:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c252:	f7ff fc0f 	bl	800ba74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c256:	f000 fee9 	bl	800d02c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c25a:	f7ff fbdb 	bl	800ba14 <vPortEnterCritical>
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c264:	b25b      	sxtb	r3, r3
 800c266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26a:	d103      	bne.n	800c274 <xQueueGenericSend+0x16c>
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	2200      	movs	r2, #0
 800c270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c27a:	b25b      	sxtb	r3, r3
 800c27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c280:	d103      	bne.n	800c28a <xQueueGenericSend+0x182>
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c28a:	f7ff fbf3 	bl	800ba74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c28e:	1d3a      	adds	r2, r7, #4
 800c290:	f107 0314 	add.w	r3, r7, #20
 800c294:	4611      	mov	r1, r2
 800c296:	4618      	mov	r0, r3
 800c298:	f001 f9e6 	bl	800d668 <xTaskCheckForTimeOut>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d124      	bne.n	800c2ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c2a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2a4:	f000 fbea 	bl	800ca7c <prvIsQueueFull>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d018      	beq.n	800c2e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	3310      	adds	r3, #16
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f001 f90a 	bl	800d4d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2be:	f000 fb75 	bl	800c9ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c2c2:	f000 fef9 	bl	800d0b8 <xTaskResumeAll>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f47f af7c 	bne.w	800c1c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c2ce:	4b0c      	ldr	r3, [pc, #48]	; (800c300 <xQueueGenericSend+0x1f8>)
 800c2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	e772      	b.n	800c1c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c2e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2e2:	f000 fb63 	bl	800c9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2e6:	f000 fee7 	bl	800d0b8 <xTaskResumeAll>
 800c2ea:	e76c      	b.n	800c1c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c2ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2ee:	f000 fb5d 	bl	800c9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2f2:	f000 fee1 	bl	800d0b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c2f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3738      	adds	r7, #56	; 0x38
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	e000ed04 	.word	0xe000ed04

0800c304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b090      	sub	sp, #64	; 0x40
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10a      	bne.n	800c332 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d103      	bne.n	800c340 <xQueueGenericSendFromISR+0x3c>
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d101      	bne.n	800c344 <xQueueGenericSendFromISR+0x40>
 800c340:	2301      	movs	r3, #1
 800c342:	e000      	b.n	800c346 <xQueueGenericSendFromISR+0x42>
 800c344:	2300      	movs	r3, #0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10a      	bne.n	800c360 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2b02      	cmp	r3, #2
 800c364:	d103      	bne.n	800c36e <xQueueGenericSendFromISR+0x6a>
 800c366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d101      	bne.n	800c372 <xQueueGenericSendFromISR+0x6e>
 800c36e:	2301      	movs	r3, #1
 800c370:	e000      	b.n	800c374 <xQueueGenericSendFromISR+0x70>
 800c372:	2300      	movs	r3, #0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10a      	bne.n	800c38e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	623b      	str	r3, [r7, #32]
}
 800c38a:	bf00      	nop
 800c38c:	e7fe      	b.n	800c38c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c38e:	f7ff fd07 	bl	800bda0 <vPortValidateInterruptPriority>
	__asm volatile
 800c392:	f3ef 8211 	mrs	r2, BASEPRI
 800c396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	61fa      	str	r2, [r7, #28]
 800c3a8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c3aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d302      	bcc.n	800c3c0 <xQueueGenericSendFromISR+0xbc>
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d12f      	bne.n	800c420 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c3d6:	f000 fa59 	bl	800c88c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e2:	d112      	bne.n	800c40a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d016      	beq.n	800c41a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ee:	3324      	adds	r3, #36	; 0x24
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f001 f8bd 	bl	800d570 <xTaskRemoveFromEventList>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00e      	beq.n	800c41a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00b      	beq.n	800c41a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	601a      	str	r2, [r3, #0]
 800c408:	e007      	b.n	800c41a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c40a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c40e:	3301      	adds	r3, #1
 800c410:	b2db      	uxtb	r3, r3
 800c412:	b25a      	sxtb	r2, r3
 800c414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c41a:	2301      	movs	r3, #1
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c41e:	e001      	b.n	800c424 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c426:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	f383 8811 	msr	BASEPRI, r3
}
 800c42e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c432:	4618      	mov	r0, r3
 800c434:	3740      	adds	r7, #64	; 0x40
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b08e      	sub	sp, #56	; 0x38
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10a      	bne.n	800c464 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	623b      	str	r3, [r7, #32]
}
 800c460:	bf00      	nop
 800c462:	e7fe      	b.n	800c462 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00a      	beq.n	800c482 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	61fb      	str	r3, [r7, #28]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d103      	bne.n	800c492 <xQueueGiveFromISR+0x58>
 800c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <xQueueGiveFromISR+0x5c>
 800c492:	2301      	movs	r3, #1
 800c494:	e000      	b.n	800c498 <xQueueGiveFromISR+0x5e>
 800c496:	2300      	movs	r3, #0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10a      	bne.n	800c4b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	61bb      	str	r3, [r7, #24]
}
 800c4ae:	bf00      	nop
 800c4b0:	e7fe      	b.n	800c4b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4b2:	f7ff fc75 	bl	800bda0 <vPortValidateInterruptPriority>
	__asm volatile
 800c4b6:	f3ef 8211 	mrs	r2, BASEPRI
 800c4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	617a      	str	r2, [r7, #20]
 800c4cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c4ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d22b      	bcs.n	800c53a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ee:	1c5a      	adds	r2, r3, #1
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4fc:	d112      	bne.n	800c524 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c502:	2b00      	cmp	r3, #0
 800c504:	d016      	beq.n	800c534 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	3324      	adds	r3, #36	; 0x24
 800c50a:	4618      	mov	r0, r3
 800c50c:	f001 f830 	bl	800d570 <xTaskRemoveFromEventList>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00e      	beq.n	800c534 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2201      	movs	r2, #1
 800c520:	601a      	str	r2, [r3, #0]
 800c522:	e007      	b.n	800c534 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c528:	3301      	adds	r3, #1
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	b25a      	sxtb	r2, r3
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c534:	2301      	movs	r3, #1
 800c536:	637b      	str	r3, [r7, #52]	; 0x34
 800c538:	e001      	b.n	800c53e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	637b      	str	r3, [r7, #52]	; 0x34
 800c53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c540:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f383 8811 	msr	BASEPRI, r3
}
 800c548:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3738      	adds	r7, #56	; 0x38
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b08c      	sub	sp, #48	; 0x30
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c560:	2300      	movs	r3, #0
 800c562:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d10a      	bne.n	800c584 <xQueueReceive+0x30>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	623b      	str	r3, [r7, #32]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d103      	bne.n	800c592 <xQueueReceive+0x3e>
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <xQueueReceive+0x42>
 800c592:	2301      	movs	r3, #1
 800c594:	e000      	b.n	800c598 <xQueueReceive+0x44>
 800c596:	2300      	movs	r3, #0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <xQueueReceive+0x5e>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	61fb      	str	r3, [r7, #28]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5b2:	f001 f9f9 	bl	800d9a8 <xTaskGetSchedulerState>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d102      	bne.n	800c5c2 <xQueueReceive+0x6e>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d101      	bne.n	800c5c6 <xQueueReceive+0x72>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e000      	b.n	800c5c8 <xQueueReceive+0x74>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10a      	bne.n	800c5e2 <xQueueReceive+0x8e>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	61bb      	str	r3, [r7, #24]
}
 800c5de:	bf00      	nop
 800c5e0:	e7fe      	b.n	800c5e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5e2:	f7ff fa17 	bl	800ba14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d01f      	beq.n	800c632 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5f2:	68b9      	ldr	r1, [r7, #8]
 800c5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5f6:	f000 f9b3 	bl	800c960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	1e5a      	subs	r2, r3, #1
 800c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c600:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00f      	beq.n	800c62a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	3310      	adds	r3, #16
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 ffae 	bl	800d570 <xTaskRemoveFromEventList>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d007      	beq.n	800c62a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c61a:	4b3d      	ldr	r3, [pc, #244]	; (800c710 <xQueueReceive+0x1bc>)
 800c61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c62a:	f7ff fa23 	bl	800ba74 <vPortExitCritical>
				return pdPASS;
 800c62e:	2301      	movs	r3, #1
 800c630:	e069      	b.n	800c706 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d103      	bne.n	800c640 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c638:	f7ff fa1c 	bl	800ba74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c63c:	2300      	movs	r3, #0
 800c63e:	e062      	b.n	800c706 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c642:	2b00      	cmp	r3, #0
 800c644:	d106      	bne.n	800c654 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c646:	f107 0310 	add.w	r3, r7, #16
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fff6 	bl	800d63c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c650:	2301      	movs	r3, #1
 800c652:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c654:	f7ff fa0e 	bl	800ba74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c658:	f000 fce8 	bl	800d02c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c65c:	f7ff f9da 	bl	800ba14 <vPortEnterCritical>
 800c660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c666:	b25b      	sxtb	r3, r3
 800c668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c66c:	d103      	bne.n	800c676 <xQueueReceive+0x122>
 800c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c67c:	b25b      	sxtb	r3, r3
 800c67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c682:	d103      	bne.n	800c68c <xQueueReceive+0x138>
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c68c:	f7ff f9f2 	bl	800ba74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c690:	1d3a      	adds	r2, r7, #4
 800c692:	f107 0310 	add.w	r3, r7, #16
 800c696:	4611      	mov	r1, r2
 800c698:	4618      	mov	r0, r3
 800c69a:	f000 ffe5 	bl	800d668 <xTaskCheckForTimeOut>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d123      	bne.n	800c6ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6a6:	f000 f9d3 	bl	800ca50 <prvIsQueueEmpty>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d017      	beq.n	800c6e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	3324      	adds	r3, #36	; 0x24
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 ff09 	bl	800d4d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c0:	f000 f974 	bl	800c9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6c4:	f000 fcf8 	bl	800d0b8 <xTaskResumeAll>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d189      	bne.n	800c5e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c6ce:	4b10      	ldr	r3, [pc, #64]	; (800c710 <xQueueReceive+0x1bc>)
 800c6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	e780      	b.n	800c5e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6e2:	f000 f963 	bl	800c9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6e6:	f000 fce7 	bl	800d0b8 <xTaskResumeAll>
 800c6ea:	e77a      	b.n	800c5e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ee:	f000 f95d 	bl	800c9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6f2:	f000 fce1 	bl	800d0b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f8:	f000 f9aa 	bl	800ca50 <prvIsQueueEmpty>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f43f af6f 	beq.w	800c5e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c704:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c706:	4618      	mov	r0, r3
 800c708:	3730      	adds	r7, #48	; 0x30
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	e000ed04 	.word	0xe000ed04

0800c714 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b08e      	sub	sp, #56	; 0x38
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10a      	bne.n	800c740 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	623b      	str	r3, [r7, #32]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d103      	bne.n	800c74e <xQueueReceiveFromISR+0x3a>
 800c746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d101      	bne.n	800c752 <xQueueReceiveFromISR+0x3e>
 800c74e:	2301      	movs	r3, #1
 800c750:	e000      	b.n	800c754 <xQueueReceiveFromISR+0x40>
 800c752:	2300      	movs	r3, #0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10a      	bne.n	800c76e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75c:	f383 8811 	msr	BASEPRI, r3
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	61fb      	str	r3, [r7, #28]
}
 800c76a:	bf00      	nop
 800c76c:	e7fe      	b.n	800c76c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c76e:	f7ff fb17 	bl	800bda0 <vPortValidateInterruptPriority>
	__asm volatile
 800c772:	f3ef 8211 	mrs	r2, BASEPRI
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	61ba      	str	r2, [r7, #24]
 800c788:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c78a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c78c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c792:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	2b00      	cmp	r3, #0
 800c798:	d02f      	beq.n	800c7fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7a4:	68b9      	ldr	r1, [r7, #8]
 800c7a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7a8:	f000 f8da 	bl	800c960 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	1e5a      	subs	r2, r3, #1
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7bc:	d112      	bne.n	800c7e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d016      	beq.n	800c7f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	3310      	adds	r3, #16
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 fed0 	bl	800d570 <xTaskRemoveFromEventList>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00e      	beq.n	800c7f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00b      	beq.n	800c7f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	601a      	str	r2, [r3, #0]
 800c7e2:	e007      	b.n	800c7f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	b25a      	sxtb	r2, r3
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c7f8:	e001      	b.n	800c7fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c800:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	f383 8811 	msr	BASEPRI, r3
}
 800c808:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3738      	adds	r7, #56	; 0x38
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10a      	bne.n	800c838 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	60bb      	str	r3, [r7, #8]
}
 800c834:	bf00      	nop
 800c836:	e7fe      	b.n	800c836 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c838:	f7ff f8ec 	bl	800ba14 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c840:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c842:	f7ff f917 	bl	800ba74 <vPortExitCritical>

	return uxReturn;
 800c846:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c850:	b480      	push	{r7}
 800c852:	b087      	sub	sp, #28
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10a      	bne.n	800c878 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	60fb      	str	r3, [r7, #12]
}
 800c874:	bf00      	nop
 800c876:	e7fe      	b.n	800c876 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c87e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c880:	4618      	mov	r0, r3
 800c882:	371c      	adds	r7, #28
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c898:	2300      	movs	r3, #0
 800c89a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10d      	bne.n	800c8c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d14d      	bne.n	800c94e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f001 f894 	bl	800d9e4 <xTaskPriorityDisinherit>
 800c8bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	609a      	str	r2, [r3, #8]
 800c8c4:	e043      	b.n	800c94e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d119      	bne.n	800c900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6858      	ldr	r0, [r3, #4]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	68b9      	ldr	r1, [r7, #8]
 800c8d8:	f001 ff1c 	bl	800e714 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e4:	441a      	add	r2, r3
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d32b      	bcc.n	800c94e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	605a      	str	r2, [r3, #4]
 800c8fe:	e026      	b.n	800c94e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	68d8      	ldr	r0, [r3, #12]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c908:	461a      	mov	r2, r3
 800c90a:	68b9      	ldr	r1, [r7, #8]
 800c90c:	f001 ff02 	bl	800e714 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68da      	ldr	r2, [r3, #12]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c918:	425b      	negs	r3, r3
 800c91a:	441a      	add	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	68da      	ldr	r2, [r3, #12]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d207      	bcs.n	800c93c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	689a      	ldr	r2, [r3, #8]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c934:	425b      	negs	r3, r3
 800c936:	441a      	add	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d105      	bne.n	800c94e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	3b01      	subs	r3, #1
 800c94c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	1c5a      	adds	r2, r3, #1
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c956:	697b      	ldr	r3, [r7, #20]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d018      	beq.n	800c9a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68da      	ldr	r2, [r3, #12]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	441a      	add	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d303      	bcc.n	800c994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68d9      	ldr	r1, [r3, #12]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99c:	461a      	mov	r2, r3
 800c99e:	6838      	ldr	r0, [r7, #0]
 800c9a0:	f001 feb8 	bl	800e714 <memcpy>
	}
}
 800c9a4:	bf00      	nop
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9b4:	f7ff f82e 	bl	800ba14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9c0:	e011      	b.n	800c9e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d012      	beq.n	800c9f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	3324      	adds	r3, #36	; 0x24
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 fdce 	bl	800d570 <xTaskRemoveFromEventList>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9da:	f000 fea7 	bl	800d72c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	dce9      	bgt.n	800c9c2 <prvUnlockQueue+0x16>
 800c9ee:	e000      	b.n	800c9f2 <prvUnlockQueue+0x46>
					break;
 800c9f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	22ff      	movs	r2, #255	; 0xff
 800c9f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c9fa:	f7ff f83b 	bl	800ba74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9fe:	f7ff f809 	bl	800ba14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca0a:	e011      	b.n	800ca30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d012      	beq.n	800ca3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3310      	adds	r3, #16
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 fda9 	bl	800d570 <xTaskRemoveFromEventList>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d001      	beq.n	800ca28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca24:	f000 fe82 	bl	800d72c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca28:	7bbb      	ldrb	r3, [r7, #14]
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	dce9      	bgt.n	800ca0c <prvUnlockQueue+0x60>
 800ca38:	e000      	b.n	800ca3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	22ff      	movs	r2, #255	; 0xff
 800ca40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca44:	f7ff f816 	bl	800ba74 <vPortExitCritical>
}
 800ca48:	bf00      	nop
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca58:	f7fe ffdc 	bl	800ba14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d102      	bne.n	800ca6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca64:	2301      	movs	r3, #1
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	e001      	b.n	800ca6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca6e:	f7ff f801 	bl	800ba74 <vPortExitCritical>

	return xReturn;
 800ca72:	68fb      	ldr	r3, [r7, #12]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca84:	f7fe ffc6 	bl	800ba14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d102      	bne.n	800ca9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca94:	2301      	movs	r3, #1
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	e001      	b.n	800ca9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca9e:	f7fe ffe9 	bl	800ba74 <vPortExitCritical>

	return xReturn;
 800caa2:	68fb      	ldr	r3, [r7, #12]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cab6:	2300      	movs	r3, #0
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	e014      	b.n	800cae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cabc:	4a0f      	ldr	r2, [pc, #60]	; (800cafc <vQueueAddToRegistry+0x50>)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10b      	bne.n	800cae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cac8:	490c      	ldr	r1, [pc, #48]	; (800cafc <vQueueAddToRegistry+0x50>)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	683a      	ldr	r2, [r7, #0]
 800cace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cad2:	4a0a      	ldr	r2, [pc, #40]	; (800cafc <vQueueAddToRegistry+0x50>)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	00db      	lsls	r3, r3, #3
 800cad8:	4413      	add	r3, r2
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cade:	e006      	b.n	800caee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	3301      	adds	r3, #1
 800cae4:	60fb      	str	r3, [r7, #12]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2b1f      	cmp	r3, #31
 800caea:	d9e7      	bls.n	800cabc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800caec:	bf00      	nop
 800caee:	bf00      	nop
 800caf0:	3714      	adds	r7, #20
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	200043f0 	.word	0x200043f0

0800cb00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb10:	f7fe ff80 	bl	800ba14 <vPortEnterCritical>
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb1a:	b25b      	sxtb	r3, r3
 800cb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb20:	d103      	bne.n	800cb2a <vQueueWaitForMessageRestricted+0x2a>
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb30:	b25b      	sxtb	r3, r3
 800cb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb36:	d103      	bne.n	800cb40 <vQueueWaitForMessageRestricted+0x40>
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb40:	f7fe ff98 	bl	800ba74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d106      	bne.n	800cb5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	3324      	adds	r3, #36	; 0x24
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	68b9      	ldr	r1, [r7, #8]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 fcdf 	bl	800d518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cb5a:	6978      	ldr	r0, [r7, #20]
 800cb5c:	f7ff ff26 	bl	800c9ac <prvUnlockQueue>
	}
 800cb60:	bf00      	nop
 800cb62:	3718      	adds	r7, #24
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08e      	sub	sp, #56	; 0x38
 800cb6c:	af04      	add	r7, sp, #16
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	623b      	str	r3, [r7, #32]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10a      	bne.n	800cbae <xTaskCreateStatic+0x46>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	61fb      	str	r3, [r7, #28]
}
 800cbaa:	bf00      	nop
 800cbac:	e7fe      	b.n	800cbac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbae:	23b0      	movs	r3, #176	; 0xb0
 800cbb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2bb0      	cmp	r3, #176	; 0xb0
 800cbb6:	d00a      	beq.n	800cbce <xTaskCreateStatic+0x66>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	61bb      	str	r3, [r7, #24]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d01e      	beq.n	800cc14 <xTaskCreateStatic+0xac>
 800cbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d01b      	beq.n	800cc14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbe4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	2202      	movs	r2, #2
 800cbea:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbee:	2300      	movs	r3, #0
 800cbf0:	9303      	str	r3, [sp, #12]
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf4:	9302      	str	r3, [sp, #8]
 800cbf6:	f107 0314 	add.w	r3, r7, #20
 800cbfa:	9301      	str	r3, [sp, #4]
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	68b9      	ldr	r1, [r7, #8]
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f000 f850 	bl	800ccac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc0e:	f000 f8f9 	bl	800ce04 <prvAddNewTaskToReadyList>
 800cc12:	e001      	b.n	800cc18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc14:	2300      	movs	r3, #0
 800cc16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc18:	697b      	ldr	r3, [r7, #20]
	}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3728      	adds	r7, #40	; 0x28
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b08c      	sub	sp, #48	; 0x30
 800cc26:	af04      	add	r7, sp, #16
 800cc28:	60f8      	str	r0, [r7, #12]
 800cc2a:	60b9      	str	r1, [r7, #8]
 800cc2c:	603b      	str	r3, [r7, #0]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc32:	88fb      	ldrh	r3, [r7, #6]
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe fb24 	bl	800b284 <pvPortMalloc>
 800cc3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00e      	beq.n	800cc62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc44:	20b0      	movs	r0, #176	; 0xb0
 800cc46:	f7fe fb1d 	bl	800b284 <pvPortMalloc>
 800cc4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d003      	beq.n	800cc5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	697a      	ldr	r2, [r7, #20]
 800cc56:	631a      	str	r2, [r3, #48]	; 0x30
 800cc58:	e005      	b.n	800cc66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc5a:	6978      	ldr	r0, [r7, #20]
 800cc5c:	f7fe fbde 	bl	800b41c <vPortFree>
 800cc60:	e001      	b.n	800cc66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc62:	2300      	movs	r3, #0
 800cc64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d017      	beq.n	800cc9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc74:	88fa      	ldrh	r2, [r7, #6]
 800cc76:	2300      	movs	r3, #0
 800cc78:	9303      	str	r3, [sp, #12]
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	9302      	str	r3, [sp, #8]
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	68b9      	ldr	r1, [r7, #8]
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f000 f80e 	bl	800ccac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc90:	69f8      	ldr	r0, [r7, #28]
 800cc92:	f000 f8b7 	bl	800ce04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc96:	2301      	movs	r3, #1
 800cc98:	61bb      	str	r3, [r7, #24]
 800cc9a:	e002      	b.n	800cca2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cca0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cca2:	69bb      	ldr	r3, [r7, #24]
	}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3720      	adds	r7, #32
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b088      	sub	sp, #32
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	21a5      	movs	r1, #165	; 0xa5
 800ccc6:	f001 fca1 	bl	800e60c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	f023 0307 	bic.w	r3, r3, #7
 800cce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	f003 0307 	and.w	r3, r3, #7
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00a      	beq.n	800cd04 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ccee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	617b      	str	r3, [r7, #20]
}
 800cd00:	bf00      	nop
 800cd02:	e7fe      	b.n	800cd02 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800cd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd06:	69ba      	ldr	r2, [r7, #24]
 800cd08:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d01f      	beq.n	800cd50 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd10:	2300      	movs	r3, #0
 800cd12:	61fb      	str	r3, [r7, #28]
 800cd14:	e012      	b.n	800cd3c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	7819      	ldrb	r1, [r3, #0]
 800cd1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	4413      	add	r3, r2
 800cd24:	3334      	adds	r3, #52	; 0x34
 800cd26:	460a      	mov	r2, r1
 800cd28:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	4413      	add	r3, r2
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d006      	beq.n	800cd44 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	61fb      	str	r3, [r7, #28]
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	2b0f      	cmp	r3, #15
 800cd40:	d9e9      	bls.n	800cd16 <prvInitialiseNewTask+0x6a>
 800cd42:	e000      	b.n	800cd46 <prvInitialiseNewTask+0x9a>
			{
				break;
 800cd44:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd4e:	e003      	b.n	800cd58 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5a:	2b37      	cmp	r3, #55	; 0x37
 800cd5c:	d901      	bls.n	800cd62 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd5e:	2337      	movs	r3, #55	; 0x37
 800cd60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd6c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	2200      	movs	r2, #0
 800cd72:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	3304      	adds	r3, #4
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fe fc8d 	bl	800b698 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	3318      	adds	r3, #24
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe fc88 	bl	800b698 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	2200      	movs	r2, #0
 800cda2:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	2200      	movs	r2, #0
 800cda8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	335c      	adds	r3, #92	; 0x5c
 800cdb8:	224c      	movs	r2, #76	; 0x4c
 800cdba:	2100      	movs	r1, #0
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f001 fc25 	bl	800e60c <memset>
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	4a0c      	ldr	r2, [pc, #48]	; (800cdf8 <prvInitialiseNewTask+0x14c>)
 800cdc6:	661a      	str	r2, [r3, #96]	; 0x60
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	4a0c      	ldr	r2, [pc, #48]	; (800cdfc <prvInitialiseNewTask+0x150>)
 800cdcc:	665a      	str	r2, [r3, #100]	; 0x64
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	4a0b      	ldr	r2, [pc, #44]	; (800ce00 <prvInitialiseNewTask+0x154>)
 800cdd2:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	68f9      	ldr	r1, [r7, #12]
 800cdd8:	69b8      	ldr	r0, [r7, #24]
 800cdda:	f7fe fcf1 	bl	800b7c0 <pxPortInitialiseStack>
 800cdde:	4602      	mov	r2, r0
 800cde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d002      	beq.n	800cdf0 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdf0:	bf00      	nop
 800cdf2:	3720      	adds	r7, #32
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	20004b1c 	.word	0x20004b1c
 800cdfc:	20004b84 	.word	0x20004b84
 800ce00:	20004bec 	.word	0x20004bec

0800ce04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce0c:	f7fe fe02 	bl	800ba14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce10:	4b2d      	ldr	r3, [pc, #180]	; (800cec8 <prvAddNewTaskToReadyList+0xc4>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3301      	adds	r3, #1
 800ce16:	4a2c      	ldr	r2, [pc, #176]	; (800cec8 <prvAddNewTaskToReadyList+0xc4>)
 800ce18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce1a:	4b2c      	ldr	r3, [pc, #176]	; (800cecc <prvAddNewTaskToReadyList+0xc8>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d109      	bne.n	800ce36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce22:	4a2a      	ldr	r2, [pc, #168]	; (800cecc <prvAddNewTaskToReadyList+0xc8>)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce28:	4b27      	ldr	r3, [pc, #156]	; (800cec8 <prvAddNewTaskToReadyList+0xc4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d110      	bne.n	800ce52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce30:	f000 fcf8 	bl	800d824 <prvInitialiseTaskLists>
 800ce34:	e00d      	b.n	800ce52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce36:	4b26      	ldr	r3, [pc, #152]	; (800ced0 <prvAddNewTaskToReadyList+0xcc>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d109      	bne.n	800ce52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce3e:	4b23      	ldr	r3, [pc, #140]	; (800cecc <prvAddNewTaskToReadyList+0xc8>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d802      	bhi.n	800ce52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce4c:	4a1f      	ldr	r2, [pc, #124]	; (800cecc <prvAddNewTaskToReadyList+0xc8>)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce52:	4b20      	ldr	r3, [pc, #128]	; (800ced4 <prvAddNewTaskToReadyList+0xd0>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	3301      	adds	r3, #1
 800ce58:	4a1e      	ldr	r2, [pc, #120]	; (800ced4 <prvAddNewTaskToReadyList+0xd0>)
 800ce5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce5c:	4b1d      	ldr	r3, [pc, #116]	; (800ced4 <prvAddNewTaskToReadyList+0xd0>)
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce68:	4b1b      	ldr	r3, [pc, #108]	; (800ced8 <prvAddNewTaskToReadyList+0xd4>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d903      	bls.n	800ce78 <prvAddNewTaskToReadyList+0x74>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce74:	4a18      	ldr	r2, [pc, #96]	; (800ced8 <prvAddNewTaskToReadyList+0xd4>)
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4413      	add	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4a15      	ldr	r2, [pc, #84]	; (800cedc <prvAddNewTaskToReadyList+0xd8>)
 800ce86:	441a      	add	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	4610      	mov	r0, r2
 800ce90:	f7fe fc0f 	bl	800b6b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce94:	f7fe fdee 	bl	800ba74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce98:	4b0d      	ldr	r3, [pc, #52]	; (800ced0 <prvAddNewTaskToReadyList+0xcc>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00e      	beq.n	800cebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cea0:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <prvAddNewTaskToReadyList+0xc8>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d207      	bcs.n	800cebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ceae:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <prvAddNewTaskToReadyList+0xdc>)
 800ceb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb4:	601a      	str	r2, [r3, #0]
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cebe:	bf00      	nop
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	200049c4 	.word	0x200049c4
 800cecc:	200044f0 	.word	0x200044f0
 800ced0:	200049d0 	.word	0x200049d0
 800ced4:	200049e0 	.word	0x200049e0
 800ced8:	200049cc 	.word	0x200049cc
 800cedc:	200044f4 	.word	0x200044f4
 800cee0:	e000ed04 	.word	0xe000ed04

0800cee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ceec:	2300      	movs	r3, #0
 800ceee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d017      	beq.n	800cf26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cef6:	4b13      	ldr	r3, [pc, #76]	; (800cf44 <vTaskDelay+0x60>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00a      	beq.n	800cf14 <vTaskDelay+0x30>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	60bb      	str	r3, [r7, #8]
}
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf14:	f000 f88a 	bl	800d02c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf18:	2100      	movs	r1, #0
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 ffd4 	bl	800dec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf20:	f000 f8ca 	bl	800d0b8 <xTaskResumeAll>
 800cf24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d107      	bne.n	800cf3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf2c:	4b06      	ldr	r3, [pc, #24]	; (800cf48 <vTaskDelay+0x64>)
 800cf2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf32:	601a      	str	r2, [r3, #0]
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf3c:	bf00      	nop
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	200049ec 	.word	0x200049ec
 800cf48:	e000ed04 	.word	0xe000ed04

0800cf4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08a      	sub	sp, #40	; 0x28
 800cf50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf56:	2300      	movs	r3, #0
 800cf58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf5a:	463a      	mov	r2, r7
 800cf5c:	1d39      	adds	r1, r7, #4
 800cf5e:	f107 0308 	add.w	r3, r7, #8
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe f95a 	bl	800b21c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf68:	6839      	ldr	r1, [r7, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	9202      	str	r2, [sp, #8]
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	2300      	movs	r3, #0
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	2300      	movs	r3, #0
 800cf78:	460a      	mov	r2, r1
 800cf7a:	4924      	ldr	r1, [pc, #144]	; (800d00c <vTaskStartScheduler+0xc0>)
 800cf7c:	4824      	ldr	r0, [pc, #144]	; (800d010 <vTaskStartScheduler+0xc4>)
 800cf7e:	f7ff fdf3 	bl	800cb68 <xTaskCreateStatic>
 800cf82:	4603      	mov	r3, r0
 800cf84:	4a23      	ldr	r2, [pc, #140]	; (800d014 <vTaskStartScheduler+0xc8>)
 800cf86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf88:	4b22      	ldr	r3, [pc, #136]	; (800d014 <vTaskStartScheduler+0xc8>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d002      	beq.n	800cf96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf90:	2301      	movs	r3, #1
 800cf92:	617b      	str	r3, [r7, #20]
 800cf94:	e001      	b.n	800cf9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf96:	2300      	movs	r3, #0
 800cf98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d102      	bne.n	800cfa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cfa0:	f000 ffe6 	bl	800df70 <xTimerCreateTimerTask>
 800cfa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d11b      	bne.n	800cfe4 <vTaskStartScheduler+0x98>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	613b      	str	r3, [r7, #16]
}
 800cfbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cfc0:	4b15      	ldr	r3, [pc, #84]	; (800d018 <vTaskStartScheduler+0xcc>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	335c      	adds	r3, #92	; 0x5c
 800cfc6:	4a15      	ldr	r2, [pc, #84]	; (800d01c <vTaskStartScheduler+0xd0>)
 800cfc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cfca:	4b15      	ldr	r3, [pc, #84]	; (800d020 <vTaskStartScheduler+0xd4>)
 800cfcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cfd2:	4b14      	ldr	r3, [pc, #80]	; (800d024 <vTaskStartScheduler+0xd8>)
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cfd8:	4b13      	ldr	r3, [pc, #76]	; (800d028 <vTaskStartScheduler+0xdc>)
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cfde:	f7fe fc77 	bl	800b8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cfe2:	e00e      	b.n	800d002 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfea:	d10a      	bne.n	800d002 <vTaskStartScheduler+0xb6>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	60fb      	str	r3, [r7, #12]
}
 800cffe:	bf00      	nop
 800d000:	e7fe      	b.n	800d000 <vTaskStartScheduler+0xb4>
}
 800d002:	bf00      	nop
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	0800e84c 	.word	0x0800e84c
 800d010:	0800d745 	.word	0x0800d745
 800d014:	200049e8 	.word	0x200049e8
 800d018:	200044f0 	.word	0x200044f0
 800d01c:	2000018c 	.word	0x2000018c
 800d020:	200049e4 	.word	0x200049e4
 800d024:	200049d0 	.word	0x200049d0
 800d028:	200049c8 	.word	0x200049c8

0800d02c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d02c:	b480      	push	{r7}
 800d02e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d030:	4b04      	ldr	r3, [pc, #16]	; (800d044 <vTaskSuspendAll+0x18>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	3301      	adds	r3, #1
 800d036:	4a03      	ldr	r2, [pc, #12]	; (800d044 <vTaskSuspendAll+0x18>)
 800d038:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d03a:	bf00      	nop
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr
 800d044:	200049ec 	.word	0x200049ec

0800d048 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800d04e:	2300      	movs	r3, #0
 800d050:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800d052:	4b14      	ldr	r3, [pc, #80]	; (800d0a4 <prvGetExpectedIdleTime+0x5c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800d05a:	2301      	movs	r3, #1
 800d05c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d05e:	4b12      	ldr	r3, [pc, #72]	; (800d0a8 <prvGetExpectedIdleTime+0x60>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d064:	2b00      	cmp	r3, #0
 800d066:	d002      	beq.n	800d06e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	607b      	str	r3, [r7, #4]
 800d06c:	e012      	b.n	800d094 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d06e:	4b0f      	ldr	r3, [pc, #60]	; (800d0ac <prvGetExpectedIdleTime+0x64>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b01      	cmp	r3, #1
 800d074:	d902      	bls.n	800d07c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	607b      	str	r3, [r7, #4]
 800d07a:	e00b      	b.n	800d094 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d002      	beq.n	800d088 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	607b      	str	r3, [r7, #4]
 800d086:	e005      	b.n	800d094 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d088:	4b09      	ldr	r3, [pc, #36]	; (800d0b0 <prvGetExpectedIdleTime+0x68>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <prvGetExpectedIdleTime+0x6c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800d094:	687b      	ldr	r3, [r7, #4]
	}
 800d096:	4618      	mov	r0, r3
 800d098:	370c      	adds	r7, #12
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	200049cc 	.word	0x200049cc
 800d0a8:	200044f0 	.word	0x200044f0
 800d0ac:	200044f4 	.word	0x200044f4
 800d0b0:	200049e4 	.word	0x200049e4
 800d0b4:	200049c8 	.word	0x200049c8

0800d0b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0c6:	4b42      	ldr	r3, [pc, #264]	; (800d1d0 <xTaskResumeAll+0x118>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10a      	bne.n	800d0e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	603b      	str	r3, [r7, #0]
}
 800d0e0:	bf00      	nop
 800d0e2:	e7fe      	b.n	800d0e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0e4:	f7fe fc96 	bl	800ba14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0e8:	4b39      	ldr	r3, [pc, #228]	; (800d1d0 <xTaskResumeAll+0x118>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	4a38      	ldr	r2, [pc, #224]	; (800d1d0 <xTaskResumeAll+0x118>)
 800d0f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0f2:	4b37      	ldr	r3, [pc, #220]	; (800d1d0 <xTaskResumeAll+0x118>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d162      	bne.n	800d1c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0fa:	4b36      	ldr	r3, [pc, #216]	; (800d1d4 <xTaskResumeAll+0x11c>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d05e      	beq.n	800d1c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d102:	e02f      	b.n	800d164 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d104:	4b34      	ldr	r3, [pc, #208]	; (800d1d8 <xTaskResumeAll+0x120>)
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	3318      	adds	r3, #24
 800d110:	4618      	mov	r0, r3
 800d112:	f7fe fb2b 	bl	800b76c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3304      	adds	r3, #4
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fe fb26 	bl	800b76c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d124:	4b2d      	ldr	r3, [pc, #180]	; (800d1dc <xTaskResumeAll+0x124>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d903      	bls.n	800d134 <xTaskResumeAll+0x7c>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d130:	4a2a      	ldr	r2, [pc, #168]	; (800d1dc <xTaskResumeAll+0x124>)
 800d132:	6013      	str	r3, [r2, #0]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d138:	4613      	mov	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4413      	add	r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4a27      	ldr	r2, [pc, #156]	; (800d1e0 <xTaskResumeAll+0x128>)
 800d142:	441a      	add	r2, r3
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	3304      	adds	r3, #4
 800d148:	4619      	mov	r1, r3
 800d14a:	4610      	mov	r0, r2
 800d14c:	f7fe fab1 	bl	800b6b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d154:	4b23      	ldr	r3, [pc, #140]	; (800d1e4 <xTaskResumeAll+0x12c>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d302      	bcc.n	800d164 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d15e:	4b22      	ldr	r3, [pc, #136]	; (800d1e8 <xTaskResumeAll+0x130>)
 800d160:	2201      	movs	r2, #1
 800d162:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d164:	4b1c      	ldr	r3, [pc, #112]	; (800d1d8 <xTaskResumeAll+0x120>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1cb      	bne.n	800d104 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d172:	f000 fbf9 	bl	800d968 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d176:	4b1d      	ldr	r3, [pc, #116]	; (800d1ec <xTaskResumeAll+0x134>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d010      	beq.n	800d1a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d182:	f000 f86f 	bl	800d264 <xTaskIncrementTick>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d18c:	4b16      	ldr	r3, [pc, #88]	; (800d1e8 <xTaskResumeAll+0x130>)
 800d18e:	2201      	movs	r2, #1
 800d190:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	3b01      	subs	r3, #1
 800d196:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1f1      	bne.n	800d182 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d19e:	4b13      	ldr	r3, [pc, #76]	; (800d1ec <xTaskResumeAll+0x134>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d1a4:	4b10      	ldr	r3, [pc, #64]	; (800d1e8 <xTaskResumeAll+0x130>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d009      	beq.n	800d1c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d1b0:	4b0f      	ldr	r3, [pc, #60]	; (800d1f0 <xTaskResumeAll+0x138>)
 800d1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1c0:	f7fe fc58 	bl	800ba74 <vPortExitCritical>

	return xAlreadyYielded;
 800d1c4:	68bb      	ldr	r3, [r7, #8]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	200049ec 	.word	0x200049ec
 800d1d4:	200049c4 	.word	0x200049c4
 800d1d8:	20004984 	.word	0x20004984
 800d1dc:	200049cc 	.word	0x200049cc
 800d1e0:	200044f4 	.word	0x200044f4
 800d1e4:	200044f0 	.word	0x200044f0
 800d1e8:	200049d8 	.word	0x200049d8
 800d1ec:	200049d4 	.word	0x200049d4
 800d1f0:	e000ed04 	.word	0xe000ed04

0800d1f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1fa:	4b05      	ldr	r3, [pc, #20]	; (800d210 <xTaskGetTickCount+0x1c>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d200:	687b      	ldr	r3, [r7, #4]
}
 800d202:	4618      	mov	r0, r3
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	200049c8 	.word	0x200049c8

0800d214 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800d21c:	4b0f      	ldr	r3, [pc, #60]	; (800d25c <vTaskStepTick+0x48>)
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	441a      	add	r2, r3
 800d224:	4b0e      	ldr	r3, [pc, #56]	; (800d260 <vTaskStepTick+0x4c>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d90a      	bls.n	800d242 <vTaskStepTick+0x2e>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	60fb      	str	r3, [r7, #12]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800d242:	4b06      	ldr	r3, [pc, #24]	; (800d25c <vTaskStepTick+0x48>)
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4413      	add	r3, r2
 800d24a:	4a04      	ldr	r2, [pc, #16]	; (800d25c <vTaskStepTick+0x48>)
 800d24c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800d24e:	bf00      	nop
 800d250:	3714      	adds	r7, #20
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	200049c8 	.word	0x200049c8
 800d260:	200049e4 	.word	0x200049e4

0800d264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d26a:	2300      	movs	r3, #0
 800d26c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d26e:	4b53      	ldr	r3, [pc, #332]	; (800d3bc <xTaskIncrementTick+0x158>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	f040 8095 	bne.w	800d3a2 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d278:	4b51      	ldr	r3, [pc, #324]	; (800d3c0 <xTaskIncrementTick+0x15c>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3301      	adds	r3, #1
 800d27e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d280:	4a4f      	ldr	r2, [pc, #316]	; (800d3c0 <xTaskIncrementTick+0x15c>)
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d120      	bne.n	800d2ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d28c:	4b4d      	ldr	r3, [pc, #308]	; (800d3c4 <xTaskIncrementTick+0x160>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00a      	beq.n	800d2ac <xTaskIncrementTick+0x48>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	603b      	str	r3, [r7, #0]
}
 800d2a8:	bf00      	nop
 800d2aa:	e7fe      	b.n	800d2aa <xTaskIncrementTick+0x46>
 800d2ac:	4b45      	ldr	r3, [pc, #276]	; (800d3c4 <xTaskIncrementTick+0x160>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	60fb      	str	r3, [r7, #12]
 800d2b2:	4b45      	ldr	r3, [pc, #276]	; (800d3c8 <xTaskIncrementTick+0x164>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a43      	ldr	r2, [pc, #268]	; (800d3c4 <xTaskIncrementTick+0x160>)
 800d2b8:	6013      	str	r3, [r2, #0]
 800d2ba:	4a43      	ldr	r2, [pc, #268]	; (800d3c8 <xTaskIncrementTick+0x164>)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	4b42      	ldr	r3, [pc, #264]	; (800d3cc <xTaskIncrementTick+0x168>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	4a41      	ldr	r2, [pc, #260]	; (800d3cc <xTaskIncrementTick+0x168>)
 800d2c8:	6013      	str	r3, [r2, #0]
 800d2ca:	f000 fb4d 	bl	800d968 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d2ce:	4b40      	ldr	r3, [pc, #256]	; (800d3d0 <xTaskIncrementTick+0x16c>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d349      	bcc.n	800d36c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2d8:	4b3a      	ldr	r3, [pc, #232]	; (800d3c4 <xTaskIncrementTick+0x160>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d104      	bne.n	800d2ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2e2:	4b3b      	ldr	r3, [pc, #236]	; (800d3d0 <xTaskIncrementTick+0x16c>)
 800d2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e8:	601a      	str	r2, [r3, #0]
					break;
 800d2ea:	e03f      	b.n	800d36c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ec:	4b35      	ldr	r3, [pc, #212]	; (800d3c4 <xTaskIncrementTick+0x160>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2fc:	693a      	ldr	r2, [r7, #16]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	429a      	cmp	r2, r3
 800d302:	d203      	bcs.n	800d30c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d304:	4a32      	ldr	r2, [pc, #200]	; (800d3d0 <xTaskIncrementTick+0x16c>)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d30a:	e02f      	b.n	800d36c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	3304      	adds	r3, #4
 800d310:	4618      	mov	r0, r3
 800d312:	f7fe fa2b 	bl	800b76c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d004      	beq.n	800d328 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	3318      	adds	r3, #24
 800d322:	4618      	mov	r0, r3
 800d324:	f7fe fa22 	bl	800b76c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32c:	4b29      	ldr	r3, [pc, #164]	; (800d3d4 <xTaskIncrementTick+0x170>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	429a      	cmp	r2, r3
 800d332:	d903      	bls.n	800d33c <xTaskIncrementTick+0xd8>
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d338:	4a26      	ldr	r2, [pc, #152]	; (800d3d4 <xTaskIncrementTick+0x170>)
 800d33a:	6013      	str	r3, [r2, #0]
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d340:	4613      	mov	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4413      	add	r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4a23      	ldr	r2, [pc, #140]	; (800d3d8 <xTaskIncrementTick+0x174>)
 800d34a:	441a      	add	r2, r3
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	3304      	adds	r3, #4
 800d350:	4619      	mov	r1, r3
 800d352:	4610      	mov	r0, r2
 800d354:	f7fe f9ad 	bl	800b6b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35c:	4b1f      	ldr	r3, [pc, #124]	; (800d3dc <xTaskIncrementTick+0x178>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	429a      	cmp	r2, r3
 800d364:	d3b8      	bcc.n	800d2d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d366:	2301      	movs	r3, #1
 800d368:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d36a:	e7b5      	b.n	800d2d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d36c:	4b1b      	ldr	r3, [pc, #108]	; (800d3dc <xTaskIncrementTick+0x178>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d372:	4919      	ldr	r1, [pc, #100]	; (800d3d8 <xTaskIncrementTick+0x174>)
 800d374:	4613      	mov	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4413      	add	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	440b      	add	r3, r1
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d901      	bls.n	800d388 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d384:	2301      	movs	r3, #1
 800d386:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800d388:	4b15      	ldr	r3, [pc, #84]	; (800d3e0 <xTaskIncrementTick+0x17c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800d390:	f7f5 f813 	bl	80023ba <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d394:	4b13      	ldr	r3, [pc, #76]	; (800d3e4 <xTaskIncrementTick+0x180>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d009      	beq.n	800d3b0 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800d39c:	2301      	movs	r3, #1
 800d39e:	617b      	str	r3, [r7, #20]
 800d3a0:	e006      	b.n	800d3b0 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d3a2:	4b0f      	ldr	r3, [pc, #60]	; (800d3e0 <xTaskIncrementTick+0x17c>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	4a0d      	ldr	r2, [pc, #52]	; (800d3e0 <xTaskIncrementTick+0x17c>)
 800d3aa:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800d3ac:	f7f5 f805 	bl	80023ba <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800d3b0:	697b      	ldr	r3, [r7, #20]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3718      	adds	r7, #24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	200049ec 	.word	0x200049ec
 800d3c0:	200049c8 	.word	0x200049c8
 800d3c4:	2000497c 	.word	0x2000497c
 800d3c8:	20004980 	.word	0x20004980
 800d3cc:	200049dc 	.word	0x200049dc
 800d3d0:	200049e4 	.word	0x200049e4
 800d3d4:	200049cc 	.word	0x200049cc
 800d3d8:	200044f4 	.word	0x200044f4
 800d3dc:	200044f0 	.word	0x200044f0
 800d3e0:	200049d4 	.word	0x200049d4
 800d3e4:	200049d8 	.word	0x200049d8

0800d3e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d3ee:	4b32      	ldr	r3, [pc, #200]	; (800d4b8 <vTaskSwitchContext+0xd0>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d003      	beq.n	800d3fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d3f6:	4b31      	ldr	r3, [pc, #196]	; (800d4bc <vTaskSwitchContext+0xd4>)
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3fc:	e057      	b.n	800d4ae <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800d3fe:	4b2f      	ldr	r3, [pc, #188]	; (800d4bc <vTaskSwitchContext+0xd4>)
 800d400:	2200      	movs	r2, #0
 800d402:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d404:	4b2e      	ldr	r3, [pc, #184]	; (800d4c0 <vTaskSwitchContext+0xd8>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	4b2d      	ldr	r3, [pc, #180]	; (800d4c0 <vTaskSwitchContext+0xd8>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d410:	429a      	cmp	r2, r3
 800d412:	d808      	bhi.n	800d426 <vTaskSwitchContext+0x3e>
 800d414:	4b2a      	ldr	r3, [pc, #168]	; (800d4c0 <vTaskSwitchContext+0xd8>)
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	4b29      	ldr	r3, [pc, #164]	; (800d4c0 <vTaskSwitchContext+0xd8>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	3334      	adds	r3, #52	; 0x34
 800d41e:	4619      	mov	r1, r3
 800d420:	4610      	mov	r0, r2
 800d422:	f7f4 ffd1 	bl	80023c8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d426:	4b27      	ldr	r3, [pc, #156]	; (800d4c4 <vTaskSwitchContext+0xdc>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	e010      	b.n	800d450 <vTaskSwitchContext+0x68>
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10a      	bne.n	800d44a <vTaskSwitchContext+0x62>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	607b      	str	r3, [r7, #4]
}
 800d446:	bf00      	nop
 800d448:	e7fe      	b.n	800d448 <vTaskSwitchContext+0x60>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3b01      	subs	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	491d      	ldr	r1, [pc, #116]	; (800d4c8 <vTaskSwitchContext+0xe0>)
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	4613      	mov	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4413      	add	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	440b      	add	r3, r1
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d0e4      	beq.n	800d42e <vTaskSwitchContext+0x46>
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	4613      	mov	r3, r2
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	4a16      	ldr	r2, [pc, #88]	; (800d4c8 <vTaskSwitchContext+0xe0>)
 800d470:	4413      	add	r3, r2
 800d472:	60bb      	str	r3, [r7, #8]
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	685a      	ldr	r2, [r3, #4]
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	605a      	str	r2, [r3, #4]
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	685a      	ldr	r2, [r3, #4]
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	3308      	adds	r3, #8
 800d486:	429a      	cmp	r2, r3
 800d488:	d104      	bne.n	800d494 <vTaskSwitchContext+0xac>
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	685a      	ldr	r2, [r3, #4]
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	605a      	str	r2, [r3, #4]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	4a09      	ldr	r2, [pc, #36]	; (800d4c0 <vTaskSwitchContext+0xd8>)
 800d49c:	6013      	str	r3, [r2, #0]
 800d49e:	4a09      	ldr	r2, [pc, #36]	; (800d4c4 <vTaskSwitchContext+0xdc>)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d4a4:	4b06      	ldr	r3, [pc, #24]	; (800d4c0 <vTaskSwitchContext+0xd8>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	335c      	adds	r3, #92	; 0x5c
 800d4aa:	4a08      	ldr	r2, [pc, #32]	; (800d4cc <vTaskSwitchContext+0xe4>)
 800d4ac:	6013      	str	r3, [r2, #0]
}
 800d4ae:	bf00      	nop
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	200049ec 	.word	0x200049ec
 800d4bc:	200049d8 	.word	0x200049d8
 800d4c0:	200044f0 	.word	0x200044f0
 800d4c4:	200049cc 	.word	0x200049cc
 800d4c8:	200044f4 	.word	0x200044f4
 800d4cc:	2000018c 	.word	0x2000018c

0800d4d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10a      	bne.n	800d4f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	60fb      	str	r3, [r7, #12]
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4f6:	4b07      	ldr	r3, [pc, #28]	; (800d514 <vTaskPlaceOnEventList+0x44>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	3318      	adds	r3, #24
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f7fe f8fb 	bl	800b6fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d504:	2101      	movs	r1, #1
 800d506:	6838      	ldr	r0, [r7, #0]
 800d508:	f000 fcde 	bl	800dec8 <prvAddCurrentTaskToDelayedList>
}
 800d50c:	bf00      	nop
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	200044f0 	.word	0x200044f0

0800d518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10a      	bne.n	800d540 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	617b      	str	r3, [r7, #20]
}
 800d53c:	bf00      	nop
 800d53e:	e7fe      	b.n	800d53e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d540:	4b0a      	ldr	r3, [pc, #40]	; (800d56c <vTaskPlaceOnEventListRestricted+0x54>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	3318      	adds	r3, #24
 800d546:	4619      	mov	r1, r3
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f7fe f8b2 	bl	800b6b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d554:	f04f 33ff 	mov.w	r3, #4294967295
 800d558:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	68b8      	ldr	r0, [r7, #8]
 800d55e:	f000 fcb3 	bl	800dec8 <prvAddCurrentTaskToDelayedList>
	}
 800d562:	bf00      	nop
 800d564:	3718      	adds	r7, #24
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	200044f0 	.word	0x200044f0

0800d570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d10a      	bne.n	800d59c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58a:	f383 8811 	msr	BASEPRI, r3
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f3bf 8f4f 	dsb	sy
 800d596:	60fb      	str	r3, [r7, #12]
}
 800d598:	bf00      	nop
 800d59a:	e7fe      	b.n	800d59a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	3318      	adds	r3, #24
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fe f8e3 	bl	800b76c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5a6:	4b1f      	ldr	r3, [pc, #124]	; (800d624 <xTaskRemoveFromEventList+0xb4>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d11f      	bne.n	800d5ee <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7fe f8da 	bl	800b76c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5bc:	4b1a      	ldr	r3, [pc, #104]	; (800d628 <xTaskRemoveFromEventList+0xb8>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d903      	bls.n	800d5cc <xTaskRemoveFromEventList+0x5c>
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c8:	4a17      	ldr	r2, [pc, #92]	; (800d628 <xTaskRemoveFromEventList+0xb8>)
 800d5ca:	6013      	str	r3, [r2, #0]
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	4413      	add	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	4a14      	ldr	r2, [pc, #80]	; (800d62c <xTaskRemoveFromEventList+0xbc>)
 800d5da:	441a      	add	r2, r3
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	3304      	adds	r3, #4
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	f7fe f865 	bl	800b6b2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800d5e8:	f000 f9be 	bl	800d968 <prvResetNextTaskUnblockTime>
 800d5ec:	e005      	b.n	800d5fa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	3318      	adds	r3, #24
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	480e      	ldr	r0, [pc, #56]	; (800d630 <xTaskRemoveFromEventList+0xc0>)
 800d5f6:	f7fe f85c 	bl	800b6b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fe:	4b0d      	ldr	r3, [pc, #52]	; (800d634 <xTaskRemoveFromEventList+0xc4>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d604:	429a      	cmp	r2, r3
 800d606:	d905      	bls.n	800d614 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d608:	2301      	movs	r3, #1
 800d60a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d60c:	4b0a      	ldr	r3, [pc, #40]	; (800d638 <xTaskRemoveFromEventList+0xc8>)
 800d60e:	2201      	movs	r2, #1
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	e001      	b.n	800d618 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d614:	2300      	movs	r3, #0
 800d616:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d618:	697b      	ldr	r3, [r7, #20]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	200049ec 	.word	0x200049ec
 800d628:	200049cc 	.word	0x200049cc
 800d62c:	200044f4 	.word	0x200044f4
 800d630:	20004984 	.word	0x20004984
 800d634:	200044f0 	.word	0x200044f0
 800d638:	200049d8 	.word	0x200049d8

0800d63c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d644:	4b06      	ldr	r3, [pc, #24]	; (800d660 <vTaskInternalSetTimeOutState+0x24>)
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d64c:	4b05      	ldr	r3, [pc, #20]	; (800d664 <vTaskInternalSetTimeOutState+0x28>)
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	605a      	str	r2, [r3, #4]
}
 800d654:	bf00      	nop
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	200049dc 	.word	0x200049dc
 800d664:	200049c8 	.word	0x200049c8

0800d668 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10a      	bne.n	800d68e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	613b      	str	r3, [r7, #16]
}
 800d68a:	bf00      	nop
 800d68c:	e7fe      	b.n	800d68c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10a      	bne.n	800d6aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	60fb      	str	r3, [r7, #12]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d6aa:	f7fe f9b3 	bl	800ba14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d6ae:	4b1d      	ldr	r3, [pc, #116]	; (800d724 <xTaskCheckForTimeOut+0xbc>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	69ba      	ldr	r2, [r7, #24]
 800d6ba:	1ad3      	subs	r3, r2, r3
 800d6bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c6:	d102      	bne.n	800d6ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	61fb      	str	r3, [r7, #28]
 800d6cc:	e023      	b.n	800d716 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	4b15      	ldr	r3, [pc, #84]	; (800d728 <xTaskCheckForTimeOut+0xc0>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d007      	beq.n	800d6ea <xTaskCheckForTimeOut+0x82>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	69ba      	ldr	r2, [r7, #24]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d302      	bcc.n	800d6ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	61fb      	str	r3, [r7, #28]
 800d6e8:	e015      	b.n	800d716 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	697a      	ldr	r2, [r7, #20]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d20b      	bcs.n	800d70c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	1ad2      	subs	r2, r2, r3
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7ff ff9b 	bl	800d63c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d706:	2300      	movs	r3, #0
 800d708:	61fb      	str	r3, [r7, #28]
 800d70a:	e004      	b.n	800d716 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	2200      	movs	r2, #0
 800d710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d712:	2301      	movs	r3, #1
 800d714:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d716:	f7fe f9ad 	bl	800ba74 <vPortExitCritical>

	return xReturn;
 800d71a:	69fb      	ldr	r3, [r7, #28]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3720      	adds	r7, #32
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	200049c8 	.word	0x200049c8
 800d728:	200049dc 	.word	0x200049dc

0800d72c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d72c:	b480      	push	{r7}
 800d72e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d730:	4b03      	ldr	r3, [pc, #12]	; (800d740 <vTaskMissedYield+0x14>)
 800d732:	2201      	movs	r2, #1
 800d734:	601a      	str	r2, [r3, #0]
}
 800d736:	bf00      	nop
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr
 800d740:	200049d8 	.word	0x200049d8

0800d744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d74c:	f000 f8aa 	bl	800d8a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d750:	4b19      	ldr	r3, [pc, #100]	; (800d7b8 <prvIdleTask+0x74>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d907      	bls.n	800d768 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d758:	4b18      	ldr	r3, [pc, #96]	; (800d7bc <prvIdleTask+0x78>)
 800d75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d75e:	601a      	str	r2, [r3, #0]
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d768:	f7f4 fe20 	bl	80023ac <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800d76c:	f7ff fc6c 	bl	800d048 <prvGetExpectedIdleTime>
 800d770:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d9e9      	bls.n	800d74c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800d778:	f7ff fc58 	bl	800d02c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800d77c:	4b10      	ldr	r3, [pc, #64]	; (800d7c0 <prvIdleTask+0x7c>)
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	4b10      	ldr	r3, [pc, #64]	; (800d7c4 <prvIdleTask+0x80>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	429a      	cmp	r2, r3
 800d786:	d20a      	bcs.n	800d79e <prvIdleTask+0x5a>
	__asm volatile
 800d788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	60bb      	str	r3, [r7, #8]
}
 800d79a:	bf00      	nop
 800d79c:	e7fe      	b.n	800d79c <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800d79e:	f7ff fc53 	bl	800d048 <prvGetExpectedIdleTime>
 800d7a2:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d902      	bls.n	800d7b0 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7fe f9e6 	bl	800bb7c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800d7b0:	f7ff fc82 	bl	800d0b8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800d7b4:	e7ca      	b.n	800d74c <prvIdleTask+0x8>
 800d7b6:	bf00      	nop
 800d7b8:	200044f4 	.word	0x200044f4
 800d7bc:	e000ed04 	.word	0xe000ed04
 800d7c0:	200049e4 	.word	0x200049e4
 800d7c4:	200049c8 	.word	0x200049c8

0800d7c8 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800d7d6:	4b0f      	ldr	r3, [pc, #60]	; (800d814 <eTaskConfirmSleepModeStatus+0x4c>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	71fb      	strb	r3, [r7, #7]
 800d7e2:	e010      	b.n	800d806 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800d7e4:	4b0c      	ldr	r3, [pc, #48]	; (800d818 <eTaskConfirmSleepModeStatus+0x50>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	71fb      	strb	r3, [r7, #7]
 800d7f0:	e009      	b.n	800d806 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800d7f2:	4b0a      	ldr	r3, [pc, #40]	; (800d81c <eTaskConfirmSleepModeStatus+0x54>)
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	4b0a      	ldr	r3, [pc, #40]	; (800d820 <eTaskConfirmSleepModeStatus+0x58>)
 800d7f8:	6819      	ldr	r1, [r3, #0]
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	1acb      	subs	r3, r1, r3
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d101      	bne.n	800d806 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800d802:	2302      	movs	r3, #2
 800d804:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800d806:	79fb      	ldrb	r3, [r7, #7]
	}
 800d808:	4618      	mov	r0, r3
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr
 800d814:	20004984 	.word	0x20004984
 800d818:	200049d8 	.word	0x200049d8
 800d81c:	200049b0 	.word	0x200049b0
 800d820:	200049c4 	.word	0x200049c4

0800d824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d82a:	2300      	movs	r3, #0
 800d82c:	607b      	str	r3, [r7, #4]
 800d82e:	e00c      	b.n	800d84a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	4613      	mov	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	4413      	add	r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4a12      	ldr	r2, [pc, #72]	; (800d884 <prvInitialiseTaskLists+0x60>)
 800d83c:	4413      	add	r3, r2
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fd ff0a 	bl	800b658 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3301      	adds	r3, #1
 800d848:	607b      	str	r3, [r7, #4]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2b37      	cmp	r3, #55	; 0x37
 800d84e:	d9ef      	bls.n	800d830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d850:	480d      	ldr	r0, [pc, #52]	; (800d888 <prvInitialiseTaskLists+0x64>)
 800d852:	f7fd ff01 	bl	800b658 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d856:	480d      	ldr	r0, [pc, #52]	; (800d88c <prvInitialiseTaskLists+0x68>)
 800d858:	f7fd fefe 	bl	800b658 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d85c:	480c      	ldr	r0, [pc, #48]	; (800d890 <prvInitialiseTaskLists+0x6c>)
 800d85e:	f7fd fefb 	bl	800b658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d862:	480c      	ldr	r0, [pc, #48]	; (800d894 <prvInitialiseTaskLists+0x70>)
 800d864:	f7fd fef8 	bl	800b658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d868:	480b      	ldr	r0, [pc, #44]	; (800d898 <prvInitialiseTaskLists+0x74>)
 800d86a:	f7fd fef5 	bl	800b658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d86e:	4b0b      	ldr	r3, [pc, #44]	; (800d89c <prvInitialiseTaskLists+0x78>)
 800d870:	4a05      	ldr	r2, [pc, #20]	; (800d888 <prvInitialiseTaskLists+0x64>)
 800d872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d874:	4b0a      	ldr	r3, [pc, #40]	; (800d8a0 <prvInitialiseTaskLists+0x7c>)
 800d876:	4a05      	ldr	r2, [pc, #20]	; (800d88c <prvInitialiseTaskLists+0x68>)
 800d878:	601a      	str	r2, [r3, #0]
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	200044f4 	.word	0x200044f4
 800d888:	20004954 	.word	0x20004954
 800d88c:	20004968 	.word	0x20004968
 800d890:	20004984 	.word	0x20004984
 800d894:	20004998 	.word	0x20004998
 800d898:	200049b0 	.word	0x200049b0
 800d89c:	2000497c 	.word	0x2000497c
 800d8a0:	20004980 	.word	0x20004980

0800d8a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8aa:	e019      	b.n	800d8e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d8ac:	f7fe f8b2 	bl	800ba14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8b0:	4b10      	ldr	r3, [pc, #64]	; (800d8f4 <prvCheckTasksWaitingTermination+0x50>)
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fd ff55 	bl	800b76c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8c2:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <prvCheckTasksWaitingTermination+0x54>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	4a0b      	ldr	r2, [pc, #44]	; (800d8f8 <prvCheckTasksWaitingTermination+0x54>)
 800d8ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8cc:	4b0b      	ldr	r3, [pc, #44]	; (800d8fc <prvCheckTasksWaitingTermination+0x58>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	4a0a      	ldr	r2, [pc, #40]	; (800d8fc <prvCheckTasksWaitingTermination+0x58>)
 800d8d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8d6:	f7fe f8cd 	bl	800ba74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 f810 	bl	800d900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8e0:	4b06      	ldr	r3, [pc, #24]	; (800d8fc <prvCheckTasksWaitingTermination+0x58>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1e1      	bne.n	800d8ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8e8:	bf00      	nop
 800d8ea:	bf00      	nop
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	20004998 	.word	0x20004998
 800d8f8:	200049c4 	.word	0x200049c4
 800d8fc:	200049ac 	.word	0x200049ac

0800d900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	335c      	adds	r3, #92	; 0x5c
 800d90c:	4618      	mov	r0, r3
 800d90e:	f000 fe85 	bl	800e61c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d108      	bne.n	800d92e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d920:	4618      	mov	r0, r3
 800d922:	f7fd fd7b 	bl	800b41c <vPortFree>
				vPortFree( pxTCB );
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7fd fd78 	bl	800b41c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d92c:	e018      	b.n	800d960 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800d934:	2b01      	cmp	r3, #1
 800d936:	d103      	bne.n	800d940 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7fd fd6f 	bl	800b41c <vPortFree>
	}
 800d93e:	e00f      	b.n	800d960 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800d946:	2b02      	cmp	r3, #2
 800d948:	d00a      	beq.n	800d960 <prvDeleteTCB+0x60>
	__asm volatile
 800d94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	60fb      	str	r3, [r7, #12]
}
 800d95c:	bf00      	nop
 800d95e:	e7fe      	b.n	800d95e <prvDeleteTCB+0x5e>
	}
 800d960:	bf00      	nop
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d96e:	4b0c      	ldr	r3, [pc, #48]	; (800d9a0 <prvResetNextTaskUnblockTime+0x38>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d104      	bne.n	800d982 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d978:	4b0a      	ldr	r3, [pc, #40]	; (800d9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800d97a:	f04f 32ff 	mov.w	r2, #4294967295
 800d97e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d980:	e008      	b.n	800d994 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d982:	4b07      	ldr	r3, [pc, #28]	; (800d9a0 <prvResetNextTaskUnblockTime+0x38>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	4a04      	ldr	r2, [pc, #16]	; (800d9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800d992:	6013      	str	r3, [r2, #0]
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	2000497c 	.word	0x2000497c
 800d9a4:	200049e4 	.word	0x200049e4

0800d9a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d9ae:	4b0b      	ldr	r3, [pc, #44]	; (800d9dc <xTaskGetSchedulerState+0x34>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d102      	bne.n	800d9bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	607b      	str	r3, [r7, #4]
 800d9ba:	e008      	b.n	800d9ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9bc:	4b08      	ldr	r3, [pc, #32]	; (800d9e0 <xTaskGetSchedulerState+0x38>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d102      	bne.n	800d9ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	607b      	str	r3, [r7, #4]
 800d9c8:	e001      	b.n	800d9ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d9ce:	687b      	ldr	r3, [r7, #4]
	}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	200049d0 	.word	0x200049d0
 800d9e0:	200049ec 	.word	0x200049ec

0800d9e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d056      	beq.n	800daa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9fa:	4b2e      	ldr	r3, [pc, #184]	; (800dab4 <xTaskPriorityDisinherit+0xd0>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	429a      	cmp	r2, r3
 800da02:	d00a      	beq.n	800da1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	60fb      	str	r3, [r7, #12]
}
 800da16:	bf00      	nop
 800da18:	e7fe      	b.n	800da18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10a      	bne.n	800da38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	60bb      	str	r3, [r7, #8]
}
 800da34:	bf00      	nop
 800da36:	e7fe      	b.n	800da36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da3c:	1e5a      	subs	r2, r3, #1
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d02c      	beq.n	800daa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da52:	2b00      	cmp	r3, #0
 800da54:	d128      	bne.n	800daa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	3304      	adds	r3, #4
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fd fe86 	bl	800b76c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da78:	4b0f      	ldr	r3, [pc, #60]	; (800dab8 <xTaskPriorityDisinherit+0xd4>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d903      	bls.n	800da88 <xTaskPriorityDisinherit+0xa4>
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da84:	4a0c      	ldr	r2, [pc, #48]	; (800dab8 <xTaskPriorityDisinherit+0xd4>)
 800da86:	6013      	str	r3, [r2, #0]
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da8c:	4613      	mov	r3, r2
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	4413      	add	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4a09      	ldr	r2, [pc, #36]	; (800dabc <xTaskPriorityDisinherit+0xd8>)
 800da96:	441a      	add	r2, r3
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	3304      	adds	r3, #4
 800da9c:	4619      	mov	r1, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7fd fe07 	bl	800b6b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800daa4:	2301      	movs	r3, #1
 800daa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800daa8:	697b      	ldr	r3, [r7, #20]
	}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	200044f0 	.word	0x200044f0
 800dab8:	200049cc 	.word	0x200049cc
 800dabc:	200044f4 	.word	0x200044f4

0800dac0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
 800dacc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800dace:	f7fd ffa1 	bl	800ba14 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800dad2:	4b29      	ldr	r3, [pc, #164]	; (800db78 <xTaskNotifyWait+0xb8>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	2b02      	cmp	r3, #2
 800dade:	d01c      	beq.n	800db1a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800dae0:	4b25      	ldr	r3, [pc, #148]	; (800db78 <xTaskNotifyWait+0xb8>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	43d2      	mvns	r2, r2
 800daec:	400a      	ands	r2, r1
 800daee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800daf2:	4b21      	ldr	r3, [pc, #132]	; (800db78 <xTaskNotifyWait+0xb8>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00b      	beq.n	800db1a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db02:	2101      	movs	r1, #1
 800db04:	6838      	ldr	r0, [r7, #0]
 800db06:	f000 f9df 	bl	800dec8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800db0a:	4b1c      	ldr	r3, [pc, #112]	; (800db7c <xTaskNotifyWait+0xbc>)
 800db0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db10:	601a      	str	r2, [r3, #0]
 800db12:	f3bf 8f4f 	dsb	sy
 800db16:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800db1a:	f7fd ffab 	bl	800ba74 <vPortExitCritical>

		taskENTER_CRITICAL();
 800db1e:	f7fd ff79 	bl	800ba14 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d005      	beq.n	800db34 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800db28:	4b13      	ldr	r3, [pc, #76]	; (800db78 <xTaskNotifyWait+0xb8>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800db34:	4b10      	ldr	r3, [pc, #64]	; (800db78 <xTaskNotifyWait+0xb8>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d002      	beq.n	800db48 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800db42:	2300      	movs	r3, #0
 800db44:	617b      	str	r3, [r7, #20]
 800db46:	e00a      	b.n	800db5e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800db48:	4b0b      	ldr	r3, [pc, #44]	; (800db78 <xTaskNotifyWait+0xb8>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	43d2      	mvns	r2, r2
 800db54:	400a      	ands	r2, r1
 800db56:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				xReturn = pdTRUE;
 800db5a:	2301      	movs	r3, #1
 800db5c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db5e:	4b06      	ldr	r3, [pc, #24]	; (800db78 <xTaskNotifyWait+0xb8>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 800db68:	f7fd ff84 	bl	800ba74 <vPortExitCritical>

		return xReturn;
 800db6c:	697b      	ldr	r3, [r7, #20]
	}
 800db6e:	4618      	mov	r0, r3
 800db70:	3718      	adds	r7, #24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	200044f0 	.word	0x200044f0
 800db7c:	e000ed04 	.word	0xe000ed04

0800db80 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800db80:	b580      	push	{r7, lr}
 800db82:	b08a      	sub	sp, #40	; 0x28
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	603b      	str	r3, [r7, #0]
 800db8c:	4613      	mov	r3, r2
 800db8e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800db90:	2301      	movs	r3, #1
 800db92:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10a      	bne.n	800dbb0 <xTaskGenericNotify+0x30>
	__asm volatile
 800db9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	61bb      	str	r3, [r7, #24]
}
 800dbac:	bf00      	nop
 800dbae:	e7fe      	b.n	800dbae <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800dbb4:	f7fd ff2e 	bl	800ba14 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d004      	beq.n	800dbc8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800dbbe:	6a3b      	ldr	r3, [r7, #32]
 800dbc0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dbc8:	6a3b      	ldr	r3, [r7, #32]
 800dbca:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800dbce:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dbd0:	6a3b      	ldr	r3, [r7, #32]
 800dbd2:	2202      	movs	r2, #2
 800dbd4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 800dbd8:	79fb      	ldrb	r3, [r7, #7]
 800dbda:	2b04      	cmp	r3, #4
 800dbdc:	d82d      	bhi.n	800dc3a <xTaskGenericNotify+0xba>
 800dbde:	a201      	add	r2, pc, #4	; (adr r2, 800dbe4 <xTaskGenericNotify+0x64>)
 800dbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe4:	0800dc5d 	.word	0x0800dc5d
 800dbe8:	0800dbf9 	.word	0x0800dbf9
 800dbec:	0800dc0b 	.word	0x0800dc0b
 800dbf0:	0800dc1b 	.word	0x0800dc1b
 800dbf4:	0800dc25 	.word	0x0800dc25
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
 800dbfa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	431a      	orrs	r2, r3
 800dc02:	6a3b      	ldr	r3, [r7, #32]
 800dc04:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800dc08:	e02b      	b.n	800dc62 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800dc0a:	6a3b      	ldr	r3, [r7, #32]
 800dc0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dc10:	1c5a      	adds	r2, r3, #1
 800dc12:	6a3b      	ldr	r3, [r7, #32]
 800dc14:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800dc18:	e023      	b.n	800dc62 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800dc22:	e01e      	b.n	800dc62 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dc24:	7ffb      	ldrb	r3, [r7, #31]
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d004      	beq.n	800dc34 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dc32:	e016      	b.n	800dc62 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800dc34:	2300      	movs	r3, #0
 800dc36:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800dc38:	e013      	b.n	800dc62 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dc3a:	6a3b      	ldr	r3, [r7, #32]
 800dc3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc44:	d00c      	beq.n	800dc60 <xTaskGenericNotify+0xe0>
	__asm volatile
 800dc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4a:	f383 8811 	msr	BASEPRI, r3
 800dc4e:	f3bf 8f6f 	isb	sy
 800dc52:	f3bf 8f4f 	dsb	sy
 800dc56:	617b      	str	r3, [r7, #20]
}
 800dc58:	bf00      	nop
 800dc5a:	e7fe      	b.n	800dc5a <xTaskGenericNotify+0xda>
					break;
 800dc5c:	bf00      	nop
 800dc5e:	e000      	b.n	800dc62 <xTaskGenericNotify+0xe2>

					break;
 800dc60:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dc62:	7ffb      	ldrb	r3, [r7, #31]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d13c      	bne.n	800dce2 <xTaskGenericNotify+0x162>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc68:	6a3b      	ldr	r3, [r7, #32]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7fd fd7d 	bl	800b76c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800dc72:	6a3b      	ldr	r3, [r7, #32]
 800dc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc76:	4b1e      	ldr	r3, [pc, #120]	; (800dcf0 <xTaskGenericNotify+0x170>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d903      	bls.n	800dc86 <xTaskGenericNotify+0x106>
 800dc7e:	6a3b      	ldr	r3, [r7, #32]
 800dc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc82:	4a1b      	ldr	r2, [pc, #108]	; (800dcf0 <xTaskGenericNotify+0x170>)
 800dc84:	6013      	str	r3, [r2, #0]
 800dc86:	6a3b      	ldr	r3, [r7, #32]
 800dc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	4413      	add	r3, r2
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	4a18      	ldr	r2, [pc, #96]	; (800dcf4 <xTaskGenericNotify+0x174>)
 800dc94:	441a      	add	r2, r3
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	3304      	adds	r3, #4
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	4610      	mov	r0, r2
 800dc9e:	f7fd fd08 	bl	800b6b2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dca2:	6a3b      	ldr	r3, [r7, #32]
 800dca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00a      	beq.n	800dcc0 <xTaskGenericNotify+0x140>
	__asm volatile
 800dcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcae:	f383 8811 	msr	BASEPRI, r3
 800dcb2:	f3bf 8f6f 	isb	sy
 800dcb6:	f3bf 8f4f 	dsb	sy
 800dcba:	613b      	str	r3, [r7, #16]
}
 800dcbc:	bf00      	nop
 800dcbe:	e7fe      	b.n	800dcbe <xTaskGenericNotify+0x13e>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800dcc0:	f7ff fe52 	bl	800d968 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcc4:	6a3b      	ldr	r3, [r7, #32]
 800dcc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcc8:	4b0b      	ldr	r3, [pc, #44]	; (800dcf8 <xTaskGenericNotify+0x178>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d907      	bls.n	800dce2 <xTaskGenericNotify+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800dcd2:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <xTaskGenericNotify+0x17c>)
 800dcd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dce2:	f7fd fec7 	bl	800ba74 <vPortExitCritical>

		return xReturn;
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3728      	adds	r7, #40	; 0x28
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	200049cc 	.word	0x200049cc
 800dcf4:	200044f4 	.word	0x200044f4
 800dcf8:	200044f0 	.word	0x200044f0
 800dcfc:	e000ed04 	.word	0xe000ed04

0800dd00 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b08e      	sub	sp, #56	; 0x38
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	603b      	str	r3, [r7, #0]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800dd10:	2301      	movs	r3, #1
 800dd12:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10a      	bne.n	800dd30 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800dd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1e:	f383 8811 	msr	BASEPRI, r3
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	f3bf 8f4f 	dsb	sy
 800dd2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd2c:	bf00      	nop
 800dd2e:	e7fe      	b.n	800dd2e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd30:	f7fe f836 	bl	800bda0 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800dd38:	f3ef 8211 	mrs	r2, BASEPRI
 800dd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	623a      	str	r2, [r7, #32]
 800dd4e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800dd50:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd52:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d004      	beq.n	800dd64 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd66:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800dd6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	2202      	movs	r2, #2
 800dd72:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 800dd76:	79fb      	ldrb	r3, [r7, #7]
 800dd78:	2b04      	cmp	r3, #4
 800dd7a:	d82f      	bhi.n	800dddc <xTaskGenericNotifyFromISR+0xdc>
 800dd7c:	a201      	add	r2, pc, #4	; (adr r2, 800dd84 <xTaskGenericNotifyFromISR+0x84>)
 800dd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd82:	bf00      	nop
 800dd84:	0800ddff 	.word	0x0800ddff
 800dd88:	0800dd99 	.word	0x0800dd99
 800dd8c:	0800ddab 	.word	0x0800ddab
 800dd90:	0800ddbb 	.word	0x0800ddbb
 800dd94:	0800ddc5 	.word	0x0800ddc5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800dd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	431a      	orrs	r2, r3
 800dda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800dda8:	e02c      	b.n	800de04 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800ddb8:	e024      	b.n	800de04 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ddba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800ddc2:	e01f      	b.n	800de04 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ddc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddc8:	2b02      	cmp	r3, #2
 800ddca:	d004      	beq.n	800ddd6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddce:	68ba      	ldr	r2, [r7, #8]
 800ddd0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ddd4:	e016      	b.n	800de04 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ddda:	e013      	b.n	800de04 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dde6:	d00c      	beq.n	800de02 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddec:	f383 8811 	msr	BASEPRI, r3
 800ddf0:	f3bf 8f6f 	isb	sy
 800ddf4:	f3bf 8f4f 	dsb	sy
 800ddf8:	61bb      	str	r3, [r7, #24]
}
 800ddfa:	bf00      	nop
 800ddfc:	e7fe      	b.n	800ddfc <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ddfe:	bf00      	nop
 800de00:	e000      	b.n	800de04 <xTaskGenericNotifyFromISR+0x104>
					break;
 800de02:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800de04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d146      	bne.n	800de9a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800de0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00a      	beq.n	800de2a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800de14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de18:	f383 8811 	msr	BASEPRI, r3
 800de1c:	f3bf 8f6f 	isb	sy
 800de20:	f3bf 8f4f 	dsb	sy
 800de24:	617b      	str	r3, [r7, #20]
}
 800de26:	bf00      	nop
 800de28:	e7fe      	b.n	800de28 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de2a:	4b21      	ldr	r3, [pc, #132]	; (800deb0 <xTaskGenericNotifyFromISR+0x1b0>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d11d      	bne.n	800de6e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de34:	3304      	adds	r3, #4
 800de36:	4618      	mov	r0, r3
 800de38:	f7fd fc98 	bl	800b76c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de40:	4b1c      	ldr	r3, [pc, #112]	; (800deb4 <xTaskGenericNotifyFromISR+0x1b4>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	429a      	cmp	r2, r3
 800de46:	d903      	bls.n	800de50 <xTaskGenericNotifyFromISR+0x150>
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4c:	4a19      	ldr	r2, [pc, #100]	; (800deb4 <xTaskGenericNotifyFromISR+0x1b4>)
 800de4e:	6013      	str	r3, [r2, #0]
 800de50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de54:	4613      	mov	r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4a16      	ldr	r2, [pc, #88]	; (800deb8 <xTaskGenericNotifyFromISR+0x1b8>)
 800de5e:	441a      	add	r2, r3
 800de60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de62:	3304      	adds	r3, #4
 800de64:	4619      	mov	r1, r3
 800de66:	4610      	mov	r0, r2
 800de68:	f7fd fc23 	bl	800b6b2 <vListInsertEnd>
 800de6c:	e005      	b.n	800de7a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	3318      	adds	r3, #24
 800de72:	4619      	mov	r1, r3
 800de74:	4811      	ldr	r0, [pc, #68]	; (800debc <xTaskGenericNotifyFromISR+0x1bc>)
 800de76:	f7fd fc1c 	bl	800b6b2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de7e:	4b10      	ldr	r3, [pc, #64]	; (800dec0 <xTaskGenericNotifyFromISR+0x1c0>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de84:	429a      	cmp	r2, r3
 800de86:	d908      	bls.n	800de9a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800de88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d002      	beq.n	800de94 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800de8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de90:	2201      	movs	r2, #1
 800de92:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800de94:	4b0b      	ldr	r3, [pc, #44]	; (800dec4 <xTaskGenericNotifyFromISR+0x1c4>)
 800de96:	2201      	movs	r2, #1
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	f383 8811 	msr	BASEPRI, r3
}
 800dea4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800dea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3738      	adds	r7, #56	; 0x38
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	200049ec 	.word	0x200049ec
 800deb4:	200049cc 	.word	0x200049cc
 800deb8:	200044f4 	.word	0x200044f4
 800debc:	20004984 	.word	0x20004984
 800dec0:	200044f0 	.word	0x200044f0
 800dec4:	200049d8 	.word	0x200049d8

0800dec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ded2:	4b21      	ldr	r3, [pc, #132]	; (800df58 <prvAddCurrentTaskToDelayedList+0x90>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ded8:	4b20      	ldr	r3, [pc, #128]	; (800df5c <prvAddCurrentTaskToDelayedList+0x94>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3304      	adds	r3, #4
 800dede:	4618      	mov	r0, r3
 800dee0:	f7fd fc44 	bl	800b76c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deea:	d10a      	bne.n	800df02 <prvAddCurrentTaskToDelayedList+0x3a>
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d007      	beq.n	800df02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800def2:	4b1a      	ldr	r3, [pc, #104]	; (800df5c <prvAddCurrentTaskToDelayedList+0x94>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3304      	adds	r3, #4
 800def8:	4619      	mov	r1, r3
 800defa:	4819      	ldr	r0, [pc, #100]	; (800df60 <prvAddCurrentTaskToDelayedList+0x98>)
 800defc:	f7fd fbd9 	bl	800b6b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df00:	e026      	b.n	800df50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4413      	add	r3, r2
 800df08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df0a:	4b14      	ldr	r3, [pc, #80]	; (800df5c <prvAddCurrentTaskToDelayedList+0x94>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	68ba      	ldr	r2, [r7, #8]
 800df10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	429a      	cmp	r2, r3
 800df18:	d209      	bcs.n	800df2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df1a:	4b12      	ldr	r3, [pc, #72]	; (800df64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	4b0f      	ldr	r3, [pc, #60]	; (800df5c <prvAddCurrentTaskToDelayedList+0x94>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	3304      	adds	r3, #4
 800df24:	4619      	mov	r1, r3
 800df26:	4610      	mov	r0, r2
 800df28:	f7fd fbe7 	bl	800b6fa <vListInsert>
}
 800df2c:	e010      	b.n	800df50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df2e:	4b0e      	ldr	r3, [pc, #56]	; (800df68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <prvAddCurrentTaskToDelayedList+0x94>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3304      	adds	r3, #4
 800df38:	4619      	mov	r1, r3
 800df3a:	4610      	mov	r0, r2
 800df3c:	f7fd fbdd 	bl	800b6fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df40:	4b0a      	ldr	r3, [pc, #40]	; (800df6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	429a      	cmp	r2, r3
 800df48:	d202      	bcs.n	800df50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800df4a:	4a08      	ldr	r2, [pc, #32]	; (800df6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	6013      	str	r3, [r2, #0]
}
 800df50:	bf00      	nop
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	200049c8 	.word	0x200049c8
 800df5c:	200044f0 	.word	0x200044f0
 800df60:	200049b0 	.word	0x200049b0
 800df64:	20004980 	.word	0x20004980
 800df68:	2000497c 	.word	0x2000497c
 800df6c:	200049e4 	.word	0x200049e4

0800df70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b08a      	sub	sp, #40	; 0x28
 800df74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df76:	2300      	movs	r3, #0
 800df78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df7a:	f000 fb07 	bl	800e58c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df7e:	4b1c      	ldr	r3, [pc, #112]	; (800dff0 <xTimerCreateTimerTask+0x80>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d021      	beq.n	800dfca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df86:	2300      	movs	r3, #0
 800df88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df8e:	1d3a      	adds	r2, r7, #4
 800df90:	f107 0108 	add.w	r1, r7, #8
 800df94:	f107 030c 	add.w	r3, r7, #12
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fd f959 	bl	800b250 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df9e:	6879      	ldr	r1, [r7, #4]
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	9202      	str	r2, [sp, #8]
 800dfa6:	9301      	str	r3, [sp, #4]
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	2300      	movs	r3, #0
 800dfae:	460a      	mov	r2, r1
 800dfb0:	4910      	ldr	r1, [pc, #64]	; (800dff4 <xTimerCreateTimerTask+0x84>)
 800dfb2:	4811      	ldr	r0, [pc, #68]	; (800dff8 <xTimerCreateTimerTask+0x88>)
 800dfb4:	f7fe fdd8 	bl	800cb68 <xTaskCreateStatic>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	4a10      	ldr	r2, [pc, #64]	; (800dffc <xTimerCreateTimerTask+0x8c>)
 800dfbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dfbe:	4b0f      	ldr	r3, [pc, #60]	; (800dffc <xTimerCreateTimerTask+0x8c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10a      	bne.n	800dfe6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	613b      	str	r3, [r7, #16]
}
 800dfe2:	bf00      	nop
 800dfe4:	e7fe      	b.n	800dfe4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dfe6:	697b      	ldr	r3, [r7, #20]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	20004a20 	.word	0x20004a20
 800dff4:	0800e864 	.word	0x0800e864
 800dff8:	0800e135 	.word	0x0800e135
 800dffc:	20004a24 	.word	0x20004a24

0800e000 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b08a      	sub	sp, #40	; 0x28
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
 800e00c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e00e:	2300      	movs	r3, #0
 800e010:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10a      	bne.n	800e02e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01c:	f383 8811 	msr	BASEPRI, r3
 800e020:	f3bf 8f6f 	isb	sy
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	623b      	str	r3, [r7, #32]
}
 800e02a:	bf00      	nop
 800e02c:	e7fe      	b.n	800e02c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e02e:	4b1a      	ldr	r3, [pc, #104]	; (800e098 <xTimerGenericCommand+0x98>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d02a      	beq.n	800e08c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	2b05      	cmp	r3, #5
 800e046:	dc18      	bgt.n	800e07a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e048:	f7ff fcae 	bl	800d9a8 <xTaskGetSchedulerState>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b02      	cmp	r3, #2
 800e050:	d109      	bne.n	800e066 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e052:	4b11      	ldr	r3, [pc, #68]	; (800e098 <xTimerGenericCommand+0x98>)
 800e054:	6818      	ldr	r0, [r3, #0]
 800e056:	f107 0110 	add.w	r1, r7, #16
 800e05a:	2300      	movs	r3, #0
 800e05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e05e:	f7fe f853 	bl	800c108 <xQueueGenericSend>
 800e062:	6278      	str	r0, [r7, #36]	; 0x24
 800e064:	e012      	b.n	800e08c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e066:	4b0c      	ldr	r3, [pc, #48]	; (800e098 <xTimerGenericCommand+0x98>)
 800e068:	6818      	ldr	r0, [r3, #0]
 800e06a:	f107 0110 	add.w	r1, r7, #16
 800e06e:	2300      	movs	r3, #0
 800e070:	2200      	movs	r2, #0
 800e072:	f7fe f849 	bl	800c108 <xQueueGenericSend>
 800e076:	6278      	str	r0, [r7, #36]	; 0x24
 800e078:	e008      	b.n	800e08c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e07a:	4b07      	ldr	r3, [pc, #28]	; (800e098 <xTimerGenericCommand+0x98>)
 800e07c:	6818      	ldr	r0, [r3, #0]
 800e07e:	f107 0110 	add.w	r1, r7, #16
 800e082:	2300      	movs	r3, #0
 800e084:	683a      	ldr	r2, [r7, #0]
 800e086:	f7fe f93d 	bl	800c304 <xQueueGenericSendFromISR>
 800e08a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3728      	adds	r7, #40	; 0x28
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	20004a20 	.word	0x20004a20

0800e09c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b088      	sub	sp, #32
 800e0a0:	af02      	add	r7, sp, #8
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a6:	4b22      	ldr	r3, [pc, #136]	; (800e130 <prvProcessExpiredTimer+0x94>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fd fb59 	bl	800b76c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0c0:	f003 0304 	and.w	r3, r3, #4
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d022      	beq.n	800e10e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	699a      	ldr	r2, [r3, #24]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	18d1      	adds	r1, r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	683a      	ldr	r2, [r7, #0]
 800e0d4:	6978      	ldr	r0, [r7, #20]
 800e0d6:	f000 f8d1 	bl	800e27c <prvInsertTimerInActiveList>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d01f      	beq.n	800e120 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	9300      	str	r3, [sp, #0]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	6978      	ldr	r0, [r7, #20]
 800e0ec:	f7ff ff88 	bl	800e000 <xTimerGenericCommand>
 800e0f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d113      	bne.n	800e120 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	60fb      	str	r3, [r7, #12]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e114:	f023 0301 	bic.w	r3, r3, #1
 800e118:	b2da      	uxtb	r2, r3
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	6a1b      	ldr	r3, [r3, #32]
 800e124:	6978      	ldr	r0, [r7, #20]
 800e126:	4798      	blx	r3
}
 800e128:	bf00      	nop
 800e12a:	3718      	adds	r7, #24
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	20004a18 	.word	0x20004a18

0800e134 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e13c:	f107 0308 	add.w	r3, r7, #8
 800e140:	4618      	mov	r0, r3
 800e142:	f000 f857 	bl	800e1f4 <prvGetNextExpireTime>
 800e146:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	4619      	mov	r1, r3
 800e14c:	68f8      	ldr	r0, [r7, #12]
 800e14e:	f000 f803 	bl	800e158 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e152:	f000 f8d5 	bl	800e300 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e156:	e7f1      	b.n	800e13c <prvTimerTask+0x8>

0800e158 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e162:	f7fe ff63 	bl	800d02c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e166:	f107 0308 	add.w	r3, r7, #8
 800e16a:	4618      	mov	r0, r3
 800e16c:	f000 f866 	bl	800e23c <prvSampleTimeNow>
 800e170:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d130      	bne.n	800e1da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d10a      	bne.n	800e194 <prvProcessTimerOrBlockTask+0x3c>
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	429a      	cmp	r2, r3
 800e184:	d806      	bhi.n	800e194 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e186:	f7fe ff97 	bl	800d0b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e18a:	68f9      	ldr	r1, [r7, #12]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff ff85 	bl	800e09c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e192:	e024      	b.n	800e1de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d008      	beq.n	800e1ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e19a:	4b13      	ldr	r3, [pc, #76]	; (800e1e8 <prvProcessTimerOrBlockTask+0x90>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d101      	bne.n	800e1a8 <prvProcessTimerOrBlockTask+0x50>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e000      	b.n	800e1aa <prvProcessTimerOrBlockTask+0x52>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e1ac:	4b0f      	ldr	r3, [pc, #60]	; (800e1ec <prvProcessTimerOrBlockTask+0x94>)
 800e1ae:	6818      	ldr	r0, [r3, #0]
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	1ad3      	subs	r3, r2, r3
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	f7fe fca1 	bl	800cb00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e1be:	f7fe ff7b 	bl	800d0b8 <xTaskResumeAll>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d10a      	bne.n	800e1de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e1c8:	4b09      	ldr	r3, [pc, #36]	; (800e1f0 <prvProcessTimerOrBlockTask+0x98>)
 800e1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ce:	601a      	str	r2, [r3, #0]
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	f3bf 8f6f 	isb	sy
}
 800e1d8:	e001      	b.n	800e1de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e1da:	f7fe ff6d 	bl	800d0b8 <xTaskResumeAll>
}
 800e1de:	bf00      	nop
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20004a1c 	.word	0x20004a1c
 800e1ec:	20004a20 	.word	0x20004a20
 800e1f0:	e000ed04 	.word	0xe000ed04

0800e1f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b085      	sub	sp, #20
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e1fc:	4b0e      	ldr	r3, [pc, #56]	; (800e238 <prvGetNextExpireTime+0x44>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <prvGetNextExpireTime+0x16>
 800e206:	2201      	movs	r2, #1
 800e208:	e000      	b.n	800e20c <prvGetNextExpireTime+0x18>
 800e20a:	2200      	movs	r2, #0
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d105      	bne.n	800e224 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e218:	4b07      	ldr	r3, [pc, #28]	; (800e238 <prvGetNextExpireTime+0x44>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	60fb      	str	r3, [r7, #12]
 800e222:	e001      	b.n	800e228 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e224:	2300      	movs	r3, #0
 800e226:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e228:	68fb      	ldr	r3, [r7, #12]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3714      	adds	r7, #20
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	20004a18 	.word	0x20004a18

0800e23c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e244:	f7fe ffd6 	bl	800d1f4 <xTaskGetTickCount>
 800e248:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e24a:	4b0b      	ldr	r3, [pc, #44]	; (800e278 <prvSampleTimeNow+0x3c>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	429a      	cmp	r2, r3
 800e252:	d205      	bcs.n	800e260 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e254:	f000 f936 	bl	800e4c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	601a      	str	r2, [r3, #0]
 800e25e:	e002      	b.n	800e266 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e266:	4a04      	ldr	r2, [pc, #16]	; (800e278 <prvSampleTimeNow+0x3c>)
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e26c:	68fb      	ldr	r3, [r7, #12]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	20004a28 	.word	0x20004a28

0800e27c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
 800e288:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e28a:	2300      	movs	r3, #0
 800e28c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	68ba      	ldr	r2, [r7, #8]
 800e292:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d812      	bhi.n	800e2c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	1ad2      	subs	r2, r2, r3
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	699b      	ldr	r3, [r3, #24]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d302      	bcc.n	800e2b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	617b      	str	r3, [r7, #20]
 800e2b4:	e01b      	b.n	800e2ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e2b6:	4b10      	ldr	r3, [pc, #64]	; (800e2f8 <prvInsertTimerInActiveList+0x7c>)
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	4619      	mov	r1, r3
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	f7fd fa1a 	bl	800b6fa <vListInsert>
 800e2c6:	e012      	b.n	800e2ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d206      	bcs.n	800e2de <prvInsertTimerInActiveList+0x62>
 800e2d0:	68ba      	ldr	r2, [r7, #8]
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d302      	bcc.n	800e2de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	617b      	str	r3, [r7, #20]
 800e2dc:	e007      	b.n	800e2ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2de:	4b07      	ldr	r3, [pc, #28]	; (800e2fc <prvInsertTimerInActiveList+0x80>)
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	f7fd fa06 	bl	800b6fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e2ee:	697b      	ldr	r3, [r7, #20]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3718      	adds	r7, #24
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	20004a1c 	.word	0x20004a1c
 800e2fc:	20004a18 	.word	0x20004a18

0800e300 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08e      	sub	sp, #56	; 0x38
 800e304:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e306:	e0ca      	b.n	800e49e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	da18      	bge.n	800e340 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e30e:	1d3b      	adds	r3, r7, #4
 800e310:	3304      	adds	r3, #4
 800e312:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10a      	bne.n	800e330 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	61fb      	str	r3, [r7, #28]
}
 800e32c:	bf00      	nop
 800e32e:	e7fe      	b.n	800e32e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e336:	6850      	ldr	r0, [r2, #4]
 800e338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e33a:	6892      	ldr	r2, [r2, #8]
 800e33c:	4611      	mov	r1, r2
 800e33e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f2c0 80ab 	blt.w	800e49e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d004      	beq.n	800e35e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e356:	3304      	adds	r3, #4
 800e358:	4618      	mov	r0, r3
 800e35a:	f7fd fa07 	bl	800b76c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e35e:	463b      	mov	r3, r7
 800e360:	4618      	mov	r0, r3
 800e362:	f7ff ff6b 	bl	800e23c <prvSampleTimeNow>
 800e366:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b09      	cmp	r3, #9
 800e36c:	f200 8096 	bhi.w	800e49c <prvProcessReceivedCommands+0x19c>
 800e370:	a201      	add	r2, pc, #4	; (adr r2, 800e378 <prvProcessReceivedCommands+0x78>)
 800e372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e376:	bf00      	nop
 800e378:	0800e3a1 	.word	0x0800e3a1
 800e37c:	0800e3a1 	.word	0x0800e3a1
 800e380:	0800e3a1 	.word	0x0800e3a1
 800e384:	0800e415 	.word	0x0800e415
 800e388:	0800e429 	.word	0x0800e429
 800e38c:	0800e473 	.word	0x0800e473
 800e390:	0800e3a1 	.word	0x0800e3a1
 800e394:	0800e3a1 	.word	0x0800e3a1
 800e398:	0800e415 	.word	0x0800e415
 800e39c:	0800e429 	.word	0x0800e429
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3a6:	f043 0301 	orr.w	r3, r3, #1
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	699b      	ldr	r3, [r3, #24]
 800e3b8:	18d1      	adds	r1, r2, r3
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c0:	f7ff ff5c 	bl	800e27c <prvInsertTimerInActiveList>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d069      	beq.n	800e49e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3cc:	6a1b      	ldr	r3, [r3, #32]
 800e3ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3d8:	f003 0304 	and.w	r3, r3, #4
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d05e      	beq.n	800e49e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e4:	699b      	ldr	r3, [r3, #24]
 800e3e6:	441a      	add	r2, r3
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3f2:	f7ff fe05 	bl	800e000 <xTimerGenericCommand>
 800e3f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e3f8:	6a3b      	ldr	r3, [r7, #32]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d14f      	bne.n	800e49e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	61bb      	str	r3, [r7, #24]
}
 800e410:	bf00      	nop
 800e412:	e7fe      	b.n	800e412 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e41a:	f023 0301 	bic.w	r3, r3, #1
 800e41e:	b2da      	uxtb	r2, r3
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e426:	e03a      	b.n	800e49e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e42e:	f043 0301 	orr.w	r3, r3, #1
 800e432:	b2da      	uxtb	r2, r3
 800e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e43a:	68ba      	ldr	r2, [r7, #8]
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	699b      	ldr	r3, [r3, #24]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10a      	bne.n	800e45e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	617b      	str	r3, [r7, #20]
}
 800e45a:	bf00      	nop
 800e45c:	e7fe      	b.n	800e45c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e460:	699a      	ldr	r2, [r3, #24]
 800e462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e464:	18d1      	adds	r1, r2, r3
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e46c:	f7ff ff06 	bl	800e27c <prvInsertTimerInActiveList>
					break;
 800e470:	e015      	b.n	800e49e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e478:	f003 0302 	and.w	r3, r3, #2
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d103      	bne.n	800e488 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e482:	f7fc ffcb 	bl	800b41c <vPortFree>
 800e486:	e00a      	b.n	800e49e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e48e:	f023 0301 	bic.w	r3, r3, #1
 800e492:	b2da      	uxtb	r2, r3
 800e494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e49a:	e000      	b.n	800e49e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e49c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e49e:	4b08      	ldr	r3, [pc, #32]	; (800e4c0 <prvProcessReceivedCommands+0x1c0>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	1d39      	adds	r1, r7, #4
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe f854 	bl	800c554 <xQueueReceive>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f47f af2a 	bne.w	800e308 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e4b4:	bf00      	nop
 800e4b6:	bf00      	nop
 800e4b8:	3730      	adds	r7, #48	; 0x30
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	20004a20 	.word	0x20004a20

0800e4c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b088      	sub	sp, #32
 800e4c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4ca:	e048      	b.n	800e55e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4cc:	4b2d      	ldr	r3, [pc, #180]	; (800e584 <prvSwitchTimerLists+0xc0>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4d6:	4b2b      	ldr	r3, [pc, #172]	; (800e584 <prvSwitchTimerLists+0xc0>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7fd f941 	bl	800b76c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4f8:	f003 0304 	and.w	r3, r3, #4
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d02e      	beq.n	800e55e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	699b      	ldr	r3, [r3, #24]
 800e504:	693a      	ldr	r2, [r7, #16]
 800e506:	4413      	add	r3, r2
 800e508:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	429a      	cmp	r2, r3
 800e510:	d90e      	bls.n	800e530 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	68ba      	ldr	r2, [r7, #8]
 800e516:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	68fa      	ldr	r2, [r7, #12]
 800e51c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e51e:	4b19      	ldr	r3, [pc, #100]	; (800e584 <prvSwitchTimerLists+0xc0>)
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3304      	adds	r3, #4
 800e526:	4619      	mov	r1, r3
 800e528:	4610      	mov	r0, r2
 800e52a:	f7fd f8e6 	bl	800b6fa <vListInsert>
 800e52e:	e016      	b.n	800e55e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e530:	2300      	movs	r3, #0
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	2300      	movs	r3, #0
 800e536:	693a      	ldr	r2, [r7, #16]
 800e538:	2100      	movs	r1, #0
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f7ff fd60 	bl	800e000 <xTimerGenericCommand>
 800e540:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d10a      	bne.n	800e55e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	603b      	str	r3, [r7, #0]
}
 800e55a:	bf00      	nop
 800e55c:	e7fe      	b.n	800e55c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e55e:	4b09      	ldr	r3, [pc, #36]	; (800e584 <prvSwitchTimerLists+0xc0>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1b1      	bne.n	800e4cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e568:	4b06      	ldr	r3, [pc, #24]	; (800e584 <prvSwitchTimerLists+0xc0>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e56e:	4b06      	ldr	r3, [pc, #24]	; (800e588 <prvSwitchTimerLists+0xc4>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a04      	ldr	r2, [pc, #16]	; (800e584 <prvSwitchTimerLists+0xc0>)
 800e574:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e576:	4a04      	ldr	r2, [pc, #16]	; (800e588 <prvSwitchTimerLists+0xc4>)
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	6013      	str	r3, [r2, #0]
}
 800e57c:	bf00      	nop
 800e57e:	3718      	adds	r7, #24
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	20004a18 	.word	0x20004a18
 800e588:	20004a1c 	.word	0x20004a1c

0800e58c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e592:	f7fd fa3f 	bl	800ba14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e596:	4b15      	ldr	r3, [pc, #84]	; (800e5ec <prvCheckForValidListAndQueue+0x60>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d120      	bne.n	800e5e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e59e:	4814      	ldr	r0, [pc, #80]	; (800e5f0 <prvCheckForValidListAndQueue+0x64>)
 800e5a0:	f7fd f85a 	bl	800b658 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e5a4:	4813      	ldr	r0, [pc, #76]	; (800e5f4 <prvCheckForValidListAndQueue+0x68>)
 800e5a6:	f7fd f857 	bl	800b658 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e5aa:	4b13      	ldr	r3, [pc, #76]	; (800e5f8 <prvCheckForValidListAndQueue+0x6c>)
 800e5ac:	4a10      	ldr	r2, [pc, #64]	; (800e5f0 <prvCheckForValidListAndQueue+0x64>)
 800e5ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e5b0:	4b12      	ldr	r3, [pc, #72]	; (800e5fc <prvCheckForValidListAndQueue+0x70>)
 800e5b2:	4a10      	ldr	r2, [pc, #64]	; (800e5f4 <prvCheckForValidListAndQueue+0x68>)
 800e5b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	4b11      	ldr	r3, [pc, #68]	; (800e600 <prvCheckForValidListAndQueue+0x74>)
 800e5bc:	4a11      	ldr	r2, [pc, #68]	; (800e604 <prvCheckForValidListAndQueue+0x78>)
 800e5be:	2110      	movs	r1, #16
 800e5c0:	200a      	movs	r0, #10
 800e5c2:	f7fd fc95 	bl	800bef0 <xQueueGenericCreateStatic>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	4a08      	ldr	r2, [pc, #32]	; (800e5ec <prvCheckForValidListAndQueue+0x60>)
 800e5ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e5cc:	4b07      	ldr	r3, [pc, #28]	; (800e5ec <prvCheckForValidListAndQueue+0x60>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d005      	beq.n	800e5e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e5d4:	4b05      	ldr	r3, [pc, #20]	; (800e5ec <prvCheckForValidListAndQueue+0x60>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	490b      	ldr	r1, [pc, #44]	; (800e608 <prvCheckForValidListAndQueue+0x7c>)
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe fa66 	bl	800caac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5e0:	f7fd fa48 	bl	800ba74 <vPortExitCritical>
}
 800e5e4:	bf00      	nop
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20004a20 	.word	0x20004a20
 800e5f0:	200049f0 	.word	0x200049f0
 800e5f4:	20004a04 	.word	0x20004a04
 800e5f8:	20004a18 	.word	0x20004a18
 800e5fc:	20004a1c 	.word	0x20004a1c
 800e600:	20004acc 	.word	0x20004acc
 800e604:	20004a2c 	.word	0x20004a2c
 800e608:	0800e86c 	.word	0x0800e86c

0800e60c <memset>:
 800e60c:	4402      	add	r2, r0
 800e60e:	4603      	mov	r3, r0
 800e610:	4293      	cmp	r3, r2
 800e612:	d100      	bne.n	800e616 <memset+0xa>
 800e614:	4770      	bx	lr
 800e616:	f803 1b01 	strb.w	r1, [r3], #1
 800e61a:	e7f9      	b.n	800e610 <memset+0x4>

0800e61c <_reclaim_reent>:
 800e61c:	4b29      	ldr	r3, [pc, #164]	; (800e6c4 <_reclaim_reent+0xa8>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4283      	cmp	r3, r0
 800e622:	b570      	push	{r4, r5, r6, lr}
 800e624:	4604      	mov	r4, r0
 800e626:	d04b      	beq.n	800e6c0 <_reclaim_reent+0xa4>
 800e628:	69c3      	ldr	r3, [r0, #28]
 800e62a:	b143      	cbz	r3, 800e63e <_reclaim_reent+0x22>
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d144      	bne.n	800e6bc <_reclaim_reent+0xa0>
 800e632:	69e3      	ldr	r3, [r4, #28]
 800e634:	6819      	ldr	r1, [r3, #0]
 800e636:	b111      	cbz	r1, 800e63e <_reclaim_reent+0x22>
 800e638:	4620      	mov	r0, r4
 800e63a:	f000 f879 	bl	800e730 <_free_r>
 800e63e:	6961      	ldr	r1, [r4, #20]
 800e640:	b111      	cbz	r1, 800e648 <_reclaim_reent+0x2c>
 800e642:	4620      	mov	r0, r4
 800e644:	f000 f874 	bl	800e730 <_free_r>
 800e648:	69e1      	ldr	r1, [r4, #28]
 800e64a:	b111      	cbz	r1, 800e652 <_reclaim_reent+0x36>
 800e64c:	4620      	mov	r0, r4
 800e64e:	f000 f86f 	bl	800e730 <_free_r>
 800e652:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e654:	b111      	cbz	r1, 800e65c <_reclaim_reent+0x40>
 800e656:	4620      	mov	r0, r4
 800e658:	f000 f86a 	bl	800e730 <_free_r>
 800e65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e65e:	b111      	cbz	r1, 800e666 <_reclaim_reent+0x4a>
 800e660:	4620      	mov	r0, r4
 800e662:	f000 f865 	bl	800e730 <_free_r>
 800e666:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e668:	b111      	cbz	r1, 800e670 <_reclaim_reent+0x54>
 800e66a:	4620      	mov	r0, r4
 800e66c:	f000 f860 	bl	800e730 <_free_r>
 800e670:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e672:	b111      	cbz	r1, 800e67a <_reclaim_reent+0x5e>
 800e674:	4620      	mov	r0, r4
 800e676:	f000 f85b 	bl	800e730 <_free_r>
 800e67a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e67c:	b111      	cbz	r1, 800e684 <_reclaim_reent+0x68>
 800e67e:	4620      	mov	r0, r4
 800e680:	f000 f856 	bl	800e730 <_free_r>
 800e684:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e686:	b111      	cbz	r1, 800e68e <_reclaim_reent+0x72>
 800e688:	4620      	mov	r0, r4
 800e68a:	f000 f851 	bl	800e730 <_free_r>
 800e68e:	6a23      	ldr	r3, [r4, #32]
 800e690:	b1b3      	cbz	r3, 800e6c0 <_reclaim_reent+0xa4>
 800e692:	4620      	mov	r0, r4
 800e694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e698:	4718      	bx	r3
 800e69a:	5949      	ldr	r1, [r1, r5]
 800e69c:	b941      	cbnz	r1, 800e6b0 <_reclaim_reent+0x94>
 800e69e:	3504      	adds	r5, #4
 800e6a0:	69e3      	ldr	r3, [r4, #28]
 800e6a2:	2d80      	cmp	r5, #128	; 0x80
 800e6a4:	68d9      	ldr	r1, [r3, #12]
 800e6a6:	d1f8      	bne.n	800e69a <_reclaim_reent+0x7e>
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f000 f841 	bl	800e730 <_free_r>
 800e6ae:	e7c0      	b.n	800e632 <_reclaim_reent+0x16>
 800e6b0:	680e      	ldr	r6, [r1, #0]
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f000 f83c 	bl	800e730 <_free_r>
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	e7ef      	b.n	800e69c <_reclaim_reent+0x80>
 800e6bc:	2500      	movs	r5, #0
 800e6be:	e7ef      	b.n	800e6a0 <_reclaim_reent+0x84>
 800e6c0:	bd70      	pop	{r4, r5, r6, pc}
 800e6c2:	bf00      	nop
 800e6c4:	2000018c 	.word	0x2000018c

0800e6c8 <__libc_init_array>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	4d0d      	ldr	r5, [pc, #52]	; (800e700 <__libc_init_array+0x38>)
 800e6cc:	4c0d      	ldr	r4, [pc, #52]	; (800e704 <__libc_init_array+0x3c>)
 800e6ce:	1b64      	subs	r4, r4, r5
 800e6d0:	10a4      	asrs	r4, r4, #2
 800e6d2:	2600      	movs	r6, #0
 800e6d4:	42a6      	cmp	r6, r4
 800e6d6:	d109      	bne.n	800e6ec <__libc_init_array+0x24>
 800e6d8:	4d0b      	ldr	r5, [pc, #44]	; (800e708 <__libc_init_array+0x40>)
 800e6da:	4c0c      	ldr	r4, [pc, #48]	; (800e70c <__libc_init_array+0x44>)
 800e6dc:	f000 f880 	bl	800e7e0 <_init>
 800e6e0:	1b64      	subs	r4, r4, r5
 800e6e2:	10a4      	asrs	r4, r4, #2
 800e6e4:	2600      	movs	r6, #0
 800e6e6:	42a6      	cmp	r6, r4
 800e6e8:	d105      	bne.n	800e6f6 <__libc_init_array+0x2e>
 800e6ea:	bd70      	pop	{r4, r5, r6, pc}
 800e6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6f0:	4798      	blx	r3
 800e6f2:	3601      	adds	r6, #1
 800e6f4:	e7ee      	b.n	800e6d4 <__libc_init_array+0xc>
 800e6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6fa:	4798      	blx	r3
 800e6fc:	3601      	adds	r6, #1
 800e6fe:	e7f2      	b.n	800e6e6 <__libc_init_array+0x1e>
 800e700:	0800e8e0 	.word	0x0800e8e0
 800e704:	0800e8e0 	.word	0x0800e8e0
 800e708:	0800e8e0 	.word	0x0800e8e0
 800e70c:	0800e8e4 	.word	0x0800e8e4

0800e710 <__retarget_lock_acquire_recursive>:
 800e710:	4770      	bx	lr

0800e712 <__retarget_lock_release_recursive>:
 800e712:	4770      	bx	lr

0800e714 <memcpy>:
 800e714:	440a      	add	r2, r1
 800e716:	4291      	cmp	r1, r2
 800e718:	f100 33ff 	add.w	r3, r0, #4294967295
 800e71c:	d100      	bne.n	800e720 <memcpy+0xc>
 800e71e:	4770      	bx	lr
 800e720:	b510      	push	{r4, lr}
 800e722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e72a:	4291      	cmp	r1, r2
 800e72c:	d1f9      	bne.n	800e722 <memcpy+0xe>
 800e72e:	bd10      	pop	{r4, pc}

0800e730 <_free_r>:
 800e730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e732:	2900      	cmp	r1, #0
 800e734:	d044      	beq.n	800e7c0 <_free_r+0x90>
 800e736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e73a:	9001      	str	r0, [sp, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f1a1 0404 	sub.w	r4, r1, #4
 800e742:	bfb8      	it	lt
 800e744:	18e4      	addlt	r4, r4, r3
 800e746:	f000 f83f 	bl	800e7c8 <__malloc_lock>
 800e74a:	4a1e      	ldr	r2, [pc, #120]	; (800e7c4 <_free_r+0x94>)
 800e74c:	9801      	ldr	r0, [sp, #4]
 800e74e:	6813      	ldr	r3, [r2, #0]
 800e750:	b933      	cbnz	r3, 800e760 <_free_r+0x30>
 800e752:	6063      	str	r3, [r4, #4]
 800e754:	6014      	str	r4, [r2, #0]
 800e756:	b003      	add	sp, #12
 800e758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e75c:	f000 b83a 	b.w	800e7d4 <__malloc_unlock>
 800e760:	42a3      	cmp	r3, r4
 800e762:	d908      	bls.n	800e776 <_free_r+0x46>
 800e764:	6825      	ldr	r5, [r4, #0]
 800e766:	1961      	adds	r1, r4, r5
 800e768:	428b      	cmp	r3, r1
 800e76a:	bf01      	itttt	eq
 800e76c:	6819      	ldreq	r1, [r3, #0]
 800e76e:	685b      	ldreq	r3, [r3, #4]
 800e770:	1949      	addeq	r1, r1, r5
 800e772:	6021      	streq	r1, [r4, #0]
 800e774:	e7ed      	b.n	800e752 <_free_r+0x22>
 800e776:	461a      	mov	r2, r3
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	b10b      	cbz	r3, 800e780 <_free_r+0x50>
 800e77c:	42a3      	cmp	r3, r4
 800e77e:	d9fa      	bls.n	800e776 <_free_r+0x46>
 800e780:	6811      	ldr	r1, [r2, #0]
 800e782:	1855      	adds	r5, r2, r1
 800e784:	42a5      	cmp	r5, r4
 800e786:	d10b      	bne.n	800e7a0 <_free_r+0x70>
 800e788:	6824      	ldr	r4, [r4, #0]
 800e78a:	4421      	add	r1, r4
 800e78c:	1854      	adds	r4, r2, r1
 800e78e:	42a3      	cmp	r3, r4
 800e790:	6011      	str	r1, [r2, #0]
 800e792:	d1e0      	bne.n	800e756 <_free_r+0x26>
 800e794:	681c      	ldr	r4, [r3, #0]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	6053      	str	r3, [r2, #4]
 800e79a:	440c      	add	r4, r1
 800e79c:	6014      	str	r4, [r2, #0]
 800e79e:	e7da      	b.n	800e756 <_free_r+0x26>
 800e7a0:	d902      	bls.n	800e7a8 <_free_r+0x78>
 800e7a2:	230c      	movs	r3, #12
 800e7a4:	6003      	str	r3, [r0, #0]
 800e7a6:	e7d6      	b.n	800e756 <_free_r+0x26>
 800e7a8:	6825      	ldr	r5, [r4, #0]
 800e7aa:	1961      	adds	r1, r4, r5
 800e7ac:	428b      	cmp	r3, r1
 800e7ae:	bf04      	itt	eq
 800e7b0:	6819      	ldreq	r1, [r3, #0]
 800e7b2:	685b      	ldreq	r3, [r3, #4]
 800e7b4:	6063      	str	r3, [r4, #4]
 800e7b6:	bf04      	itt	eq
 800e7b8:	1949      	addeq	r1, r1, r5
 800e7ba:	6021      	streq	r1, [r4, #0]
 800e7bc:	6054      	str	r4, [r2, #4]
 800e7be:	e7ca      	b.n	800e756 <_free_r+0x26>
 800e7c0:	b003      	add	sp, #12
 800e7c2:	bd30      	pop	{r4, r5, pc}
 800e7c4:	20004c58 	.word	0x20004c58

0800e7c8 <__malloc_lock>:
 800e7c8:	4801      	ldr	r0, [pc, #4]	; (800e7d0 <__malloc_lock+0x8>)
 800e7ca:	f7ff bfa1 	b.w	800e710 <__retarget_lock_acquire_recursive>
 800e7ce:	bf00      	nop
 800e7d0:	20004c54 	.word	0x20004c54

0800e7d4 <__malloc_unlock>:
 800e7d4:	4801      	ldr	r0, [pc, #4]	; (800e7dc <__malloc_unlock+0x8>)
 800e7d6:	f7ff bf9c 	b.w	800e712 <__retarget_lock_release_recursive>
 800e7da:	bf00      	nop
 800e7dc:	20004c54 	.word	0x20004c54

0800e7e0 <_init>:
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	bf00      	nop
 800e7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7e6:	bc08      	pop	{r3}
 800e7e8:	469e      	mov	lr, r3
 800e7ea:	4770      	bx	lr

0800e7ec <_fini>:
 800e7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ee:	bf00      	nop
 800e7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7f2:	bc08      	pop	{r3}
 800e7f4:	469e      	mov	lr, r3
 800e7f6:	4770      	bx	lr
