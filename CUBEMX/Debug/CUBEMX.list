
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0cc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800e2b0  0800e2b0  0001e2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec08  0800ec08  00020768  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec08  0800ec08  0001ec08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec10  0800ec10  00020768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec10  0800ec10  0001ec10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec14  0800ec14  0001ec14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000768  20000000  0800ec18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001760  20000768  0800f380  00020768  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec8  0800f380  00021ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020768  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020798  2**0
                  CONTENTS, READONLY
 13 .debug_info   000329d7  00000000  00000000  000207db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006745  00000000  00000000  000531b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  000598f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019a6  00000000  00000000  0005b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002822d  00000000  00000000  0005d066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a606  00000000  00000000  00085293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed124  00000000  00000000  000bf899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006338  00000000  00000000  001ac9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00013626  00000000  00000000  001b2cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001c631e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000768 	.word	0x20000768
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e294 	.word	0x0800e294

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000076c 	.word	0x2000076c
 800021c:	0800e294 	.word	0x0800e294

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <Update_FIR_filter+0x88>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <Update_FIR_filter+0x8c>)
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	601a      	str	r2, [r3, #0]
	float temp = 0.0f;
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	e016      	b.n	8001026 <Update_FIR_filter+0x52>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <Update_FIR_filter+0x90>)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	ed93 7a00 	vldr	s14, [r3]
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <Update_FIR_filter+0x8c>)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001014:	ed97 7a03 	vldr	s14, [r7, #12]
 8001018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101c:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	3301      	adds	r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b09      	cmp	r3, #9
 800102a:	dde5      	ble.n	8000ff8 <Update_FIR_filter+0x24>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <Update_FIR_filter+0x88>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b08      	cmp	r3, #8
 8001032:	d806      	bhi.n	8001042 <Update_FIR_filter+0x6e>
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <Update_FIR_filter+0x88>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <Update_FIR_filter+0x88>)
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e002      	b.n	8001048 <Update_FIR_filter+0x74>
	else FIR_index = 0;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <Update_FIR_filter+0x88>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
	return temp;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	ee07 3a90 	vmov	s15, r3
}
 800104e:	eeb0 0a67 	vmov.f32	s0, s15
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	200007cc 	.word	0x200007cc
 8001060:	200007d0 	.word	0x200007d0
 8001064:	20000000 	.word	0x20000000

08001068 <Update_FIR_filter2>:

#define FIR_FILTER_LENGTH2 10
uint8_t FIR_index2 = 0;
float FIR_Values2[FIR_FILTER_LENGTH2] = {0};
float FIR2_value = 0;
float Update_FIR_filter2(float input){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR2_value -= FIR_Values2[FIR_index2];
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <Update_FIR_filter2+0x94>)
 8001074:	ed93 7a00 	vldr	s14, [r3]
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <Update_FIR_filter2+0x98>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <Update_FIR_filter2+0x9c>)
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <Update_FIR_filter2+0x94>)
 800108c:	edc3 7a00 	vstr	s15, [r3]
	FIR_Values2[FIR_index2] = input/FIR_FILTER_LENGTH2;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <Update_FIR_filter2+0x98>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	ed97 7a01 	vldr	s14, [r7, #4]
 8001098:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800109c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <Update_FIR_filter2+0x9c>)
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	edc3 7a00 	vstr	s15, [r3]
	FIR2_value += FIR_Values2[FIR_index2] ;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <Update_FIR_filter2+0x98>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <Update_FIR_filter2+0x9c>)
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <Update_FIR_filter2+0x94>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <Update_FIR_filter2+0x94>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
	if(FIR_index2 < FIR_FILTER_LENGTH2-1)FIR_index2++;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <Update_FIR_filter2+0x98>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d806      	bhi.n	80010de <Update_FIR_filter2+0x76>
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <Update_FIR_filter2+0x98>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <Update_FIR_filter2+0x98>)
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e002      	b.n	80010e4 <Update_FIR_filter2+0x7c>
	else FIR_index2 = 0;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <Update_FIR_filter2+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	return FIR2_value;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <Update_FIR_filter2+0x94>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	ee07 3a90 	vmov	s15, r3
}
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000824 	.word	0x20000824
 8001100:	200007f8 	.word	0x200007f8
 8001104:	200007fc 	.word	0x200007fc

08001108 <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG2
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif


    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d008      	beq.n	8001128 <Current_IRQ+0x20>
 8001116:	2210      	movs	r2, #16
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <Current_IRQ+0x28>)
 800111c:	f00a f881 	bl	800b222 <memcpy>
    else return;
    Current_Callback_flag = 1;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <Current_IRQ+0x2c>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e000      	b.n	800112a <Current_IRQ+0x22>
    else return;
 8001128:	bf00      	nop
}
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000794 	.word	0x20000794
 8001134:	20000784 	.word	0x20000784

08001138 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8001140:	220c      	movs	r2, #12
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <Voltage_Temp_IRQ+0x1c>)
 8001146:	f00a f86c 	bl	800b222 <memcpy>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200007a4 	.word	0x200007a4

08001158 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 8001160:	221c      	movs	r2, #28
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <Encoders_IRQ+0x1c>)
 8001166:	f00a f85c 	bl	800b222 <memcpy>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200007b0 	.word	0x200007b0

08001178 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 8001180:	220c      	movs	r2, #12
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <Can_RX_Status_IRQ+0x1c>)
 8001186:	f00a f84c 	bl	800b222 <memcpy>

}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000828 	.word	0x20000828

08001198 <check_value>:
	.max_warning = NAN,
	.min_warning = NAN,
};

//check value OK
void check_value(CAN_LIMITS* ptr, float value, uint32_t *warning_ptr, uint32_t *error_ptr, uint8_t bit_pos){
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6178      	str	r0, [r7, #20]
 80011a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80011a4:	60f9      	str	r1, [r7, #12]
 80011a6:	60ba      	str	r2, [r7, #8]
 80011a8:	71fb      	strb	r3, [r7, #7]
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	da09      	bge.n	80011d2 <check_value+0x3a>
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	d808      	bhi.n	80011e4 <check_value+0x4c>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	79fa      	ldrb	r2, [r7, #7]
 80011d8:	2101      	movs	r1, #1
 80011da:	fa01 f202 	lsl.w	r2, r1, r2
 80011de:	431a      	orrs	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	601a      	str	r2, [r3, #0]
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80011ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f6:	da0a      	bge.n	800120e <check_value+0x76>
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	d900      	bls.n	800120e <check_value+0x76>
}
 800120c:	e008      	b.n	8001220 <check_value+0x88>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	79fa      	ldrb	r2, [r7, #7]
 8001214:	2101      	movs	r1, #1
 8001216:	fa01 f202 	lsl.w	r2, r1, r2
 800121a:	431a      	orrs	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <sqrtI>:

uint32_t sqrtI(uint32_t sqrtArg)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
uint32_t answer, x;
uint32_t temp;
if ( sqrtArg == 0 ) return 0; // undefined result
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <sqrtI+0x12>
 800123a:	2300      	movs	r3, #0
 800123c:	e027      	b.n	800128e <sqrtI+0x62>
if ( sqrtArg == 1 ) return 1; // identity
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <sqrtI+0x1c>
 8001244:	2301      	movs	r3, #1
 8001246:	e022      	b.n	800128e <sqrtI+0x62>
answer = 0; // integer square root
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 800124c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	e016      	b.n	8001282 <sqrtI+0x56>
{ // 16 bit shift
answer |= x; // possible bit in root
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
temp = answer * answer; // fast unsigned multiply
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fb03 f303 	mul.w	r3, r3, r3
 8001262:	60fb      	str	r3, [r7, #12]
if (temp == sqrtArg) break; // exact, found it
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d00e      	beq.n	800128a <sqrtI+0x5e>
if (temp > sqrtArg) answer ^= x; // too large, reverse bit
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d903      	bls.n	800127c <sqrtI+0x50>
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4053      	eors	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	085b      	lsrs	r3, r3, #1
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e5      	bne.n	8001254 <sqrtI+0x28>
 8001288:	e000      	b.n	800128c <sqrtI+0x60>
if (temp == sqrtArg) break; // exact, found it
 800128a:	bf00      	nop
}
return answer; // approximate root
 800128c:	697b      	ldr	r3, [r7, #20]
}
 800128e:	4618      	mov	r0, r3
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <atan2_approximation2>:
#define PI_FLOAT     3.14159265f
#define PIBY2_FLOAT  1.5707963f
// |error| < 0.005
float atan2_approximation2( float y, float x )
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80012a6:	edc7 0a00 	vstr	s1, [r7]
	if ( x == 0.0f )
 80012aa:	edd7 7a00 	vldr	s15, [r7]
 80012ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	d116      	bne.n	80012e6 <atan2_approximation2+0x4a>
	{
		if ( y > 0.0f ) return PIBY2_FLOAT;
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	dd02      	ble.n	80012cc <atan2_approximation2+0x30>
 80012c6:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80013c0 <atan2_approximation2+0x124>
 80012ca:	e071      	b.n	80013b0 <atan2_approximation2+0x114>
		if ( y == 0.0f ) return 0.0f;
 80012cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d102      	bne.n	80012e0 <atan2_approximation2+0x44>
 80012da:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80013c4 <atan2_approximation2+0x128>
 80012de:	e067      	b.n	80013b0 <atan2_approximation2+0x114>
		return -PIBY2_FLOAT;
 80012e0:	eddf 7a39 	vldr	s15, [pc, #228]	; 80013c8 <atan2_approximation2+0x12c>
 80012e4:	e064      	b.n	80013b0 <atan2_approximation2+0x114>
	}
	float atan;
	float z = y/x;
 80012e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80012ea:	ed97 7a00 	vldr	s14, [r7]
 80012ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f2:	edc7 7a02 	vstr	s15, [r7, #8]
	if ( fabs( z ) < 1.0f )
 80012f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fa:	eef0 7ae7 	vabs.f32	s15, s15
 80012fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	d52f      	bpl.n	800136c <atan2_approximation2+0xd0>
	{
		atan = z/(1.0f + 0.28f*z*z);
 800130c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001310:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80013cc <atan2_approximation2+0x130>
 8001314:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001318:	edd7 7a02 	vldr	s15, [r7, #8]
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001324:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001328:	edd7 6a02 	vldr	s13, [r7, #8]
 800132c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001330:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( x < 0.0f )
 8001334:	edd7 7a00 	vldr	s15, [r7]
 8001338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d534      	bpl.n	80013ac <atan2_approximation2+0x110>
		{
			if ( y < 0.0f ) return atan - PI_FLOAT;
 8001342:	edd7 7a01 	vldr	s15, [r7, #4]
 8001346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	d506      	bpl.n	800135e <atan2_approximation2+0xc2>
 8001350:	edd7 7a03 	vldr	s15, [r7, #12]
 8001354:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80013d0 <atan2_approximation2+0x134>
 8001358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800135c:	e028      	b.n	80013b0 <atan2_approximation2+0x114>
			return atan + PI_FLOAT;
 800135e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001362:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80013d0 <atan2_approximation2+0x134>
 8001366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800136a:	e021      	b.n	80013b0 <atan2_approximation2+0x114>
		}
	}
	else
	{
		atan = PIBY2_FLOAT - z/(z*z + 0.28f);
 800136c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001370:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001374:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013cc <atan2_approximation2+0x130>
 8001378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800137c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001384:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80013c0 <atan2_approximation2+0x124>
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( y < 0.0f ) return atan - PI_FLOAT;
 8001390:	edd7 7a01 	vldr	s15, [r7, #4]
 8001394:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139c:	d506      	bpl.n	80013ac <atan2_approximation2+0x110>
 800139e:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80013d0 <atan2_approximation2+0x134>
 80013a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013aa:	e001      	b.n	80013b0 <atan2_approximation2+0x114>
	}
	return atan;
 80013ac:	edd7 7a03 	vldr	s15, [r7, #12]
}
 80013b0:	eeb0 0a67 	vmov.f32	s0, s15
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	3fc90fda 	.word	0x3fc90fda
 80013c4:	00000000 	.word	0x00000000
 80013c8:	bfc90fda 	.word	0xbfc90fda
 80013cc:	3e8f5c29 	.word	0x3e8f5c29
 80013d0:	40490fdb 	.word	0x40490fdb
 80013d4:	00000000 	.word	0x00000000

080013d8 <BLDC_main>:

//------------------------MAIN-------------------------
Flash *storage;
void BLDC_main(void){
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	b0ad      	sub	sp, #180	; 0xb4
 80013dc:	af06      	add	r7, sp, #24
	Flash_init();
 80013de:	f002 f821 	bl	8003424 <Flash_init>
	storage = Flash_get_values();
 80013e2:	f002 f857 	bl	8003494 <Flash_get_values>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a8c      	ldr	r2, [pc, #560]	; (800161c <BLDC_main+0x244>)
 80013ea:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	; 0x64
 80013ee:	f004 f80d 	bl	800540c <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 80013f2:	2128      	movs	r1, #40	; 0x28
 80013f4:	488a      	ldr	r0, [pc, #552]	; (8001620 <BLDC_main+0x248>)
 80013f6:	f002 f9c3 	bl	8003780 <SetSampleTime>
	SetTunings(&Current_PID, storage->Current_kp, storage->Current_ki, storage->Current_kd, 1);
 80013fa:	4b88      	ldr	r3, [pc, #544]	; (800161c <BLDC_main+0x244>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001402:	4b86      	ldr	r3, [pc, #536]	; (800161c <BLDC_main+0x244>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800140a:	4b84      	ldr	r3, [pc, #528]	; (800161c <BLDC_main+0x244>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001412:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001416:	eeb0 1a66 	vmov.f32	s2, s13
 800141a:	eef0 0a47 	vmov.f32	s1, s14
 800141e:	eeb0 0a67 	vmov.f32	s0, s15
 8001422:	487f      	ldr	r0, [pc, #508]	; (8001620 <BLDC_main+0x248>)
 8001424:	f002 f8f2 	bl	800360c <SetTunings>
	SetOutputLimits(&Current_PID, -1500, 1500);
 8001428:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8001624 <BLDC_main+0x24c>
 800142c:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8001628 <BLDC_main+0x250>
 8001430:	487b      	ldr	r0, [pc, #492]	; (8001620 <BLDC_main+0x248>)
 8001432:	f002 f9d9 	bl	80037e8 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 8001436:	2100      	movs	r1, #0
 8001438:	4879      	ldr	r0, [pc, #484]	; (8001620 <BLDC_main+0x248>)
 800143a:	f002 fa85 	bl	8003948 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 800143e:	2101      	movs	r1, #1
 8001440:	4877      	ldr	r0, [pc, #476]	; (8001620 <BLDC_main+0x248>)
 8001442:	f002 fa2d 	bl	80038a0 <SetMode>
	Initialize(&Current_PID);
 8001446:	4876      	ldr	r0, [pc, #472]	; (8001620 <BLDC_main+0x248>)
 8001448:	f002 fa4c 	bl	80038e4 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 800144c:	2164      	movs	r1, #100	; 0x64
 800144e:	4877      	ldr	r0, [pc, #476]	; (800162c <BLDC_main+0x254>)
 8001450:	f002 f996 	bl	8003780 <SetSampleTime>
	SetTunings(&Velocity_PID, storage->Velocity_kp, storage->Velocity_ki, storage->Velocity_kd, 1);
 8001454:	4b71      	ldr	r3, [pc, #452]	; (800161c <BLDC_main+0x244>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800145c:	4b6f      	ldr	r3, [pc, #444]	; (800161c <BLDC_main+0x244>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001464:	4b6d      	ldr	r3, [pc, #436]	; (800161c <BLDC_main+0x244>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800146c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001470:	eeb0 1a66 	vmov.f32	s2, s13
 8001474:	eef0 0a47 	vmov.f32	s1, s14
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	486b      	ldr	r0, [pc, #428]	; (800162c <BLDC_main+0x254>)
 800147e:	f002 f8c5 	bl	800360c <SetTunings>
	SetOutputLimits(&Velocity_PID, -(storage->Current_limit*1000.0f), (storage->Current_limit*1000.0f));
 8001482:	4b66      	ldr	r3, [pc, #408]	; (800161c <BLDC_main+0x244>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001490:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001630 <BLDC_main+0x258>
 8001494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001498:	eeb1 7a67 	vneg.f32	s14, s15
 800149c:	4b5f      	ldr	r3, [pc, #380]	; (800161c <BLDC_main+0x244>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014aa:	eddf 6a61 	vldr	s13, [pc, #388]	; 8001630 <BLDC_main+0x258>
 80014ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014b2:	eef0 0a67 	vmov.f32	s1, s15
 80014b6:	eeb0 0a47 	vmov.f32	s0, s14
 80014ba:	485c      	ldr	r0, [pc, #368]	; (800162c <BLDC_main+0x254>)
 80014bc:	f002 f994 	bl	80037e8 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80014c0:	2100      	movs	r1, #0
 80014c2:	485a      	ldr	r0, [pc, #360]	; (800162c <BLDC_main+0x254>)
 80014c4:	f002 fa40 	bl	8003948 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80014c8:	2101      	movs	r1, #1
 80014ca:	4858      	ldr	r0, [pc, #352]	; (800162c <BLDC_main+0x254>)
 80014cc:	f002 f9e8 	bl	80038a0 <SetMode>
	Initialize(&Velocity_PID);
 80014d0:	4856      	ldr	r0, [pc, #344]	; (800162c <BLDC_main+0x254>)
 80014d2:	f002 fa07 	bl	80038e4 <Initialize>

	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80014d6:	2164      	movs	r1, #100	; 0x64
 80014d8:	4856      	ldr	r0, [pc, #344]	; (8001634 <BLDC_main+0x25c>)
 80014da:	f002 f951 	bl	8003780 <SetSampleTime>
	SetTunings(&Angle_PID, storage->Angle_kp, storage->Angle_ki, storage->Angle_kd, 1);
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <BLDC_main+0x244>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80014e6:	4b4d      	ldr	r3, [pc, #308]	; (800161c <BLDC_main+0x244>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <BLDC_main+0x244>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80014f6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80014fa:	eeb0 1a66 	vmov.f32	s2, s13
 80014fe:	eef0 0a47 	vmov.f32	s1, s14
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	484b      	ldr	r0, [pc, #300]	; (8001634 <BLDC_main+0x25c>)
 8001508:	f002 f880 	bl	800360c <SetTunings>
	SetOutputLimits(&Angle_PID, -(storage->Velocity_limit*1000.0f), (storage->Velocity_limit*1000.0f));
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <BLDC_main+0x244>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001630 <BLDC_main+0x258>
 800151e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001522:	eeb1 7a67 	vneg.f32	s14, s15
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <BLDC_main+0x244>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001534:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001630 <BLDC_main+0x258>
 8001538:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800153c:	eef0 0a67 	vmov.f32	s1, s15
 8001540:	eeb0 0a47 	vmov.f32	s0, s14
 8001544:	483b      	ldr	r0, [pc, #236]	; (8001634 <BLDC_main+0x25c>)
 8001546:	f002 f94f 	bl	80037e8 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 800154a:	2100      	movs	r1, #0
 800154c:	4839      	ldr	r0, [pc, #228]	; (8001634 <BLDC_main+0x25c>)
 800154e:	f002 f9fb 	bl	8003948 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8001552:	2101      	movs	r1, #1
 8001554:	4837      	ldr	r0, [pc, #220]	; (8001634 <BLDC_main+0x25c>)
 8001556:	f002 f9a3 	bl	80038a0 <SetMode>
	Initialize(&Angle_PID);
 800155a:	4836      	ldr	r0, [pc, #216]	; (8001634 <BLDC_main+0x25c>)
 800155c:	f002 f9c2 	bl	80038e4 <Initialize>

	SetSampleTime(&Current_PID_offset, 40); //100s = 10kHz
 8001560:	2128      	movs	r1, #40	; 0x28
 8001562:	4835      	ldr	r0, [pc, #212]	; (8001638 <BLDC_main+0x260>)
 8001564:	f002 f90c 	bl	8003780 <SetSampleTime>
	SetTunings(&Current_PID_offset, storage->Current_offset_kp, storage->Current_offset_ki, storage->Current_offset_kd, 1);
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <BLDC_main+0x244>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <BLDC_main+0x244>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <BLDC_main+0x244>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001580:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001584:	eeb0 1a66 	vmov.f32	s2, s13
 8001588:	eef0 0a47 	vmov.f32	s1, s14
 800158c:	eeb0 0a67 	vmov.f32	s0, s15
 8001590:	4829      	ldr	r0, [pc, #164]	; (8001638 <BLDC_main+0x260>)
 8001592:	f002 f83b 	bl	800360c <SetTunings>
	SetOutputLimits(&Current_PID_offset, -1500, 1500);
 8001596:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001624 <BLDC_main+0x24c>
 800159a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001628 <BLDC_main+0x250>
 800159e:	4826      	ldr	r0, [pc, #152]	; (8001638 <BLDC_main+0x260>)
 80015a0:	f002 f922 	bl	80037e8 <SetOutputLimits>
	SetControllerDirection(&Current_PID_offset, DIRECT);
 80015a4:	2100      	movs	r1, #0
 80015a6:	4824      	ldr	r0, [pc, #144]	; (8001638 <BLDC_main+0x260>)
 80015a8:	f002 f9ce 	bl	8003948 <SetControllerDirection>
	SetMode(&Current_PID_offset,  AUTOMATIC);
 80015ac:	2101      	movs	r1, #1
 80015ae:	4822      	ldr	r0, [pc, #136]	; (8001638 <BLDC_main+0x260>)
 80015b0:	f002 f976 	bl	80038a0 <SetMode>
	Initialize(&Current_PID_offset);
 80015b4:	4820      	ldr	r0, [pc, #128]	; (8001638 <BLDC_main+0x260>)
 80015b6:	f002 f995 	bl	80038e4 <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 80015ba:	4820      	ldr	r0, [pc, #128]	; (800163c <BLDC_main+0x264>)
 80015bc:	f001 fd72 	bl	80030a4 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 80015c0:	481f      	ldr	r0, [pc, #124]	; (8001640 <BLDC_main+0x268>)
 80015c2:	f002 fabf 	bl	8003b44 <current_init>

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 80015c6:	481f      	ldr	r0, [pc, #124]	; (8001644 <BLDC_main+0x26c>)
 80015c8:	f002 fae2 	bl	8003b90 <voltage_temperature_init>
	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80015cc:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <BLDC_main+0x270>)
 80015ce:	2136      	movs	r1, #54	; 0x36
 80015d0:	481e      	ldr	r0, [pc, #120]	; (800164c <BLDC_main+0x274>)
 80015d2:	f002 fda5 	bl	8004120 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_IRQ);

	FDCAN_Start(&hfdcan1);
 80015d6:	481d      	ldr	r0, [pc, #116]	; (800164c <BLDC_main+0x274>)
 80015d8:	f002 fd86 	bl	80040e8 <FDCAN_Start>

	//--------------setup PWM------------------
	electrical_offset = storage->electrical_offset;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <BLDC_main+0x244>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <BLDC_main+0x278>)
 80015e4:	6013      	str	r3, [r2, #0]
	PHASE_ORDER = storage->PHASE_ORDER;
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <BLDC_main+0x244>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <BLDC_main+0x27c>)
 80015f0:	701a      	strb	r2, [r3, #0]
	uint16_t mech_offset = storage->mech_offset;//storage->mech_offset;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <BLDC_main+0x244>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f8b3 34a8 	ldrh.w	r3, [r3, #1192]	; 0x4a8
 80015fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	if(mech_offset > 400)mech_offset = 0;
 80015fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001602:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001606:	d902      	bls.n	800160e <BLDC_main+0x236>
 8001608:	2300      	movs	r3, #0
 800160a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint8_t flash_nan = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	for(int i = 0; i < SIZE*NPP; i++){
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800161a:	e033      	b.n	8001684 <BLDC_main+0x2ac>
 800161c:	20000974 	.word	0x20000974
 8001620:	200008b4 	.word	0x200008b4
 8001624:	44bb8000 	.word	0x44bb8000
 8001628:	c4bb8000 	.word	0xc4bb8000
 800162c:	200008f4 	.word	0x200008f4
 8001630:	447a0000 	.word	0x447a0000
 8001634:	20000934 	.word	0x20000934
 8001638:	20000874 	.word	0x20000874
 800163c:	08001159 	.word	0x08001159
 8001640:	08001109 	.word	0x08001109
 8001644:	08001139 	.word	0x08001139
 8001648:	08001179 	.word	0x08001179
 800164c:	20001908 	.word	0x20001908
 8001650:	20000dc0 	.word	0x20000dc0
 8001654:	20000dbc 	.word	0x20000dbc
		if (isnan(storage->error_filt[i]))flash_nan = 1;
 8001658:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <BLDC_main+0x430>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001660:	331a      	adds	r3, #26
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	eef4 7a67 	vcmp.f32	s15, s15
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	d702      	bvc.n	800167a <BLDC_main+0x2a2>
 8001674:	2301      	movs	r3, #1
 8001676:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	for(int i = 0; i < SIZE*NPP; i++){
 800167a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800167e:	3301      	adds	r3, #1
 8001680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001688:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800168c:	dbe4      	blt.n	8001658 <BLDC_main+0x280>
	}
	if(!flash_nan)memcpy(error_filt, storage->error_filt,sizeof(error_filt));
 800168e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001692:	2b00      	cmp	r3, #0
 8001694:	d108      	bne.n	80016a8 <BLDC_main+0x2d0>
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <BLDC_main+0x430>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3368      	adds	r3, #104	; 0x68
 800169c:	f44f 6288 	mov.w	r2, #1088	; 0x440
 80016a0:	4619      	mov	r1, r3
 80016a2:	485a      	ldr	r0, [pc, #360]	; (800180c <BLDC_main+0x434>)
 80016a4:	f009 fdbd 	bl	800b222 <memcpy>

	Current IRQ_Current_BUFF = {0};
 80016a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 80016b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
	Encoders IRQ_Encoders_BUFF = {0};
 80016c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	615a      	str	r2, [r3, #20]
 80016d4:	619a      	str	r2, [r3, #24]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]

	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint32_t last_pos = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	int32_t position_overflow = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	uint32_t test = 1499;
 80016f4:	f240 53db 	movw	r3, #1499	; 0x5db
 80016f8:	61bb      	str	r3, [r7, #24]
	CTRL_init_PWM(&test);
 80016fa:	f107 0318 	add.w	r3, r7, #24
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fcd6 	bl	80020b0 <CTRL_init_PWM>
	Status = BLDC_CALIBRATING_ENCODER;
	#endif

	while(1){
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 8001704:	bf00      	nop
 8001706:	4b42      	ldr	r3, [pc, #264]	; (8001810 <BLDC_main+0x438>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0fb      	beq.n	8001706 <BLDC_main+0x32e>
		Current_Callback_flag = 0;
 800170e:	4b40      	ldr	r3, [pc, #256]	; (8001810 <BLDC_main+0x438>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		//HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 8001714:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <BLDC_main+0x43c>)
 8001716:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800171a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8001720:	4a3d      	ldr	r2, [pc, #244]	; (8001818 <BLDC_main+0x440>)
 8001722:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001726:	ca07      	ldmia	r2, {r0, r1, r2}
 8001728:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <BLDC_main+0x444>)
 800172e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001732:	461d      	mov	r5, r3
 8001734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800173c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8001740:	4a37      	ldr	r2, [pc, #220]	; (8001820 <BLDC_main+0x448>)
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	ca07      	ldmia	r2, {r0, r1, r2}
 8001748:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		//FSM
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 800174c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001750:	2b00      	cmp	r3, #0
 8001752:	d106      	bne.n	8001762 <BLDC_main+0x38a>
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b04      	cmp	r3, #4
 8001758:	d103      	bne.n	8001762 <BLDC_main+0x38a>
 800175a:	2302      	movs	r3, #2
 800175c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001760:	e042      	b.n	80017e8 <BLDC_main+0x410>
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8001762:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <BLDC_main+0x3a0>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d103      	bne.n	8001778 <BLDC_main+0x3a0>
 8001770:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <BLDC_main+0x44c>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e037      	b.n	80017e8 <BLDC_main+0x410>
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 8001778:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800177c:	2b00      	cmp	r3, #0
 800177e:	d112      	bne.n	80017a6 <BLDC_main+0x3ce>
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d10f      	bne.n	80017a6 <BLDC_main+0x3ce>
			Status = BLDC_RUNNING;
 8001786:	2303      	movs	r3, #3
 8001788:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			SetMode(&Current_PID,  AUTOMATIC);
 800178c:	2101      	movs	r1, #1
 800178e:	4826      	ldr	r0, [pc, #152]	; (8001828 <BLDC_main+0x450>)
 8001790:	f002 f886 	bl	80038a0 <SetMode>
			SetMode(&Velocity_PID,  AUTOMATIC);
 8001794:	2101      	movs	r1, #1
 8001796:	4825      	ldr	r0, [pc, #148]	; (800182c <BLDC_main+0x454>)
 8001798:	f002 f882 	bl	80038a0 <SetMode>
			SetMode(&Angle_PID,  AUTOMATIC);
 800179c:	2101      	movs	r1, #1
 800179e:	4824      	ldr	r0, [pc, #144]	; (8001830 <BLDC_main+0x458>)
 80017a0:	f002 f87e 	bl	80038a0 <SetMode>
 80017a4:	e020      	b.n	80017e8 <BLDC_main+0x410>
		}
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 80017a6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d112      	bne.n	80017d4 <BLDC_main+0x3fc>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10f      	bne.n	80017d4 <BLDC_main+0x3fc>
			Status = BLDC_STOPPED_WITH_BREAK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			SetMode(&Current_PID,  MANUAL);
 80017ba:	2100      	movs	r1, #0
 80017bc:	481a      	ldr	r0, [pc, #104]	; (8001828 <BLDC_main+0x450>)
 80017be:	f002 f86f 	bl	80038a0 <SetMode>
			SetMode(&Velocity_PID,  MANUAL);
 80017c2:	2100      	movs	r1, #0
 80017c4:	4819      	ldr	r0, [pc, #100]	; (800182c <BLDC_main+0x454>)
 80017c6:	f002 f86b 	bl	80038a0 <SetMode>
			SetMode(&Angle_PID,  MANUAL);
 80017ca:	2100      	movs	r1, #0
 80017cc:	4818      	ldr	r0, [pc, #96]	; (8001830 <BLDC_main+0x458>)
 80017ce:	f002 f867 	bl	80038a0 <SetMode>
 80017d2:	e009      	b.n	80017e8 <BLDC_main+0x410>
		}
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 80017d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d105      	bne.n	80017e8 <BLDC_main+0x410>
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <BLDC_main+0x410>
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f


		//----------------------position-----------------
		if (last_pos > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 80017e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017ec:	4a11      	ldr	r2, [pc, #68]	; (8001834 <BLDC_main+0x45c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d924      	bls.n	800183c <BLDC_main+0x464>
 80017f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <BLDC_main+0x460>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d820      	bhi.n	800183c <BLDC_main+0x464>
 80017fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017fe:	3301      	adds	r3, #1
 8001800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001804:	e028      	b.n	8001858 <BLDC_main+0x480>
 8001806:	bf00      	nop
 8001808:	20000974 	.word	0x20000974
 800180c:	2000097c 	.word	0x2000097c
 8001810:	20000784 	.word	0x20000784
 8001814:	20000794 	.word	0x20000794
 8001818:	200007a4 	.word	0x200007a4
 800181c:	200007b0 	.word	0x200007b0
 8001820:	20000828 	.word	0x20000828
 8001824:	20000790 	.word	0x20000790
 8001828:	200008b4 	.word	0x200008b4
 800182c:	200008f4 	.word	0x200008f4
 8001830:	20000934 	.word	0x20000934
 8001834:	00041eb0 	.word	0x00041eb0
 8001838:	00015f8f 	.word	0x00015f8f
		else if (last_pos < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 800183c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001840:	4ad5      	ldr	r2, [pc, #852]	; (8001b98 <BLDC_main+0x7c0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d808      	bhi.n	8001858 <BLDC_main+0x480>
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	4ad4      	ldr	r2, [pc, #848]	; (8001b9c <BLDC_main+0x7c4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d904      	bls.n	8001858 <BLDC_main+0x480>
 800184e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001852:	3b01      	subs	r3, #1
 8001854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		last_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8001858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		//------------------calculate PID----------------------- 6.52us
		float d;
		float q;
		int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 800185e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001860:	4acf      	ldr	r2, [pc, #828]	; (8001ba0 <BLDC_main+0x7c8>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	b21b      	sxth	r3, r3
 800186a:	4ace      	ldr	r2, [pc, #824]	; (8001ba4 <BLDC_main+0x7cc>)
 800186c:	fb82 1203 	smull	r1, r2, r2, r3
 8001870:	441a      	add	r2, r3
 8001872:	1211      	asrs	r1, r2, #8
 8001874:	17da      	asrs	r2, r3, #31
 8001876:	1a8a      	subs	r2, r1, r2
 8001878:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800187c:	fb01 f202 	mul.w	r2, r1, r2
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 8001886:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 800188a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001894:	4ac3      	ldr	r2, [pc, #780]	; (8001ba4 <BLDC_main+0x7cc>)
 8001896:	fb82 1203 	smull	r1, r2, r2, r3
 800189a:	441a      	add	r2, r3
 800189c:	1211      	asrs	r1, r2, #8
 800189e:	17da      	asrs	r2, r3, #31
 80018a0:	1a8a      	subs	r2, r1, r2
 80018a2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80018a6:	fb01 f202 	mul.w	r2, r1, r2
 80018aa:	1a9a      	subs	r2, r3, r2
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	4abb      	ldr	r2, [pc, #748]	; (8001ba4 <BLDC_main+0x7cc>)
 80018b6:	fb82 1203 	smull	r1, r2, r2, r3
 80018ba:	441a      	add	r2, r3
 80018bc:	1212      	asrs	r2, r2, #8
 80018be:	17db      	asrs	r3, r3, #31
 80018c0:	1ad2      	subs	r2, r2, r3
 80018c2:	4bb9      	ldr	r3, [pc, #740]	; (8001ba8 <BLDC_main+0x7d0>)
 80018c4:	fb83 1302 	smull	r1, r3, r3, r2
 80018c8:	11d9      	asrs	r1, r3, #7
 80018ca:	17d3      	asrs	r3, r2, #31
 80018cc:	1ac9      	subs	r1, r1, r3
 80018ce:	460b      	mov	r3, r1
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	440b      	add	r3, r1
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	1ad1      	subs	r1, r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		int32_t error_pos = (int32_t)(((error_filt[index_error2] - error_filt[0])/**NPP*/)); //((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 80018de:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80018e2:	4ab2      	ldr	r2, [pc, #712]	; (8001bac <BLDC_main+0x7d4>)
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	4baf      	ldr	r3, [pc, #700]	; (8001bac <BLDC_main+0x7d4>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fa:	ee17 3a90 	vmov	r3, s15
 80018fe:	67bb      	str	r3, [r7, #120]	; 0x78

		//mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0) + (int32_t)electrical_offset
		int16_t angle = (mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0) + (int32_t)electrical_offset + 2*360)%360;
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fb55 	bl	8001fb4 <mech_to_el_deg>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	4ba8      	ldr	r3, [pc, #672]	; (8001bb0 <BLDC_main+0x7d8>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001918:	ee17 3a90 	vmov	r3, s15
 800191c:	4413      	add	r3, r2
 800191e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001922:	4aa0      	ldr	r2, [pc, #640]	; (8001ba4 <BLDC_main+0x7cc>)
 8001924:	fb82 1203 	smull	r1, r2, r2, r3
 8001928:	441a      	add	r2, r3
 800192a:	1211      	asrs	r1, r2, #8
 800192c:	17da      	asrs	r2, r3, #31
 800192e:	1a8a      	subs	r2, r1, r2
 8001930:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001934:	fb01 f202 	mul.w	r2, r1, r2
 8001938:	1a9a      	subs	r2, r3, r2
 800193a:	4613      	mov	r3, r2
 800193c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		dq0((float)angle*3.14159264f/180, (float)IRQ_Current_BUFF.Current_M3, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M1, &d, &q);
 8001940:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194c:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001bb4 <BLDC_main+0x7dc>
 8001950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001954:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001bb8 <BLDC_main+0x7e0>
 8001958:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800195c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001968:	ee06 3a90 	vmov	s13, r3
 800196c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001972:	ee06 3a10 	vmov	s12, r3
 8001976:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800197a:	f107 0210 	add.w	r2, r7, #16
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	eef0 1a46 	vmov.f32	s3, s12
 800198a:	eeb0 1a66 	vmov.f32	s2, s13
 800198e:	eef0 0a67 	vmov.f32	s1, s15
 8001992:	eeb0 0a47 	vmov.f32	s0, s14
 8001996:	f002 fb17 	bl	8003fc8 <dq0>
		float q_lpf = Update_FIR_filter(q);
 800199a:	edd7 7a04 	vldr	s15, [r7, #16]
 800199e:	eeb0 0a67 	vmov.f32	s0, s15
 80019a2:	f7ff fb17 	bl	8000fd4 <Update_FIR_filter>
 80019a6:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		float d_lpf = Update_FIR_filter2(d);
 80019aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ae:	eeb0 0a67 	vmov.f32	s0, s15
 80019b2:	f7ff fb59 	bl	8001068 <Update_FIR_filter2>
 80019b6:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c

		//------------------calculate PID----------------------- 6.52us
		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 80019ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d0:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001bbc <BLDC_main+0x7e4>
 80019d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019dc:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <BLDC_main+0x7e8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80019e4:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001bc4 <BLDC_main+0x7ec>
 80019e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	4b75      	ldr	r3, [pc, #468]	; (8001bc8 <BLDC_main+0x7f0>)
 80019f2:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)(IRQ_Encoders_BUFF.Velocity);
 80019f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a00:	4b72      	ldr	r3, [pc, #456]	; (8001bcc <BLDC_main+0x7f4>)
 8001a02:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = q_lpf;
 8001a06:	4a72      	ldr	r2, [pc, #456]	; (8001bd0 <BLDC_main+0x7f8>)
 8001a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a0a:	6013      	str	r3, [r2, #0]
		Current_PID_offset.Input = d_lpf;
 8001a0c:	4a71      	ldr	r2, [pc, #452]	; (8001bd4 <BLDC_main+0x7fc>)
 8001a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a10:	6013      	str	r3, [r2, #0]

		Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <BLDC_main+0x7f0>)
 8001a1e:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Angle_PID);
 8001a22:	4869      	ldr	r0, [pc, #420]	; (8001bc8 <BLDC_main+0x7f0>)
 8001a24:	f001 fd40 	bl	80034a8 <Compute>

		Velocity_PID.Setpoint = 60000.0;
 8001a28:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <BLDC_main+0x7f4>)
 8001a2a:	4a6b      	ldr	r2, [pc, #428]	; (8001bd8 <BLDC_main+0x800>)
 8001a2c:	609a      	str	r2, [r3, #8]
//		Velocity_PID.Setpoint = Angle_PID.Output;
		Compute(&Velocity_PID);
 8001a2e:	4867      	ldr	r0, [pc, #412]	; (8001bcc <BLDC_main+0x7f4>)
 8001a30:	f001 fd3a 	bl	80034a8 <Compute>

//		Current_PID.Setpoint = 1000;
		Current_PID.Setpoint = Velocity_PID.Output;
 8001a34:	4b65      	ldr	r3, [pc, #404]	; (8001bcc <BLDC_main+0x7f4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a65      	ldr	r2, [pc, #404]	; (8001bd0 <BLDC_main+0x7f8>)
 8001a3a:	6093      	str	r3, [r2, #8]
		Compute(&Current_PID);
 8001a3c:	4864      	ldr	r0, [pc, #400]	; (8001bd0 <BLDC_main+0x7f8>)
 8001a3e:	f001 fd33 	bl	80034a8 <Compute>

		Current_PID_offset.Setpoint = 0;
 8001a42:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <BLDC_main+0x7fc>)
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
		Compute(&Current_PID_offset);
 8001a4a:	4862      	ldr	r0, [pc, #392]	; (8001bd4 <BLDC_main+0x7fc>)
 8001a4c:	f001 fd2c 	bl	80034a8 <Compute>
//		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
//		else direction = 1;
		#endif

		//-----------------set PWM--------------------- 3.12us
		float V_d = Current_PID_offset.Output;
 8001a50:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <BLDC_main+0x7fc>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	66bb      	str	r3, [r7, #104]	; 0x68
		float V_q = Current_PID.Output;
 8001a56:	4b5e      	ldr	r3, [pc, #376]	; (8001bd0 <BLDC_main+0x7f8>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	667b      	str	r3, [r7, #100]	; 0x64
		float theta = atan2_approximation2(V_q, V_d)*180.0f/3.14159264f;
 8001a5c:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8001a60:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8001a64:	f7ff fc1a 	bl	800129c <atan2_approximation2>
 8001a68:	eef0 7a40 	vmov.f32	s15, s0
 8001a6c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001bb8 <BLDC_main+0x7e0>
 8001a70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a74:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001bb4 <BLDC_main+0x7dc>
 8001a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
//		float theta = atan2(V_q, V_d)*180/3.14159264f;
//		uint32_t mag = (uint32_t)(sqrt(V_q*V_q+V_d*V_d));
		uint32_t mag = sqrtI((uint32_t)(V_q*V_q+V_d*V_d));
 8001a80:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001a84:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a88:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a98:	ee17 0a90 	vmov	r0, s15
 8001a9c:	f7ff fbc6 	bl	800122c <sqrtI>
 8001aa0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		mag *= 0.7;
 8001aa4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001aa8:	f7fe fd54 	bl	8000554 <__aeabi_ui2d>
 8001aac:	a338      	add	r3, pc, #224	; (adr r3, 8001b90 <BLDC_main+0x7b8>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fdc9 	bl	8000648 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f89b 	bl	8000bf8 <__aeabi_d2uiz>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		if (mag > 1499)mag = 1499;
 8001ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001acc:	f240 52db 	movw	r2, #1499	; 0x5db
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d903      	bls.n	8001adc <BLDC_main+0x704>
 8001ad4:	f240 53db 	movw	r3, #1499	; 0x5db
 8001ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		//----------------error check---------------
		uint32_t warning = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
		check_value(&LIMIT_Current, (float)q_lpf, &warning, &error, 0);
 8001ae0:	f107 010c 	add.w	r1, r7, #12
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	4a3d      	ldr	r2, [pc, #244]	; (8001bdc <BLDC_main+0x804>)
 8001ae8:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8001aec:	483c      	ldr	r0, [pc, #240]	; (8001be0 <BLDC_main+0x808>)
 8001aee:	f7ff fb53 	bl	8001198 <check_value>
		check_value(&LIMIT_Current, (float)d_lpf, &warning, &error, 0);
 8001af2:	f107 010c 	add.w	r1, r7, #12
 8001af6:	2300      	movs	r3, #0
 8001af8:	4a38      	ldr	r2, [pc, #224]	; (8001bdc <BLDC_main+0x804>)
 8001afa:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8001afe:	4838      	ldr	r0, [pc, #224]	; (8001be0 <BLDC_main+0x808>)
 8001b00:	f7ff fb4a 	bl	8001198 <check_value>
		check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos, &warning, &error, 1);
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b0e:	f107 010c 	add.w	r1, r7, #12
 8001b12:	2301      	movs	r3, #1
 8001b14:	4a31      	ldr	r2, [pc, #196]	; (8001bdc <BLDC_main+0x804>)
 8001b16:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1a:	4832      	ldr	r0, [pc, #200]	; (8001be4 <BLDC_main+0x80c>)
 8001b1c:	f7ff fb3c 	bl	8001198 <check_value>
		check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos, &warning, &error, 2);
 8001b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b2a:	f107 010c 	add.w	r1, r7, #12
 8001b2e:	2302      	movs	r3, #2
 8001b30:	4a2a      	ldr	r2, [pc, #168]	; (8001bdc <BLDC_main+0x804>)
 8001b32:	eeb0 0a67 	vmov.f32	s0, s15
 8001b36:	482c      	ldr	r0, [pc, #176]	; (8001be8 <BLDC_main+0x810>)
 8001b38:	f7ff fb2e 	bl	8001198 <check_value>
		check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity, &warning, &error, 3);
 8001b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b46:	f107 010c 	add.w	r1, r7, #12
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <BLDC_main+0x804>)
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	4826      	ldr	r0, [pc, #152]	; (8001bec <BLDC_main+0x814>)
 8001b54:	f7ff fb20 	bl	8001198 <check_value>
		check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux, &warning, &error, 4);
 8001b58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b64:	f107 010c 	add.w	r1, r7, #12
 8001b68:	2304      	movs	r3, #4
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <BLDC_main+0x804>)
 8001b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b70:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <BLDC_main+0x818>)
 8001b72:	f7ff fb11 	bl	8001198 <check_value>
		check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat, &warning, &error, 5);
 8001b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b80:	f107 010c 	add.w	r1, r7, #12
 8001b84:	2305      	movs	r3, #5
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <BLDC_main+0x804>)
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	e032      	b.n	8001bf4 <BLDC_main+0x81c>
 8001b8e:	bf00      	nop
 8001b90:	66666666 	.word	0x66666666
 8001b94:	3fe66666 	.word	0x3fe66666
 8001b98:	00015f8f 	.word	0x00015f8f
 8001b9c:	00041eb0 	.word	0x00041eb0
 8001ba0:	10624dd3 	.word	0x10624dd3
 8001ba4:	b60b60b7 	.word	0xb60b60b7
 8001ba8:	78787879 	.word	0x78787879
 8001bac:	2000097c 	.word	0x2000097c
 8001bb0:	20000dc0 	.word	0x20000dc0
 8001bb4:	40490fdb 	.word	0x40490fdb
 8001bb8:	43340000 	.word	0x43340000
 8001bbc:	48afc800 	.word	0x48afc800
 8001bc0:	20000974 	.word	0x20000974
 8001bc4:	447a0000 	.word	0x447a0000
 8001bc8:	20000934 	.word	0x20000934
 8001bcc:	200008f4 	.word	0x200008f4
 8001bd0:	200008b4 	.word	0x200008b4
 8001bd4:	20000874 	.word	0x20000874
 8001bd8:	476a6000 	.word	0x476a6000
 8001bdc:	20000790 	.word	0x20000790
 8001be0:	20000078 	.word	0x20000078
 8001be4:	20000028 	.word	0x20000028
 8001be8:	20000038 	.word	0x20000038
 8001bec:	20000088 	.word	0x20000088
 8001bf0:	20000058 	.word	0x20000058
 8001bf4:	4848      	ldr	r0, [pc, #288]	; (8001d18 <BLDC_main+0x940>)
 8001bf6:	f7ff facf 	bl	8001198 <check_value>
		check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1, &warning, &error, 6);
 8001bfa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c06:	f107 010c 	add.w	r1, r7, #12
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	4a43      	ldr	r2, [pc, #268]	; (8001d1c <BLDC_main+0x944>)
 8001c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c12:	4843      	ldr	r0, [pc, #268]	; (8001d20 <BLDC_main+0x948>)
 8001c14:	f7ff fac0 	bl	8001198 <check_value>
		check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2, &warning, &error, 7);
 8001c18:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c24:	f107 010c 	add.w	r1, r7, #12
 8001c28:	2307      	movs	r3, #7
 8001c2a:	4a3c      	ldr	r2, [pc, #240]	; (8001d1c <BLDC_main+0x944>)
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	483b      	ldr	r0, [pc, #236]	; (8001d20 <BLDC_main+0x948>)
 8001c32:	f7ff fab1 	bl	8001198 <check_value>

		//-----------------set PWM---------------------
		if(error){
 8001c36:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <BLDC_main+0x944>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <BLDC_main+0x872>
			Status = BLDC_ERROR;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			shutoff();
 8001c44:	f000 fbde 	bl	8002404 <shutoff>
 8001c48:	e0b3      	b.n	8001db2 <BLDC_main+0x9da>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8001c4a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d104      	bne.n	8001c5c <BLDC_main+0x884>
			shutoff();
 8001c52:	f000 fbd7 	bl	8002404 <shutoff>
			shutdown();
 8001c56:	f000 fbe7 	bl	8002428 <shutdown>
 8001c5a:	e0aa      	b.n	8001db2 <BLDC_main+0x9da>
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8001c5c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d12a      	bne.n	8001cba <BLDC_main+0x8e2>
//			shutoff();
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0) + error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f9a3 	bl	8001fb4 <mech_to_el_deg>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <BLDC_main+0x94c>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c96:	ee17 3a90 	vmov	r3, s15
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001cac:	b291      	uxth	r1, r2
 8001cae:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <BLDC_main+0x950>)
 8001cb0:	7812      	ldrb	r2, [r2, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fa52 	bl	800215c <inverter>
 8001cb8:	e07b      	b.n	8001db2 <BLDC_main+0x9da>
			}
		else if (Status == BLDC_RUNNING){
 8001cba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d134      	bne.n	8001d2c <BLDC_main+0x954>
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f974 	bl	8001fb4 <mech_to_el_deg>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <BLDC_main+0x94c>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf4:	ee17 3a90 	vmov	r3, s15
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001d0a:	b291      	uxth	r1, r2
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <BLDC_main+0x950>)
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fa23 	bl	800215c <inverter>
 8001d16:	e04c      	b.n	8001db2 <BLDC_main+0x9da>
 8001d18:	20000048 	.word	0x20000048
 8001d1c:	20000790 	.word	0x20000790
 8001d20:	20000068 	.word	0x20000068
 8001d24:	20000dc0 	.word	0x20000dc0
 8001d28:	20000dbc 	.word	0x20000dbc
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 8001d2c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d13e      	bne.n	8001db2 <BLDC_main+0x9da>
			HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001d34:	2201      	movs	r2, #1
 8001d36:	2140      	movs	r1, #64	; 0x40
 8001d38:	488b      	ldr	r0, [pc, #556]	; (8001f68 <BLDC_main+0xb90>)
 8001d3a:	f005 fba7 	bl	800748c <HAL_GPIO_WritePin>
			order_phases(&IRQ_Encoders, &IRQ_Current);
 8001d3e:	498b      	ldr	r1, [pc, #556]	; (8001f6c <BLDC_main+0xb94>)
 8001d40:	488b      	ldr	r0, [pc, #556]	; (8001f70 <BLDC_main+0xb98>)
 8001d42:	f000 fb93 	bl	800246c <order_phases>
			calibrate(&IRQ_Encoders, &IRQ_Current);
 8001d46:	4989      	ldr	r1, [pc, #548]	; (8001f6c <BLDC_main+0xb94>)
 8001d48:	4889      	ldr	r0, [pc, #548]	; (8001f70 <BLDC_main+0xb98>)
 8001d4a:	f000 fd05 	bl	8002758 <calibrate>

			//start calibration
			storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 8001d4e:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <BLDC_main+0xb98>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a88      	ldr	r2, [pc, #544]	; (8001f74 <BLDC_main+0xb9c>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	4a86      	ldr	r2, [pc, #536]	; (8001f78 <BLDC_main+0xba0>)
 8001d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d62:	441a      	add	r2, r3
 8001d64:	1211      	asrs	r1, r2, #8
 8001d66:	17da      	asrs	r2, r3, #31
 8001d68:	1a8a      	subs	r2, r1, r2
 8001d6a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001d6e:	fb01 f202 	mul.w	r2, r1, r2
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	4b81      	ldr	r3, [pc, #516]	; (8001f7c <BLDC_main+0xba4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	f8a3 24a8 	strh.w	r2, [r3, #1192]	; 0x4a8
			storage->electrical_offset = electrical_offset;
 8001d80:	4b7e      	ldr	r3, [pc, #504]	; (8001f7c <BLDC_main+0xba4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7e      	ldr	r2, [pc, #504]	; (8001f80 <BLDC_main+0xba8>)
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	665a      	str	r2, [r3, #100]	; 0x64
			storage->PHASE_ORDER = PHASE_ORDER;
 8001d8a:	4b7c      	ldr	r3, [pc, #496]	; (8001f7c <BLDC_main+0xba4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7d      	ldr	r2, [pc, #500]	; (8001f84 <BLDC_main+0xbac>)
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			memcpy(storage->error_filt,error_filt,sizeof(error_filt));
 8001d96:	4b79      	ldr	r3, [pc, #484]	; (8001f7c <BLDC_main+0xba4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3368      	adds	r3, #104	; 0x68
 8001d9c:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001da0:	4979      	ldr	r1, [pc, #484]	; (8001f88 <BLDC_main+0xbb0>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f009 fa3d 	bl	800b222 <memcpy>
			Flash_save();
 8001da8:	f001 fb68 	bl	800347c <Flash_save>
			Status = BLDC_STOPPED_WITH_BREAK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}

		//--------------send can message------------------ 1us
		//time keepers
		timing_CAN_feedback++;
 8001db2:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <BLDC_main+0xbb4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	4a74      	ldr	r2, [pc, #464]	; (8001f8c <BLDC_main+0xbb4>)
 8001dba:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8001dbc:	4b74      	ldr	r3, [pc, #464]	; (8001f90 <BLDC_main+0xbb8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a73      	ldr	r2, [pc, #460]	; (8001f90 <BLDC_main+0xbb8>)
 8001dc4:	6013      	str	r3, [r2, #0]

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8001dc6:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <BLDC_main+0xbb4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b95      	cmp	r3, #149	; 0x95
 8001dcc:	f240 8089 	bls.w	8001ee2 <BLDC_main+0xb0a>
			timing_CAN_feedback = 0;
 8001dd0:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <BLDC_main+0xbb4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <BLDC_main+0xbbc>)
 8001dda:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8001ddc:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <BLDC_main+0xbc0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6c      	ldr	r2, [pc, #432]	; (8001f94 <BLDC_main+0xbbc>)
 8001de2:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	4a6b      	ldr	r2, [pc, #428]	; (8001f94 <BLDC_main+0xbbc>)
 8001de8:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8001dea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001dee:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <BLDC_main+0xbbc>)
 8001df0:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <BLDC_main+0xbbc>)
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8001dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfc:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <BLDC_main+0xbbc>)
 8001dfe:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8001e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e02:	4a64      	ldr	r2, [pc, #400]	; (8001f94 <BLDC_main+0xbbc>)
 8001e04:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8001e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e08:	4a62      	ldr	r2, [pc, #392]	; (8001f94 <BLDC_main+0xbbc>)
 8001e0a:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8001e0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <BLDC_main+0xbbc>)
 8001e14:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8001e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e18:	4a5e      	ldr	r2, [pc, #376]	; (8001f94 <BLDC_main+0xbbc>)
 8001e1a:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8001e1c:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8001e20:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <BLDC_main+0xbbc>)
 8001e22:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 8001e24:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8001e28:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <BLDC_main+0xbbc>)
 8001e2a:	865a      	strh	r2, [r3, #50]	; 0x32
			Feedback.Temp_ENCODER1 = IRQ_Encoders_BUFF.Encoder1_temp_x10;
 8001e2c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001e30:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <BLDC_main+0xbbc>)
 8001e32:	869a      	strh	r2, [r3, #52]	; 0x34
			Feedback.Temp_ENCODER2 = IRQ_Encoders_BUFF.Encoder2_temp_x10;
 8001e34:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8001e38:	4b56      	ldr	r3, [pc, #344]	; (8001f94 <BLDC_main+0xbbc>)
 8001e3a:	86da      	strh	r2, [r3, #54]	; 0x36

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	4a55      	ldr	r2, [pc, #340]	; (8001f94 <BLDC_main+0xbbc>)
 8001e40:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	4a53      	ldr	r2, [pc, #332]	; (8001f94 <BLDC_main+0xbbc>)
 8001e46:	6153      	str	r3, [r2, #20]
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 8001e48:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <BLDC_main+0xbc4>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e52:	ee17 2a90 	vmov	r2, s15
 8001e56:	4b4f      	ldr	r3, [pc, #316]	; (8001f94 <BLDC_main+0xbbc>)
 8001e58:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 8001e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5c:	4a4d      	ldr	r2, [pc, #308]	; (8001f94 <BLDC_main+0xbbc>)
 8001e5e:	61d3      	str	r3, [r2, #28]
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8001e60:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <BLDC_main+0xbbc>)
 8001e62:	f240 4136 	movw	r1, #1078	; 0x436
 8001e66:	484e      	ldr	r0, [pc, #312]	; (8001fa0 <BLDC_main+0xbc8>)
 8001e68:	f002 f996 	bl	8004198 <FDCAN_sendData>

			//-----------------PRINTF DEBUGGING-------------------
			//will print same info as on CAN-BUS
			#ifdef PRINT_DEBUG
			PrintServerPrintf(
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <BLDC_main+0xbbc>)
 8001e6e:	6a19      	ldr	r1, [r3, #32]
 8001e70:	4b48      	ldr	r3, [pc, #288]	; (8001f94 <BLDC_main+0xbbc>)
 8001e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e74:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <BLDC_main+0xbbc>)
 8001e76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001e78:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <BLDC_main+0xbbc>)
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					#ifdef Position_debug
					"POSITION[EN1:%7d EN2:%7d CALC:%7d VELOCITY:%7i]"
					#endif
					"\r\n"
					#ifdef Current_debug
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8001e7c:	4c49      	ldr	r4, [pc, #292]	; (8001fa4 <BLDC_main+0xbcc>)
 8001e7e:	edd4 7a01 	vldr	s15, [r4, #4]
			PrintServerPrintf(
 8001e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e86:	edc7 7a01 	vstr	s15, [r7, #4]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8001e8a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e92:	ee17 4a90 	vmov	r4, s15
 8001e96:	b224      	sxth	r4, r4
			PrintServerPrintf(
 8001e98:	4625      	mov	r5, r4
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8001e9a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea2:	ee17 4a90 	vmov	r4, s15
 8001ea6:	b224      	sxth	r4, r4
			PrintServerPrintf(
 8001ea8:	4626      	mov	r6, r4
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8001eaa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb2:	ee17 4a90 	vmov	r4, s15
 8001eb6:	b224      	sxth	r4, r4
			PrintServerPrintf(
 8001eb8:	603c      	str	r4, [r7, #0]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8001eba:	4c3b      	ldr	r4, [pc, #236]	; (8001fa8 <BLDC_main+0xbd0>)
 8001ebc:	edd4 7a01 	vldr	s15, [r4, #4]
 8001ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec4:	ee17 4a90 	vmov	r4, s15
 8001ec8:	b224      	sxth	r4, r4
			PrintServerPrintf(
 8001eca:	9405      	str	r4, [sp, #20]
 8001ecc:	683c      	ldr	r4, [r7, #0]
 8001ece:	9404      	str	r4, [sp, #16]
 8001ed0:	9603      	str	r6, [sp, #12]
 8001ed2:	9502      	str	r5, [sp, #8]
 8001ed4:	687c      	ldr	r4, [r7, #4]
 8001ed6:	9401      	str	r4, [sp, #4]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	4603      	mov	r3, r0
 8001edc:	4833      	ldr	r0, [pc, #204]	; (8001fac <BLDC_main+0xbd4>)
 8001ede:	f001 fd41 	bl	8003964 <PrintServerPrintf>
					); // \r only goes back not to next line!
			#endif
		}

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <BLDC_main+0xbc0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <BLDC_main+0xb22>
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef4:	f005 faca 	bl	800748c <HAL_GPIO_WritePin>
 8001ef8:	e006      	b.n	8001f08 <BLDC_main+0xb30>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f005 fac2 	bl	800748c <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <BLDC_main+0xb42>
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	4815      	ldr	r0, [pc, #84]	; (8001f68 <BLDC_main+0xb90>)
 8001f14:	f005 faba 	bl	800748c <HAL_GPIO_WritePin>
 8001f18:	e004      	b.n	8001f24 <BLDC_main+0xb4c>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	4812      	ldr	r0, [pc, #72]	; (8001f68 <BLDC_main+0xb90>)
 8001f20:	f005 fab4 	bl	800748c <HAL_GPIO_WritePin>

		#ifndef RUNNING_LED_DEBUG
		if(running_LED_timing >= LOOP_FREQ_KHZ*100){
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <BLDC_main+0xbb8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d906      	bls.n	8001f3e <BLDC_main+0xb66>
			running_LED_timing = 0;
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <BLDC_main+0xbb8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	480b      	ldr	r0, [pc, #44]	; (8001f68 <BLDC_main+0xb90>)
 8001f3a:	f005 faac 	bl	8007496 <HAL_GPIO_TogglePin>
		}
		#endif

		//-----------------update dac---------------------------
		#ifdef DAC_DEBUG
		dac_value(q/10 +1500);
 8001f3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f42:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001fb0 <BLDC_main+0xbd8>
 8001f4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f56:	ee17 3a90 	vmov	r3, s15
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fd27 	bl	80039b0 <dac_value>
	while(1){
 8001f62:	f7ff bbcf 	b.w	8001704 <BLDC_main+0x32c>
 8001f66:	bf00      	nop
 8001f68:	48000800 	.word	0x48000800
 8001f6c:	20000794 	.word	0x20000794
 8001f70:	200007b0 	.word	0x200007b0
 8001f74:	10624dd3 	.word	0x10624dd3
 8001f78:	b60b60b7 	.word	0xb60b60b7
 8001f7c:	20000974 	.word	0x20000974
 8001f80:	20000dc0 	.word	0x20000dc0
 8001f84:	20000dbc 	.word	0x20000dbc
 8001f88:	2000097c 	.word	0x2000097c
 8001f8c:	20000788 	.word	0x20000788
 8001f90:	2000078c 	.word	0x2000078c
 8001f94:	20000834 	.word	0x20000834
 8001f98:	20000790 	.word	0x20000790
 8001f9c:	20000934 	.word	0x20000934
 8001fa0:	20001908 	.word	0x20001908
 8001fa4:	200008b4 	.word	0x200008b4
 8001fa8:	20000874 	.word	0x20000874
 8001fac:	0800e2b0 	.word	0x0800e2b0
 8001fb0:	44bb8000 	.word	0x44bb8000

08001fb4 <mech_to_el_deg>:
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	float temp = (float)(angle_deg-offset_deg+360000*2);
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8001fc8:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd4:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360000) temp = temp-360000;
 8001fd8:	e007      	b.n	8001fea <mech_to_el_deg+0x36>
 8001fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fde:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80020a0 <mech_to_el_deg+0xec>
 8001fe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fe6:	edc7 7a03 	vstr	s15, [r7, #12]
 8001fea:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fee:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80020a0 <mech_to_el_deg+0xec>
 8001ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	dcee      	bgt.n	8001fda <mech_to_el_deg+0x26>
	while (temp > (360000/17)) temp = temp-deg_pr_pole;
 8001ffc:	e007      	b.n	800200e <mech_to_el_deg+0x5a>
 8001ffe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002002:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80020a4 <mech_to_el_deg+0xf0>
 8002006:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800200a:	edc7 7a03 	vstr	s15, [r7, #12]
 800200e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002012:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80020a4 <mech_to_el_deg+0xf0>
 8002016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	dcee      	bgt.n	8001ffe <mech_to_el_deg+0x4a>
	temp = temp*17/1000;
 8002020:	edd7 7a03 	vldr	s15, [r7, #12]
 8002024:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800202c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80020a8 <mech_to_el_deg+0xf4>
 8002030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002034:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360) temp -= 360;
 8002038:	e007      	b.n	800204a <mech_to_el_deg+0x96>
 800203a:	edd7 7a03 	vldr	s15, [r7, #12]
 800203e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80020ac <mech_to_el_deg+0xf8>
 8002042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002046:	edc7 7a03 	vstr	s15, [r7, #12]
 800204a:	edd7 7a03 	vldr	s15, [r7, #12]
 800204e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80020ac <mech_to_el_deg+0xf8>
 8002052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	dcee      	bgt.n	800203a <mech_to_el_deg+0x86>
	if(temp < 0) return 0;
 800205c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	d501      	bpl.n	800206e <mech_to_el_deg+0xba>
 800206a:	2300      	movs	r3, #0
 800206c:	e012      	b.n	8002094 <mech_to_el_deg+0xe0>
	else if(temp > 360) return 360;
 800206e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002072:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80020ac <mech_to_el_deg+0xf8>
 8002076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	dd02      	ble.n	8002086 <mech_to_el_deg+0xd2>
 8002080:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002084:	e006      	b.n	8002094 <mech_to_el_deg+0xe0>
	else return (int16_t)temp;
 8002086:	edd7 7a03 	vldr	s15, [r7, #12]
 800208a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800208e:	ee17 3a90 	vmov	r3, s15
 8002092:	b21b      	sxth	r3, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	48afc800 	.word	0x48afc800
 80020a4:	46a57000 	.word	0x46a57000
 80020a8:	447a0000 	.word	0x447a0000
 80020ac:	43b40000 	.word	0x43b40000

080020b0 <CTRL_init_PWM>:
#define duty_max 1499
#define pi 3.1415926535

uint32_t *V_bat = 0;

void CTRL_init_PWM(uint32_t *V_bat_ptr){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	V_bat = V_bat_ptr;
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <CTRL_init_PWM+0x9c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 80020be:	2100      	movs	r1, #0
 80020c0:	4823      	ldr	r0, [pc, #140]	; (8002150 <CTRL_init_PWM+0xa0>)
 80020c2:	f007 f9a7 	bl	8009414 <HAL_TIM_PWM_Start>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <CTRL_init_PWM+0x20>
 80020cc:	f002 fd1b 	bl	8004b06 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 80020d0:	2100      	movs	r1, #0
 80020d2:	481f      	ldr	r0, [pc, #124]	; (8002150 <CTRL_init_PWM+0xa0>)
 80020d4:	f007 fad8 	bl	8009688 <HAL_TIMEx_PWMN_Start>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <CTRL_init_PWM+0x32>
 80020de:	f002 fd12 	bl	8004b06 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80020e2:	2104      	movs	r1, #4
 80020e4:	481a      	ldr	r0, [pc, #104]	; (8002150 <CTRL_init_PWM+0xa0>)
 80020e6:	f007 f995 	bl	8009414 <HAL_TIM_PWM_Start>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <CTRL_init_PWM+0x44>
 80020f0:	f002 fd09 	bl	8004b06 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80020f4:	2104      	movs	r1, #4
 80020f6:	4816      	ldr	r0, [pc, #88]	; (8002150 <CTRL_init_PWM+0xa0>)
 80020f8:	f007 fac6 	bl	8009688 <HAL_TIMEx_PWMN_Start>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <CTRL_init_PWM+0x56>
 8002102:	f002 fd00 	bl	8004b06 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8002106:	2108      	movs	r1, #8
 8002108:	4811      	ldr	r0, [pc, #68]	; (8002150 <CTRL_init_PWM+0xa0>)
 800210a:	f007 f983 	bl	8009414 <HAL_TIM_PWM_Start>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <CTRL_init_PWM+0x68>
 8002114:	f002 fcf7 	bl	8004b06 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8002118:	2108      	movs	r1, #8
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <CTRL_init_PWM+0xa0>)
 800211c:	f007 fab4 	bl	8009688 <HAL_TIMEx_PWMN_Start>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <CTRL_init_PWM+0x7a>
 8002126:	f002 fcee 	bl	8004b06 <Error_Handler>

	TIM1->CCR1 = 0;
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <CTRL_init_PWM+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <CTRL_init_PWM+0xa4>)
 8002132:	2200      	movs	r2, #0
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <CTRL_init_PWM+0xa4>)
 8002138:	2200      	movs	r2, #0
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 800213c:	4806      	ldr	r0, [pc, #24]	; (8002158 <CTRL_init_PWM+0xa8>)
 800213e:	f006 fd3b 	bl	8008bb8 <HAL_TIM_Base_Start_IT>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000978 	.word	0x20000978
 8002150:	20001bf0 	.word	0x20001bf0
 8002154:	40012c00 	.word	0x40012c00
 8002158:	20001c3c 	.word	0x20001c3c

0800215c <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage, uint8_t direction){
 800215c:	b480      	push	{r7}
 800215e:	b08b      	sub	sp, #44	; 0x2c
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
 8002166:	460b      	mov	r3, r1
 8002168:	80bb      	strh	r3, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	70fb      	strb	r3, [r7, #3]
	angle = (angle+360*2)%360;
 800216e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002172:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8002176:	4a9d      	ldr	r2, [pc, #628]	; (80023ec <inverter+0x290>)
 8002178:	fb82 1203 	smull	r1, r2, r2, r3
 800217c:	441a      	add	r2, r3
 800217e:	1211      	asrs	r1, r2, #8
 8002180:	17da      	asrs	r2, r3, #31
 8002182:	1a8a      	subs	r2, r1, r2
 8002184:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002188:	fb01 f202 	mul.w	r2, r1, r2
 800218c:	1a9a      	subs	r2, r3, r2
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]

//	if(V_bat == NULL){
//		shutoff();
//		return;
//	}
	uint16_t duty = voltage; //(voltage * duty_max)/ (*V_bat);
 8002192:	88bb      	ldrh	r3, [r7, #4]
 8002194:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(duty > duty_max)duty = duty_max;
 8002196:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002198:	f240 52db 	movw	r2, #1499	; 0x5db
 800219c:	4293      	cmp	r3, r2
 800219e:	d902      	bls.n	80021a6 <inverter+0x4a>
 80021a0:	f240 53db 	movw	r3, #1499	; 0x5db
 80021a4:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint32_t compare_M1 = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
	uint32_t compare_M2 = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M3 = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]

	float deg = (float)(angle%60);
 80021b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <inverter+0x294>)
 80021b8:	fb83 1302 	smull	r1, r3, r3, r2
 80021bc:	4413      	add	r3, r2
 80021be:	1159      	asrs	r1, r3, #5
 80021c0:	17d3      	asrs	r3, r2, #31
 80021c2:	1ac9      	subs	r1, r1, r3
 80021c4:	460b      	mov	r3, r1
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a5b      	subs	r3, r3, r1
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d8:	edc7 7a05 	vstr	s15, [r7, #20]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 80021dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e6:	eddf 6a83 	vldr	s13, [pc, #524]	; 80023f4 <inverter+0x298>
 80021ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021f2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80021f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021fa:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 80023f4 <inverter+0x298>
 80021fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002202:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002206:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 80023f8 <inverter+0x29c>
 800220a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800220e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002212:	eddf 6a78 	vldr	s13, [pc, #480]	; 80023f4 <inverter+0x298>
 8002216:	edd7 7a05 	vldr	s15, [r7, #20]
 800221a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800221e:	eddf 5a75 	vldr	s11, [pc, #468]	; 80023f4 <inverter+0x298>
 8002222:	edd7 7a05 	vldr	s15, [r7, #20]
 8002226:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800222a:	eddf 5a73 	vldr	s11, [pc, #460]	; 80023f8 <inverter+0x29c>
 800222e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002236:	eddf 6a71 	vldr	s13, [pc, #452]	; 80023fc <inverter+0x2a0>
 800223a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800223e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800224a:	ee17 3a90 	vmov	r3, s15
 800224e:	827b      	strh	r3, [r7, #18]
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8002250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225a:	edd7 7a05 	vldr	s15, [r7, #20]
 800225e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002262:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002266:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80023f8 <inverter+0x29c>
 800226a:	edd7 7a05 	vldr	s15, [r7, #20]
 800226e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002272:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002276:	eddf 6a60 	vldr	s13, [pc, #384]	; 80023f8 <inverter+0x29c>
 800227a:	edd7 7a05 	vldr	s15, [r7, #20]
 800227e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002282:	edd7 7a05 	vldr	s15, [r7, #20]
 8002286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80023fc <inverter+0x2a0>
 800228e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002292:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800229e:	ee17 3a90 	vmov	r3, s15
 80022a2:	823b      	strh	r3, [r7, #16]
	uint16_t T0 = (duty_max-T1-T2)/2;
 80022a4:	8a7b      	ldrh	r3, [r7, #18]
 80022a6:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80022aa:	3303      	adds	r3, #3
 80022ac:	8a3a      	ldrh	r2, [r7, #16]
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	0fda      	lsrs	r2, r3, #31
 80022b2:	4413      	add	r3, r2
 80022b4:	105b      	asrs	r3, r3, #1
 80022b6:	81fb      	strh	r3, [r7, #14]

	if(angle >= 0 && angle < 60){
 80022b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db10      	blt.n	80022e2 <inverter+0x186>
 80022c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c4:	2b3b      	cmp	r3, #59	; 0x3b
 80022c6:	dc0c      	bgt.n	80022e2 <inverter+0x186>
		compare_M1 = T0;
 80022c8:	89fb      	ldrh	r3, [r7, #14]
 80022ca:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T2;
 80022cc:	89fa      	ldrh	r2, [r7, #14]
 80022ce:	8a3b      	ldrh	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 80022d4:	89fa      	ldrh	r2, [r7, #14]
 80022d6:	8a7b      	ldrh	r3, [r7, #18]
 80022d8:	441a      	add	r2, r3
 80022da:	8a3b      	ldrh	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	e06a      	b.n	80023b8 <inverter+0x25c>
		}
	else if(angle >= 60 && angle < 120){
 80022e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022e6:	2b3b      	cmp	r3, #59	; 0x3b
 80022e8:	dd10      	ble.n	800230c <inverter+0x1b0>
 80022ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ee:	2b77      	cmp	r3, #119	; 0x77
 80022f0:	dc0c      	bgt.n	800230c <inverter+0x1b0>
		compare_M1 = T0;
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 80022f6:	89fa      	ldrh	r2, [r7, #14]
 80022f8:	8a7b      	ldrh	r3, [r7, #18]
 80022fa:	441a      	add	r2, r3
 80022fc:	8a3b      	ldrh	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1;
 8002302:	89fa      	ldrh	r2, [r7, #14]
 8002304:	8a7b      	ldrh	r3, [r7, #18]
 8002306:	4413      	add	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	e055      	b.n	80023b8 <inverter+0x25c>
		}
	else if(angle >= 120 && angle < 180){
 800230c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002310:	2b77      	cmp	r3, #119	; 0x77
 8002312:	dd10      	ble.n	8002336 <inverter+0x1da>
 8002314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002318:	2bb3      	cmp	r3, #179	; 0xb3
 800231a:	dc0c      	bgt.n	8002336 <inverter+0x1da>
		compare_M1 = T0+T2;
 800231c:	89fa      	ldrh	r2, [r7, #14]
 800231e:	8a3b      	ldrh	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 8002324:	89fa      	ldrh	r2, [r7, #14]
 8002326:	8a7b      	ldrh	r3, [r7, #18]
 8002328:	441a      	add	r2, r3
 800232a:	8a3b      	ldrh	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	e040      	b.n	80023b8 <inverter+0x25c>
		}
	else if(angle >= 180 && angle < 240){
 8002336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233a:	2bb3      	cmp	r3, #179	; 0xb3
 800233c:	dd10      	ble.n	8002360 <inverter+0x204>
 800233e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002342:	2bef      	cmp	r3, #239	; 0xef
 8002344:	dc0c      	bgt.n	8002360 <inverter+0x204>
		compare_M1 = T0+T1+T2;
 8002346:	89fa      	ldrh	r2, [r7, #14]
 8002348:	8a7b      	ldrh	r3, [r7, #18]
 800234a:	441a      	add	r2, r3
 800234c:	8a3b      	ldrh	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1;
 8002352:	89fa      	ldrh	r2, [r7, #14]
 8002354:	8a7b      	ldrh	r3, [r7, #18]
 8002356:	4413      	add	r3, r2
 8002358:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 800235a:	89fb      	ldrh	r3, [r7, #14]
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	e02b      	b.n	80023b8 <inverter+0x25c>
		}
	else if(angle >= 240 && angle < 300){
 8002360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002364:	2bef      	cmp	r3, #239	; 0xef
 8002366:	dd11      	ble.n	800238c <inverter+0x230>
 8002368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002370:	da0c      	bge.n	800238c <inverter+0x230>
		compare_M1 = T0+T1+T2;
 8002372:	89fa      	ldrh	r2, [r7, #14]
 8002374:	8a7b      	ldrh	r3, [r7, #18]
 8002376:	441a      	add	r2, r3
 8002378:	8a3b      	ldrh	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T2;
 8002382:	89fa      	ldrh	r2, [r7, #14]
 8002384:	8a3b      	ldrh	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	e015      	b.n	80023b8 <inverter+0x25c>
		}
	else if(angle >= 300 && angle <= 360){
 800238c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002390:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002394:	db10      	blt.n	80023b8 <inverter+0x25c>
 8002396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800239a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800239e:	dc0b      	bgt.n	80023b8 <inverter+0x25c>
		compare_M1 = T0+T1;
 80023a0:	89fa      	ldrh	r2, [r7, #14]
 80023a2:	8a7b      	ldrh	r3, [r7, #18]
 80023a4:	4413      	add	r3, r2
 80023a6:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 80023a8:	89fb      	ldrh	r3, [r7, #14]
 80023aa:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 80023ac:	89fa      	ldrh	r2, [r7, #14]
 80023ae:	8a7b      	ldrh	r3, [r7, #18]
 80023b0:	441a      	add	r2, r3
 80023b2:	8a3b      	ldrh	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 80023b8:	4a11      	ldr	r2, [pc, #68]	; (8002400 <inverter+0x2a4>)
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	6353      	str	r3, [r2, #52]	; 0x34
	if(direction){
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <inverter+0x276>
		TIM1->CCR2 = compare_M3;
 80023c4:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <inverter+0x2a4>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = compare_M2;
 80023ca:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <inverter+0x2a4>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	63d3      	str	r3, [r2, #60]	; 0x3c
	}


//	dac_value(angle*8+200);

}
 80023d0:	e005      	b.n	80023de <inverter+0x282>
		TIM1->CCR2 = compare_M2;
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <inverter+0x2a4>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = compare_M3;
 80023d8:	4a09      	ldr	r2, [pc, #36]	; (8002400 <inverter+0x2a4>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80023de:	bf00      	nop
 80023e0:	372c      	adds	r7, #44	; 0x2c
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	b60b60b7 	.word	0xb60b60b7
 80023f0:	88888889 	.word	0x88888889
 80023f4:	42700000 	.word	0x42700000
 80023f8:	43340000 	.word	0x43340000
 80023fc:	471e3400 	.word	0x471e3400
 8002400:	40012c00 	.word	0x40012c00

08002404 <shutoff>:
void shutoff(void){
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <shutoff+0x20>)
 800240a:	2200      	movs	r2, #0
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <shutoff+0x20>)
 8002410:	2200      	movs	r2, #0
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <shutoff+0x20>)
 8002416:	2200      	movs	r2, #0
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40012c00 	.word	0x40012c00

08002428 <shutdown>:
void shutdown(void){
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 800242c:	2100      	movs	r1, #0
 800242e:	480e      	ldr	r0, [pc, #56]	; (8002468 <shutdown+0x40>)
 8002430:	f007 f8ba 	bl	80095a8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8002434:	2100      	movs	r1, #0
 8002436:	480c      	ldr	r0, [pc, #48]	; (8002468 <shutdown+0x40>)
 8002438:	f007 f994 	bl	8009764 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 800243c:	2104      	movs	r1, #4
 800243e:	480a      	ldr	r0, [pc, #40]	; (8002468 <shutdown+0x40>)
 8002440:	f007 f8b2 	bl	80095a8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8002444:	2104      	movs	r1, #4
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <shutdown+0x40>)
 8002448:	f007 f98c 	bl	8009764 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 800244c:	2108      	movs	r1, #8
 800244e:	4806      	ldr	r0, [pc, #24]	; (8002468 <shutdown+0x40>)
 8002450:	f007 f8aa 	bl	80095a8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8002454:	2108      	movs	r1, #8
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <shutdown+0x40>)
 8002458:	f007 f984 	bl	8009764 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <shutdown+0x40>)
 800245e:	f006 fb97 	bl	8008b90 <HAL_TIM_Base_Stop>
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20001bf0 	.word	0x20001bf0

0800246c <order_phases>:
float electrical_offset = 0;
float pi = 3.14159265f;

uint32_t motor_lut[LUT_SIZE];

void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 800246c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002470:	b090      	sub	sp, #64	; 0x40
 8002472:	af04      	add	r7, sp, #16
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]

    ///Checks phase order, to ensure that positive Q current produces
    ///torque in the positive direction wrt the position sensor.
	PrintServerPrintf("\n\r Checking phase ordering\n\r");
 8002478:	48a8      	ldr	r0, [pc, #672]	; (800271c <order_phases+0x2b0>)
 800247a:	f001 fa73 	bl	8003964 <PrintServerPrintf>
    float theta_ref = 0;
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
    float theta_actual = 0;
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    int sample_counter = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28

    float d;
    float q;

    PHASE_ORDER = 0;
 800248e:	4ba4      	ldr	r3, [pc, #656]	; (8002720 <order_phases+0x2b4>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]

    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002494:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800249c:	ee17 3a90 	vmov	r3, s15
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	4a9f      	ldr	r2, [pc, #636]	; (8002720 <order_phases+0x2b4>)
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	2164      	movs	r1, #100	; 0x64
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fe57 	bl	800215c <inverter>
    HAL_Delay(1000);
 80024ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024b2:	f002 ffab 	bl	800540c <HAL_Delay>
    //float theta_start = ps->GetMechPositionFixed();                                  //get initial rotor position
    float theta_start;

    //current d and q
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 80024b6:	4b9b      	ldr	r3, [pc, #620]	; (8002724 <order_phases+0x2b8>)
 80024b8:	ed93 7a00 	vldr	s14, [r3]
 80024bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002728 <order_phases+0x2bc>
 80024c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d8:	ed9f 6a94 	vldr	s12, [pc, #592]	; 800272c <order_phases+0x2c0>
 80024dc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ec:	eddf 5a8f 	vldr	s11, [pc, #572]	; 800272c <order_phases+0x2c0>
 80024f0:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002500:	ed9f 5a8a 	vldr	s10, [pc, #552]	; 800272c <order_phases+0x2c0>
 8002504:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002508:	f107 020c 	add.w	r2, r7, #12
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	eef0 1a65 	vmov.f32	s3, s11
 8002518:	eeb0 1a46 	vmov.f32	s2, s12
 800251c:	eef0 0a66 	vmov.f32	s1, s13
 8002520:	eeb0 0a47 	vmov.f32	s0, s14
 8002524:	f001 fd50 	bl	8003fc8 <dq0>
//    controller->i_b = I_SCALE*(float)(controller->adc2_raw - controller->adc2_offset);    //Calculate phase currents from ADC readings
//    controller->i_c = I_SCALE*(float)(controller->adc1_raw - controller->adc1_offset);
//    controller->i_a = -controller->i_b - controller->i_c;
//    dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
    float current = sqrt((d*d + q*q));
 8002528:	ed97 7a04 	vldr	s14, [r7, #16]
 800252c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002534:	edd7 6a03 	vldr	s13, [r7, #12]
 8002538:	edd7 7a03 	vldr	s15, [r7, #12]
 800253c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002544:	ee17 0a90 	vmov	r0, s15
 8002548:	f7fe f826 	bl	8000598 <__aeabi_f2d>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	ec43 2b10 	vmov	d0, r2, r3
 8002554:	f00a ff0c 	bl	800d370 <sqrt>
 8002558:	ec53 2b10 	vmov	r2, r3, d0
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f7fe fb6a 	bl	8000c38 <__aeabi_d2f>
 8002564:	4603      	mov	r3, r0
 8002566:	61bb      	str	r3, [r7, #24]
    PrintServerPrintf("\n\rCurrent\n\r");
 8002568:	4871      	ldr	r0, [pc, #452]	; (8002730 <order_phases+0x2c4>)
 800256a:	f001 f9fb 	bl	8003964 <PrintServerPrintf>
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe f811 	bl	8000598 <__aeabi_f2d>
 8002576:	4680      	mov	r8, r0
 8002578:	4689      	mov	r9, r1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe f80b 	bl	8000598 <__aeabi_f2d>
 8002582:	4604      	mov	r4, r0
 8002584:	460d      	mov	r5, r1
 8002586:	69b8      	ldr	r0, [r7, #24]
 8002588:	f7fe f806 	bl	8000598 <__aeabi_f2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002594:	e9cd 4500 	strd	r4, r5, [sp]
 8002598:	4642      	mov	r2, r8
 800259a:	464b      	mov	r3, r9
 800259c:	4865      	ldr	r0, [pc, #404]	; (8002734 <order_phases+0x2c8>)
 800259e:	f001 f9e1 	bl	8003964 <PrintServerPrintf>
    /// Rotate voltage angle
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 80025a2:	e045      	b.n	8002630 <order_phases+0x1c4>
    	inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 80025a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ac:	ee17 3a90 	vmov	r3, s15
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <order_phases+0x2b4>)
 80025b4:	7812      	ldrb	r2, [r2, #0]
 80025b6:	2164      	movs	r1, #100	; 0x64
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fdcf 	bl	800215c <inverter>
    	HAL_Delay(1);
 80025be:	2001      	movs	r0, #1
 80025c0:	f002 ff24 	bl	800540c <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d0:	eddf 6a56 	vldr	s13, [pc, #344]	; 800272c <order_phases+0x2c0>
 80025d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025d8:	edc7 7a07 	vstr	s15, [r7, #28]
       if(theta_ref==0){theta_start = theta_actual;}
 80025dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e8:	d101      	bne.n	80025ee <order_phases+0x182>
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
       if(sample_counter >= 1){
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	dd12      	ble.n	800261a <order_phases+0x1ae>
           sample_counter = 0 ;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
           PrintServerPrintf("%.4f %.4f\n\r", (float)theta_ref, theta_actual);
 80025f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025fa:	f7fd ffcd 	bl	8000598 <__aeabi_f2d>
 80025fe:	4604      	mov	r4, r0
 8002600:	460d      	mov	r5, r1
 8002602:	69f8      	ldr	r0, [r7, #28]
 8002604:	f7fd ffc8 	bl	8000598 <__aeabi_f2d>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	e9cd 2300 	strd	r2, r3, [sp]
 8002610:	4622      	mov	r2, r4
 8002612:	462b      	mov	r3, r5
 8002614:	4848      	ldr	r0, [pc, #288]	; (8002738 <order_phases+0x2cc>)
 8002616:	f001 f9a5 	bl	8003964 <PrintServerPrintf>
        }
        sample_counter++;
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	3301      	adds	r3, #1
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
       theta_ref += 1;
 8002620:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002628:	ee77 7a87 	vadd.f32	s15, s15, s14
 800262c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002630:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002634:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800273c <order_phases+0x2d0>
 8002638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	d4b0      	bmi.n	80025a4 <order_phases+0x138>
        }
    float theta_end = (float)ps->Encoder1_pos/1000;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800264e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800272c <order_phases+0x2c0>
 8002652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002656:	edc7 7a05 	vstr	s15, [r7, #20]
    int direction = (theta_end - theta_start)>0;
 800265a:	ed97 7a05 	vldr	s14, [r7, #20]
 800265e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	bfcc      	ite	gt
 8002670:	2301      	movgt	r3, #1
 8002672:	2300      	movle	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) > 180) direction = 0;
 8002678:	ed97 7a05 	vldr	s14, [r7, #20]
 800267c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002684:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002728 <order_phases+0x2bc>
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	dd01      	ble.n	8002696 <order_phases+0x22a>
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) < -180) direction = 1;
 8002696:	ed97 7a05 	vldr	s14, [r7, #20]
 800269a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800269e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002740 <order_phases+0x2d4>
 80026a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ae:	d501      	bpl.n	80026b4 <order_phases+0x248>
 80026b0:	2301      	movs	r3, #1
 80026b2:	623b      	str	r3, [r7, #32]
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 80026b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b6:	f7fd ff6f 	bl	8000598 <__aeabi_f2d>
 80026ba:	4604      	mov	r4, r0
 80026bc:	460d      	mov	r5, r1
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7fd ff6a 	bl	8000598 <__aeabi_f2d>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	e9cd 2300 	strd	r2, r3, [sp]
 80026cc:	4622      	mov	r2, r4
 80026ce:	462b      	mov	r3, r5
 80026d0:	481c      	ldr	r0, [pc, #112]	; (8002744 <order_phases+0x2d8>)
 80026d2:	f001 f947 	bl	8003964 <PrintServerPrintf>
    PrintServerPrintf("Direction:  %d\n\r", direction);
 80026d6:	6a39      	ldr	r1, [r7, #32]
 80026d8:	481b      	ldr	r0, [pc, #108]	; (8002748 <order_phases+0x2dc>)
 80026da:	f001 f943 	bl	8003964 <PrintServerPrintf>
    if(direction){PrintServerPrintf("Phasing correct\n\r");}
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <order_phases+0x280>
 80026e4:	4819      	ldr	r0, [pc, #100]	; (800274c <order_phases+0x2e0>)
 80026e6:	f001 f93d 	bl	8003964 <PrintServerPrintf>
 80026ea:	e005      	b.n	80026f8 <order_phases+0x28c>
    else if(!direction){PrintServerPrintf("Phasing incorrect.  Swapping phases V and W\n\r");}
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <order_phases+0x28c>
 80026f2:	4817      	ldr	r0, [pc, #92]	; (8002750 <order_phases+0x2e4>)
 80026f4:	f001 f936 	bl	8003964 <PrintServerPrintf>
    PHASE_ORDER = !direction;
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <order_phases+0x2b4>)
 8002708:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 800270a:	200a      	movs	r0, #10
 800270c:	f002 fe7e 	bl	800540c <HAL_Delay>
    }
 8002710:	bf00      	nop
 8002712:	3730      	adds	r7, #48	; 0x30
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800271a:	bf00      	nop
 800271c:	0800e300 	.word	0x0800e300
 8002720:	20000dbc 	.word	0x20000dbc
 8002724:	20000098 	.word	0x20000098
 8002728:	43340000 	.word	0x43340000
 800272c:	447a0000 	.word	0x447a0000
 8002730:	0800e320 	.word	0x0800e320
 8002734:	0800e32c 	.word	0x0800e32c
 8002738:	0800e33c 	.word	0x0800e33c
 800273c:	44340000 	.word	0x44340000
 8002740:	c3340000 	.word	0xc3340000
 8002744:	0800e348 	.word	0x0800e348
 8002748:	0800e370 	.word	0x0800e370
 800274c:	0800e384 	.word	0x0800e384
 8002750:	0800e398 	.word	0x0800e398
 8002754:	00000000 	.word	0x00000000

08002758 <calibrate>:


void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8002758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800275c:	b0cb      	sub	sp, #300	; 0x12c
 800275e:	af04      	add	r7, sp, #16
 8002760:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002762:	64b9      	str	r1, [r7, #72]	; 0x48
 8002764:	466b      	mov	r3, sp
 8002766:	461e      	mov	r6, r3
    /// Measures the electrical angle offset of the position sensor
    /// and (in the future) corrects nonlinearity due to position sensor eccentricity
	PrintServerPrintf("Starting calibration procedure\n\r");
 8002768:	48eb      	ldr	r0, [pc, #940]	; (8002b18 <calibrate+0x3c0>)
 800276a:	f001 f8fb 	bl	8003964 <PrintServerPrintf>

   const int n = SIZE*NPP;                                                      // number of positions to be sampled per mechanical rotation.  Multiple of NPP for filtering reasons (see later)
 800276e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   const int n2 = 40;                                                          // increments between saved samples (for smoothing motion)
 8002776:	2328      	movs	r3, #40	; 0x28
 8002778:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   float delta = 360.0f*NPP/(n*n2);                                              // change in angle between samples
 800277c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002790:	eddf 6ae2 	vldr	s13, [pc, #904]	; 8002b1c <calibrate+0x3c4>
 8002794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002798:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
   const int  n_lut =  SIZE*NPP;
 800279c:	f44f 7388 	mov.w	r3, #272	; 0x110
 80027a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   const int window = WINDOW_SIZE;
 80027a4:	2310      	movs	r3, #16
 80027a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   float cogging_current[WINDOW_SIZE] = {0};
 80027aa:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80027ae:	2340      	movs	r3, #64	; 0x40
 80027b0:	461a      	mov	r2, r3
 80027b2:	2100      	movs	r1, #0
 80027b4:	f008 fcb6 	bl	800b124 <memset>


   float theta_ref = 0;
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   float theta_actual = 0;
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

   float d;
   float q;


    float error_f[n];
 80027c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027cc:	3b01      	subs	r3, #1
 80027ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027d6:	2200      	movs	r2, #0
 80027d8:	461c      	mov	r4, r3
 80027da:	4615      	mov	r5, r2
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	016b      	lsls	r3, r5, #5
 80027e6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80027ea:	0162      	lsls	r2, r4, #5
 80027ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027f0:	2200      	movs	r2, #0
 80027f2:	4698      	mov	r8, r3
 80027f4:	4691      	mov	r9, r2
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002802:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002806:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800280a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	3307      	adds	r3, #7
 8002812:	08db      	lsrs	r3, r3, #3
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	ebad 0d03 	sub.w	sp, sp, r3
 800281a:	ab04      	add	r3, sp, #16
 800281c:	3303      	adds	r3, #3
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    float error_b[n];
 8002826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800282a:	3b01      	subs	r3, #1
 800282c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002830:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002834:	2200      	movs	r2, #0
 8002836:	469a      	mov	sl, r3
 8002838:	4693      	mov	fp, r2
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002846:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800284a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800284e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002852:	2200      	movs	r2, #0
 8002854:	643b      	str	r3, [r7, #64]	; 0x40
 8002856:	647a      	str	r2, [r7, #68]	; 0x44
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002864:	4629      	mov	r1, r5
 8002866:	014b      	lsls	r3, r1, #5
 8002868:	4621      	mov	r1, r4
 800286a:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 800286e:	4621      	mov	r1, r4
 8002870:	014a      	lsls	r2, r1, #5
 8002872:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	3307      	adds	r3, #7
 800287a:	08db      	lsrs	r3, r3, #3
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	ebad 0d03 	sub.w	sp, sp, r3
 8002882:	ab04      	add	r3, sp, #16
 8002884:	3303      	adds	r3, #3
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int lut[n];
 800288e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002892:	3b01      	subs	r3, #1
 8002894:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002898:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800289c:	2200      	movs	r2, #0
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80028ae:	4629      	mov	r1, r5
 80028b0:	014b      	lsls	r3, r1, #5
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 80028b8:	4621      	mov	r1, r4
 80028ba:	014a      	lsls	r2, r1, #5
 80028bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028c0:	2200      	movs	r2, #0
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
 80028c4:	637a      	str	r2, [r7, #52]	; 0x34
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028d2:	4629      	mov	r1, r5
 80028d4:	014b      	lsls	r3, r1, #5
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 80028dc:	4621      	mov	r1, r4
 80028de:	014a      	lsls	r2, r1, #5
 80028e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3307      	adds	r3, #7
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	ebad 0d03 	sub.w	sp, sp, r3
 80028f0:	ab04      	add	r3, sp, #16
 80028f2:	3303      	adds	r3, #3
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    int raw_f[n];
 80028fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002900:	3b01      	subs	r3, #1
 8002902:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002906:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800290a:	2200      	movs	r2, #0
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800291c:	4629      	mov	r1, r5
 800291e:	014b      	lsls	r3, r1, #5
 8002920:	4621      	mov	r1, r4
 8002922:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002926:	4621      	mov	r1, r4
 8002928:	014a      	lsls	r2, r1, #5
 800292a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800292e:	2200      	movs	r2, #0
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	627a      	str	r2, [r7, #36]	; 0x24
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002940:	4629      	mov	r1, r5
 8002942:	014b      	lsls	r3, r1, #5
 8002944:	4621      	mov	r1, r4
 8002946:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 800294a:	4621      	mov	r1, r4
 800294c:	014a      	lsls	r2, r1, #5
 800294e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	3307      	adds	r3, #7
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	ebad 0d03 	sub.w	sp, sp, r3
 800295e:	ab04      	add	r3, sp, #16
 8002960:	3303      	adds	r3, #3
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    int raw_b[n];
 800296a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800296e:	3b01      	subs	r3, #1
 8002970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002974:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002978:	2200      	movs	r2, #0
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	61fa      	str	r2, [r7, #28]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800298a:	4629      	mov	r1, r5
 800298c:	014b      	lsls	r3, r1, #5
 800298e:	4621      	mov	r1, r4
 8002990:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002994:	4621      	mov	r1, r4
 8002996:	014a      	lsls	r2, r1, #5
 8002998:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800299c:	2200      	movs	r2, #0
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	617a      	str	r2, [r7, #20]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029ae:	4629      	mov	r1, r5
 80029b0:	014b      	lsls	r3, r1, #5
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 80029b8:	4621      	mov	r1, r4
 80029ba:	014a      	lsls	r2, r1, #5
 80029bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	3307      	adds	r3, #7
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	ebad 0d03 	sub.w	sp, sp, r3
 80029cc:	ab04      	add	r3, sp, #16
 80029ce:	3303      	adds	r3, #3
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float error[n];
 80029d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029dc:	3b01      	subs	r3, #1
 80029de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029e6:	2200      	movs	r2, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	60fa      	str	r2, [r7, #12]
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029f8:	4629      	mov	r1, r5
 80029fa:	014b      	lsls	r3, r1, #5
 80029fc:	4621      	mov	r1, r4
 80029fe:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002a02:	4621      	mov	r1, r4
 8002a04:	014a      	lsls	r2, r1, #5
 8002a06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	014b      	lsls	r3, r1, #5
 8002a20:	4621      	mov	r1, r4
 8002a22:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002a26:	4621      	mov	r1, r4
 8002a28:	014a      	lsls	r2, r1, #5
 8002a2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3307      	adds	r3, #7
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	ebad 0d03 	sub.w	sp, sp, r3
 8002a3a:	ab04      	add	r3, sp, #16
 8002a3c:	3303      	adds	r3, #3
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4




    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002a46:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a4e:	ee17 3a90 	vmov	r3, s15
 8002a52:	b21b      	sxth	r3, r3
 8002a54:	4a32      	ldr	r2, [pc, #200]	; (8002b20 <calibrate+0x3c8>)
 8002a56:	7812      	ldrb	r2, [r2, #0]
 8002a58:	2164      	movs	r1, #100	; 0x64
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fb7e 	bl	800215c <inverter>
    HAL_Delay(1000);
 8002a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a64:	f002 fcd2 	bl	800540c <HAL_Delay>

    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8002a68:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <calibrate+0x3cc>)
 8002a6a:	ed93 7a00 	vldr	s14, [r3]
 8002a6e:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a76:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002b28 <calibrate+0x3d0>
 8002a7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a8a:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8002b2c <calibrate+0x3d4>
 8002a8e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9e:	eddf 5a23 	vldr	s11, [pc, #140]	; 8002b2c <calibrate+0x3d4>
 8002aa2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab2:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8002b2c <calibrate+0x3d4>
 8002ab6:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002aba:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002abe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	eef0 1a65 	vmov.f32	s3, s11
 8002aca:	eeb0 1a46 	vmov.f32	s2, s12
 8002ace:	eef0 0a66 	vmov.f32	s1, s13
 8002ad2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ad6:	f001 fa77 	bl	8003fc8 <dq0>
    float current = sqrt((d*d + q*q));
 8002ada:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002ade:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002aea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af6:	ee17 0a90 	vmov	r0, s15
 8002afa:	f7fd fd4d 	bl	8000598 <__aeabi_f2d>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	ec43 2b10 	vmov	d0, r2, r3
 8002b06:	f00a fc33 	bl	800d370 <sqrt>
 8002b0a:	ec53 2b10 	vmov	r2, r3, d0
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f7fe f891 	bl	8000c38 <__aeabi_d2f>
 8002b16:	e00b      	b.n	8002b30 <calibrate+0x3d8>
 8002b18:	0800e3c8 	.word	0x0800e3c8
 8002b1c:	45bf4000 	.word	0x45bf4000
 8002b20:	20000dbc 	.word	0x20000dbc
 8002b24:	20000098 	.word	0x20000098
 8002b28:	43340000 	.word	0x43340000
 8002b2c:	447a0000 	.word	0x447a0000
 8002b30:	4603      	mov	r3, r0
 8002b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    PrintServerPrintf("Current Angle : Rotor Angle : Raw Encoder \n\r\n\r");
 8002b36:	48d4      	ldr	r0, [pc, #848]	; (8002e88 <calibrate+0x730>)
 8002b38:	f000 ff14 	bl	8003964 <PrintServerPrintf>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002b42:	e094      	b.n	8002c6e <calibrate+0x516>
       for(int j = 0; j<n2; j++){
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002b4a:	e084      	b.n	8002c56 <calibrate+0x4fe>
        theta_ref += delta;
 8002b4c:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8002b50:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b58:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
        inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002b5c:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b64:	ee17 3a90 	vmov	r3, s15
 8002b68:	b21b      	sxth	r3, r3
 8002b6a:	4ac8      	ldr	r2, [pc, #800]	; (8002e8c <calibrate+0x734>)
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	2164      	movs	r1, #100	; 0x64
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff faf3 	bl	800215c <inverter>
        HAL_Delay(1);
 8002b76:	2001      	movs	r0, #1
 8002b78:	f002 fc48 	bl	800540c <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 8002b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	ee07 3a90 	vmov	s15, r3
 8002b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b88:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8002e90 <calibrate+0x738>
 8002b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b90:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
       error_f[i] = theta_ref/NPP - theta_actual;
 8002b94:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002b98:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8002b9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ba0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002bac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	edc3 7a00 	vstr	s15, [r3]
	   if(error_f[i] < 0)error_f [i] = error_f[i]+ 360.0f;
 8002bb8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002bbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	d513      	bpl.n	8002bfa <calibrate+0x4a2>
 8002bd2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002bd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8002e94 <calibrate+0x73c>
 8002be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002bee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	edc3 7a00 	vstr	s15, [r3]
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
 8002bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c04:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8002c0c:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002c10:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002c14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c18:	ee16 0a90 	vmov	r0, s13
 8002c1c:	f7fd fcbc 	bl	8000598 <__aeabi_f2d>
 8002c20:	4604      	mov	r4, r0
 8002c22:	460d      	mov	r5, r1
 8002c24:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002c28:	f7fd fcb6 	bl	8000598 <__aeabi_f2d>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8002c34:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002c38:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002c3c:	9102      	str	r1, [sp, #8]
 8002c3e:	e9cd 2300 	strd	r2, r3, [sp]
 8002c42:	4622      	mov	r2, r4
 8002c44:	462b      	mov	r3, r5
 8002c46:	4894      	ldr	r0, [pc, #592]	; (8002e98 <calibrate+0x740>)
 8002c48:	f000 fe8c 	bl	8003964 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8002c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c50:	3301      	adds	r3, #1
 8002c52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002c56:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	f6ff af74 	blt.w	8002b4c <calibrate+0x3f4>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8002c64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002c6e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002c72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c76:	429a      	cmp	r2, r3
 8002c78:	f6ff af64 	blt.w	8002b44 <calibrate+0x3ec>
        }
    }

    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c82:	e094      	b.n	8002dae <calibrate+0x656>
       for(int j = 0; j<n2; j++){
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c8a:	e084      	b.n	8002d96 <calibrate+0x63e>
       theta_ref -= delta;
 8002c8c:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8002c90:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c98:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
       inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002c9c:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ca4:	ee17 3a90 	vmov	r3, s15
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	4a78      	ldr	r2, [pc, #480]	; (8002e8c <calibrate+0x734>)
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	2164      	movs	r1, #100	; 0x64
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fa53 	bl	800215c <inverter>
       HAL_Delay(1);                                                         // sample position sensor
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f002 fba8 	bl	800540c <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 8002cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc8:	eddf 6a71 	vldr	s13, [pc, #452]	; 8002e90 <calibrate+0x738>
 8002ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd0:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
       error_b[i] = theta_ref/NPP - theta_actual;
 8002cd4:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002cd8:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8002cdc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ce0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	edc3 7a00 	vstr	s15, [r3]
       if(error_b[i] < 0)error_b[i] = error_b[i]+ 360.0f;
 8002cf8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	d513      	bpl.n	8002d3a <calibrate+0x5e2>
 8002d12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002e94 <calibrate+0x73c>
 8002d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	edc3 7a00 	vstr	s15, [r3]
       raw_b[i] =  ps->Encoder1_pos_raw;
 8002d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d44:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 8002d4c:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002d50:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002d54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d58:	ee16 0a90 	vmov	r0, s13
 8002d5c:	f7fd fc1c 	bl	8000598 <__aeabi_f2d>
 8002d60:	4604      	mov	r4, r0
 8002d62:	460d      	mov	r5, r1
 8002d64:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002d68:	f7fd fc16 	bl	8000598 <__aeabi_f2d>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002d74:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002d78:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002d7c:	9102      	str	r1, [sp, #8]
 8002d7e:	e9cd 2300 	strd	r2, r3, [sp]
 8002d82:	4622      	mov	r2, r4
 8002d84:	462b      	mov	r3, r5
 8002d86:	4845      	ldr	r0, [pc, #276]	; (8002e9c <calibrate+0x744>)
 8002d88:	f000 fdec 	bl	8003964 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8002d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d90:	3301      	adds	r3, #1
 8002d92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d96:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	f6ff af74 	blt.w	8002c8c <calibrate+0x534>
    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8002da4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002da8:	3301      	adds	r3, #1
 8002daa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002dae:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002db2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002db6:	429a      	cmp	r2, r3
 8002db8:	f6ff af64 	blt.w	8002c84 <calibrate+0x52c>
       //theta_ref -= delta;
        }
    }

        electrical_offset = 0;
 8002dbc:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <calibrate+0x748>)
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
        for(int i = 0; i<n; i++){
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002dca:	e02c      	b.n	8002e26 <calibrate+0x6ce>
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 8002dcc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002dd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	ed93 7a00 	vldr	s14, [r3]
 8002ddc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002de0:	1e5a      	subs	r2, r3, #1
 8002de2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002df8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <calibrate+0x748>)
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e16:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <calibrate+0x748>)
 8002e18:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i<n; i++){
 8002e1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e20:	3301      	adds	r3, #1
 8002e22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002e26:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002e2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	dbcc      	blt.n	8002dcc <calibrate+0x674>
            }
        electrical_offset = fmod(electrical_offset*NPP, 360);                                        // convert mechanical angle to electrical angle
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <calibrate+0x748>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e40:	ee17 0a90 	vmov	r0, s15
 8002e44:	f7fd fba8 	bl	8000598 <__aeabi_f2d>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8002e80 <calibrate+0x728>
 8002e50:	ec43 2b10 	vmov	d0, r2, r3
 8002e54:	f00a fa5e 	bl	800d314 <fmod>
 8002e58:	ec53 2b10 	vmov	r2, r3, d0
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f7fd feea 	bl	8000c38 <__aeabi_d2f>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <calibrate+0x748>)
 8002e68:	6013      	str	r3, [r2, #0]
        /// FIR n-sample average, where n = number of samples in one electrical cycle
        /// This filter has zero gain at electrical frequency and all integer multiples
        /// So cogging effects should be completely filtered out.


        float mean = 0;
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002e78:	e03b      	b.n	8002ef2 <calibrate+0x79a>
 8002e7a:	bf00      	nop
 8002e7c:	f3af 8000 	nop.w
 8002e80:	00000000 	.word	0x00000000
 8002e84:	40768000 	.word	0x40768000
 8002e88:	0800e3ec 	.word	0x0800e3ec
 8002e8c:	20000dbc 	.word	0x20000dbc
 8002e90:	447a0000 	.word	0x447a0000
 8002e94:	43b40000 	.word	0x43b40000
 8002e98:	0800e41c 	.word	0x0800e41c
 8002e9c:	0800e42c 	.word	0x0800e42c
 8002ea0:	20000dc0 	.word	0x20000dc0
            error[i] = 0.5f*(error_f[i] + error_b[n-i-1]);
 8002ea4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002ea8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	ed93 7a00 	vldr	s14, [r3]
 8002eb4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002eb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002edc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8002ee8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eec:	3301      	adds	r3, #1
 8002eee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ef2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002ef6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002efa:	429a      	cmp	r2, r3
 8002efc:	dbd2      	blt.n	8002ea4 <calibrate+0x74c>
            }
        for (int i = 0; i<n; i++){
 8002efe:	2300      	movs	r3, #0
 8002f00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f04:	e09f      	b.n	8003046 <calibrate+0x8ee>
            for(int j = 0; j<window; j++){
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f0c:	e04c      	b.n	8002fa8 <calibrate+0x850>
                int ind = -window/2 + j + i;                                    // Indexes from -window/2 to + window/2
 8002f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f12:	0fda      	lsrs	r2, r3, #31
 8002f14:	4413      	add	r3, r2
 8002f16:	105b      	asrs	r3, r3, #1
 8002f18:	425b      	negs	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002f20:	4413      	add	r3, r2
 8002f22:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002f26:	4413      	add	r3, r2
 8002f28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                if(ind<0){
 8002f2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	da07      	bge.n	8002f44 <calibrate+0x7ec>
                    ind += n;}                                                  // Moving average wraps around
 8002f34:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002f38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002f42:	e00c      	b.n	8002f5e <calibrate+0x806>
                else if(ind > n-1) {
 8002f44:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002f48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	dc06      	bgt.n	8002f5e <calibrate+0x806>
                    ind -= n;}
 8002f50:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002f54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                if(error[ind] == NAN)while(1);
                error_filt[i] += error[ind]/(float)window;
 8002f5e:	4a4e      	ldr	r2, [pc, #312]	; (8003098 <calibrate+0x940>)
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	ed93 7a00 	vldr	s14, [r3]
 8002f6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002f70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	ed93 6a00 	vldr	s12, [r3]
 8002f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f88:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f90:	4a41      	ldr	r2, [pc, #260]	; (8003098 <calibrate+0x940>)
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	edc3 7a00 	vstr	s15, [r3]
            for(int j = 0; j<window; j++){
 8002f9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002fa8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002fac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	dbac      	blt.n	8002f0e <calibrate+0x7b6>
                if(error_filt[i] == NAN)while(1);
                }
            if(i<window){
 8002fb4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002fb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	da28      	bge.n	8003012 <calibrate+0x8ba>
                cogging_current[i] = current*sinf((error[i] - error_filt[i])*NPP);
 8002fc0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	ed93 7a00 	vldr	s14, [r3]
 8002fd0:	4a31      	ldr	r2, [pc, #196]	; (8003098 <calibrate+0x940>)
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe2:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fea:	eeb0 0a67 	vmov.f32	s0, s15
 8002fee:	f00a fa2f 	bl	800d450 <sinf>
 8002ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ff6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	33d0      	adds	r3, #208	; 0xd0
 8003006:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800300a:	4413      	add	r3, r2
 800300c:	3bbc      	subs	r3, #188	; 0xbc
 800300e:	edc3 7a00 	vstr	s15, [r3]
                }
//            PrintServerPrintf("%.4f   %4f    %.4f   %.4f\n\r", error[i], error_filt[i], error_f[i], error_b[i]);
//            HAL_Delay(10);
            mean += error_filt[i]/n;
 8003012:	4a21      	ldr	r2, [pc, #132]	; (8003098 <calibrate+0x940>)
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	edd3 6a00 	vldr	s13, [r3]
 8003020:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800302c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003030:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 8003034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003038:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
        for (int i = 0; i<n; i++){
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	3301      	adds	r3, #1
 8003042:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003046:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800304a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800304e:	429a      	cmp	r2, r3
 8003050:	f6ff af59 	blt.w	8002f06 <calibrate+0x7ae>
            }
        int raw_offset = (raw_f[0] + raw_b[n-1])/2;                             //Insensitive to errors in this direction, so 2 points is plenty
 8003054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800305e:	1e59      	subs	r1, r3, #1
 8003060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003064:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003068:	4413      	add	r3, r2
 800306a:	0fda      	lsrs	r2, r3, #31
 800306c:	4413      	add	r3, r2
 800306e:	105b      	asrs	r3, r3, #1
 8003070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

//        ps->WriteLUT(lut);                                                      // write lookup table to position sensor object
        //memcpy(controller->cogging, cogging_current, sizeof(controller->cogging));  //compensation doesn't actually work yet....

//        memcpy(&ENCODER_LUT, lut, 128*4);                                 // copy the lookup table to the flash array
        PrintServerPrintf("\n\rEncoder Electrical Offset (deg) %f\n\r",  electrical_offset);
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <calibrate+0x944>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fa8d 	bl	8000598 <__aeabi_f2d>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4807      	ldr	r0, [pc, #28]	; (80030a0 <calibrate+0x948>)
 8003084:	f000 fc6e 	bl	8003964 <PrintServerPrintf>
 8003088:	46b5      	mov	sp, r6
//        for (int i = 0; i<LUT_SIZE; i++){
//        	float wanted_pos = i *360.0f / LUT_SIZE;
//        	motor_lut[i] = find_closest(error_test, SIZE*NPP, wanted_pos);
//        	PrintServerPrintf("%d\n\r", motor_lut[i]);
//        }
    }
 800308a:	bf00      	nop
 800308c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	2000097c 	.word	0x2000097c
 800309c:	20000dc0 	.word	0x20000dc0
 80030a0:	0800e43c 	.word	0x0800e43c

080030a4 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80030ac:	2201      	movs	r2, #1
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	4815      	ldr	r0, [pc, #84]	; (8003108 <ORBIS_init+0x64>)
 80030b2:	f004 f9eb 	bl	800748c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 80030b6:	2201      	movs	r2, #1
 80030b8:	2104      	movs	r1, #4
 80030ba:	4814      	ldr	r0, [pc, #80]	; (800310c <ORBIS_init+0x68>)
 80030bc:	f004 f9e6 	bl	800748c <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <ORBIS_init+0x6c>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <ORBIS_init+0x70>)
 80030c8:	2274      	movs	r2, #116	; 0x74
 80030ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 80030cc:	2200      	movs	r2, #0
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	480d      	ldr	r0, [pc, #52]	; (8003108 <ORBIS_init+0x64>)
 80030d2:	f004 f9db 	bl	800748c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2104      	movs	r1, #4
 80030da:	480c      	ldr	r0, [pc, #48]	; (800310c <ORBIS_init+0x68>)
 80030dc:	f004 f9d6 	bl	800748c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80030e0:	2305      	movs	r3, #5
 80030e2:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <ORBIS_init+0x74>)
 80030e4:	490b      	ldr	r1, [pc, #44]	; (8003114 <ORBIS_init+0x70>)
 80030e6:	480d      	ldr	r0, [pc, #52]	; (800311c <ORBIS_init+0x78>)
 80030e8:	f005 f9d6 	bl	8008498 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80030ec:	2305      	movs	r3, #5
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <ORBIS_init+0x7c>)
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <ORBIS_init+0x80>)
 80030f2:	480d      	ldr	r0, [pc, #52]	; (8003128 <ORBIS_init+0x84>)
 80030f4:	f005 f9d0 	bl	8008498 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 80030f8:	480c      	ldr	r0, [pc, #48]	; (800312c <ORBIS_init+0x88>)
 80030fa:	f005 fd5d 	bl	8008bb8 <HAL_TIM_Base_Start_IT>

}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	48000400 	.word	0x48000400
 800310c:	48000c00 	.word	0x48000c00
 8003110:	20000de4 	.word	0x20000de4
 8003114:	20000dc4 	.word	0x20000dc4
 8003118:	20000dcc 	.word	0x20000dcc
 800311c:	20001b24 	.word	0x20001b24
 8003120:	20000ddc 	.word	0x20000ddc
 8003124:	20000dd4 	.word	0x20000dd4
 8003128:	20001b88 	.word	0x20001b88
 800312c:	20001c3c 	.word	0x20001c3c

08003130 <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a73      	ldr	r2, [pc, #460]	; (8003308 <HAL_SPI_TxRxCpltCallback+0x1d8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	f040 80bb 	bne.w	80032b8 <HAL_SPI_TxRxCpltCallback+0x188>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8003142:	2201      	movs	r2, #1
 8003144:	2140      	movs	r1, #64	; 0x40
 8003146:	4871      	ldr	r0, [pc, #452]	; (800330c <HAL_SPI_TxRxCpltCallback+0x1dc>)
 8003148:	f004 f9a0 	bl	800748c <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 800314c:	4b70      	ldr	r3, [pc, #448]	; (8003310 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b70      	ldr	r3, [pc, #448]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003154:	611a      	str	r2, [r3, #16]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 8003156:	4b6e      	ldr	r3, [pc, #440]	; (8003310 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	019b      	lsls	r3, r3, #6
 800315c:	461a      	mov	r2, r3
 800315e:	4b6c      	ldr	r3, [pc, #432]	; (8003310 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	b2db      	uxtb	r3, r3
 8003166:	4313      	orrs	r3, r2
 8003168:	f241 52f9 	movw	r2, #5625	; 0x15f9
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	4a68      	ldr	r2, [pc, #416]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003174:	6013      	str	r3, [r2, #0]
		data_encoders.Encoder1_pos_raw = (uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2);
 8003176:	4b66      	ldr	r3, [pc, #408]	; (8003310 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	019b      	lsls	r3, r3, #6
 800317c:	461a      	mov	r2, r3
 800317e:	4b64      	ldr	r3, [pc, #400]	; (8003310 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4313      	orrs	r3, r2
 8003188:	4a62      	ldr	r2, [pc, #392]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800318a:	6093      	str	r3, [r2, #8]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 800318c:	4b61      	ldr	r3, [pc, #388]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b61      	ldr	r3, [pc, #388]	; (8003318 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	4a60      	ldr	r2, [pc, #384]	; (800331c <HAL_SPI_TxRxCpltCallback+0x1ec>)
 800319a:	4293      	cmp	r3, r2
 800319c:	dd10      	ble.n	80031c0 <HAL_SPI_TxRxCpltCallback+0x90>
 800319e:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 80031ae:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ba:	edc7 7a03 	vstr	s15, [r7, #12]
 80031be:	e025      	b.n	800320c <HAL_SPI_TxRxCpltCallback+0xdc>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 80031c0:	4b54      	ldr	r3, [pc, #336]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	4a54      	ldr	r2, [pc, #336]	; (8003320 <HAL_SPI_TxRxCpltCallback+0x1f0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	da10      	bge.n	80031f4 <HAL_SPI_TxRxCpltCallback+0xc4>
 80031d2:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 80031e2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ee:	edc7 7a03 	vstr	s15, [r7, #12]
 80031f2:	e00b      	b.n	800320c <HAL_SPI_TxRxCpltCallback+0xdc>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 80031f4:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003208:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8003214:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 8003216:	4b43      	ldr	r3, [pc, #268]	; (8003324 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003218:	ed93 7a00 	vldr	s14, [r3]
 800321c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003224:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003226:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 800322a:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 800322c:	ed93 7a00 	vldr	s14, [r3]
 8003230:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	4a3d      	ldr	r2, [pc, #244]	; (800332c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003242:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003244:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 8003248:	4b37      	ldr	r3, [pc, #220]	; (8003328 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4a37      	ldr	r2, [pc, #220]	; (800332c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	601a      	str	r2, [r3, #0]
		velocity_index++;
 8003256:	4b34      	ldr	r3, [pc, #208]	; (8003328 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b32      	ldr	r3, [pc, #200]	; (8003328 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8003260:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d102      	bne.n	8003270 <HAL_SPI_TxRxCpltCallback+0x140>
 800326a:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 8003270:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003272:	edd3 7a00 	vldr	s15, [r3]
 8003276:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003330 <HAL_SPI_TxRxCpltCallback+0x200>
 800327a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800327e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003334 <HAL_SPI_TxRxCpltCallback+0x204>
 8003282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003286:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003338 <HAL_SPI_TxRxCpltCallback+0x208>
 800328a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800328e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800333c <HAL_SPI_TxRxCpltCallback+0x20c>
 8003292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800329a:	ee17 2a90 	vmov	r2, s15
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80032a0:	615a      	str	r2, [r3, #20]
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80032a4:	789b      	ldrb	r3, [r3, #2]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	b21a      	sxth	r2, r3
 80032aa:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80032ac:	78db      	ldrb	r3, [r3, #3]
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80032b6:	831a      	strh	r2, [r3, #24]
	}
	if (hspi == &hspi3) {
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a21      	ldr	r2, [pc, #132]	; (8003340 <HAL_SPI_TxRxCpltCallback+0x210>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d11a      	bne.n	80032f6 <HAL_SPI_TxRxCpltCallback+0x1c6>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 80032c0:	2201      	movs	r2, #1
 80032c2:	2104      	movs	r1, #4
 80032c4:	481f      	ldr	r0, [pc, #124]	; (8003344 <HAL_SPI_TxRxCpltCallback+0x214>)
 80032c6:	f004 f8e1 	bl	800748c <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 80032ca:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <HAL_SPI_TxRxCpltCallback+0x218>)
 80032cc:	78db      	ldrb	r3, [r3, #3]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	b21a      	sxth	r2, r3
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_SPI_TxRxCpltCallback+0x218>)
 80032d4:	789b      	ldrb	r3, [r3, #2]
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b21a      	sxth	r2, r3
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80032de:	835a      	strh	r2, [r3, #26]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_SPI_TxRxCpltCallback+0x218>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	019b      	lsls	r3, r3, #6
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_SPI_TxRxCpltCallback+0x218>)
 80032e8:	7852      	ldrb	r2, [r2, #1]
 80032ea:	0892      	lsrs	r2, r2, #2
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	4313      	orrs	r3, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80032f4:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <HAL_SPI_TxRxCpltCallback+0x21c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4806      	ldr	r0, [pc, #24]	; (8003314 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80032fc:	4798      	blx	r3
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20001b24 	.word	0x20001b24
 800330c:	48000400 	.word	0x48000400
 8003310:	20000dcc 	.word	0x20000dcc
 8003314:	20000de8 	.word	0x20000de8
 8003318:	20000e08 	.word	0x20000e08
 800331c:	0002bf20 	.word	0x0002bf20
 8003320:	fffd40e0 	.word	0xfffd40e0
 8003324:	20000e04 	.word	0x20000e04
 8003328:	20000e0c 	.word	0x20000e0c
 800332c:	20000e10 	.word	0x20000e10
 8003330:	461c4000 	.word	0x461c4000
 8003334:	42700000 	.word	0x42700000
 8003338:	43b40000 	.word	0x43b40000
 800333c:	42c80000 	.word	0x42c80000
 8003340:	20001b88 	.word	0x20001b88
 8003344:	48000c00 	.word	0x48000c00
 8003348:	20000ddc 	.word	0x20000ddc
 800334c:	20000de4 	.word	0x20000de4

08003350 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	2140      	movs	r1, #64	; 0x40
 800335c:	480b      	ldr	r0, [pc, #44]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800335e:	f004 f895 	bl	800748c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2104      	movs	r1, #4
 8003366:	480a      	ldr	r0, [pc, #40]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003368:	f004 f890 	bl	800748c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 800336c:	2305      	movs	r3, #5
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003370:	4909      	ldr	r1, [pc, #36]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003372:	480a      	ldr	r0, [pc, #40]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003374:	f005 f890 	bl	8008498 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8003378:	2305      	movs	r3, #5
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800337c:	4909      	ldr	r1, [pc, #36]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800337e:	480a      	ldr	r0, [pc, #40]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003380:	f005 f88a 	bl	8008498 <HAL_SPI_TransmitReceive_DMA>
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	48000400 	.word	0x48000400
 8003390:	48000c00 	.word	0x48000c00
 8003394:	20000dcc 	.word	0x20000dcc
 8003398:	20000dc4 	.word	0x20000dc4
 800339c:	20001b24 	.word	0x20001b24
 80033a0:	20000ddc 	.word	0x20000ddc
 80033a4:	20000dd4 	.word	0x20000dd4
 80033a8:	20001b88 	.word	0x20001b88

080033ac <flash_write>:

Flash* flash_read(uint32_t address){
    return (Flash*)address;
}

void flash_write(uint32_t page, uint64_t data[], uint32_t size){
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08c      	sub	sp, #48	; 0x30
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
	uint32_t PageError;
	FLASH_EraseInitTypeDef pEraseInit = {
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	2301      	movs	r3, #1
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	2301      	movs	r3, #1
 80033c6:	623b      	str	r3, [r7, #32]
			.NbPages = 1,
			.Page = page,
			.TypeErase = FLASH_TYPEERASE_PAGES
	};

	HAL_FLASH_Unlock();
 80033c8:	f003 fdbe 	bl	8006f48 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80033cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 fea8 	bl	800712c <HAL_FLASHEx_Erase>

    for(int i = 0; i < size/sizeof(uint64_t); i++){
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e0:	e014      	b.n	800340c <flash_write+0x60>
    	uint32_t address = FLASH_BASE + PAGE_SIZE*page + i*sizeof(uint64_t);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	4413      	add	r3, r2
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003400:	2000      	movs	r0, #0
 8003402:	f003 fdf1 	bl	8006fe8 <HAL_FLASH_Program>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	3301      	adds	r3, #1
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	429a      	cmp	r2, r3
 8003414:	d8e5      	bhi.n	80033e2 <flash_write+0x36>
    }
    HAL_FLASH_Lock();
 8003416:	f003 fdab 	bl	8006f70 <HAL_FLASH_Lock>
}
 800341a:	bf00      	nop
 800341c:	3730      	adds	r7, #48	; 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <Flash_init>:

void Flash_init(){
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
	if (memcmp(ptr, &RAM, RAM_COMPARE)){
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <Flash_init+0x4c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	225e      	movs	r2, #94	; 0x5e
 800342e:	4911      	ldr	r1, [pc, #68]	; (8003474 <Flash_init+0x50>)
 8003430:	4618      	mov	r0, r3
 8003432:	f007 fe67 	bl	800b104 <memcmp>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00f      	beq.n	800345c <Flash_init+0x38>
		memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <Flash_init+0x4c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003444:	4619      	mov	r1, r3
 8003446:	480c      	ldr	r0, [pc, #48]	; (8003478 <Flash_init+0x54>)
 8003448:	f007 feeb 	bl	800b222 <memcpy>
		memcpy(&Stored_in_RAM, &RAM, RAM_COMPARE);
 800344c:	225e      	movs	r2, #94	; 0x5e
 800344e:	4909      	ldr	r1, [pc, #36]	; (8003474 <Flash_init+0x50>)
 8003450:	4809      	ldr	r0, [pc, #36]	; (8003478 <Flash_init+0x54>)
 8003452:	f007 fee6 	bl	800b222 <memcpy>
		Flash_save();
 8003456:	f000 f811 	bl	800347c <Flash_save>
	}
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
}
 800345a:	e007      	b.n	800346c <Flash_init+0x48>
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <Flash_init+0x4c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003464:	4619      	mov	r1, r3
 8003466:	4804      	ldr	r0, [pc, #16]	; (8003478 <Flash_init+0x54>)
 8003468:	f007 fedb 	bl	800b222 <memcpy>
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}
 8003470:	2000009c 	.word	0x2000009c
 8003474:	200000a0 	.word	0x200000a0
 8003478:	20000fa0 	.word	0x20000fa0

0800347c <Flash_save>:

void Flash_save(){
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	flash_write(PAGE_NUMBER, (uint64_t*)&Stored_in_RAM, sizeof(Flash));
 8003480:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003484:	4902      	ldr	r1, [pc, #8]	; (8003490 <Flash_save+0x14>)
 8003486:	203f      	movs	r0, #63	; 0x3f
 8003488:	f7ff ff90 	bl	80033ac <flash_write>
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000fa0 	.word	0x20000fa0

08003494 <Flash_get_values>:

Flash *Flash_get_values(){
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
	return &Stored_in_RAM; //*ptr;// = flash_read(FLASH_BASE + PAGE_SIZE*PAGE_NUMBER);
 8003498:	4b02      	ldr	r3, [pc, #8]	; (80034a4 <Flash_get_values+0x10>)
}
 800349a:	4618      	mov	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	20000fa0 	.word	0x20000fa0

080034a8 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80a2 	beq.w	8003600 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	ed93 7a02 	vldr	s14, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034cc:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	ed93 7a00 	vldr	s14, [r3]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80034dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e0:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	edd3 6a06 	vldr	s13, [r3, #24]
 80034f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80034f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <Compute+0x82>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003518:	edd7 7a02 	vldr	s15, [r7, #8]
 800351c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353e:	dd04      	ble.n	800354a <Compute+0xa2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	e00e      	b.n	8003568 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	edd3 7a08 	vldr	s15, [r3, #32]
 8003556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	d503      	bpl.n	8003568 <Compute+0xc0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <Compute+0xe0>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003578:	edd7 7a03 	vldr	s15, [r7, #12]
 800357c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	edc3 7a01 	vstr	s15, [r3, #4]
 8003586:	e003      	b.n	8003590 <Compute+0xe8>
	else val->Output = 0;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	ed93 7a01 	vldr	s14, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	edd3 6a03 	vldr	s13, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	ed93 6a07 	vldr	s12, [r3, #28]
 80035a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80035ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80035c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	dd04      	ble.n	80035d8 <Compute+0x130>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	e00e      	b.n	80035f6 <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	ed93 7a01 	vldr	s14, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80035e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ec:	d503      	bpl.n	80035f6 <Compute+0x14e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	e000      	b.n	8003602 <Compute+0x15a>
	if(!val->inAuto) return;
 8003600:	bf00      	nop
}
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 800360c:	b480      	push	{r7}
 800360e:	b089      	sub	sp, #36	; 0x24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6178      	str	r0, [r7, #20]
 8003614:	ed87 0a04 	vstr	s0, [r7, #16]
 8003618:	edc7 0a03 	vstr	s1, [r7, #12]
 800361c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003620:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8003624:	edd7 7a04 	vldr	s15, [r7, #16]
 8003628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003630:	f100 809b 	bmi.w	800376a <SetTunings+0x15e>
 8003634:	edd7 7a03 	vldr	s15, [r7, #12]
 8003638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003640:	f100 8093 	bmi.w	800376a <SetTunings+0x15e>
 8003644:	edd7 7a02 	vldr	s15, [r7, #8]
 8003648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	f100 808b 	bmi.w	800376a <SetTunings+0x15e>
 8003654:	edd7 7a01 	vldr	s15, [r7, #4]
 8003658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800365c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003660:	f100 8083 	bmi.w	800376a <SetTunings+0x15e>
 8003664:	edd7 7a01 	vldr	s15, [r7, #4]
 8003668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800366c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	dc79      	bgt.n	800376a <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 8003676:	edd7 7a01 	vldr	s15, [r7, #4]
 800367a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003682:	bfcc      	ite	gt
 8003684:	2301      	movgt	r3, #1
 8003686:	2300      	movle	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 8003692:	edd7 7a01 	vldr	s15, [r7, #4]
 8003696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800369a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	bf4c      	ite	mi
 80036a4:	2301      	movmi	r3, #1
 80036a6:	2300      	movpl	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036be:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8003778 <SetTunings+0x16c>
 80036c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036c6:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 80036d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80036d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80036d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 80036e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80036e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d11d      	bne.n	8003738 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003702:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800377c <SetTunings+0x170>
 8003706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	edd3 7a06 	vldr	s15, [r3, #24]
 8003716:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800377c <SetTunings+0x170>
 800371a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	edd3 7a07 	vldr	s15, [r3, #28]
 800372a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800377c <SetTunings+0x170>
 800372e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	ed93 7a05 	vldr	s14, [r3, #20]
 800373e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 800374c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003750:	edd7 7a01 	vldr	s15, [r7, #4]
 8003754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	edd3 7a05 	vldr	s15, [r3, #20]
 800375e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8003768:	e000      	b.n	800376c <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 800376a:	bf00      	nop
}
 800376c:	3724      	adds	r7, #36	; 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	49742400 	.word	0x49742400
 800377c:	00000000 	.word	0x00000000

08003780 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	dd25      	ble.n	80037dc <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 80037a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037aa:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	ed93 7a06 	vldr	s14, [r3, #24]
 80037b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	edd3 6a07 	vldr	s13, [r3, #28]
 80037c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80037cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80037f4:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 80037f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80037fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003808:	dc44      	bgt.n	8003894 <SetOutputLimits+0xac>
   val->outMin = Min;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	ed93 7a01 	vldr	s14, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003822:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	dd04      	ble.n	8003836 <SetOutputLimits+0x4e>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	e00e      	b.n	8003854 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	ed93 7a01 	vldr	s14, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	d503      	bpl.n	8003854 <SetOutputLimits+0x6c>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	ed93 7a03 	vldr	s14, [r3, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003868:	dd04      	ble.n	8003874 <SetOutputLimits+0x8c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e010      	b.n	8003896 <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	ed93 7a03 	vldr	s14, [r3, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	d505      	bpl.n	8003896 <SetOutputLimits+0xae>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	e000      	b.n	8003896 <SetOutputLimits+0xae>
   if(Min > Max) return;
 8003894:	bf00      	nop
}
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80038c0:	2a00      	cmp	r2, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2201      	moveq	r2, #1
 80038c6:	2200      	movne	r2, #0
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d102      	bne.n	80038d4 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f808 	bl	80038e4 <Initialize>
    }
    val->inAuto = newAuto;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <Initialize>:

void Initialize(PID_instance *val)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800390c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003910:	dd04      	ble.n	800391c <Initialize+0x38>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 800391a:	e00f      	b.n	800393c <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	edd3 7a08 	vldr	s15, [r3, #32]
 8003928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800392c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003930:	d400      	bmi.n	8003934 <Initialize+0x50>
}
 8003932:	e003      	b.n	800393c <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	60da      	str	r2, [r3, #12]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8003964:	b40f      	push	{r0, r1, r2, r3}
 8003966:	b590      	push	{r4, r7, lr}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800397a:	480b      	ldr	r0, [pc, #44]	; (80039a8 <PrintServerPrintf+0x44>)
 800397c:	f007 fbb4 	bl	800b0e8 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <PrintServerPrintf+0x48>)
 8003982:	681c      	ldr	r4, [r3, #0]
 8003984:	4808      	ldr	r0, [pc, #32]	; (80039a8 <PrintServerPrintf+0x44>)
 8003986:	f7fc fc9b 	bl	80002c0 <strlen>
 800398a:	4603      	mov	r3, r0
 800398c:	b29b      	uxth	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	4905      	ldr	r1, [pc, #20]	; (80039a8 <PrintServerPrintf+0x44>)
 8003992:	4620      	mov	r0, r4
 8003994:	f006 f818 	bl	80099c8 <HAL_UART_Transmit_DMA>
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80039a2:	b004      	add	sp, #16
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20001458 	.word	0x20001458
 80039ac:	20000558 	.word	0x20000558

080039b0 <dac_value>:
#define Vref 3000

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};

void dac_value(uint16_t V_dac){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	4613      	mov	r3, r2
 80039be:	031b      	lsls	r3, r3, #12
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <dac_value+0x34>)
 80039c4:	8812      	ldrh	r2, [r2, #0]
 80039c6:	b212      	sxth	r2, r2
 80039c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80039cc:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80039ce:	89fb      	ldrh	r3, [r7, #14]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2100      	movs	r1, #0
 80039d4:	4804      	ldr	r0, [pc, #16]	; (80039e8 <dac_value+0x38>)
 80039d6:	f002 fc51 	bl	800627c <HAL_DAC_SetValue>
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200016a4 	.word	0x200016a4
 80039e8:	200018f4 	.word	0x200018f4

080039ec <ADC_CAL>:
    // Calculate the magnitude of the vector sum
    float magnitude = sqrt(sum.real * sum.real + sum.imag * sum.imag);
    return magnitude;
}

void ADC_CAL(){
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <ADC_CAL+0x134>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80039fc:	fb02 f303 	mul.w	r3, r2, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b48      	ldr	r3, [pc, #288]	; (8003b24 <ADC_CAL+0x138>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	b21a      	sxth	r2, r3
 8003a0e:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <ADC_CAL+0x13c>)
 8003a10:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8003a12:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <ADC_CAL+0x138>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	4a43      	ldr	r2, [pc, #268]	; (8003b28 <ADC_CAL+0x13c>)
 8003a1a:	8812      	ldrh	r2, [r2, #0]
 8003a1c:	b212      	sxth	r2, r2
 8003a1e:	fb03 f202 	mul.w	r2, r3, r2
 8003a22:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <ADC_CAL+0x140>)
 8003a24:	fba3 1302 	umull	r1, r3, r3, r2
 8003a28:	1ad2      	subs	r2, r2, r3
 8003a2a:	0852      	lsrs	r2, r2, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	0adb      	lsrs	r3, r3, #11
 8003a30:	461a      	mov	r2, r3
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	011a      	lsls	r2, r3, #4
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <ADC_CAL+0x144>)
 8003a3e:	fb82 1203 	smull	r1, r2, r2, r3
 8003a42:	1152      	asrs	r2, r2, #5
 8003a44:	17db      	asrs	r3, r3, #31
 8003a46:	1ad2      	subs	r2, r2, r3
 8003a48:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <ADC_CAL+0x148>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	4a39      	ldr	r2, [pc, #228]	; (8003b34 <ADC_CAL+0x148>)
 8003a50:	6013      	str	r3, [r2, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <ADC_CAL+0x138>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	4a33      	ldr	r2, [pc, #204]	; (8003b28 <ADC_CAL+0x13c>)
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	b212      	sxth	r2, r2
 8003a5e:	fb03 f202 	mul.w	r2, r3, r2
 8003a62:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <ADC_CAL+0x140>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	1ad2      	subs	r2, r2, r3
 8003a6a:	0852      	lsrs	r2, r2, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	0adb      	lsrs	r3, r3, #11
 8003a70:	461a      	mov	r2, r3
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	011a      	lsls	r2, r3, #4
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <ADC_CAL+0x144>)
 8003a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8003a82:	1152      	asrs	r2, r2, #5
 8003a84:	17db      	asrs	r3, r3, #31
 8003a86:	1ad2      	subs	r2, r2, r3
 8003a88:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <ADC_CAL+0x148>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <ADC_CAL+0x148>)
 8003a90:	6053      	str	r3, [r2, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <ADC_CAL+0x138>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <ADC_CAL+0x13c>)
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	b212      	sxth	r2, r2
 8003a9e:	fb03 f202 	mul.w	r2, r3, r2
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <ADC_CAL+0x140>)
 8003aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa8:	1ad2      	subs	r2, r2, r3
 8003aaa:	0852      	lsrs	r2, r2, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	0adb      	lsrs	r3, r3, #11
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	011a      	lsls	r2, r3, #4
 8003aba:	4413      	add	r3, r2
 8003abc:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <ADC_CAL+0x144>)
 8003abe:	fb82 1203 	smull	r1, r2, r2, r3
 8003ac2:	1152      	asrs	r2, r2, #5
 8003ac4:	17db      	asrs	r3, r3, #31
 8003ac6:	1ad2      	subs	r2, r2, r3
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <ADC_CAL+0x148>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4413      	add	r3, r2
 8003ace:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <ADC_CAL+0x148>)
 8003ad0:	6093      	str	r3, [r2, #8]
	calibrating--;
 8003ad2:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <ADC_CAL+0x14c>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <ADC_CAL+0x14c>)
 8003adc:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <ADC_CAL+0x14c>)
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d117      	bne.n	8003b16 <ADC_CAL+0x12a>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <ADC_CAL+0x148>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <ADC_CAL+0x150>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <ADC_CAL+0x154>)
 8003af4:	6013      	str	r3, [r2, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8003af6:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <ADC_CAL+0x148>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <ADC_CAL+0x150>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	4a0f      	ldr	r2, [pc, #60]	; (8003b40 <ADC_CAL+0x154>)
 8003b04:	6053      	str	r3, [r2, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <ADC_CAL+0x148>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <ADC_CAL+0x150>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <ADC_CAL+0x154>)
 8003b14:	6093      	str	r3, [r2, #8]
	}
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	2000055c 	.word	0x2000055c
 8003b24:	20001658 	.word	0x20001658
 8003b28:	200016a4 	.word	0x200016a4
 8003b2c:	00100101 	.word	0x00100101
 8003b30:	51eb851f 	.word	0x51eb851f
 8003b34:	200016d0 	.word	0x200016d0
 8003b38:	200016cc 	.word	0x200016cc
 8003b3c:	10624dd3 	.word	0x10624dd3
 8003b40:	20001698 	.word	0x20001698

08003b44 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <current_init+0x38>)
 8003b4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b52:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 8003b54:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <current_init+0x3c>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	4909      	ldr	r1, [pc, #36]	; (8003b84 <current_init+0x40>)
 8003b5e:	480a      	ldr	r0, [pc, #40]	; (8003b88 <current_init+0x44>)
 8003b60:	f002 f9cc 	bl	8005efc <HAL_ADC_Start_DMA>


	HAL_DAC_Init(&hdac1);
 8003b64:	4809      	ldr	r0, [pc, #36]	; (8003b8c <current_init+0x48>)
 8003b66:	f002 fb43 	bl	80061f0 <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4807      	ldr	r0, [pc, #28]	; (8003b8c <current_init+0x48>)
 8003b6e:	f002 fb51 	bl	8006214 <HAL_DAC_Start>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200016cc 	.word	0x200016cc
 8003b80:	200016a8 	.word	0x200016a8
 8003b84:	20001658 	.word	0x20001658
 8003b88:	20001734 	.word	0x20001734
 8003b8c:	200018f4 	.word	0x200018f4

08003b90 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8003b98:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <voltage_temperature_init+0x20>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <voltage_temperature_init+0x24>)
 8003ba2:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <voltage_temperature_init+0x28>)
 8003ba4:	f002 f9aa 	bl	8005efc <HAL_ADC_Start_DMA>
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	200016bc 	.word	0x200016bc
 8003bb4:	20001678 	.word	0x20001678
 8003bb8:	200017a0 	.word	0x200017a0

08003bbc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <HAL_ADC_ConvHalfCpltCallback+0x1c4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	f040 8091 	bne.w	8003cf0 <HAL_ADC_ConvHalfCpltCallback+0x134>
		if(calibrating)ADC_CAL();
 8003bce:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_ADC_ConvHalfCpltCallback+0x20>
 8003bd6:	f7ff ff09 	bl	80039ec <ADC_CAL>
 8003bda:	e089      	b.n	8003cf0 <HAL_ADC_ConvHalfCpltCallback+0x134>
		else {
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	b21a      	sxth	r2, r3
 8003bfa:	4b65      	ldr	r3, [pc, #404]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003bfc:	801a      	strh	r2, [r3, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8003bfe:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	4b61      	ldr	r3, [pc, #388]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	da00      	bge.n	8003c0e <HAL_ADC_ConvHalfCpltCallback+0x52>
 8003c0c:	330f      	adds	r3, #15
 8003c0e:	111b      	asrs	r3, r3, #4
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b5f      	ldr	r3, [pc, #380]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b21b      	sxth	r3, r3
 8003c18:	fb02 f303 	mul.w	r3, r2, r3
 8003c1c:	4a5e      	ldr	r2, [pc, #376]	; (8003d98 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003c1e:	fb82 0203 	smull	r0, r2, r2, r3
 8003c22:	441a      	add	r2, r3
 8003c24:	12d2      	asrs	r2, r2, #11
 8003c26:	17db      	asrs	r3, r3, #31
 8003c28:	1ad2      	subs	r2, r2, r3
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	011a      	lsls	r2, r3, #4
 8003c32:	4413      	add	r3, r2
 8003c34:	4a59      	ldr	r2, [pc, #356]	; (8003d9c <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003c36:	fb82 0203 	smull	r0, r2, r2, r3
 8003c3a:	1152      	asrs	r2, r2, #5
 8003c3c:	17db      	asrs	r3, r3, #31
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	440b      	add	r3, r1
 8003c42:	2232      	movs	r2, #50	; 0x32
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	4a55      	ldr	r2, [pc, #340]	; (8003da0 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003c4a:	6013      	str	r3, [r2, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8003c4c:	4b51      	ldr	r3, [pc, #324]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4619      	mov	r1, r3
 8003c52:	4b4e      	ldr	r3, [pc, #312]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	da00      	bge.n	8003c5c <HAL_ADC_ConvHalfCpltCallback+0xa0>
 8003c5a:	330f      	adds	r3, #15
 8003c5c:	111b      	asrs	r3, r3, #4
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	4a4b      	ldr	r2, [pc, #300]	; (8003d98 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003c6c:	fb82 0203 	smull	r0, r2, r2, r3
 8003c70:	441a      	add	r2, r3
 8003c72:	12d2      	asrs	r2, r2, #11
 8003c74:	17db      	asrs	r3, r3, #31
 8003c76:	1ad2      	subs	r2, r2, r3
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	011a      	lsls	r2, r3, #4
 8003c80:	4413      	add	r3, r2
 8003c82:	4a46      	ldr	r2, [pc, #280]	; (8003d9c <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003c84:	fb82 0203 	smull	r0, r2, r2, r3
 8003c88:	1152      	asrs	r2, r2, #5
 8003c8a:	17db      	asrs	r3, r3, #31
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	440b      	add	r3, r1
 8003c90:	2232      	movs	r2, #50	; 0x32
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	4a42      	ldr	r2, [pc, #264]	; (8003da0 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003c98:	6053      	str	r3, [r2, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8003c9a:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	da00      	bge.n	8003caa <HAL_ADC_ConvHalfCpltCallback+0xee>
 8003ca8:	330f      	adds	r3, #15
 8003caa:	111b      	asrs	r3, r3, #4
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b21b      	sxth	r3, r3
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	4a37      	ldr	r2, [pc, #220]	; (8003d98 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003cba:	fb82 0203 	smull	r0, r2, r2, r3
 8003cbe:	441a      	add	r2, r3
 8003cc0:	12d2      	asrs	r2, r2, #11
 8003cc2:	17db      	asrs	r3, r3, #31
 8003cc4:	1ad2      	subs	r2, r2, r3
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	011a      	lsls	r2, r3, #4
 8003cce:	4413      	add	r3, r2
 8003cd0:	4a32      	ldr	r2, [pc, #200]	; (8003d9c <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003cd2:	fb82 0203 	smull	r0, r2, r2, r3
 8003cd6:	1152      	asrs	r2, r2, #5
 8003cd8:	17db      	asrs	r3, r3, #31
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	440b      	add	r3, r1
 8003cde:	2232      	movs	r2, #50	; 0x32
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	4a2e      	ldr	r2, [pc, #184]	; (8003da0 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003ce6:	6093      	str	r3, [r2, #8]
//			data.Current_DC = sqrt(data.Current_M1*data.Current_M1 + data.Current_M2*data.Current_M2 + data.Current_M3*data.Current_M3);//(int32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
			Curent_IRQ_callback(&data);
 8003ce8:	4b2e      	ldr	r3, [pc, #184]	; (8003da4 <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	482c      	ldr	r0, [pc, #176]	; (8003da0 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003cee:	4798      	blx	r3
		}
	}
	if (hadc == &hadc2){
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d13f      	bne.n	8003d78 <HAL_ADC_ConvHalfCpltCallback+0x1bc>
		//VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003cf8:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	4a24      	ldr	r2, [pc, #144]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003d00:	8812      	ldrh	r2, [r2, #0]
 8003d02:	b212      	sxth	r2, r2
 8003d04:	fb03 f202 	mul.w	r2, r3, r2
 8003d08:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8003d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0e:	1ad2      	subs	r2, r2, r3
 8003d10:	0852      	lsrs	r2, r2, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	0adb      	lsrs	r3, r3, #11
 8003d16:	b21a      	sxth	r2, r3
 8003d18:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003d1a:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003d24:	8812      	ldrh	r2, [r2, #0]
 8003d26:	b212      	sxth	r2, r2
 8003d28:	fb03 f202 	mul.w	r2, r3, r2
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	4413      	add	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8003d38:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	0852      	lsrs	r2, r2, #1
 8003d40:	4413      	add	r3, r2
 8003d42:	0adb      	lsrs	r3, r3, #11
 8003d44:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003d46:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003d48:	4b18      	ldr	r3, [pc, #96]	; (8003dac <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	4a10      	ldr	r2, [pc, #64]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003d50:	8812      	ldrh	r2, [r2, #0]
 8003d52:	b212      	sxth	r2, r2
 8003d54:	fb03 f202 	mul.w	r2, r3, r2
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	0bdb      	lsrs	r3, r3, #15
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003d6e:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8003d70:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	480f      	ldr	r0, [pc, #60]	; (8003db4 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003d76:	4798      	blx	r3
	}
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20001734 	.word	0x20001734
 8003d84:	200016cc 	.word	0x200016cc
 8003d88:	2000055c 	.word	0x2000055c
 8003d8c:	20001658 	.word	0x20001658
 8003d90:	200016a4 	.word	0x200016a4
 8003d94:	20001698 	.word	0x20001698
 8003d98:	80080081 	.word	0x80080081
 8003d9c:	51eb851f 	.word	0x51eb851f
 8003da0:	200016ac 	.word	0x200016ac
 8003da4:	200016a8 	.word	0x200016a8
 8003da8:	200017a0 	.word	0x200017a0
 8003dac:	20001678 	.word	0x20001678
 8003db0:	00100101 	.word	0x00100101
 8003db4:	200016c0 	.word	0x200016c0
 8003db8:	ccd99a67 	.word	0xccd99a67
 8003dbc:	200016bc 	.word	0x200016bc

08003dc0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a6f      	ldr	r2, [pc, #444]	; (8003f88 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f040 808f 	bne.w	8003ef0 <HAL_ADC_ConvCpltCallback+0x130>
 8003dd2:	4b6e      	ldr	r3, [pc, #440]	; (8003f8c <HAL_ADC_ConvCpltCallback+0x1cc>)
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 808a 	bne.w	8003ef0 <HAL_ADC_ConvCpltCallback+0x130>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8003ddc:	4b6c      	ldr	r3, [pc, #432]	; (8003f90 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003de8:	fb02 f303 	mul.w	r3, r2, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b69      	ldr	r3, [pc, #420]	; (8003f94 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	b21a      	sxth	r2, r3
 8003dfa:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003dfc:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8003dfe:	4b67      	ldr	r3, [pc, #412]	; (8003f9c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	4b63      	ldr	r3, [pc, #396]	; (8003f94 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	da00      	bge.n	8003e0e <HAL_ADC_ConvCpltCallback+0x4e>
 8003e0c:	330f      	adds	r3, #15
 8003e0e:	111b      	asrs	r3, r3, #4
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b61      	ldr	r3, [pc, #388]	; (8003f98 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	4a60      	ldr	r2, [pc, #384]	; (8003fa0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8003e1e:	fb82 0203 	smull	r0, r2, r2, r3
 8003e22:	441a      	add	r2, r3
 8003e24:	12d2      	asrs	r2, r2, #11
 8003e26:	17db      	asrs	r3, r3, #31
 8003e28:	1ad2      	subs	r2, r2, r3
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	011a      	lsls	r2, r3, #4
 8003e32:	4413      	add	r3, r2
 8003e34:	4a5b      	ldr	r2, [pc, #364]	; (8003fa4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8003e36:	fb82 0203 	smull	r0, r2, r2, r3
 8003e3a:	1152      	asrs	r2, r2, #5
 8003e3c:	17db      	asrs	r3, r3, #31
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	440b      	add	r3, r1
 8003e42:	2232      	movs	r2, #50	; 0x32
 8003e44:	fb02 f303 	mul.w	r3, r2, r3
 8003e48:	4a57      	ldr	r2, [pc, #348]	; (8003fa8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8003e4a:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4619      	mov	r1, r3
 8003e52:	4b50      	ldr	r3, [pc, #320]	; (8003f94 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da00      	bge.n	8003e5c <HAL_ADC_ConvCpltCallback+0x9c>
 8003e5a:	330f      	adds	r3, #15
 8003e5c:	111b      	asrs	r3, r3, #4
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b21b      	sxth	r3, r3
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	4a4d      	ldr	r2, [pc, #308]	; (8003fa0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8003e6c:	fb82 0203 	smull	r0, r2, r2, r3
 8003e70:	441a      	add	r2, r3
 8003e72:	12d2      	asrs	r2, r2, #11
 8003e74:	17db      	asrs	r3, r3, #31
 8003e76:	1ad2      	subs	r2, r2, r3
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	011a      	lsls	r2, r3, #4
 8003e80:	4413      	add	r3, r2
 8003e82:	4a48      	ldr	r2, [pc, #288]	; (8003fa4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8003e84:	fb82 0203 	smull	r0, r2, r2, r3
 8003e88:	1152      	asrs	r2, r2, #5
 8003e8a:	17db      	asrs	r3, r3, #31
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	440b      	add	r3, r1
 8003e90:	2232      	movs	r2, #50	; 0x32
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	4a44      	ldr	r2, [pc, #272]	; (8003fa8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8003e98:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8003e9a:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4b3c      	ldr	r3, [pc, #240]	; (8003f94 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da00      	bge.n	8003eaa <HAL_ADC_ConvCpltCallback+0xea>
 8003ea8:	330f      	adds	r3, #15
 8003eaa:	111b      	asrs	r3, r3, #4
 8003eac:	461a      	mov	r2, r3
 8003eae:	4b3a      	ldr	r3, [pc, #232]	; (8003f98 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b21b      	sxth	r3, r3
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	4a39      	ldr	r2, [pc, #228]	; (8003fa0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8003eba:	fb82 0203 	smull	r0, r2, r2, r3
 8003ebe:	441a      	add	r2, r3
 8003ec0:	12d2      	asrs	r2, r2, #11
 8003ec2:	17db      	asrs	r3, r3, #31
 8003ec4:	1ad2      	subs	r2, r2, r3
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	011a      	lsls	r2, r3, #4
 8003ece:	4413      	add	r3, r2
 8003ed0:	4a34      	ldr	r2, [pc, #208]	; (8003fa4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8003ed2:	fb82 0203 	smull	r0, r2, r2, r3
 8003ed6:	1152      	asrs	r2, r2, #5
 8003ed8:	17db      	asrs	r3, r3, #31
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	440b      	add	r3, r1
 8003ede:	2232      	movs	r2, #50	; 0x32
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	4a30      	ldr	r2, [pc, #192]	; (8003fa8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8003ee6:	6093      	str	r3, [r2, #8]
//		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
		Curent_IRQ_callback(&data);
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_ADC_ConvCpltCallback+0x1ec>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	482e      	ldr	r0, [pc, #184]	; (8003fa8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8003eee:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d142      	bne.n	8003f7e <HAL_ADC_ConvCpltCallback+0x1be>
//		  T = (1.0f / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
//		  T = T - 273.15f;
////		  T = (T * 9.0f)/ 5.0f + 32.0f;
//		VT_data.Temp_NTC1  = (int16_t)T;

		VT_data.Temp_NTC1 = 0; //(VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES * ;
 8003ef8:	4b2e      	ldr	r3, [pc, #184]	; (8003fb4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	80da      	strh	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003efe:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	4a24      	ldr	r2, [pc, #144]	; (8003f98 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003f06:	8812      	ldrh	r2, [r2, #0]
 8003f08:	b212      	sxth	r2, r2
 8003f0a:	fb03 f202 	mul.w	r2, r3, r2
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8003f10:	fba3 1302 	umull	r1, r3, r3, r2
 8003f14:	1ad2      	subs	r2, r2, r3
 8003f16:	0852      	lsrs	r2, r2, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	0adb      	lsrs	r3, r3, #11
 8003f1c:	b21a      	sxth	r2, r3
 8003f1e:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003f20:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003f22:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003f2a:	8812      	ldrh	r2, [r2, #0]
 8003f2c:	b212      	sxth	r2, r2
 8003f2e:	fb03 f202 	mul.w	r2, r3, r2
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	4413      	add	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8003f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f42:	1ad2      	subs	r2, r2, r3
 8003f44:	0852      	lsrs	r2, r2, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	0adb      	lsrs	r3, r3, #11
 8003f4a:	4a1a      	ldr	r2, [pc, #104]	; (8003fb4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003f4c:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003f56:	8812      	ldrh	r2, [r2, #0]
 8003f58:	b212      	sxth	r2, r2
 8003f5a:	fb03 f202 	mul.w	r2, r3, r2
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <HAL_ADC_ConvCpltCallback+0x200>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	0bdb      	lsrs	r3, r3, #15
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003f74:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <HAL_ADC_ConvCpltCallback+0x204>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	480e      	ldr	r0, [pc, #56]	; (8003fb4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003f7c:	4798      	blx	r3
	}
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20001734 	.word	0x20001734
 8003f8c:	200016cc 	.word	0x200016cc
 8003f90:	2000055c 	.word	0x2000055c
 8003f94:	20001658 	.word	0x20001658
 8003f98:	200016a4 	.word	0x200016a4
 8003f9c:	20001698 	.word	0x20001698
 8003fa0:	80080081 	.word	0x80080081
 8003fa4:	51eb851f 	.word	0x51eb851f
 8003fa8:	200016ac 	.word	0x200016ac
 8003fac:	200016a8 	.word	0x200016a8
 8003fb0:	200017a0 	.word	0x200017a0
 8003fb4:	200016c0 	.word	0x200016c0
 8003fb8:	20001678 	.word	0x20001678
 8003fbc:	00100101 	.word	0x00100101
 8003fc0:	ccd99a67 	.word	0xccd99a67
 8003fc4:	200016bc 	.word	0x200016bc

08003fc8 <dq0>:

void dq0(float theta, float a, float b, float c, float *d, float *q){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	ed87 0a05 	vstr	s0, [r7, #20]
 8003fd2:	edc7 0a04 	vstr	s1, [r7, #16]
 8003fd6:	ed87 1a03 	vstr	s2, [r7, #12]
 8003fda:	edc7 1a02 	vstr	s3, [r7, #8]
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]

//	uint32_t temp = (int32_t)(90.0f-theta*180/3.14159264f+2*360)%360;
//    float cf = sin3((float)temp)*pi/180.0f;
//    float sf = sin3((theta)*180.0f/pi)*pi/180.0f;

	float cf = cosf(theta);
 8003fe2:	ed97 0a05 	vldr	s0, [r7, #20]
 8003fe6:	f009 f9ef 	bl	800d3c8 <cosf>
 8003fea:	ed87 0a07 	vstr	s0, [r7, #28]
	float sf = sinf(theta);
 8003fee:	ed97 0a05 	vldr	s0, [r7, #20]
 8003ff2:	f009 fa2d 	bl	800d450 <sinf>
 8003ff6:	ed87 0a06 	vstr	s0, [r7, #24]

//	RunCordic(theta, &cf, &sf);

    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8003ffa:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ffe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004006:	edd7 7a06 	vldr	s15, [r7, #24]
 800400a:	eddf 6a34 	vldr	s13, [pc, #208]	; 80040dc <dq0+0x114>
 800400e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004012:	edd7 7a07 	vldr	s15, [r7, #28]
 8004016:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800401a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800401e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004022:	edd7 7a03 	vldr	s15, [r7, #12]
 8004026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800402a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800402e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004032:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80040e0 <dq0+0x118>
 8004036:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800403a:	edd7 7a07 	vldr	s15, [r7, #28]
 800403e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004042:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004046:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800404a:	edd7 7a02 	vldr	s15, [r7, #8]
 800404e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004056:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80040e4 <dq0+0x11c>
 800405a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 8004064:	edd7 7a06 	vldr	s15, [r7, #24]
 8004068:	eeb1 7a67 	vneg.f32	s14, s15
 800406c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004074:	edd7 7a07 	vldr	s15, [r7, #28]
 8004078:	eddf 6a19 	vldr	s13, [pc, #100]	; 80040e0 <dq0+0x118>
 800407c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004080:	edd7 7a06 	vldr	s15, [r7, #24]
 8004084:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004088:	ee67 7a86 	vmul.f32	s15, s15, s12
 800408c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004090:	edd7 7a03 	vldr	s15, [r7, #12]
 8004094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004098:	ee37 7a67 	vsub.f32	s14, s14, s15
 800409c:	edd7 7a07 	vldr	s15, [r7, #28]
 80040a0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80040dc <dq0+0x114>
 80040a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80040ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80040b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80040b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80040bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80040e4 <dq0+0x11c>
 80040c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	edc3 7a00 	vstr	s15, [r3]
    }
 80040d2:	bf00      	nop
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	3f5db3d7 	.word	0x3f5db3d7
 80040e0:	bf5db3d7 	.word	0xbf5db3d7
 80040e4:	3f2aaaab 	.word	0x3f2aaaab

080040e8 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f002 fcb5 	bl	8006a60 <HAL_FDCAN_Start>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e00a      	b.n	8004116 <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004100:	2200      	movs	r2, #0
 8004102:	2101      	movs	r1, #1
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f002 fdad 	bl	8006c64 <HAL_FDCAN_ActivateNotification>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	; 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 800412c:	4b18      	ldr	r3, [pc, #96]	; (8004190 <FDCAN_addCallback+0x70>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b09      	cmp	r3, #9
 8004132:	d901      	bls.n	8004138 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 8004134:	2303      	movs	r3, #3
 8004136:	e025      	b.n	8004184 <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	e00c      	b.n	8004158 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <FDCAN_addCallback+0x74>)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	d101      	bne.n	8004152 <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e018      	b.n	8004184 <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3301      	adds	r3, #1
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <FDCAN_addCallback+0x70>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	429a      	cmp	r2, r3
 8004160:	d3ed      	bcc.n	800413e <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <FDCAN_addCallback+0x70>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	490a      	ldr	r1, [pc, #40]	; (8004194 <FDCAN_addCallback+0x74>)
 800416a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <FDCAN_addCallback+0x74>)
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <FDCAN_addCallback+0x70>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	4a04      	ldr	r2, [pc, #16]	; (8004190 <FDCAN_addCallback+0x70>)
 8004180:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3724      	adds	r7, #36	; 0x24
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	2000172c 	.word	0x2000172c
 8004194:	200016dc 	.word	0x200016dc

08004198 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08e      	sub	sp, #56	; 0x38
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80041a8:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80041ac:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80041ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80041c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80041c6:	2300      	movs	r3, #0
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 80041ce:	f107 0314 	add.w	r3, r7, #20
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4619      	mov	r1, r3
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f002 fc5a 	bl	8006a90 <HAL_FDCAN_AddMessageToTxFifoQ>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3738      	adds	r7, #56	; 0x38
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b09e      	sub	sp, #120	; 0x78
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80041fa:	f107 030c 	add.w	r3, r7, #12
 80041fe:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004202:	2140      	movs	r1, #64	; 0x40
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f002 fca5 	bl	8006b54 <HAL_FDCAN_GetRxMessage>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8004210:	f000 fc79 	bl	8004b06 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004214:	2300      	movs	r3, #0
 8004216:	677b      	str	r3, [r7, #116]	; 0x74
 8004218:	e012      	b.n	8004240 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 800421a:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800421c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004226:	429a      	cmp	r2, r3
 8004228:	d107      	bne.n	800423a <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 800422a:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800422c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004232:	f107 020c 	add.w	r2, r7, #12
 8004236:	4610      	mov	r0, r2
 8004238:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800423a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800423c:	3301      	adds	r3, #1
 800423e:	677b      	str	r3, [r7, #116]	; 0x74
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004246:	429a      	cmp	r2, r3
 8004248:	d3e7      	bcc.n	800421a <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	3778      	adds	r7, #120	; 0x78
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	200016dc 	.word	0x200016dc
 8004258:	2000172c 	.word	0x2000172c

0800425c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800425c:	b510      	push	{r4, lr}
 800425e:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004260:	2400      	movs	r4, #0
 8004262:	9409      	str	r4, [sp, #36]	; 0x24
 8004264:	940a      	str	r4, [sp, #40]	; 0x28
 8004266:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8004268:	2220      	movs	r2, #32
 800426a:	4621      	mov	r1, r4
 800426c:	a801      	add	r0, sp, #4
 800426e:	f006 ff59 	bl	800b124 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004272:	4837      	ldr	r0, [pc, #220]	; (8004350 <MX_ADC1_Init+0xf4>)
 8004274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004278:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800427a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800427e:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004280:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004282:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8004284:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004286:	2301      	movs	r3, #1
 8004288:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800428a:	2208      	movs	r2, #8
 800428c:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800428e:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004290:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 4;
 8004292:	2204      	movs	r2, #4
 8004294:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004296:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800429a:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800429c:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800429e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80042a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042a6:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80042a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80042ac:	220c      	movs	r2, #12
 80042ae:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80042b0:	6484      	str	r4, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80042b2:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80042b4:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80042b6:	f001 f8bd 	bl	8005434 <HAL_ADC_Init>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d135      	bne.n	800432a <MX_ADC1_Init+0xce>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80042be:	2300      	movs	r3, #0
 80042c0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80042c2:	a909      	add	r1, sp, #36	; 0x24
 80042c4:	4822      	ldr	r0, [pc, #136]	; (8004350 <MX_ADC1_Init+0xf4>)
 80042c6:	f001 fe9b 	bl	8006000 <HAL_ADCEx_MultiModeConfigChannel>
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d130      	bne.n	8004330 <MX_ADC1_Init+0xd4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80042ce:	4b21      	ldr	r3, [pc, #132]	; (8004354 <MX_ADC1_Init+0xf8>)
 80042d0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042d2:	2306      	movs	r3, #6
 80042d4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80042d6:	2303      	movs	r3, #3
 80042d8:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042da:	237f      	movs	r3, #127	; 0x7f
 80042dc:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042de:	2304      	movs	r3, #4
 80042e0:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042e6:	a901      	add	r1, sp, #4
 80042e8:	4819      	ldr	r0, [pc, #100]	; (8004350 <MX_ADC1_Init+0xf4>)
 80042ea:	f001 fb53 	bl	8005994 <HAL_ADC_ConfigChannel>
 80042ee:	bb10      	cbnz	r0, 8004336 <MX_ADC1_Init+0xda>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80042f0:	4b19      	ldr	r3, [pc, #100]	; (8004358 <MX_ADC1_Init+0xfc>)
 80042f2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80042f4:	230c      	movs	r3, #12
 80042f6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042f8:	a901      	add	r1, sp, #4
 80042fa:	4815      	ldr	r0, [pc, #84]	; (8004350 <MX_ADC1_Init+0xf4>)
 80042fc:	f001 fb4a 	bl	8005994 <HAL_ADC_ConfigChannel>
 8004300:	b9e0      	cbnz	r0, 800433c <MX_ADC1_Init+0xe0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004302:	4b16      	ldr	r3, [pc, #88]	; (800435c <MX_ADC1_Init+0x100>)
 8004304:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004306:	2312      	movs	r3, #18
 8004308:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800430a:	a901      	add	r1, sp, #4
 800430c:	4810      	ldr	r0, [pc, #64]	; (8004350 <MX_ADC1_Init+0xf4>)
 800430e:	f001 fb41 	bl	8005994 <HAL_ADC_ConfigChannel>
 8004312:	b9b0      	cbnz	r0, 8004342 <MX_ADC1_Init+0xe6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <MX_ADC1_Init+0x104>)
 8004316:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004318:	2318      	movs	r3, #24
 800431a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800431c:	a901      	add	r1, sp, #4
 800431e:	480c      	ldr	r0, [pc, #48]	; (8004350 <MX_ADC1_Init+0xf4>)
 8004320:	f001 fb38 	bl	8005994 <HAL_ADC_ConfigChannel>
 8004324:	b980      	cbnz	r0, 8004348 <MX_ADC1_Init+0xec>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004326:	b00c      	add	sp, #48	; 0x30
 8004328:	bd10      	pop	{r4, pc}
    Error_Handler();
 800432a:	f000 fbec 	bl	8004b06 <Error_Handler>
 800432e:	e7c6      	b.n	80042be <MX_ADC1_Init+0x62>
    Error_Handler();
 8004330:	f000 fbe9 	bl	8004b06 <Error_Handler>
 8004334:	e7cb      	b.n	80042ce <MX_ADC1_Init+0x72>
    Error_Handler();
 8004336:	f000 fbe6 	bl	8004b06 <Error_Handler>
 800433a:	e7d9      	b.n	80042f0 <MX_ADC1_Init+0x94>
    Error_Handler();
 800433c:	f000 fbe3 	bl	8004b06 <Error_Handler>
 8004340:	e7df      	b.n	8004302 <MX_ADC1_Init+0xa6>
    Error_Handler();
 8004342:	f000 fbe0 	bl	8004b06 <Error_Handler>
 8004346:	e7e5      	b.n	8004314 <MX_ADC1_Init+0xb8>
    Error_Handler();
 8004348:	f000 fbdd 	bl	8004b06 <Error_Handler>
}
 800434c:	e7eb      	b.n	8004326 <MX_ADC1_Init+0xca>
 800434e:	bf00      	nop
 8004350:	20001734 	.word	0x20001734
 8004354:	04300002 	.word	0x04300002
 8004358:	08600004 	.word	0x08600004
 800435c:	0c900008 	.word	0x0c900008
 8004360:	cb840000 	.word	0xcb840000

08004364 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004364:	b500      	push	{lr}
 8004366:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004368:	2220      	movs	r2, #32
 800436a:	2100      	movs	r1, #0
 800436c:	4668      	mov	r0, sp
 800436e:	f006 fed9 	bl	800b124 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004372:	4832      	ldr	r0, [pc, #200]	; (800443c <MX_ADC2_Init+0xd8>)
 8004374:	4b32      	ldr	r3, [pc, #200]	; (8004440 <MX_ADC2_Init+0xdc>)
 8004376:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004378:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800437c:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800437e:	2300      	movs	r3, #0
 8004380:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004382:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8004384:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004386:	2201      	movs	r2, #1
 8004388:	6142      	str	r2, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800438a:	2104      	movs	r1, #4
 800438c:	6181      	str	r1, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800438e:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004390:	7742      	strb	r2, [r0, #29]
  hadc2.Init.NbrOfConversion = 4;
 8004392:	6201      	str	r1, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004394:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004398:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800439a:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800439c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80043a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043a4:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 80043a6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80043aa:	210c      	movs	r1, #12
 80043ac:	6441      	str	r1, [r0, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80043ae:	6483      	str	r3, [r0, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80043b0:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80043b2:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80043b4:	f001 f83e 	bl	8005434 <HAL_ADC_Init>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d130      	bne.n	800441e <MX_ADC2_Init+0xba>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80043bc:	4b21      	ldr	r3, [pc, #132]	; (8004444 <MX_ADC2_Init+0xe0>)
 80043be:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80043c0:	2306      	movs	r3, #6
 80043c2:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80043c4:	2307      	movs	r3, #7
 80043c6:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80043c8:	237f      	movs	r3, #127	; 0x7f
 80043ca:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80043cc:	2304      	movs	r3, #4
 80043ce:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80043d4:	4669      	mov	r1, sp
 80043d6:	4819      	ldr	r0, [pc, #100]	; (800443c <MX_ADC2_Init+0xd8>)
 80043d8:	f001 fadc 	bl	8005994 <HAL_ADC_ConfigChannel>
 80043dc:	bb10      	cbnz	r0, 8004424 <MX_ADC2_Init+0xc0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80043de:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <MX_ADC2_Init+0xe4>)
 80043e0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80043e2:	230c      	movs	r3, #12
 80043e4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80043e6:	2300      	movs	r3, #0
 80043e8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80043ea:	4669      	mov	r1, sp
 80043ec:	4813      	ldr	r0, [pc, #76]	; (800443c <MX_ADC2_Init+0xd8>)
 80043ee:	f001 fad1 	bl	8005994 <HAL_ADC_ConfigChannel>
 80043f2:	b9d0      	cbnz	r0, 800442a <MX_ADC2_Init+0xc6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80043f4:	4b15      	ldr	r3, [pc, #84]	; (800444c <MX_ADC2_Init+0xe8>)
 80043f6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80043f8:	2312      	movs	r3, #18
 80043fa:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80043fc:	4669      	mov	r1, sp
 80043fe:	480f      	ldr	r0, [pc, #60]	; (800443c <MX_ADC2_Init+0xd8>)
 8004400:	f001 fac8 	bl	8005994 <HAL_ADC_ConfigChannel>
 8004404:	b9a0      	cbnz	r0, 8004430 <MX_ADC2_Init+0xcc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <MX_ADC2_Init+0xec>)
 8004408:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800440a:	2318      	movs	r3, #24
 800440c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800440e:	4669      	mov	r1, sp
 8004410:	480a      	ldr	r0, [pc, #40]	; (800443c <MX_ADC2_Init+0xd8>)
 8004412:	f001 fabf 	bl	8005994 <HAL_ADC_ConfigChannel>
 8004416:	b970      	cbnz	r0, 8004436 <MX_ADC2_Init+0xd2>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004418:	b009      	add	sp, #36	; 0x24
 800441a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800441e:	f000 fb72 	bl	8004b06 <Error_Handler>
 8004422:	e7cb      	b.n	80043bc <MX_ADC2_Init+0x58>
    Error_Handler();
 8004424:	f000 fb6f 	bl	8004b06 <Error_Handler>
 8004428:	e7d9      	b.n	80043de <MX_ADC2_Init+0x7a>
    Error_Handler();
 800442a:	f000 fb6c 	bl	8004b06 <Error_Handler>
 800442e:	e7e1      	b.n	80043f4 <MX_ADC2_Init+0x90>
    Error_Handler();
 8004430:	f000 fb69 	bl	8004b06 <Error_Handler>
 8004434:	e7e7      	b.n	8004406 <MX_ADC2_Init+0xa2>
    Error_Handler();
 8004436:	f000 fb66 	bl	8004b06 <Error_Handler>
}
 800443a:	e7ed      	b.n	8004418 <MX_ADC2_Init+0xb4>
 800443c:	200017a0 	.word	0x200017a0
 8004440:	50000100 	.word	0x50000100
 8004444:	32601000 	.word	0x32601000
 8004448:	3ac04000 	.word	0x3ac04000
 800444c:	36902000 	.word	0x36902000
 8004450:	0c900008 	.word	0x0c900008

08004454 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	b09c      	sub	sp, #112	; 0x70
 8004458:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445a:	2100      	movs	r1, #0
 800445c:	9117      	str	r1, [sp, #92]	; 0x5c
 800445e:	9118      	str	r1, [sp, #96]	; 0x60
 8004460:	9119      	str	r1, [sp, #100]	; 0x64
 8004462:	911a      	str	r1, [sp, #104]	; 0x68
 8004464:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004466:	2244      	movs	r2, #68	; 0x44
 8004468:	a806      	add	r0, sp, #24
 800446a:	f006 fe5b 	bl	800b124 <memset>
  if(adcHandle->Instance==ADC1)
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004474:	d004      	beq.n	8004480 <HAL_ADC_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8004476:	4a63      	ldr	r2, [pc, #396]	; (8004604 <HAL_ADC_MspInit+0x1b0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d059      	beq.n	8004530 <HAL_ADC_MspInit+0xdc>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800447c:	b01c      	add	sp, #112	; 0x70
 800447e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004484:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004486:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800448a:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800448c:	a806      	add	r0, sp, #24
 800448e:	f003 fcbd 	bl	8007e0c <HAL_RCCEx_PeriphCLKConfig>
 8004492:	2800      	cmp	r0, #0
 8004494:	d13b      	bne.n	800450e <HAL_ADC_MspInit+0xba>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004496:	4a5c      	ldr	r2, [pc, #368]	; (8004608 <HAL_ADC_MspInit+0x1b4>)
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d038      	beq.n	8004514 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a2:	4b5a      	ldr	r3, [pc, #360]	; (800460c <HAL_ADC_MspInit+0x1b8>)
 80044a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	9302      	str	r3, [sp, #8]
 80044b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 80044b6:	2307      	movs	r3, #7
 80044b8:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044ba:	2303      	movs	r3, #3
 80044bc:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	2500      	movs	r5, #0
 80044c0:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c2:	a917      	add	r1, sp, #92	; 0x5c
 80044c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044c8:	f002 fefc 	bl	80072c4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80044cc:	4850      	ldr	r0, [pc, #320]	; (8004610 <HAL_ADC_MspInit+0x1bc>)
 80044ce:	4b51      	ldr	r3, [pc, #324]	; (8004614 <HAL_ADC_MspInit+0x1c0>)
 80044d0:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80044d2:	2305      	movs	r3, #5
 80044d4:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044d6:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80044d8:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044e2:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044e8:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044ea:	2320      	movs	r3, #32
 80044ec:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044ee:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044f0:	f002 f818 	bl	8006524 <HAL_DMA_Init>
 80044f4:	b9c8      	cbnz	r0, 800452a <HAL_ADC_MspInit+0xd6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80044f6:	4b46      	ldr	r3, [pc, #280]	; (8004610 <HAL_ADC_MspInit+0x1bc>)
 80044f8:	6563      	str	r3, [r4, #84]	; 0x54
 80044fa:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	4611      	mov	r1, r2
 8004500:	2012      	movs	r0, #18
 8004502:	f001 fe1d 	bl	8006140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004506:	2012      	movs	r0, #18
 8004508:	f001 fe50 	bl	80061ac <HAL_NVIC_EnableIRQ>
 800450c:	e7b6      	b.n	800447c <HAL_ADC_MspInit+0x28>
      Error_Handler();
 800450e:	f000 fafa 	bl	8004b06 <Error_Handler>
 8004512:	e7c0      	b.n	8004496 <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004514:	4b3d      	ldr	r3, [pc, #244]	; (800460c <HAL_ADC_MspInit+0x1b8>)
 8004516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800451c:	64da      	str	r2, [r3, #76]	; 0x4c
 800451e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	9b01      	ldr	r3, [sp, #4]
 8004528:	e7bb      	b.n	80044a2 <HAL_ADC_MspInit+0x4e>
      Error_Handler();
 800452a:	f000 faec 	bl	8004b06 <Error_Handler>
 800452e:	e7e2      	b.n	80044f6 <HAL_ADC_MspInit+0xa2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004530:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004534:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004536:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800453a:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800453c:	a806      	add	r0, sp, #24
 800453e:	f003 fc65 	bl	8007e0c <HAL_RCCEx_PeriphCLKConfig>
 8004542:	2800      	cmp	r0, #0
 8004544:	d14d      	bne.n	80045e2 <HAL_ADC_MspInit+0x18e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004546:	4a30      	ldr	r2, [pc, #192]	; (8004608 <HAL_ADC_MspInit+0x1b4>)
 8004548:	6813      	ldr	r3, [r2, #0]
 800454a:	3301      	adds	r3, #1
 800454c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800454e:	2b01      	cmp	r3, #1
 8004550:	d04a      	beq.n	80045e8 <HAL_ADC_MspInit+0x194>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004552:	4b2e      	ldr	r3, [pc, #184]	; (800460c <HAL_ADC_MspInit+0x1b8>)
 8004554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	64da      	str	r2, [r3, #76]	; 0x4c
 800455c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800455e:	f002 0201 	and.w	r2, r2, #1
 8004562:	9204      	str	r2, [sp, #16]
 8004564:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004568:	f042 0202 	orr.w	r2, r2, #2
 800456c:	64da      	str	r2, [r3, #76]	; 0x4c
 800456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	9305      	str	r3, [sp, #20]
 8004576:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8004578:	2360      	movs	r3, #96	; 0x60
 800457a:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800457c:	2603      	movs	r6, #3
 800457e:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004580:	2500      	movs	r5, #0
 8004582:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004584:	a917      	add	r1, sp, #92	; 0x5c
 8004586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800458a:	f002 fe9b 	bl	80072c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 800458e:	f640 0304 	movw	r3, #2052	; 0x804
 8004592:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004594:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004598:	a917      	add	r1, sp, #92	; 0x5c
 800459a:	481f      	ldr	r0, [pc, #124]	; (8004618 <HAL_ADC_MspInit+0x1c4>)
 800459c:	f002 fe92 	bl	80072c4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80045a0:	481e      	ldr	r0, [pc, #120]	; (800461c <HAL_ADC_MspInit+0x1c8>)
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <HAL_ADC_MspInit+0x1cc>)
 80045a4:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80045a6:	2324      	movs	r3, #36	; 0x24
 80045a8:	6043      	str	r3, [r0, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045aa:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ac:	60c5      	str	r5, [r0, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045b6:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045bc:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80045be:	2320      	movs	r3, #32
 80045c0:	61c3      	str	r3, [r0, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80045c2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80045c4:	f001 ffae 	bl	8006524 <HAL_DMA_Init>
 80045c8:	b9c8      	cbnz	r0, 80045fe <HAL_ADC_MspInit+0x1aa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <HAL_ADC_MspInit+0x1c8>)
 80045cc:	6563      	str	r3, [r4, #84]	; 0x54
 80045ce:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80045d0:	2200      	movs	r2, #0
 80045d2:	4611      	mov	r1, r2
 80045d4:	2012      	movs	r0, #18
 80045d6:	f001 fdb3 	bl	8006140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80045da:	2012      	movs	r0, #18
 80045dc:	f001 fde6 	bl	80061ac <HAL_NVIC_EnableIRQ>
}
 80045e0:	e74c      	b.n	800447c <HAL_ADC_MspInit+0x28>
      Error_Handler();
 80045e2:	f000 fa90 	bl	8004b06 <Error_Handler>
 80045e6:	e7ae      	b.n	8004546 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80045e8:	4b08      	ldr	r3, [pc, #32]	; (800460c <HAL_ADC_MspInit+0x1b8>)
 80045ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80045f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f8:	9303      	str	r3, [sp, #12]
 80045fa:	9b03      	ldr	r3, [sp, #12]
 80045fc:	e7a9      	b.n	8004552 <HAL_ADC_MspInit+0xfe>
      Error_Handler();
 80045fe:	f000 fa82 	bl	8004b06 <Error_Handler>
 8004602:	e7e2      	b.n	80045ca <HAL_ADC_MspInit+0x176>
 8004604:	50000100 	.word	0x50000100
 8004608:	20001730 	.word	0x20001730
 800460c:	40021000 	.word	0x40021000
 8004610:	2000180c 	.word	0x2000180c
 8004614:	40020008 	.word	0x40020008
 8004618:	48000400 	.word	0x48000400
 800461c:	2000186c 	.word	0x2000186c
 8004620:	4002001c 	.word	0x4002001c

08004624 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8004624:	b508      	push	{r3, lr}
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8004626:	4805      	ldr	r0, [pc, #20]	; (800463c <MX_CORDIC_Init+0x18>)
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <MX_CORDIC_Init+0x1c>)
 800462a:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800462c:	f001 fd5e 	bl	80060ec <HAL_CORDIC_Init>
 8004630:	b900      	cbnz	r0, 8004634 <MX_CORDIC_Init+0x10>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8004632:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004634:	f000 fa67 	bl	8004b06 <Error_Handler>
}
 8004638:	e7fb      	b.n	8004632 <MX_CORDIC_Init+0xe>
 800463a:	bf00      	nop
 800463c:	200018cc 	.word	0x200018cc
 8004640:	40020c00 	.word	0x40020c00

08004644 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{

  if(cordicHandle->Instance==CORDIC)
 8004644:	6802      	ldr	r2, [r0, #0]
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <HAL_CORDIC_MspInit+0x28>)
 8004648:	429a      	cmp	r2, r3
 800464a:	d000      	beq.n	800464e <HAL_CORDIC_MspInit+0xa>
 800464c:	4770      	bx	lr
{
 800464e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004654:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004656:	f042 0208 	orr.w	r2, r2, #8
 800465a:	649a      	str	r2, [r3, #72]	; 0x48
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8004666:	b002      	add	sp, #8
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40020c00 	.word	0x40020c00

08004670 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8004670:	b500      	push	{lr}
 8004672:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004674:	2230      	movs	r2, #48	; 0x30
 8004676:	2100      	movs	r1, #0
 8004678:	4668      	mov	r0, sp
 800467a:	f006 fd53 	bl	800b124 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800467e:	4810      	ldr	r0, [pc, #64]	; (80046c0 <MX_DAC1_Init+0x50>)
 8004680:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <MX_DAC1_Init+0x54>)
 8004682:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004684:	f001 fdb4 	bl	80061f0 <HAL_DAC_Init>
 8004688:	b9a0      	cbnz	r0, 80046b4 <MX_DAC1_Init+0x44>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800468a:	2200      	movs	r2, #0
 800468c:	9200      	str	r2, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800468e:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8004692:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004696:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004698:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800469a:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800469c:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800469e:	2301      	movs	r3, #1
 80046a0:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80046a2:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80046a4:	4669      	mov	r1, sp
 80046a6:	4806      	ldr	r0, [pc, #24]	; (80046c0 <MX_DAC1_Init+0x50>)
 80046a8:	f001 fe00 	bl	80062ac <HAL_DAC_ConfigChannel>
 80046ac:	b928      	cbnz	r0, 80046ba <MX_DAC1_Init+0x4a>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80046ae:	b00d      	add	sp, #52	; 0x34
 80046b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80046b4:	f000 fa27 	bl	8004b06 <Error_Handler>
 80046b8:	e7e7      	b.n	800468a <MX_DAC1_Init+0x1a>
    Error_Handler();
 80046ba:	f000 fa24 	bl	8004b06 <Error_Handler>
}
 80046be:	e7f6      	b.n	80046ae <MX_DAC1_Init+0x3e>
 80046c0:	200018f4 	.word	0x200018f4
 80046c4:	50000800 	.word	0x50000800

080046c8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80046c8:	b500      	push	{lr}
 80046ca:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046cc:	2300      	movs	r3, #0
 80046ce:	9303      	str	r3, [sp, #12]
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	9305      	str	r3, [sp, #20]
 80046d4:	9306      	str	r3, [sp, #24]
 80046d6:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 80046d8:	6802      	ldr	r2, [r0, #0]
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_DAC_MspInit+0x60>)
 80046dc:	429a      	cmp	r2, r3
 80046de:	d002      	beq.n	80046e6 <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80046e0:	b009      	add	sp, #36	; 0x24
 80046e2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80046e6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80046ea:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80046ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80046f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046f8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80046fc:	9201      	str	r2, [sp, #4]
 80046fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	64da      	str	r2, [r3, #76]	; 0x4c
 8004708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	9302      	str	r3, [sp, #8]
 8004710:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004712:	2310      	movs	r3, #16
 8004714:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004716:	2303      	movs	r3, #3
 8004718:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471a:	a903      	add	r1, sp, #12
 800471c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004720:	f002 fdd0 	bl	80072c4 <HAL_GPIO_Init>
}
 8004724:	e7dc      	b.n	80046e0 <HAL_DAC_MspInit+0x18>
 8004726:	bf00      	nop
 8004728:	50000800 	.word	0x50000800

0800472c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800472c:	b500      	push	{lr}
 800472e:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <MX_DMA_Init+0xb4>)
 8004732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004734:	f042 0204 	orr.w	r2, r2, #4
 8004738:	649a      	str	r2, [r3, #72]	; 0x48
 800473a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800473c:	f002 0204 	and.w	r2, r2, #4
 8004740:	9201      	str	r2, [sp, #4]
 8004742:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	649a      	str	r2, [r3, #72]	; 0x48
 800474c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800474e:	f002 0201 	and.w	r2, r2, #1
 8004752:	9202      	str	r2, [sp, #8]
 8004754:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004758:	f042 0202 	orr.w	r2, r2, #2
 800475c:	649a      	str	r2, [r3, #72]	; 0x48
 800475e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	9303      	str	r3, [sp, #12]
 8004766:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004768:	2200      	movs	r2, #0
 800476a:	4611      	mov	r1, r2
 800476c:	200b      	movs	r0, #11
 800476e:	f001 fce7 	bl	8006140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004772:	200b      	movs	r0, #11
 8004774:	f001 fd1a 	bl	80061ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004778:	2200      	movs	r2, #0
 800477a:	4611      	mov	r1, r2
 800477c:	200c      	movs	r0, #12
 800477e:	f001 fcdf 	bl	8006140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004782:	200c      	movs	r0, #12
 8004784:	f001 fd12 	bl	80061ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004788:	2200      	movs	r2, #0
 800478a:	4611      	mov	r1, r2
 800478c:	200d      	movs	r0, #13
 800478e:	f001 fcd7 	bl	8006140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004792:	200d      	movs	r0, #13
 8004794:	f001 fd0a 	bl	80061ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004798:	2200      	movs	r2, #0
 800479a:	4611      	mov	r1, r2
 800479c:	200e      	movs	r0, #14
 800479e:	f001 fccf 	bl	8006140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80047a2:	200e      	movs	r0, #14
 80047a4:	f001 fd02 	bl	80061ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80047a8:	2200      	movs	r2, #0
 80047aa:	4611      	mov	r1, r2
 80047ac:	2038      	movs	r0, #56	; 0x38
 80047ae:	f001 fcc7 	bl	8006140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80047b2:	2038      	movs	r0, #56	; 0x38
 80047b4:	f001 fcfa 	bl	80061ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80047b8:	2200      	movs	r2, #0
 80047ba:	4611      	mov	r1, r2
 80047bc:	2039      	movs	r0, #57	; 0x39
 80047be:	f001 fcbf 	bl	8006140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80047c2:	2039      	movs	r0, #57	; 0x39
 80047c4:	f001 fcf2 	bl	80061ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80047c8:	2200      	movs	r2, #0
 80047ca:	4611      	mov	r1, r2
 80047cc:	203a      	movs	r0, #58	; 0x3a
 80047ce:	f001 fcb7 	bl	8006140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80047d2:	203a      	movs	r0, #58	; 0x3a
 80047d4:	f001 fcea 	bl	80061ac <HAL_NVIC_EnableIRQ>

}
 80047d8:	b005      	add	sp, #20
 80047da:	f85d fb04 	ldr.w	pc, [sp], #4
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000

080047e4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80047e4:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80047e6:	4811      	ldr	r0, [pc, #68]	; (800482c <MX_FDCAN1_Init+0x48>)
 80047e8:	4b11      	ldr	r3, [pc, #68]	; (8004830 <MX_FDCAN1_Init+0x4c>)
 80047ea:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80047ec:	2300      	movs	r3, #0
 80047ee:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80047f0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80047f4:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80047f6:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80047f8:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80047fa:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80047fc:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80047fe:	2201      	movs	r2, #1
 8004800:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8004802:	2107      	movs	r1, #7
 8004804:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8004806:	242a      	movs	r4, #42	; 0x2a
 8004808:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 800480a:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800480c:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 800480e:	2209      	movs	r2, #9
 8004810:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8004812:	210a      	movs	r1, #10
 8004814:	62c1      	str	r1, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8004816:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8004818:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800481a:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800481c:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800481e:	f002 f819 	bl	8006854 <HAL_FDCAN_Init>
 8004822:	b900      	cbnz	r0, 8004826 <MX_FDCAN1_Init+0x42>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004824:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004826:	f000 f96e 	bl	8004b06 <Error_Handler>
}
 800482a:	e7fb      	b.n	8004824 <MX_FDCAN1_Init+0x40>
 800482c:	20001908 	.word	0x20001908
 8004830:	40006400 	.word	0x40006400

08004834 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8004834:	b510      	push	{r4, lr}
 8004836:	b098      	sub	sp, #96	; 0x60
 8004838:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483a:	2100      	movs	r1, #0
 800483c:	9113      	str	r1, [sp, #76]	; 0x4c
 800483e:	9114      	str	r1, [sp, #80]	; 0x50
 8004840:	9115      	str	r1, [sp, #84]	; 0x54
 8004842:	9116      	str	r1, [sp, #88]	; 0x58
 8004844:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004846:	2244      	movs	r2, #68	; 0x44
 8004848:	a802      	add	r0, sp, #8
 800484a:	f006 fc6b 	bl	800b124 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_FDCAN_MspInit+0x98>)
 8004852:	429a      	cmp	r2, r3
 8004854:	d001      	beq.n	800485a <HAL_FDCAN_MspInit+0x26>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8004856:	b018      	add	sp, #96	; 0x60
 8004858:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800485a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800485e:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004864:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004866:	a802      	add	r0, sp, #8
 8004868:	f003 fad0 	bl	8007e0c <HAL_RCCEx_PeriphCLKConfig>
 800486c:	bb50      	cbnz	r0, 80048c4 <HAL_FDCAN_MspInit+0x90>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800486e:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <HAL_FDCAN_MspInit+0x9c>)
 8004870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004872:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004876:	659a      	str	r2, [r3, #88]	; 0x58
 8004878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800487a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800487e:	9200      	str	r2, [sp, #0]
 8004880:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	64da      	str	r2, [r3, #76]	; 0x4c
 800488a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004894:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004898:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	2302      	movs	r3, #2
 800489c:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2400      	movs	r4, #0
 80048a0:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a2:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80048a4:	2309      	movs	r3, #9
 80048a6:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a8:	a913      	add	r1, sp, #76	; 0x4c
 80048aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048ae:	f002 fd09 	bl	80072c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80048b2:	4622      	mov	r2, r4
 80048b4:	4621      	mov	r1, r4
 80048b6:	2015      	movs	r0, #21
 80048b8:	f001 fc42 	bl	8006140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80048bc:	2015      	movs	r0, #21
 80048be:	f001 fc75 	bl	80061ac <HAL_NVIC_EnableIRQ>
}
 80048c2:	e7c8      	b.n	8004856 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 80048c4:	f000 f91f 	bl	8004b06 <Error_Handler>
 80048c8:	e7d1      	b.n	800486e <HAL_FDCAN_MspInit+0x3a>
 80048ca:	bf00      	nop
 80048cc:	40006400 	.word	0x40006400
 80048d0:	40021000 	.word	0x40021000

080048d4 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 80048d4:	b508      	push	{r3, lr}
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80048d6:	4805      	ldr	r0, [pc, #20]	; (80048ec <MX_FMAC_Init+0x18>)
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <MX_FMAC_Init+0x1c>)
 80048da:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80048dc:	f002 fcc2 	bl	8007264 <HAL_FMAC_Init>
 80048e0:	b900      	cbnz	r0, 80048e4 <MX_FMAC_Init+0x10>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80048e2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80048e4:	f000 f90f 	bl	8004b06 <Error_Handler>
}
 80048e8:	e7fb      	b.n	80048e2 <MX_FMAC_Init+0xe>
 80048ea:	bf00      	nop
 80048ec:	2000196c 	.word	0x2000196c
 80048f0:	40021400 	.word	0x40021400

080048f4 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{

  if(fmacHandle->Instance==FMAC)
 80048f4:	6802      	ldr	r2, [r0, #0]
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_FMAC_MspInit+0x28>)
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d000      	beq.n	80048fe <HAL_FMAC_MspInit+0xa>
 80048fc:	4770      	bx	lr
{
 80048fe:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004900:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004906:	f042 0210 	orr.w	r2, r2, #16
 800490a:	649a      	str	r2, [r3, #72]	; 0x48
 800490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8004916:	b002      	add	sp, #8
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40021400 	.word	0x40021400

08004920 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8004920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004924:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004926:	2400      	movs	r4, #0
 8004928:	9405      	str	r4, [sp, #20]
 800492a:	9406      	str	r4, [sp, #24]
 800492c:	9407      	str	r4, [sp, #28]
 800492e:	9408      	str	r4, [sp, #32]
 8004930:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004932:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <MX_GPIO_Init+0x110>)
 8004934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004936:	f042 0220 	orr.w	r2, r2, #32
 800493a:	64da      	str	r2, [r3, #76]	; 0x4c
 800493c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800493e:	f002 0220 	and.w	r2, r2, #32
 8004942:	9200      	str	r2, [sp, #0]
 8004944:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004948:	f042 0204 	orr.w	r2, r2, #4
 800494c:	64da      	str	r2, [r3, #76]	; 0x4c
 800494e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004950:	f002 0204 	and.w	r2, r2, #4
 8004954:	9201      	str	r2, [sp, #4]
 8004956:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004962:	f002 0201 	and.w	r2, r2, #1
 8004966:	9202      	str	r2, [sp, #8]
 8004968:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800496a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800496c:	f042 0202 	orr.w	r2, r2, #2
 8004970:	64da      	str	r2, [r3, #76]	; 0x4c
 8004972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004974:	f002 0202 	and.w	r2, r2, #2
 8004978:	9203      	str	r2, [sp, #12]
 800497a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800497c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	64da      	str	r2, [r3, #76]	; 0x4c
 8004984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	9304      	str	r3, [sp, #16]
 800498c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 800498e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8004a3c <MX_GPIO_Init+0x11c>
 8004992:	4622      	mov	r2, r4
 8004994:	21c0      	movs	r1, #192	; 0xc0
 8004996:	4640      	mov	r0, r8
 8004998:	f002 fd78 	bl	800748c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 800499c:	4622      	mov	r2, r4
 800499e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049a6:	f002 fd71 	bl	800748c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 80049aa:	4f22      	ldr	r7, [pc, #136]	; (8004a34 <MX_GPIO_Init+0x114>)
 80049ac:	4622      	mov	r2, r4
 80049ae:	2104      	movs	r1, #4
 80049b0:	4638      	mov	r0, r7
 80049b2:	f002 fd6b 	bl	800748c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 80049b6:	4e20      	ldr	r6, [pc, #128]	; (8004a38 <MX_GPIO_Init+0x118>)
 80049b8:	4622      	mov	r2, r4
 80049ba:	2140      	movs	r1, #64	; 0x40
 80049bc:	4630      	mov	r0, r6
 80049be:	f002 fd65 	bl	800748c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 80049c2:	23c0      	movs	r3, #192	; 0xc0
 80049c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049c6:	2501      	movs	r5, #1
 80049c8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ca:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049cc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ce:	a905      	add	r1, sp, #20
 80049d0:	4640      	mov	r0, r8
 80049d2:	f002 fc77 	bl	80072c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80049d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049dc:	2302      	movs	r3, #2
 80049de:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80049e4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e6:	a905      	add	r1, sp, #20
 80049e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049ec:	f002 fc6a 	bl	80072c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 80049f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049f4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049f6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049fa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 80049fc:	a905      	add	r1, sp, #20
 80049fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a02:	f002 fc5f 	bl	80072c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8004a06:	2304      	movs	r3, #4
 8004a08:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a0a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a0e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8004a10:	a905      	add	r1, sp, #20
 8004a12:	4638      	mov	r0, r7
 8004a14:	f002 fc56 	bl	80072c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8004a18:	2340      	movs	r3, #64	; 0x40
 8004a1a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a1c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a20:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8004a22:	a905      	add	r1, sp, #20
 8004a24:	4630      	mov	r0, r6
 8004a26:	f002 fc4d 	bl	80072c4 <HAL_GPIO_Init>

}
 8004a2a:	b00a      	add	sp, #40	; 0x28
 8004a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	48000c00 	.word	0x48000c00
 8004a38:	48000400 	.word	0x48000400
 8004a3c:	48000800 	.word	0x48000800

08004a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a40:	b500      	push	{lr}
 8004a42:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a44:	2238      	movs	r2, #56	; 0x38
 8004a46:	2100      	movs	r1, #0
 8004a48:	a806      	add	r0, sp, #24
 8004a4a:	f006 fb6b 	bl	800b124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a4e:	2000      	movs	r0, #0
 8004a50:	9001      	str	r0, [sp, #4]
 8004a52:	9002      	str	r0, [sp, #8]
 8004a54:	9003      	str	r0, [sp, #12]
 8004a56:	9004      	str	r0, [sp, #16]
 8004a58:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004a5a:	f002 fd25 	bl	80074a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a66:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a68:	2240      	movs	r2, #64	; 0x40
 8004a6a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a6c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a6e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004a70:	2204      	movs	r2, #4
 8004a72:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004a74:	2250      	movs	r2, #80	; 0x50
 8004a76:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a78:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004a7a:	2208      	movs	r2, #8
 8004a7c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a7e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a80:	a806      	add	r0, sp, #24
 8004a82:	f002 fda3 	bl	80075cc <HAL_RCC_OscConfig>
 8004a86:	b9c0      	cbnz	r0, 8004aba <SystemClock_Config+0x7a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a88:	230f      	movs	r3, #15
 8004a8a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a90:	2300      	movs	r3, #0
 8004a92:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a94:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a96:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004a98:	2104      	movs	r1, #4
 8004a9a:	eb0d 0001 	add.w	r0, sp, r1
 8004a9e:	f003 f86d 	bl	8007b7c <HAL_RCC_ClockConfig>
 8004aa2:	b960      	cbnz	r0, 8004abe <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8004aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004aa8:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8004aac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ab0:	f003 f802 	bl	8007ab8 <HAL_RCC_MCOConfig>
}
 8004ab4:	b015      	add	sp, #84	; 0x54
 8004ab6:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004aba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004abc:	e7fe      	b.n	8004abc <SystemClock_Config+0x7c>
 8004abe:	b672      	cpsid	i
 8004ac0:	e7fe      	b.n	8004ac0 <SystemClock_Config+0x80>

08004ac2 <main>:
{
 8004ac2:	b508      	push	{r3, lr}
  HAL_Init();
 8004ac4:	f000 fc80 	bl	80053c8 <HAL_Init>
  SystemClock_Config();
 8004ac8:	f7ff ffba 	bl	8004a40 <SystemClock_Config>
  MX_GPIO_Init();
 8004acc:	f7ff ff28 	bl	8004920 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ad0:	f7ff fe2c 	bl	800472c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004ad4:	f7ff fe86 	bl	80047e4 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8004ad8:	f000 f818 	bl	8004b0c <MX_SPI1_Init>
  MX_SPI3_Init();
 8004adc:	f000 f83c 	bl	8004b58 <MX_SPI3_Init>
  MX_TIM1_Init();
 8004ae0:	f000 faee 	bl	80050c0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8004ae4:	f7ff fbba 	bl	800425c <MX_ADC1_Init>
  MX_ADC2_Init();
 8004ae8:	f7ff fc3c 	bl	8004364 <MX_ADC2_Init>
  MX_DAC1_Init();
 8004aec:	f7ff fdc0 	bl	8004670 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8004af0:	f000 fb7c 	bl	80051ec <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8004af4:	f000 fa2e 	bl	8004f54 <MX_TIM3_Init>
  MX_FMAC_Init();
 8004af8:	f7ff feec 	bl	80048d4 <MX_FMAC_Init>
  MX_CORDIC_Init();
 8004afc:	f7ff fd92 	bl	8004624 <MX_CORDIC_Init>
	BLDC_main();
 8004b00:	f7fc fc6a 	bl	80013d8 <BLDC_main>
  while (1)
 8004b04:	e7fc      	b.n	8004b00 <main+0x3e>

08004b06 <Error_Handler>:
 8004b06:	b672      	cpsid	i
  while (1)
 8004b08:	e7fe      	b.n	8004b08 <Error_Handler+0x2>
	...

08004b0c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004b0c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004b0e:	4810      	ldr	r0, [pc, #64]	; (8004b50 <MX_SPI1_Init+0x44>)
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <MX_SPI1_Init+0x48>)
 8004b12:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b14:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004b18:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b22:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b24:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004b26:	2201      	movs	r2, #1
 8004b28:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b2e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004b30:	2228      	movs	r2, #40	; 0x28
 8004b32:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b34:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b36:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b38:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004b3a:	2207      	movs	r2, #7
 8004b3c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b3e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004b40:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004b42:	f003 fc37 	bl	80083b4 <HAL_SPI_Init>
 8004b46:	b900      	cbnz	r0, 8004b4a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004b48:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004b4a:	f7ff ffdc 	bl	8004b06 <Error_Handler>
}
 8004b4e:	e7fb      	b.n	8004b48 <MX_SPI1_Init+0x3c>
 8004b50:	20001b24 	.word	0x20001b24
 8004b54:	40013000 	.word	0x40013000

08004b58 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004b58:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004b5a:	4810      	ldr	r0, [pc, #64]	; (8004b9c <MX_SPI3_Init+0x44>)
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <MX_SPI3_Init+0x48>)
 8004b5e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004b60:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004b64:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004b66:	2300      	movs	r3, #0
 8004b68:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b6e:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b70:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004b72:	2201      	movs	r2, #1
 8004b74:	6142      	str	r2, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b7a:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004b7c:	2228      	movs	r2, #40	; 0x28
 8004b7e:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b80:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b82:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b84:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004b86:	2207      	movs	r2, #7
 8004b88:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b8a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004b8c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004b8e:	f003 fc11 	bl	80083b4 <HAL_SPI_Init>
 8004b92:	b900      	cbnz	r0, 8004b96 <MX_SPI3_Init+0x3e>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004b94:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004b96:	f7ff ffb6 	bl	8004b06 <Error_Handler>
}
 8004b9a:	e7fb      	b.n	8004b94 <MX_SPI3_Init+0x3c>
 8004b9c:	20001b88 	.word	0x20001b88
 8004ba0:	40003c00 	.word	0x40003c00

08004ba4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004baa:	2300      	movs	r3, #0
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	9306      	str	r3, [sp, #24]
 8004bb0:	9307      	str	r3, [sp, #28]
 8004bb2:	9308      	str	r3, [sp, #32]
 8004bb4:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8004bb6:	6803      	ldr	r3, [r0, #0]
 8004bb8:	4a59      	ldr	r2, [pc, #356]	; (8004d20 <HAL_SPI_MspInit+0x17c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_SPI_MspInit+0x24>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8004bbe:	4a59      	ldr	r2, [pc, #356]	; (8004d24 <HAL_SPI_MspInit+0x180>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d056      	beq.n	8004c72 <HAL_SPI_MspInit+0xce>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004bc4:	b00a      	add	sp, #40	; 0x28
 8004bc6:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bc8:	4b57      	ldr	r3, [pc, #348]	; (8004d28 <HAL_SPI_MspInit+0x184>)
 8004bca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bd0:	661a      	str	r2, [r3, #96]	; 0x60
 8004bd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bd4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004bd8:	9201      	str	r2, [sp, #4]
 8004bda:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bde:	f042 0202 	orr.w	r2, r2, #2
 8004be2:	64da      	str	r2, [r3, #76]	; 0x4c
 8004be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	9302      	str	r3, [sp, #8]
 8004bec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004bee:	2338      	movs	r3, #56	; 0x38
 8004bf0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bf6:	2305      	movs	r3, #5
 8004bf8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bfa:	a905      	add	r1, sp, #20
 8004bfc:	484b      	ldr	r0, [pc, #300]	; (8004d2c <HAL_SPI_MspInit+0x188>)
 8004bfe:	f002 fb61 	bl	80072c4 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8004c02:	484b      	ldr	r0, [pc, #300]	; (8004d30 <HAL_SPI_MspInit+0x18c>)
 8004c04:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <HAL_SPI_MspInit+0x190>)
 8004c06:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004c08:	230a      	movs	r3, #10
 8004c0a:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c10:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c12:	2280      	movs	r2, #128	; 0x80
 8004c14:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c16:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c18:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004c1a:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c1c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004c1e:	f001 fc81 	bl	8006524 <HAL_DMA_Init>
 8004c22:	bb00      	cbnz	r0, 8004c66 <HAL_SPI_MspInit+0xc2>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004c24:	4b42      	ldr	r3, [pc, #264]	; (8004d30 <HAL_SPI_MspInit+0x18c>)
 8004c26:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c28:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8004c2a:	4843      	ldr	r0, [pc, #268]	; (8004d38 <HAL_SPI_MspInit+0x194>)
 8004c2c:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_SPI_MspInit+0x198>)
 8004c2e:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004c30:	230b      	movs	r3, #11
 8004c32:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c34:	2310      	movs	r3, #16
 8004c36:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c3c:	2280      	movs	r2, #128	; 0x80
 8004c3e:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c40:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c42:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004c44:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c46:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004c48:	f001 fc6c 	bl	8006524 <HAL_DMA_Init>
 8004c4c:	b970      	cbnz	r0, 8004c6c <HAL_SPI_MspInit+0xc8>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004c4e:	4b3a      	ldr	r3, [pc, #232]	; (8004d38 <HAL_SPI_MspInit+0x194>)
 8004c50:	6563      	str	r3, [r4, #84]	; 0x54
 8004c52:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004c54:	2200      	movs	r2, #0
 8004c56:	4611      	mov	r1, r2
 8004c58:	2023      	movs	r0, #35	; 0x23
 8004c5a:	f001 fa71 	bl	8006140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004c5e:	2023      	movs	r0, #35	; 0x23
 8004c60:	f001 faa4 	bl	80061ac <HAL_NVIC_EnableIRQ>
 8004c64:	e7ae      	b.n	8004bc4 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8004c66:	f7ff ff4e 	bl	8004b06 <Error_Handler>
 8004c6a:	e7db      	b.n	8004c24 <HAL_SPI_MspInit+0x80>
      Error_Handler();
 8004c6c:	f7ff ff4b 	bl	8004b06 <Error_Handler>
 8004c70:	e7ed      	b.n	8004c4e <HAL_SPI_MspInit+0xaa>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c72:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <HAL_SPI_MspInit+0x184>)
 8004c74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c7e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004c82:	9203      	str	r2, [sp, #12]
 8004c84:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c88:	f042 0204 	orr.w	r2, r2, #4
 8004c8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004c98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004c9c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ca6:	a905      	add	r1, sp, #20
 8004ca8:	4825      	ldr	r0, [pc, #148]	; (8004d40 <HAL_SPI_MspInit+0x19c>)
 8004caa:	f002 fb0b 	bl	80072c4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8004cae:	4825      	ldr	r0, [pc, #148]	; (8004d44 <HAL_SPI_MspInit+0x1a0>)
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_SPI_MspInit+0x1a4>)
 8004cb2:	6003      	str	r3, [r0, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8004cb4:	230e      	movs	r3, #14
 8004cb6:	6043      	str	r3, [r0, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6083      	str	r3, [r0, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cbc:	60c3      	str	r3, [r0, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cbe:	2280      	movs	r2, #128	; 0x80
 8004cc0:	6102      	str	r2, [r0, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cc2:	6143      	str	r3, [r0, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc4:	6183      	str	r3, [r0, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8004cc6:	61c3      	str	r3, [r0, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cc8:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8004cca:	f001 fc2b 	bl	8006524 <HAL_DMA_Init>
 8004cce:	bb00      	cbnz	r0, 8004d12 <HAL_SPI_MspInit+0x16e>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8004cd0:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <HAL_SPI_MspInit+0x1a0>)
 8004cd2:	65a3      	str	r3, [r4, #88]	; 0x58
 8004cd4:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8004cd6:	481d      	ldr	r0, [pc, #116]	; (8004d4c <HAL_SPI_MspInit+0x1a8>)
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <HAL_SPI_MspInit+0x1ac>)
 8004cda:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004cdc:	230f      	movs	r3, #15
 8004cde:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ce8:	2280      	movs	r2, #128	; 0x80
 8004cea:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cec:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cee:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004cf0:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cf2:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004cf4:	f001 fc16 	bl	8006524 <HAL_DMA_Init>
 8004cf8:	b970      	cbnz	r0, 8004d18 <HAL_SPI_MspInit+0x174>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8004cfa:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <HAL_SPI_MspInit+0x1a8>)
 8004cfc:	6563      	str	r3, [r4, #84]	; 0x54
 8004cfe:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	4611      	mov	r1, r2
 8004d04:	2033      	movs	r0, #51	; 0x33
 8004d06:	f001 fa1b 	bl	8006140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004d0a:	2033      	movs	r0, #51	; 0x33
 8004d0c:	f001 fa4e 	bl	80061ac <HAL_NVIC_EnableIRQ>
}
 8004d10:	e758      	b.n	8004bc4 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8004d12:	f7ff fef8 	bl	8004b06 <Error_Handler>
 8004d16:	e7db      	b.n	8004cd0 <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8004d18:	f7ff fef5 	bl	8004b06 <Error_Handler>
 8004d1c:	e7ed      	b.n	8004cfa <HAL_SPI_MspInit+0x156>
 8004d1e:	bf00      	nop
 8004d20:	40013000 	.word	0x40013000
 8004d24:	40003c00 	.word	0x40003c00
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	48000400 	.word	0x48000400
 8004d30:	200019a4 	.word	0x200019a4
 8004d34:	40020030 	.word	0x40020030
 8004d38:	20001a04 	.word	0x20001a04
 8004d3c:	40020044 	.word	0x40020044
 8004d40:	48000800 	.word	0x48000800
 8004d44:	20001a64 	.word	0x20001a64
 8004d48:	40020408 	.word	0x40020408
 8004d4c:	20001ac4 	.word	0x20001ac4
 8004d50:	4002041c 	.word	0x4002041c

08004d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d54:	b500      	push	{lr}
 8004d56:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_MspInit+0x34>)
 8004d5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	661a      	str	r2, [r3, #96]	; 0x60
 8004d62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d64:	f002 0201 	and.w	r2, r2, #1
 8004d68:	9200      	str	r2, [sp, #0]
 8004d6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d72:	659a      	str	r2, [r3, #88]	; 0x58
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004d7e:	f002 fc1d 	bl	80075bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d82:	b003      	add	sp, #12
 8004d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d88:	40021000 	.word	0x40021000

08004d8c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d8c:	e7fe      	b.n	8004d8c <NMI_Handler>
	...

08004d90 <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  TIM1->CCR1 = 0;
 8004d90:	4a02      	ldr	r2, [pc, #8]	; (8004d9c <HardFault_Handler+0xc>)
 8004d92:	2300      	movs	r3, #0
 8004d94:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1->CCR2 = 0;
 8004d96:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM1->CCR3 = 0;
 8004d98:	63d3      	str	r3, [r2, #60]	; 0x3c
  while (1)
 8004d9a:	e7fb      	b.n	8004d94 <HardFault_Handler+0x4>
 8004d9c:	40012c00 	.word	0x40012c00

08004da0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004da0:	e7fe      	b.n	8004da0 <MemManage_Handler>

08004da2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004da2:	e7fe      	b.n	8004da2 <BusFault_Handler>

08004da4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004da4:	e7fe      	b.n	8004da4 <UsageFault_Handler>

08004da6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004da6:	4770      	bx	lr

08004da8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004da8:	4770      	bx	lr

08004daa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004daa:	4770      	bx	lr

08004dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dae:	f000 fb1b 	bl	80053e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004db2:	bd08      	pop	{r3, pc}

08004db4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004db4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004db6:	4802      	ldr	r0, [pc, #8]	; (8004dc0 <DMA1_Channel1_IRQHandler+0xc>)
 8004db8:	f001 fce9 	bl	800678e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004dbc:	bd08      	pop	{r3, pc}
 8004dbe:	bf00      	nop
 8004dc0:	2000180c 	.word	0x2000180c

08004dc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004dc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004dc6:	4802      	ldr	r0, [pc, #8]	; (8004dd0 <DMA1_Channel2_IRQHandler+0xc>)
 8004dc8:	f001 fce1 	bl	800678e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004dcc:	bd08      	pop	{r3, pc}
 8004dce:	bf00      	nop
 8004dd0:	2000186c 	.word	0x2000186c

08004dd4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004dd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004dd6:	4802      	ldr	r0, [pc, #8]	; (8004de0 <DMA1_Channel3_IRQHandler+0xc>)
 8004dd8:	f001 fcd9 	bl	800678e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004ddc:	bd08      	pop	{r3, pc}
 8004dde:	bf00      	nop
 8004de0:	200019a4 	.word	0x200019a4

08004de4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004de6:	4802      	ldr	r0, [pc, #8]	; (8004df0 <DMA1_Channel4_IRQHandler+0xc>)
 8004de8:	f001 fcd1 	bl	800678e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004dec:	bd08      	pop	{r3, pc}
 8004dee:	bf00      	nop
 8004df0:	20001a04 	.word	0x20001a04

08004df4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004df6:	4803      	ldr	r0, [pc, #12]	; (8004e04 <ADC1_2_IRQHandler+0x10>)
 8004df8:	f000 fc3a 	bl	8005670 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004dfc:	4802      	ldr	r0, [pc, #8]	; (8004e08 <ADC1_2_IRQHandler+0x14>)
 8004dfe:	f000 fc37 	bl	8005670 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e02:	bd08      	pop	{r3, pc}
 8004e04:	20001734 	.word	0x20001734
 8004e08:	200017a0 	.word	0x200017a0

08004e0c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004e0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004e0e:	4802      	ldr	r0, [pc, #8]	; (8004e18 <FDCAN1_IT0_IRQHandler+0xc>)
 8004e10:	f001 ffb5 	bl	8006d7e <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004e14:	bd08      	pop	{r3, pc}
 8004e16:	bf00      	nop
 8004e18:	20001908 	.word	0x20001908

08004e1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e1e:	4802      	ldr	r0, [pc, #8]	; (8004e28 <TIM3_IRQHandler+0xc>)
 8004e20:	f003 ff11 	bl	8008c46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e24:	bd08      	pop	{r3, pc}
 8004e26:	bf00      	nop
 8004e28:	20001c3c 	.word	0x20001c3c

08004e2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004e2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004e2e:	4802      	ldr	r0, [pc, #8]	; (8004e38 <SPI1_IRQHandler+0xc>)
 8004e30:	f003 fcc2 	bl	80087b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004e34:	bd08      	pop	{r3, pc}
 8004e36:	bf00      	nop
 8004e38:	20001b24 	.word	0x20001b24

08004e3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004e3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e3e:	4802      	ldr	r0, [pc, #8]	; (8004e48 <USART1_IRQHandler+0xc>)
 8004e40:	f004 fe84 	bl	8009b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e44:	bd08      	pop	{r3, pc}
 8004e46:	bf00      	nop
 8004e48:	20001ce8 	.word	0x20001ce8

08004e4c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004e4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004e4e:	4802      	ldr	r0, [pc, #8]	; (8004e58 <SPI3_IRQHandler+0xc>)
 8004e50:	f003 fcb2 	bl	80087b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004e54:	bd08      	pop	{r3, pc}
 8004e56:	bf00      	nop
 8004e58:	20001b88 	.word	0x20001b88

08004e5c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8004e5e:	4802      	ldr	r0, [pc, #8]	; (8004e68 <DMA2_Channel1_IRQHandler+0xc>)
 8004e60:	f001 fc95 	bl	800678e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004e64:	bd08      	pop	{r3, pc}
 8004e66:	bf00      	nop
 8004e68:	20001a64 	.word	0x20001a64

08004e6c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8004e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8004e6e:	4802      	ldr	r0, [pc, #8]	; (8004e78 <DMA2_Channel2_IRQHandler+0xc>)
 8004e70:	f001 fc8d 	bl	800678e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004e74:	bd08      	pop	{r3, pc}
 8004e76:	bf00      	nop
 8004e78:	20001ac4 	.word	0x20001ac4

08004e7c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8004e7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004e7e:	4802      	ldr	r0, [pc, #8]	; (8004e88 <DMA2_Channel3_IRQHandler+0xc>)
 8004e80:	f001 fc85 	bl	800678e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8004e84:	bd08      	pop	{r3, pc}
 8004e86:	bf00      	nop
 8004e88:	20001c88 	.word	0x20001c88

08004e8c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	4770      	bx	lr

08004e90 <_kill>:

int _kill(int pid, int sig)
{
 8004e90:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e92:	f006 f999 	bl	800b1c8 <__errno>
 8004e96:	2316      	movs	r3, #22
 8004e98:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9e:	bd08      	pop	{r3, pc}

08004ea0 <_exit>:

void _exit (int status)
{
 8004ea0:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004ea2:	f006 f991 	bl	800b1c8 <__errno>
 8004ea6:	2316      	movs	r3, #22
 8004ea8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004eaa:	e7fe      	b.n	8004eaa <_exit+0xa>

08004eac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004eac:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eae:	1e16      	subs	r6, r2, #0
 8004eb0:	dd07      	ble.n	8004ec2 <_read+0x16>
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8004eb6:	f3af 8000 	nop.w
 8004eba:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ebe:	42a5      	cmp	r5, r4
 8004ec0:	d1f9      	bne.n	8004eb6 <_read+0xa>
  }

  return len;
}
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}

08004ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ec6:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ec8:	1e16      	subs	r6, r2, #0
 8004eca:	dd07      	ble.n	8004edc <_write+0x16>
 8004ecc:	460c      	mov	r4, r1
 8004ece:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8004ed0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed8:	42a5      	cmp	r5, r4
 8004eda:	d1f9      	bne.n	8004ed0 <_write+0xa>
  }
  return len;
}
 8004edc:	4630      	mov	r0, r6
 8004ede:	bd70      	pop	{r4, r5, r6, pc}

08004ee0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	4770      	bx	lr

08004ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eea:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004eec:	2000      	movs	r0, #0
 8004eee:	4770      	bx	lr

08004ef0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	4770      	bx	lr

08004ef4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	4770      	bx	lr

08004ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ef8:	b508      	push	{r3, lr}
 8004efa:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004efc:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <_sbrk+0x38>)
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	b152      	cbz	r2, 8004f18 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f02:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <_sbrk+0x38>)
 8004f04:	6810      	ldr	r0, [r2, #0]
 8004f06:	4403      	add	r3, r0
 8004f08:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <_sbrk+0x3c>)
 8004f0a:	490b      	ldr	r1, [pc, #44]	; (8004f38 <_sbrk+0x40>)
 8004f0c:	1a52      	subs	r2, r2, r1
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d806      	bhi.n	8004f20 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004f12:	4a07      	ldr	r2, [pc, #28]	; (8004f30 <_sbrk+0x38>)
 8004f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004f16:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8004f18:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <_sbrk+0x38>)
 8004f1a:	4908      	ldr	r1, [pc, #32]	; (8004f3c <_sbrk+0x44>)
 8004f1c:	6011      	str	r1, [r2, #0]
 8004f1e:	e7f0      	b.n	8004f02 <_sbrk+0xa>
    errno = ENOMEM;
 8004f20:	f006 f952 	bl	800b1c8 <__errno>
 8004f24:	230c      	movs	r3, #12
 8004f26:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e7f3      	b.n	8004f16 <_sbrk+0x1e>
 8004f2e:	bf00      	nop
 8004f30:	20001bec 	.word	0x20001bec
 8004f34:	20008000 	.word	0x20008000
 8004f38:	00000400 	.word	0x00000400
 8004f3c:	20001ec8 	.word	0x20001ec8

08004f40 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004f40:	4a03      	ldr	r2, [pc, #12]	; (8004f50 <SystemInit+0x10>)
 8004f42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004f46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f4e:	4770      	bx	lr
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004f54:	b500      	push	{lr}
 8004f56:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9304      	str	r3, [sp, #16]
 8004f5c:	9305      	str	r3, [sp, #20]
 8004f5e:	9306      	str	r3, [sp, #24]
 8004f60:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	9302      	str	r3, [sp, #8]
 8004f66:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f68:	4815      	ldr	r0, [pc, #84]	; (8004fc0 <MX_TIM3_Init+0x6c>)
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <MX_TIM3_Init+0x70>)
 8004f6c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 3;
 8004f6e:	2203      	movs	r2, #3
 8004f70:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f72:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 3999;
 8004f74:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004f78:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f7a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f80:	f004 f80a 	bl	8008f98 <HAL_TIM_Base_Init>
 8004f84:	b990      	cbnz	r0, 8004fac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f8a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f8c:	a904      	add	r1, sp, #16
 8004f8e:	480c      	ldr	r0, [pc, #48]	; (8004fc0 <MX_TIM3_Init+0x6c>)
 8004f90:	f004 f956 	bl	8009240 <HAL_TIM_ConfigClockSource>
 8004f94:	b968      	cbnz	r0, 8004fb2 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f96:	2300      	movs	r3, #0
 8004f98:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f9a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f9c:	a901      	add	r1, sp, #4
 8004f9e:	4808      	ldr	r0, [pc, #32]	; (8004fc0 <MX_TIM3_Init+0x6c>)
 8004fa0:	f004 fc1a 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 8004fa4:	b940      	cbnz	r0, 8004fb8 <MX_TIM3_Init+0x64>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004fa6:	b009      	add	sp, #36	; 0x24
 8004fa8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004fac:	f7ff fdab 	bl	8004b06 <Error_Handler>
 8004fb0:	e7e9      	b.n	8004f86 <MX_TIM3_Init+0x32>
    Error_Handler();
 8004fb2:	f7ff fda8 	bl	8004b06 <Error_Handler>
 8004fb6:	e7ee      	b.n	8004f96 <MX_TIM3_Init+0x42>
    Error_Handler();
 8004fb8:	f7ff fda5 	bl	8004b06 <Error_Handler>
}
 8004fbc:	e7f3      	b.n	8004fa6 <MX_TIM3_Init+0x52>
 8004fbe:	bf00      	nop
 8004fc0:	20001c3c 	.word	0x20001c3c
 8004fc4:	40000400 	.word	0x40000400

08004fc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fc8:	b500      	push	{lr}
 8004fca:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 8004fcc:	6803      	ldr	r3, [r0, #0]
 8004fce:	4a13      	ldr	r2, [pc, #76]	; (800501c <HAL_TIM_Base_MspInit+0x54>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d005      	beq.n	8004fe0 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8004fd4:	4a12      	ldr	r2, [pc, #72]	; (8005020 <HAL_TIM_Base_MspInit+0x58>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00d      	beq.n	8004ff6 <HAL_TIM_Base_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004fda:	b003      	add	sp, #12
 8004fdc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fe0:	4b10      	ldr	r3, [pc, #64]	; (8005024 <HAL_TIM_Base_MspInit+0x5c>)
 8004fe2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe8:	661a      	str	r2, [r3, #96]	; 0x60
 8004fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	9b00      	ldr	r3, [sp, #0]
 8004ff4:	e7f1      	b.n	8004fda <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_TIM_Base_MspInit+0x5c>)
 8004ff8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ffa:	f042 0202 	orr.w	r2, r2, #2
 8004ffe:	659a      	str	r2, [r3, #88]	; 0x58
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800500a:	2200      	movs	r2, #0
 800500c:	4611      	mov	r1, r2
 800500e:	201d      	movs	r0, #29
 8005010:	f001 f896 	bl	8006140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005014:	201d      	movs	r0, #29
 8005016:	f001 f8c9 	bl	80061ac <HAL_NVIC_EnableIRQ>
}
 800501a:	e7de      	b.n	8004fda <HAL_TIM_Base_MspInit+0x12>
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40021000 	.word	0x40021000

08005028 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502c:	2300      	movs	r3, #0
 800502e:	9303      	str	r3, [sp, #12]
 8005030:	9304      	str	r3, [sp, #16]
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	9306      	str	r3, [sp, #24]
 8005036:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8005038:	6802      	ldr	r2, [r0, #0]
 800503a:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <HAL_TIM_MspPostInit+0x8c>)
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005040:	b008      	add	sp, #32
 8005042:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005044:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8005048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800504a:	f042 0204 	orr.w	r2, r2, #4
 800504e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005052:	f002 0204 	and.w	r2, r2, #4
 8005056:	9201      	str	r2, [sp, #4]
 8005058:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800505a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800505c:	f042 0202 	orr.w	r2, r2, #2
 8005060:	64da      	str	r2, [r3, #76]	; 0x4c
 8005062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	9302      	str	r3, [sp, #8]
 800506a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800506c:	2307      	movs	r3, #7
 800506e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005070:	2502      	movs	r5, #2
 8005072:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005074:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005076:	a903      	add	r1, sp, #12
 8005078:	480f      	ldr	r0, [pc, #60]	; (80050b8 <HAL_TIM_MspPostInit+0x90>)
 800507a:	f002 f923 	bl	80072c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800507e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005082:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005084:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	2400      	movs	r4, #0
 8005088:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800508a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800508c:	2306      	movs	r3, #6
 800508e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005090:	4e0a      	ldr	r6, [pc, #40]	; (80050bc <HAL_TIM_MspPostInit+0x94>)
 8005092:	a903      	add	r1, sp, #12
 8005094:	4630      	mov	r0, r6
 8005096:	f002 f915 	bl	80072c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80050a6:	2304      	movs	r3, #4
 80050a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050aa:	a903      	add	r1, sp, #12
 80050ac:	4630      	mov	r0, r6
 80050ae:	f002 f909 	bl	80072c4 <HAL_GPIO_Init>
}
 80050b2:	e7c5      	b.n	8005040 <HAL_TIM_MspPostInit+0x18>
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	48000800 	.word	0x48000800
 80050bc:	48000400 	.word	0x48000400

080050c0 <MX_TIM1_Init>:
{
 80050c0:	b510      	push	{r4, lr}
 80050c2:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050c4:	2400      	movs	r4, #0
 80050c6:	9418      	str	r4, [sp, #96]	; 0x60
 80050c8:	9419      	str	r4, [sp, #100]	; 0x64
 80050ca:	941a      	str	r4, [sp, #104]	; 0x68
 80050cc:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050ce:	9415      	str	r4, [sp, #84]	; 0x54
 80050d0:	9416      	str	r4, [sp, #88]	; 0x58
 80050d2:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050d4:	940e      	str	r4, [sp, #56]	; 0x38
 80050d6:	940f      	str	r4, [sp, #60]	; 0x3c
 80050d8:	9410      	str	r4, [sp, #64]	; 0x40
 80050da:	9411      	str	r4, [sp, #68]	; 0x44
 80050dc:	9412      	str	r4, [sp, #72]	; 0x48
 80050de:	9413      	str	r4, [sp, #76]	; 0x4c
 80050e0:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80050e2:	2234      	movs	r2, #52	; 0x34
 80050e4:	4621      	mov	r1, r4
 80050e6:	a801      	add	r0, sp, #4
 80050e8:	f006 f81c 	bl	800b124 <memset>
  htim1.Instance = TIM1;
 80050ec:	483d      	ldr	r0, [pc, #244]	; (80051e4 <MX_TIM1_Init+0x124>)
 80050ee:	4b3e      	ldr	r3, [pc, #248]	; (80051e8 <MX_TIM1_Init+0x128>)
 80050f0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80050f2:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80050f4:	2320      	movs	r3, #32
 80050f6:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1499;
 80050f8:	f240 53db 	movw	r3, #1499	; 0x5db
 80050fc:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050fe:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005100:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005106:	f003 ff47 	bl	8008f98 <HAL_TIM_Base_Init>
 800510a:	2800      	cmp	r0, #0
 800510c:	d151      	bne.n	80051b2 <MX_TIM1_Init+0xf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800510e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005112:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005114:	a918      	add	r1, sp, #96	; 0x60
 8005116:	4833      	ldr	r0, [pc, #204]	; (80051e4 <MX_TIM1_Init+0x124>)
 8005118:	f004 f892 	bl	8009240 <HAL_TIM_ConfigClockSource>
 800511c:	2800      	cmp	r0, #0
 800511e:	d14b      	bne.n	80051b8 <MX_TIM1_Init+0xf8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005120:	4830      	ldr	r0, [pc, #192]	; (80051e4 <MX_TIM1_Init+0x124>)
 8005122:	f003 ff69 	bl	8008ff8 <HAL_TIM_PWM_Init>
 8005126:	2800      	cmp	r0, #0
 8005128:	d149      	bne.n	80051be <MX_TIM1_Init+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800512a:	2300      	movs	r3, #0
 800512c:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800512e:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005130:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005132:	a915      	add	r1, sp, #84	; 0x54
 8005134:	482b      	ldr	r0, [pc, #172]	; (80051e4 <MX_TIM1_Init+0x124>)
 8005136:	f004 fb4f 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 800513a:	2800      	cmp	r0, #0
 800513c:	d142      	bne.n	80051c4 <MX_TIM1_Init+0x104>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800513e:	2360      	movs	r3, #96	; 0x60
 8005140:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005142:	2200      	movs	r2, #0
 8005144:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005146:	2302      	movs	r3, #2
 8005148:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800514a:	2308      	movs	r3, #8
 800514c:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800514e:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005150:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005152:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005154:	a90e      	add	r1, sp, #56	; 0x38
 8005156:	4823      	ldr	r0, [pc, #140]	; (80051e4 <MX_TIM1_Init+0x124>)
 8005158:	f003 ffc8 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 800515c:	2800      	cmp	r0, #0
 800515e:	d134      	bne.n	80051ca <MX_TIM1_Init+0x10a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005160:	2204      	movs	r2, #4
 8005162:	a90e      	add	r1, sp, #56	; 0x38
 8005164:	481f      	ldr	r0, [pc, #124]	; (80051e4 <MX_TIM1_Init+0x124>)
 8005166:	f003 ffc1 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 800516a:	2800      	cmp	r0, #0
 800516c:	d130      	bne.n	80051d0 <MX_TIM1_Init+0x110>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800516e:	2208      	movs	r2, #8
 8005170:	a90e      	add	r1, sp, #56	; 0x38
 8005172:	481c      	ldr	r0, [pc, #112]	; (80051e4 <MX_TIM1_Init+0x124>)
 8005174:	f003 ffba 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 8005178:	bb68      	cbnz	r0, 80051d6 <MX_TIM1_Init+0x116>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800517a:	2300      	movs	r3, #0
 800517c:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800517e:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005180:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005182:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005184:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800518a:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800518c:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800518e:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005190:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005196:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005198:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800519a:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800519c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800519e:	a901      	add	r1, sp, #4
 80051a0:	4810      	ldr	r0, [pc, #64]	; (80051e4 <MX_TIM1_Init+0x124>)
 80051a2:	f004 fb63 	bl	800986c <HAL_TIMEx_ConfigBreakDeadTime>
 80051a6:	b9c8      	cbnz	r0, 80051dc <MX_TIM1_Init+0x11c>
  HAL_TIM_MspPostInit(&htim1);
 80051a8:	480e      	ldr	r0, [pc, #56]	; (80051e4 <MX_TIM1_Init+0x124>)
 80051aa:	f7ff ff3d 	bl	8005028 <HAL_TIM_MspPostInit>
}
 80051ae:	b01c      	add	sp, #112	; 0x70
 80051b0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80051b2:	f7ff fca8 	bl	8004b06 <Error_Handler>
 80051b6:	e7aa      	b.n	800510e <MX_TIM1_Init+0x4e>
    Error_Handler();
 80051b8:	f7ff fca5 	bl	8004b06 <Error_Handler>
 80051bc:	e7b0      	b.n	8005120 <MX_TIM1_Init+0x60>
    Error_Handler();
 80051be:	f7ff fca2 	bl	8004b06 <Error_Handler>
 80051c2:	e7b2      	b.n	800512a <MX_TIM1_Init+0x6a>
    Error_Handler();
 80051c4:	f7ff fc9f 	bl	8004b06 <Error_Handler>
 80051c8:	e7b9      	b.n	800513e <MX_TIM1_Init+0x7e>
    Error_Handler();
 80051ca:	f7ff fc9c 	bl	8004b06 <Error_Handler>
 80051ce:	e7c7      	b.n	8005160 <MX_TIM1_Init+0xa0>
    Error_Handler();
 80051d0:	f7ff fc99 	bl	8004b06 <Error_Handler>
 80051d4:	e7cb      	b.n	800516e <MX_TIM1_Init+0xae>
    Error_Handler();
 80051d6:	f7ff fc96 	bl	8004b06 <Error_Handler>
 80051da:	e7ce      	b.n	800517a <MX_TIM1_Init+0xba>
    Error_Handler();
 80051dc:	f7ff fc93 	bl	8004b06 <Error_Handler>
 80051e0:	e7e2      	b.n	80051a8 <MX_TIM1_Init+0xe8>
 80051e2:	bf00      	nop
 80051e4:	20001bf0 	.word	0x20001bf0
 80051e8:	40012c00 	.word	0x40012c00

080051ec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80051ec:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80051ee:	4817      	ldr	r0, [pc, #92]	; (800524c <MX_USART1_UART_Init+0x60>)
 80051f0:	4b17      	ldr	r3, [pc, #92]	; (8005250 <MX_USART1_UART_Init+0x64>)
 80051f2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 80051f4:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80051f8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051fa:	2300      	movs	r3, #0
 80051fc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80051fe:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005200:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005202:	220c      	movs	r2, #12
 8005204:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005206:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005208:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800520a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800520c:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800520e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005210:	f005 f90e 	bl	800a430 <HAL_UART_Init>
 8005214:	b970      	cbnz	r0, 8005234 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005216:	2100      	movs	r1, #0
 8005218:	480c      	ldr	r0, [pc, #48]	; (800524c <MX_USART1_UART_Init+0x60>)
 800521a:	f005 f985 	bl	800a528 <HAL_UARTEx_SetTxFifoThreshold>
 800521e:	b960      	cbnz	r0, 800523a <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005220:	2100      	movs	r1, #0
 8005222:	480a      	ldr	r0, [pc, #40]	; (800524c <MX_USART1_UART_Init+0x60>)
 8005224:	f005 f9a5 	bl	800a572 <HAL_UARTEx_SetRxFifoThreshold>
 8005228:	b950      	cbnz	r0, 8005240 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800522a:	4808      	ldr	r0, [pc, #32]	; (800524c <MX_USART1_UART_Init+0x60>)
 800522c:	f005 f95d 	bl	800a4ea <HAL_UARTEx_DisableFifoMode>
 8005230:	b948      	cbnz	r0, 8005246 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005232:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005234:	f7ff fc67 	bl	8004b06 <Error_Handler>
 8005238:	e7ed      	b.n	8005216 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 800523a:	f7ff fc64 	bl	8004b06 <Error_Handler>
 800523e:	e7ef      	b.n	8005220 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8005240:	f7ff fc61 	bl	8004b06 <Error_Handler>
 8005244:	e7f1      	b.n	800522a <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8005246:	f7ff fc5e 	bl	8004b06 <Error_Handler>
}
 800524a:	e7f2      	b.n	8005232 <MX_USART1_UART_Init+0x46>
 800524c:	20001ce8 	.word	0x20001ce8
 8005250:	40013800 	.word	0x40013800

08005254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005254:	b530      	push	{r4, r5, lr}
 8005256:	b099      	sub	sp, #100	; 0x64
 8005258:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525a:	2100      	movs	r1, #0
 800525c:	9113      	str	r1, [sp, #76]	; 0x4c
 800525e:	9114      	str	r1, [sp, #80]	; 0x50
 8005260:	9115      	str	r1, [sp, #84]	; 0x54
 8005262:	9116      	str	r1, [sp, #88]	; 0x58
 8005264:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005266:	2244      	movs	r2, #68	; 0x44
 8005268:	a802      	add	r0, sp, #8
 800526a:	f005 ff5b 	bl	800b124 <memset>
  if(uartHandle->Instance==USART1)
 800526e:	6822      	ldr	r2, [r4, #0]
 8005270:	4b27      	ldr	r3, [pc, #156]	; (8005310 <HAL_UART_MspInit+0xbc>)
 8005272:	429a      	cmp	r2, r3
 8005274:	d001      	beq.n	800527a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005276:	b019      	add	sp, #100	; 0x64
 8005278:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800527a:	2301      	movs	r3, #1
 800527c:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800527e:	a802      	add	r0, sp, #8
 8005280:	f002 fdc4 	bl	8007e0c <HAL_RCCEx_PeriphCLKConfig>
 8005284:	2800      	cmp	r0, #0
 8005286:	d13c      	bne.n	8005302 <HAL_UART_MspInit+0xae>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005288:	4b22      	ldr	r3, [pc, #136]	; (8005314 <HAL_UART_MspInit+0xc0>)
 800528a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800528c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005290:	661a      	str	r2, [r3, #96]	; 0x60
 8005292:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005294:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005298:	9200      	str	r2, [sp, #0]
 800529a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800529c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800529e:	f042 0204 	orr.w	r2, r2, #4
 80052a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80052ae:	2330      	movs	r3, #48	; 0x30
 80052b0:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b2:	2302      	movs	r3, #2
 80052b4:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b6:	2500      	movs	r5, #0
 80052b8:	9515      	str	r5, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ba:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052bc:	2307      	movs	r3, #7
 80052be:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052c0:	a913      	add	r1, sp, #76	; 0x4c
 80052c2:	4815      	ldr	r0, [pc, #84]	; (8005318 <HAL_UART_MspInit+0xc4>)
 80052c4:	f001 fffe 	bl	80072c4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel3;
 80052c8:	4814      	ldr	r0, [pc, #80]	; (800531c <HAL_UART_MspInit+0xc8>)
 80052ca:	4b15      	ldr	r3, [pc, #84]	; (8005320 <HAL_UART_MspInit+0xcc>)
 80052cc:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80052ce:	2319      	movs	r3, #25
 80052d0:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052d2:	2310      	movs	r3, #16
 80052d4:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052d6:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052dc:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052de:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80052e0:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80052e2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80052e4:	f001 f91e 	bl	8006524 <HAL_DMA_Init>
 80052e8:	b970      	cbnz	r0, 8005308 <HAL_UART_MspInit+0xb4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80052ea:	4b0c      	ldr	r3, [pc, #48]	; (800531c <HAL_UART_MspInit+0xc8>)
 80052ec:	67a3      	str	r3, [r4, #120]	; 0x78
 80052ee:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80052f0:	2200      	movs	r2, #0
 80052f2:	4611      	mov	r1, r2
 80052f4:	2025      	movs	r0, #37	; 0x25
 80052f6:	f000 ff23 	bl	8006140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80052fa:	2025      	movs	r0, #37	; 0x25
 80052fc:	f000 ff56 	bl	80061ac <HAL_NVIC_EnableIRQ>
}
 8005300:	e7b9      	b.n	8005276 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8005302:	f7ff fc00 	bl	8004b06 <Error_Handler>
 8005306:	e7bf      	b.n	8005288 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8005308:	f7ff fbfd 	bl	8004b06 <Error_Handler>
 800530c:	e7ed      	b.n	80052ea <HAL_UART_MspInit+0x96>
 800530e:	bf00      	nop
 8005310:	40013800 	.word	0x40013800
 8005314:	40021000 	.word	0x40021000
 8005318:	48000800 	.word	0x48000800
 800531c:	20001c88 	.word	0x20001c88
 8005320:	40020430 	.word	0x40020430

08005324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005324:	480d      	ldr	r0, [pc, #52]	; (800535c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005326:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005328:	480d      	ldr	r0, [pc, #52]	; (8005360 <LoopForever+0x6>)
  ldr r1, =_edata
 800532a:	490e      	ldr	r1, [pc, #56]	; (8005364 <LoopForever+0xa>)
  ldr r2, =_sidata
 800532c:	4a0e      	ldr	r2, [pc, #56]	; (8005368 <LoopForever+0xe>)
  movs r3, #0
 800532e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005330:	e002      	b.n	8005338 <LoopCopyDataInit>

08005332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005336:	3304      	adds	r3, #4

08005338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800533a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800533c:	d3f9      	bcc.n	8005332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800533e:	4a0b      	ldr	r2, [pc, #44]	; (800536c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005340:	4c0b      	ldr	r4, [pc, #44]	; (8005370 <LoopForever+0x16>)
  movs r3, #0
 8005342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005344:	e001      	b.n	800534a <LoopFillZerobss>

08005346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005348:	3204      	adds	r2, #4

0800534a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800534a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800534c:	d3fb      	bcc.n	8005346 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800534e:	f7ff fdf7 	bl	8004f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005352:	f005 ff3f 	bl	800b1d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005356:	f7ff fbb4 	bl	8004ac2 <main>

0800535a <LoopForever>:

LoopForever:
    b LoopForever
 800535a:	e7fe      	b.n	800535a <LoopForever>
  ldr   r0, =_estack
 800535c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005364:	20000768 	.word	0x20000768
  ldr r2, =_sidata
 8005368:	0800ec18 	.word	0x0800ec18
  ldr r2, =_sbss
 800536c:	20000768 	.word	0x20000768
  ldr r4, =_ebss
 8005370:	20001ec8 	.word	0x20001ec8

08005374 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005374:	e7fe      	b.n	8005374 <COMP1_2_3_IRQHandler>
	...

08005378 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <HAL_InitTick+0x44>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	b90b      	cbnz	r3, 8005382 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800537e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005380:	4770      	bx	lr
{
 8005382:	b510      	push	{r4, lr}
 8005384:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800538a:	fbb0 f3f3 	udiv	r3, r0, r3
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <HAL_InitTick+0x48>)
 8005390:	6810      	ldr	r0, [r2, #0]
 8005392:	fbb0 f0f3 	udiv	r0, r0, r3
 8005396:	f000 ff17 	bl	80061c8 <HAL_SYSTICK_Config>
 800539a:	b968      	cbnz	r0, 80053b8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800539c:	2c0f      	cmp	r4, #15
 800539e:	d901      	bls.n	80053a4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80053a0:	2001      	movs	r0, #1
 80053a2:	e00a      	b.n	80053ba <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053a4:	2200      	movs	r2, #0
 80053a6:	4621      	mov	r1, r4
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	f000 fec8 	bl	8006140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053b0:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <HAL_InitTick+0x4c>)
 80053b2:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80053b4:	2000      	movs	r0, #0
 80053b6:	e000      	b.n	80053ba <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80053b8:	2001      	movs	r0, #1
}
 80053ba:	bd10      	pop	{r4, pc}
 80053bc:	20000564 	.word	0x20000564
 80053c0:	20000560 	.word	0x20000560
 80053c4:	20000568 	.word	0x20000568

080053c8 <HAL_Init>:
{
 80053c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053ca:	2003      	movs	r0, #3
 80053cc:	f000 fea6 	bl	800611c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053d0:	200f      	movs	r0, #15
 80053d2:	f7ff ffd1 	bl	8005378 <HAL_InitTick>
 80053d6:	b110      	cbz	r0, 80053de <HAL_Init+0x16>
    status = HAL_ERROR;
 80053d8:	2401      	movs	r4, #1
}
 80053da:	4620      	mov	r0, r4
 80053dc:	bd10      	pop	{r4, pc}
 80053de:	4604      	mov	r4, r0
    HAL_MspInit();
 80053e0:	f7ff fcb8 	bl	8004d54 <HAL_MspInit>
 80053e4:	e7f9      	b.n	80053da <HAL_Init+0x12>
	...

080053e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80053e8:	4a03      	ldr	r2, [pc, #12]	; (80053f8 <HAL_IncTick+0x10>)
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	4903      	ldr	r1, [pc, #12]	; (80053fc <HAL_IncTick+0x14>)
 80053ee:	6809      	ldr	r1, [r1, #0]
 80053f0:	440b      	add	r3, r1
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20001d78 	.word	0x20001d78
 80053fc:	20000564 	.word	0x20000564

08005400 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005400:	4b01      	ldr	r3, [pc, #4]	; (8005408 <HAL_GetTick+0x8>)
 8005402:	6818      	ldr	r0, [r3, #0]
}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20001d78 	.word	0x20001d78

0800540c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005410:	f7ff fff6 	bl	8005400 <HAL_GetTick>
 8005414:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005416:	f1b4 3fff 	cmp.w	r4, #4294967295
 800541a:	d002      	beq.n	8005422 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800541c:	4b04      	ldr	r3, [pc, #16]	; (8005430 <HAL_Delay+0x24>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005422:	f7ff ffed 	bl	8005400 <HAL_GetTick>
 8005426:	1b40      	subs	r0, r0, r5
 8005428:	42a0      	cmp	r0, r4
 800542a:	d3fa      	bcc.n	8005422 <HAL_Delay+0x16>
  {
  }
}
 800542c:	bd38      	pop	{r3, r4, r5, pc}
 800542e:	bf00      	nop
 8005430:	20000564 	.word	0x20000564

08005434 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005434:	b530      	push	{r4, r5, lr}
 8005436:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005438:	2300      	movs	r3, #0
 800543a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800543c:	2800      	cmp	r0, #0
 800543e:	f000 8104 	beq.w	800564a <HAL_ADC_Init+0x216>
 8005442:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005444:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80c0 	beq.w	80055cc <HAL_ADC_Init+0x198>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800544c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8005454:	d005      	beq.n	8005462 <HAL_ADC_Init+0x2e>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 800545c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005460:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005462:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005464:	6893      	ldr	r3, [r2, #8]
 8005466:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800546a:	d119      	bne.n	80054a0 <HAL_ADC_Init+0x6c>
  MODIFY_REG(ADCx->CR,
 800546c:	6893      	ldr	r3, [r2, #8]
 800546e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005472:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547a:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800547c:	4b74      	ldr	r3, [pc, #464]	; (8005650 <HAL_ADC_Init+0x21c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	099b      	lsrs	r3, r3, #6
 8005482:	4a74      	ldr	r2, [pc, #464]	; (8005654 <HAL_ADC_Init+0x220>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	099b      	lsrs	r3, r3, #6
 800548a:	3301      	adds	r3, #1
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005490:	9b01      	ldr	r3, [sp, #4]
 8005492:	b12b      	cbz	r3, 80054a0 <HAL_ADC_Init+0x6c>
    {
      wait_loop_index--;
 8005494:	9b01      	ldr	r3, [sp, #4]
 8005496:	3b01      	subs	r3, #1
 8005498:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800549a:	9b01      	ldr	r3, [sp, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f9      	bne.n	8005494 <HAL_ADC_Init+0x60>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054a0:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054a2:	688b      	ldr	r3, [r1, #8]
 80054a4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80054a8:	f040 8097 	bne.w	80055da <HAL_ADC_Init+0x1a6>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054ae:	f043 0310 	orr.w	r3, r3, #16
 80054b2:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80054bc:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054be:	688a      	ldr	r2, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	f002 0204 	and.w	r2, r2, #4
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f040 80b6 	bne.w	800563c <HAL_ADC_Init+0x208>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054d2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80054d6:	f043 0302 	orr.w	r3, r3, #2
 80054da:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054dc:	688b      	ldr	r3, [r1, #8]
 80054de:	f013 0f01 	tst.w	r3, #1
 80054e2:	d110      	bne.n	8005506 <HAL_ADC_Init+0xd2>
 80054e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80054ee:	689b      	ldr	r3, [r3, #8]
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f013 0f01 	tst.w	r3, #1
 80054f6:	d106      	bne.n	8005506 <HAL_ADC_Init+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80054f8:	4a57      	ldr	r2, [pc, #348]	; (8005658 <HAL_ADC_Init+0x224>)
 80054fa:	6893      	ldr	r3, [r2, #8]
 80054fc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005500:	6861      	ldr	r1, [r4, #4]
 8005502:	430b      	orrs	r3, r1
 8005504:	6093      	str	r3, [r2, #8]
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005506:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800550a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800550c:	68e1      	ldr	r1, [r4, #12]
 800550e:	430b      	orrs	r3, r1
 8005510:	68a1      	ldr	r1, [r4, #8]
 8005512:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005514:	7f61      	ldrb	r1, [r4, #29]
                hadc->Init.DataAlign                                                   |
 8005516:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800551a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800551e:	2a01      	cmp	r2, #1
 8005520:	d05d      	beq.n	80055de <HAL_ADC_Init+0x1aa>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005522:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005524:	b122      	cbz	r2, 8005530 <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005526:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800552a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800552c:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800552e:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005530:	6821      	ldr	r1, [r4, #0]
 8005532:	68cd      	ldr	r5, [r1, #12]
 8005534:	4a49      	ldr	r2, [pc, #292]	; (800565c <HAL_ADC_Init+0x228>)
 8005536:	402a      	ands	r2, r5
 8005538:	431a      	orrs	r2, r3
 800553a:	60ca      	str	r2, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800553c:	6822      	ldr	r2, [r4, #0]
 800553e:	6913      	ldr	r3, [r2, #16]
 8005540:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005546:	430b      	orrs	r3, r1
 8005548:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800554a:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800554c:	688a      	ldr	r2, [r1, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800554e:	688b      	ldr	r3, [r1, #8]
 8005550:	f003 0308 	and.w	r3, r3, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005554:	f002 0204 	and.w	r2, r2, #4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005558:	4313      	orrs	r3, r2
 800555a:	d128      	bne.n	80055ae <HAL_ADC_Init+0x17a>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800555c:	68ca      	ldr	r2, [r1, #12]
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800555e:	7f25      	ldrb	r5, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005560:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005564:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005566:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800556a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800556e:	f022 0202 	bic.w	r2, r2, #2
 8005572:	4313      	orrs	r3, r2
 8005574:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005576:	6923      	ldr	r3, [r4, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d035      	beq.n	80055e8 <HAL_ADC_Init+0x1b4>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	6913      	ldr	r3, [r2, #16]
 8005580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005584:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800558c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005590:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005594:	6921      	ldr	r1, [r4, #16]
 8005596:	430b      	orrs	r3, r1
 8005598:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800559c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d030      	beq.n	8005606 <HAL_ADC_Init+0x1d2>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	6913      	ldr	r3, [r2, #16]
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80055ae:	6963      	ldr	r3, [r4, #20]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d03a      	beq.n	800562a <HAL_ADC_Init+0x1f6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80055b8:	f023 030f 	bic.w	r3, r3, #15
 80055bc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80055be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80055c0:	f023 0303 	bic.w	r3, r3, #3
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80055ca:	e03c      	b.n	8005646 <HAL_ADC_Init+0x212>
    HAL_ADC_MspInit(hadc);
 80055cc:	f7fe ff42 	bl	8004454 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80055d0:	2300      	movs	r3, #0
 80055d2:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80055d4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80055d8:	e738      	b.n	800544c <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055da:	2000      	movs	r0, #0
 80055dc:	e76f      	b.n	80054be <HAL_ADC_Init+0x8a>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80055de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80055e0:	3a01      	subs	r2, #1
 80055e2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80055e6:	e79c      	b.n	8005522 <HAL_ADC_Init+0xee>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055e8:	6822      	ldr	r2, [r4, #0]
 80055ea:	6913      	ldr	r3, [r2, #16]
 80055ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f0:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80055f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005600:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005604:	e7ca      	b.n	800559c <HAL_ADC_Init+0x168>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005606:	6821      	ldr	r1, [r4, #0]
 8005608:	690a      	ldr	r2, [r1, #16]
 800560a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800560c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800560e:	432b      	orrs	r3, r5
 8005610:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8005614:	f022 0204 	bic.w	r2, r2, #4
 8005618:	4313      	orrs	r3, r2
 800561a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800561c:	4313      	orrs	r3, r2
 800561e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005620:	4313      	orrs	r3, r2
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	610b      	str	r3, [r1, #16]
 8005628:	e7c1      	b.n	80055ae <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800562a:	6821      	ldr	r1, [r4, #0]
 800562c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800562e:	6a23      	ldr	r3, [r4, #32]
 8005630:	3b01      	subs	r3, #1
 8005632:	f022 020f 	bic.w	r2, r2, #15
 8005636:	4313      	orrs	r3, r2
 8005638:	630b      	str	r3, [r1, #48]	; 0x30
 800563a:	e7c0      	b.n	80055be <HAL_ADC_Init+0x18a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800563c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800563e:	f043 0310 	orr.w	r3, r3, #16
 8005642:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005644:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005646:	b003      	add	sp, #12
 8005648:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800564a:	2001      	movs	r0, #1
 800564c:	e7fb      	b.n	8005646 <HAL_ADC_Init+0x212>
 800564e:	bf00      	nop
 8005650:	20000560 	.word	0x20000560
 8005654:	053e2d63 	.word	0x053e2d63
 8005658:	50000300 	.word	0x50000300
 800565c:	fff04007 	.word	0xfff04007

08005660 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005660:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005662:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005664:	f7fe faaa 	bl	8003bbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005668:	bd08      	pop	{r3, pc}

0800566a <HAL_ADC_LevelOutOfWindowCallback>:
}
 800566a:	4770      	bx	lr

0800566c <HAL_ADC_ErrorCallback>:
}
 800566c:	4770      	bx	lr
	...

08005670 <HAL_ADC_IRQHandler>:
{
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005674:	6803      	ldr	r3, [r0, #0]
 8005676:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005678:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800567a:	4b9b      	ldr	r3, [pc, #620]	; (80058e8 <HAL_ADC_IRQHandler+0x278>)
 800567c:	689e      	ldr	r6, [r3, #8]
 800567e:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005682:	f017 0f02 	tst.w	r7, #2
 8005686:	d010      	beq.n	80056aa <HAL_ADC_IRQHandler+0x3a>
 8005688:	f015 0f02 	tst.w	r5, #2
 800568c:	d00d      	beq.n	80056aa <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800568e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005690:	f013 0f10 	tst.w	r3, #16
 8005694:	d103      	bne.n	800569e <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005696:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800569c:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800569e:	4620      	mov	r0, r4
 80056a0:	f000 fcac 	bl	8005ffc <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	2202      	movs	r2, #2
 80056a8:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80056aa:	f017 0f04 	tst.w	r7, #4
 80056ae:	d002      	beq.n	80056b6 <HAL_ADC_IRQHandler+0x46>
 80056b0:	f015 0f04 	tst.w	r5, #4
 80056b4:	d105      	bne.n	80056c2 <HAL_ADC_IRQHandler+0x52>
 80056b6:	f017 0f08 	tst.w	r7, #8
 80056ba:	d03e      	beq.n	800573a <HAL_ADC_IRQHandler+0xca>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80056bc:	f015 0f08 	tst.w	r5, #8
 80056c0:	d03b      	beq.n	800573a <HAL_ADC_IRQHandler+0xca>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056c4:	f013 0f10 	tst.w	r3, #16
 80056c8:	d103      	bne.n	80056d2 <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056d0:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80056d2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80056da:	d128      	bne.n	800572e <HAL_ADC_IRQHandler+0xbe>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056dc:	4a83      	ldr	r2, [pc, #524]	; (80058ec <HAL_ADC_IRQHandler+0x27c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	f000 80f6 	beq.w	80058d0 <HAL_ADC_IRQHandler+0x260>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80056e4:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80056e6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80056ea:	d120      	bne.n	800572e <HAL_ADC_IRQHandler+0xbe>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	f012 0f08 	tst.w	r2, #8
 80056f2:	d01c      	beq.n	800572e <HAL_ADC_IRQHandler+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	f012 0f04 	tst.w	r2, #4
 80056fa:	d110      	bne.n	800571e <HAL_ADC_IRQHandler+0xae>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	f022 020c 	bic.w	r2, r2, #12
 8005702:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005704:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800570a:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800570c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800570e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005712:	d10c      	bne.n	800572e <HAL_ADC_IRQHandler+0xbe>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005714:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800571c:	e007      	b.n	800572e <HAL_ADC_IRQHandler+0xbe>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800571e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005720:	f043 0310 	orr.w	r3, r3, #16
 8005724:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005726:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 800572e:	4620      	mov	r0, r4
 8005730:	f7fe fb46 	bl	8003dc0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	220c      	movs	r2, #12
 8005738:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800573a:	f017 0f20 	tst.w	r7, #32
 800573e:	d002      	beq.n	8005746 <HAL_ADC_IRQHandler+0xd6>
 8005740:	f015 0f20 	tst.w	r5, #32
 8005744:	d105      	bne.n	8005752 <HAL_ADC_IRQHandler+0xe2>
 8005746:	f017 0f40 	tst.w	r7, #64	; 0x40
 800574a:	d048      	beq.n	80057de <HAL_ADC_IRQHandler+0x16e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800574c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005750:	d045      	beq.n	80057de <HAL_ADC_IRQHandler+0x16e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005752:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005754:	f013 0f10 	tst.w	r3, #16
 8005758:	d103      	bne.n	8005762 <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800575a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800575c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005760:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005762:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005766:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800576a:	68d8      	ldr	r0, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800576c:	495f      	ldr	r1, [pc, #380]	; (80058ec <HAL_ADC_IRQHandler+0x27c>)
 800576e:	428b      	cmp	r3, r1
 8005770:	f000 80a4 	beq.w	80058bc <HAL_ADC_IRQHandler+0x24c>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005774:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005776:	bb62      	cbnz	r2, 80057d2 <HAL_ADC_IRQHandler+0x162>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005778:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800577c:	d005      	beq.n	800578a <HAL_ADC_IRQHandler+0x11a>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800577e:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 8005782:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005786:	4302      	orrs	r2, r0
 8005788:	d123      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x162>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005790:	d01f      	beq.n	80057d2 <HAL_ADC_IRQHandler+0x162>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005792:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8005796:	d11c      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x162>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	f012 0f08 	tst.w	r2, #8
 800579e:	d110      	bne.n	80057c2 <HAL_ADC_IRQHandler+0x152>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057a6:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80057a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ae:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80057b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80057b6:	d10c      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x162>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	65e3      	str	r3, [r4, #92]	; 0x5c
 80057c0:	e007      	b.n	80057d2 <HAL_ADC_IRQHandler+0x162>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057c4:	f043 0310 	orr.w	r3, r3, #16
 80057c8:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fc0e 	bl	8005ff4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	2260      	movs	r2, #96	; 0x60
 80057dc:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80057de:	f017 0f80 	tst.w	r7, #128	; 0x80
 80057e2:	d002      	beq.n	80057ea <HAL_ADC_IRQHandler+0x17a>
 80057e4:	f015 0f80 	tst.w	r5, #128	; 0x80
 80057e8:	d12f      	bne.n	800584a <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80057ea:	f417 7f80 	tst.w	r7, #256	; 0x100
 80057ee:	d002      	beq.n	80057f6 <HAL_ADC_IRQHandler+0x186>
 80057f0:	f415 7f80 	tst.w	r5, #256	; 0x100
 80057f4:	d134      	bne.n	8005860 <HAL_ADC_IRQHandler+0x1f0>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80057f6:	f417 7f00 	tst.w	r7, #512	; 0x200
 80057fa:	d002      	beq.n	8005802 <HAL_ADC_IRQHandler+0x192>
 80057fc:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005800:	d13a      	bne.n	8005878 <HAL_ADC_IRQHandler+0x208>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005802:	f017 0f10 	tst.w	r7, #16
 8005806:	d019      	beq.n	800583c <HAL_ADC_IRQHandler+0x1cc>
 8005808:	f015 0f10 	tst.w	r5, #16
 800580c:	d016      	beq.n	800583c <HAL_ADC_IRQHandler+0x1cc>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800580e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005810:	b133      	cbz	r3, 8005820 <HAL_ADC_IRQHandler+0x1b0>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005812:	2e00      	cmp	r6, #0
 8005814:	d03c      	beq.n	8005890 <HAL_ADC_IRQHandler+0x220>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005816:	4b34      	ldr	r3, [pc, #208]	; (80058e8 <HAL_ADC_IRQHandler+0x278>)
 8005818:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800581a:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800581e:	d00a      	beq.n	8005836 <HAL_ADC_IRQHandler+0x1c6>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005820:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005826:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005828:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800582a:	f043 0302 	orr.w	r3, r3, #2
 800582e:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8005830:	4620      	mov	r0, r4
 8005832:	f7ff ff1b 	bl	800566c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	2210      	movs	r2, #16
 800583a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800583c:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8005840:	d002      	beq.n	8005848 <HAL_ADC_IRQHandler+0x1d8>
 8005842:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8005846:	d129      	bne.n	800589c <HAL_ADC_IRQHandler+0x22c>
}
 8005848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800584a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800584c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005850:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005852:	4620      	mov	r0, r4
 8005854:	f7ff ff09 	bl	800566a <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	2280      	movs	r2, #128	; 0x80
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e7c4      	b.n	80057ea <HAL_ADC_IRQHandler+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005860:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005866:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fbc5 	bl	8005ff8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	e7be      	b.n	80057f6 <HAL_ADC_IRQHandler+0x186>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005878:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800587a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800587e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005880:	4620      	mov	r0, r4
 8005882:	f000 fbba 	bl	8005ffa <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e7b8      	b.n	8005802 <HAL_ADC_IRQHandler+0x192>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f013 0f01 	tst.w	r3, #1
 8005898:	d0cd      	beq.n	8005836 <HAL_ADC_IRQHandler+0x1c6>
 800589a:	e7c1      	b.n	8005820 <HAL_ADC_IRQHandler+0x1b0>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800589c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800589e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058a2:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80058a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80058a6:	f043 0308 	orr.w	r3, r3, #8
 80058aa:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058b2:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80058b4:	4620      	mov	r0, r4
 80058b6:	f000 fb9e 	bl	8005ff6 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80058ba:	e7c5      	b.n	8005848 <HAL_ADC_IRQHandler+0x1d8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058bc:	21c1      	movs	r1, #193	; 0xc1
 80058be:	40f1      	lsrs	r1, r6
 80058c0:	f011 0f01 	tst.w	r1, #1
 80058c4:	f47f af56 	bne.w	8005774 <HAL_ADC_IRQHandler+0x104>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80058c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80058cc:	68c9      	ldr	r1, [r1, #12]
 80058ce:	e752      	b.n	8005776 <HAL_ADC_IRQHandler+0x106>
 80058d0:	f240 2221 	movw	r2, #545	; 0x221
 80058d4:	40f2      	lsrs	r2, r6
 80058d6:	f012 0f01 	tst.w	r2, #1
 80058da:	f47f af03 	bne.w	80056e4 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80058de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80058e2:	68d2      	ldr	r2, [r2, #12]
 80058e4:	e6ff      	b.n	80056e6 <HAL_ADC_IRQHandler+0x76>
 80058e6:	bf00      	nop
 80058e8:	50000300 	.word	0x50000300
 80058ec:	50000100 	.word	0x50000100

080058f0 <ADC_DMAConvCplt>:
{
 80058f0:	b508      	push	{r3, lr}
 80058f2:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80058f6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80058f8:	f012 0f50 	tst.w	r2, #80	; 0x50
 80058fc:	d130      	bne.n	8005960 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058fe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005904:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005906:	6803      	ldr	r3, [r0, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	f012 0f08 	tst.w	r2, #8
 800590e:	d014      	beq.n	800593a <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005916:	d120      	bne.n	800595a <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800591e:	d11c      	bne.n	800595a <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005920:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005926:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005928:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800592a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800592e:	d114      	bne.n	800595a <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005930:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005938:	e00f      	b.n	800595a <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f013 0f02 	tst.w	r3, #2
 8005940:	d10b      	bne.n	800595a <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005942:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005948:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800594a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800594c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005950:	d103      	bne.n	800595a <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005952:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 800595a:	f7fe fa31 	bl	8003dc0 <HAL_ADC_ConvCpltCallback>
}
 800595e:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005960:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005962:	f012 0f10 	tst.w	r2, #16
 8005966:	d104      	bne.n	8005972 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005968:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800596a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800596c:	4618      	mov	r0, r3
 800596e:	4790      	blx	r2
}
 8005970:	e7f5      	b.n	800595e <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8005972:	f7ff fe7b 	bl	800566c <HAL_ADC_ErrorCallback>
 8005976:	e7f2      	b.n	800595e <ADC_DMAConvCplt+0x6e>

08005978 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005978:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800597a:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800597c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800597e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005982:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005984:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005986:	f043 0304 	orr.w	r3, r3, #4
 800598a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800598c:	f7ff fe6e 	bl	800566c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005990:	bd08      	pop	{r3, pc}
	...

08005994 <HAL_ADC_ConfigChannel>:
{
 8005994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005996:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8005998:	2200      	movs	r2, #0
 800599a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800599c:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80059a0:	2a01      	cmp	r2, #1
 80059a2:	f000 8241 	beq.w	8005e28 <HAL_ADC_ConfigChannel+0x494>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2201      	movs	r2, #1
 80059aa:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059ae:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059b0:	6890      	ldr	r0, [r2, #8]
 80059b2:	f010 0f04 	tst.w	r0, #4
 80059b6:	d009      	beq.n	80059cc <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059ba:	f042 0220 	orr.w	r2, r2, #32
 80059be:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80059c0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80059c8:	b003      	add	sp, #12
 80059ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80059cc:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80059ce:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 80059d2:	f00e 0e0c 	and.w	lr, lr, #12
 80059d6:	3230      	adds	r2, #48	; 0x30
  MODIFY_REG(*preg,
 80059d8:	f852 400e 	ldr.w	r4, [r2, lr]
 80059dc:	f000 0c1f 	and.w	ip, r0, #31
 80059e0:	6808      	ldr	r0, [r1, #0]
 80059e2:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80059e6:	fa00 f00c 	lsl.w	r0, r0, ip
 80059ea:	251f      	movs	r5, #31
 80059ec:	fa05 fc0c 	lsl.w	ip, r5, ip
 80059f0:	ea24 0c0c 	bic.w	ip, r4, ip
 80059f4:	ea40 000c 	orr.w	r0, r0, ip
 80059f8:	f842 000e 	str.w	r0, [r2, lr]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059fc:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059fe:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a00:	68a2      	ldr	r2, [r4, #8]
 8005a02:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a06:	f000 0004 	and.w	r0, r0, #4
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a0a:	4302      	orrs	r2, r0
 8005a0c:	d14f      	bne.n	8005aae <HAL_ADC_ConfigChannel+0x11a>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005a0e:	688a      	ldr	r2, [r1, #8]
 8005a10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005a14:	f000 808b 	beq.w	8005b2e <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a18:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a1a:	ea4f 5cd5 	mov.w	ip, r5, lsr #23
 8005a1e:	f00c 0c04 	and.w	ip, ip, #4
 8005a22:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8005a24:	f854 000c 	ldr.w	r0, [r4, ip]
 8005a28:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005a2c:	2607      	movs	r6, #7
 8005a2e:	40ae      	lsls	r6, r5
 8005a30:	ea20 0006 	bic.w	r0, r0, r6
 8005a34:	40aa      	lsls	r2, r5
 8005a36:	4302      	orrs	r2, r0
 8005a38:	f844 200c 	str.w	r2, [r4, ip]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005a3c:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005a3e:	6942      	ldr	r2, [r0, #20]
 8005a40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a44:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a46:	694a      	ldr	r2, [r1, #20]
 8005a48:	681c      	ldr	r4, [r3, #0]
 8005a4a:	68e0      	ldr	r0, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a4c:	690d      	ldr	r5, [r1, #16]
 8005a4e:	2d04      	cmp	r5, #4
 8005a50:	f000 8081 	beq.w	8005b56 <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a54:	3460      	adds	r4, #96	; 0x60
  MODIFY_REG(*preg,
 8005a56:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a5a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005a5e:	0040      	lsls	r0, r0, #1
 8005a60:	4082      	lsls	r2, r0
 8005a62:	6808      	ldr	r0, [r1, #0]
 8005a64:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005a68:	4eaa      	ldr	r6, [pc, #680]	; (8005d14 <HAL_ADC_ConfigChannel+0x380>)
 8005a6a:	403e      	ands	r6, r7
 8005a6c:	4330      	orrs	r0, r6
 8005a6e:	4302      	orrs	r2, r0
 8005a70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a74:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a78:	690c      	ldr	r4, [r1, #16]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8005a7e:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8005a82:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005a86:	698d      	ldr	r5, [r1, #24]
 8005a88:	432a      	orrs	r2, r5
 8005a8a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a8e:	690d      	ldr	r5, [r1, #16]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8005a94:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005a98:	7f0c      	ldrb	r4, [r1, #28]
 8005a9a:	2c01      	cmp	r4, #1
 8005a9c:	bf14      	ite	ne
 8005a9e:	2400      	movne	r4, #0
 8005aa0:	2401      	moveq	r4, #1
 8005aa2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005aa6:	ea42 6244 	orr.w	r2, r2, r4, lsl #25
 8005aaa:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005aae:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ab0:	6890      	ldr	r0, [r2, #8]
 8005ab2:	f010 0f01 	tst.w	r0, #1
 8005ab6:	d112      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x14a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005ab8:	6808      	ldr	r0, [r1, #0]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005aba:	68cd      	ldr	r5, [r1, #12]
 8005abc:	4c96      	ldr	r4, [pc, #600]	; (8005d18 <HAL_ADC_ConfigChannel+0x384>)
 8005abe:	42a5      	cmp	r5, r4
    SET_BIT(ADCx->DIFSEL,
 8005ac0:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005ac4:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005ac8:	bf0c      	ite	eq
 8005aca:	4320      	orreq	r0, r4
    CLEAR_BIT(ADCx->DIFSEL,
 8005acc:	ea24 0000 	bicne.w	r0, r4, r0
 8005ad0:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005ad4:	68c8      	ldr	r0, [r1, #12]
 8005ad6:	4a90      	ldr	r2, [pc, #576]	; (8005d18 <HAL_ADC_ConfigChannel+0x384>)
 8005ad8:	4290      	cmp	r0, r2
 8005ada:	f000 80d3 	beq.w	8005c84 <HAL_ADC_ConfigChannel+0x2f0>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005ade:	680a      	ldr	r2, [r1, #0]
 8005ae0:	498e      	ldr	r1, [pc, #568]	; (8005d1c <HAL_ADC_ConfigChannel+0x388>)
 8005ae2:	420a      	tst	r2, r1
 8005ae4:	f000 8192 	beq.w	8005e0c <HAL_ADC_ConfigChannel+0x478>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005ae8:	498d      	ldr	r1, [pc, #564]	; (8005d20 <HAL_ADC_ConfigChannel+0x38c>)
 8005aea:	6889      	ldr	r1, [r1, #8]
 8005aec:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005af0:	488c      	ldr	r0, [pc, #560]	; (8005d24 <HAL_ADC_ConfigChannel+0x390>)
 8005af2:	4282      	cmp	r2, r0
 8005af4:	f000 819a 	beq.w	8005e2c <HAL_ADC_ConfigChannel+0x498>
 8005af8:	488b      	ldr	r0, [pc, #556]	; (8005d28 <HAL_ADC_ConfigChannel+0x394>)
 8005afa:	4282      	cmp	r2, r0
 8005afc:	f000 8196 	beq.w	8005e2c <HAL_ADC_ConfigChannel+0x498>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b00:	488a      	ldr	r0, [pc, #552]	; (8005d2c <HAL_ADC_ConfigChannel+0x398>)
 8005b02:	4282      	cmp	r2, r0
 8005b04:	f040 816e 	bne.w	8005de4 <HAL_ADC_ConfigChannel+0x450>
 8005b08:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8005b0c:	f040 8182 	bne.w	8005e14 <HAL_ADC_ConfigChannel+0x480>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	4a87      	ldr	r2, [pc, #540]	; (8005d30 <HAL_ADC_ConfigChannel+0x39c>)
 8005b14:	4291      	cmp	r1, r2
 8005b16:	f000 817f 	beq.w	8005e18 <HAL_ADC_ConfigChannel+0x484>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b1a:	4981      	ldr	r1, [pc, #516]	; (8005d20 <HAL_ADC_ConfigChannel+0x38c>)
 8005b1c:	688a      	ldr	r2, [r1, #8]
 8005b1e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005b22:	4322      	orrs	r2, r4
 8005b24:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005b28:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b2a:	2000      	movs	r0, #0
}
 8005b2c:	e749      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005b2e:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b30:	0dc2      	lsrs	r2, r0, #23
 8005b32:	f002 0204 	and.w	r2, r2, #4
 8005b36:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8005b38:	58a5      	ldr	r5, [r4, r2]
 8005b3a:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005b3e:	2607      	movs	r6, #7
 8005b40:	fa06 f000 	lsl.w	r0, r6, r0
 8005b44:	ea25 0000 	bic.w	r0, r5, r0
 8005b48:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005b4a:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005b4c:	6942      	ldr	r2, [r0, #20]
 8005b4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b52:	6142      	str	r2, [r0, #20]
}
 8005b54:	e777      	b.n	8005a46 <HAL_ADC_ConfigChannel+0xb2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b56:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005b58:	6e20      	ldr	r0, [r4, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b5a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b5e:	680a      	ldr	r2, [r1, #0]
 8005b60:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005b64:	bb5d      	cbnz	r5, 8005bbe <HAL_ADC_ConfigChannel+0x22a>
 8005b66:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b6a:	42a8      	cmp	r0, r5
 8005b6c:	d057      	beq.n	8005c1e <HAL_ADC_ConfigChannel+0x28a>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b6e:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b72:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005b74:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b76:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b7a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b7e:	4282      	cmp	r2, r0
 8005b80:	d05e      	beq.n	8005c40 <HAL_ADC_ConfigChannel+0x2ac>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b88:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005b8a:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b8c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b90:	680a      	ldr	r2, [r1, #0]
 8005b92:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b96:	4282      	cmp	r2, r0
 8005b98:	d063      	beq.n	8005c62 <HAL_ADC_ConfigChannel+0x2ce>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ba0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005ba2:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ba4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ba8:	680a      	ldr	r2, [r1, #0]
 8005baa:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005bae:	4282      	cmp	r2, r0
 8005bb0:	f47f af7d 	bne.w	8005aae <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(*preg,
 8005bb4:	6822      	ldr	r2, [r4, #0]
 8005bb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005bba:	6022      	str	r2, [r4, #0]
}
 8005bbc:	e777      	b.n	8005aae <HAL_ADC_ConfigChannel+0x11a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbe:	fa92 f5a2 	rbit	r5, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005bc2:	b11d      	cbz	r5, 8005bcc <HAL_ADC_ConfigChannel+0x238>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005bc4:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005bc8:	42a8      	cmp	r0, r5
 8005bca:	d028      	beq.n	8005c1e <HAL_ADC_ConfigChannel+0x28a>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bcc:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005bd0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005bd2:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005bd4:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005bdc:	b11a      	cbz	r2, 8005be6 <HAL_ADC_ConfigChannel+0x252>
  return __builtin_clz(value);
 8005bde:	fab2 f282 	clz	r2, r2
 8005be2:	4282      	cmp	r2, r0
 8005be4:	d02c      	beq.n	8005c40 <HAL_ADC_ConfigChannel+0x2ac>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005bec:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005bee:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005bf0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005bf4:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005bfa:	b11a      	cbz	r2, 8005c04 <HAL_ADC_ConfigChannel+0x270>
  return __builtin_clz(value);
 8005bfc:	fab2 f282 	clz	r2, r2
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c00:	4282      	cmp	r2, r0
 8005c02:	d02e      	beq.n	8005c62 <HAL_ADC_ConfigChannel+0x2ce>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c0a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005c0c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c0e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c12:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c14:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005c18:	fab2 f282 	clz	r2, r2
 8005c1c:	e7c7      	b.n	8005bae <HAL_ADC_ConfigChannel+0x21a>
  MODIFY_REG(*preg,
 8005c1e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005c20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c24:	6622      	str	r2, [r4, #96]	; 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	f102 0564 	add.w	r5, r2, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c2c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005c2e:	6e50      	ldr	r0, [r2, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c30:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c34:	680a      	ldr	r2, [r1, #0]
 8005c36:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8005c3a:	2c00      	cmp	r4, #0
 8005c3c:	d1cc      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0x244>
 8005c3e:	e79c      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x1e6>
  MODIFY_REG(*preg,
 8005c40:	682a      	ldr	r2, [r5, #0]
 8005c42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c46:	602a      	str	r2, [r5, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c4e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005c50:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c52:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c56:	680a      	ldr	r2, [r1, #0]
 8005c58:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	d1ca      	bne.n	8005bf6 <HAL_ADC_ConfigChannel+0x262>
 8005c60:	e797      	b.n	8005b92 <HAL_ADC_ConfigChannel+0x1fe>
  MODIFY_REG(*preg,
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c68:	6022      	str	r2, [r4, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c70:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005c72:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c74:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c78:	680a      	ldr	r2, [r1, #0]
 8005c7a:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	d1c8      	bne.n	8005c14 <HAL_ADC_ConfigChannel+0x280>
 8005c82:	e792      	b.n	8005baa <HAL_ADC_ConfigChannel+0x216>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c84:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c86:	680a      	ldr	r2, [r1, #0]
 8005c88:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8005c8c:	b9bc      	cbnz	r4, 8005cbe <HAL_ADC_ConfigChannel+0x32a>
 8005c8e:	0e94      	lsrs	r4, r2, #26
 8005c90:	3401      	adds	r4, #1
 8005c92:	f004 051f 	and.w	r5, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c96:	2d09      	cmp	r5, #9
 8005c98:	d94c      	bls.n	8005d34 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c9a:	0e94      	lsrs	r4, r2, #26
 8005c9c:	3401      	adds	r4, #1
 8005c9e:	f004 021f 	and.w	r2, r4, #31
 8005ca2:	06a4      	lsls	r4, r4, #26
 8005ca4:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005ca8:	2501      	movs	r5, #1
 8005caa:	4095      	lsls	r5, r2
 8005cac:	432c      	orrs	r4, r5
 8005cae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005cb2:	3a1e      	subs	r2, #30
 8005cb4:	0512      	lsls	r2, r2, #20
 8005cb6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cba:	4322      	orrs	r2, r4
 8005cbc:	e044      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x3b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8005cc2:	2c00      	cmp	r4, #0
 8005cc4:	d053      	beq.n	8005d6e <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 8005cc6:	fab4 f484 	clz	r4, r4
 8005cca:	3401      	adds	r4, #1
 8005ccc:	f004 041f 	and.w	r4, r4, #31
 8005cd0:	2c09      	cmp	r4, #9
 8005cd2:	d94c      	bls.n	8005d6e <HAL_ADC_ConfigChannel+0x3da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd4:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8005cd8:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cdc:	3501      	adds	r5, #1
 8005cde:	06ad      	lsls	r5, r5, #26
 8005ce0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce4:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8005ce8:	fab6 f686 	clz	r6, r6
 8005cec:	3601      	adds	r6, #1
 8005cee:	f006 061f 	and.w	r6, r6, #31
 8005cf2:	2401      	movs	r4, #1
 8005cf4:	40b4      	lsls	r4, r6
 8005cf6:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf8:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005cfc:	fab2 f282 	clz	r2, r2
 8005d00:	3201      	adds	r2, #1
 8005d02:	f002 021f 	and.w	r2, r2, #31
 8005d06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005d0a:	3a1e      	subs	r2, #30
 8005d0c:	0512      	lsls	r2, r2, #20
 8005d0e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005d12:	e7d2      	b.n	8005cba <HAL_ADC_ConfigChannel+0x326>
 8005d14:	03fff000 	.word	0x03fff000
 8005d18:	407f0000 	.word	0x407f0000
 8005d1c:	80080000 	.word	0x80080000
 8005d20:	50000300 	.word	0x50000300
 8005d24:	c3210000 	.word	0xc3210000
 8005d28:	90c00010 	.word	0x90c00010
 8005d2c:	c7520000 	.word	0xc7520000
 8005d30:	50000100 	.word	0x50000100
 8005d34:	06a4      	lsls	r4, r4, #26
 8005d36:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	40aa      	lsls	r2, r5
 8005d3e:	4314      	orrs	r4, r2
 8005d40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d44:	052a      	lsls	r2, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d46:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d48:	0dd5      	lsrs	r5, r2, #23
 8005d4a:	f005 0504 	and.w	r5, r5, #4
 8005d4e:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8005d50:	5944      	ldr	r4, [r0, r5]
 8005d52:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005d56:	f04f 0c07 	mov.w	ip, #7
 8005d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8005d5e:	ea24 040c 	bic.w	r4, r4, ip
 8005d62:	688e      	ldr	r6, [r1, #8]
 8005d64:	fa06 f202 	lsl.w	r2, r6, r2
 8005d68:	4322      	orrs	r2, r4
 8005d6a:	5142      	str	r2, [r0, r5]
}
 8005d6c:	e6b7      	b.n	8005ade <HAL_ADC_ConfigChannel+0x14a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6e:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8005d72:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d76:	3501      	adds	r5, #1
 8005d78:	06ad      	lsls	r5, r5, #26
 8005d7a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7e:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8005d82:	fab6 f686 	clz	r6, r6
 8005d86:	3601      	adds	r6, #1
 8005d88:	f006 061f 	and.w	r6, r6, #31
 8005d8c:	2401      	movs	r4, #1
 8005d8e:	40b4      	lsls	r4, r6
 8005d90:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d92:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005d96:	fab2 f282 	clz	r2, r2
 8005d9a:	3201      	adds	r2, #1
 8005d9c:	f002 021f 	and.w	r2, r2, #31
 8005da0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005da4:	0512      	lsls	r2, r2, #20
 8005da6:	e7ce      	b.n	8005d46 <HAL_ADC_ConfigChannel+0x3b2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005da8:	4926      	ldr	r1, [pc, #152]	; (8005e44 <HAL_ADC_ConfigChannel+0x4b0>)
 8005daa:	688a      	ldr	r2, [r1, #8]
 8005dac:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005db0:	4322      	orrs	r2, r4
 8005db2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005db6:	608a      	str	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005db8:	4a23      	ldr	r2, [pc, #140]	; (8005e48 <HAL_ADC_ConfigChannel+0x4b4>)
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	0992      	lsrs	r2, r2, #6
 8005dbe:	4923      	ldr	r1, [pc, #140]	; (8005e4c <HAL_ADC_ConfigChannel+0x4b8>)
 8005dc0:	fba1 1202 	umull	r1, r2, r1, r2
 8005dc4:	0992      	lsrs	r2, r2, #6
 8005dc6:	3201      	adds	r2, #1
 8005dc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005dcc:	0092      	lsls	r2, r2, #2
 8005dce:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005dd0:	9a01      	ldr	r2, [sp, #4]
 8005dd2:	b1ea      	cbz	r2, 8005e10 <HAL_ADC_ConfigChannel+0x47c>
            wait_loop_index--;
 8005dd4:	9a01      	ldr	r2, [sp, #4]
 8005dd6:	3a01      	subs	r2, #1
 8005dd8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005dda:	9a01      	ldr	r2, [sp, #4]
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d1f9      	bne.n	8005dd4 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005de0:	2000      	movs	r0, #0
 8005de2:	e5ee      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005de4:	481a      	ldr	r0, [pc, #104]	; (8005e50 <HAL_ADC_ConfigChannel+0x4bc>)
 8005de6:	4282      	cmp	r2, r0
 8005de8:	d118      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x488>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dea:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8005dee:	d117      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x48c>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005df0:	6819      	ldr	r1, [r3, #0]
 8005df2:	4a18      	ldr	r2, [pc, #96]	; (8005e54 <HAL_ADC_ConfigChannel+0x4c0>)
 8005df4:	4291      	cmp	r1, r2
 8005df6:	d015      	beq.n	8005e24 <HAL_ADC_ConfigChannel+0x490>
 8005df8:	4912      	ldr	r1, [pc, #72]	; (8005e44 <HAL_ADC_ConfigChannel+0x4b0>)
 8005dfa:	688a      	ldr	r2, [r1, #8]
 8005dfc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005e00:	4322      	orrs	r2, r4
 8005e02:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e06:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e08:	2000      	movs	r0, #0
}
 8005e0a:	e5da      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	e5d8      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
 8005e10:	2000      	movs	r0, #0
 8005e12:	e5d6      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
 8005e14:	2000      	movs	r0, #0
 8005e16:	e5d4      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e5d2      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e5d0      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
 8005e20:	2000      	movs	r0, #0
 8005e22:	e5ce      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
 8005e24:	2000      	movs	r0, #0
 8005e26:	e5cc      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8005e28:	2002      	movs	r0, #2
 8005e2a:	e5cd      	b.n	80059c8 <HAL_ADC_ConfigChannel+0x34>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e2c:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8005e30:	d105      	bne.n	8005e3e <HAL_ADC_ConfigChannel+0x4aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005e38:	d0b6      	beq.n	8005da8 <HAL_ADC_ConfigChannel+0x414>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	e5c1      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	e5bf      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x2e>
 8005e42:	bf00      	nop
 8005e44:	50000300 	.word	0x50000300
 8005e48:	20000560 	.word	0x20000560
 8005e4c:	053e2d63 	.word	0x053e2d63
 8005e50:	cb840000 	.word	0xcb840000
 8005e54:	50000100 	.word	0x50000100

08005e58 <ADC_Enable>:
{
 8005e58:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e5a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	f012 0f01 	tst.w	r2, #1
 8005e62:	d147      	bne.n	8005ef4 <ADC_Enable+0x9c>
 8005e64:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005e66:	6899      	ldr	r1, [r3, #8]
 8005e68:	4a23      	ldr	r2, [pc, #140]	; (8005ef8 <ADC_Enable+0xa0>)
 8005e6a:	4211      	tst	r1, r2
 8005e6c:	d009      	beq.n	8005e82 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e6e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005e70:	f043 0310 	orr.w	r3, r3, #16
 8005e74:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e76:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8005e7e:	2001      	movs	r0, #1
 8005e80:	e039      	b.n	8005ef6 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e88:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005e92:	f7ff fab5 	bl	8005400 <HAL_GetTick>
 8005e96:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f012 0f01 	tst.w	r2, #1
 8005ea0:	d006      	beq.n	8005eb0 <ADC_Enable+0x58>
  return HAL_OK;
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e027      	b.n	8005ef6 <ADC_Enable+0x9e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f012 0f01 	tst.w	r2, #1
 8005eae:	d11f      	bne.n	8005ef0 <ADC_Enable+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	f012 0f01 	tst.w	r2, #1
 8005eb6:	d107      	bne.n	8005ec8 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ebe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ec8:	f7ff fa9a 	bl	8005400 <HAL_GetTick>
 8005ecc:	1b43      	subs	r3, r0, r5
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d9e9      	bls.n	8005ea6 <ADC_Enable+0x4e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f013 0f01 	tst.w	r3, #1
 8005eda:	d1e4      	bne.n	8005ea6 <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005edc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ede:	f043 0310 	orr.w	r3, r3, #16
 8005ee2:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ee4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8005eec:	2001      	movs	r0, #1
 8005eee:	e002      	b.n	8005ef6 <ADC_Enable+0x9e>
  return HAL_OK;
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e000      	b.n	8005ef6 <ADC_Enable+0x9e>
 8005ef4:	2000      	movs	r0, #0
}
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	8000003f 	.word	0x8000003f

08005efc <HAL_ADC_Start_DMA>:
{
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005f00:	4837      	ldr	r0, [pc, #220]	; (8005fe0 <HAL_ADC_Start_DMA+0xe4>)
 8005f02:	6887      	ldr	r7, [r0, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f04:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f06:	6880      	ldr	r0, [r0, #8]
 8005f08:	f010 0f04 	tst.w	r0, #4
 8005f0c:	d161      	bne.n	8005fd2 <HAL_ADC_Start_DMA+0xd6>
 8005f0e:	460e      	mov	r6, r1
 8005f10:	4615      	mov	r5, r2
    __HAL_LOCK(hadc);
 8005f12:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8005f16:	2a01      	cmp	r2, #1
 8005f18:	d05d      	beq.n	8005fd6 <HAL_ADC_Start_DMA+0xda>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005f1a:	f007 071f 	and.w	r7, r7, #31
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005f24:	f240 2321 	movw	r3, #545	; 0x221
 8005f28:	40fb      	lsrs	r3, r7
 8005f2a:	f013 0f01 	tst.w	r3, #1
 8005f2e:	d104      	bne.n	8005f3a <HAL_ADC_Start_DMA+0x3e>
      __HAL_UNLOCK(hadc);
 8005f30:	2300      	movs	r3, #0
 8005f32:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8005f36:	2001      	movs	r0, #1
 8005f38:	e04c      	b.n	8005fd4 <HAL_ADC_Start_DMA+0xd8>
      tmp_hal_status = ADC_Enable(hadc);
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f7ff ff8c 	bl	8005e58 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d142      	bne.n	8005fca <HAL_ADC_Start_DMA+0xce>
        ADC_STATE_CLR_SET(hadc->State,
 8005f44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f52:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <HAL_ADC_Start_DMA+0xe8>)
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d03e      	beq.n	8005fda <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f62:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f66:	f413 5f80 	tst.w	r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f6a:	bf1a      	itte	ne
 8005f6c:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8005f6e:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8005f72:	2300      	moveq	r3, #0
 8005f74:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <HAL_ADC_Start_DMA+0xec>)
 8005f7a:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f7e:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_ADC_Start_DMA+0xf0>)
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f84:	4a1a      	ldr	r2, [pc, #104]	; (8005ff0 <HAL_ADC_Start_DMA+0xf4>)
 8005f86:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	221c      	movs	r2, #28
 8005f8c:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f94:	6822      	ldr	r2, [r4, #0]
 8005f96:	6853      	ldr	r3, [r2, #4]
 8005f98:	f043 0310 	orr.w	r3, r3, #16
 8005f9c:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005f9e:	6822      	ldr	r2, [r4, #0]
 8005fa0:	68d3      	ldr	r3, [r2, #12]
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fa8:	6821      	ldr	r1, [r4, #0]
 8005faa:	462b      	mov	r3, r5
 8005fac:	4632      	mov	r2, r6
 8005fae:	3140      	adds	r1, #64	; 0x40
 8005fb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fb2:	f000 fb2d 	bl	8006610 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005fb6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005fb8:	6893      	ldr	r3, [r2, #8]
 8005fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fc2:	f043 0304 	orr.w	r3, r3, #4
 8005fc6:	6093      	str	r3, [r2, #8]
}
 8005fc8:	e004      	b.n	8005fd4 <HAL_ADC_Start_DMA+0xd8>
        __HAL_UNLOCK(hadc);
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8005fd0:	e000      	b.n	8005fd4 <HAL_ADC_Start_DMA+0xd8>
    tmp_hal_status = HAL_BUSY;
 8005fd2:	2002      	movs	r0, #2
}
 8005fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8005fd6:	2002      	movs	r0, #2
 8005fd8:	e7fc      	b.n	8005fd4 <HAL_ADC_Start_DMA+0xd8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fda:	2f00      	cmp	r7, #0
 8005fdc:	d0be      	beq.n	8005f5c <HAL_ADC_Start_DMA+0x60>
 8005fde:	e7c1      	b.n	8005f64 <HAL_ADC_Start_DMA+0x68>
 8005fe0:	50000300 	.word	0x50000300
 8005fe4:	50000100 	.word	0x50000100
 8005fe8:	080058f1 	.word	0x080058f1
 8005fec:	08005661 	.word	0x08005661
 8005ff0:	08005979 	.word	0x08005979

08005ff4 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005ff8:	4770      	bx	lr

08005ffa <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005ffa:	4770      	bx	lr

08005ffc <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005ffc:	4770      	bx	lr
	...

08006000 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006000:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8006004:	2a01      	cmp	r2, #1
 8006006:	d03d      	beq.n	8006084 <HAL_ADCEx_MultiModeConfigChannel+0x84>
{
 8006008:	b410      	push	{r4}
 800600a:	b09d      	sub	sp, #116	; 0x74
 800600c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800600e:	2201      	movs	r2, #1
 8006010:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006014:	2200      	movs	r2, #0
 8006016:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006018:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800601a:	6802      	ldr	r2, [r0, #0]
 800601c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006020:	d032      	beq.n	8006088 <HAL_ADCEx_MultiModeConfigChannel+0x88>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006022:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006024:	f042 0220 	orr.w	r2, r2, #32
 8006028:	65c2      	str	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800602a:	2200      	movs	r2, #0
 800602c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

    return HAL_ERROR;
 8006030:	2001      	movs	r0, #1
 8006032:	e01f      	b.n	8006074 <HAL_ADCEx_MultiModeConfigChannel+0x74>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006034:	492b      	ldr	r1, [pc, #172]	; (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8006036:	688a      	ldr	r2, [r1, #8]
 8006038:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800603c:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800603e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006042:	6891      	ldr	r1, [r2, #8]
 8006044:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006048:	6892      	ldr	r2, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800604a:	430a      	orrs	r2, r1
 800604c:	f012 0f01 	tst.w	r2, #1
 8006050:	d116      	bne.n	8006080 <HAL_ADCEx_MultiModeConfigChannel+0x80>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006052:	4924      	ldr	r1, [pc, #144]	; (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8006054:	688a      	ldr	r2, [r1, #8]
 8006056:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800605a:	f022 020f 	bic.w	r2, r2, #15
 800605e:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006060:	2000      	movs	r0, #0
 8006062:	e004      	b.n	800606e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006064:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006066:	f042 0220 	orr.w	r2, r2, #32
 800606a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800606c:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8006074:	b01d      	add	sp, #116	; 0x74
 8006076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800607a:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800607c:	2000      	movs	r0, #0
 800607e:	e7f6      	b.n	800606e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006080:	2000      	movs	r0, #0
 8006082:	e7f4      	b.n	800606e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8006084:	2002      	movs	r0, #2
}
 8006086:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006088:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 800608a:	6890      	ldr	r0, [r2, #8]
 800608c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006090:	6892      	ldr	r2, [r2, #8]
 8006092:	4302      	orrs	r2, r0
 8006094:	f012 0f04 	tst.w	r2, #4
 8006098:	d1e4      	bne.n	8006064 <HAL_ADCEx_MultiModeConfigChannel+0x64>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800609a:	680a      	ldr	r2, [r1, #0]
 800609c:	2a00      	cmp	r2, #0
 800609e:	d0c9      	beq.n	8006034 <HAL_ADCEx_MultiModeConfigChannel+0x34>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80060a0:	4810      	ldr	r0, [pc, #64]	; (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80060a2:	6882      	ldr	r2, [r0, #8]
 80060a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80060a8:	684c      	ldr	r4, [r1, #4]
 80060aa:	4322      	orrs	r2, r4
 80060ac:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80060b0:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80060b4:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80060ba:	6890      	ldr	r0, [r2, #8]
 80060bc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80060c0:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060c2:	4302      	orrs	r2, r0
 80060c4:	f012 0f01 	tst.w	r2, #1
 80060c8:	d1d8      	bne.n	800607c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        MODIFY_REG(tmpADC_Common->CCR,
 80060ca:	4c06      	ldr	r4, [pc, #24]	; (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80060cc:	68a0      	ldr	r0, [r4, #8]
 80060ce:	680a      	ldr	r2, [r1, #0]
 80060d0:	6889      	ldr	r1, [r1, #8]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80060d8:	f021 010f 	bic.w	r1, r1, #15
 80060dc:	430a      	orrs	r2, r1
 80060de:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060e0:	2000      	movs	r0, #0
 80060e2:	e7c4      	b.n	800606e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80060e4:	50000300 	.word	0x50000300
 80060e8:	50000100 	.word	0x50000100

080060ec <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80060ec:	b1a0      	cbz	r0, 8006118 <HAL_CORDIC_Init+0x2c>
{
 80060ee:	b510      	push	{r4, lr}
 80060f0:	4604      	mov	r4, r0

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80060f2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80060f6:	b153      	cbz	r3, 800610e <HAL_CORDIC_Init+0x22>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80060f8:	2000      	movs	r0, #0
 80060fa:	6260      	str	r0, [r4, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80060fc:	6060      	str	r0, [r4, #4]
  hcordic->pOutBuff = NULL;
 80060fe:	60a0      	str	r0, [r4, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006100:	60e0      	str	r0, [r4, #12]
  hcordic->NbCalcToGet = 0U;
 8006102:	6120      	str	r0, [r4, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006104:	6160      	str	r0, [r4, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006106:	2301      	movs	r3, #1
 8006108:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
}
 800610c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800610e:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8006112:	f7fe fa97 	bl	8004644 <HAL_CORDIC_MspInit>
 8006116:	e7ef      	b.n	80060f8 <HAL_CORDIC_Init+0xc>
    return HAL_ERROR;
 8006118:	2001      	movs	r0, #1
}
 800611a:	4770      	bx	lr

0800611c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800611c:	4907      	ldr	r1, [pc, #28]	; (800613c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800611e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006120:	0203      	lsls	r3, r0, #8
 8006122:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006126:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800612a:	0412      	lsls	r2, r2, #16
 800612c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800612e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006138:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800613a:	4770      	bx	lr
 800613c:	e000ed00 	.word	0xe000ed00

08006140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006140:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006142:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <HAL_NVIC_SetPriority+0x64>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800614a:	f1c3 0c07 	rsb	ip, r3, #7
 800614e:	f1bc 0f04 	cmp.w	ip, #4
 8006152:	bf28      	it	cs
 8006154:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006158:	f103 0e04 	add.w	lr, r3, #4
 800615c:	f1be 0f06 	cmp.w	lr, #6
 8006160:	bf8c      	ite	hi
 8006162:	3b03      	subhi	r3, #3
 8006164:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006166:	f04f 3eff 	mov.w	lr, #4294967295
 800616a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800616e:	ea21 010c 	bic.w	r1, r1, ip
 8006172:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006174:	fa0e fe03 	lsl.w	lr, lr, r3
 8006178:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800617c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800617e:	2800      	cmp	r0, #0
 8006180:	db09      	blt.n	8006196 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006182:	0109      	lsls	r1, r1, #4
 8006184:	b2c9      	uxtb	r1, r1
 8006186:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800618a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800618e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006192:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006196:	f000 000f 	and.w	r0, r0, #15
 800619a:	0109      	lsls	r1, r1, #4
 800619c:	b2c9      	uxtb	r1, r1
 800619e:	4b02      	ldr	r3, [pc, #8]	; (80061a8 <HAL_NVIC_SetPriority+0x68>)
 80061a0:	5419      	strb	r1, [r3, r0]
 80061a2:	e7f6      	b.n	8006192 <HAL_NVIC_SetPriority+0x52>
 80061a4:	e000ed00 	.word	0xe000ed00
 80061a8:	e000ed14 	.word	0xe000ed14

080061ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80061ac:	2800      	cmp	r0, #0
 80061ae:	db07      	blt.n	80061c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061b0:	0941      	lsrs	r1, r0, #5
 80061b2:	f000 001f 	and.w	r0, r0, #31
 80061b6:	2301      	movs	r3, #1
 80061b8:	4083      	lsls	r3, r0
 80061ba:	4a02      	ldr	r2, [pc, #8]	; (80061c4 <HAL_NVIC_EnableIRQ+0x18>)
 80061bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	e000e100 	.word	0xe000e100

080061c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061c8:	3801      	subs	r0, #1
 80061ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80061ce:	d20b      	bcs.n	80061e8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80061d4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061d6:	4a05      	ldr	r2, [pc, #20]	; (80061ec <HAL_SYSTICK_Config+0x24>)
 80061d8:	21f0      	movs	r1, #240	; 0xf0
 80061da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061de:	2000      	movs	r0, #0
 80061e0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061e2:	2207      	movs	r2, #7
 80061e4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80061e8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80061ea:	4770      	bx	lr
 80061ec:	e000ed00 	.word	0xe000ed00

080061f0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80061f0:	b170      	cbz	r0, 8006210 <HAL_DAC_Init+0x20>
{
 80061f2:	b510      	push	{r4, lr}
 80061f4:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80061f6:	7903      	ldrb	r3, [r0, #4]
 80061f8:	b133      	cbz	r3, 8006208 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80061fa:	2302      	movs	r3, #2
 80061fc:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80061fe:	2000      	movs	r0, #0
 8006200:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006202:	2301      	movs	r3, #1
 8006204:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8006206:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006208:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800620a:	f7fe fa5d 	bl	80046c8 <HAL_DAC_MspInit>
 800620e:	e7f4      	b.n	80061fa <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8006210:	2001      	movs	r0, #1
}
 8006212:	4770      	bx	lr

08006214 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006214:	7943      	ldrb	r3, [r0, #5]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d02e      	beq.n	8006278 <HAL_DAC_Start+0x64>
{
 800621a:	b570      	push	{r4, r5, r6, lr}
 800621c:	4604      	mov	r4, r0
 800621e:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8006220:	2001      	movs	r0, #1
 8006222:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006224:	2302      	movs	r3, #2
 8006226:	7123      	strb	r3, [r4, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006228:	6822      	ldr	r2, [r4, #0]
 800622a:	6811      	ldr	r1, [r2, #0]
 800622c:	f005 0610 	and.w	r6, r5, #16
 8006230:	fa00 f306 	lsl.w	r3, r0, r6
 8006234:	430b      	orrs	r3, r1
 8006236:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8006238:	f7ff f8e8 	bl	800540c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800623c:	b97d      	cbnz	r5, 800625e <HAL_DAC_Start+0x4a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	6813      	ldr	r3, [r2, #0]
 8006242:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006246:	2b02      	cmp	r3, #2
 8006248:	d004      	beq.n	8006254 <HAL_DAC_Start+0x40>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800624a:	2301      	movs	r3, #1
 800624c:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800624e:	2000      	movs	r0, #0
 8006250:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8006252:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006254:	6853      	ldr	r3, [r2, #4]
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	6053      	str	r3, [r2, #4]
 800625c:	e7f5      	b.n	800624a <HAL_DAC_Start+0x36>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800625e:	6821      	ldr	r1, [r4, #0]
 8006260:	680a      	ldr	r2, [r1, #0]
 8006262:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8006266:	2302      	movs	r3, #2
 8006268:	40b3      	lsls	r3, r6
 800626a:	429a      	cmp	r2, r3
 800626c:	d1ed      	bne.n	800624a <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800626e:	684b      	ldr	r3, [r1, #4]
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	604b      	str	r3, [r1, #4]
 8006276:	e7e8      	b.n	800624a <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 8006278:	2002      	movs	r0, #2
}
 800627a:	4770      	bx	lr

0800627c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800627c:	b410      	push	{r4}
 800627e:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8006280:	2400      	movs	r4, #0
 8006282:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006284:	6800      	ldr	r0, [r0, #0]
 8006286:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006288:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 800628a:	b951      	cbnz	r1, 80062a2 <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800628c:	9901      	ldr	r1, [sp, #4]
 800628e:	3108      	adds	r1, #8
 8006290:	440a      	add	r2, r1
 8006292:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006294:	9a01      	ldr	r2, [sp, #4]
 8006296:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8006298:	2000      	movs	r0, #0
 800629a:	b003      	add	sp, #12
 800629c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a0:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80062a2:	9901      	ldr	r1, [sp, #4]
 80062a4:	3114      	adds	r1, #20
 80062a6:	440a      	add	r2, r1
 80062a8:	9201      	str	r2, [sp, #4]
 80062aa:	e7f3      	b.n	8006294 <HAL_DAC_SetValue+0x18>

080062ac <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80062ac:	7943      	ldrb	r3, [r0, #5]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	f000 80e8 	beq.w	8006484 <HAL_DAC_ConfigChannel+0x1d8>
{
 80062b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b8:	4604      	mov	r4, r0
 80062ba:	460e      	mov	r6, r1
 80062bc:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 80062be:	2301      	movs	r3, #1
 80062c0:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062c2:	2302      	movs	r3, #2
 80062c4:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80062c6:	688b      	ldr	r3, [r1, #8]
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d071      	beq.n	80063b0 <HAL_DAC_ConfigChannel+0x104>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80062cc:	69f3      	ldr	r3, [r6, #28]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	f000 80b8 	beq.w	8006444 <HAL_DAC_ConfigChannel+0x198>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80062d8:	f005 0510 	and.w	r5, r5, #16
 80062dc:	2207      	movs	r2, #7
 80062de:	40aa      	lsls	r2, r5
 80062e0:	43d2      	mvns	r2, r2
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80062e2:	69b1      	ldr	r1, [r6, #24]
 80062e4:	2901      	cmp	r1, #1
 80062e6:	f000 80ba 	beq.w	800645e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80062ea:	2902      	cmp	r1, #2
 80062ec:	f000 80b9 	beq.w	8006462 <HAL_DAC_ConfigChannel+0x1b6>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80062f0:	6971      	ldr	r1, [r6, #20]
 80062f2:	fab1 f181 	clz	r1, r1
 80062f6:	0949      	lsrs	r1, r1, #5
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80062f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80062fc:	40a8      	lsls	r0, r5
 80062fe:	ea23 0300 	bic.w	r3, r3, r0
 8006302:	4013      	ands	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006308:	40aa      	lsls	r2, r5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800630a:	ea23 0302 	bic.w	r3, r3, r2
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800630e:	7932      	ldrb	r2, [r6, #4]
 8006310:	2a01      	cmp	r2, #1
 8006312:	bf14      	ite	ne
 8006314:	2200      	movne	r2, #0
 8006316:	2201      	moveq	r2, #1
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006318:	68b7      	ldr	r7, [r6, #8]
 800631a:	6970      	ldr	r0, [r6, #20]
 800631c:	4307      	orrs	r7, r0
 800631e:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8006322:	7972      	ldrb	r2, [r6, #5]
 8006324:	2a01      	cmp	r2, #1
 8006326:	bf14      	ite	ne
 8006328:	2200      	movne	r2, #0
 800632a:	2201      	moveq	r2, #1
 800632c:	ea47 2742 	orr.w	r7, r7, r2, lsl #9
 8006330:	430f      	orrs	r7, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006332:	f423 4840 	bic.w	r8, r3, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006336:	6833      	ldr	r3, [r6, #0]
 8006338:	2b02      	cmp	r3, #2
 800633a:	f000 8094 	beq.w	8006466 <HAL_DAC_ConfigChannel+0x1ba>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800633e:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006342:	40af      	lsls	r7, r5
 8006344:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800634c:	6821      	ldr	r1, [r4, #0]
 800634e:	680b      	ldr	r3, [r1, #0]
 8006350:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006354:	40aa      	lsls	r2, r5
 8006356:	ea23 0302 	bic.w	r3, r3, r2
 800635a:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800635c:	6821      	ldr	r1, [r4, #0]
 800635e:	680a      	ldr	r2, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006360:	f640 73fe 	movw	r3, #4094	; 0xffe
 8006364:	40ab      	lsls	r3, r5
 8006366:	ea22 0203 	bic.w	r2, r2, r3
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800636a:	68f3      	ldr	r3, [r6, #12]
 800636c:	40ab      	lsls	r3, r5
 800636e:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006370:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006372:	6821      	ldr	r1, [r4, #0]
 8006374:	680b      	ldr	r3, [r1, #0]
 8006376:	22c0      	movs	r2, #192	; 0xc0
 8006378:	40aa      	lsls	r2, r5
 800637a:	ea23 0302 	bic.w	r3, r3, r2
 800637e:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006380:	68f3      	ldr	r3, [r6, #12]
 8006382:	f3c3 0183 	ubfx	r1, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	6e02      	ldr	r2, [r0, #96]	; 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800638a:	6933      	ldr	r3, [r6, #16]
 800638c:	019b      	lsls	r3, r3, #6
 800638e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006392:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006394:	40ab      	lsls	r3, r5
 8006396:	f640 710f 	movw	r1, #3855	; 0xf0f
 800639a:	40a9      	lsls	r1, r5
 800639c:	ea22 0201 	bic.w	r2, r2, r1
 80063a0:	4313      	orrs	r3, r2
 80063a2:	6603      	str	r3, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80063a4:	2301      	movs	r3, #1
 80063a6:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80063a8:	2000      	movs	r0, #0
 80063aa:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 80063ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 80063b0:	f7ff f826 	bl	8005400 <HAL_GetTick>
 80063b4:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80063b6:	b17d      	cbz	r5, 80063d8 <HAL_DAC_ConfigChannel+0x12c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	2b00      	cmp	r3, #0
 80063be:	da3a      	bge.n	8006436 <HAL_DAC_ConfigChannel+0x18a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80063c0:	f7ff f81e 	bl	8005400 <HAL_GetTick>
 80063c4:	1bc0      	subs	r0, r0, r7
 80063c6:	2801      	cmp	r0, #1
 80063c8:	d9f6      	bls.n	80063b8 <HAL_DAC_ConfigChannel+0x10c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	f043 0308 	orr.w	r3, r3, #8
 80063d0:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80063d2:	2003      	movs	r0, #3
 80063d4:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80063d6:	e7e9      	b.n	80063ac <HAL_DAC_ConfigChannel+0x100>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80063e0:	d00b      	beq.n	80063fa <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80063e2:	f7ff f80d 	bl	8005400 <HAL_GetTick>
 80063e6:	1bc0      	subs	r0, r0, r7
 80063e8:	2801      	cmp	r0, #1
 80063ea:	d9f5      	bls.n	80063d8 <HAL_DAC_ConfigChannel+0x12c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	f043 0308 	orr.w	r3, r3, #8
 80063f2:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80063f4:	2003      	movs	r0, #3
 80063f6:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80063f8:	e7d8      	b.n	80063ac <HAL_DAC_ConfigChannel+0x100>
      HAL_Delay(1);
 80063fa:	2001      	movs	r0, #1
 80063fc:	f7ff f806 	bl	800540c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006404:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006406:	6820      	ldr	r0, [r4, #0]
 8006408:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800640a:	f005 0210 	and.w	r2, r5, #16
 800640e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006412:	4091      	lsls	r1, r2
 8006414:	ea23 0301 	bic.w	r3, r3, r1
 8006418:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800641a:	4091      	lsls	r1, r2
 800641c:	430b      	orrs	r3, r1
 800641e:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006424:	21ff      	movs	r1, #255	; 0xff
 8006426:	4091      	lsls	r1, r2
 8006428:	ea23 0301 	bic.w	r3, r3, r1
 800642c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800642e:	4091      	lsls	r1, r2
 8006430:	430b      	orrs	r3, r1
 8006432:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006434:	e74a      	b.n	80062cc <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 8006436:	2001      	movs	r0, #1
 8006438:	f7fe ffe8 	bl	800540c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
 8006442:	e7e0      	b.n	8006406 <HAL_DAC_ConfigChannel+0x15a>
    tmpreg1 = hdac->Instance->CCR;
 8006444:	6821      	ldr	r1, [r4, #0]
 8006446:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006448:	f005 0010 	and.w	r0, r5, #16
 800644c:	231f      	movs	r3, #31
 800644e:	4083      	lsls	r3, r0
 8006450:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006454:	6a33      	ldr	r3, [r6, #32]
 8006456:	4083      	lsls	r3, r0
 8006458:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 800645a:	638b      	str	r3, [r1, #56]	; 0x38
 800645c:	e73a      	b.n	80062d4 <HAL_DAC_ConfigChannel+0x28>
    connectOnChip = 0x00000000UL;
 800645e:	2100      	movs	r1, #0
 8006460:	e74a      	b.n	80062f8 <HAL_DAC_ConfigChannel+0x4c>
    connectOnChip = DAC_MCR_MODE1_0;
 8006462:	2101      	movs	r1, #1
 8006464:	e748      	b.n	80062f8 <HAL_DAC_ConfigChannel+0x4c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006466:	f001 fca7 	bl	8007db8 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <HAL_DAC_ConfigChannel+0x1dc>)
 800646c:	4298      	cmp	r0, r3
 800646e:	d902      	bls.n	8006476 <HAL_DAC_ConfigChannel+0x1ca>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006470:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8006474:	e765      	b.n	8006342 <HAL_DAC_ConfigChannel+0x96>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006476:	4b05      	ldr	r3, [pc, #20]	; (800648c <HAL_DAC_ConfigChannel+0x1e0>)
 8006478:	4298      	cmp	r0, r3
 800647a:	f67f af62 	bls.w	8006342 <HAL_DAC_ConfigChannel+0x96>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800647e:	f448 4880 	orr.w	r8, r8, #16384	; 0x4000
 8006482:	e75e      	b.n	8006342 <HAL_DAC_ConfigChannel+0x96>
  __HAL_LOCK(hdac);
 8006484:	2002      	movs	r0, #2
}
 8006486:	4770      	bx	lr
 8006488:	09896800 	.word	0x09896800
 800648c:	04c4b400 	.word	0x04c4b400

08006490 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006490:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006492:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8006494:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8006496:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006498:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800649a:	b114      	cbz	r4, 80064a2 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800649c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800649e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80064a0:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064a2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80064a4:	f004 0c1f 	and.w	ip, r4, #31
 80064a8:	2401      	movs	r4, #1
 80064aa:	fa04 f40c 	lsl.w	r4, r4, ip
 80064ae:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80064b0:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064b2:	6804      	ldr	r4, [r0, #0]
 80064b4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064b6:	6883      	ldr	r3, [r0, #8]
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d005      	beq.n	80064c8 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80064bc:	6803      	ldr	r3, [r0, #0]
 80064be:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80064c0:	6803      	ldr	r3, [r0, #0]
 80064c2:	60da      	str	r2, [r3, #12]
  }
}
 80064c4:	bc30      	pop	{r4, r5}
 80064c6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80064c8:	6803      	ldr	r3, [r0, #0]
 80064ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80064cc:	6803      	ldr	r3, [r0, #0]
 80064ce:	60d9      	str	r1, [r3, #12]
 80064d0:	e7f8      	b.n	80064c4 <DMA_SetConfig+0x34>
	...

080064d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064d4:	b410      	push	{r4}
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80064d6:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80064d8:	4c0d      	ldr	r4, [pc, #52]	; (8006510 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80064da:	4a0e      	ldr	r2, [pc, #56]	; (8006514 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80064dc:	490e      	ldr	r1, [pc, #56]	; (8006518 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80064de:	42a3      	cmp	r3, r4
 80064e0:	bf88      	it	hi
 80064e2:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80064e4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80064e6:	f021 0103 	bic.w	r1, r1, #3
 80064ea:	440a      	add	r2, r1
 80064ec:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064ee:	4a0b      	ldr	r2, [pc, #44]	; (800651c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 80064f0:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	3b08      	subs	r3, #8
 80064f6:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80064f8:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80064fc:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8006500:	2201      	movs	r2, #1
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	6503      	str	r3, [r0, #80]	; 0x50
}
 8006508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40020407 	.word	0x40020407
 8006514:	40020800 	.word	0x40020800
 8006518:	40020820 	.word	0x40020820
 800651c:	40020880 	.word	0x40020880
 8006520:	cccccccd 	.word	0xcccccccd

08006524 <HAL_DMA_Init>:
  if (hdma == NULL)
 8006524:	2800      	cmp	r0, #0
 8006526:	d060      	beq.n	80065ea <HAL_DMA_Init+0xc6>
{
 8006528:	b510      	push	{r4, lr}
 800652a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800652c:	6802      	ldr	r2, [r0, #0]
 800652e:	4b30      	ldr	r3, [pc, #192]	; (80065f0 <HAL_DMA_Init+0xcc>)
 8006530:	429a      	cmp	r2, r3
 8006532:	d83f      	bhi.n	80065b4 <HAL_DMA_Init+0x90>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006534:	4b2f      	ldr	r3, [pc, #188]	; (80065f4 <HAL_DMA_Init+0xd0>)
 8006536:	4413      	add	r3, r2
 8006538:	492f      	ldr	r1, [pc, #188]	; (80065f8 <HAL_DMA_Init+0xd4>)
 800653a:	fba1 1303 	umull	r1, r3, r1, r3
 800653e:	091b      	lsrs	r3, r3, #4
 8006540:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8006542:	492e      	ldr	r1, [pc, #184]	; (80065fc <HAL_DMA_Init+0xd8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006544:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006546:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8006548:	2302      	movs	r3, #2
 800654a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800654e:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006550:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8006554:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8006558:	68a3      	ldr	r3, [r4, #8]
 800655a:	68e0      	ldr	r0, [r4, #12]
 800655c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800655e:	6920      	ldr	r0, [r4, #16]
 8006560:	4303      	orrs	r3, r0
 8006562:	6960      	ldr	r0, [r4, #20]
 8006564:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006566:	69a0      	ldr	r0, [r4, #24]
 8006568:	4303      	orrs	r3, r0
 800656a:	69e0      	ldr	r0, [r4, #28]
 800656c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800656e:	6a20      	ldr	r0, [r4, #32]
 8006570:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8006572:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8006574:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006576:	4620      	mov	r0, r4
 8006578:	f7ff ffac 	bl	80064d4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800657c:	68a3      	ldr	r3, [r4, #8]
 800657e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006582:	bf04      	itt	eq
 8006584:	2300      	moveq	r3, #0
 8006586:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006588:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800658a:	7922      	ldrb	r2, [r4, #4]
 800658c:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800658e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006590:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006592:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006594:	6863      	ldr	r3, [r4, #4]
 8006596:	1e5a      	subs	r2, r3, #1
 8006598:	2a03      	cmp	r2, #3
 800659a:	d914      	bls.n	80065c6 <HAL_DMA_Init+0xa2>
    hdma->DMAmuxRequestGen = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80065a0:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80065a2:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065a4:	2000      	movs	r0, #0
 80065a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80065ae:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80065b2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065b4:	4b12      	ldr	r3, [pc, #72]	; (8006600 <HAL_DMA_Init+0xdc>)
 80065b6:	4413      	add	r3, r2
 80065b8:	490f      	ldr	r1, [pc, #60]	; (80065f8 <HAL_DMA_Init+0xd4>)
 80065ba:	fba1 1303 	umull	r1, r3, r1, r3
 80065be:	091b      	lsrs	r3, r3, #4
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4910      	ldr	r1, [pc, #64]	; (8006604 <HAL_DMA_Init+0xe0>)
 80065c4:	e7be      	b.n	8006544 <HAL_DMA_Init+0x20>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065c6:	b2db      	uxtb	r3, r3

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065c8:	4a0f      	ldr	r2, [pc, #60]	; (8006608 <HAL_DMA_Init+0xe4>)
 80065ca:	441a      	add	r2, r3
 80065cc:	0092      	lsls	r2, r2, #2
 80065ce:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065d0:	490e      	ldr	r1, [pc, #56]	; (800660c <HAL_DMA_Init+0xe8>)
 80065d2:	65a1      	str	r1, [r4, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80065d4:	3b01      	subs	r3, #1
 80065d6:	2101      	movs	r1, #1
 80065d8:	fa01 f303 	lsl.w	r3, r1, r3
 80065dc:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80065e6:	605a      	str	r2, [r3, #4]
 80065e8:	e7dc      	b.n	80065a4 <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 80065ea:	2001      	movs	r0, #1
}
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40020407 	.word	0x40020407
 80065f4:	bffdfff8 	.word	0xbffdfff8
 80065f8:	cccccccd 	.word	0xcccccccd
 80065fc:	40020000 	.word	0x40020000
 8006600:	bffdfbf8 	.word	0xbffdfbf8
 8006604:	40020400 	.word	0x40020400
 8006608:	1000823f 	.word	0x1000823f
 800660c:	40020940 	.word	0x40020940

08006610 <HAL_DMA_Start_IT>:
{
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8006614:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8006618:	2801      	cmp	r0, #1
 800661a:	d041      	beq.n	80066a0 <HAL_DMA_Start_IT+0x90>
 800661c:	2001      	movs	r0, #1
 800661e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006622:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8006626:	b2c0      	uxtb	r0, r0
 8006628:	2801      	cmp	r0, #1
 800662a:	d004      	beq.n	8006636 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 800662c:	2300      	movs	r3, #0
 800662e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8006632:	2002      	movs	r0, #2
}
 8006634:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8006636:	2002      	movs	r0, #2
 8006638:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800663c:	2000      	movs	r0, #0
 800663e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006640:	6825      	ldr	r5, [r4, #0]
 8006642:	6828      	ldr	r0, [r5, #0]
 8006644:	f020 0001 	bic.w	r0, r0, #1
 8006648:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800664a:	4620      	mov	r0, r4
 800664c:	f7ff ff20 	bl	8006490 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006650:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006652:	b1d3      	cbz	r3, 800668a <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	6813      	ldr	r3, [r2, #0]
 8006658:	f043 030e 	orr.w	r3, r3, #14
 800665c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800665e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006666:	d003      	beq.n	8006670 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800666e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006670:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006672:	b11b      	cbz	r3, 800667c <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800667a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800667c:	6822      	ldr	r2, [r4, #0]
 800667e:	6813      	ldr	r3, [r2, #0]
 8006680:	f043 0301 	orr.w	r3, r3, #1
 8006684:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006686:	2000      	movs	r0, #0
 8006688:	e7d4      	b.n	8006634 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	6813      	ldr	r3, [r2, #0]
 800668e:	f023 0304 	bic.w	r3, r3, #4
 8006692:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006694:	6822      	ldr	r2, [r4, #0]
 8006696:	6813      	ldr	r3, [r2, #0]
 8006698:	f043 030a 	orr.w	r3, r3, #10
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e7de      	b.n	800665e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80066a0:	2002      	movs	r0, #2
 80066a2:	e7c7      	b.n	8006634 <HAL_DMA_Start_IT+0x24>

080066a4 <HAL_DMA_Abort>:
{
 80066a4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066a6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	2a02      	cmp	r2, #2
 80066ae:	d009      	beq.n	80066c4 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066b0:	2204      	movs	r2, #4
 80066b2:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80066b4:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80066c2:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066c4:	6801      	ldr	r1, [r0, #0]
 80066c6:	680a      	ldr	r2, [r1, #0]
 80066c8:	f022 020e 	bic.w	r2, r2, #14
 80066cc:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80066d0:	680a      	ldr	r2, [r1, #0]
 80066d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066d6:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 80066d8:	6801      	ldr	r1, [r0, #0]
 80066da:	680a      	ldr	r2, [r1, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066e2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80066e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066e6:	f002 011f 	and.w	r1, r2, #31
 80066ea:	2201      	movs	r2, #1
 80066ec:	408a      	lsls	r2, r1
 80066ee:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066f2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80066f4:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 80066f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066f8:	b142      	cbz	r2, 800670c <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066fa:	6811      	ldr	r1, [r2, #0]
 80066fc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006700:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006702:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006704:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8006706:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006708:	2000      	movs	r0, #0
 800670a:	e7d4      	b.n	80066b6 <HAL_DMA_Abort+0x12>
 800670c:	2000      	movs	r0, #0
 800670e:	e7d2      	b.n	80066b6 <HAL_DMA_Abort+0x12>

08006710 <HAL_DMA_Abort_IT>:
{
 8006710:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006712:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d009      	beq.n	8006730 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800671c:	2304      	movs	r3, #4
 800671e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006720:	2301      	movs	r3, #1
 8006722:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006726:	2200      	movs	r2, #0
 8006728:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 800672c:	4618      	mov	r0, r3
}
 800672e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006730:	6802      	ldr	r2, [r0, #0]
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	f023 030e 	bic.w	r3, r3, #14
 8006738:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800673a:	6802      	ldr	r2, [r0, #0]
 800673c:	6813      	ldr	r3, [r2, #0]
 800673e:	f023 0301 	bic.w	r3, r3, #1
 8006742:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006744:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006746:	6813      	ldr	r3, [r2, #0]
 8006748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800674c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800674e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006750:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006752:	f003 021f 	and.w	r2, r3, #31
 8006756:	2301      	movs	r3, #1
 8006758:	4093      	lsls	r3, r2
 800675a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800675c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800675e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006760:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006762:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006764:	b133      	cbz	r3, 8006774 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800676c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800676e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006770:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006772:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006774:	2301      	movs	r3, #1
 8006776:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800677a:	2300      	movs	r3, #0
 800677c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8006780:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006782:	b113      	cbz	r3, 800678a <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8006784:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006786:	2000      	movs	r0, #0
 8006788:	e7d1      	b.n	800672e <HAL_DMA_Abort_IT+0x1e>
 800678a:	2000      	movs	r0, #0
 800678c:	e7cf      	b.n	800672e <HAL_DMA_Abort_IT+0x1e>

0800678e <HAL_DMA_IRQHandler>:
{
 800678e:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006790:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006792:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006794:	6804      	ldr	r4, [r0, #0]
 8006796:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006798:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	2204      	movs	r2, #4
 80067a0:	409a      	lsls	r2, r3
 80067a2:	420a      	tst	r2, r1
 80067a4:	d015      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x44>
 80067a6:	f015 0f04 	tst.w	r5, #4
 80067aa:	d012      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	f013 0f20 	tst.w	r3, #32
 80067b2:	d103      	bne.n	80067bc <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	f023 0304 	bic.w	r3, r3, #4
 80067ba:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80067bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80067be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80067c0:	f003 021f 	and.w	r2, r3, #31
 80067c4:	2304      	movs	r3, #4
 80067c6:	4093      	lsls	r3, r2
 80067c8:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80067ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80067cc:	b103      	cbz	r3, 80067d0 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 80067ce:	4798      	blx	r3
}
 80067d0:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80067d2:	2202      	movs	r2, #2
 80067d4:	409a      	lsls	r2, r3
 80067d6:	420a      	tst	r2, r1
 80067d8:	d01c      	beq.n	8006814 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 80067da:	f015 0f02 	tst.w	r5, #2
 80067de:	d019      	beq.n	8006814 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	f013 0f20 	tst.w	r3, #32
 80067e6:	d106      	bne.n	80067f6 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	f023 030a 	bic.w	r3, r3, #10
 80067ee:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80067f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80067f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80067fa:	f003 021f 	and.w	r2, r3, #31
 80067fe:	2302      	movs	r3, #2
 8006800:	4093      	lsls	r3, r2
 8006802:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8006804:	2300      	movs	r3, #0
 8006806:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800680a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0df      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8006810:	4798      	blx	r3
 8006812:	e7dd      	b.n	80067d0 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006814:	2208      	movs	r2, #8
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	420b      	tst	r3, r1
 800681c:	d0d8      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800681e:	f015 0f08 	tst.w	r5, #8
 8006822:	d0d5      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	f023 030e 	bic.w	r3, r3, #14
 800682a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800682c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800682e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006830:	f003 031f 	and.w	r3, r3, #31
 8006834:	2201      	movs	r2, #1
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800683c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800683e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006842:	2300      	movs	r3, #0
 8006844:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8006848:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0c0      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800684e:	4798      	blx	r3
  return;
 8006850:	e7be      	b.n	80067d0 <HAL_DMA_IRQHandler+0x42>
	...

08006854 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006854:	2800      	cmp	r0, #0
 8006856:	f000 80f9 	beq.w	8006a4c <HAL_FDCAN_Init+0x1f8>
{
 800685a:	b538      	push	{r3, r4, r5, lr}
 800685c:	4604      	mov	r4, r0

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800685e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006862:	b1d3      	cbz	r3, 800689a <HAL_FDCAN_Init+0x46>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006864:	6822      	ldr	r2, [r4, #0]
 8006866:	6993      	ldr	r3, [r2, #24]
 8006868:	f023 0310 	bic.w	r3, r3, #16
 800686c:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800686e:	f7fe fdc7 	bl	8005400 <HAL_GetTick>
 8006872:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	699a      	ldr	r2, [r3, #24]
 8006878:	f012 0f08 	tst.w	r2, #8
 800687c:	d012      	beq.n	80068a4 <HAL_FDCAN_Init+0x50>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800687e:	f7fe fdbf 	bl	8005400 <HAL_GetTick>
 8006882:	1b40      	subs	r0, r0, r5
 8006884:	280a      	cmp	r0, #10
 8006886:	d9f5      	bls.n	8006874 <HAL_FDCAN_Init+0x20>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006888:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	6623      	str	r3, [r4, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006890:	2303      	movs	r3, #3
 8006892:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8006896:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006898:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 800689a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 800689e:	f7fd ffc9 	bl	8004834 <HAL_FDCAN_MspInit>
 80068a2:	e7df      	b.n	8006864 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 80068ac:	f7fe fda8 	bl	8005400 <HAL_GetTick>
 80068b0:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	f012 0f01 	tst.w	r2, #1
 80068ba:	d10d      	bne.n	80068d8 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80068bc:	f7fe fda0 	bl	8005400 <HAL_GetTick>
 80068c0:	1b40      	subs	r0, r0, r5
 80068c2:	280a      	cmp	r0, #10
 80068c4:	d9f5      	bls.n	80068b2 <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80068c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80068c8:	f043 0301 	orr.w	r3, r3, #1
 80068cc:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80068ce:	2303      	movs	r3, #3
 80068d0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80068d4:	2001      	movs	r0, #1
 80068d6:	e7df      	b.n	8006898 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	f042 0202 	orr.w	r2, r2, #2
 80068de:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	4b5b      	ldr	r3, [pc, #364]	; (8006a50 <HAL_FDCAN_Init+0x1fc>)
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d047      	beq.n	8006978 <HAL_FDCAN_Init+0x124>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80068e8:	7c23      	ldrb	r3, [r4, #16]
 80068ea:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80068ec:	6822      	ldr	r2, [r4, #0]
 80068ee:	6993      	ldr	r3, [r2, #24]
 80068f0:	bf0c      	ite	eq
 80068f2:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80068f6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80068fa:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80068fc:	7c63      	ldrb	r3, [r4, #17]
 80068fe:	2b01      	cmp	r3, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	6993      	ldr	r3, [r2, #24]
 8006904:	bf0c      	ite	eq
 8006906:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800690a:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 800690e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006910:	7ca3      	ldrb	r3, [r4, #18]
 8006912:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006914:	6822      	ldr	r2, [r4, #0]
 8006916:	6993      	ldr	r3, [r2, #24]
 8006918:	bf0c      	ite	eq
 800691a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800691e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006922:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006924:	6822      	ldr	r2, [r4, #0]
 8006926:	6993      	ldr	r3, [r2, #24]
 8006928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692c:	68a1      	ldr	r1, [r4, #8]
 800692e:	430b      	orrs	r3, r1
 8006930:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	6993      	ldr	r3, [r2, #24]
 8006936:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 800693a:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	6913      	ldr	r3, [r2, #16]
 8006940:	f023 0310 	bic.w	r3, r3, #16
 8006944:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006946:	68e3      	ldr	r3, [r4, #12]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d01b      	beq.n	8006984 <HAL_FDCAN_Init+0x130>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800694c:	b1fb      	cbz	r3, 800698e <HAL_FDCAN_Init+0x13a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800694e:	2b02      	cmp	r3, #2
 8006950:	d065      	beq.n	8006a1e <HAL_FDCAN_Init+0x1ca>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006952:	6822      	ldr	r2, [r4, #0]
 8006954:	6993      	ldr	r3, [r2, #24]
 8006956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695a:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800695c:	6822      	ldr	r2, [r4, #0]
 800695e:	6913      	ldr	r3, [r2, #16]
 8006960:	f043 0310 	orr.w	r3, r3, #16
 8006964:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006966:	68e3      	ldr	r3, [r4, #12]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d110      	bne.n	800698e <HAL_FDCAN_Init+0x13a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	6993      	ldr	r3, [r2, #24]
 8006970:	f043 0320 	orr.w	r3, r3, #32
 8006974:	6193      	str	r3, [r2, #24]
 8006976:	e00a      	b.n	800698e <HAL_FDCAN_Init+0x13a>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006978:	6862      	ldr	r2, [r4, #4]
 800697a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800697e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8006982:	e7b1      	b.n	80068e8 <HAL_FDCAN_Init+0x94>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006984:	6822      	ldr	r2, [r4, #0]
 8006986:	6993      	ldr	r3, [r2, #24]
 8006988:	f043 0304 	orr.w	r3, r3, #4
 800698c:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	69a3      	ldr	r3, [r4, #24]
 8006992:	1e59      	subs	r1, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006994:	69e3      	ldr	r3, [r4, #28]
 8006996:	3b01      	subs	r3, #1
 8006998:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800699a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800699e:	6a21      	ldr	r1, [r4, #32]
 80069a0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80069a2:	430b      	orrs	r3, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80069a4:	6961      	ldr	r1, [r4, #20]
 80069a6:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80069a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80069ac:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069b4:	d039      	beq.n	8006a2a <HAL_FDCAN_Init+0x1d6>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80069bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80069be:	430b      	orrs	r3, r1
 80069c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80069c4:	4b23      	ldr	r3, [pc, #140]	; (8006a54 <HAL_FDCAN_Init+0x200>)
 80069c6:	6423      	str	r3, [r4, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80069c8:	6821      	ldr	r1, [r4, #0]
 80069ca:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80069ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80069d0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80069d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80069d8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80069dc:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <HAL_FDCAN_Init+0x204>)
 80069de:	6462      	str	r2, [r4, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80069e0:	6821      	ldr	r1, [r4, #0]
 80069e2:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80069e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80069e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80069ec:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80069f0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80069f4:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <HAL_FDCAN_Init+0x208>)
 80069f6:	64a2      	str	r2, [r4, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80069f8:	32d8      	adds	r2, #216	; 0xd8
 80069fa:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80069fc:	32d8      	adds	r2, #216	; 0xd8
 80069fe:	6522      	str	r2, [r4, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006a00:	3218      	adds	r2, #24
 8006a02:	6562      	str	r2, [r4, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006a04:	2100      	movs	r1, #0
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a06:	32d8      	adds	r2, #216	; 0xd8
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006a08:	f843 1b04 	str.w	r1, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d1fb      	bne.n	8006a08 <HAL_FDCAN_Init+0x1b4>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006a10:	2000      	movs	r0, #0
 8006a12:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a14:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8006a1c:	e73c      	b.n	8006898 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	6993      	ldr	r3, [r2, #24]
 8006a22:	f043 0320 	orr.w	r3, r3, #32
 8006a26:	6193      	str	r3, [r2, #24]
 8006a28:	e7b1      	b.n	800698e <HAL_FDCAN_Init+0x13a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a2a:	6822      	ldr	r2, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a2e:	1e59      	subs	r1, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a32:	3b01      	subs	r3, #1
 8006a34:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a36:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a3a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006a3c:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a3e:	430b      	orrs	r3, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006a40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a42:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a48:	60d3      	str	r3, [r2, #12]
 8006a4a:	e7b4      	b.n	80069b6 <HAL_FDCAN_Init+0x162>
    return HAL_ERROR;
 8006a4c:	2001      	movs	r0, #1
}
 8006a4e:	4770      	bx	lr
 8006a50:	40006400 	.word	0x40006400
 8006a54:	4000a400 	.word	0x4000a400
 8006a58:	4000a470 	.word	0x4000a470
 8006a5c:	4000a4b0 	.word	0x4000a4b0

08006a60 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a60:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d005      	beq.n	8006a76 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a6a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a6c:	f043 0304 	orr.w	r3, r3, #4
 8006a70:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006a72:	2001      	movs	r0, #1
}
 8006a74:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006a76:	2302      	movs	r3, #2
 8006a78:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a7c:	6802      	ldr	r2, [r0, #0]
 8006a7e:	6993      	ldr	r3, [r2, #24]
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_OK;
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	4770      	bx	lr
	...

08006a90 <HAL_FDCAN_AddMessageToTxFifoQ>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006a90:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d154      	bne.n	8006b44 <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
{
 8006a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006a9c:	6804      	ldr	r4, [r0, #0]
 8006a9e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8006aa2:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8006aa6:	d005      	beq.n	8006ab4 <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006aa8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aae:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8006ab0:	2001      	movs	r0, #1
}
 8006ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006ab4:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 8006ab8:	f3c5 4501 	ubfx	r5, r5, #16, #2
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006abc:	684b      	ldr	r3, [r1, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d138      	bne.n	8006b34 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8006ac2:	690c      	ldr	r4, [r1, #16]
 8006ac4:	688b      	ldr	r3, [r1, #8]
 8006ac6:	431c      	orrs	r4, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006ac8:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006aca:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ace:	69cb      	ldr	r3, [r1, #28]
 8006ad0:	698e      	ldr	r6, [r1, #24]
 8006ad2:	4333      	orrs	r3, r6
 8006ad4:	694e      	ldr	r6, [r1, #20]
 8006ad6:	4333      	orrs	r3, r6
 8006ad8:	68ce      	ldr	r6, [r1, #12]
 8006ada:	4333      	orrs	r3, r6
 8006adc:	6a0e      	ldr	r6, [r1, #32]
 8006ade:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006ae2:	eb05 06c5 	add.w	r6, r5, r5, lsl #3
 8006ae6:	6d47      	ldr	r7, [r0, #84]	; 0x54
 8006ae8:	eb07 0ec6 	add.w	lr, r7, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006aec:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 8006af0:	f8ce 3004 	str.w	r3, [lr, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006af4:	89cb      	ldrh	r3, [r1, #14]
 8006af6:	4c16      	ldr	r4, [pc, #88]	; (8006b50 <HAL_FDCAN_AddMessageToTxFifoQ+0xc0>)
 8006af8:	5ce3      	ldrb	r3, [r4, r3]
 8006afa:	b19b      	cbz	r3, 8006b24 <HAL_FDCAN_AddMessageToTxFifoQ+0x94>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006afc:	eb0e 060c 	add.w	r6, lr, ip
 8006b00:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b02:	7893      	ldrb	r3, [r2, #2]
 8006b04:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b06:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006b0a:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b0c:	433b      	orrs	r3, r7
 8006b0e:	7857      	ldrb	r7, [r2, #1]
 8006b10:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b14:	60b3      	str	r3, [r6, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b16:	f10c 0c04 	add.w	ip, ip, #4
 8006b1a:	3204      	adds	r2, #4
 8006b1c:	89cb      	ldrh	r3, [r1, #14]
 8006b1e:	5ce3      	ldrb	r3, [r4, r3]
 8006b20:	459c      	cmp	ip, r3
 8006b22:	d3eb      	bcc.n	8006afc <HAL_FDCAN_AddMessageToTxFifoQ+0x6c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006b24:	6802      	ldr	r2, [r0, #0]
 8006b26:	2301      	movs	r3, #1
 8006b28:	40ab      	lsls	r3, r5
 8006b2a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006b2e:	6583      	str	r3, [r0, #88]	; 0x58
    return HAL_OK;
 8006b30:	2000      	movs	r0, #0
 8006b32:	e7be      	b.n	8006ab2 <HAL_FDCAN_AddMessageToTxFifoQ+0x22>
                   pTxHeader->TxFrameType |
 8006b34:	690b      	ldr	r3, [r1, #16]
 8006b36:	680c      	ldr	r4, [r1, #0]
 8006b38:	431c      	orrs	r4, r3
 8006b3a:	688b      	ldr	r3, [r1, #8]
 8006b3c:	431c      	orrs	r4, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b3e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8006b42:	e7c4      	b.n	8006ace <HAL_FDCAN_AddMessageToTxFifoQ+0x3e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b44:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006b46:	f043 0308 	orr.w	r3, r3, #8
 8006b4a:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006b4c:	2001      	movs	r0, #1
}
 8006b4e:	4770      	bx	lr
 8006b50:	0800e47c 	.word	0x0800e47c

08006b54 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006b54:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
 8006b58:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8006b5c:	f1bc 0f02 	cmp.w	ip, #2
 8006b60:	d177      	bne.n	8006c52 <HAL_FDCAN_GetRxMessage+0xfe>
{
 8006b62:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006b64:	2940      	cmp	r1, #64	; 0x40
 8006b66:	d00b      	beq.n	8006b80 <HAL_FDCAN_GetRxMessage+0x2c>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006b68:	6804      	ldr	r4, [r0, #0]
 8006b6a:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8006b6e:	f015 0f0f 	tst.w	r5, #15
 8006b72:	d11b      	bne.n	8006bac <HAL_FDCAN_GetRxMessage+0x58>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006b74:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7a:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	e063      	b.n	8006c48 <HAL_FDCAN_GetRxMessage+0xf4>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006b80:	6804      	ldr	r4, [r0, #0]
 8006b82:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8006b86:	f015 0f0f 	tst.w	r5, #15
 8006b8a:	d105      	bne.n	8006b98 <HAL_FDCAN_GetRxMessage+0x44>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006b8c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b92:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006b94:	2001      	movs	r0, #1
 8006b96:	e057      	b.n	8006c48 <HAL_FDCAN_GetRxMessage+0xf4>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006b98:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
 8006b9c:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006ba0:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 8006ba4:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8006ba6:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8006baa:	e008      	b.n	8006bbe <HAL_FDCAN_GetRxMessage+0x6a>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006bac:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 8006bb0:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006bb4:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 8006bb8:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8006bba:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006bbe:	6834      	ldr	r4, [r6, #0]
 8006bc0:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006bc4:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006bc6:	2c00      	cmp	r4, #0
 8006bc8:	d13f      	bne.n	8006c4a <HAL_FDCAN_GetRxMessage+0xf6>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006bca:	6834      	ldr	r4, [r6, #0]
 8006bcc:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8006bd0:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006bd2:	6834      	ldr	r4, [r6, #0]
 8006bd4:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8006bd8:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006bda:	6834      	ldr	r4, [r6, #0]
 8006bdc:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8006be0:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006be2:	88b4      	ldrh	r4, [r6, #4]
 8006be4:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006be6:	6874      	ldr	r4, [r6, #4]
 8006be8:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8006bec:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006bee:	6875      	ldr	r5, [r6, #4]
 8006bf0:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8006bf4:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006bf6:	6875      	ldr	r5, [r6, #4]
 8006bf8:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8006bfc:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006bfe:	79f5      	ldrb	r5, [r6, #7]
 8006c00:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8006c04:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006c06:	6875      	ldr	r5, [r6, #4]
 8006c08:	0fed      	lsrs	r5, r5, #31
 8006c0a:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c0c:	0c24      	lsrs	r4, r4, #16
 8006c0e:	4d14      	ldr	r5, [pc, #80]	; (8006c60 <HAL_FDCAN_GetRxMessage+0x10c>)
 8006c10:	5d2c      	ldrb	r4, [r5, r4]
 8006c12:	b18c      	cbz	r4, 8006c38 <HAL_FDCAN_GetRxMessage+0xe4>
 8006c14:	1df5      	adds	r5, r6, #7
 8006c16:	3b01      	subs	r3, #1
 8006c18:	4c11      	ldr	r4, [pc, #68]	; (8006c60 <HAL_FDCAN_GetRxMessage+0x10c>)
      pRxData[ByteCounter] = pData[ByteCounter];
 8006c1a:	46ac      	mov	ip, r5
 8006c1c:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 8006c20:	f803 ef01 	strb.w	lr, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c24:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 8006c28:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8006c2c:	f1ac 0c06 	sub.w	ip, ip, #6
 8006c30:	ebac 0c06 	sub.w	ip, ip, r6
 8006c34:	45e6      	cmp	lr, ip
 8006c36:	d8f0      	bhi.n	8006c1a <HAL_FDCAN_GetRxMessage+0xc6>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006c38:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006c3a:	6803      	ldr	r3, [r0, #0]
 8006c3c:	bf0c      	ite	eq
 8006c3e:	f8c3 7094 	streq.w	r7, [r3, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006c42:	f8c3 709c 	strne.w	r7, [r3, #156]	; 0x9c
    return HAL_OK;
 8006c46:	2000      	movs	r0, #0
}
 8006c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006c4a:	6834      	ldr	r4, [r6, #0]
 8006c4c:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 8006c50:	e7be      	b.n	8006bd0 <HAL_FDCAN_GetRxMessage+0x7c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006c52:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006c54:	f043 0308 	orr.w	r3, r3, #8
 8006c58:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006c5a:	2001      	movs	r0, #1
}
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	0800e47c 	.word	0x0800e47c

08006c64 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006c64:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d905      	bls.n	8006c7c <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c70:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006c72:	f043 0302 	orr.w	r3, r3, #2
 8006c76:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006c78:	2001      	movs	r0, #1
}
 8006c7a:	4770      	bx	lr
{
 8006c7c:	b470      	push	{r4, r5, r6}
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006c7e:	6804      	ldr	r4, [r0, #0]
 8006c80:	6da3      	ldr	r3, [r4, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006c82:	f011 0607 	ands.w	r6, r1, #7
 8006c86:	d002      	beq.n	8006c8e <HAL_FDCAN_ActivateNotification+0x2a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006c88:	f013 0f01 	tst.w	r3, #1
 8006c8c:	d023      	beq.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x72>
 8006c8e:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006c92:	d002      	beq.n	8006c9a <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006c94:	f013 0f02 	tst.w	r3, #2
 8006c98:	d01d      	beq.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x72>
 8006c9a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006c9e:	d002      	beq.n	8006ca6 <HAL_FDCAN_ActivateNotification+0x42>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006ca0:	f013 0f04 	tst.w	r3, #4
 8006ca4:	d017      	beq.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x72>
 8006ca6:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006caa:	d002      	beq.n	8006cb2 <HAL_FDCAN_ActivateNotification+0x4e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006cac:	f013 0f08 	tst.w	r3, #8
 8006cb0:	d011      	beq.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x72>
 8006cb2:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006cb6:	d002      	beq.n	8006cbe <HAL_FDCAN_ActivateNotification+0x5a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006cb8:	f013 0f10 	tst.w	r3, #16
 8006cbc:	d00b      	beq.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x72>
 8006cbe:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006cc2:	d002      	beq.n	8006cca <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006cc4:	f013 0f20 	tst.w	r3, #32
 8006cc8:	d005      	beq.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x72>
 8006cca:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006cce:	d006      	beq.n	8006cde <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006cd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006cd4:	d103      	bne.n	8006cde <HAL_FDCAN_ActivateNotification+0x7a>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006cd6:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8006cd8:	f045 0501 	orr.w	r5, r5, #1
 8006cdc:	65e5      	str	r5, [r4, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006cde:	b116      	cbz	r6, 8006ce6 <HAL_FDCAN_ActivateNotification+0x82>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006ce0:	f013 0f01 	tst.w	r3, #1
 8006ce4:	d123      	bne.n	8006d2e <HAL_FDCAN_ActivateNotification+0xca>
 8006ce6:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006cea:	d002      	beq.n	8006cf2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006cec:	f013 0f02 	tst.w	r3, #2
 8006cf0:	d11d      	bne.n	8006d2e <HAL_FDCAN_ActivateNotification+0xca>
 8006cf2:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006cf6:	d002      	beq.n	8006cfe <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006cf8:	f013 0f04 	tst.w	r3, #4
 8006cfc:	d117      	bne.n	8006d2e <HAL_FDCAN_ActivateNotification+0xca>
 8006cfe:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006d02:	d002      	beq.n	8006d0a <HAL_FDCAN_ActivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006d04:	f013 0f08 	tst.w	r3, #8
 8006d08:	d111      	bne.n	8006d2e <HAL_FDCAN_ActivateNotification+0xca>
 8006d0a:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006d0e:	d002      	beq.n	8006d16 <HAL_FDCAN_ActivateNotification+0xb2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006d10:	f013 0f10 	tst.w	r3, #16
 8006d14:	d10b      	bne.n	8006d2e <HAL_FDCAN_ActivateNotification+0xca>
 8006d16:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006d1a:	d002      	beq.n	8006d22 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006d1c:	f013 0f20 	tst.w	r3, #32
 8006d20:	d105      	bne.n	8006d2e <HAL_FDCAN_ActivateNotification+0xca>
 8006d22:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006d26:	d007      	beq.n	8006d38 <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006d28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d2c:	d004      	beq.n	8006d38 <HAL_FDCAN_ActivateNotification+0xd4>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006d2e:	6804      	ldr	r4, [r0, #0]
 8006d30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d32:	f043 0302 	orr.w	r3, r3, #2
 8006d36:	65e3      	str	r3, [r4, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006d38:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006d3c:	d005      	beq.n	8006d4a <HAL_FDCAN_ActivateNotification+0xe6>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006d3e:	6804      	ldr	r4, [r0, #0]
 8006d40:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006d4a:	f411 7f80 	tst.w	r1, #256	; 0x100
 8006d4e:	d005      	beq.n	8006d5c <HAL_FDCAN_ActivateNotification+0xf8>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006d50:	6804      	ldr	r4, [r0, #0]
 8006d52:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006d5c:	6802      	ldr	r2, [r0, #0]
 8006d5e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6553      	str	r3, [r2, #84]	; 0x54
    return HAL_OK;
 8006d64:	2000      	movs	r0, #0
}
 8006d66:	bc70      	pop	{r4, r5, r6}
 8006d68:	4770      	bx	lr

08006d6a <HAL_FDCAN_TxEventFifoCallback>:
}
 8006d6a:	4770      	bx	lr

08006d6c <HAL_FDCAN_RxFifo1Callback>:
}
 8006d6c:	4770      	bx	lr

08006d6e <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8006d6e:	4770      	bx	lr

08006d70 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8006d70:	4770      	bx	lr

08006d72 <HAL_FDCAN_TxBufferAbortCallback>:
}
 8006d72:	4770      	bx	lr

08006d74 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8006d74:	4770      	bx	lr

08006d76 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8006d76:	4770      	bx	lr

08006d78 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8006d78:	4770      	bx	lr

08006d7a <HAL_FDCAN_ErrorCallback>:
}
 8006d7a:	4770      	bx	lr

08006d7c <HAL_FDCAN_ErrorStatusCallback>:
}
 8006d7c:	4770      	bx	lr

08006d7e <HAL_FDCAN_IRQHandler>:
{
 8006d7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d82:	4604      	mov	r4, r0
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006d84:	6803      	ldr	r3, [r0, #0]
 8006d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006d88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d8a:	ea02 0901 	and.w	r9, r2, r1
 8006d8e:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006d92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006d94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d96:	ea02 0801 	and.w	r8, r2, r1
 8006d9a:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006d9e:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006da2:	4017      	ands	r7, r2
 8006da4:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006da8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006daa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dac:	4015      	ands	r5, r2
 8006dae:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006db2:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006db6:	4016      	ands	r6, r2
 8006db8:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dbe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006dc2:	d003      	beq.n	8006dcc <HAL_FDCAN_IRQHandler+0x4e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dc6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006dca:	d151      	bne.n	8006e70 <HAL_FDCAN_IRQHandler+0xf2>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006dd4:	d003      	beq.n	8006dde <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dd8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006ddc:	d14d      	bne.n	8006e7a <HAL_FDCAN_IRQHandler+0xfc>
  if (TxEventFifoITs != 0U)
 8006dde:	f1b9 0f00 	cmp.w	r9, #0
 8006de2:	d156      	bne.n	8006e92 <HAL_FDCAN_IRQHandler+0x114>
  if (RxFifo0ITs != 0U)
 8006de4:	f1b8 0f00 	cmp.w	r8, #0
 8006de8:	d15b      	bne.n	8006ea2 <HAL_FDCAN_IRQHandler+0x124>
  if (RxFifo1ITs != 0U)
 8006dea:	2f00      	cmp	r7, #0
 8006dec:	d161      	bne.n	8006eb2 <HAL_FDCAN_IRQHandler+0x134>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006df2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006df6:	d003      	beq.n	8006e00 <HAL_FDCAN_IRQHandler+0x82>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dfa:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006dfe:	d15f      	bne.n	8006ec0 <HAL_FDCAN_IRQHandler+0x142>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e04:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e08:	d003      	beq.n	8006e12 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006e0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e0c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e10:	d15d      	bne.n	8006ece <HAL_FDCAN_IRQHandler+0x150>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e16:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8006e1a:	d003      	beq.n	8006e24 <HAL_FDCAN_IRQHandler+0xa6>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e1e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8006e22:	d15f      	bne.n	8006ee4 <HAL_FDCAN_IRQHandler+0x166>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e28:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006e2c:	d003      	beq.n	8006e36 <HAL_FDCAN_IRQHandler+0xb8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006e2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e30:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006e34:	d15d      	bne.n	8006ef2 <HAL_FDCAN_IRQHandler+0x174>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e3a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006e3e:	d00a      	beq.n	8006e56 <HAL_FDCAN_IRQHandler+0xd8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e42:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006e46:	d006      	beq.n	8006e56 <HAL_FDCAN_IRQHandler+0xd8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006e48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e4c:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006e4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e54:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8006e56:	2e00      	cmp	r6, #0
 8006e58:	d152      	bne.n	8006f00 <HAL_FDCAN_IRQHandler+0x182>
  if (Errors != 0U)
 8006e5a:	b125      	cbz	r5, 8006e66 <HAL_FDCAN_IRQHandler+0xe8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006e60:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e62:	432b      	orrs	r3, r5
 8006e64:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006e66:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d150      	bne.n	8006f0e <HAL_FDCAN_IRQHandler+0x190>
}
 8006e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006e70:	2240      	movs	r2, #64	; 0x40
 8006e72:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006e74:	f7ff ff80 	bl	8006d78 <HAL_FDCAN_HighPriorityMessageCallback>
 8006e78:	e7a8      	b.n	8006dcc <HAL_FDCAN_IRQHandler+0x4e>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006e7a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006e7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006e82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006e86:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006e88:	4011      	ands	r1, r2
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff ff71 	bl	8006d72 <HAL_FDCAN_TxBufferAbortCallback>
 8006e90:	e7a5      	b.n	8006dde <HAL_FDCAN_IRQHandler+0x60>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f7ff ff65 	bl	8006d6a <HAL_FDCAN_TxEventFifoCallback>
 8006ea0:	e7a0      	b.n	8006de4 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006ea8:	4641      	mov	r1, r8
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7fd f9a0 	bl	80041f0 <HAL_FDCAN_RxFifo0Callback>
 8006eb0:	e79b      	b.n	8006dea <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006eb6:	4639      	mov	r1, r7
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f7ff ff57 	bl	8006d6c <HAL_FDCAN_RxFifo1Callback>
 8006ebe:	e796      	b.n	8006dee <HAL_FDCAN_IRQHandler+0x70>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ec4:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f7ff ff51 	bl	8006d6e <HAL_FDCAN_TxFifoEmptyCallback>
 8006ecc:	e798      	b.n	8006e00 <HAL_FDCAN_IRQHandler+0x82>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006ece:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006ed2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006ed6:	2080      	movs	r0, #128	; 0x80
 8006ed8:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006eda:	4011      	ands	r1, r2
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7ff ff47 	bl	8006d70 <HAL_FDCAN_TxBufferCompleteCallback>
 8006ee2:	e796      	b.n	8006e12 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006ee4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ee8:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006eea:	4620      	mov	r0, r4
 8006eec:	f7ff ff42 	bl	8006d74 <HAL_FDCAN_TimestampWraparoundCallback>
 8006ef0:	e798      	b.n	8006e24 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006ef2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006ef6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f7ff ff3c 	bl	8006d76 <HAL_FDCAN_TimeoutOccurredCallback>
 8006efe:	e79a      	b.n	8006e36 <HAL_FDCAN_IRQHandler+0xb8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006f04:	4631      	mov	r1, r6
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7ff ff38 	bl	8006d7c <HAL_FDCAN_ErrorStatusCallback>
 8006f0c:	e7a5      	b.n	8006e5a <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7ff ff33 	bl	8006d7a <HAL_FDCAN_ErrorCallback>
}
 8006f14:	e7aa      	b.n	8006e6c <HAL_FDCAN_IRQHandler+0xee>
	...

08006f18 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006f18:	b510      	push	{r4, lr}
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  uint32_t *dest_addr = (uint32_t *)Address;
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8006f1a:	460b      	mov	r3, r1

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006f1c:	4c09      	ldr	r4, [pc, #36]	; (8006f44 <FLASH_Program_Fast+0x2c>)
 8006f1e:	6962      	ldr	r2, [r4, #20]
 8006f20:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006f24:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f26:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006f2a:	b672      	cpsid	i
 8006f2c:	f501 7c80 	add.w	ip, r1, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8006f30:	1a41      	subs	r1, r0, r1
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 8006f36:	3304      	adds	r3, #4
    row_index--;
  }
  while (row_index != 0U);
 8006f38:	4563      	cmp	r3, ip
 8006f3a:	d1fa      	bne.n	8006f32 <FLASH_Program_Fast+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3c:	f38e 8810 	msr	PRIMASK, lr

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006f40:	bd10      	pop	{r4, pc}
 8006f42:	bf00      	nop
 8006f44:	40022000 	.word	0x40022000

08006f48 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006f48:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <HAL_FLASH_Unlock+0x20>)
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	db01      	blt.n	8006f54 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8006f50:	2000      	movs	r0, #0
}
 8006f52:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <HAL_FLASH_Unlock+0x20>)
 8006f56:	4a05      	ldr	r2, [pc, #20]	; (8006f6c <HAL_FLASH_Unlock+0x24>)
 8006f58:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006f5a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8006f5e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006f60:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	0fc0      	lsrs	r0, r0, #31
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40022000 	.word	0x40022000
 8006f6c:	45670123 	.word	0x45670123

08006f70 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006f70:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <HAL_FLASH_Lock+0x14>)
 8006f72:	695a      	ldr	r2, [r3, #20]
 8006f74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006f78:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006f7a:	6958      	ldr	r0, [r3, #20]
}
 8006f7c:	43c0      	mvns	r0, r0
 8006f7e:	0fc0      	lsrs	r0, r0, #31
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40022000 	.word	0x40022000

08006f88 <FLASH_WaitForLastOperation>:
{
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8006f8c:	f7fe fa38 	bl	8005400 <HAL_GetTick>
 8006f90:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f92:	4e13      	ldr	r6, [pc, #76]	; (8006fe0 <FLASH_WaitForLastOperation+0x58>)
 8006f94:	6933      	ldr	r3, [r6, #16]
 8006f96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006f9a:	d006      	beq.n	8006faa <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006f9c:	f7fe fa30 	bl	8005400 <HAL_GetTick>
 8006fa0:	1b00      	subs	r0, r0, r4
 8006fa2:	42a8      	cmp	r0, r5
 8006fa4:	d9f6      	bls.n	8006f94 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 8006fa6:	2003      	movs	r0, #3
}
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006faa:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <FLASH_WaitForLastOperation+0x58>)
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	d109      	bne.n	8006fca <FLASH_WaitForLastOperation+0x42>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006fb6:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <FLASH_WaitForLastOperation+0x58>)
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f013 0f01 	tst.w	r3, #1
 8006fbe:	d00c      	beq.n	8006fda <FLASH_WaitForLastOperation+0x52>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <FLASH_WaitForLastOperation+0x58>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e7ee      	b.n	8006fa8 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode |= error;
 8006fca:	4906      	ldr	r1, [pc, #24]	; (8006fe4 <FLASH_WaitForLastOperation+0x5c>)
 8006fcc:	684a      	ldr	r2, [r1, #4]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8006fd2:	4a03      	ldr	r2, [pc, #12]	; (8006fe0 <FLASH_WaitForLastOperation+0x58>)
 8006fd4:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	e7e6      	b.n	8006fa8 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8006fda:	2000      	movs	r0, #0
 8006fdc:	e7e4      	b.n	8006fa8 <FLASH_WaitForLastOperation+0x20>
 8006fde:	bf00      	nop
 8006fe0:	40022000 	.word	0x40022000
 8006fe4:	2000056c 	.word	0x2000056c

08006fe8 <HAL_FLASH_Program>:
{
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8006fec:	4a21      	ldr	r2, [pc, #132]	; (8007074 <HAL_FLASH_Program+0x8c>)
 8006fee:	7812      	ldrb	r2, [r2, #0]
 8006ff0:	2a01      	cmp	r2, #1
 8006ff2:	d03c      	beq.n	800706e <HAL_FLASH_Program+0x86>
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	461f      	mov	r7, r3
 8006ffa:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <HAL_FLASH_Program+0x8c>)
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007004:	f7ff ffc0 	bl	8006f88 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8007008:	b9e8      	cbnz	r0, 8007046 <HAL_FLASH_Program+0x5e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800700a:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <HAL_FLASH_Program+0x8c>)
 800700c:	6058      	str	r0, [r3, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800700e:	b13c      	cbz	r4, 8007020 <HAL_FLASH_Program+0x38>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007010:	1e63      	subs	r3, r4, #1
 8007012:	2b01      	cmp	r3, #1
 8007014:	d91b      	bls.n	800704e <HAL_FLASH_Program+0x66>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800701a:	f7ff ffb5 	bl	8006f88 <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 800701e:	e012      	b.n	8007046 <HAL_FLASH_Program+0x5e>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007020:	4a15      	ldr	r2, [pc, #84]	; (8007078 <HAL_FLASH_Program+0x90>)
 8007022:	6953      	ldr	r3, [r2, #20]
 8007024:	f043 0301 	orr.w	r3, r3, #1
 8007028:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 800702a:	602e      	str	r6, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800702c:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007030:	606f      	str	r7, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007036:	f7ff ffa7 	bl	8006f88 <FLASH_WaitForLastOperation>
      prog_bit = FLASH_CR_PG;
 800703a:	2401      	movs	r4, #1
      CLEAR_BIT(FLASH->CR, prog_bit);
 800703c:	4a0e      	ldr	r2, [pc, #56]	; (8007078 <HAL_FLASH_Program+0x90>)
 800703e:	6953      	ldr	r3, [r2, #20]
 8007040:	ea23 0304 	bic.w	r3, r3, r4
 8007044:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <HAL_FLASH_Program+0x8c>)
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
}
 800704c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	f7ff ff61 	bl	8006f18 <FLASH_Program_Fast>
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007056:	2c02      	cmp	r4, #2
 8007058:	bf14      	ite	ne
 800705a:	2400      	movne	r4, #0
 800705c:	2401      	moveq	r4, #1
 800705e:	04a4      	lsls	r4, r4, #18
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007060:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007064:	f7ff ff90 	bl	8006f88 <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 8007068:	2c00      	cmp	r4, #0
 800706a:	d1e7      	bne.n	800703c <HAL_FLASH_Program+0x54>
 800706c:	e7eb      	b.n	8007046 <HAL_FLASH_Program+0x5e>
  __HAL_LOCK(&pFlash);
 800706e:	2002      	movs	r0, #2
 8007070:	e7ec      	b.n	800704c <HAL_FLASH_Program+0x64>
 8007072:	bf00      	nop
 8007074:	2000056c 	.word	0x2000056c
 8007078:	40022000 	.word	0x40022000

0800707c <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800707c:	f010 0f01 	tst.w	r0, #1
 8007080:	d004      	beq.n	800708c <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007082:	4a05      	ldr	r2, [pc, #20]	; (8007098 <FLASH_MassErase+0x1c>)
 8007084:	6953      	ldr	r3, [r2, #20]
 8007086:	f043 0304 	orr.w	r3, r3, #4
 800708a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800708c:	4a02      	ldr	r2, [pc, #8]	; (8007098 <FLASH_MassErase+0x1c>)
 800708e:	6953      	ldr	r3, [r2, #20]
 8007090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007094:	6153      	str	r3, [r2, #20]
}
 8007096:	4770      	bx	lr
 8007098:	40022000 	.word	0x40022000

0800709c <FLASH_PageErase>:
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800709c:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <FLASH_PageErase+0x24>)
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	00c0      	lsls	r0, r0, #3
 80070a2:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80070a6:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 80070aa:	4310      	orrs	r0, r2
 80070ac:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80070ae:	695a      	ldr	r2, [r3, #20]
 80070b0:	f042 0202 	orr.w	r2, r2, #2
 80070b4:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80070b6:	695a      	ldr	r2, [r3, #20]
 80070b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80070bc:	615a      	str	r2, [r3, #20]
}
 80070be:	4770      	bx	lr
 80070c0:	40022000 	.word	0x40022000

080070c4 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80070c4:	4b17      	ldr	r3, [pc, #92]	; (8007124 <FLASH_FlushCaches+0x60>)
 80070c6:	7f1a      	ldrb	r2, [r3, #28]
 80070c8:	b2d3      	uxtb	r3, r2

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80070ca:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80070ce:	2a01      	cmp	r2, #1
 80070d0:	d007      	beq.n	80070e2 <FLASH_FlushCaches+0x1e>
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80070d2:	3b02      	subs	r3, #2
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d915      	bls.n	8007106 <FLASH_FlushCaches+0x42>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80070da:	4b12      	ldr	r3, [pc, #72]	; (8007124 <FLASH_FlushCaches+0x60>)
 80070dc:	2200      	movs	r2, #0
 80070de:	771a      	strb	r2, [r3, #28]
}
 80070e0:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80070e2:	4a11      	ldr	r2, [pc, #68]	; (8007128 <FLASH_FlushCaches+0x64>)
 80070e4:	6811      	ldr	r1, [r2, #0]
 80070e6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80070ea:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80070ec:	6811      	ldr	r1, [r2, #0]
 80070ee:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80070f2:	6011      	str	r1, [r2, #0]
 80070f4:	6811      	ldr	r1, [r2, #0]
 80070f6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80070fa:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80070fc:	6811      	ldr	r1, [r2, #0]
 80070fe:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007102:	6011      	str	r1, [r2, #0]
 8007104:	e7e5      	b.n	80070d2 <FLASH_FlushCaches+0xe>
    __HAL_FLASH_DATA_CACHE_RESET();
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <FLASH_FlushCaches+0x64>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007116:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e7db      	b.n	80070da <FLASH_FlushCaches+0x16>
 8007122:	bf00      	nop
 8007124:	2000056c 	.word	0x2000056c
 8007128:	40022000 	.word	0x40022000

0800712c <HAL_FLASHEx_Erase>:
{
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8007130:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <HAL_FLASHEx_Erase+0xf4>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d06f      	beq.n	8007218 <HAL_FLASHEx_Erase+0xec>
 8007138:	4604      	mov	r4, r0
 800713a:	460f      	mov	r7, r1
 800713c:	4b38      	ldr	r3, [pc, #224]	; (8007220 <HAL_FLASHEx_Erase+0xf4>)
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007146:	f7ff ff1f 	bl	8006f88 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800714a:	4681      	mov	r9, r0
 800714c:	2800      	cmp	r0, #0
 800714e:	d15d      	bne.n	800720c <HAL_FLASHEx_Erase+0xe0>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007150:	4b33      	ldr	r3, [pc, #204]	; (8007220 <HAL_FLASHEx_Erase+0xf4>)
 8007152:	2200      	movs	r2, #0
 8007154:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007156:	4b33      	ldr	r3, [pc, #204]	; (8007224 <HAL_FLASHEx_Erase+0xf8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800715e:	d032      	beq.n	80071c6 <HAL_FLASHEx_Erase+0x9a>
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007160:	4b30      	ldr	r3, [pc, #192]	; (8007224 <HAL_FLASHEx_Erase+0xf8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007168:	d029      	beq.n	80071be <HAL_FLASHEx_Erase+0x92>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800716a:	4a2e      	ldr	r2, [pc, #184]	; (8007224 <HAL_FLASHEx_Erase+0xf8>)
 800716c:	6813      	ldr	r3, [r2, #0]
 800716e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007172:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007174:	4b2a      	ldr	r3, [pc, #168]	; (8007220 <HAL_FLASHEx_Erase+0xf4>)
 8007176:	2203      	movs	r2, #3
 8007178:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d034      	beq.n	80071ea <HAL_FLASHEx_Erase+0xbe>
      *PageError = 0xFFFFFFFFU;
 8007180:	f04f 33ff 	mov.w	r3, #4294967295
 8007184:	603b      	str	r3, [r7, #0]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007186:	68a5      	ldr	r5, [r4, #8]
 8007188:	68e3      	ldr	r3, [r4, #12]
 800718a:	442b      	add	r3, r5
 800718c:	429d      	cmp	r5, r3
 800718e:	d23b      	bcs.n	8007208 <HAL_FLASHEx_Erase+0xdc>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007190:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007194:	4e23      	ldr	r6, [pc, #140]	; (8007224 <HAL_FLASHEx_Erase+0xf8>)
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007196:	6861      	ldr	r1, [r4, #4]
 8007198:	4628      	mov	r0, r5
 800719a:	f7ff ff7f 	bl	800709c <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800719e:	4640      	mov	r0, r8
 80071a0:	f7ff fef2 	bl	8006f88 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80071a4:	6973      	ldr	r3, [r6, #20]
 80071a6:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80071aa:	6173      	str	r3, [r6, #20]
        if (status != HAL_OK)
 80071ac:	4681      	mov	r9, r0
 80071ae:	bb50      	cbnz	r0, 8007206 <HAL_FLASHEx_Erase+0xda>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80071b0:	3501      	adds	r5, #1
 80071b2:	68a3      	ldr	r3, [r4, #8]
 80071b4:	68e2      	ldr	r2, [r4, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	42ab      	cmp	r3, r5
 80071ba:	d8ec      	bhi.n	8007196 <HAL_FLASHEx_Erase+0x6a>
 80071bc:	e024      	b.n	8007208 <HAL_FLASHEx_Erase+0xdc>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80071be:	4b18      	ldr	r3, [pc, #96]	; (8007220 <HAL_FLASHEx_Erase+0xf4>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	771a      	strb	r2, [r3, #28]
 80071c4:	e7d9      	b.n	800717a <HAL_FLASHEx_Erase+0x4e>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80071c6:	4b17      	ldr	r3, [pc, #92]	; (8007224 <HAL_FLASHEx_Erase+0xf8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80071ce:	d008      	beq.n	80071e2 <HAL_FLASHEx_Erase+0xb6>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80071d0:	4a14      	ldr	r2, [pc, #80]	; (8007224 <HAL_FLASHEx_Erase+0xf8>)
 80071d2:	6813      	ldr	r3, [r2, #0]
 80071d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071d8:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <HAL_FLASHEx_Erase+0xf4>)
 80071dc:	2202      	movs	r2, #2
 80071de:	771a      	strb	r2, [r3, #28]
 80071e0:	e7cb      	b.n	800717a <HAL_FLASHEx_Erase+0x4e>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80071e2:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <HAL_FLASHEx_Erase+0xf4>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	771a      	strb	r2, [r3, #28]
 80071e8:	e7c7      	b.n	800717a <HAL_FLASHEx_Erase+0x4e>
      FLASH_MassErase(pEraseInit->Banks);
 80071ea:	6860      	ldr	r0, [r4, #4]
 80071ec:	f7ff ff46 	bl	800707c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071f4:	f7ff fec8 	bl	8006f88 <FLASH_WaitForLastOperation>
 80071f8:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80071fa:	4a0a      	ldr	r2, [pc, #40]	; (8007224 <HAL_FLASHEx_Erase+0xf8>)
 80071fc:	6953      	ldr	r3, [r2, #20]
 80071fe:	f023 0304 	bic.w	r3, r3, #4
 8007202:	6153      	str	r3, [r2, #20]
 8007204:	e000      	b.n	8007208 <HAL_FLASHEx_Erase+0xdc>
          *PageError = page_index;
 8007206:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();
 8007208:	f7ff ff5c 	bl	80070c4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <HAL_FLASHEx_Erase+0xf4>)
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
}
 8007212:	4648      	mov	r0, r9
 8007214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8007218:	f04f 0902 	mov.w	r9, #2
 800721c:	e7f9      	b.n	8007212 <HAL_FLASHEx_Erase+0xe6>
 800721e:	bf00      	nop
 8007220:	2000056c 	.word	0x2000056c
 8007224:	40022000 	.word	0x40022000

08007228 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800722c:	f7fe f8e8 	bl	8005400 <HAL_GetTick>
 8007230:	4605      	mov	r5, r0

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007232:	6822      	ldr	r2, [r4, #0]
 8007234:	6913      	ldr	r3, [r2, #16]
 8007236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800723a:	6113      	str	r3, [r2, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007244:	d00b      	beq.n	800725e <FMAC_Reset+0x36>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007246:	f7fe f8db 	bl	8005400 <HAL_GetTick>
 800724a:	1b40      	subs	r0, r0, r5
 800724c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8007250:	d9f4      	bls.n	800723c <FMAC_Reset+0x14>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	6363      	str	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 800725a:	2001      	movs	r0, #1
 800725c:	e001      	b.n	8007262 <FMAC_Reset+0x3a>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800725e:	2000      	movs	r0, #0
 8007260:	6360      	str	r0, [r4, #52]	; 0x34
  return HAL_OK;
}
 8007262:	bd38      	pop	{r3, r4, r5, pc}

08007264 <HAL_FMAC_Init>:
  if (hfmac == NULL)
 8007264:	b360      	cbz	r0, 80072c0 <HAL_FMAC_Init+0x5c>
{
 8007266:	b510      	push	{r4, lr}
 8007268:	4604      	mov	r4, r0
  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800726a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800726e:	b1d3      	cbz	r3, 80072a6 <HAL_FMAC_Init+0x42>
  hfmac->FilterParam = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	6063      	str	r3, [r4, #4]
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
 8007274:	60e3      	str	r3, [r4, #12]
  hfmac->pInputSize = NULL;
 8007276:	6163      	str	r3, [r4, #20]
  hfmac->InputCurrentSize = 0U;
 8007278:	8223      	strh	r3, [r4, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800727a:	2220      	movs	r2, #32
 800727c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 8007280:	61a3      	str	r3, [r4, #24]
  hfmac->pOutputSize = NULL;
 8007282:	6223      	str	r3, [r4, #32]
  hfmac->OutputCurrentSize = 0U;
 8007284:	83a3      	strh	r3, [r4, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007286:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 800728a:	4620      	mov	r0, r4
 800728c:	f7ff ffcc 	bl	8007228 <FMAC_Reset>
 8007290:	2801      	cmp	r0, #1
 8007292:	d00d      	beq.n	80072b0 <HAL_FMAC_Init+0x4c>
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007294:	2000      	movs	r0, #0
 8007296:	6360      	str	r0, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007298:	2320      	movs	r3, #32
 800729a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 800729e:	2300      	movs	r3, #0
 80072a0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 80072a4:	bd10      	pop	{r4, pc}
    hfmac->Lock = HAL_UNLOCKED;
 80072a6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    HAL_FMAC_MspInit(hfmac);
 80072aa:	f7fd fb23 	bl	80048f4 <HAL_FMAC_MspInit>
 80072ae:	e7df      	b.n	8007270 <HAL_FMAC_Init+0xc>
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80072b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072b2:	f043 0310 	orr.w	r3, r3, #16
 80072b6:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80072b8:	23a0      	movs	r3, #160	; 0xa0
 80072ba:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    status = HAL_ERROR;
 80072be:	e7ee      	b.n	800729e <HAL_FMAC_Init+0x3a>
    return HAL_ERROR;
 80072c0:	2001      	movs	r0, #1
}
 80072c2:	4770      	bx	lr

080072c4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80072c4:	680b      	ldr	r3, [r1, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80d6 	beq.w	8007478 <HAL_GPIO_Init+0x1b4>
{
 80072cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 80072d2:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 80072d6:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072d8:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80072da:	f04f 0e03 	mov.w	lr, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072de:	4c67      	ldr	r4, [pc, #412]	; (800747c <HAL_GPIO_Init+0x1b8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80072e0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007488 <HAL_GPIO_Init+0x1c4>
 80072e4:	e047      	b.n	8007376 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80072e6:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072e8:	fa0e fa0c 	lsl.w	sl, lr, ip
 80072ec:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072f0:	68cb      	ldr	r3, [r1, #12]
 80072f2:	fa03 f30c 	lsl.w	r3, r3, ip
 80072f6:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80072fa:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80072fc:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072fe:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007302:	684b      	ldr	r3, [r1, #4]
 8007304:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007308:	4093      	lsls	r3, r2
 800730a:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 800730c:	6043      	str	r3, [r0, #4]
 800730e:	e03d      	b.n	800738c <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007310:	2700      	movs	r7, #0
 8007312:	fa07 f70b 	lsl.w	r7, r7, fp
 8007316:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800731a:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 800731c:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 800731e:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007322:	684e      	ldr	r6, [r1, #4]
 8007324:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8007328:	bf0c      	ite	eq
 800732a:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800732c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8007330:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 8007332:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007334:	684e      	ldr	r6, [r1, #4]
 8007336:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800733a:	bf0c      	ite	eq
 800733c:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800733e:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8007342:	60e3      	str	r3, [r4, #12]

        temp = EXTI->EMR1;
 8007344:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007346:	684e      	ldr	r6, [r1, #4]
 8007348:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 800734c:	bf0c      	ite	eq
 800734e:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8007350:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 8007354:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007356:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007358:	684e      	ldr	r6, [r1, #4]
 800735a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 800735e:	bf0c      	ite	eq
 8007360:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8007362:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 8007366:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 8007368:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800736a:	680b      	ldr	r3, [r1, #0]
 800736c:	f10c 0c02 	add.w	ip, ip, #2
 8007370:	fa33 f702 	lsrs.w	r7, r3, r2
 8007374:	d07d      	beq.n	8007472 <HAL_GPIO_Init+0x1ae>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007376:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 800737a:	ea17 0903 	ands.w	r9, r7, r3
 800737e:	d0f3      	beq.n	8007368 <HAL_GPIO_Init+0xa4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007380:	684b      	ldr	r3, [r1, #4]
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	3b01      	subs	r3, #1
 8007388:	2b01      	cmp	r3, #1
 800738a:	d9ac      	bls.n	80072e6 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800738c:	684b      	ldr	r3, [r1, #4]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b03      	cmp	r3, #3
 8007394:	d022      	beq.n	80073dc <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 8007396:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007398:	fa0e f30c 	lsl.w	r3, lr, ip
 800739c:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073a0:	688b      	ldr	r3, [r1, #8]
 80073a2:	fa03 f30c 	lsl.w	r3, r3, ip
 80073a6:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 80073a8:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073aa:	684b      	ldr	r3, [r1, #4]
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d113      	bne.n	80073dc <HAL_GPIO_Init+0x118>
        temp = GPIOx->AFR[position >> 3U];
 80073b4:	08d7      	lsrs	r7, r2, #3
 80073b6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80073ba:	f8d7 a020 	ldr.w	sl, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073be:	f002 0b07 	and.w	fp, r2, #7
 80073c2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80073c6:	230f      	movs	r3, #15
 80073c8:	fa03 f30b 	lsl.w	r3, r3, fp
 80073cc:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073d0:	690b      	ldr	r3, [r1, #16]
 80073d2:	fa03 f30b 	lsl.w	r3, r3, fp
 80073d6:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80073da:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 80073dc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80073de:	fa0e f30c 	lsl.w	r3, lr, ip
 80073e2:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073e6:	684b      	ldr	r3, [r1, #4]
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	fa03 f30c 	lsl.w	r3, r3, ip
 80073f0:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80073f2:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80073f4:	684b      	ldr	r3, [r1, #4]
 80073f6:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80073fa:	d0b5      	beq.n	8007368 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073fc:	4e20      	ldr	r6, [pc, #128]	; (8007480 <HAL_GPIO_Init+0x1bc>)
 80073fe:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	6633      	str	r3, [r6, #96]	; 0x60
 8007406:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007410:	f022 0303 	bic.w	r3, r2, #3
 8007414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007418:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800741c:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007420:	f002 0b03 	and.w	fp, r2, #3
 8007424:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007428:	270f      	movs	r7, #15
 800742a:	fa07 f70b 	lsl.w	r7, r7, fp
 800742e:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007432:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8007436:	f43f af6b 	beq.w	8007310 <HAL_GPIO_Init+0x4c>
 800743a:	4540      	cmp	r0, r8
 800743c:	d011      	beq.n	8007462 <HAL_GPIO_Init+0x19e>
 800743e:	4e11      	ldr	r6, [pc, #68]	; (8007484 <HAL_GPIO_Init+0x1c0>)
 8007440:	42b0      	cmp	r0, r6
 8007442:	d010      	beq.n	8007466 <HAL_GPIO_Init+0x1a2>
 8007444:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007448:	42b0      	cmp	r0, r6
 800744a:	d00e      	beq.n	800746a <HAL_GPIO_Init+0x1a6>
 800744c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007450:	42b0      	cmp	r0, r6
 8007452:	d00c      	beq.n	800746e <HAL_GPIO_Init+0x1aa>
 8007454:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007458:	42b0      	cmp	r0, r6
 800745a:	bf0c      	ite	eq
 800745c:	2705      	moveq	r7, #5
 800745e:	2706      	movne	r7, #6
 8007460:	e757      	b.n	8007312 <HAL_GPIO_Init+0x4e>
 8007462:	462f      	mov	r7, r5
 8007464:	e755      	b.n	8007312 <HAL_GPIO_Init+0x4e>
 8007466:	2702      	movs	r7, #2
 8007468:	e753      	b.n	8007312 <HAL_GPIO_Init+0x4e>
 800746a:	4677      	mov	r7, lr
 800746c:	e751      	b.n	8007312 <HAL_GPIO_Init+0x4e>
 800746e:	2704      	movs	r7, #4
 8007470:	e74f      	b.n	8007312 <HAL_GPIO_Init+0x4e>
  }
}
 8007472:	b003      	add	sp, #12
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40010400 	.word	0x40010400
 8007480:	40021000 	.word	0x40021000
 8007484:	48000800 	.word	0x48000800
 8007488:	48000400 	.word	0x48000400

0800748c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800748c:	b10a      	cbz	r2, 8007492 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800748e:	6181      	str	r1, [r0, #24]
 8007490:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007492:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007494:	4770      	bx	lr

08007496 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007496:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007498:	ea01 0203 	and.w	r2, r1, r3
 800749c:	ea21 0103 	bic.w	r1, r1, r3
 80074a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074a4:	6181      	str	r1, [r0, #24]
}
 80074a6:	4770      	bx	lr

080074a8 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d13a      	bne.n	8007522 <HAL_PWREx_ControlVoltageScaling+0x7a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80074ac:	4b40      	ldr	r3, [pc, #256]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d008      	beq.n	80074cc <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074ba:	4a3d      	ldr	r2, [pc, #244]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80074bc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80074c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80074c8:	2000      	movs	r0, #0
 80074ca:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074cc:	4a38      	ldr	r2, [pc, #224]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80074ce:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80074d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074e4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074e6:	4b33      	ldr	r3, [pc, #204]	; (80075b4 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2132      	movs	r1, #50	; 0x32
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4931      	ldr	r1, [pc, #196]	; (80075b8 <HAL_PWREx_ControlVoltageScaling+0x110>)
 80074f2:	fba1 1303 	umull	r1, r3, r1, r3
 80074f6:	0c9b      	lsrs	r3, r3, #18
 80074f8:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074fa:	6952      	ldr	r2, [r2, #20]
 80074fc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007500:	d007      	beq.n	8007512 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8007502:	492b      	ldr	r1, [pc, #172]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 8007504:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007506:	694a      	ldr	r2, [r1, #20]
 8007508:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800750c:	d001      	beq.n	8007512 <HAL_PWREx_ControlVoltageScaling+0x6a>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f8      	bne.n	8007504 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007512:	4b27      	ldr	r3, [pc, #156]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007514:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 8007516:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800751a:	bf0c      	ite	eq
 800751c:	2000      	moveq	r0, #0
 800751e:	2003      	movne	r0, #3
 8007520:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007522:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007526:	d008      	beq.n	800753a <HAL_PWREx_ControlVoltageScaling+0x92>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007528:	4a21      	ldr	r2, [pc, #132]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800752a:	6813      	ldr	r3, [r2, #0]
 800752c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007534:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007536:	2000      	movs	r0, #0
}
 8007538:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800753a:	4b1d      	ldr	r3, [pc, #116]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007546:	d008      	beq.n	800755a <HAL_PWREx_ControlVoltageScaling+0xb2>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007548:	4a19      	ldr	r2, [pc, #100]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800754a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800754e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007552:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8007556:	2000      	movs	r0, #0
 8007558:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800755a:	4a15      	ldr	r2, [pc, #84]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800755c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8007560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007564:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007568:	6813      	ldr	r3, [r2, #0]
 800756a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800756e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007572:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007574:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2132      	movs	r1, #50	; 0x32
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	490e      	ldr	r1, [pc, #56]	; (80075b8 <HAL_PWREx_ControlVoltageScaling+0x110>)
 8007580:	fba1 1303 	umull	r1, r3, r1, r3
 8007584:	0c9b      	lsrs	r3, r3, #18
 8007586:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007588:	6952      	ldr	r2, [r2, #20]
 800758a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800758e:	d007      	beq.n	80075a0 <HAL_PWREx_ControlVoltageScaling+0xf8>
 8007590:	4907      	ldr	r1, [pc, #28]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 8007592:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007594:	694a      	ldr	r2, [r1, #20]
 8007596:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800759a:	d001      	beq.n	80075a0 <HAL_PWREx_ControlVoltageScaling+0xf8>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f8      	bne.n	8007592 <HAL_PWREx_ControlVoltageScaling+0xea>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075a0:	4b03      	ldr	r3, [pc, #12]	; (80075b0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80075a2:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 80075a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80075a8:	bf0c      	ite	eq
 80075aa:	2000      	moveq	r0, #0
 80075ac:	2003      	movne	r0, #3
 80075ae:	4770      	bx	lr
 80075b0:	40007000 	.word	0x40007000
 80075b4:	20000560 	.word	0x20000560
 80075b8:	431bde83 	.word	0x431bde83

080075bc <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80075bc:	4a02      	ldr	r2, [pc, #8]	; (80075c8 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80075be:	6893      	ldr	r3, [r2, #8]
 80075c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075c4:	6093      	str	r3, [r2, #8]
}
 80075c6:	4770      	bx	lr
 80075c8:	40007000 	.word	0x40007000

080075cc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f000 8257 	beq.w	8007a80 <HAL_RCC_OscConfig+0x4b4>
{
 80075d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075da:	6803      	ldr	r3, [r0, #0]
 80075dc:	f013 0f01 	tst.w	r3, #1
 80075e0:	d037      	beq.n	8007652 <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075e2:	4aa5      	ldr	r2, [pc, #660]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	6893      	ldr	r3, [r2, #8]
 80075e6:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075ea:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80075ec:	2b0c      	cmp	r3, #12
 80075ee:	d023      	beq.n	8007638 <HAL_RCC_OscConfig+0x6c>
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d025      	beq.n	8007640 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075f4:	6863      	ldr	r3, [r4, #4]
 80075f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fa:	d04e      	beq.n	800769a <HAL_RCC_OscConfig+0xce>
 80075fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007600:	d051      	beq.n	80076a6 <HAL_RCC_OscConfig+0xda>
 8007602:	4b9d      	ldr	r3, [pc, #628]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007612:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007614:	6863      	ldr	r3, [r4, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d052      	beq.n	80076c0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761a:	f7fd fef1 	bl	8005400 <HAL_GetTick>
 800761e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007620:	4e95      	ldr	r6, [pc, #596]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007622:	6833      	ldr	r3, [r6, #0]
 8007624:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007628:	d113      	bne.n	8007652 <HAL_RCC_OscConfig+0x86>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800762a:	f7fd fee9 	bl	8005400 <HAL_GetTick>
 800762e:	1b40      	subs	r0, r0, r5
 8007630:	2864      	cmp	r0, #100	; 0x64
 8007632:	d9f6      	bls.n	8007622 <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 8007634:	2003      	movs	r0, #3
 8007636:	e22c      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007638:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800763c:	2a03      	cmp	r2, #3
 800763e:	d1d9      	bne.n	80075f4 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007640:	4b8d      	ldr	r3, [pc, #564]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007648:	d003      	beq.n	8007652 <HAL_RCC_OscConfig+0x86>
 800764a:	6863      	ldr	r3, [r4, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8219 	beq.w	8007a84 <HAL_RCC_OscConfig+0x4b8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	f013 0f02 	tst.w	r3, #2
 8007658:	d05d      	beq.n	8007716 <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800765a:	4a87      	ldr	r2, [pc, #540]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800765c:	6893      	ldr	r3, [r2, #8]
 800765e:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007662:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007664:	2b0c      	cmp	r3, #12
 8007666:	d03a      	beq.n	80076de <HAL_RCC_OscConfig+0x112>
 8007668:	2b04      	cmp	r3, #4
 800766a:	d03c      	beq.n	80076e6 <HAL_RCC_OscConfig+0x11a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800766c:	68e3      	ldr	r3, [r4, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d077      	beq.n	8007762 <HAL_RCC_OscConfig+0x196>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007672:	4a81      	ldr	r2, [pc, #516]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007674:	6813      	ldr	r3, [r2, #0]
 8007676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800767a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767c:	f7fd fec0 	bl	8005400 <HAL_GetTick>
 8007680:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007682:	4e7d      	ldr	r6, [pc, #500]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007684:	6833      	ldr	r3, [r6, #0]
 8007686:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800768a:	d161      	bne.n	8007750 <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800768c:	f7fd feb8 	bl	8005400 <HAL_GetTick>
 8007690:	1b40      	subs	r0, r0, r5
 8007692:	2802      	cmp	r0, #2
 8007694:	d9f6      	bls.n	8007684 <HAL_RCC_OscConfig+0xb8>
          {
            return HAL_TIMEOUT;
 8007696:	2003      	movs	r0, #3
 8007698:	e1fb      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800769a:	4a77      	ldr	r2, [pc, #476]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800769c:	6813      	ldr	r3, [r2, #0]
 800769e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	e7b6      	b.n	8007614 <HAL_RCC_OscConfig+0x48>
 80076a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076aa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e7a9      	b.n	8007614 <HAL_RCC_OscConfig+0x48>
        tickstart = HAL_GetTick();
 80076c0:	f7fd fe9e 	bl	8005400 <HAL_GetTick>
 80076c4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80076c6:	4e6c      	ldr	r6, [pc, #432]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80076ce:	d0c0      	beq.n	8007652 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076d0:	f7fd fe96 	bl	8005400 <HAL_GetTick>
 80076d4:	1b40      	subs	r0, r0, r5
 80076d6:	2864      	cmp	r0, #100	; 0x64
 80076d8:	d9f6      	bls.n	80076c8 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 80076da:	2003      	movs	r0, #3
 80076dc:	e1d9      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076de:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80076e2:	2a02      	cmp	r2, #2
 80076e4:	d1c2      	bne.n	800766c <HAL_RCC_OscConfig+0xa0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076e6:	4b64      	ldr	r3, [pc, #400]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80076ee:	d003      	beq.n	80076f8 <HAL_RCC_OscConfig+0x12c>
 80076f0:	68e3      	ldr	r3, [r4, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 81c8 	beq.w	8007a88 <HAL_RCC_OscConfig+0x4bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f8:	4a5f      	ldr	r2, [pc, #380]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80076fa:	6853      	ldr	r3, [r2, #4]
 80076fc:	6921      	ldr	r1, [r4, #16]
 80076fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007702:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007706:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007708:	4b5c      	ldr	r3, [pc, #368]	; (800787c <HAL_RCC_OscConfig+0x2b0>)
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	f7fd fe34 	bl	8005378 <HAL_InitTick>
 8007710:	2800      	cmp	r0, #0
 8007712:	f040 81bb 	bne.w	8007a8c <HAL_RCC_OscConfig+0x4c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	f013 0f08 	tst.w	r3, #8
 800771c:	d04c      	beq.n	80077b8 <HAL_RCC_OscConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800771e:	6963      	ldr	r3, [r4, #20]
 8007720:	b39b      	cbz	r3, 800778a <HAL_RCC_OscConfig+0x1be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007722:	4a55      	ldr	r2, [pc, #340]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007724:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007730:	f7fd fe66 	bl	8005400 <HAL_GetTick>
 8007734:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007736:	4e50      	ldr	r6, [pc, #320]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007738:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800773c:	f013 0f02 	tst.w	r3, #2
 8007740:	d13a      	bne.n	80077b8 <HAL_RCC_OscConfig+0x1ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007742:	f7fd fe5d 	bl	8005400 <HAL_GetTick>
 8007746:	1b40      	subs	r0, r0, r5
 8007748:	2802      	cmp	r0, #2
 800774a:	d9f5      	bls.n	8007738 <HAL_RCC_OscConfig+0x16c>
        {
          return HAL_TIMEOUT;
 800774c:	2003      	movs	r0, #3
 800774e:	e1a0      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007750:	4a49      	ldr	r2, [pc, #292]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007752:	6853      	ldr	r3, [r2, #4]
 8007754:	6921      	ldr	r1, [r4, #16]
 8007756:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800775a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800775e:	6053      	str	r3, [r2, #4]
 8007760:	e7d9      	b.n	8007716 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8007762:	4a45      	ldr	r2, [pc, #276]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007764:	6813      	ldr	r3, [r2, #0]
 8007766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800776a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800776c:	f7fd fe48 	bl	8005400 <HAL_GetTick>
 8007770:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007772:	4e41      	ldr	r6, [pc, #260]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007774:	6833      	ldr	r3, [r6, #0]
 8007776:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800777a:	d0cc      	beq.n	8007716 <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800777c:	f7fd fe40 	bl	8005400 <HAL_GetTick>
 8007780:	1b40      	subs	r0, r0, r5
 8007782:	2802      	cmp	r0, #2
 8007784:	d9f6      	bls.n	8007774 <HAL_RCC_OscConfig+0x1a8>
            return HAL_TIMEOUT;
 8007786:	2003      	movs	r0, #3
 8007788:	e183      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800778a:	4a3b      	ldr	r2, [pc, #236]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 800778c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007790:	f023 0301 	bic.w	r3, r3, #1
 8007794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007798:	f7fd fe32 	bl	8005400 <HAL_GetTick>
 800779c:	4605      	mov	r5, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800779e:	4e36      	ldr	r6, [pc, #216]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80077a0:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80077a4:	f013 0f02 	tst.w	r3, #2
 80077a8:	d006      	beq.n	80077b8 <HAL_RCC_OscConfig+0x1ec>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077aa:	f7fd fe29 	bl	8005400 <HAL_GetTick>
 80077ae:	1b40      	subs	r0, r0, r5
 80077b0:	2802      	cmp	r0, #2
 80077b2:	d9f5      	bls.n	80077a0 <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 80077b4:	2003      	movs	r0, #3
 80077b6:	e16c      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	f013 0f04 	tst.w	r3, #4
 80077be:	f000 8082 	beq.w	80078c6 <HAL_RCC_OscConfig+0x2fa>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077c2:	4b2d      	ldr	r3, [pc, #180]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80077c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80077ca:	d136      	bne.n	800783a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077cc:	4b2a      	ldr	r3, [pc, #168]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80077ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80077d4:	659a      	str	r2, [r3, #88]	; 0x58
 80077d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80077e0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077e2:	4b27      	ldr	r3, [pc, #156]	; (8007880 <HAL_RCC_OscConfig+0x2b4>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80077ea:	d028      	beq.n	800783e <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d039      	beq.n	8007866 <HAL_RCC_OscConfig+0x29a>
 80077f2:	2b05      	cmp	r3, #5
 80077f4:	d046      	beq.n	8007884 <HAL_RCC_OscConfig+0x2b8>
 80077f6:	4b20      	ldr	r3, [pc, #128]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 80077f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80077fc:	f022 0201 	bic.w	r2, r2, #1
 8007800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007804:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007808:	f022 0204 	bic.w	r2, r2, #4
 800780c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007810:	68a3      	ldr	r3, [r4, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d044      	beq.n	80078a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007816:	f7fd fdf3 	bl	8005400 <HAL_GetTick>
 800781a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800781c:	4f16      	ldr	r7, [pc, #88]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800781e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007826:	f013 0f02 	tst.w	r3, #2
 800782a:	d14b      	bne.n	80078c4 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800782c:	f7fd fde8 	bl	8005400 <HAL_GetTick>
 8007830:	1b80      	subs	r0, r0, r6
 8007832:	4540      	cmp	r0, r8
 8007834:	d9f5      	bls.n	8007822 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 8007836:	2003      	movs	r0, #3
 8007838:	e12b      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
    FlagStatus       pwrclkchanged = RESET;
 800783a:	2500      	movs	r5, #0
 800783c:	e7d1      	b.n	80077e2 <HAL_RCC_OscConfig+0x216>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800783e:	4a10      	ldr	r2, [pc, #64]	; (8007880 <HAL_RCC_OscConfig+0x2b4>)
 8007840:	6813      	ldr	r3, [r2, #0]
 8007842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007846:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007848:	f7fd fdda 	bl	8005400 <HAL_GetTick>
 800784c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800784e:	4f0c      	ldr	r7, [pc, #48]	; (8007880 <HAL_RCC_OscConfig+0x2b4>)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007856:	d1c9      	bne.n	80077ec <HAL_RCC_OscConfig+0x220>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007858:	f7fd fdd2 	bl	8005400 <HAL_GetTick>
 800785c:	1b80      	subs	r0, r0, r6
 800785e:	2802      	cmp	r0, #2
 8007860:	d9f6      	bls.n	8007850 <HAL_RCC_OscConfig+0x284>
          return HAL_TIMEOUT;
 8007862:	2003      	movs	r0, #3
 8007864:	e115      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007866:	4a04      	ldr	r2, [pc, #16]	; (8007878 <HAL_RCC_OscConfig+0x2ac>)
 8007868:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800786c:	f043 0301 	orr.w	r3, r3, #1
 8007870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007874:	e7cc      	b.n	8007810 <HAL_RCC_OscConfig+0x244>
 8007876:	bf00      	nop
 8007878:	40021000 	.word	0x40021000
 800787c:	20000568 	.word	0x20000568
 8007880:	40007000 	.word	0x40007000
 8007884:	4b8a      	ldr	r3, [pc, #552]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 8007886:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800788a:	f042 0204 	orr.w	r2, r2, #4
 800788e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007892:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800789e:	e7b7      	b.n	8007810 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a0:	f7fd fdae 	bl	8005400 <HAL_GetTick>
 80078a4:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078a6:	4f82      	ldr	r7, [pc, #520]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078b0:	f013 0f02 	tst.w	r3, #2
 80078b4:	d006      	beq.n	80078c4 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078b6:	f7fd fda3 	bl	8005400 <HAL_GetTick>
 80078ba:	1b80      	subs	r0, r0, r6
 80078bc:	4540      	cmp	r0, r8
 80078be:	d9f5      	bls.n	80078ac <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 80078c0:	2003      	movs	r0, #3
 80078c2:	e0e6      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078c4:	b9e5      	cbnz	r5, 8007900 <HAL_RCC_OscConfig+0x334>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	f013 0f20 	tst.w	r3, #32
 80078cc:	d035      	beq.n	800793a <HAL_RCC_OscConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80078ce:	69a3      	ldr	r3, [r4, #24]
 80078d0:	b1e3      	cbz	r3, 800790c <HAL_RCC_OscConfig+0x340>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078d2:	4a77      	ldr	r2, [pc, #476]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 80078d4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80078d8:	f043 0301 	orr.w	r3, r3, #1
 80078dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e0:	f7fd fd8e 	bl	8005400 <HAL_GetTick>
 80078e4:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078e6:	4e72      	ldr	r6, [pc, #456]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 80078e8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80078ec:	f013 0f02 	tst.w	r3, #2
 80078f0:	d123      	bne.n	800793a <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078f2:	f7fd fd85 	bl	8005400 <HAL_GetTick>
 80078f6:	1b40      	subs	r0, r0, r5
 80078f8:	2802      	cmp	r0, #2
 80078fa:	d9f5      	bls.n	80078e8 <HAL_RCC_OscConfig+0x31c>
        {
          return HAL_TIMEOUT;
 80078fc:	2003      	movs	r0, #3
 80078fe:	e0c8      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007900:	4a6b      	ldr	r2, [pc, #428]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 8007902:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007908:	6593      	str	r3, [r2, #88]	; 0x58
 800790a:	e7dc      	b.n	80078c6 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800790c:	4a68      	ldr	r2, [pc, #416]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 800790e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8007912:	f023 0301 	bic.w	r3, r3, #1
 8007916:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791a:	f7fd fd71 	bl	8005400 <HAL_GetTick>
 800791e:	4605      	mov	r5, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007920:	4e63      	ldr	r6, [pc, #396]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 8007922:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8007926:	f013 0f02 	tst.w	r3, #2
 800792a:	d006      	beq.n	800793a <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800792c:	f7fd fd68 	bl	8005400 <HAL_GetTick>
 8007930:	1b40      	subs	r0, r0, r5
 8007932:	2802      	cmp	r0, #2
 8007934:	d9f5      	bls.n	8007922 <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 8007936:	2003      	movs	r0, #3
 8007938:	e0ab      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800793a:	69e3      	ldr	r3, [r4, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80a7 	beq.w	8007a90 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007942:	4a5b      	ldr	r2, [pc, #364]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 8007944:	6892      	ldr	r2, [r2, #8]
 8007946:	f002 020c 	and.w	r2, r2, #12
 800794a:	2a0c      	cmp	r2, #12
 800794c:	d069      	beq.n	8007a22 <HAL_RCC_OscConfig+0x456>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800794e:	2b02      	cmp	r3, #2
 8007950:	d01d      	beq.n	800798e <HAL_RCC_OscConfig+0x3c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007952:	4b57      	ldr	r3, [pc, #348]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800795a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	f022 0203 	bic.w	r2, r2, #3
 8007962:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 800796a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800796e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007970:	f7fd fd46 	bl	8005400 <HAL_GetTick>
 8007974:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007976:	4d4e      	ldr	r5, [pc, #312]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800797e:	d04e      	beq.n	8007a1e <HAL_RCC_OscConfig+0x452>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007980:	f7fd fd3e 	bl	8005400 <HAL_GetTick>
 8007984:	1b00      	subs	r0, r0, r4
 8007986:	2802      	cmp	r0, #2
 8007988:	d9f6      	bls.n	8007978 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 800798a:	2003      	movs	r0, #3
 800798c:	e081      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 800798e:	4a48      	ldr	r2, [pc, #288]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 8007990:	6813      	ldr	r3, [r2, #0]
 8007992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007996:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007998:	f7fd fd32 	bl	8005400 <HAL_GetTick>
 800799c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800799e:	4e44      	ldr	r6, [pc, #272]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 80079a0:	6833      	ldr	r3, [r6, #0]
 80079a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80079a6:	d006      	beq.n	80079b6 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a8:	f7fd fd2a 	bl	8005400 <HAL_GetTick>
 80079ac:	1b40      	subs	r0, r0, r5
 80079ae:	2802      	cmp	r0, #2
 80079b0:	d9f6      	bls.n	80079a0 <HAL_RCC_OscConfig+0x3d4>
            return HAL_TIMEOUT;
 80079b2:	2003      	movs	r0, #3
 80079b4:	e06d      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079b6:	4a3e      	ldr	r2, [pc, #248]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 80079b8:	68d1      	ldr	r1, [r2, #12]
 80079ba:	4b3e      	ldr	r3, [pc, #248]	; (8007ab4 <HAL_RCC_OscConfig+0x4e8>)
 80079bc:	400b      	ands	r3, r1
 80079be:	6a21      	ldr	r1, [r4, #32]
 80079c0:	430b      	orrs	r3, r1
 80079c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80079c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80079c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80079ca:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 80079ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079d0:	3901      	subs	r1, #1
 80079d2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80079d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80079d8:	0849      	lsrs	r1, r1, #1
 80079da:	3901      	subs	r1, #1
 80079dc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80079e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079e2:	0849      	lsrs	r1, r1, #1
 80079e4:	3901      	subs	r1, #1
 80079e6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80079ea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80079ec:	6813      	ldr	r3, [r2, #0]
 80079ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079f2:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80079f4:	68d3      	ldr	r3, [r2, #12]
 80079f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079fa:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80079fc:	f7fd fd00 	bl	8005400 <HAL_GetTick>
 8007a00:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a02:	4d2b      	ldr	r5, [pc, #172]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007a0a:	d106      	bne.n	8007a1a <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a0c:	f7fd fcf8 	bl	8005400 <HAL_GetTick>
 8007a10:	1b00      	subs	r0, r0, r4
 8007a12:	2802      	cmp	r0, #2
 8007a14:	d9f6      	bls.n	8007a04 <HAL_RCC_OscConfig+0x438>
            return HAL_TIMEOUT;
 8007a16:	2003      	movs	r0, #3
 8007a18:	e03b      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
      }
    }
  }
  }

  return HAL_OK;
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e039      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	e037      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d038      	beq.n	8007a98 <HAL_RCC_OscConfig+0x4cc>
      temp_pllckcfg = RCC->PLLCFGR;
 8007a26:	4b22      	ldr	r3, [pc, #136]	; (8007ab0 <HAL_RCC_OscConfig+0x4e4>)
 8007a28:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a2a:	f003 0103 	and.w	r1, r3, #3
 8007a2e:	6a22      	ldr	r2, [r4, #32]
 8007a30:	4291      	cmp	r1, r2
 8007a32:	d133      	bne.n	8007a9c <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a3a:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a3c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007a40:	d12e      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a48:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007a4c:	d12a      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007a52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a54:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007a58:	d126      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a5a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007a5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007a60:	0852      	lsrs	r2, r2, #1
 8007a62:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a64:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007a68:	d120      	bne.n	8007aac <HAL_RCC_OscConfig+0x4e0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007a6c:	0852      	lsrs	r2, r2, #1
 8007a6e:	3a01      	subs	r2, #1
 8007a70:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a74:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8007a78:	bf14      	ite	ne
 8007a7a:	2001      	movne	r0, #1
 8007a7c:	2000      	moveq	r0, #0
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
 8007a80:	2001      	movs	r0, #1
}
 8007a82:	4770      	bx	lr
        return HAL_ERROR;
 8007a84:	2001      	movs	r0, #1
 8007a86:	e004      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 8007a88:	2001      	movs	r0, #1
 8007a8a:	e002      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
          return HAL_ERROR;
 8007a8c:	2001      	movs	r0, #1
 8007a8e:	e000      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8007a90:	2000      	movs	r0, #0
}
 8007a92:	b002      	add	sp, #8
 8007a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8007a98:	2001      	movs	r0, #1
 8007a9a:	e7fa      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	e7f8      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	e7f6      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
 8007aa4:	2001      	movs	r0, #1
 8007aa6:	e7f4      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
 8007aa8:	2001      	movs	r0, #1
 8007aaa:	e7f2      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
 8007aac:	2001      	movs	r0, #1
 8007aae:	e7f0      	b.n	8007a92 <HAL_RCC_OscConfig+0x4c6>
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	019f800c 	.word	0x019f800c

08007ab8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	4604      	mov	r4, r0
 8007abe:	460d      	mov	r5, r1
 8007ac0:	4616      	mov	r6, r2

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	9302      	str	r3, [sp, #8]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	9304      	str	r3, [sp, #16]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	9303      	str	r3, [sp, #12]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007ace:	f3c0 4003 	ubfx	r0, r0, #16, #4

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8007ad2:	4a0f      	ldr	r2, [pc, #60]	; (8007b10 <HAL_RCC_MCOConfig+0x58>)
 8007ad4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	4083      	lsls	r3, r0
 8007ada:	430b      	orrs	r3, r1
 8007adc:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007ade:	b2a3      	uxth	r3, r4
 8007ae0:	9301      	str	r3, [sp, #4]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007ae2:	f3c4 5307 	ubfx	r3, r4, #20, #8
 8007ae6:	9305      	str	r3, [sp, #20]
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007ae8:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8007aec:	a901      	add	r1, sp, #4
 8007aee:	0280      	lsls	r0, r0, #10
 8007af0:	f7ff fbe8 	bl	80072c4 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8007af4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8007af8:	d107      	bne.n	8007b0a <HAL_RCC_MCOConfig+0x52>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007afa:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <HAL_RCC_MCOConfig+0x58>)
 8007afc:	6899      	ldr	r1, [r3, #8]
 8007afe:	f021 41fe 	bic.w	r1, r1, #2130706432	; 0x7f000000
 8007b02:	ea41 0206 	orr.w	r2, r1, r6
 8007b06:	432a      	orrs	r2, r5
 8007b08:	609a      	str	r2, [r3, #8]
  }
}
 8007b0a:	b006      	add	sp, #24
 8007b0c:	bd70      	pop	{r4, r5, r6, pc}
 8007b0e:	bf00      	nop
 8007b10:	40021000 	.word	0x40021000

08007b14 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007b14:	4b17      	ldr	r3, [pc, #92]	; (8007b74 <HAL_RCC_GetSysClockFreq+0x60>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f003 030c 	and.w	r3, r3, #12
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d025      	beq.n	8007b6c <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007b20:	4b14      	ldr	r3, [pc, #80]	; (8007b74 <HAL_RCC_GetSysClockFreq+0x60>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 030c 	and.w	r3, r3, #12
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d021      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007b2c:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <HAL_RCC_GetSysClockFreq+0x60>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f003 030c 	and.w	r3, r3, #12
 8007b34:	2b0c      	cmp	r3, #12
 8007b36:	d001      	beq.n	8007b3c <HAL_RCC_GetSysClockFreq+0x28>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007b38:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007b3a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <HAL_RCC_GetSysClockFreq+0x60>)
 8007b3e:	68da      	ldr	r2, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007b46:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b48:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <HAL_RCC_GetSysClockFreq+0x60>)
 8007b4a:	68d0      	ldr	r0, [r2, #12]
 8007b4c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8007b50:	4a09      	ldr	r2, [pc, #36]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x64>)
 8007b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b56:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <HAL_RCC_GetSysClockFreq+0x60>)
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007b62:	3301      	adds	r3, #1
 8007b64:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007b66:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b6a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007b6c:	4802      	ldr	r0, [pc, #8]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x64>)
 8007b6e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007b70:	4801      	ldr	r0, [pc, #4]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x64>)
 8007b72:	4770      	bx	lr
 8007b74:	40021000 	.word	0x40021000
 8007b78:	00f42400 	.word	0x00f42400

08007b7c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f000 80b9 	beq.w	8007cf4 <HAL_RCC_ClockConfig+0x178>
{
 8007b82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b86:	460c      	mov	r4, r1
 8007b88:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b8a:	4b84      	ldr	r3, [pc, #528]	; (8007d9c <HAL_RCC_ClockConfig+0x220>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	428b      	cmp	r3, r1
 8007b94:	d20b      	bcs.n	8007bae <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b96:	4a81      	ldr	r2, [pc, #516]	; (8007d9c <HAL_RCC_ClockConfig+0x220>)
 8007b98:	6813      	ldr	r3, [r2, #0]
 8007b9a:	f023 030f 	bic.w	r3, r3, #15
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	428b      	cmp	r3, r1
 8007baa:	f040 80a5 	bne.w	8007cf8 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	f013 0f01 	tst.w	r3, #1
 8007bb4:	f000 80a4 	beq.w	8007d00 <HAL_RCC_ClockConfig+0x184>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bb8:	686a      	ldr	r2, [r5, #4]
 8007bba:	2a03      	cmp	r2, #3
 8007bbc:	d030      	beq.n	8007c20 <HAL_RCC_ClockConfig+0xa4>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bbe:	2a02      	cmp	r2, #2
 8007bc0:	d063      	beq.n	8007c8a <HAL_RCC_ClockConfig+0x10e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bc2:	4b77      	ldr	r3, [pc, #476]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007bca:	f000 8097 	beq.w	8007cfc <HAL_RCC_ClockConfig+0x180>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007bce:	f7ff ffa1 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007bd2:	4b74      	ldr	r3, [pc, #464]	; (8007da4 <HAL_RCC_ClockConfig+0x228>)
 8007bd4:	4298      	cmp	r0, r3
 8007bd6:	d965      	bls.n	8007ca4 <HAL_RCC_ClockConfig+0x128>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bd8:	4a71      	ldr	r2, [pc, #452]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007bda:	6893      	ldr	r3, [r2, #8]
 8007bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007be6:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bea:	4a6d      	ldr	r2, [pc, #436]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007bec:	6893      	ldr	r3, [r2, #8]
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	6869      	ldr	r1, [r5, #4]
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8007bf8:	f7fd fc02 	bl	8005400 <HAL_GetTick>
 8007bfc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bfe:	4f68      	ldr	r7, [pc, #416]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c00:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 030c 	and.w	r3, r3, #12
 8007c0a:	686a      	ldr	r2, [r5, #4]
 8007c0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007c10:	d04b      	beq.n	8007caa <HAL_RCC_ClockConfig+0x12e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c12:	f7fd fbf5 	bl	8005400 <HAL_GetTick>
 8007c16:	1b80      	subs	r0, r0, r6
 8007c18:	4540      	cmp	r0, r8
 8007c1a:	d9f3      	bls.n	8007c04 <HAL_RCC_ClockConfig+0x88>
        return HAL_TIMEOUT;
 8007c1c:	2003      	movs	r0, #3
 8007c1e:	e0ba      	b.n	8007d96 <HAL_RCC_ClockConfig+0x21a>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c20:	4a5f      	ldr	r2, [pc, #380]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007c22:	6812      	ldr	r2, [r2, #0]
 8007c24:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8007c28:	d101      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xb2>
        return HAL_ERROR;
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	e0b3      	b.n	8007d96 <HAL_RCC_ClockConfig+0x21a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c2e:	495c      	ldr	r1, [pc, #368]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007c30:	68ca      	ldr	r2, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c32:	68c9      	ldr	r1, [r1, #12]
 8007c34:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8007c38:	3101      	adds	r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c3a:	4a59      	ldr	r2, [pc, #356]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007c3c:	68d2      	ldr	r2, [r2, #12]
 8007c3e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8007c42:	4859      	ldr	r0, [pc, #356]	; (8007da8 <HAL_RCC_ClockConfig+0x22c>)
 8007c44:	fbb0 f1f1 	udiv	r1, r0, r1
 8007c48:	fb01 f202 	mul.w	r2, r1, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c4c:	4954      	ldr	r1, [pc, #336]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007c4e:	68c9      	ldr	r1, [r1, #12]
 8007c50:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8007c54:	3101      	adds	r1, #1
 8007c56:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8007c58:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8007c5c:	4951      	ldr	r1, [pc, #324]	; (8007da4 <HAL_RCC_ClockConfig+0x228>)
 8007c5e:	428a      	cmp	r2, r1
 8007c60:	d91a      	bls.n	8007c98 <HAL_RCC_ClockConfig+0x11c>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007c62:	4a4f      	ldr	r2, [pc, #316]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007c64:	6892      	ldr	r2, [r2, #8]
 8007c66:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8007c6a:	d004      	beq.n	8007c76 <HAL_RCC_ClockConfig+0xfa>
 8007c6c:	f013 0902 	ands.w	r9, r3, #2
 8007c70:	d0bb      	beq.n	8007bea <HAL_RCC_ClockConfig+0x6e>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c72:	68ab      	ldr	r3, [r5, #8]
 8007c74:	b99b      	cbnz	r3, 8007c9e <HAL_RCC_ClockConfig+0x122>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c76:	4a4a      	ldr	r2, [pc, #296]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007c78:	6893      	ldr	r3, [r2, #8]
 8007c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c84:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007c88:	e7af      	b.n	8007bea <HAL_RCC_ClockConfig+0x6e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c8a:	4b45      	ldr	r3, [pc, #276]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007c92:	d19c      	bne.n	8007bce <HAL_RCC_ClockConfig+0x52>
          return HAL_ERROR;
 8007c94:	2001      	movs	r0, #1
 8007c96:	e07e      	b.n	8007d96 <HAL_RCC_ClockConfig+0x21a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007c98:	f04f 0900 	mov.w	r9, #0
 8007c9c:	e7a5      	b.n	8007bea <HAL_RCC_ClockConfig+0x6e>
 8007c9e:	f04f 0900 	mov.w	r9, #0
 8007ca2:	e7a2      	b.n	8007bea <HAL_RCC_ClockConfig+0x6e>
 8007ca4:	f04f 0900 	mov.w	r9, #0
 8007ca8:	e79f      	b.n	8007bea <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007caa:	682b      	ldr	r3, [r5, #0]
 8007cac:	f013 0f02 	tst.w	r3, #2
 8007cb0:	d129      	bne.n	8007d06 <HAL_RCC_ClockConfig+0x18a>
    if(hpre == RCC_SYSCLK_DIV2)
 8007cb2:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8007cb6:	d140      	bne.n	8007d3a <HAL_RCC_ClockConfig+0x1be>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007cb8:	4a39      	ldr	r2, [pc, #228]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007cba:	6893      	ldr	r3, [r2, #8]
 8007cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cc0:	6093      	str	r3, [r2, #8]
 8007cc2:	e03a      	b.n	8007d3a <HAL_RCC_ClockConfig+0x1be>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cc4:	4a35      	ldr	r2, [pc, #212]	; (8007d9c <HAL_RCC_ClockConfig+0x220>)
 8007cc6:	6813      	ldr	r3, [r2, #0]
 8007cc8:	f023 030f 	bic.w	r3, r3, #15
 8007ccc:	4323      	orrs	r3, r4
 8007cce:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007cd0:	f7fd fb96 	bl	8005400 <HAL_GetTick>
 8007cd4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cd6:	4f31      	ldr	r7, [pc, #196]	; (8007d9c <HAL_RCC_ClockConfig+0x220>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd8:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	d02f      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x1ca>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ce6:	f7fd fb8b 	bl	8005400 <HAL_GetTick>
 8007cea:	1b80      	subs	r0, r0, r6
 8007cec:	4540      	cmp	r0, r8
 8007cee:	d9f5      	bls.n	8007cdc <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007cf0:	2003      	movs	r0, #3
 8007cf2:	e050      	b.n	8007d96 <HAL_RCC_ClockConfig+0x21a>
    return HAL_ERROR;
 8007cf4:	2001      	movs	r0, #1
}
 8007cf6:	4770      	bx	lr
      return HAL_ERROR;
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	e04c      	b.n	8007d96 <HAL_RCC_ClockConfig+0x21a>
          return HAL_ERROR;
 8007cfc:	2001      	movs	r0, #1
 8007cfe:	e04a      	b.n	8007d96 <HAL_RCC_ClockConfig+0x21a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d00:	f013 0f02 	tst.w	r3, #2
 8007d04:	d019      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x1be>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d06:	f013 0f04 	tst.w	r3, #4
 8007d0a:	d004      	beq.n	8007d16 <HAL_RCC_ClockConfig+0x19a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d0c:	4a24      	ldr	r2, [pc, #144]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007d0e:	6893      	ldr	r3, [r2, #8]
 8007d10:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007d14:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d16:	682b      	ldr	r3, [r5, #0]
 8007d18:	f013 0f08 	tst.w	r3, #8
 8007d1c:	d006      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007d1e:	4a20      	ldr	r2, [pc, #128]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007d20:	6893      	ldr	r3, [r2, #8]
 8007d22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007d2a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d2c:	4a1c      	ldr	r2, [pc, #112]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007d2e:	6893      	ldr	r3, [r2, #8]
 8007d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d34:	68a9      	ldr	r1, [r5, #8]
 8007d36:	430b      	orrs	r3, r1
 8007d38:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d3a:	4b18      	ldr	r3, [pc, #96]	; (8007d9c <HAL_RCC_ClockConfig+0x220>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	d8be      	bhi.n	8007cc4 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d46:	682b      	ldr	r3, [r5, #0]
 8007d48:	f013 0f04 	tst.w	r3, #4
 8007d4c:	d006      	beq.n	8007d5c <HAL_RCC_ClockConfig+0x1e0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d4e:	4a14      	ldr	r2, [pc, #80]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007d50:	6893      	ldr	r3, [r2, #8]
 8007d52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007d56:	68e9      	ldr	r1, [r5, #12]
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	f013 0f08 	tst.w	r3, #8
 8007d62:	d007      	beq.n	8007d74 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d64:	4a0e      	ldr	r2, [pc, #56]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007d66:	6893      	ldr	r3, [r2, #8]
 8007d68:	6929      	ldr	r1, [r5, #16]
 8007d6a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007d6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007d72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d74:	f7ff fece 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 8007d78:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <HAL_RCC_ClockConfig+0x224>)
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007d80:	4a0a      	ldr	r2, [pc, #40]	; (8007dac <HAL_RCC_ClockConfig+0x230>)
 8007d82:	5cd3      	ldrb	r3, [r2, r3]
 8007d84:	f003 031f 	and.w	r3, r3, #31
 8007d88:	40d8      	lsrs	r0, r3
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <HAL_RCC_ClockConfig+0x234>)
 8007d8c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8007d8e:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <HAL_RCC_ClockConfig+0x238>)
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	f7fd faf1 	bl	8005378 <HAL_InitTick>
}
 8007d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40022000 	.word	0x40022000
 8007da0:	40021000 	.word	0x40021000
 8007da4:	04c4b400 	.word	0x04c4b400
 8007da8:	00f42400 	.word	0x00f42400
 8007dac:	0800e464 	.word	0x0800e464
 8007db0:	20000560 	.word	0x20000560
 8007db4:	20000568 	.word	0x20000568

08007db8 <HAL_RCC_GetHCLKFreq>:
}
 8007db8:	4b01      	ldr	r3, [pc, #4]	; (8007dc0 <HAL_RCC_GetHCLKFreq+0x8>)
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000560 	.word	0x20000560

08007dc4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <HAL_RCC_GetPCLK1Freq+0x18>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007dcc:	4a04      	ldr	r2, [pc, #16]	; (8007de0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007dce:	5cd3      	ldrb	r3, [r2, r3]
 8007dd0:	f003 031f 	and.w	r3, r3, #31
 8007dd4:	4a03      	ldr	r2, [pc, #12]	; (8007de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dd6:	6810      	ldr	r0, [r2, #0]
}
 8007dd8:	40d8      	lsrs	r0, r3
 8007dda:	4770      	bx	lr
 8007ddc:	40021000 	.word	0x40021000
 8007de0:	0800e474 	.word	0x0800e474
 8007de4:	20000560 	.word	0x20000560

08007de8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007df0:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007df2:	5cd3      	ldrb	r3, [r2, r3]
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	4a03      	ldr	r2, [pc, #12]	; (8007e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dfa:	6810      	ldr	r0, [r2, #0]
}
 8007dfc:	40d8      	lsrs	r0, r3
 8007dfe:	4770      	bx	lr
 8007e00:	40021000 	.word	0x40021000
 8007e04:	0800e474 	.word	0x0800e474
 8007e08:	20000560 	.word	0x20000560

08007e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e14:	6803      	ldr	r3, [r0, #0]
 8007e16:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007e1a:	d059      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e1c:	4bab      	ldr	r3, [pc, #684]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e20:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007e24:	d125      	bne.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e26:	4ba9      	ldr	r3, [pc, #676]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007e28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007e3a:	2701      	movs	r7, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e3c:	4aa4      	ldr	r2, [pc, #656]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007e3e:	6813      	ldr	r3, [r2, #0]
 8007e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e46:	f7fd fadb 	bl	8005400 <HAL_GetTick>
 8007e4a:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e4c:	4ea0      	ldr	r6, [pc, #640]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007e4e:	6833      	ldr	r3, [r6, #0]
 8007e50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007e54:	f040 813e 	bne.w	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e58:	f7fd fad2 	bl	8005400 <HAL_GetTick>
 8007e5c:	1b40      	subs	r0, r0, r5
 8007e5e:	2802      	cmp	r0, #2
 8007e60:	d9f5      	bls.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        ret = HAL_TIMEOUT;
 8007e62:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e64:	b3af      	cbz	r7, 8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e66:	4a99      	ldr	r2, [pc, #612]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007e68:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8007e70:	e02f      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    FlagStatus       pwrclkchanged = RESET;
 8007e72:	2700      	movs	r7, #0
 8007e74:	e7e2      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x30>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e76:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d012      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x96>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e7c:	4a93      	ldr	r2, [pc, #588]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007e7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e86:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8007e8a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007e8e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e92:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8007e96:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007e9a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8007e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ea2:	f013 0f01 	tst.w	r3, #1
 8007ea6:	f000 811c 	beq.w	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
        tickstart = HAL_GetTick();
 8007eaa:	f7fd faa9 	bl	8005400 <HAL_GetTick>
 8007eae:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eb0:	4e86      	ldr	r6, [pc, #536]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eb2:	f241 3888 	movw	r8, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eb6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8007eba:	f013 0f02 	tst.w	r3, #2
 8007ebe:	f040 8110 	bne.w	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ec2:	f7fd fa9d 	bl	8005400 <HAL_GetTick>
 8007ec6:	1b40      	subs	r0, r0, r5
 8007ec8:	4540      	cmp	r0, r8
 8007eca:	d9f4      	bls.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
            ret = HAL_TIMEOUT;
 8007ecc:	2003      	movs	r0, #3
 8007ece:	e7c9      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x58>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ed0:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	f013 0f01 	tst.w	r3, #1
 8007ed8:	d008      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007eda:	4a7c      	ldr	r2, [pc, #496]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007edc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007ee0:	f023 0303 	bic.w	r3, r3, #3
 8007ee4:	6861      	ldr	r1, [r4, #4]
 8007ee6:	430b      	orrs	r3, r1
 8007ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	f013 0f02 	tst.w	r3, #2
 8007ef2:	d008      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ef4:	4a75      	ldr	r2, [pc, #468]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007ef6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007efa:	f023 030c 	bic.w	r3, r3, #12
 8007efe:	68a1      	ldr	r1, [r4, #8]
 8007f00:	430b      	orrs	r3, r1
 8007f02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	f013 0f04 	tst.w	r3, #4
 8007f0c:	d008      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f0e:	4a6f      	ldr	r2, [pc, #444]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007f10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f14:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007f18:	68e1      	ldr	r1, [r4, #12]
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	f013 0f08 	tst.w	r3, #8
 8007f26:	d008      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f28:	4a68      	ldr	r2, [pc, #416]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007f2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f32:	6921      	ldr	r1, [r4, #16]
 8007f34:	430b      	orrs	r3, r1
 8007f36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	f013 0f20 	tst.w	r3, #32
 8007f40:	d008      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f42:	4a62      	ldr	r2, [pc, #392]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007f44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007f4c:	6961      	ldr	r1, [r4, #20]
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007f5a:	d008      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f5c:	4a5b      	ldr	r2, [pc, #364]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007f5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f66:	69a1      	ldr	r1, [r4, #24]
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f74:	d008      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f76:	4a55      	ldr	r2, [pc, #340]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007f78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007f80:	69e1      	ldr	r1, [r4, #28]
 8007f82:	430b      	orrs	r3, r1
 8007f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007f8e:	d008      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f90:	4a4e      	ldr	r2, [pc, #312]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007f92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007f9a:	6a21      	ldr	r1, [r4, #32]
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007fa8:	d008      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007faa:	4a48      	ldr	r2, [pc, #288]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007fac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007fb0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007fb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007fc2:	d00c      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fc4:	4a41      	ldr	r2, [pc, #260]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007fc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007fca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007fce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007fd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fdc:	d057      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x282>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007fe4:	d00c      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fe6:	4a39      	ldr	r2, [pc, #228]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007fe8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007fec:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007ff0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007ff2:	430b      	orrs	r3, r1
 8007ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007ff8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ffe:	d04b      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008006:	d00c      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008008:	4a30      	ldr	r2, [pc, #192]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800800a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800800e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008012:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008014:	430b      	orrs	r3, r1
 8008016:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800801a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800801c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008020:	d03f      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008028:	d00c      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800802a:	4a28      	ldr	r2, [pc, #160]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800802c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008030:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008036:	430b      	orrs	r3, r1
 8008038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800803c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800803e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008042:	d033      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800804a:	d00c      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800804c:	4a1f      	ldr	r2, [pc, #124]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800804e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008052:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008056:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008058:	430b      	orrs	r3, r1
 800805a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800805e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008064:	d027      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800806c:	d00c      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800806e:	4a17      	ldr	r2, [pc, #92]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008070:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008074:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008078:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800807a:	430b      	orrs	r3, r1
 800807c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008086:	d01b      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  }

#endif /* QUADSPI */

  return status;
}
 8008088:	b002      	add	sp, #8
 800808a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800808e:	68d3      	ldr	r3, [r2, #12]
 8008090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008094:	60d3      	str	r3, [r2, #12]
 8008096:	e7a2      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008098:	68d3      	ldr	r3, [r2, #12]
 800809a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800809e:	60d3      	str	r3, [r2, #12]
 80080a0:	e7ae      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080a2:	68d3      	ldr	r3, [r2, #12]
 80080a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080a8:	60d3      	str	r3, [r2, #12]
 80080aa:	e7ba      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080ac:	68d3      	ldr	r3, [r2, #12]
 80080ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080b2:	60d3      	str	r3, [r2, #12]
 80080b4:	e7c6      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080b6:	68d3      	ldr	r3, [r2, #12]
 80080b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080bc:	60d3      	str	r3, [r2, #12]
 80080be:	e7d2      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80080c0:	68d3      	ldr	r3, [r2, #12]
 80080c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080c6:	60d3      	str	r3, [r2, #12]
  return status;
 80080c8:	e7de      	b.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80080ca:	bf00      	nop
 80080cc:	40021000 	.word	0x40021000
 80080d0:	40007000 	.word	0x40007000
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080d4:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80080d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80080de:	f47f aeca 	bne.w	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x6a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080e2:	4a05      	ldr	r2, [pc, #20]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80080e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80080e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080ee:	430b      	orrs	r3, r1
 80080f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080f4:	2000      	movs	r0, #0
 80080f6:	e6b5      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80080f8:	40021000 	.word	0x40021000

080080fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	4681      	mov	r9, r0
 8008104:	460f      	mov	r7, r1
 8008106:	4616      	mov	r6, r2
 8008108:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800810a:	f7fd f979 	bl	8005400 <HAL_GetTick>
 800810e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008110:	442b      	add	r3, r5
 8008112:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8008116:	f7fd f973 	bl	8005400 <HAL_GetTick>
 800811a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800811c:	4b2c      	ldr	r3, [pc, #176]	; (80081d0 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8008124:	fb08 f303 	mul.w	r3, r8, r3
 8008128:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800812a:	f8d9 2000 	ldr.w	r2, [r9]
 800812e:	6894      	ldr	r4, [r2, #8]
 8008130:	ea37 0404 	bics.w	r4, r7, r4
 8008134:	bf0c      	ite	eq
 8008136:	2301      	moveq	r3, #1
 8008138:	2300      	movne	r3, #0
 800813a:	42b3      	cmp	r3, r6
 800813c:	d044      	beq.n	80081c8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 800813e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008142:	d0f4      	beq.n	800812e <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008144:	f7fd f95c 	bl	8005400 <HAL_GetTick>
 8008148:	eba0 000a 	sub.w	r0, r0, sl
 800814c:	4540      	cmp	r0, r8
 800814e:	d207      	bcs.n	8008160 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008150:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8008152:	2b00      	cmp	r3, #0
 8008154:	bf08      	it	eq
 8008156:	4698      	moveq	r8, r3
      }
      count--;
 8008158:	9b01      	ldr	r3, [sp, #4]
 800815a:	3b01      	subs	r3, #1
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	e7e4      	b.n	800812a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008160:	f8d9 2000 	ldr.w	r2, [r9]
 8008164:	6853      	ldr	r3, [r2, #4]
 8008166:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800816a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800816c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008174:	d00c      	beq.n	8008190 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008176:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800817a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800817e:	d016      	beq.n	80081ae <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8008180:	2301      	movs	r3, #1
 8008182:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008186:	2300      	movs	r3, #0
 8008188:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 800818c:	2003      	movs	r0, #3
 800818e:	e01c      	b.n	80081ca <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008190:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008198:	d002      	beq.n	80081a0 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800819a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819e:	d1ea      	bne.n	8008176 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80081a0:	f8d9 2000 	ldr.w	r2, [r9]
 80081a4:	6813      	ldr	r3, [r2, #0]
 80081a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081aa:	6013      	str	r3, [r2, #0]
 80081ac:	e7e3      	b.n	8008176 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80081ae:	f8d9 2000 	ldr.w	r2, [r9]
 80081b2:	6813      	ldr	r3, [r2, #0]
 80081b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	f8d9 2000 	ldr.w	r2, [r9]
 80081be:	6813      	ldr	r3, [r2, #0]
 80081c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	e7db      	b.n	8008180 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 80081c8:	2000      	movs	r0, #0
}
 80081ca:	b002      	add	sp, #8
 80081cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d0:	20000560 	.word	0x20000560

080081d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	4680      	mov	r8, r0
 80081dc:	460c      	mov	r4, r1
 80081de:	4615      	mov	r5, r2
 80081e0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081e8:	f7fd f90a 	bl	8005400 <HAL_GetTick>
 80081ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80081ee:	4437      	add	r7, r6
 80081f0:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 80081f2:	f7fd f905 	bl	8005400 <HAL_GetTick>
 80081f6:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80081f8:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80081fc:	4b33      	ldr	r3, [pc, #204]	; (80082cc <SPI_WaitFifoStateUntilTimeout+0xf8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008204:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008208:	0d1b      	lsrs	r3, r3, #20
 800820a:	fb07 f303 	mul.w	r3, r7, r3
 800820e:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8008210:	f8d8 2000 	ldr.w	r2, [r8]
 8008214:	e002      	b.n	800821c <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8008216:	f1b6 3fff 	cmp.w	r6, #4294967295
 800821a:	d111      	bne.n	8008240 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 800821c:	6893      	ldr	r3, [r2, #8]
 800821e:	ea03 0c04 	and.w	ip, r3, r4
 8008222:	45ac      	cmp	ip, r5
 8008224:	d04e      	beq.n	80082c4 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008226:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800822a:	d1f4      	bne.n	8008216 <SPI_WaitFifoStateUntilTimeout+0x42>
 800822c:	2d00      	cmp	r5, #0
 800822e:	d1f2      	bne.n	8008216 <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 8008230:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800823a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800823e:	e7ea      	b.n	8008216 <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008240:	f7fd f8de 	bl	8005400 <HAL_GetTick>
 8008244:	eba0 0009 	sub.w	r0, r0, r9
 8008248:	42b8      	cmp	r0, r7
 800824a:	d207      	bcs.n	800825c <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800824c:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800824e:	2b00      	cmp	r3, #0
 8008250:	bf08      	it	eq
 8008252:	461f      	moveq	r7, r3
      }
      count--;
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	3b01      	subs	r3, #1
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	e7d9      	b.n	8008210 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800825c:	f8d8 2000 	ldr.w	r2, [r8]
 8008260:	6853      	ldr	r3, [r2, #4]
 8008262:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008266:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008268:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800826c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008270:	d00c      	beq.n	800828c <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008272:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8008276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800827a:	d016      	beq.n	80082aa <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800827c:	2301      	movs	r3, #1
 800827e:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008282:	2300      	movs	r3, #0
 8008284:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008288:	2003      	movs	r0, #3
 800828a:	e01c      	b.n	80082c6 <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800828c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008294:	d002      	beq.n	800829c <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829a:	d1ea      	bne.n	8008272 <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 800829c:	f8d8 2000 	ldr.w	r2, [r8]
 80082a0:	6813      	ldr	r3, [r2, #0]
 80082a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	e7e3      	b.n	8008272 <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 80082aa:	f8d8 2000 	ldr.w	r2, [r8]
 80082ae:	6813      	ldr	r3, [r2, #0]
 80082b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	f8d8 2000 	ldr.w	r2, [r8]
 80082ba:	6813      	ldr	r3, [r2, #0]
 80082bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	e7db      	b.n	800827c <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 80082c4:	2000      	movs	r0, #0
}
 80082c6:	b002      	add	sp, #8
 80082c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082cc:	20000560 	.word	0x20000560

080082d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	4604      	mov	r4, r0
 80082d6:	460d      	mov	r5, r1
 80082d8:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082da:	9200      	str	r2, [sp, #0]
 80082dc:	460b      	mov	r3, r1
 80082de:	2200      	movs	r2, #0
 80082e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80082e4:	f7ff ff76 	bl	80081d4 <SPI_WaitFifoStateUntilTimeout>
 80082e8:	b9b0      	cbnz	r0, 8008318 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082ea:	9600      	str	r6, [sp, #0]
 80082ec:	462b      	mov	r3, r5
 80082ee:	2200      	movs	r2, #0
 80082f0:	2180      	movs	r1, #128	; 0x80
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7ff ff02 	bl	80080fc <SPI_WaitFlagStateUntilTimeout>
 80082f8:	b9a8      	cbnz	r0, 8008326 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082fa:	9600      	str	r6, [sp, #0]
 80082fc:	462b      	mov	r3, r5
 80082fe:	2200      	movs	r2, #0
 8008300:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008304:	4620      	mov	r0, r4
 8008306:	f7ff ff65 	bl	80081d4 <SPI_WaitFifoStateUntilTimeout>
 800830a:	b150      	cbz	r0, 8008322 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800830c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800830e:	f043 0320 	orr.w	r3, r3, #32
 8008312:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008314:	2003      	movs	r0, #3
 8008316:	e004      	b.n	8008322 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008318:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800831a:	f043 0320 	orr.w	r3, r3, #32
 800831e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008320:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8008322:	b002      	add	sp, #8
 8008324:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008326:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008328:	f043 0320 	orr.w	r3, r3, #32
 800832c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800832e:	2003      	movs	r0, #3
 8008330:	e7f7      	b.n	8008322 <SPI_EndRxTxTransaction+0x52>

08008332 <SPI_EndRxTransaction>:
{
 8008332:	b570      	push	{r4, r5, r6, lr}
 8008334:	b082      	sub	sp, #8
 8008336:	4604      	mov	r4, r0
 8008338:	460d      	mov	r5, r1
 800833a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800833c:	6843      	ldr	r3, [r0, #4]
 800833e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008342:	d00d      	beq.n	8008360 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008344:	9600      	str	r6, [sp, #0]
 8008346:	462b      	mov	r3, r5
 8008348:	2200      	movs	r2, #0
 800834a:	2180      	movs	r1, #128	; 0x80
 800834c:	4620      	mov	r0, r4
 800834e:	f7ff fed5 	bl	80080fc <SPI_WaitFlagStateUntilTimeout>
 8008352:	b990      	cbnz	r0, 800837a <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008354:	6863      	ldr	r3, [r4, #4]
 8008356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800835a:	d014      	beq.n	8008386 <SPI_EndRxTransaction+0x54>
}
 800835c:	b002      	add	sp, #8
 800835e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008360:	6883      	ldr	r3, [r0, #8]
 8008362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008366:	d002      	beq.n	800836e <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800836c:	d1ea      	bne.n	8008344 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800836e:	6822      	ldr	r2, [r4, #0]
 8008370:	6813      	ldr	r3, [r2, #0]
 8008372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	e7e4      	b.n	8008344 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800837a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800837c:	f043 0320 	orr.w	r3, r3, #32
 8008380:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008382:	2003      	movs	r0, #3
 8008384:	e7ea      	b.n	800835c <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008386:	68a3      	ldr	r3, [r4, #8]
 8008388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800838c:	d002      	beq.n	8008394 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800838e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008392:	d1e3      	bne.n	800835c <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008394:	9600      	str	r6, [sp, #0]
 8008396:	462b      	mov	r3, r5
 8008398:	2200      	movs	r2, #0
 800839a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff ff18 	bl	80081d4 <SPI_WaitFifoStateUntilTimeout>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d0d9      	beq.n	800835c <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80083aa:	f043 0320 	orr.w	r3, r3, #32
 80083ae:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80083b0:	2003      	movs	r0, #3
 80083b2:	e7d3      	b.n	800835c <SPI_EndRxTransaction+0x2a>

080083b4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d06d      	beq.n	8008494 <HAL_SPI_Init+0xe0>
{
 80083b8:	b510      	push	{r4, lr}
 80083ba:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80083be:	b933      	cbnz	r3, 80083ce <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083c0:	6843      	ldr	r3, [r0, #4]
 80083c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083c6:	d005      	beq.n	80083d4 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083c8:	2300      	movs	r3, #0
 80083ca:	61c3      	str	r3, [r0, #28]
 80083cc:	e002      	b.n	80083d4 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083ce:	2300      	movs	r3, #0
 80083d0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083d2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80083d8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d053      	beq.n	8008488 <HAL_SPI_Init+0xd4>
  hspi->State = HAL_SPI_STATE_BUSY;
 80083e0:	2302      	movs	r3, #2
 80083e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	6813      	ldr	r3, [r2, #0]
 80083ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ee:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083f0:	68e3      	ldr	r3, [r4, #12]
 80083f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083f6:	bf8c      	ite	hi
 80083f8:	2100      	movhi	r1, #0
 80083fa:	2101      	movls	r1, #1
 80083fc:	0309      	lsls	r1, r1, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80083fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008402:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008406:	bf1c      	itt	ne
 8008408:	2300      	movne	r3, #0
 800840a:	62a3      	strne	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800840c:	6822      	ldr	r2, [r4, #0]
 800840e:	6863      	ldr	r3, [r4, #4]
 8008410:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008414:	68a0      	ldr	r0, [r4, #8]
 8008416:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800841a:	4303      	orrs	r3, r0
 800841c:	6920      	ldr	r0, [r4, #16]
 800841e:	f000 0002 	and.w	r0, r0, #2
 8008422:	4303      	orrs	r3, r0
 8008424:	6960      	ldr	r0, [r4, #20]
 8008426:	f000 0001 	and.w	r0, r0, #1
 800842a:	4303      	orrs	r3, r0
 800842c:	69a0      	ldr	r0, [r4, #24]
 800842e:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8008432:	4303      	orrs	r3, r0
 8008434:	69e0      	ldr	r0, [r4, #28]
 8008436:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800843a:	4303      	orrs	r3, r0
 800843c:	6a20      	ldr	r0, [r4, #32]
 800843e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8008442:	4303      	orrs	r3, r0
 8008444:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008446:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 800844a:	4303      	orrs	r3, r0
 800844c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800844e:	6822      	ldr	r2, [r4, #0]
 8008450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008452:	f003 0310 	and.w	r3, r3, #16
 8008456:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008458:	f000 0008 	and.w	r0, r0, #8
 800845c:	4303      	orrs	r3, r0
 800845e:	68e0      	ldr	r0, [r4, #12]
 8008460:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8008464:	4303      	orrs	r3, r0
 8008466:	8b60      	ldrh	r0, [r4, #26]
 8008468:	f000 0004 	and.w	r0, r0, #4
 800846c:	4303      	orrs	r3, r0
 800846e:	430b      	orrs	r3, r1
 8008470:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	69d3      	ldr	r3, [r2, #28]
 8008476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800847a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800847c:	2000      	movs	r0, #0
 800847e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008480:	2301      	movs	r3, #1
 8008482:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8008486:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8008488:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800848c:	4620      	mov	r0, r4
 800848e:	f7fc fb89 	bl	8004ba4 <HAL_SPI_MspInit>
 8008492:	e7a5      	b.n	80083e0 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8008494:	2001      	movs	r0, #1
}
 8008496:	4770      	bx	lr

08008498 <HAL_SPI_TransmitReceive_DMA>:
{
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800849c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80084a0:	2801      	cmp	r0, #1
 80084a2:	f000 80f7 	beq.w	8008694 <HAL_SPI_TransmitReceive_DMA+0x1fc>
 80084a6:	2001      	movs	r0, #1
 80084a8:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 80084ac:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80084b0:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80084b2:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80084b4:	2801      	cmp	r0, #1
 80084b6:	d00a      	beq.n	80084ce <HAL_SPI_TransmitReceive_DMA+0x36>
 80084b8:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80084bc:	f040 80db 	bne.w	8008676 <HAL_SPI_TransmitReceive_DMA+0x1de>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084c0:	68a5      	ldr	r5, [r4, #8]
 80084c2:	2d00      	cmp	r5, #0
 80084c4:	f040 80dc 	bne.w	8008680 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80084c8:	2804      	cmp	r0, #4
 80084ca:	f040 80db 	bne.w	8008684 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084ce:	2900      	cmp	r1, #0
 80084d0:	f000 80da 	beq.w	8008688 <HAL_SPI_TransmitReceive_DMA+0x1f0>
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	f000 80d9 	beq.w	800868c <HAL_SPI_TransmitReceive_DMA+0x1f4>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 80d8 	beq.w	8008690 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084e0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80084e4:	b2c0      	uxtb	r0, r0
 80084e6:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80084e8:	bf1c      	itt	ne
 80084ea:	2005      	movne	r0, #5
 80084ec:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084f0:	2000      	movs	r0, #0
 80084f2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80084f4:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80084f6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80084f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084fa:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80084fc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008500:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8008504:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008506:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008508:	6822      	ldr	r2, [r4, #0]
 800850a:	6853      	ldr	r3, [r2, #4]
 800850c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008510:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008512:	68e3      	ldr	r3, [r4, #12]
 8008514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008518:	d928      	bls.n	800856c <HAL_SPI_TransmitReceive_DMA+0xd4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	6853      	ldr	r3, [r2, #4]
 800851e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008522:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008524:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b04      	cmp	r3, #4
 800852c:	d069      	beq.n	8008602 <HAL_SPI_TransmitReceive_DMA+0x16a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800852e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008530:	4a59      	ldr	r2, [pc, #356]	; (8008698 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8008532:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008536:	4a59      	ldr	r2, [pc, #356]	; (800869c <HAL_SPI_TransmitReceive_DMA+0x204>)
 8008538:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800853a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800853c:	4a58      	ldr	r2, [pc, #352]	; (80086a0 <HAL_SPI_TransmitReceive_DMA+0x208>)
 800853e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8008540:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008542:	2200      	movs	r2, #0
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
                                 hspi->RxXferCount))
 8008546:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800854a:	6821      	ldr	r1, [r4, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008550:	310c      	adds	r1, #12
 8008552:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008554:	f7fe f85c 	bl	8006610 <HAL_DMA_Start_IT>
 8008558:	2800      	cmp	r0, #0
 800855a:	d059      	beq.n	8008610 <HAL_SPI_TransmitReceive_DMA+0x178>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800855c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800855e:	f043 0310 	orr.w	r3, r3, #16
 8008562:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8008564:	2001      	movs	r0, #1
 8008566:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 800856a:	e085      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	6853      	ldr	r3, [r2, #4]
 8008570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008574:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008576:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800857e:	d01a      	beq.n	80085b6 <HAL_SPI_TransmitReceive_DMA+0x11e>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008580:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008588:	d1cc      	bne.n	8008524 <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	6853      	ldr	r3, [r2, #4]
 800858e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008592:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008594:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008598:	f013 0f01 	tst.w	r3, #1
 800859c:	d124      	bne.n	80085e8 <HAL_SPI_TransmitReceive_DMA+0x150>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	6853      	ldr	r3, [r2, #4]
 80085a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085a6:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80085a8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80085ac:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80085b0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80085b4:	e7b6      	b.n	8008524 <HAL_SPI_TransmitReceive_DMA+0x8c>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80085b6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80085b8:	f013 0f01 	tst.w	r3, #1
 80085bc:	d109      	bne.n	80085d2 <HAL_SPI_TransmitReceive_DMA+0x13a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	6853      	ldr	r3, [r2, #4]
 80085c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085c6:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80085c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80085ca:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80085ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80085d0:	e7d6      	b.n	8008580 <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80085d2:	6822      	ldr	r2, [r4, #0]
 80085d4:	6853      	ldr	r3, [r2, #4]
 80085d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085da:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80085dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80085de:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80085e2:	3301      	adds	r3, #1
 80085e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80085e6:	e7cb      	b.n	8008580 <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80085e8:	6822      	ldr	r2, [r4, #0]
 80085ea:	6853      	ldr	r3, [r2, #4]
 80085ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085f0:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80085f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80085f6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80085fa:	3301      	adds	r3, #1
 80085fc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8008600:	e790      	b.n	8008524 <HAL_SPI_TransmitReceive_DMA+0x8c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008602:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008604:	4a27      	ldr	r2, [pc, #156]	; (80086a4 <HAL_SPI_TransmitReceive_DMA+0x20c>)
 8008606:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008608:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800860a:	4a27      	ldr	r2, [pc, #156]	; (80086a8 <HAL_SPI_TransmitReceive_DMA+0x210>)
 800860c:	62da      	str	r2, [r3, #44]	; 0x2c
 800860e:	e794      	b.n	800853a <HAL_SPI_TransmitReceive_DMA+0xa2>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008610:	6822      	ldr	r2, [r4, #0]
 8008612:	6853      	ldr	r3, [r2, #4]
 8008614:	f043 0301 	orr.w	r3, r3, #1
 8008618:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800861a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800861c:	2300      	movs	r3, #0
 800861e:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008620:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008622:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008624:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008626:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008628:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800862a:	6393      	str	r3, [r2, #56]	; 0x38
                                 hspi->TxXferCount))
 800862c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800862e:	6822      	ldr	r2, [r4, #0]
 8008630:	b29b      	uxth	r3, r3
 8008632:	320c      	adds	r2, #12
 8008634:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008638:	f7fd ffea 	bl	8006610 <HAL_DMA_Start_IT>
 800863c:	b998      	cbnz	r0, 8008666 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008646:	d103      	bne.n	8008650 <HAL_SPI_TransmitReceive_DMA+0x1b8>
    __HAL_SPI_ENABLE(hspi);
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800864e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008650:	6822      	ldr	r2, [r4, #0]
 8008652:	6853      	ldr	r3, [r2, #4]
 8008654:	f043 0320 	orr.w	r3, r3, #32
 8008658:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	6853      	ldr	r3, [r2, #4]
 800865e:	f043 0302 	orr.w	r3, r3, #2
 8008662:	6053      	str	r3, [r2, #4]
 8008664:	e008      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008666:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008668:	f043 0310 	orr.w	r3, r3, #16
 800866c:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800866e:	2001      	movs	r0, #1
 8008670:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8008674:	e000      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_BUSY;
 8008676:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8008678:	2300      	movs	r3, #0
 800867a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800867e:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 8008680:	2002      	movs	r0, #2
 8008682:	e7f9      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 8008684:	2002      	movs	r0, #2
 8008686:	e7f7      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_ERROR;
 8008688:	2001      	movs	r0, #1
 800868a:	e7f5      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 800868c:	2001      	movs	r0, #1
 800868e:	e7f3      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 8008690:	2001      	movs	r0, #1
 8008692:	e7f1      	b.n	8008678 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  __HAL_LOCK(hspi);
 8008694:	2002      	movs	r0, #2
 8008696:	e7f2      	b.n	800867e <HAL_SPI_TransmitReceive_DMA+0x1e6>
 8008698:	080086bd 	.word	0x080086bd
 800869c:	0800875b 	.word	0x0800875b
 80086a0:	080086c9 	.word	0x080086c9
 80086a4:	080086b1 	.word	0x080086b1
 80086a8:	080086eb 	.word	0x080086eb

080086ac <HAL_SPI_RxCpltCallback>:
}
 80086ac:	4770      	bx	lr

080086ae <HAL_SPI_RxHalfCpltCallback>:
}
 80086ae:	4770      	bx	lr

080086b0 <SPI_DMAHalfReceiveCplt>:
{
 80086b0:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80086b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80086b4:	f7ff fffb 	bl	80086ae <HAL_SPI_RxHalfCpltCallback>
}
 80086b8:	bd08      	pop	{r3, pc}

080086ba <HAL_SPI_TxRxHalfCpltCallback>:
}
 80086ba:	4770      	bx	lr

080086bc <SPI_DMAHalfTransmitReceiveCplt>:
{
 80086bc:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80086be:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80086c0:	f7ff fffb 	bl	80086ba <HAL_SPI_TxRxHalfCpltCallback>
}
 80086c4:	bd08      	pop	{r3, pc}

080086c6 <HAL_SPI_ErrorCallback>:
}
 80086c6:	4770      	bx	lr

080086c8 <SPI_DMAError>:
{
 80086c8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80086cc:	6802      	ldr	r2, [r0, #0]
 80086ce:	6853      	ldr	r3, [r2, #4]
 80086d0:	f023 0303 	bic.w	r3, r3, #3
 80086d4:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086d6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80086d8:	f043 0310 	orr.w	r3, r3, #16
 80086dc:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80086de:	2301      	movs	r3, #1
 80086e0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80086e4:	f7ff ffef 	bl	80086c6 <HAL_SPI_ErrorCallback>
}
 80086e8:	bd08      	pop	{r3, pc}

080086ea <SPI_DMAReceiveCplt>:
{
 80086ea:	b538      	push	{r3, r4, r5, lr}
 80086ec:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80086f0:	f7fc fe86 	bl	8005400 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f013 0f20 	tst.w	r3, #32
 80086fc:	d11f      	bne.n	800873e <SPI_DMAReceiveCplt+0x54>
 80086fe:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008700:	6821      	ldr	r1, [r4, #0]
 8008702:	684b      	ldr	r3, [r1, #4]
 8008704:	f023 0320 	bic.w	r3, r3, #32
 8008708:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800870a:	68a3      	ldr	r3, [r4, #8]
 800870c:	b91b      	cbnz	r3, 8008716 <SPI_DMAReceiveCplt+0x2c>
 800870e:	6863      	ldr	r3, [r4, #4]
 8008710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008714:	d017      	beq.n	8008746 <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008716:	6821      	ldr	r1, [r4, #0]
 8008718:	684b      	ldr	r3, [r1, #4]
 800871a:	f023 0301 	bic.w	r3, r3, #1
 800871e:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008720:	2164      	movs	r1, #100	; 0x64
 8008722:	4620      	mov	r0, r4
 8008724:	f7ff fe05 	bl	8008332 <SPI_EndRxTransaction>
 8008728:	b108      	cbz	r0, 800872e <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800872a:	2320      	movs	r3, #32
 800872c:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008734:	2301      	movs	r3, #1
 8008736:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800873a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800873c:	b94b      	cbnz	r3, 8008752 <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 800873e:	4620      	mov	r0, r4
 8008740:	f7ff ffb4 	bl	80086ac <HAL_SPI_RxCpltCallback>
}
 8008744:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008746:	6821      	ldr	r1, [r4, #0]
 8008748:	684b      	ldr	r3, [r1, #4]
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	604b      	str	r3, [r1, #4]
 8008750:	e7e6      	b.n	8008720 <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 8008752:	4620      	mov	r0, r4
 8008754:	f7ff ffb7 	bl	80086c6 <HAL_SPI_ErrorCallback>
      return;
 8008758:	e7f4      	b.n	8008744 <SPI_DMAReceiveCplt+0x5a>

0800875a <SPI_DMATransmitReceiveCplt>:
{
 800875a:	b538      	push	{r3, r4, r5, lr}
 800875c:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800875e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8008760:	f7fc fe4e 	bl	8005400 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f013 0f20 	tst.w	r3, #32
 800876c:	d11c      	bne.n	80087a8 <SPI_DMATransmitReceiveCplt+0x4e>
 800876e:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008770:	6821      	ldr	r1, [r4, #0]
 8008772:	684b      	ldr	r3, [r1, #4]
 8008774:	f023 0320 	bic.w	r3, r3, #32
 8008778:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800877a:	2164      	movs	r1, #100	; 0x64
 800877c:	4620      	mov	r0, r4
 800877e:	f7ff fda7 	bl	80082d0 <SPI_EndRxTxTransaction>
 8008782:	b118      	cbz	r0, 800878c <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008784:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008786:	f043 0320 	orr.w	r3, r3, #32
 800878a:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800878c:	6822      	ldr	r2, [r4, #0]
 800878e:	6853      	ldr	r3, [r2, #4]
 8008790:	f023 0303 	bic.w	r3, r3, #3
 8008794:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800879a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800879e:	2301      	movs	r3, #1
 80087a0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80087a6:	b91b      	cbnz	r3, 80087b0 <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 80087a8:	4620      	mov	r0, r4
 80087aa:	f7fa fcc1 	bl	8003130 <HAL_SPI_TxRxCpltCallback>
}
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80087b0:	4620      	mov	r0, r4
 80087b2:	f7ff ff88 	bl	80086c6 <HAL_SPI_ErrorCallback>
      return;
 80087b6:	e7fa      	b.n	80087ae <SPI_DMATransmitReceiveCplt+0x54>

080087b8 <HAL_SPI_IRQHandler>:
{
 80087b8:	b510      	push	{r4, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80087be:	6802      	ldr	r2, [r0, #0]
 80087c0:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80087c2:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087c4:	f003 0041 	and.w	r0, r3, #65	; 0x41
 80087c8:	2801      	cmp	r0, #1
 80087ca:	d067      	beq.n	800889c <HAL_SPI_IRQHandler+0xe4>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80087cc:	f013 0f02 	tst.w	r3, #2
 80087d0:	d002      	beq.n	80087d8 <HAL_SPI_IRQHandler+0x20>
 80087d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80087d6:	d168      	bne.n	80088aa <HAL_SPI_IRQHandler+0xf2>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80087d8:	f413 7fb0 	tst.w	r3, #352	; 0x160
 80087dc:	d068      	beq.n	80088b0 <HAL_SPI_IRQHandler+0xf8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80087de:	f011 0f20 	tst.w	r1, #32
 80087e2:	d065      	beq.n	80088b0 <HAL_SPI_IRQHandler+0xf8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80087e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80087e8:	d00f      	beq.n	800880a <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80087ea:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80087ee:	b2c0      	uxtb	r0, r0
 80087f0:	2803      	cmp	r0, #3
 80087f2:	d05f      	beq.n	80088b4 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087f4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80087f6:	f040 0004 	orr.w	r0, r0, #4
 80087fa:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087fc:	2000      	movs	r0, #0
 80087fe:	9000      	str	r0, [sp, #0]
 8008800:	68d0      	ldr	r0, [r2, #12]
 8008802:	9000      	str	r0, [sp, #0]
 8008804:	6890      	ldr	r0, [r2, #8]
 8008806:	9000      	str	r0, [sp, #0]
 8008808:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800880a:	f013 0f20 	tst.w	r3, #32
 800880e:	d00c      	beq.n	800882a <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008810:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008812:	f040 0001 	orr.w	r0, r0, #1
 8008816:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008818:	2000      	movs	r0, #0
 800881a:	9002      	str	r0, [sp, #8]
 800881c:	6890      	ldr	r0, [r2, #8]
 800881e:	9002      	str	r0, [sp, #8]
 8008820:	6810      	ldr	r0, [r2, #0]
 8008822:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8008826:	6010      	str	r0, [r2, #0]
 8008828:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800882a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800882e:	d009      	beq.n	8008844 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008830:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008832:	f043 0308 	orr.w	r3, r3, #8
 8008836:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008838:	2300      	movs	r3, #0
 800883a:	9303      	str	r3, [sp, #12]
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	9303      	str	r3, [sp, #12]
 8008842:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008844:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008846:	2b00      	cmp	r3, #0
 8008848:	d032      	beq.n	80088b0 <HAL_SPI_IRQHandler+0xf8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	6853      	ldr	r3, [r2, #4]
 800884e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008852:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8008854:	2301      	movs	r3, #1
 8008856:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800885a:	f011 0f03 	tst.w	r1, #3
 800885e:	d031      	beq.n	80088c4 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008860:	6822      	ldr	r2, [r4, #0]
 8008862:	6853      	ldr	r3, [r2, #4]
 8008864:	f023 0303 	bic.w	r3, r3, #3
 8008868:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800886a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800886c:	b14b      	cbz	r3, 8008882 <HAL_SPI_IRQHandler+0xca>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800886e:	4a17      	ldr	r2, [pc, #92]	; (80088cc <HAL_SPI_IRQHandler+0x114>)
 8008870:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008872:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008874:	f7fd ff4c 	bl	8006710 <HAL_DMA_Abort_IT>
 8008878:	b118      	cbz	r0, 8008882 <HAL_SPI_IRQHandler+0xca>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800887a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800887c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008880:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008882:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008884:	b1a3      	cbz	r3, 80088b0 <HAL_SPI_IRQHandler+0xf8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008886:	4a11      	ldr	r2, [pc, #68]	; (80088cc <HAL_SPI_IRQHandler+0x114>)
 8008888:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800888a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800888c:	f7fd ff40 	bl	8006710 <HAL_DMA_Abort_IT>
 8008890:	b170      	cbz	r0, 80088b0 <HAL_SPI_IRQHandler+0xf8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008892:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008898:	6623      	str	r3, [r4, #96]	; 0x60
 800889a:	e009      	b.n	80088b0 <HAL_SPI_IRQHandler+0xf8>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800889c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80088a0:	d094      	beq.n	80087cc <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 80088a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80088a4:	4620      	mov	r0, r4
 80088a6:	4798      	blx	r3
    return;
 80088a8:	e002      	b.n	80088b0 <HAL_SPI_IRQHandler+0xf8>
    hspi->TxISR(hspi);
 80088aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80088ac:	4620      	mov	r0, r4
 80088ae:	4798      	blx	r3
}
 80088b0:	b004      	add	sp, #16
 80088b2:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088b4:	2300      	movs	r3, #0
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	68d3      	ldr	r3, [r2, #12]
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	6893      	ldr	r3, [r2, #8]
 80088be:	9301      	str	r3, [sp, #4]
 80088c0:	9b01      	ldr	r3, [sp, #4]
        return;
 80088c2:	e7f5      	b.n	80088b0 <HAL_SPI_IRQHandler+0xf8>
        HAL_SPI_ErrorCallback(hspi);
 80088c4:	4620      	mov	r0, r4
 80088c6:	f7ff fefe 	bl	80086c6 <HAL_SPI_ErrorCallback>
 80088ca:	e7f1      	b.n	80088b0 <HAL_SPI_IRQHandler+0xf8>
 80088cc:	080088d1 	.word	0x080088d1

080088d0 <SPI_DMAAbortOnError>:
{
 80088d0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80088d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80088da:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80088dc:	f7ff fef3 	bl	80086c6 <HAL_SPI_ErrorCallback>
}
 80088e0:	bd08      	pop	{r3, pc}
	...

080088e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088e6:	6a03      	ldr	r3, [r0, #32]
 80088e8:	f023 0301 	bic.w	r3, r3, #1
 80088ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088f2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80088f8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088fc:	680c      	ldr	r4, [r1, #0]
 80088fe:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008900:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008904:	688c      	ldr	r4, [r1, #8]
 8008906:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008908:	4c21      	ldr	r4, [pc, #132]	; (8008990 <TIM_OC1_SetConfig+0xac>)
 800890a:	42a0      	cmp	r0, r4
 800890c:	d02a      	beq.n	8008964 <TIM_OC1_SetConfig+0x80>
 800890e:	4d21      	ldr	r5, [pc, #132]	; (8008994 <TIM_OC1_SetConfig+0xb0>)
 8008910:	42a8      	cmp	r0, r5
 8008912:	d019      	beq.n	8008948 <TIM_OC1_SetConfig+0x64>
 8008914:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8008918:	42a0      	cmp	r0, r4
 800891a:	d01c      	beq.n	8008956 <TIM_OC1_SetConfig+0x72>
 800891c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008920:	42a0      	cmp	r0, r4
 8008922:	d00a      	beq.n	800893a <TIM_OC1_SetConfig+0x56>
 8008924:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008928:	42a0      	cmp	r0, r4
 800892a:	d129      	bne.n	8008980 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800892c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008930:	68cc      	ldr	r4, [r1, #12]
 8008932:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008934:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008938:	e01a      	b.n	8008970 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800893a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800893e:	68cc      	ldr	r4, [r1, #12]
 8008940:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008942:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008946:	e013      	b.n	8008970 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008948:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800894c:	68cc      	ldr	r4, [r1, #12]
 800894e:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008950:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008954:	e00c      	b.n	8008970 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008956:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800895a:	68cc      	ldr	r4, [r1, #12]
 800895c:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800895e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008962:	e005      	b.n	8008970 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008964:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008968:	68cc      	ldr	r4, [r1, #12]
 800896a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800896c:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008970:	f426 7440 	bic.w	r4, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008974:	694d      	ldr	r5, [r1, #20]
 8008976:	698e      	ldr	r6, [r1, #24]
 8008978:	ea45 0c06 	orr.w	ip, r5, r6
 800897c:	ea4c 0604 	orr.w	r6, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008980:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008982:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008984:	684a      	ldr	r2, [r1, #4]
 8008986:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008988:	6203      	str	r3, [r0, #32]
}
 800898a:	bc70      	pop	{r4, r5, r6}
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	40012c00 	.word	0x40012c00
 8008994:	40013400 	.word	0x40013400

08008998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008998:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800899a:	6a03      	ldr	r3, [r0, #32]
 800899c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80089ac:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089b0:	680c      	ldr	r4, [r1, #0]
 80089b2:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089b8:	688c      	ldr	r4, [r1, #8]
 80089ba:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089be:	4c18      	ldr	r4, [pc, #96]	; (8008a20 <TIM_OC3_SetConfig+0x88>)
 80089c0:	42a0      	cmp	r0, r4
 80089c2:	d017      	beq.n	80089f4 <TIM_OC3_SetConfig+0x5c>
 80089c4:	4d17      	ldr	r5, [pc, #92]	; (8008a24 <TIM_OC3_SetConfig+0x8c>)
 80089c6:	42a8      	cmp	r0, r5
 80089c8:	d00c      	beq.n	80089e4 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ca:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80089ce:	42a0      	cmp	r0, r4
 80089d0:	d017      	beq.n	8008a02 <TIM_OC3_SetConfig+0x6a>
 80089d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80089d6:	42a0      	cmp	r0, r4
 80089d8:	d013      	beq.n	8008a02 <TIM_OC3_SetConfig+0x6a>
 80089da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80089de:	42a0      	cmp	r0, r4
 80089e0:	d117      	bne.n	8008a12 <TIM_OC3_SetConfig+0x7a>
 80089e2:	e00e      	b.n	8008a02 <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 80089e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089e8:	68cc      	ldr	r4, [r1, #12]
 80089ea:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80089ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f2:	e006      	b.n	8008a02 <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 80089f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089f8:	68cc      	ldr	r4, [r1, #12]
 80089fa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80089fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a02:	f426 5440 	bic.w	r4, r6, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a06:	694d      	ldr	r5, [r1, #20]
 8008a08:	698e      	ldr	r6, [r1, #24]
 8008a0a:	ea45 0c06 	orr.w	ip, r5, r6
 8008a0e:	ea44 160c 	orr.w	r6, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a12:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a14:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a16:	684a      	ldr	r2, [r1, #4]
 8008a18:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a1a:	6203      	str	r3, [r0, #32]
}
 8008a1c:	bc70      	pop	{r4, r5, r6}
 8008a1e:	4770      	bx	lr
 8008a20:	40012c00 	.word	0x40012c00
 8008a24:	40013400 	.word	0x40013400

08008a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a28:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a2a:	6a03      	ldr	r3, [r0, #32]
 8008a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a30:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a32:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a34:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a36:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a38:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008a3c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a40:	680c      	ldr	r4, [r1, #0]
 8008a42:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a4a:	688c      	ldr	r4, [r1, #8]
 8008a4c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a50:	4c18      	ldr	r4, [pc, #96]	; (8008ab4 <TIM_OC4_SetConfig+0x8c>)
 8008a52:	42a0      	cmp	r0, r4
 8008a54:	d017      	beq.n	8008a86 <TIM_OC4_SetConfig+0x5e>
 8008a56:	4d18      	ldr	r5, [pc, #96]	; (8008ab8 <TIM_OC4_SetConfig+0x90>)
 8008a58:	42a8      	cmp	r0, r5
 8008a5a:	d00c      	beq.n	8008a76 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5c:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8008a60:	42a0      	cmp	r0, r4
 8008a62:	d017      	beq.n	8008a94 <TIM_OC4_SetConfig+0x6c>
 8008a64:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008a68:	42a0      	cmp	r0, r4
 8008a6a:	d013      	beq.n	8008a94 <TIM_OC4_SetConfig+0x6c>
 8008a6c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008a70:	42a0      	cmp	r0, r4
 8008a72:	d117      	bne.n	8008aa4 <TIM_OC4_SetConfig+0x7c>
 8008a74:	e00e      	b.n	8008a94 <TIM_OC4_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a7a:	68cc      	ldr	r4, [r1, #12]
 8008a7c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a84:	e006      	b.n	8008a94 <TIM_OC4_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a8a:	68cc      	ldr	r4, [r1, #12]
 8008a8c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008a94:	f426 4440 	bic.w	r4, r6, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008a98:	694d      	ldr	r5, [r1, #20]
 8008a9a:	698e      	ldr	r6, [r1, #24]
 8008a9c:	ea45 0c06 	orr.w	ip, r5, r6
 8008aa0:	ea44 168c 	orr.w	r6, r4, ip, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa4:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aa6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008aa8:	684a      	ldr	r2, [r1, #4]
 8008aaa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aac:	6203      	str	r3, [r0, #32]
}
 8008aae:	bc70      	pop	{r4, r5, r6}
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	40012c00 	.word	0x40012c00
 8008ab8:	40013400 	.word	0x40013400

08008abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008abc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008abe:	6a03      	ldr	r3, [r0, #32]
 8008ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ac4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ac6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aca:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008acc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ad0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad4:	680d      	ldr	r5, [r1, #0]
 8008ad6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ad8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008adc:	688d      	ldr	r5, [r1, #8]
 8008ade:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae2:	4d0f      	ldr	r5, [pc, #60]	; (8008b20 <TIM_OC5_SetConfig+0x64>)
 8008ae4:	42a8      	cmp	r0, r5
 8008ae6:	d00f      	beq.n	8008b08 <TIM_OC5_SetConfig+0x4c>
 8008ae8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008aec:	42a8      	cmp	r0, r5
 8008aee:	d00b      	beq.n	8008b08 <TIM_OC5_SetConfig+0x4c>
 8008af0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008af4:	42a8      	cmp	r0, r5
 8008af6:	d007      	beq.n	8008b08 <TIM_OC5_SetConfig+0x4c>
 8008af8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008afc:	42a8      	cmp	r0, r5
 8008afe:	d003      	beq.n	8008b08 <TIM_OC5_SetConfig+0x4c>
 8008b00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b04:	42a8      	cmp	r0, r5
 8008b06:	d104      	bne.n	8008b12 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b08:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b0c:	694d      	ldr	r5, [r1, #20]
 8008b0e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b12:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b14:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b16:	684a      	ldr	r2, [r1, #4]
 8008b18:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1a:	6203      	str	r3, [r0, #32]
}
 8008b1c:	bc30      	pop	{r4, r5}
 8008b1e:	4770      	bx	lr
 8008b20:	40012c00 	.word	0x40012c00

08008b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b24:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b26:	6a03      	ldr	r3, [r0, #32]
 8008b28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b30:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b32:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b34:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008b38:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b3c:	680d      	ldr	r5, [r1, #0]
 8008b3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b46:	688d      	ldr	r5, [r1, #8]
 8008b48:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4c:	4d0f      	ldr	r5, [pc, #60]	; (8008b8c <TIM_OC6_SetConfig+0x68>)
 8008b4e:	42a8      	cmp	r0, r5
 8008b50:	d00f      	beq.n	8008b72 <TIM_OC6_SetConfig+0x4e>
 8008b52:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008b56:	42a8      	cmp	r0, r5
 8008b58:	d00b      	beq.n	8008b72 <TIM_OC6_SetConfig+0x4e>
 8008b5a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008b5e:	42a8      	cmp	r0, r5
 8008b60:	d007      	beq.n	8008b72 <TIM_OC6_SetConfig+0x4e>
 8008b62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b66:	42a8      	cmp	r0, r5
 8008b68:	d003      	beq.n	8008b72 <TIM_OC6_SetConfig+0x4e>
 8008b6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b6e:	42a8      	cmp	r0, r5
 8008b70:	d104      	bne.n	8008b7c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b72:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b76:	694d      	ldr	r5, [r1, #20]
 8008b78:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b7e:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b80:	684a      	ldr	r2, [r1, #4]
 8008b82:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b84:	6203      	str	r3, [r0, #32]
}
 8008b86:	bc30      	pop	{r4, r5}
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	40012c00 	.word	0x40012c00

08008b90 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8008b90:	6803      	ldr	r3, [r0, #0]
 8008b92:	6a19      	ldr	r1, [r3, #32]
 8008b94:	f241 1211 	movw	r2, #4369	; 0x1111
 8008b98:	4211      	tst	r1, r2
 8008b9a:	d108      	bne.n	8008bae <HAL_TIM_Base_Stop+0x1e>
 8008b9c:	6a19      	ldr	r1, [r3, #32]
 8008b9e:	f244 4244 	movw	r2, #17476	; 0x4444
 8008ba2:	4211      	tst	r1, r2
 8008ba4:	d103      	bne.n	8008bae <HAL_TIM_Base_Stop+0x1e>
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008bb8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d132      	bne.n	8008c28 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bc8:	6802      	ldr	r2, [r0, #0]
 8008bca:	68d3      	ldr	r3, [r2, #12]
 8008bcc:	f043 0301 	orr.w	r3, r3, #1
 8008bd0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bd2:	6803      	ldr	r3, [r0, #0]
 8008bd4:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <HAL_TIM_Base_Start_IT+0x7c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d018      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x54>
 8008bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bde:	d015      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x54>
 8008be0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d011      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x54>
 8008be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00d      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x54>
 8008bf0:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d009      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x54>
 8008bf8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d005      	beq.n	8008c0c <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	f042 0201 	orr.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008c08:	2000      	movs	r0, #0
 8008c0a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c0c:	6899      	ldr	r1, [r3, #8]
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <HAL_TIM_Base_Start_IT+0x80>)
 8008c10:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c12:	2a06      	cmp	r2, #6
 8008c14:	d00a      	beq.n	8008c2c <HAL_TIM_Base_Start_IT+0x74>
 8008c16:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008c1a:	d009      	beq.n	8008c30 <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	f042 0201 	orr.w	r2, r2, #1
 8008c22:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008c24:	2000      	movs	r0, #0
 8008c26:	4770      	bx	lr
    return HAL_ERROR;
 8008c28:	2001      	movs	r0, #1
 8008c2a:	4770      	bx	lr
  return HAL_OK;
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	4770      	bx	lr
 8008c30:	2000      	movs	r0, #0
}
 8008c32:	4770      	bx	lr
 8008c34:	40012c00 	.word	0x40012c00
 8008c38:	00010007 	.word	0x00010007

08008c3c <HAL_TIM_PWM_MspInit>:
}
 8008c3c:	4770      	bx	lr

08008c3e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIM_IC_CaptureCallback>:
}
 8008c40:	4770      	bx	lr

08008c42 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008c42:	4770      	bx	lr

08008c44 <HAL_TIM_TriggerCallback>:
}
 8008c44:	4770      	bx	lr

08008c46 <HAL_TIM_IRQHandler>:
{
 8008c46:	b510      	push	{r4, lr}
 8008c48:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c4a:	6803      	ldr	r3, [r0, #0]
 8008c4c:	691a      	ldr	r2, [r3, #16]
 8008c4e:	f012 0f02 	tst.w	r2, #2
 8008c52:	d012      	beq.n	8008c7a <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	f012 0f02 	tst.w	r2, #2
 8008c5a:	d00e      	beq.n	8008c7a <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c5c:	f06f 0202 	mvn.w	r2, #2
 8008c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c62:	2301      	movs	r3, #1
 8008c64:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c66:	6803      	ldr	r3, [r0, #0]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	f013 0f03 	tst.w	r3, #3
 8008c6e:	f000 809f 	beq.w	8008db0 <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8008c72:	f7ff ffe5 	bl	8008c40 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c76:	2300      	movs	r3, #0
 8008c78:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	691a      	ldr	r2, [r3, #16]
 8008c7e:	f012 0f04 	tst.w	r2, #4
 8008c82:	d013      	beq.n	8008cac <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	f012 0f04 	tst.w	r2, #4
 8008c8a:	d00f      	beq.n	8008cac <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c8c:	f06f 0204 	mvn.w	r2, #4
 8008c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c92:	2302      	movs	r3, #2
 8008c94:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008c9e:	f000 808d 	beq.w	8008dbc <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f7ff ffcc 	bl	8008c40 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	691a      	ldr	r2, [r3, #16]
 8008cb0:	f012 0f08 	tst.w	r2, #8
 8008cb4:	d012      	beq.n	8008cdc <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	f012 0f08 	tst.w	r2, #8
 8008cbc:	d00e      	beq.n	8008cdc <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cbe:	f06f 0208 	mvn.w	r2, #8
 8008cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cc4:	2304      	movs	r3, #4
 8008cc6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	f013 0f03 	tst.w	r3, #3
 8008cd0:	d07b      	beq.n	8008dca <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f7ff ffb4 	bl	8008c40 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	691a      	ldr	r2, [r3, #16]
 8008ce0:	f012 0f10 	tst.w	r2, #16
 8008ce4:	d012      	beq.n	8008d0c <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	f012 0f10 	tst.w	r2, #16
 8008cec:	d00e      	beq.n	8008d0c <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cee:	f06f 0210 	mvn.w	r2, #16
 8008cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008d00:	d06a      	beq.n	8008dd8 <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7ff ff9c 	bl	8008c40 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	691a      	ldr	r2, [r3, #16]
 8008d10:	f012 0f01 	tst.w	r2, #1
 8008d14:	d003      	beq.n	8008d1e <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d16:	68da      	ldr	r2, [r3, #12]
 8008d18:	f012 0f01 	tst.w	r2, #1
 8008d1c:	d163      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008d26:	d003      	beq.n	8008d30 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008d2e:	d161      	bne.n	8008df4 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	691a      	ldr	r2, [r3, #16]
 8008d34:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008d38:	d003      	beq.n	8008d42 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d3a:	68da      	ldr	r2, [r3, #12]
 8008d3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008d40:	d15f      	bne.n	8008e02 <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	691a      	ldr	r2, [r3, #16]
 8008d46:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008d4a:	d003      	beq.n	8008d54 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008d52:	d15d      	bne.n	8008e10 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	691a      	ldr	r2, [r3, #16]
 8008d58:	f012 0f20 	tst.w	r2, #32
 8008d5c:	d003      	beq.n	8008d66 <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d5e:	68da      	ldr	r2, [r3, #12]
 8008d60:	f012 0f20 	tst.w	r2, #32
 8008d64:	d15b      	bne.n	8008e1e <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	691a      	ldr	r2, [r3, #16]
 8008d6a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8008d6e:	d003      	beq.n	8008d78 <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8008d76:	d159      	bne.n	8008e2c <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	691a      	ldr	r2, [r3, #16]
 8008d7c:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008d80:	d003      	beq.n	8008d8a <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008d88:	d157      	bne.n	8008e3a <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008d92:	d003      	beq.n	8008d9c <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008d9a:	d155      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	691a      	ldr	r2, [r3, #16]
 8008da0:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8008da4:	d003      	beq.n	8008dae <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008da6:	68da      	ldr	r2, [r3, #12]
 8008da8:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8008dac:	d153      	bne.n	8008e56 <HAL_TIM_IRQHandler+0x210>
}
 8008dae:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db0:	f7ff ff45 	bl	8008c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db4:	4620      	mov	r0, r4
 8008db6:	f7ff ff44 	bl	8008c42 <HAL_TIM_PWM_PulseFinishedCallback>
 8008dba:	e75c      	b.n	8008c76 <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f7ff ff3e 	bl	8008c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f7ff ff3d 	bl	8008c42 <HAL_TIM_PWM_PulseFinishedCallback>
 8008dc8:	e76e      	b.n	8008ca8 <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f7ff ff37 	bl	8008c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f7ff ff36 	bl	8008c42 <HAL_TIM_PWM_PulseFinishedCallback>
 8008dd6:	e77f      	b.n	8008cd8 <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f7ff ff30 	bl	8008c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7ff ff2f 	bl	8008c42 <HAL_TIM_PWM_PulseFinishedCallback>
 8008de4:	e790      	b.n	8008d08 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008de6:	f06f 0201 	mvn.w	r2, #1
 8008dea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dec:	4620      	mov	r0, r4
 8008dee:	f7fa faaf 	bl	8003350 <HAL_TIM_PeriodElapsedCallback>
 8008df2:	e794      	b.n	8008d1e <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008df8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f000 fd99 	bl	8009932 <HAL_TIMEx_BreakCallback>
 8008e00:	e796      	b.n	8008d30 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 fd93 	bl	8009934 <HAL_TIMEx_Break2Callback>
 8008e0e:	e798      	b.n	8008d42 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e14:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7ff ff14 	bl	8008c44 <HAL_TIM_TriggerCallback>
 8008e1c:	e79a      	b.n	8008d54 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e1e:	f06f 0220 	mvn.w	r2, #32
 8008e22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fd83 	bl	8009930 <HAL_TIMEx_CommutCallback>
 8008e2a:	e79c      	b.n	8008d66 <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008e2c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008e30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fd7f 	bl	8009936 <HAL_TIMEx_EncoderIndexCallback>
 8008e38:	e79e      	b.n	8008d78 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008e3a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008e3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 fd79 	bl	8009938 <HAL_TIMEx_DirectionChangeCallback>
 8008e46:	e7a0      	b.n	8008d8a <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008e48:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008e4c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 fd73 	bl	800993a <HAL_TIMEx_IndexErrorCallback>
 8008e54:	e7a2      	b.n	8008d9c <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008e56:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008e5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 fd6d 	bl	800993c <HAL_TIMEx_TransitionErrorCallback>
}
 8008e62:	e7a4      	b.n	8008dae <HAL_TIM_IRQHandler+0x168>

08008e64 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8008e64:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e66:	4a4b      	ldr	r2, [pc, #300]	; (8008f94 <TIM_Base_SetConfig+0x130>)
 8008e68:	4290      	cmp	r0, r2
 8008e6a:	d04f      	beq.n	8008f0c <TIM_Base_SetConfig+0xa8>
 8008e6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008e70:	d074      	beq.n	8008f5c <TIM_Base_SetConfig+0xf8>
 8008e72:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008e76:	4290      	cmp	r0, r2
 8008e78:	f000 8087 	beq.w	8008f8a <TIM_Base_SetConfig+0x126>
 8008e7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e80:	4290      	cmp	r0, r2
 8008e82:	d07d      	beq.n	8008f80 <TIM_Base_SetConfig+0x11c>
 8008e84:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008e88:	4290      	cmp	r0, r2
 8008e8a:	d055      	beq.n	8008f38 <TIM_Base_SetConfig+0xd4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e8c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008e90:	4290      	cmp	r0, r2
 8008e92:	d011      	beq.n	8008eb8 <TIM_Base_SetConfig+0x54>
 8008e94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e98:	4290      	cmp	r0, r2
 8008e9a:	d01b      	beq.n	8008ed4 <TIM_Base_SetConfig+0x70>
 8008e9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ea0:	4290      	cmp	r0, r2
 8008ea2:	d025      	beq.n	8008ef0 <TIM_Base_SetConfig+0x8c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ea8:	694a      	ldr	r2, [r1, #20]
 8008eaa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008eac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eae:	688b      	ldr	r3, [r1, #8]
 8008eb0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008eb2:	680b      	ldr	r3, [r1, #0]
 8008eb4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eb6:	e03c      	b.n	8008f32 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ebc:	68ca      	ldr	r2, [r1, #12]
 8008ebe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec4:	694a      	ldr	r2, [r1, #20]
 8008ec6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008ec8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eca:	688b      	ldr	r3, [r1, #8]
 8008ecc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008ece:	680b      	ldr	r3, [r1, #0]
 8008ed0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ed2:	e02c      	b.n	8008f2e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ed8:	68ca      	ldr	r2, [r1, #12]
 8008eda:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee0:	694a      	ldr	r2, [r1, #20]
 8008ee2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008ee4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ee6:	688b      	ldr	r3, [r1, #8]
 8008ee8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008eea:	680b      	ldr	r3, [r1, #0]
 8008eec:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eee:	e01e      	b.n	8008f2e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ef4:	68ca      	ldr	r2, [r1, #12]
 8008ef6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008efc:	694a      	ldr	r2, [r1, #20]
 8008efe:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008f00:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f02:	688b      	ldr	r3, [r1, #8]
 8008f04:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008f06:	680b      	ldr	r3, [r1, #0]
 8008f08:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f0a:	e010      	b.n	8008f2e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008f10:	684a      	ldr	r2, [r1, #4]
 8008f12:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f18:	68ca      	ldr	r2, [r1, #12]
 8008f1a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f20:	694a      	ldr	r2, [r1, #20]
 8008f22:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008f24:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f26:	688b      	ldr	r3, [r1, #8]
 8008f28:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008f2a:	680b      	ldr	r3, [r1, #0]
 8008f2c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008f2e:	690b      	ldr	r3, [r1, #16]
 8008f30:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008f32:	2301      	movs	r3, #1
 8008f34:	6143      	str	r3, [r0, #20]
}
 8008f36:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008f3c:	684a      	ldr	r2, [r1, #4]
 8008f3e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f44:	68ca      	ldr	r2, [r1, #12]
 8008f46:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f4c:	694a      	ldr	r2, [r1, #20]
 8008f4e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008f50:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f52:	688b      	ldr	r3, [r1, #8]
 8008f54:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008f56:	680b      	ldr	r3, [r1, #0]
 8008f58:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f5a:	e7e8      	b.n	8008f2e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008f60:	684a      	ldr	r2, [r1, #4]
 8008f62:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f68:	68ca      	ldr	r2, [r1, #12]
 8008f6a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f70:	694a      	ldr	r2, [r1, #20]
 8008f72:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008f74:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f76:	688b      	ldr	r3, [r1, #8]
 8008f78:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008f7a:	680b      	ldr	r3, [r1, #0]
 8008f7c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f7e:	e7d8      	b.n	8008f32 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008f84:	684a      	ldr	r2, [r1, #4]
 8008f86:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f88:	e7ec      	b.n	8008f64 <TIM_Base_SetConfig+0x100>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008f8e:	684a      	ldr	r2, [r1, #4]
 8008f90:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f92:	e7e7      	b.n	8008f64 <TIM_Base_SetConfig+0x100>
 8008f94:	40012c00 	.word	0x40012c00

08008f98 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008f98:	b360      	cbz	r0, 8008ff4 <HAL_TIM_Base_Init+0x5c>
{
 8008f9a:	b510      	push	{r4, lr}
 8008f9c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008f9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008fa2:	b313      	cbz	r3, 8008fea <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008faa:	4621      	mov	r1, r4
 8008fac:	f851 0b04 	ldr.w	r0, [r1], #4
 8008fb0:	f7ff ff58 	bl	8008e64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008fbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008fc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008fc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fda:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008fde:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008fe2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008fe6:	2000      	movs	r0, #0
}
 8008fe8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008fea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008fee:	f7fb ffeb 	bl	8004fc8 <HAL_TIM_Base_MspInit>
 8008ff2:	e7d7      	b.n	8008fa4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008ff4:	2001      	movs	r0, #1
}
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008ff8:	b360      	cbz	r0, 8009054 <HAL_TIM_PWM_Init+0x5c>
{
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008ffe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009002:	b313      	cbz	r3, 800904a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009004:	2302      	movs	r3, #2
 8009006:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800900a:	4621      	mov	r1, r4
 800900c:	f851 0b04 	ldr.w	r0, [r1], #4
 8009010:	f7ff ff28 	bl	8008e64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009014:	2301      	movs	r3, #1
 8009016:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800901a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800901e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009022:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009026:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800902a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800902e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009032:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800903a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800903e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009046:	2000      	movs	r0, #0
}
 8009048:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800904a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800904e:	f7ff fdf5 	bl	8008c3c <HAL_TIM_PWM_MspInit>
 8009052:	e7d7      	b.n	8009004 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8009054:	2001      	movs	r0, #1
}
 8009056:	4770      	bx	lr

08009058 <TIM_OC2_SetConfig>:
{
 8009058:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800905a:	6a03      	ldr	r3, [r0, #32]
 800905c:	f023 0310 	bic.w	r3, r3, #16
 8009060:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009062:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009064:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009066:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009068:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800906c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009070:	680c      	ldr	r4, [r1, #0]
 8009072:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8009076:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800907a:	688c      	ldr	r4, [r1, #8]
 800907c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009080:	4c18      	ldr	r4, [pc, #96]	; (80090e4 <TIM_OC2_SetConfig+0x8c>)
 8009082:	42a0      	cmp	r0, r4
 8009084:	d017      	beq.n	80090b6 <TIM_OC2_SetConfig+0x5e>
 8009086:	4d18      	ldr	r5, [pc, #96]	; (80090e8 <TIM_OC2_SetConfig+0x90>)
 8009088:	42a8      	cmp	r0, r5
 800908a:	d00c      	beq.n	80090a6 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800908c:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8009090:	42a0      	cmp	r0, r4
 8009092:	d017      	beq.n	80090c4 <TIM_OC2_SetConfig+0x6c>
 8009094:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009098:	42a0      	cmp	r0, r4
 800909a:	d013      	beq.n	80090c4 <TIM_OC2_SetConfig+0x6c>
 800909c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80090a0:	42a0      	cmp	r0, r4
 80090a2:	d117      	bne.n	80090d4 <TIM_OC2_SetConfig+0x7c>
 80090a4:	e00e      	b.n	80090c4 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80090a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090aa:	68cc      	ldr	r4, [r1, #12]
 80090ac:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80090b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090b4:	e006      	b.n	80090c4 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80090b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090ba:	68cc      	ldr	r4, [r1, #12]
 80090bc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80090c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090c4:	f426 6440 	bic.w	r4, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090c8:	694d      	ldr	r5, [r1, #20]
 80090ca:	698e      	ldr	r6, [r1, #24]
 80090cc:	ea45 0c06 	orr.w	ip, r5, r6
 80090d0:	ea44 068c 	orr.w	r6, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 80090d4:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80090d6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80090d8:	684a      	ldr	r2, [r1, #4]
 80090da:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80090dc:	6203      	str	r3, [r0, #32]
}
 80090de:	bc70      	pop	{r4, r5, r6}
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40012c00 	.word	0x40012c00
 80090e8:	40013400 	.word	0x40013400

080090ec <HAL_TIM_PWM_ConfigChannel>:
{
 80090ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80090ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	f000 8095 	beq.w	8009222 <HAL_TIM_PWM_ConfigChannel+0x136>
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	2301      	movs	r3, #1
 80090fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8009102:	2a14      	cmp	r2, #20
 8009104:	f200 8088 	bhi.w	8009218 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8009108:	e8df f002 	tbb	[pc, r2]
 800910c:	8686860b 	.word	0x8686860b
 8009110:	8686861f 	.word	0x8686861f
 8009114:	86868634 	.word	0x86868634
 8009118:	86868648 	.word	0x86868648
 800911c:	8686865d 	.word	0x8686865d
 8009120:	71          	.byte	0x71
 8009121:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009122:	6800      	ldr	r0, [r0, #0]
 8009124:	f7ff fbde 	bl	80088e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009128:	6822      	ldr	r2, [r4, #0]
 800912a:	6993      	ldr	r3, [r2, #24]
 800912c:	f043 0308 	orr.w	r3, r3, #8
 8009130:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009132:	6822      	ldr	r2, [r4, #0]
 8009134:	6993      	ldr	r3, [r2, #24]
 8009136:	f023 0304 	bic.w	r3, r3, #4
 800913a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800913c:	6822      	ldr	r2, [r4, #0]
 800913e:	6993      	ldr	r3, [r2, #24]
 8009140:	6929      	ldr	r1, [r5, #16]
 8009142:	430b      	orrs	r3, r1
 8009144:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009146:	2000      	movs	r0, #0
      break;
 8009148:	e067      	b.n	800921a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800914a:	6800      	ldr	r0, [r0, #0]
 800914c:	f7ff ff84 	bl	8009058 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009150:	6822      	ldr	r2, [r4, #0]
 8009152:	6993      	ldr	r3, [r2, #24]
 8009154:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009158:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800915a:	6822      	ldr	r2, [r4, #0]
 800915c:	6993      	ldr	r3, [r2, #24]
 800915e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009162:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009164:	6822      	ldr	r2, [r4, #0]
 8009166:	6993      	ldr	r3, [r2, #24]
 8009168:	6929      	ldr	r1, [r5, #16]
 800916a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800916e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009170:	2000      	movs	r0, #0
      break;
 8009172:	e052      	b.n	800921a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009174:	6800      	ldr	r0, [r0, #0]
 8009176:	f7ff fc0f 	bl	8008998 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	69d3      	ldr	r3, [r2, #28]
 800917e:	f043 0308 	orr.w	r3, r3, #8
 8009182:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	69d3      	ldr	r3, [r2, #28]
 8009188:	f023 0304 	bic.w	r3, r3, #4
 800918c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800918e:	6822      	ldr	r2, [r4, #0]
 8009190:	69d3      	ldr	r3, [r2, #28]
 8009192:	6929      	ldr	r1, [r5, #16]
 8009194:	430b      	orrs	r3, r1
 8009196:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009198:	2000      	movs	r0, #0
      break;
 800919a:	e03e      	b.n	800921a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800919c:	6800      	ldr	r0, [r0, #0]
 800919e:	f7ff fc43 	bl	8008a28 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091a2:	6822      	ldr	r2, [r4, #0]
 80091a4:	69d3      	ldr	r3, [r2, #28]
 80091a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80091aa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091ac:	6822      	ldr	r2, [r4, #0]
 80091ae:	69d3      	ldr	r3, [r2, #28]
 80091b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091b4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	69d3      	ldr	r3, [r2, #28]
 80091ba:	6929      	ldr	r1, [r5, #16]
 80091bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80091c0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80091c2:	2000      	movs	r0, #0
      break;
 80091c4:	e029      	b.n	800921a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091c6:	6800      	ldr	r0, [r0, #0]
 80091c8:	f7ff fc78 	bl	8008abc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091cc:	6822      	ldr	r2, [r4, #0]
 80091ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80091d0:	f043 0308 	orr.w	r3, r3, #8
 80091d4:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80091da:	f023 0304 	bic.w	r3, r3, #4
 80091de:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091e0:	6822      	ldr	r2, [r4, #0]
 80091e2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80091e4:	6929      	ldr	r1, [r5, #16]
 80091e6:	430b      	orrs	r3, r1
 80091e8:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80091ea:	2000      	movs	r0, #0
      break;
 80091ec:	e015      	b.n	800921a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091ee:	6800      	ldr	r0, [r0, #0]
 80091f0:	f7ff fc98 	bl	8008b24 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091f4:	6822      	ldr	r2, [r4, #0]
 80091f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80091f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80091fc:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091fe:	6822      	ldr	r2, [r4, #0]
 8009200:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009206:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800920c:	6929      	ldr	r1, [r5, #16]
 800920e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009212:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009214:	2000      	movs	r0, #0
      break;
 8009216:	e000      	b.n	800921a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8009218:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800921a:	2300      	movs	r3, #0
 800921c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009220:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8009222:	2002      	movs	r0, #2
 8009224:	e7fc      	b.n	8009220 <HAL_TIM_PWM_ConfigChannel+0x134>

08009226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009226:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009228:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800922a:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800922e:	430a      	orrs	r2, r1
 8009230:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009234:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009238:	6082      	str	r2, [r0, #8]
}
 800923a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_TIM_ConfigClockSource>:
{
 8009240:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009242:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009246:	2b01      	cmp	r3, #1
 8009248:	f000 80cc 	beq.w	80093e4 <HAL_TIM_ConfigClockSource+0x1a4>
 800924c:	4604      	mov	r4, r0
 800924e:	2301      	movs	r3, #1
 8009250:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009254:	2302      	movs	r3, #2
 8009256:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800925a:	6802      	ldr	r2, [r0, #0]
 800925c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800925e:	4b62      	ldr	r3, [pc, #392]	; (80093e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8009260:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8009262:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8009264:	6808      	ldr	r0, [r1, #0]
 8009266:	2870      	cmp	r0, #112	; 0x70
 8009268:	f000 8083 	beq.w	8009372 <HAL_TIM_ConfigClockSource+0x132>
 800926c:	d851      	bhi.n	8009312 <HAL_TIM_ConfigClockSource+0xd2>
 800926e:	2850      	cmp	r0, #80	; 0x50
 8009270:	f000 8099 	beq.w	80093a6 <HAL_TIM_ConfigClockSource+0x166>
 8009274:	d91f      	bls.n	80092b6 <HAL_TIM_ConfigClockSource+0x76>
 8009276:	2860      	cmp	r0, #96	; 0x60
 8009278:	d149      	bne.n	800930e <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	6848      	ldr	r0, [r1, #4]
 800927e:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009280:	6a1a      	ldr	r2, [r3, #32]
 8009282:	f022 0210 	bic.w	r2, r2, #16
 8009286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009288:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800928a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800928c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009290:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009294:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009298:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800929c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800929e:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092a0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80092a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80092a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80092a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092ac:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80092b0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80092b2:	2000      	movs	r0, #0
}
 80092b4:	e042      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 80092b6:	2840      	cmp	r0, #64	; 0x40
 80092b8:	d11c      	bne.n	80092f4 <HAL_TIM_ConfigClockSource+0xb4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	6848      	ldr	r0, [r1, #4]
 80092be:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80092c0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092c2:	6a1a      	ldr	r2, [r3, #32]
 80092c4:	f022 0201 	bic.w	r2, r2, #1
 80092c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092ca:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092d0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092d4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80092d8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80092da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092dc:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092de:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80092e0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80092e2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80092e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092ea:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80092ee:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80092f0:	2000      	movs	r0, #0
}
 80092f2:	e023      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 80092f4:	d874      	bhi.n	80093e0 <HAL_TIM_ConfigClockSource+0x1a0>
 80092f6:	2820      	cmp	r0, #32
 80092f8:	d02f      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x11a>
 80092fa:	d903      	bls.n	8009304 <HAL_TIM_ConfigClockSource+0xc4>
 80092fc:	2830      	cmp	r0, #48	; 0x30
 80092fe:	d02c      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x11a>
 8009300:	2001      	movs	r0, #1
 8009302:	e01b      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
 8009304:	f030 0310 	bics.w	r3, r0, #16
 8009308:	d027      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x11a>
 800930a:	2001      	movs	r0, #1
 800930c:	e016      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
 800930e:	2001      	movs	r0, #1
 8009310:	e014      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
 8009312:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8009316:	d039      	beq.n	800938c <HAL_TIM_ConfigClockSource+0x14c>
 8009318:	d90c      	bls.n	8009334 <HAL_TIM_ConfigClockSource+0xf4>
 800931a:	4a34      	ldr	r2, [pc, #208]	; (80093ec <HAL_TIM_ConfigClockSource+0x1ac>)
 800931c:	4290      	cmp	r0, r2
 800931e:	d01c      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x11a>
 8009320:	d913      	bls.n	800934a <HAL_TIM_ConfigClockSource+0x10a>
 8009322:	4a33      	ldr	r2, [pc, #204]	; (80093f0 <HAL_TIM_ConfigClockSource+0x1b0>)
 8009324:	4290      	cmp	r0, r2
 8009326:	d018      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x11a>
 8009328:	3230      	adds	r2, #48	; 0x30
 800932a:	4290      	cmp	r0, r2
 800932c:	bf18      	it	ne
 800932e:	2001      	movne	r0, #1
 8009330:	d013      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x11a>
 8009332:	e003      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
  HAL_StatusTypeDef status = HAL_OK;
 8009334:	f5b0 5080 	subs.w	r0, r0, #4096	; 0x1000
 8009338:	bf18      	it	ne
 800933a:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800933c:	2301      	movs	r3, #1
 800933e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009342:	2300      	movs	r3, #0
 8009344:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009348:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800934a:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 800934e:	d004      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x11a>
 8009350:	3a10      	subs	r2, #16
 8009352:	4290      	cmp	r0, r2
 8009354:	bf18      	it	ne
 8009356:	2001      	movne	r0, #1
 8009358:	d1f0      	bne.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800935a:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800935c:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800935e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009362:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009366:	4302      	orrs	r2, r0
 8009368:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800936c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800936e:	2000      	movs	r0, #0
}
 8009370:	e7e4      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 8009372:	68cb      	ldr	r3, [r1, #12]
 8009374:	684a      	ldr	r2, [r1, #4]
 8009376:	6889      	ldr	r1, [r1, #8]
 8009378:	6820      	ldr	r0, [r4, #0]
 800937a:	f7ff ff54 	bl	8009226 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800937e:	6822      	ldr	r2, [r4, #0]
 8009380:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009382:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009386:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009388:	2000      	movs	r0, #0
      break;
 800938a:	e7d7      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 800938c:	68cb      	ldr	r3, [r1, #12]
 800938e:	684a      	ldr	r2, [r1, #4]
 8009390:	6889      	ldr	r1, [r1, #8]
 8009392:	6820      	ldr	r0, [r4, #0]
 8009394:	f7ff ff47 	bl	8009226 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009398:	6822      	ldr	r2, [r4, #0]
 800939a:	6893      	ldr	r3, [r2, #8]
 800939c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093a0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80093a2:	2000      	movs	r0, #0
      break;
 80093a4:	e7ca      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	6848      	ldr	r0, [r1, #4]
 80093aa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80093ac:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ae:	6a1a      	ldr	r2, [r3, #32]
 80093b0:	f022 0201 	bic.w	r2, r2, #1
 80093b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093b6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093bc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093c0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80093c4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80093c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093c8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093ca:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80093cc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80093ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80093d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093d6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80093da:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80093dc:	2000      	movs	r0, #0
}
 80093de:	e7ad      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 80093e0:	2001      	movs	r0, #1
 80093e2:	e7ab      	b.n	800933c <HAL_TIM_ConfigClockSource+0xfc>
  __HAL_LOCK(htim);
 80093e4:	2002      	movs	r0, #2
 80093e6:	e7af      	b.n	8009348 <HAL_TIM_ConfigClockSource+0x108>
 80093e8:	ffce0088 	.word	0xffce0088
 80093ec:	00100030 	.word	0x00100030
 80093f0:	00100040 	.word	0x00100040

080093f4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093f4:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093f8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093fa:	f04f 0c01 	mov.w	ip, #1
 80093fe:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8009402:	ea23 030c 	bic.w	r3, r3, ip
 8009406:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009408:	6a03      	ldr	r3, [r0, #32]
 800940a:	408a      	lsls	r2, r1
 800940c:	431a      	orrs	r2, r3
 800940e:	6202      	str	r2, [r0, #32]
}
 8009410:	4770      	bx	lr
	...

08009414 <HAL_TIM_PWM_Start>:
{
 8009414:	b510      	push	{r4, lr}
 8009416:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009418:	2910      	cmp	r1, #16
 800941a:	d86b      	bhi.n	80094f4 <HAL_TIM_PWM_Start+0xe0>
 800941c:	e8df f001 	tbb	[pc, r1]
 8009420:	6a6a6a09 	.word	0x6a6a6a09
 8009424:	6a6a6a4a 	.word	0x6a6a6a4a
 8009428:	6a6a6a53 	.word	0x6a6a6a53
 800942c:	6a6a6a5a 	.word	0x6a6a6a5a
 8009430:	63          	.byte	0x63
 8009431:	00          	.byte	0x00
 8009432:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b01      	cmp	r3, #1
 800943a:	f040 80a5 	bne.w	8009588 <HAL_TIM_PWM_Start+0x174>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800943e:	2302      	movs	r3, #2
 8009440:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009444:	2201      	movs	r2, #1
 8009446:	6820      	ldr	r0, [r4, #0]
 8009448:	f7ff ffd4 	bl	80093f4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	4a53      	ldr	r2, [pc, #332]	; (800959c <HAL_TIM_PWM_Start+0x188>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00f      	beq.n	8009474 <HAL_TIM_PWM_Start+0x60>
 8009454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009458:	4293      	cmp	r3, r2
 800945a:	d00b      	beq.n	8009474 <HAL_TIM_PWM_Start+0x60>
 800945c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009460:	4293      	cmp	r3, r2
 8009462:	d007      	beq.n	8009474 <HAL_TIM_PWM_Start+0x60>
 8009464:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <HAL_TIM_PWM_Start+0x60>
 800946c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009470:	4293      	cmp	r3, r2
 8009472:	d107      	bne.n	8009484 <HAL_TIM_PWM_Start+0x70>
    __HAL_TIM_MOE_ENABLE(htim);
 8009474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800947a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	4a47      	ldr	r2, [pc, #284]	; (800959c <HAL_TIM_PWM_Start+0x188>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d073      	beq.n	800956c <HAL_TIM_PWM_Start+0x158>
 8009484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009488:	d070      	beq.n	800956c <HAL_TIM_PWM_Start+0x158>
 800948a:	4a45      	ldr	r2, [pc, #276]	; (80095a0 <HAL_TIM_PWM_Start+0x18c>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d06d      	beq.n	800956c <HAL_TIM_PWM_Start+0x158>
 8009490:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009494:	4293      	cmp	r3, r2
 8009496:	d069      	beq.n	800956c <HAL_TIM_PWM_Start+0x158>
 8009498:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800949c:	4293      	cmp	r3, r2
 800949e:	d065      	beq.n	800956c <HAL_TIM_PWM_Start+0x158>
 80094a0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d061      	beq.n	800956c <HAL_TIM_PWM_Start+0x158>
    __HAL_TIM_ENABLE(htim);
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	f042 0201 	orr.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80094b0:	2000      	movs	r0, #0
 80094b2:	e068      	b.n	8009586 <HAL_TIM_PWM_Start+0x172>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094b4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d166      	bne.n	800958c <HAL_TIM_PWM_Start+0x178>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094be:	2302      	movs	r3, #2
 80094c0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80094c4:	e7be      	b.n	8009444 <HAL_TIM_PWM_Start+0x30>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d03d      	beq.n	800954c <HAL_TIM_PWM_Start+0x138>
    return HAL_ERROR;
 80094d0:	2001      	movs	r0, #1
 80094d2:	e058      	b.n	8009586 <HAL_TIM_PWM_Start+0x172>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	bf18      	it	ne
 80094de:	2301      	movne	r3, #1
 80094e0:	b16b      	cbz	r3, 80094fe <HAL_TIM_PWM_Start+0xea>
    return HAL_ERROR;
 80094e2:	2001      	movs	r0, #1
 80094e4:	e04f      	b.n	8009586 <HAL_TIM_PWM_Start+0x172>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094e6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	3b01      	subs	r3, #1
 80094ee:	bf18      	it	ne
 80094f0:	2301      	movne	r3, #1
 80094f2:	e7f5      	b.n	80094e0 <HAL_TIM_PWM_Start+0xcc>
 80094f4:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d148      	bne.n	8009590 <HAL_TIM_PWM_Start+0x17c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094fe:	2910      	cmp	r1, #16
 8009500:	d830      	bhi.n	8009564 <HAL_TIM_PWM_Start+0x150>
 8009502:	a301      	add	r3, pc, #4	; (adr r3, 8009508 <HAL_TIM_PWM_Start+0xf4>)
 8009504:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8009508:	0800943f 	.word	0x0800943f
 800950c:	08009565 	.word	0x08009565
 8009510:	08009565 	.word	0x08009565
 8009514:	08009565 	.word	0x08009565
 8009518:	080094bf 	.word	0x080094bf
 800951c:	08009565 	.word	0x08009565
 8009520:	08009565 	.word	0x08009565
 8009524:	08009565 	.word	0x08009565
 8009528:	0800954d 	.word	0x0800954d
 800952c:	08009565 	.word	0x08009565
 8009530:	08009565 	.word	0x08009565
 8009534:	08009565 	.word	0x08009565
 8009538:	08009555 	.word	0x08009555
 800953c:	08009565 	.word	0x08009565
 8009540:	08009565 	.word	0x08009565
 8009544:	08009565 	.word	0x08009565
 8009548:	0800955d 	.word	0x0800955d
 800954c:	2302      	movs	r3, #2
 800954e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009552:	e777      	b.n	8009444 <HAL_TIM_PWM_Start+0x30>
 8009554:	2302      	movs	r3, #2
 8009556:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800955a:	e773      	b.n	8009444 <HAL_TIM_PWM_Start+0x30>
 800955c:	2302      	movs	r3, #2
 800955e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009562:	e76f      	b.n	8009444 <HAL_TIM_PWM_Start+0x30>
 8009564:	2302      	movs	r3, #2
 8009566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800956a:	e76b      	b.n	8009444 <HAL_TIM_PWM_Start+0x30>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800956c:	6899      	ldr	r1, [r3, #8]
 800956e:	4a0d      	ldr	r2, [pc, #52]	; (80095a4 <HAL_TIM_PWM_Start+0x190>)
 8009570:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009572:	2a06      	cmp	r2, #6
 8009574:	d00e      	beq.n	8009594 <HAL_TIM_PWM_Start+0x180>
 8009576:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800957a:	d00d      	beq.n	8009598 <HAL_TIM_PWM_Start+0x184>
      __HAL_TIM_ENABLE(htim);
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	f042 0201 	orr.w	r2, r2, #1
 8009582:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009584:	2000      	movs	r0, #0
}
 8009586:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009588:	2001      	movs	r0, #1
 800958a:	e7fc      	b.n	8009586 <HAL_TIM_PWM_Start+0x172>
 800958c:	2001      	movs	r0, #1
 800958e:	e7fa      	b.n	8009586 <HAL_TIM_PWM_Start+0x172>
 8009590:	2001      	movs	r0, #1
 8009592:	e7f8      	b.n	8009586 <HAL_TIM_PWM_Start+0x172>
  return HAL_OK;
 8009594:	2000      	movs	r0, #0
 8009596:	e7f6      	b.n	8009586 <HAL_TIM_PWM_Start+0x172>
 8009598:	2000      	movs	r0, #0
 800959a:	e7f4      	b.n	8009586 <HAL_TIM_PWM_Start+0x172>
 800959c:	40012c00 	.word	0x40012c00
 80095a0:	40000400 	.word	0x40000400
 80095a4:	00010007 	.word	0x00010007

080095a8 <HAL_TIM_PWM_Stop>:
{
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4604      	mov	r4, r0
 80095ac:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80095ae:	2200      	movs	r2, #0
 80095b0:	6800      	ldr	r0, [r0, #0]
 80095b2:	f7ff ff1f 	bl	80093f4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	4a2a      	ldr	r2, [pc, #168]	; (8009664 <HAL_TIM_PWM_Stop+0xbc>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d00f      	beq.n	80095de <HAL_TIM_PWM_Stop+0x36>
 80095be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00b      	beq.n	80095de <HAL_TIM_PWM_Stop+0x36>
 80095c6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d007      	beq.n	80095de <HAL_TIM_PWM_Stop+0x36>
 80095ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d003      	beq.n	80095de <HAL_TIM_PWM_Stop+0x36>
 80095d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095da:	4293      	cmp	r3, r2
 80095dc:	d10d      	bne.n	80095fa <HAL_TIM_PWM_Stop+0x52>
    __HAL_TIM_MOE_DISABLE(htim);
 80095de:	6a19      	ldr	r1, [r3, #32]
 80095e0:	f241 1211 	movw	r2, #4369	; 0x1111
 80095e4:	4211      	tst	r1, r2
 80095e6:	d108      	bne.n	80095fa <HAL_TIM_PWM_Stop+0x52>
 80095e8:	6a19      	ldr	r1, [r3, #32]
 80095ea:	f244 4244 	movw	r2, #17476	; 0x4444
 80095ee:	4211      	tst	r1, r2
 80095f0:	d103      	bne.n	80095fa <HAL_TIM_PWM_Stop+0x52>
 80095f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80095f8:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	6a19      	ldr	r1, [r3, #32]
 80095fe:	f241 1211 	movw	r2, #4369	; 0x1111
 8009602:	4211      	tst	r1, r2
 8009604:	d108      	bne.n	8009618 <HAL_TIM_PWM_Stop+0x70>
 8009606:	6a19      	ldr	r1, [r3, #32]
 8009608:	f244 4244 	movw	r2, #17476	; 0x4444
 800960c:	4211      	tst	r1, r2
 800960e:	d103      	bne.n	8009618 <HAL_TIM_PWM_Stop+0x70>
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	f022 0201 	bic.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009618:	b925      	cbnz	r5, 8009624 <HAL_TIM_PWM_Stop+0x7c>
 800961a:	2301      	movs	r3, #1
 800961c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8009620:	2000      	movs	r0, #0
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	3d04      	subs	r5, #4
 8009626:	2d0c      	cmp	r5, #12
 8009628:	d818      	bhi.n	800965c <HAL_TIM_PWM_Stop+0xb4>
 800962a:	e8df f005 	tbb	[pc, r5]
 800962e:	1707      	.short	0x1707
 8009630:	170b1717 	.word	0x170b1717
 8009634:	170f1717 	.word	0x170f1717
 8009638:	1717      	.short	0x1717
 800963a:	13          	.byte	0x13
 800963b:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800963c:	2301      	movs	r3, #1
 800963e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009642:	e7ed      	b.n	8009620 <HAL_TIM_PWM_Stop+0x78>
 8009644:	2301      	movs	r3, #1
 8009646:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800964a:	e7e9      	b.n	8009620 <HAL_TIM_PWM_Stop+0x78>
 800964c:	2301      	movs	r3, #1
 800964e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009652:	e7e5      	b.n	8009620 <HAL_TIM_PWM_Stop+0x78>
 8009654:	2301      	movs	r3, #1
 8009656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800965a:	e7e1      	b.n	8009620 <HAL_TIM_PWM_Stop+0x78>
 800965c:	2301      	movs	r3, #1
 800965e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009662:	e7dd      	b.n	8009620 <HAL_TIM_PWM_Stop+0x78>
 8009664:	40012c00 	.word	0x40012c00

08009668 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009668:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800966c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800966e:	f04f 0c04 	mov.w	ip, #4
 8009672:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &=  ~tmp;
 8009676:	ea23 030c 	bic.w	r3, r3, ip
 800967a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800967c:	6a03      	ldr	r3, [r0, #32]
 800967e:	408a      	lsls	r2, r1
 8009680:	431a      	orrs	r2, r3
 8009682:	6202      	str	r2, [r0, #32]
}
 8009684:	4770      	bx	lr
	...

08009688 <HAL_TIMEx_PWMN_Start>:
{
 8009688:	b510      	push	{r4, lr}
 800968a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800968c:	460b      	mov	r3, r1
 800968e:	bb71      	cbnz	r1, 80096ee <HAL_TIMEx_PWMN_Start+0x66>
 8009690:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	2a01      	cmp	r2, #1
 8009698:	d156      	bne.n	8009748 <HAL_TIMEx_PWMN_Start+0xc0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800969a:	2202      	movs	r2, #2
 800969c:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80096a0:	2204      	movs	r2, #4
 80096a2:	4619      	mov	r1, r3
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	f7ff ffdf 	bl	8009668 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80096aa:	6822      	ldr	r2, [r4, #0]
 80096ac:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80096ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096b2:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	4a29      	ldr	r2, [pc, #164]	; (800975c <HAL_TIMEx_PWMN_Start+0xd4>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d037      	beq.n	800972c <HAL_TIMEx_PWMN_Start+0xa4>
 80096bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c0:	d034      	beq.n	800972c <HAL_TIMEx_PWMN_Start+0xa4>
 80096c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d030      	beq.n	800972c <HAL_TIMEx_PWMN_Start+0xa4>
 80096ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d02c      	beq.n	800972c <HAL_TIMEx_PWMN_Start+0xa4>
 80096d2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d028      	beq.n	800972c <HAL_TIMEx_PWMN_Start+0xa4>
 80096da:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80096de:	4293      	cmp	r3, r2
 80096e0:	d024      	beq.n	800972c <HAL_TIMEx_PWMN_Start+0xa4>
    __HAL_TIM_ENABLE(htim);
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	f042 0201 	orr.w	r2, r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80096ea:	2000      	movs	r0, #0
 80096ec:	e02b      	b.n	8009746 <HAL_TIMEx_PWMN_Start+0xbe>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096ee:	2904      	cmp	r1, #4
 80096f0:	d013      	beq.n	800971a <HAL_TIMEx_PWMN_Start+0x92>
 80096f2:	2908      	cmp	r1, #8
 80096f4:	bf0c      	ite	eq
 80096f6:	f890 2046 	ldrbeq.w	r2, [r0, #70]	; 0x46
 80096fa:	f890 2047 	ldrbne.w	r2, [r0, #71]	; 0x47
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	3a01      	subs	r2, #1
 8009702:	bf18      	it	ne
 8009704:	2201      	movne	r2, #1
 8009706:	bb3a      	cbnz	r2, 8009758 <HAL_TIMEx_PWMN_Start+0xd0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009708:	2b08      	cmp	r3, #8
 800970a:	f04f 0202 	mov.w	r2, #2
 800970e:	bf0c      	ite	eq
 8009710:	f884 2046 	strbeq.w	r2, [r4, #70]	; 0x46
 8009714:	f884 2047 	strbne.w	r2, [r4, #71]	; 0x47
 8009718:	e7c2      	b.n	80096a0 <HAL_TIMEx_PWMN_Start+0x18>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800971a:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	2a01      	cmp	r2, #1
 8009722:	d113      	bne.n	800974c <HAL_TIMEx_PWMN_Start+0xc4>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009724:	2202      	movs	r2, #2
 8009726:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 800972a:	e7b9      	b.n	80096a0 <HAL_TIMEx_PWMN_Start+0x18>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800972c:	6899      	ldr	r1, [r3, #8]
 800972e:	4a0c      	ldr	r2, [pc, #48]	; (8009760 <HAL_TIMEx_PWMN_Start+0xd8>)
 8009730:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009732:	2a06      	cmp	r2, #6
 8009734:	d00c      	beq.n	8009750 <HAL_TIMEx_PWMN_Start+0xc8>
 8009736:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800973a:	d00b      	beq.n	8009754 <HAL_TIMEx_PWMN_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	f042 0201 	orr.w	r2, r2, #1
 8009742:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009744:	2000      	movs	r0, #0
}
 8009746:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009748:	2001      	movs	r0, #1
 800974a:	e7fc      	b.n	8009746 <HAL_TIMEx_PWMN_Start+0xbe>
 800974c:	2001      	movs	r0, #1
 800974e:	e7fa      	b.n	8009746 <HAL_TIMEx_PWMN_Start+0xbe>
  return HAL_OK;
 8009750:	2000      	movs	r0, #0
 8009752:	e7f8      	b.n	8009746 <HAL_TIMEx_PWMN_Start+0xbe>
 8009754:	2000      	movs	r0, #0
 8009756:	e7f6      	b.n	8009746 <HAL_TIMEx_PWMN_Start+0xbe>
    return HAL_ERROR;
 8009758:	2001      	movs	r0, #1
 800975a:	e7f4      	b.n	8009746 <HAL_TIMEx_PWMN_Start+0xbe>
 800975c:	40012c00 	.word	0x40012c00
 8009760:	00010007 	.word	0x00010007

08009764 <HAL_TIMEx_PWMN_Stop>:
{
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800976a:	2200      	movs	r2, #0
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f7ff ff7b 	bl	8009668 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	6a19      	ldr	r1, [r3, #32]
 8009776:	f241 1211 	movw	r2, #4369	; 0x1111
 800977a:	4211      	tst	r1, r2
 800977c:	d108      	bne.n	8009790 <HAL_TIMEx_PWMN_Stop+0x2c>
 800977e:	6a19      	ldr	r1, [r3, #32]
 8009780:	f244 4244 	movw	r2, #17476	; 0x4444
 8009784:	4211      	tst	r1, r2
 8009786:	d103      	bne.n	8009790 <HAL_TIMEx_PWMN_Stop+0x2c>
 8009788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800978a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800978e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	6a19      	ldr	r1, [r3, #32]
 8009794:	f241 1211 	movw	r2, #4369	; 0x1111
 8009798:	4211      	tst	r1, r2
 800979a:	d108      	bne.n	80097ae <HAL_TIMEx_PWMN_Stop+0x4a>
 800979c:	6a19      	ldr	r1, [r3, #32]
 800979e:	f244 4244 	movw	r2, #17476	; 0x4444
 80097a2:	4211      	tst	r1, r2
 80097a4:	d103      	bne.n	80097ae <HAL_TIMEx_PWMN_Stop+0x4a>
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	f022 0201 	bic.w	r2, r2, #1
 80097ac:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80097ae:	b925      	cbnz	r5, 80097ba <HAL_TIMEx_PWMN_Stop+0x56>
 80097b0:	2301      	movs	r3, #1
 80097b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80097b6:	2000      	movs	r0, #0
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80097ba:	2d04      	cmp	r5, #4
 80097bc:	d008      	beq.n	80097d0 <HAL_TIMEx_PWMN_Stop+0x6c>
 80097be:	2d08      	cmp	r5, #8
 80097c0:	f04f 0301 	mov.w	r3, #1
 80097c4:	bf0c      	ite	eq
 80097c6:	f884 3046 	strbeq.w	r3, [r4, #70]	; 0x46
 80097ca:	f884 3047 	strbne.w	r3, [r4, #71]	; 0x47
 80097ce:	e7f2      	b.n	80097b6 <HAL_TIMEx_PWMN_Stop+0x52>
 80097d0:	2301      	movs	r3, #1
 80097d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097d6:	e7ee      	b.n	80097b6 <HAL_TIMEx_PWMN_Stop+0x52>

080097d8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80097d8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80097dc:	2a01      	cmp	r2, #1
 80097de:	d040      	beq.n	8009862 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
{
 80097e0:	b430      	push	{r4, r5}
 80097e2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80097e4:	2201      	movs	r2, #1
 80097e6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80097ea:	2202      	movs	r2, #2
 80097ec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80097f0:	6800      	ldr	r0, [r0, #0]
 80097f2:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 80097f4:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097f6:	4d1c      	ldr	r5, [pc, #112]	; (8009868 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80097f8:	42a8      	cmp	r0, r5
 80097fa:	d003      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80097fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009800:	42a8      	cmp	r0, r5
 8009802:	d103      	bne.n	800980c <HAL_TIMEx_MasterConfigSynchronization+0x34>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009804:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009808:	684d      	ldr	r5, [r1, #4]
 800980a:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800980c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8009810:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009814:	680d      	ldr	r5, [r1, #0]
 8009816:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8009818:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	4812      	ldr	r0, [pc, #72]	; (8009868 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800981e:	4282      	cmp	r2, r0
 8009820:	d012      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009822:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009826:	d00f      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009828:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800982c:	4282      	cmp	r2, r0
 800982e:	d00b      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009830:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009834:	4282      	cmp	r2, r0
 8009836:	d007      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009838:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800983c:	4282      	cmp	r2, r0
 800983e:	d003      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009840:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8009844:	4282      	cmp	r2, r0
 8009846:	d104      	bne.n	8009852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009848:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800984c:	6889      	ldr	r1, [r1, #8]
 800984e:	430c      	orrs	r4, r1
    htim->Instance->SMCR = tmpsmcr;
 8009850:	6094      	str	r4, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009858:	2000      	movs	r0, #0
 800985a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
}
 800985e:	bc30      	pop	{r4, r5}
 8009860:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009862:	2002      	movs	r0, #2
}
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40012c00 	.word	0x40012c00

0800986c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800986c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009870:	2b01      	cmp	r3, #1
 8009872:	d031      	beq.n	80098d8 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
{
 8009874:	b410      	push	{r4}
 8009876:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8009878:	2301      	movs	r3, #1
 800987a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800987e:	68cb      	ldr	r3, [r1, #12]
 8009880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009884:	6888      	ldr	r0, [r1, #8]
 8009886:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800988c:	6848      	ldr	r0, [r1, #4]
 800988e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009894:	6808      	ldr	r0, [r1, #0]
 8009896:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800989c:	6908      	ldr	r0, [r1, #16]
 800989e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098a4:	6948      	ldr	r0, [r1, #20]
 80098a6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098ac:	6b08      	ldr	r0, [r1, #48]	; 0x30
 80098ae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80098b0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80098b4:	6988      	ldr	r0, [r1, #24]
 80098b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80098ba:	6810      	ldr	r0, [r2, #0]
 80098bc:	4c1b      	ldr	r4, [pc, #108]	; (800992c <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 80098be:	42a0      	cmp	r0, r4
 80098c0:	d00c      	beq.n	80098dc <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 80098c2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80098c6:	42a0      	cmp	r0, r4
 80098c8:	d01e      	beq.n	8009908 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
  htim->Instance->BDTR = tmpbdtr;
 80098ca:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80098cc:	2000      	movs	r0, #0
 80098ce:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
}
 80098d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80098d8:	2002      	movs	r0, #2
}
 80098da:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80098dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098e0:	69cc      	ldr	r4, [r1, #28]
 80098e2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80098e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80098ea:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80098ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098f2:	6a0c      	ldr	r4, [r1, #32]
 80098f4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80098f6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80098fa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80098fc:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80098fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009902:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009904:	430b      	orrs	r3, r1
 8009906:	e7e0      	b.n	80098ca <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800990c:	69cc      	ldr	r4, [r1, #28]
 800990e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009910:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009914:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8009916:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800991a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800991e:	6a0c      	ldr	r4, [r1, #32]
 8009920:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009922:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009926:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8009928:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800992a:	e7e8      	b.n	80098fe <HAL_TIMEx_ConfigBreakDeadTime+0x92>
 800992c:	40012c00 	.word	0x40012c00

08009930 <HAL_TIMEx_CommutCallback>:
}
 8009930:	4770      	bx	lr

08009932 <HAL_TIMEx_BreakCallback>:
}
 8009932:	4770      	bx	lr

08009934 <HAL_TIMEx_Break2Callback>:
}
 8009934:	4770      	bx	lr

08009936 <HAL_TIMEx_EncoderIndexCallback>:
}
 8009936:	4770      	bx	lr

08009938 <HAL_TIMEx_DirectionChangeCallback>:
}
 8009938:	4770      	bx	lr

0800993a <HAL_TIMEx_IndexErrorCallback>:
}
 800993a:	4770      	bx	lr

0800993c <HAL_TIMEx_TransitionErrorCallback>:
}
 800993c:	4770      	bx	lr

0800993e <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800993e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	e852 3f00 	ldrex	r3, [r2]
 8009944:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009948:	e842 3100 	strex	r1, r3, [r2]
 800994c:	2900      	cmp	r1, #0
 800994e:	d1f6      	bne.n	800993e <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009950:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009952:	f102 0308 	add.w	r3, r2, #8
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995e:	3208      	adds	r2, #8
 8009960:	e842 3100 	strex	r1, r3, [r2]
 8009964:	2900      	cmp	r1, #0
 8009966:	d1f3      	bne.n	8009950 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009968:	2320      	movs	r3, #32
 800996a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800996e:	4770      	bx	lr

08009970 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009970:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	e852 3f00 	ldrex	r3, [r2]
 8009976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	e842 3100 	strex	r1, r3, [r2]
 800997e:	2900      	cmp	r1, #0
 8009980:	d1f6      	bne.n	8009970 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009982:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	f102 0308 	add.w	r3, r2, #8
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009990:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009994:	3208      	adds	r2, #8
 8009996:	e842 3100 	strex	r1, r3, [r2]
 800999a:	2900      	cmp	r1, #0
 800999c:	d1f1      	bne.n	8009982 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800999e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d006      	beq.n	80099b2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099a4:	2320      	movs	r3, #32
 80099a6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099aa:	2300      	movs	r3, #0
 80099ac:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099ae:	6703      	str	r3, [r0, #112]	; 0x70
}
 80099b0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	e852 3f00 	ldrex	r3, [r2]
 80099b8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099bc:	e842 3100 	strex	r1, r3, [r2]
 80099c0:	2900      	cmp	r1, #0
 80099c2:	d1f6      	bne.n	80099b2 <UART_EndRxTransfer+0x42>
 80099c4:	e7ee      	b.n	80099a4 <UART_EndRxTransfer+0x34>
	...

080099c8 <HAL_UART_Transmit_DMA>:
{
 80099c8:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80099ca:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80099ce:	2a20      	cmp	r2, #32
 80099d0:	d14a      	bne.n	8009a68 <HAL_UART_Transmit_DMA+0xa0>
{
 80099d2:	b510      	push	{r4, lr}
 80099d4:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80099d6:	2900      	cmp	r1, #0
 80099d8:	d048      	beq.n	8009a6c <HAL_UART_Transmit_DMA+0xa4>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d048      	beq.n	8009a70 <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 80099de:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80099e2:	2a01      	cmp	r2, #1
 80099e4:	d046      	beq.n	8009a74 <HAL_UART_Transmit_DMA+0xac>
 80099e6:	2201      	movs	r2, #1
 80099e8:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 80099ec:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80099ee:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80099f2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099fc:	2221      	movs	r2, #33	; 0x21
 80099fe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8009a02:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009a04:	b1e2      	cbz	r2, 8009a40 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009a06:	491c      	ldr	r1, [pc, #112]	; (8009a78 <HAL_UART_Transmit_DMA+0xb0>)
 8009a08:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009a0a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009a0c:	491b      	ldr	r1, [pc, #108]	; (8009a7c <HAL_UART_Transmit_DMA+0xb4>)
 8009a0e:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009a10:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009a12:	491b      	ldr	r1, [pc, #108]	; (8009a80 <HAL_UART_Transmit_DMA+0xb8>)
 8009a14:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8009a16:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009a18:	2100      	movs	r1, #0
 8009a1a:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009a1c:	6802      	ldr	r2, [r0, #0]
 8009a1e:	3228      	adds	r2, #40	; 0x28
 8009a20:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009a22:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8009a24:	f7fc fdf4 	bl	8006610 <HAL_DMA_Start_IT>
 8009a28:	b150      	cbz	r0, 8009a40 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a2a:	2310      	movs	r3, #16
 8009a2c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8009a30:	2300      	movs	r3, #0
 8009a32:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8009a36:	2320      	movs	r3, #32
 8009a38:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8009a3c:	2001      	movs	r0, #1
 8009a3e:	e012      	b.n	8009a66 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	2240      	movs	r2, #64	; 0x40
 8009a44:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8009a46:	2300      	movs	r3, #0
 8009a48:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a4c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	f102 0308 	add.w	r3, r2, #8
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	3208      	adds	r2, #8
 8009a5c:	e842 3100 	strex	r1, r3, [r2]
 8009a60:	2900      	cmp	r1, #0
 8009a62:	d1f3      	bne.n	8009a4c <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 8009a64:	2000      	movs	r0, #0
}
 8009a66:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009a68:	2002      	movs	r0, #2
}
 8009a6a:	4770      	bx	lr
      return HAL_ERROR;
 8009a6c:	2001      	movs	r0, #1
 8009a6e:	e7fa      	b.n	8009a66 <HAL_UART_Transmit_DMA+0x9e>
 8009a70:	2001      	movs	r0, #1
 8009a72:	e7f8      	b.n	8009a66 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 8009a74:	2002      	movs	r0, #2
 8009a76:	e7f6      	b.n	8009a66 <HAL_UART_Transmit_DMA+0x9e>
 8009a78:	08009a87 	.word	0x08009a87
 8009a7c:	08009ad1 	.word	0x08009ad1
 8009a80:	08009add 	.word	0x08009add

08009a84 <HAL_UART_TxCpltCallback>:
}
 8009a84:	4770      	bx	lr

08009a86 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a86:	b508      	push	{r3, lr}
 8009a88:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a8a:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f013 0f20 	tst.w	r3, #32
 8009a94:	d118      	bne.n	8009ac8 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a9c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9e:	f102 0308 	add.w	r3, r2, #8
 8009aa2:	e853 3f00 	ldrex	r3, [r3]
 8009aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	3208      	adds	r2, #8
 8009aac:	e842 3100 	strex	r1, r3, [r2]
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	d1f3      	bne.n	8009a9c <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ab4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	e852 3f00 	ldrex	r3, [r2]
 8009aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	e842 3100 	strex	r1, r3, [r2]
 8009ac2:	2900      	cmp	r1, #0
 8009ac4:	d1f6      	bne.n	8009ab4 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ac6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8009ac8:	f7ff ffdc 	bl	8009a84 <HAL_UART_TxCpltCallback>
}
 8009acc:	e7fb      	b.n	8009ac6 <UART_DMATransmitCplt+0x40>

08009ace <HAL_UART_TxHalfCpltCallback>:
}
 8009ace:	4770      	bx	lr

08009ad0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ad0:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009ad2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009ad4:	f7ff fffb 	bl	8009ace <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ad8:	bd08      	pop	{r3, pc}

08009ada <HAL_UART_ErrorCallback>:
}
 8009ada:	4770      	bx	lr

08009adc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009adc:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ade:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ae0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ae4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009af0:	d001      	beq.n	8009af6 <UART_DMAError+0x1a>
 8009af2:	2a21      	cmp	r2, #33	; 0x21
 8009af4:	d010      	beq.n	8009b18 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009afe:	d001      	beq.n	8009b04 <UART_DMAError+0x28>
 8009b00:	2d22      	cmp	r5, #34	; 0x22
 8009b02:	d010      	beq.n	8009b26 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b04:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b08:	f043 0310 	orr.w	r3, r3, #16
 8009b0c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b10:	4620      	mov	r0, r4
 8009b12:	f7ff ffe2 	bl	8009ada <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f7ff ff0d 	bl	800993e <UART_EndTxTransfer>
 8009b24:	e7e7      	b.n	8009af6 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7ff ff1f 	bl	8009970 <UART_EndRxTransfer>
 8009b32:	e7e7      	b.n	8009b04 <UART_DMAError+0x28>

08009b34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b34:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b36:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009b3e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b42:	f7ff ffca 	bl	8009ada <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b46:	bd08      	pop	{r3, pc}

08009b48 <HAL_UARTEx_RxEventCallback>:
}
 8009b48:	4770      	bx	lr
	...

08009b4c <HAL_UART_IRQHandler>:
{
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b50:	6802      	ldr	r2, [r0, #0]
 8009b52:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b54:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b56:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8009b58:	f640 0c0f 	movw	ip, #2063	; 0x80f
 8009b5c:	ea13 0f0c 	tst.w	r3, ip
 8009b60:	d10e      	bne.n	8009b80 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b62:	f013 0f20 	tst.w	r3, #32
 8009b66:	d014      	beq.n	8009b92 <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b68:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b6c:	f000 5580 	and.w	r5, r0, #268435456	; 0x10000000
 8009b70:	ea5c 0c05 	orrs.w	ip, ip, r5
 8009b74:	d00d      	beq.n	8009b92 <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 8009b76:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009b78:	b3a3      	cbz	r3, 8009be4 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	4798      	blx	r3
 8009b7e:	e031      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b80:	4db5      	ldr	r5, [pc, #724]	; (8009e58 <HAL_UART_IRQHandler+0x30c>)
 8009b82:	4005      	ands	r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b84:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 8009e60 <HAL_UART_IRQHandler+0x314>
 8009b88:	ea01 0c0c 	and.w	ip, r1, ip
 8009b8c:	ea5c 0c05 	orrs.w	ip, ip, r5
 8009b90:	d129      	bne.n	8009be6 <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b92:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8009b94:	2d01      	cmp	r5, #1
 8009b96:	f000 80c0 	beq.w	8009d1a <HAL_UART_IRQHandler+0x1ce>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b9a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009b9e:	d003      	beq.n	8009ba8 <HAL_UART_IRQHandler+0x5c>
 8009ba0:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8009ba4:	f040 8151 	bne.w	8009e4a <HAL_UART_IRQHandler+0x2fe>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ba8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009bac:	d006      	beq.n	8009bbc <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009bae:	f001 0280 	and.w	r2, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009bb2:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 8009bb6:	4302      	orrs	r2, r0
 8009bb8:	f040 8154 	bne.w	8009e64 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009bbc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009bc0:	d003      	beq.n	8009bca <HAL_UART_IRQHandler+0x7e>
 8009bc2:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009bc6:	f040 8154 	bne.w	8009e72 <HAL_UART_IRQHandler+0x326>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009bca:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8009bce:	d003      	beq.n	8009bd8 <HAL_UART_IRQHandler+0x8c>
 8009bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8009bd4:	f040 815f 	bne.w	8009e96 <HAL_UART_IRQHandler+0x34a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009bd8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009bdc:	d002      	beq.n	8009be4 <HAL_UART_IRQHandler+0x98>
 8009bde:	2900      	cmp	r1, #0
 8009be0:	f2c0 815d 	blt.w	8009e9e <HAL_UART_IRQHandler+0x352>
}
 8009be4:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009be6:	f013 0f01 	tst.w	r3, #1
 8009bea:	d009      	beq.n	8009c00 <HAL_UART_IRQHandler+0xb4>
 8009bec:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009bf0:	d006      	beq.n	8009c00 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bf2:	2601      	movs	r6, #1
 8009bf4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bf6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009bfa:	4332      	orrs	r2, r6
 8009bfc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c00:	f013 0f02 	tst.w	r3, #2
 8009c04:	d00f      	beq.n	8009c26 <HAL_UART_IRQHandler+0xda>
 8009c06:	f010 0f01 	tst.w	r0, #1
 8009c0a:	d01b      	beq.n	8009c44 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c0c:	6822      	ldr	r2, [r4, #0]
 8009c0e:	2602      	movs	r6, #2
 8009c10:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c12:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009c16:	f042 0204 	orr.w	r2, r2, #4
 8009c1a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c1e:	f013 0f04 	tst.w	r3, #4
 8009c22:	d106      	bne.n	8009c32 <HAL_UART_IRQHandler+0xe6>
 8009c24:	e00e      	b.n	8009c44 <HAL_UART_IRQHandler+0xf8>
 8009c26:	f013 0f04 	tst.w	r3, #4
 8009c2a:	d00b      	beq.n	8009c44 <HAL_UART_IRQHandler+0xf8>
 8009c2c:	f010 0f01 	tst.w	r0, #1
 8009c30:	d008      	beq.n	8009c44 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c32:	6822      	ldr	r2, [r4, #0]
 8009c34:	2604      	movs	r6, #4
 8009c36:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c38:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009c3c:	f042 0202 	orr.w	r2, r2, #2
 8009c40:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c44:	f013 0f08 	tst.w	r3, #8
 8009c48:	d00b      	beq.n	8009c62 <HAL_UART_IRQHandler+0x116>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c4a:	f001 0220 	and.w	r2, r1, #32
 8009c4e:	432a      	orrs	r2, r5
 8009c50:	d007      	beq.n	8009c62 <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	2508      	movs	r5, #8
 8009c56:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c58:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009c5c:	432a      	orrs	r2, r5
 8009c5e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c62:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8009c66:	d00c      	beq.n	8009c82 <HAL_UART_IRQHandler+0x136>
 8009c68:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 8009c6c:	d009      	beq.n	8009c82 <HAL_UART_IRQHandler+0x136>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c6e:	6822      	ldr	r2, [r4, #0]
 8009c70:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8009c74:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c76:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009c7a:	f042 0220 	orr.w	r2, r2, #32
 8009c7e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c82:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009c86:	2a00      	cmp	r2, #0
 8009c88:	d0ac      	beq.n	8009be4 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c8a:	f013 0f20 	tst.w	r3, #32
 8009c8e:	d009      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x158>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c90:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c94:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 8009c98:	4301      	orrs	r1, r0
 8009c9a:	d003      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x158>
        if (huart->RxISR != NULL)
 8009c9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009c9e:	b10b      	cbz	r3, 8009ca4 <HAL_UART_IRQHandler+0x158>
          huart->RxISR(huart);
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8009ca4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cb0:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	d029      	beq.n	8009d0c <HAL_UART_IRQHandler+0x1c0>
        UART_EndRxTransfer(huart);
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f7ff fe59 	bl	8009970 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009cc6:	d01d      	beq.n	8009d04 <HAL_UART_IRQHandler+0x1b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cc8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cca:	f102 0308 	add.w	r3, r2, #8
 8009cce:	e853 3f00 	ldrex	r3, [r3]
 8009cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	3208      	adds	r2, #8
 8009cd8:	e842 3100 	strex	r1, r3, [r2]
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	d1f3      	bne.n	8009cc8 <HAL_UART_IRQHandler+0x17c>
          if (huart->hdmarx != NULL)
 8009ce0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009ce2:	b15b      	cbz	r3, 8009cfc <HAL_UART_IRQHandler+0x1b0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ce4:	4a5d      	ldr	r2, [pc, #372]	; (8009e5c <HAL_UART_IRQHandler+0x310>)
 8009ce6:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ce8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009cea:	f7fc fd11 	bl	8006710 <HAL_DMA_Abort_IT>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	f43f af78 	beq.w	8009be4 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cf4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009cf6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009cf8:	4798      	blx	r3
 8009cfa:	e773      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f7ff feec 	bl	8009ada <HAL_UART_ErrorCallback>
 8009d02:	e76f      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 8009d04:	4620      	mov	r0, r4
 8009d06:	f7ff fee8 	bl	8009ada <HAL_UART_ErrorCallback>
 8009d0a:	e76b      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f7ff fee4 	bl	8009ada <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d12:	2300      	movs	r3, #0
 8009d14:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009d18:	e764      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d1a:	f013 0f10 	tst.w	r3, #16
 8009d1e:	f43f af3c 	beq.w	8009b9a <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d22:	f011 0f10 	tst.w	r1, #16
 8009d26:	f43f af38 	beq.w	8009b9a <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d2a:	2310      	movs	r3, #16
 8009d2c:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009d36:	d04e      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x28a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d38:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009d3a:	6813      	ldr	r3, [r2, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f43f af4f 	beq.w	8009be4 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d46:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009d4a:	4299      	cmp	r1, r3
 8009d4c:	f67f af4a 	bls.w	8009be4 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 8009d50:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d54:	6813      	ldr	r3, [r2, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f013 0f20 	tst.w	r3, #32
 8009d5c:	d131      	bne.n	8009dc2 <HAL_UART_IRQHandler+0x276>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d5e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d60:	e852 3f00 	ldrex	r3, [r2]
 8009d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	e842 3100 	strex	r1, r3, [r2]
 8009d6c:	2900      	cmp	r1, #0
 8009d6e:	d1f6      	bne.n	8009d5e <HAL_UART_IRQHandler+0x212>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d70:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	f102 0308 	add.w	r3, r2, #8
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	3208      	adds	r2, #8
 8009d80:	e842 3100 	strex	r1, r3, [r2]
 8009d84:	2900      	cmp	r1, #0
 8009d86:	d1f3      	bne.n	8009d70 <HAL_UART_IRQHandler+0x224>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d88:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	f102 0308 	add.w	r3, r2, #8
 8009d8e:	e853 3f00 	ldrex	r3, [r3]
 8009d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d96:	3208      	adds	r2, #8
 8009d98:	e842 3100 	strex	r1, r3, [r2]
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	d1f3      	bne.n	8009d88 <HAL_UART_IRQHandler+0x23c>
          huart->RxState = HAL_UART_STATE_READY;
 8009da0:	2320      	movs	r3, #32
 8009da2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da6:	2300      	movs	r3, #0
 8009da8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009daa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	e852 3f00 	ldrex	r3, [r2]
 8009db0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db4:	e842 3100 	strex	r1, r3, [r2]
 8009db8:	2900      	cmp	r1, #0
 8009dba:	d1f6      	bne.n	8009daa <HAL_UART_IRQHandler+0x25e>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dbc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009dbe:	f7fc fc71 	bl	80066a4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dc2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009dc6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009dca:	1ac9      	subs	r1, r1, r3
 8009dcc:	b289      	uxth	r1, r1
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f7ff feba 	bl	8009b48 <HAL_UARTEx_RxEventCallback>
 8009dd4:	e706      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009dd6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009dda:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8009ddc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f43f aefe 	beq.w	8009be4 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009de8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009dec:	1a89      	subs	r1, r1, r2
 8009dee:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8009df0:	2900      	cmp	r1, #0
 8009df2:	f43f aef7 	beq.w	8009be4 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009df6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df8:	e852 3f00 	ldrex	r3, [r2]
 8009dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	e842 3000 	strex	r0, r3, [r2]
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d1f6      	bne.n	8009df6 <HAL_UART_IRQHandler+0x2aa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e08:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	f102 0308 	add.w	r3, r2, #8
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e16:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	3208      	adds	r2, #8
 8009e1c:	e842 3000 	strex	r0, r3, [r2]
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d1f1      	bne.n	8009e08 <HAL_UART_IRQHandler+0x2bc>
        huart->RxState = HAL_UART_STATE_READY;
 8009e24:	2320      	movs	r3, #32
 8009e26:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8009e2e:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e30:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	e852 3f00 	ldrex	r3, [r2]
 8009e36:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	e842 3000 	strex	r0, r3, [r2]
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d1f6      	bne.n	8009e30 <HAL_UART_IRQHandler+0x2e4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e42:	4620      	mov	r0, r4
 8009e44:	f7ff fe80 	bl	8009b48 <HAL_UARTEx_RxEventCallback>
 8009e48:	e6cc      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009e4e:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8009e50:	4620      	mov	r0, r4
 8009e52:	f000 fb47 	bl	800a4e4 <HAL_UARTEx_WakeupCallback>
    return;
 8009e56:	e6c5      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
 8009e58:	10000001 	.word	0x10000001
 8009e5c:	08009b35 	.word	0x08009b35
 8009e60:	04000120 	.word	0x04000120
    if (huart->TxISR != NULL)
 8009e64:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f43f aebc 	beq.w	8009be4 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	4798      	blx	r3
 8009e70:	e6b8      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	e852 3f00 	ldrex	r3, [r2]
 8009e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	e842 3100 	strex	r1, r3, [r2]
 8009e80:	2900      	cmp	r1, #0
 8009e82:	d1f6      	bne.n	8009e72 <HAL_UART_IRQHandler+0x326>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e84:	2320      	movs	r3, #32
 8009e86:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7ff fdf8 	bl	8009a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e94:	e6a6      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e96:	4620      	mov	r0, r4
 8009e98:	f000 fb26 	bl	800a4e8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8009e9c:	e6a2      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f000 fb21 	bl	800a4e6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8009ea4:	e69e      	b.n	8009be4 <HAL_UART_IRQHandler+0x98>
 8009ea6:	bf00      	nop

08009ea8 <UART_SetConfig>:
{
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eac:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009eae:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eb0:	68a3      	ldr	r3, [r4, #8]
 8009eb2:	6922      	ldr	r2, [r4, #16]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	6962      	ldr	r2, [r4, #20]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	69e2      	ldr	r2, [r4, #28]
 8009ebc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ebe:	4aa4      	ldr	r2, [pc, #656]	; (800a150 <UART_SetConfig+0x2a8>)
 8009ec0:	4002      	ands	r2, r0
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ec6:	6822      	ldr	r2, [r4, #0]
 8009ec8:	6853      	ldr	r3, [r2, #4]
 8009eca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009ece:	68e1      	ldr	r1, [r4, #12]
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ed4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ed6:	6822      	ldr	r2, [r4, #0]
 8009ed8:	4b9e      	ldr	r3, [pc, #632]	; (800a154 <UART_SetConfig+0x2ac>)
 8009eda:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8009edc:	bf1c      	itt	ne
 8009ede:	6a23      	ldrne	r3, [r4, #32]
 8009ee0:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ee2:	6893      	ldr	r3, [r2, #8]
 8009ee4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009ee8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009eec:	430b      	orrs	r3, r1
 8009eee:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ef0:	6822      	ldr	r2, [r4, #0]
 8009ef2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ef4:	f023 030f 	bic.w	r3, r3, #15
 8009ef8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009efa:	430b      	orrs	r3, r1
 8009efc:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	4a95      	ldr	r2, [pc, #596]	; (800a158 <UART_SetConfig+0x2b0>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d01f      	beq.n	8009f46 <UART_SetConfig+0x9e>
 8009f06:	4a95      	ldr	r2, [pc, #596]	; (800a15c <UART_SetConfig+0x2b4>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d02e      	beq.n	8009f6a <UART_SetConfig+0xc2>
 8009f0c:	4a94      	ldr	r2, [pc, #592]	; (800a160 <UART_SetConfig+0x2b8>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d048      	beq.n	8009fa4 <UART_SetConfig+0xfc>
 8009f12:	4a94      	ldr	r2, [pc, #592]	; (800a164 <UART_SetConfig+0x2bc>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d05b      	beq.n	8009fd0 <UART_SetConfig+0x128>
 8009f18:	4a8e      	ldr	r2, [pc, #568]	; (800a154 <UART_SetConfig+0x2ac>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d06d      	beq.n	8009ffa <UART_SetConfig+0x152>
 8009f1e:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f20:	69e0      	ldr	r0, [r4, #28]
 8009f22:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009f26:	f000 80de 	beq.w	800a0e6 <UART_SetConfig+0x23e>
    switch (clocksource)
 8009f2a:	2a08      	cmp	r2, #8
 8009f2c:	f200 815e 	bhi.w	800a1ec <UART_SetConfig+0x344>
 8009f30:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009f34:	01440122 	.word	0x01440122
 8009f38:	015c014a 	.word	0x015c014a
 8009f3c:	015c0147 	.word	0x015c0147
 8009f40:	015c015c 	.word	0x015c015c
 8009f44:	010a      	.short	0x010a
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f46:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8009f4a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009f4e:	f002 0203 	and.w	r2, r2, #3
 8009f52:	2a03      	cmp	r2, #3
 8009f54:	d807      	bhi.n	8009f66 <UART_SetConfig+0xbe>
 8009f56:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009f5a:	006b      	.short	0x006b
 8009f5c:	014f0004 	.word	0x014f0004
 8009f60:	0151      	.short	0x0151
 8009f62:	2204      	movs	r2, #4
 8009f64:	e7dc      	b.n	8009f20 <UART_SetConfig+0x78>
 8009f66:	2210      	movs	r2, #16
 8009f68:	e7da      	b.n	8009f20 <UART_SetConfig+0x78>
 8009f6a:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8009f6e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009f72:	f002 020c 	and.w	r2, r2, #12
 8009f76:	2a0c      	cmp	r2, #12
 8009f78:	d812      	bhi.n	8009fa0 <UART_SetConfig+0xf8>
 8009f7a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009f7e:	0077      	.short	0x0077
 8009f80:	00110011 	.word	0x00110011
 8009f84:	000d0011 	.word	0x000d0011
 8009f88:	00110011 	.word	0x00110011
 8009f8c:	01410011 	.word	0x01410011
 8009f90:	00110011 	.word	0x00110011
 8009f94:	000f0011 	.word	0x000f0011
 8009f98:	2204      	movs	r2, #4
 8009f9a:	e7c1      	b.n	8009f20 <UART_SetConfig+0x78>
 8009f9c:	2208      	movs	r2, #8
 8009f9e:	e7bf      	b.n	8009f20 <UART_SetConfig+0x78>
 8009fa0:	2210      	movs	r2, #16
 8009fa2:	e7bd      	b.n	8009f20 <UART_SetConfig+0x78>
 8009fa4:	4b70      	ldr	r3, [pc, #448]	; (800a168 <UART_SetConfig+0x2c0>)
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009fae:	2b20      	cmp	r3, #32
 8009fb0:	f000 8128 	beq.w	800a204 <UART_SetConfig+0x35c>
 8009fb4:	d807      	bhi.n	8009fc6 <UART_SetConfig+0x11e>
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 8091 	beq.w	800a0de <UART_SetConfig+0x236>
 8009fbc:	2b10      	cmp	r3, #16
 8009fbe:	bf14      	ite	ne
 8009fc0:	2210      	movne	r2, #16
 8009fc2:	2204      	moveq	r2, #4
 8009fc4:	e7ac      	b.n	8009f20 <UART_SetConfig+0x78>
 8009fc6:	2b30      	cmp	r3, #48	; 0x30
 8009fc8:	bf14      	ite	ne
 8009fca:	2210      	movne	r2, #16
 8009fcc:	2208      	moveq	r2, #8
 8009fce:	e7a7      	b.n	8009f20 <UART_SetConfig+0x78>
 8009fd0:	4b65      	ldr	r3, [pc, #404]	; (800a168 <UART_SetConfig+0x2c0>)
 8009fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fda:	2b80      	cmp	r3, #128	; 0x80
 8009fdc:	f000 8114 	beq.w	800a208 <UART_SetConfig+0x360>
 8009fe0:	d806      	bhi.n	8009ff0 <UART_SetConfig+0x148>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d07d      	beq.n	800a0e2 <UART_SetConfig+0x23a>
 8009fe6:	2b40      	cmp	r3, #64	; 0x40
 8009fe8:	bf14      	ite	ne
 8009fea:	2210      	movne	r2, #16
 8009fec:	2204      	moveq	r2, #4
 8009fee:	e797      	b.n	8009f20 <UART_SetConfig+0x78>
 8009ff0:	2bc0      	cmp	r3, #192	; 0xc0
 8009ff2:	bf14      	ite	ne
 8009ff4:	2210      	movne	r2, #16
 8009ff6:	2208      	moveq	r2, #8
 8009ff8:	e792      	b.n	8009f20 <UART_SetConfig+0x78>
 8009ffa:	4b5b      	ldr	r3, [pc, #364]	; (800a168 <UART_SetConfig+0x2c0>)
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a000:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a008:	d064      	beq.n	800a0d4 <UART_SetConfig+0x22c>
 800a00a:	d809      	bhi.n	800a020 <UART_SetConfig+0x178>
 800a00c:	b393      	cbz	r3, 800a074 <UART_SetConfig+0x1cc>
 800a00e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a012:	bf18      	it	ne
 800a014:	2001      	movne	r0, #1
 800a016:	f040 80c8 	bne.w	800a1aa <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 800a01a:	f7fd fd7b 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
        break;
 800a01e:	e02b      	b.n	800a078 <UART_SetConfig+0x1d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a024:	d102      	bne.n	800a02c <UART_SetConfig+0x184>
        pclk = (uint32_t) LSE_VALUE;
 800a026:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a02a:	e028      	b.n	800a07e <UART_SetConfig+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a02c:	2001      	movs	r0, #1
 800a02e:	e0bc      	b.n	800a1aa <UART_SetConfig+0x302>
 800a030:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 800a032:	4948      	ldr	r1, [pc, #288]	; (800a154 <UART_SetConfig+0x2ac>)
 800a034:	428b      	cmp	r3, r1
 800a036:	f47f af73 	bne.w	8009f20 <UART_SetConfig+0x78>
    switch (clocksource)
 800a03a:	2a08      	cmp	r2, #8
 800a03c:	f200 80c6 	bhi.w	800a1cc <UART_SetConfig+0x324>
 800a040:	a301      	add	r3, pc, #4	; (adr r3, 800a048 <UART_SetConfig+0x1a0>)
 800a042:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a075 	.word	0x0800a075
 800a04c:	0800a1cd 	.word	0x0800a1cd
 800a050:	0800a071 	.word	0x0800a071
 800a054:	0800a1cd 	.word	0x0800a1cd
 800a058:	0800a01b 	.word	0x0800a01b
 800a05c:	0800a1cd 	.word	0x0800a1cd
 800a060:	0800a1cd 	.word	0x0800a1cd
 800a064:	0800a1cd 	.word	0x0800a1cd
 800a068:	0800a0d9 	.word	0x0800a0d9
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a06c:	2200      	movs	r2, #0
 800a06e:	e7e0      	b.n	800a032 <UART_SetConfig+0x18a>
    switch (clocksource)
 800a070:	483e      	ldr	r0, [pc, #248]	; (800a16c <UART_SetConfig+0x2c4>)
 800a072:	e004      	b.n	800a07e <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a074:	f7fd fea6 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a078:	2800      	cmp	r0, #0
 800a07a:	f000 80a9 	beq.w	800a1d0 <UART_SetConfig+0x328>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a07e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a080:	4b3b      	ldr	r3, [pc, #236]	; (800a170 <UART_SetConfig+0x2c8>)
 800a082:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a086:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a08a:	6865      	ldr	r5, [r4, #4]
 800a08c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a090:	4299      	cmp	r1, r3
 800a092:	f200 809f 	bhi.w	800a1d4 <UART_SetConfig+0x32c>
 800a096:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a09a:	f200 809d 	bhi.w	800a1d8 <UART_SetConfig+0x330>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a09e:	2600      	movs	r6, #0
 800a0a0:	4633      	mov	r3, r6
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	f7f6 fe18 	bl	8000cd8 <__aeabi_uldivmod>
 800a0a8:	0209      	lsls	r1, r1, #8
 800a0aa:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a0ae:	0200      	lsls	r0, r0, #8
 800a0b0:	086b      	lsrs	r3, r5, #1
 800a0b2:	18c0      	adds	r0, r0, r3
 800a0b4:	462a      	mov	r2, r5
 800a0b6:	4633      	mov	r3, r6
 800a0b8:	f141 0100 	adc.w	r1, r1, #0
 800a0bc:	f7f6 fe0c 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0c0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800a0c4:	4b2b      	ldr	r3, [pc, #172]	; (800a174 <UART_SetConfig+0x2cc>)
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	f200 8088 	bhi.w	800a1dc <UART_SetConfig+0x334>
          huart->Instance->BRR = usartdiv;
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	60d8      	str	r0, [r3, #12]
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	e06a      	b.n	800a1aa <UART_SetConfig+0x302>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0d4:	4825      	ldr	r0, [pc, #148]	; (800a16c <UART_SetConfig+0x2c4>)
 800a0d6:	e7d2      	b.n	800a07e <UART_SetConfig+0x1d6>
        pclk = (uint32_t) LSE_VALUE;
 800a0d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a0dc:	e7cf      	b.n	800a07e <UART_SetConfig+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0de:	2200      	movs	r2, #0
 800a0e0:	e71e      	b.n	8009f20 <UART_SetConfig+0x78>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	e71c      	b.n	8009f20 <UART_SetConfig+0x78>
    switch (clocksource)
 800a0e6:	2a08      	cmp	r2, #8
 800a0e8:	d87a      	bhi.n	800a1e0 <UART_SetConfig+0x338>
 800a0ea:	e8df f002 	tbb	[pc, r2]
 800a0ee:	2505      	.short	0x2505
 800a0f0:	7928792b 	.word	0x7928792b
 800a0f4:	7979      	.short	0x7979
 800a0f6:	09          	.byte	0x09
 800a0f7:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0f8:	f7fd fe64 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d071      	beq.n	800a1e4 <UART_SetConfig+0x33c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a100:	6862      	ldr	r2, [r4, #4]
 800a102:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a104:	4b1a      	ldr	r3, [pc, #104]	; (800a170 <UART_SetConfig+0x2c8>)
 800a106:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a10a:	fbb0 f0f3 	udiv	r0, r0, r3
 800a10e:	0853      	lsrs	r3, r2, #1
 800a110:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a114:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a118:	f1a3 0110 	sub.w	r1, r3, #16
 800a11c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800a120:	4291      	cmp	r1, r2
 800a122:	d861      	bhi.n	800a1e8 <UART_SetConfig+0x340>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a124:	f023 020f 	bic.w	r2, r3, #15
 800a128:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800a12a:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a12c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800a130:	4313      	orrs	r3, r2
 800a132:	60cb      	str	r3, [r1, #12]
 800a134:	2000      	movs	r0, #0
 800a136:	e038      	b.n	800a1aa <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a138:	f7fd fe56 	bl	8007de8 <HAL_RCC_GetPCLK2Freq>
        break;
 800a13c:	e7de      	b.n	800a0fc <UART_SetConfig+0x254>
        pclk = HAL_RCC_GetSysClockFreq();
 800a13e:	f7fd fce9 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
        break;
 800a142:	e7db      	b.n	800a0fc <UART_SetConfig+0x254>
        pclk = (uint32_t) HSI_VALUE;
 800a144:	4809      	ldr	r0, [pc, #36]	; (800a16c <UART_SetConfig+0x2c4>)
 800a146:	e7db      	b.n	800a100 <UART_SetConfig+0x258>
    switch (clocksource)
 800a148:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a14c:	e018      	b.n	800a180 <UART_SetConfig+0x2d8>
 800a14e:	bf00      	nop
 800a150:	cfff69f3 	.word	0xcfff69f3
 800a154:	40008000 	.word	0x40008000
 800a158:	40013800 	.word	0x40013800
 800a15c:	40004400 	.word	0x40004400
 800a160:	40004800 	.word	0x40004800
 800a164:	40004c00 	.word	0x40004c00
 800a168:	40021000 	.word	0x40021000
 800a16c:	00f42400 	.word	0x00f42400
 800a170:	0800e48c 	.word	0x0800e48c
 800a174:	000ffcff 	.word	0x000ffcff
        pclk = HAL_RCC_GetPCLK1Freq();
 800a178:	f7fd fe24 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d037      	beq.n	800a1f0 <UART_SetConfig+0x348>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a184:	4a21      	ldr	r2, [pc, #132]	; (800a20c <UART_SetConfig+0x364>)
 800a186:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800a18a:	fbb0 f0f2 	udiv	r0, r0, r2
 800a18e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a192:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a196:	f1a0 0210 	sub.w	r2, r0, #16
 800a19a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d828      	bhi.n	800a1f4 <UART_SetConfig+0x34c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	b280      	uxth	r0, r0
 800a1a6:	60d8      	str	r0, [r3, #12]
 800a1a8:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1b0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800a1b8:	6763      	str	r3, [r4, #116]	; 0x74
}
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1bc:	f7fd fe14 	bl	8007de8 <HAL_RCC_GetPCLK2Freq>
        break;
 800a1c0:	e7dc      	b.n	800a17c <UART_SetConfig+0x2d4>
        pclk = HAL_RCC_GetSysClockFreq();
 800a1c2:	f7fd fca7 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
        break;
 800a1c6:	e7d9      	b.n	800a17c <UART_SetConfig+0x2d4>
        pclk = (uint32_t) HSI_VALUE;
 800a1c8:	4811      	ldr	r0, [pc, #68]	; (800a210 <UART_SetConfig+0x368>)
 800a1ca:	e7d9      	b.n	800a180 <UART_SetConfig+0x2d8>
    switch (clocksource)
 800a1cc:	2001      	movs	r0, #1
 800a1ce:	e7ec      	b.n	800a1aa <UART_SetConfig+0x302>
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	e7ea      	b.n	800a1aa <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	e7e8      	b.n	800a1aa <UART_SetConfig+0x302>
 800a1d8:	2001      	movs	r0, #1
 800a1da:	e7e6      	b.n	800a1aa <UART_SetConfig+0x302>
          ret = HAL_ERROR;
 800a1dc:	2001      	movs	r0, #1
 800a1de:	e7e4      	b.n	800a1aa <UART_SetConfig+0x302>
    switch (clocksource)
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	e7e2      	b.n	800a1aa <UART_SetConfig+0x302>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	e7e0      	b.n	800a1aa <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 800a1e8:	2001      	movs	r0, #1
 800a1ea:	e7de      	b.n	800a1aa <UART_SetConfig+0x302>
    switch (clocksource)
 800a1ec:	2001      	movs	r0, #1
 800a1ee:	e7dc      	b.n	800a1aa <UART_SetConfig+0x302>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	e7da      	b.n	800a1aa <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	e7d8      	b.n	800a1aa <UART_SetConfig+0x302>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	e691      	b.n	8009f20 <UART_SetConfig+0x78>
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	e68f      	b.n	8009f20 <UART_SetConfig+0x78>
 800a200:	2202      	movs	r2, #2
 800a202:	e68d      	b.n	8009f20 <UART_SetConfig+0x78>
 800a204:	2202      	movs	r2, #2
 800a206:	e68b      	b.n	8009f20 <UART_SetConfig+0x78>
 800a208:	2202      	movs	r2, #2
 800a20a:	e689      	b.n	8009f20 <UART_SetConfig+0x78>
 800a20c:	0800e48c 	.word	0x0800e48c
 800a210:	00f42400 	.word	0x00f42400

0800a214 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a214:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a216:	f013 0f01 	tst.w	r3, #1
 800a21a:	d006      	beq.n	800a22a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a21c:	6802      	ldr	r2, [r0, #0]
 800a21e:	6853      	ldr	r3, [r2, #4]
 800a220:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a224:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a226:	430b      	orrs	r3, r1
 800a228:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a22a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a22c:	f013 0f02 	tst.w	r3, #2
 800a230:	d006      	beq.n	800a240 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a232:	6802      	ldr	r2, [r0, #0]
 800a234:	6853      	ldr	r3, [r2, #4]
 800a236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a23a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a23c:	430b      	orrs	r3, r1
 800a23e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a240:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a242:	f013 0f04 	tst.w	r3, #4
 800a246:	d006      	beq.n	800a256 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a248:	6802      	ldr	r2, [r0, #0]
 800a24a:	6853      	ldr	r3, [r2, #4]
 800a24c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a250:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a252:	430b      	orrs	r3, r1
 800a254:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a256:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a258:	f013 0f08 	tst.w	r3, #8
 800a25c:	d006      	beq.n	800a26c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a25e:	6802      	ldr	r2, [r0, #0]
 800a260:	6853      	ldr	r3, [r2, #4]
 800a262:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a266:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a268:	430b      	orrs	r3, r1
 800a26a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a26c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a26e:	f013 0f10 	tst.w	r3, #16
 800a272:	d006      	beq.n	800a282 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a274:	6802      	ldr	r2, [r0, #0]
 800a276:	6893      	ldr	r3, [r2, #8]
 800a278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a27c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a27e:	430b      	orrs	r3, r1
 800a280:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a282:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a284:	f013 0f20 	tst.w	r3, #32
 800a288:	d006      	beq.n	800a298 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a28a:	6802      	ldr	r2, [r0, #0]
 800a28c:	6893      	ldr	r3, [r2, #8]
 800a28e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a292:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a294:	430b      	orrs	r3, r1
 800a296:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a298:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a29a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a29e:	d00a      	beq.n	800a2b6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2a0:	6802      	ldr	r2, [r0, #0]
 800a2a2:	6853      	ldr	r3, [r2, #4]
 800a2a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2a8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a2b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2b4:	d00b      	beq.n	800a2ce <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a2b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a2bc:	d006      	beq.n	800a2cc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2be:	6802      	ldr	r2, [r0, #0]
 800a2c0:	6853      	ldr	r3, [r2, #4]
 800a2c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a2c6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	6053      	str	r3, [r2, #4]
}
 800a2cc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2ce:	6802      	ldr	r2, [r0, #0]
 800a2d0:	6853      	ldr	r3, [r2, #4]
 800a2d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a2d6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	6053      	str	r3, [r2, #4]
 800a2dc:	e7eb      	b.n	800a2b6 <UART_AdvFeatureConfig+0xa2>

0800a2de <UART_WaitOnFlagUntilTimeout>:
{
 800a2de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	460e      	mov	r6, r1
 800a2e6:	4615      	mov	r5, r2
 800a2e8:	4699      	mov	r9, r3
 800a2ea:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a2f0:	69dc      	ldr	r4, [r3, #28]
 800a2f2:	ea36 0404 	bics.w	r4, r6, r4
 800a2f6:	bf0c      	ite	eq
 800a2f8:	2401      	moveq	r4, #1
 800a2fa:	2400      	movne	r4, #0
 800a2fc:	42ac      	cmp	r4, r5
 800a2fe:	d15a      	bne.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 800a300:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a304:	d0f4      	beq.n	800a2f0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a306:	f7fb f87b 	bl	8005400 <HAL_GetTick>
 800a30a:	eba0 0009 	sub.w	r0, r0, r9
 800a30e:	42b8      	cmp	r0, r7
 800a310:	d830      	bhi.n	800a374 <UART_WaitOnFlagUntilTimeout+0x96>
 800a312:	b37f      	cbz	r7, 800a374 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a314:	f8d8 3000 	ldr.w	r3, [r8]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	f012 0f04 	tst.w	r2, #4
 800a31e:	d0e5      	beq.n	800a2ec <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a320:	69da      	ldr	r2, [r3, #28]
 800a322:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a326:	d0e1      	beq.n	800a2ec <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a32c:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a32e:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a332:	e852 3f00 	ldrex	r3, [r2]
 800a336:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	e842 3100 	strex	r1, r3, [r2]
 800a33e:	2900      	cmp	r1, #0
 800a340:	d1f5      	bne.n	800a32e <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a342:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	f102 0308 	add.w	r3, r2, #8
 800a34a:	e853 3f00 	ldrex	r3, [r3]
 800a34e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a352:	3208      	adds	r2, #8
 800a354:	e842 3100 	strex	r1, r3, [r2]
 800a358:	2900      	cmp	r1, #0
 800a35a:	d1f2      	bne.n	800a342 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800a35c:	2320      	movs	r3, #32
 800a35e:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a362:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a366:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800a36a:	2300      	movs	r3, #0
 800a36c:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 800a370:	2003      	movs	r0, #3
 800a372:	e021      	b.n	800a3b8 <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a374:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	e852 3f00 	ldrex	r3, [r2]
 800a37c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	e842 3100 	strex	r1, r3, [r2]
 800a384:	2900      	cmp	r1, #0
 800a386:	d1f5      	bne.n	800a374 <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a388:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38c:	f102 0308 	add.w	r3, r2, #8
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a398:	3208      	adds	r2, #8
 800a39a:	e842 3100 	strex	r1, r3, [r2]
 800a39e:	2900      	cmp	r1, #0
 800a3a0:	d1f2      	bne.n	800a388 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800a3a2:	2320      	movs	r3, #32
 800a3a4:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a3a8:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 800a3b2:	2003      	movs	r0, #3
 800a3b4:	e000      	b.n	800a3b8 <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 800a3b6:	2000      	movs	r0, #0
}
 800a3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a3bc <UART_CheckIdleState>:
{
 800a3bc:	b530      	push	{r4, r5, lr}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a3c8:	f7fb f81a 	bl	8005400 <HAL_GetTick>
 800a3cc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3ce:	6822      	ldr	r2, [r4, #0]
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	f012 0f08 	tst.w	r2, #8
 800a3d6:	d10f      	bne.n	800a3f8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f013 0f04 	tst.w	r3, #4
 800a3e0:	d118      	bne.n	800a414 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800a3e2:	2320      	movs	r3, #32
 800a3e4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a3e8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800a3f0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a3f4:	b003      	add	sp, #12
 800a3f6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	4603      	mov	r3, r0
 800a400:	2200      	movs	r2, #0
 800a402:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a406:	4620      	mov	r0, r4
 800a408:	f7ff ff69 	bl	800a2de <UART_WaitOnFlagUntilTimeout>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d0e3      	beq.n	800a3d8 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800a410:	2003      	movs	r0, #3
 800a412:	e7ef      	b.n	800a3f4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	462b      	mov	r3, r5
 800a41c:	2200      	movs	r2, #0
 800a41e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a422:	4620      	mov	r0, r4
 800a424:	f7ff ff5b 	bl	800a2de <UART_WaitOnFlagUntilTimeout>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d0da      	beq.n	800a3e2 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800a42c:	2003      	movs	r0, #3
 800a42e:	e7e1      	b.n	800a3f4 <UART_CheckIdleState+0x38>

0800a430 <HAL_UART_Init>:
  if (huart == NULL)
 800a430:	b378      	cbz	r0, 800a492 <HAL_UART_Init+0x62>
{
 800a432:	b510      	push	{r4, lr}
 800a434:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a436:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a43a:	b30b      	cbz	r3, 800a480 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a43c:	2324      	movs	r3, #36	; 0x24
 800a43e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	6813      	ldr	r3, [r2, #0]
 800a446:	f023 0301 	bic.w	r3, r3, #1
 800a44a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a44c:	4620      	mov	r0, r4
 800a44e:	f7ff fd2b 	bl	8009ea8 <UART_SetConfig>
 800a452:	2801      	cmp	r0, #1
 800a454:	d013      	beq.n	800a47e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a458:	b9bb      	cbnz	r3, 800a48a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a45a:	6822      	ldr	r2, [r4, #0]
 800a45c:	6853      	ldr	r3, [r2, #4]
 800a45e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a462:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	6893      	ldr	r3, [r2, #8]
 800a468:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a46c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a46e:	6822      	ldr	r2, [r4, #0]
 800a470:	6813      	ldr	r3, [r2, #0]
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a478:	4620      	mov	r0, r4
 800a47a:	f7ff ff9f 	bl	800a3bc <UART_CheckIdleState>
}
 800a47e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a480:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a484:	f7fa fee6 	bl	8005254 <HAL_UART_MspInit>
 800a488:	e7d8      	b.n	800a43c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a48a:	4620      	mov	r0, r4
 800a48c:	f7ff fec2 	bl	800a214 <UART_AdvFeatureConfig>
 800a490:	e7e3      	b.n	800a45a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a492:	2001      	movs	r0, #1
}
 800a494:	4770      	bx	lr
	...

0800a498 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a498:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a49a:	b92b      	cbnz	r3, 800a4a8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4a2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800a4a6:	4770      	bx	lr
{
 800a4a8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4aa:	6803      	ldr	r3, [r0, #0]
 800a4ac:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4ae:	6899      	ldr	r1, [r3, #8]
 800a4b0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4b2:	4d0a      	ldr	r5, [pc, #40]	; (800a4dc <UARTEx_SetNbDataToProcess+0x44>)
 800a4b4:	5c6b      	ldrb	r3, [r5, r1]
 800a4b6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4b8:	4c09      	ldr	r4, [pc, #36]	; (800a4e0 <UARTEx_SetNbDataToProcess+0x48>)
 800a4ba:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4bc:	fb93 f3f1 	sdiv	r3, r3, r1
 800a4c0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4c4:	f3c2 6242 	ubfx	r2, r2, #25, #3
 800a4c8:	5cab      	ldrb	r3, [r5, r2]
 800a4ca:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4cc:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4ce:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 800a4d2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800a4d6:	bc30      	pop	{r4, r5}
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	0800e4ac 	.word	0x0800e4ac
 800a4e0:	0800e4a4 	.word	0x0800e4a4

0800a4e4 <HAL_UARTEx_WakeupCallback>:
}
 800a4e4:	4770      	bx	lr

0800a4e6 <HAL_UARTEx_RxFifoFullCallback>:
}
 800a4e6:	4770      	bx	lr

0800a4e8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800a4e8:	4770      	bx	lr

0800a4ea <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800a4ea:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d018      	beq.n	800a524 <HAL_UARTEx_DisableFifoMode+0x3a>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a4f8:	2324      	movs	r3, #36	; 0x24
 800a4fa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4fe:	6803      	ldr	r3, [r0, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a502:	6819      	ldr	r1, [r3, #0]
 800a504:	f021 0101 	bic.w	r1, r1, #1
 800a508:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a50a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a50e:	2300      	movs	r3, #0
 800a510:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a512:	6801      	ldr	r1, [r0, #0]
 800a514:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a516:	2220      	movs	r2, #32
 800a518:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a51c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800a520:	4618      	mov	r0, r3
 800a522:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a524:	2002      	movs	r0, #2
}
 800a526:	4770      	bx	lr

0800a528 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800a528:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a52a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d01d      	beq.n	800a56e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800a532:	4604      	mov	r4, r0
 800a534:	2301      	movs	r3, #1
 800a536:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a53a:	2324      	movs	r3, #36	; 0x24
 800a53c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a540:	6803      	ldr	r3, [r0, #0]
 800a542:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	f022 0201 	bic.w	r2, r2, #1
 800a54a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a54c:	6802      	ldr	r2, [r0, #0]
 800a54e:	6893      	ldr	r3, [r2, #8]
 800a550:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a554:	4319      	orrs	r1, r3
 800a556:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a558:	f7ff ff9e 	bl	800a498 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a560:	2320      	movs	r3, #32
 800a562:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a566:	2000      	movs	r0, #0
 800a568:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a56e:	2002      	movs	r0, #2
 800a570:	e7fc      	b.n	800a56c <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800a572 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800a572:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a574:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d01d      	beq.n	800a5b8 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800a57c:	4604      	mov	r4, r0
 800a57e:	2301      	movs	r3, #1
 800a580:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a584:	2324      	movs	r3, #36	; 0x24
 800a586:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a58a:	6803      	ldr	r3, [r0, #0]
 800a58c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	f022 0201 	bic.w	r2, r2, #1
 800a594:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a596:	6802      	ldr	r2, [r0, #0]
 800a598:	6893      	ldr	r3, [r2, #8]
 800a59a:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800a59e:	4319      	orrs	r1, r3
 800a5a0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a5a2:	f7ff ff79 	bl	800a498 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a5aa:	2320      	movs	r3, #32
 800a5ac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a5b8:	2002      	movs	r0, #2
 800a5ba:	e7fc      	b.n	800a5b6 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800a5bc <__cvt>:
 800a5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	ec55 4b10 	vmov	r4, r5, d0
 800a5c4:	2d00      	cmp	r5, #0
 800a5c6:	460e      	mov	r6, r1
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	462b      	mov	r3, r5
 800a5cc:	bfbb      	ittet	lt
 800a5ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a5d2:	461d      	movlt	r5, r3
 800a5d4:	2300      	movge	r3, #0
 800a5d6:	232d      	movlt	r3, #45	; 0x2d
 800a5d8:	700b      	strb	r3, [r1, #0]
 800a5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a5e0:	4691      	mov	r9, r2
 800a5e2:	f023 0820 	bic.w	r8, r3, #32
 800a5e6:	bfbc      	itt	lt
 800a5e8:	4622      	movlt	r2, r4
 800a5ea:	4614      	movlt	r4, r2
 800a5ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5f0:	d005      	beq.n	800a5fe <__cvt+0x42>
 800a5f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5f6:	d100      	bne.n	800a5fa <__cvt+0x3e>
 800a5f8:	3601      	adds	r6, #1
 800a5fa:	2102      	movs	r1, #2
 800a5fc:	e000      	b.n	800a600 <__cvt+0x44>
 800a5fe:	2103      	movs	r1, #3
 800a600:	ab03      	add	r3, sp, #12
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	ab02      	add	r3, sp, #8
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	ec45 4b10 	vmov	d0, r4, r5
 800a60c:	4653      	mov	r3, sl
 800a60e:	4632      	mov	r2, r6
 800a610:	f000 fe9e 	bl	800b350 <_dtoa_r>
 800a614:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a618:	4607      	mov	r7, r0
 800a61a:	d102      	bne.n	800a622 <__cvt+0x66>
 800a61c:	f019 0f01 	tst.w	r9, #1
 800a620:	d022      	beq.n	800a668 <__cvt+0xac>
 800a622:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a626:	eb07 0906 	add.w	r9, r7, r6
 800a62a:	d110      	bne.n	800a64e <__cvt+0x92>
 800a62c:	783b      	ldrb	r3, [r7, #0]
 800a62e:	2b30      	cmp	r3, #48	; 0x30
 800a630:	d10a      	bne.n	800a648 <__cvt+0x8c>
 800a632:	2200      	movs	r2, #0
 800a634:	2300      	movs	r3, #0
 800a636:	4620      	mov	r0, r4
 800a638:	4629      	mov	r1, r5
 800a63a:	f7f6 fa6d 	bl	8000b18 <__aeabi_dcmpeq>
 800a63e:	b918      	cbnz	r0, 800a648 <__cvt+0x8c>
 800a640:	f1c6 0601 	rsb	r6, r6, #1
 800a644:	f8ca 6000 	str.w	r6, [sl]
 800a648:	f8da 3000 	ldr.w	r3, [sl]
 800a64c:	4499      	add	r9, r3
 800a64e:	2200      	movs	r2, #0
 800a650:	2300      	movs	r3, #0
 800a652:	4620      	mov	r0, r4
 800a654:	4629      	mov	r1, r5
 800a656:	f7f6 fa5f 	bl	8000b18 <__aeabi_dcmpeq>
 800a65a:	b108      	cbz	r0, 800a660 <__cvt+0xa4>
 800a65c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a660:	2230      	movs	r2, #48	; 0x30
 800a662:	9b03      	ldr	r3, [sp, #12]
 800a664:	454b      	cmp	r3, r9
 800a666:	d307      	bcc.n	800a678 <__cvt+0xbc>
 800a668:	9b03      	ldr	r3, [sp, #12]
 800a66a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a66c:	1bdb      	subs	r3, r3, r7
 800a66e:	4638      	mov	r0, r7
 800a670:	6013      	str	r3, [r2, #0]
 800a672:	b004      	add	sp, #16
 800a674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a678:	1c59      	adds	r1, r3, #1
 800a67a:	9103      	str	r1, [sp, #12]
 800a67c:	701a      	strb	r2, [r3, #0]
 800a67e:	e7f0      	b.n	800a662 <__cvt+0xa6>

0800a680 <__exponent>:
 800a680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a682:	4603      	mov	r3, r0
 800a684:	2900      	cmp	r1, #0
 800a686:	bfb8      	it	lt
 800a688:	4249      	neglt	r1, r1
 800a68a:	f803 2b02 	strb.w	r2, [r3], #2
 800a68e:	bfb4      	ite	lt
 800a690:	222d      	movlt	r2, #45	; 0x2d
 800a692:	222b      	movge	r2, #43	; 0x2b
 800a694:	2909      	cmp	r1, #9
 800a696:	7042      	strb	r2, [r0, #1]
 800a698:	dd2a      	ble.n	800a6f0 <__exponent+0x70>
 800a69a:	f10d 0207 	add.w	r2, sp, #7
 800a69e:	4617      	mov	r7, r2
 800a6a0:	260a      	movs	r6, #10
 800a6a2:	4694      	mov	ip, r2
 800a6a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800a6a8:	fb06 1415 	mls	r4, r6, r5, r1
 800a6ac:	3430      	adds	r4, #48	; 0x30
 800a6ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	2c63      	cmp	r4, #99	; 0x63
 800a6b6:	f102 32ff 	add.w	r2, r2, #4294967295
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	dcf1      	bgt.n	800a6a2 <__exponent+0x22>
 800a6be:	3130      	adds	r1, #48	; 0x30
 800a6c0:	f1ac 0402 	sub.w	r4, ip, #2
 800a6c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a6c8:	1c41      	adds	r1, r0, #1
 800a6ca:	4622      	mov	r2, r4
 800a6cc:	42ba      	cmp	r2, r7
 800a6ce:	d30a      	bcc.n	800a6e6 <__exponent+0x66>
 800a6d0:	f10d 0209 	add.w	r2, sp, #9
 800a6d4:	eba2 020c 	sub.w	r2, r2, ip
 800a6d8:	42bc      	cmp	r4, r7
 800a6da:	bf88      	it	hi
 800a6dc:	2200      	movhi	r2, #0
 800a6de:	4413      	add	r3, r2
 800a6e0:	1a18      	subs	r0, r3, r0
 800a6e2:	b003      	add	sp, #12
 800a6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a6ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a6ee:	e7ed      	b.n	800a6cc <__exponent+0x4c>
 800a6f0:	2330      	movs	r3, #48	; 0x30
 800a6f2:	3130      	adds	r1, #48	; 0x30
 800a6f4:	7083      	strb	r3, [r0, #2]
 800a6f6:	70c1      	strb	r1, [r0, #3]
 800a6f8:	1d03      	adds	r3, r0, #4
 800a6fa:	e7f1      	b.n	800a6e0 <__exponent+0x60>

0800a6fc <_printf_float>:
 800a6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a700:	ed2d 8b02 	vpush	{d8}
 800a704:	b08d      	sub	sp, #52	; 0x34
 800a706:	460c      	mov	r4, r1
 800a708:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a70c:	4616      	mov	r6, r2
 800a70e:	461f      	mov	r7, r3
 800a710:	4605      	mov	r5, r0
 800a712:	f000 fd0f 	bl	800b134 <_localeconv_r>
 800a716:	f8d0 a000 	ldr.w	sl, [r0]
 800a71a:	4650      	mov	r0, sl
 800a71c:	f7f5 fdd0 	bl	80002c0 <strlen>
 800a720:	2300      	movs	r3, #0
 800a722:	930a      	str	r3, [sp, #40]	; 0x28
 800a724:	6823      	ldr	r3, [r4, #0]
 800a726:	9305      	str	r3, [sp, #20]
 800a728:	f8d8 3000 	ldr.w	r3, [r8]
 800a72c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a730:	3307      	adds	r3, #7
 800a732:	f023 0307 	bic.w	r3, r3, #7
 800a736:	f103 0208 	add.w	r2, r3, #8
 800a73a:	f8c8 2000 	str.w	r2, [r8]
 800a73e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a746:	9307      	str	r3, [sp, #28]
 800a748:	f8cd 8018 	str.w	r8, [sp, #24]
 800a74c:	ee08 0a10 	vmov	s16, r0
 800a750:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a758:	4b9e      	ldr	r3, [pc, #632]	; (800a9d4 <_printf_float+0x2d8>)
 800a75a:	f04f 32ff 	mov.w	r2, #4294967295
 800a75e:	f7f6 fa0d 	bl	8000b7c <__aeabi_dcmpun>
 800a762:	bb88      	cbnz	r0, 800a7c8 <_printf_float+0xcc>
 800a764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a768:	4b9a      	ldr	r3, [pc, #616]	; (800a9d4 <_printf_float+0x2d8>)
 800a76a:	f04f 32ff 	mov.w	r2, #4294967295
 800a76e:	f7f6 f9e7 	bl	8000b40 <__aeabi_dcmple>
 800a772:	bb48      	cbnz	r0, 800a7c8 <_printf_float+0xcc>
 800a774:	2200      	movs	r2, #0
 800a776:	2300      	movs	r3, #0
 800a778:	4640      	mov	r0, r8
 800a77a:	4649      	mov	r1, r9
 800a77c:	f7f6 f9d6 	bl	8000b2c <__aeabi_dcmplt>
 800a780:	b110      	cbz	r0, 800a788 <_printf_float+0x8c>
 800a782:	232d      	movs	r3, #45	; 0x2d
 800a784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a788:	4a93      	ldr	r2, [pc, #588]	; (800a9d8 <_printf_float+0x2dc>)
 800a78a:	4b94      	ldr	r3, [pc, #592]	; (800a9dc <_printf_float+0x2e0>)
 800a78c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a790:	bf94      	ite	ls
 800a792:	4690      	movls	r8, r2
 800a794:	4698      	movhi	r8, r3
 800a796:	2303      	movs	r3, #3
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	9b05      	ldr	r3, [sp, #20]
 800a79c:	f023 0304 	bic.w	r3, r3, #4
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	f04f 0900 	mov.w	r9, #0
 800a7a6:	9700      	str	r7, [sp, #0]
 800a7a8:	4633      	mov	r3, r6
 800a7aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f000 f9da 	bl	800ab68 <_printf_common>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	f040 8090 	bne.w	800a8da <_printf_float+0x1de>
 800a7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a7be:	b00d      	add	sp, #52	; 0x34
 800a7c0:	ecbd 8b02 	vpop	{d8}
 800a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	4640      	mov	r0, r8
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	f7f6 f9d4 	bl	8000b7c <__aeabi_dcmpun>
 800a7d4:	b140      	cbz	r0, 800a7e8 <_printf_float+0xec>
 800a7d6:	464b      	mov	r3, r9
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfbc      	itt	lt
 800a7dc:	232d      	movlt	r3, #45	; 0x2d
 800a7de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a7e2:	4a7f      	ldr	r2, [pc, #508]	; (800a9e0 <_printf_float+0x2e4>)
 800a7e4:	4b7f      	ldr	r3, [pc, #508]	; (800a9e4 <_printf_float+0x2e8>)
 800a7e6:	e7d1      	b.n	800a78c <_printf_float+0x90>
 800a7e8:	6863      	ldr	r3, [r4, #4]
 800a7ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a7ee:	9206      	str	r2, [sp, #24]
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	d13f      	bne.n	800a874 <_printf_float+0x178>
 800a7f4:	2306      	movs	r3, #6
 800a7f6:	6063      	str	r3, [r4, #4]
 800a7f8:	9b05      	ldr	r3, [sp, #20]
 800a7fa:	6861      	ldr	r1, [r4, #4]
 800a7fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a800:	2300      	movs	r3, #0
 800a802:	9303      	str	r3, [sp, #12]
 800a804:	ab0a      	add	r3, sp, #40	; 0x28
 800a806:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a80a:	ab09      	add	r3, sp, #36	; 0x24
 800a80c:	ec49 8b10 	vmov	d0, r8, r9
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	6022      	str	r2, [r4, #0]
 800a814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a818:	4628      	mov	r0, r5
 800a81a:	f7ff fecf 	bl	800a5bc <__cvt>
 800a81e:	9b06      	ldr	r3, [sp, #24]
 800a820:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a822:	2b47      	cmp	r3, #71	; 0x47
 800a824:	4680      	mov	r8, r0
 800a826:	d108      	bne.n	800a83a <_printf_float+0x13e>
 800a828:	1cc8      	adds	r0, r1, #3
 800a82a:	db02      	blt.n	800a832 <_printf_float+0x136>
 800a82c:	6863      	ldr	r3, [r4, #4]
 800a82e:	4299      	cmp	r1, r3
 800a830:	dd41      	ble.n	800a8b6 <_printf_float+0x1ba>
 800a832:	f1ab 0302 	sub.w	r3, fp, #2
 800a836:	fa5f fb83 	uxtb.w	fp, r3
 800a83a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a83e:	d820      	bhi.n	800a882 <_printf_float+0x186>
 800a840:	3901      	subs	r1, #1
 800a842:	465a      	mov	r2, fp
 800a844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a848:	9109      	str	r1, [sp, #36]	; 0x24
 800a84a:	f7ff ff19 	bl	800a680 <__exponent>
 800a84e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a850:	1813      	adds	r3, r2, r0
 800a852:	2a01      	cmp	r2, #1
 800a854:	4681      	mov	r9, r0
 800a856:	6123      	str	r3, [r4, #16]
 800a858:	dc02      	bgt.n	800a860 <_printf_float+0x164>
 800a85a:	6822      	ldr	r2, [r4, #0]
 800a85c:	07d2      	lsls	r2, r2, #31
 800a85e:	d501      	bpl.n	800a864 <_printf_float+0x168>
 800a860:	3301      	adds	r3, #1
 800a862:	6123      	str	r3, [r4, #16]
 800a864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d09c      	beq.n	800a7a6 <_printf_float+0xaa>
 800a86c:	232d      	movs	r3, #45	; 0x2d
 800a86e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a872:	e798      	b.n	800a7a6 <_printf_float+0xaa>
 800a874:	9a06      	ldr	r2, [sp, #24]
 800a876:	2a47      	cmp	r2, #71	; 0x47
 800a878:	d1be      	bne.n	800a7f8 <_printf_float+0xfc>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1bc      	bne.n	800a7f8 <_printf_float+0xfc>
 800a87e:	2301      	movs	r3, #1
 800a880:	e7b9      	b.n	800a7f6 <_printf_float+0xfa>
 800a882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a886:	d118      	bne.n	800a8ba <_printf_float+0x1be>
 800a888:	2900      	cmp	r1, #0
 800a88a:	6863      	ldr	r3, [r4, #4]
 800a88c:	dd0b      	ble.n	800a8a6 <_printf_float+0x1aa>
 800a88e:	6121      	str	r1, [r4, #16]
 800a890:	b913      	cbnz	r3, 800a898 <_printf_float+0x19c>
 800a892:	6822      	ldr	r2, [r4, #0]
 800a894:	07d0      	lsls	r0, r2, #31
 800a896:	d502      	bpl.n	800a89e <_printf_float+0x1a2>
 800a898:	3301      	adds	r3, #1
 800a89a:	440b      	add	r3, r1
 800a89c:	6123      	str	r3, [r4, #16]
 800a89e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a8a0:	f04f 0900 	mov.w	r9, #0
 800a8a4:	e7de      	b.n	800a864 <_printf_float+0x168>
 800a8a6:	b913      	cbnz	r3, 800a8ae <_printf_float+0x1b2>
 800a8a8:	6822      	ldr	r2, [r4, #0]
 800a8aa:	07d2      	lsls	r2, r2, #31
 800a8ac:	d501      	bpl.n	800a8b2 <_printf_float+0x1b6>
 800a8ae:	3302      	adds	r3, #2
 800a8b0:	e7f4      	b.n	800a89c <_printf_float+0x1a0>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e7f2      	b.n	800a89c <_printf_float+0x1a0>
 800a8b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8bc:	4299      	cmp	r1, r3
 800a8be:	db05      	blt.n	800a8cc <_printf_float+0x1d0>
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	6121      	str	r1, [r4, #16]
 800a8c4:	07d8      	lsls	r0, r3, #31
 800a8c6:	d5ea      	bpl.n	800a89e <_printf_float+0x1a2>
 800a8c8:	1c4b      	adds	r3, r1, #1
 800a8ca:	e7e7      	b.n	800a89c <_printf_float+0x1a0>
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	bfd4      	ite	le
 800a8d0:	f1c1 0202 	rsble	r2, r1, #2
 800a8d4:	2201      	movgt	r2, #1
 800a8d6:	4413      	add	r3, r2
 800a8d8:	e7e0      	b.n	800a89c <_printf_float+0x1a0>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	055a      	lsls	r2, r3, #21
 800a8de:	d407      	bmi.n	800a8f0 <_printf_float+0x1f4>
 800a8e0:	6923      	ldr	r3, [r4, #16]
 800a8e2:	4642      	mov	r2, r8
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	47b8      	blx	r7
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	d12c      	bne.n	800a948 <_printf_float+0x24c>
 800a8ee:	e764      	b.n	800a7ba <_printf_float+0xbe>
 800a8f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8f4:	f240 80e0 	bls.w	800aab8 <_printf_float+0x3bc>
 800a8f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2300      	movs	r3, #0
 800a900:	f7f6 f90a 	bl	8000b18 <__aeabi_dcmpeq>
 800a904:	2800      	cmp	r0, #0
 800a906:	d034      	beq.n	800a972 <_printf_float+0x276>
 800a908:	4a37      	ldr	r2, [pc, #220]	; (800a9e8 <_printf_float+0x2ec>)
 800a90a:	2301      	movs	r3, #1
 800a90c:	4631      	mov	r1, r6
 800a90e:	4628      	mov	r0, r5
 800a910:	47b8      	blx	r7
 800a912:	3001      	adds	r0, #1
 800a914:	f43f af51 	beq.w	800a7ba <_printf_float+0xbe>
 800a918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a91c:	429a      	cmp	r2, r3
 800a91e:	db02      	blt.n	800a926 <_printf_float+0x22a>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	07d8      	lsls	r0, r3, #31
 800a924:	d510      	bpl.n	800a948 <_printf_float+0x24c>
 800a926:	ee18 3a10 	vmov	r3, s16
 800a92a:	4652      	mov	r2, sl
 800a92c:	4631      	mov	r1, r6
 800a92e:	4628      	mov	r0, r5
 800a930:	47b8      	blx	r7
 800a932:	3001      	adds	r0, #1
 800a934:	f43f af41 	beq.w	800a7ba <_printf_float+0xbe>
 800a938:	f04f 0800 	mov.w	r8, #0
 800a93c:	f104 091a 	add.w	r9, r4, #26
 800a940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a942:	3b01      	subs	r3, #1
 800a944:	4543      	cmp	r3, r8
 800a946:	dc09      	bgt.n	800a95c <_printf_float+0x260>
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	079b      	lsls	r3, r3, #30
 800a94c:	f100 8107 	bmi.w	800ab5e <_printf_float+0x462>
 800a950:	68e0      	ldr	r0, [r4, #12]
 800a952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a954:	4298      	cmp	r0, r3
 800a956:	bfb8      	it	lt
 800a958:	4618      	movlt	r0, r3
 800a95a:	e730      	b.n	800a7be <_printf_float+0xc2>
 800a95c:	2301      	movs	r3, #1
 800a95e:	464a      	mov	r2, r9
 800a960:	4631      	mov	r1, r6
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	f43f af27 	beq.w	800a7ba <_printf_float+0xbe>
 800a96c:	f108 0801 	add.w	r8, r8, #1
 800a970:	e7e6      	b.n	800a940 <_printf_float+0x244>
 800a972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	dc39      	bgt.n	800a9ec <_printf_float+0x2f0>
 800a978:	4a1b      	ldr	r2, [pc, #108]	; (800a9e8 <_printf_float+0x2ec>)
 800a97a:	2301      	movs	r3, #1
 800a97c:	4631      	mov	r1, r6
 800a97e:	4628      	mov	r0, r5
 800a980:	47b8      	blx	r7
 800a982:	3001      	adds	r0, #1
 800a984:	f43f af19 	beq.w	800a7ba <_printf_float+0xbe>
 800a988:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a98c:	4313      	orrs	r3, r2
 800a98e:	d102      	bne.n	800a996 <_printf_float+0x29a>
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	07d9      	lsls	r1, r3, #31
 800a994:	d5d8      	bpl.n	800a948 <_printf_float+0x24c>
 800a996:	ee18 3a10 	vmov	r3, s16
 800a99a:	4652      	mov	r2, sl
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f af09 	beq.w	800a7ba <_printf_float+0xbe>
 800a9a8:	f04f 0900 	mov.w	r9, #0
 800a9ac:	f104 0a1a 	add.w	sl, r4, #26
 800a9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b2:	425b      	negs	r3, r3
 800a9b4:	454b      	cmp	r3, r9
 800a9b6:	dc01      	bgt.n	800a9bc <_printf_float+0x2c0>
 800a9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ba:	e792      	b.n	800a8e2 <_printf_float+0x1e6>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	4652      	mov	r2, sl
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	f43f aef7 	beq.w	800a7ba <_printf_float+0xbe>
 800a9cc:	f109 0901 	add.w	r9, r9, #1
 800a9d0:	e7ee      	b.n	800a9b0 <_printf_float+0x2b4>
 800a9d2:	bf00      	nop
 800a9d4:	7fefffff 	.word	0x7fefffff
 800a9d8:	0800e4b4 	.word	0x0800e4b4
 800a9dc:	0800e4b8 	.word	0x0800e4b8
 800a9e0:	0800e4bc 	.word	0x0800e4bc
 800a9e4:	0800e4c0 	.word	0x0800e4c0
 800a9e8:	0800e4c4 	.word	0x0800e4c4
 800a9ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	bfa8      	it	ge
 800a9f4:	461a      	movge	r2, r3
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	4691      	mov	r9, r2
 800a9fa:	dc37      	bgt.n	800aa6c <_printf_float+0x370>
 800a9fc:	f04f 0b00 	mov.w	fp, #0
 800aa00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa04:	f104 021a 	add.w	r2, r4, #26
 800aa08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa0a:	9305      	str	r3, [sp, #20]
 800aa0c:	eba3 0309 	sub.w	r3, r3, r9
 800aa10:	455b      	cmp	r3, fp
 800aa12:	dc33      	bgt.n	800aa7c <_printf_float+0x380>
 800aa14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	db3b      	blt.n	800aa94 <_printf_float+0x398>
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	07da      	lsls	r2, r3, #31
 800aa20:	d438      	bmi.n	800aa94 <_printf_float+0x398>
 800aa22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa26:	eba2 0903 	sub.w	r9, r2, r3
 800aa2a:	9b05      	ldr	r3, [sp, #20]
 800aa2c:	1ad2      	subs	r2, r2, r3
 800aa2e:	4591      	cmp	r9, r2
 800aa30:	bfa8      	it	ge
 800aa32:	4691      	movge	r9, r2
 800aa34:	f1b9 0f00 	cmp.w	r9, #0
 800aa38:	dc35      	bgt.n	800aaa6 <_printf_float+0x3aa>
 800aa3a:	f04f 0800 	mov.w	r8, #0
 800aa3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa42:	f104 0a1a 	add.w	sl, r4, #26
 800aa46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa4a:	1a9b      	subs	r3, r3, r2
 800aa4c:	eba3 0309 	sub.w	r3, r3, r9
 800aa50:	4543      	cmp	r3, r8
 800aa52:	f77f af79 	ble.w	800a948 <_printf_float+0x24c>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4652      	mov	r2, sl
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	f43f aeaa 	beq.w	800a7ba <_printf_float+0xbe>
 800aa66:	f108 0801 	add.w	r8, r8, #1
 800aa6a:	e7ec      	b.n	800aa46 <_printf_float+0x34a>
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	4631      	mov	r1, r6
 800aa70:	4642      	mov	r2, r8
 800aa72:	4628      	mov	r0, r5
 800aa74:	47b8      	blx	r7
 800aa76:	3001      	adds	r0, #1
 800aa78:	d1c0      	bne.n	800a9fc <_printf_float+0x300>
 800aa7a:	e69e      	b.n	800a7ba <_printf_float+0xbe>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	9205      	str	r2, [sp, #20]
 800aa84:	47b8      	blx	r7
 800aa86:	3001      	adds	r0, #1
 800aa88:	f43f ae97 	beq.w	800a7ba <_printf_float+0xbe>
 800aa8c:	9a05      	ldr	r2, [sp, #20]
 800aa8e:	f10b 0b01 	add.w	fp, fp, #1
 800aa92:	e7b9      	b.n	800aa08 <_printf_float+0x30c>
 800aa94:	ee18 3a10 	vmov	r3, s16
 800aa98:	4652      	mov	r2, sl
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	47b8      	blx	r7
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	d1be      	bne.n	800aa22 <_printf_float+0x326>
 800aaa4:	e689      	b.n	800a7ba <_printf_float+0xbe>
 800aaa6:	9a05      	ldr	r2, [sp, #20]
 800aaa8:	464b      	mov	r3, r9
 800aaaa:	4442      	add	r2, r8
 800aaac:	4631      	mov	r1, r6
 800aaae:	4628      	mov	r0, r5
 800aab0:	47b8      	blx	r7
 800aab2:	3001      	adds	r0, #1
 800aab4:	d1c1      	bne.n	800aa3a <_printf_float+0x33e>
 800aab6:	e680      	b.n	800a7ba <_printf_float+0xbe>
 800aab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaba:	2a01      	cmp	r2, #1
 800aabc:	dc01      	bgt.n	800aac2 <_printf_float+0x3c6>
 800aabe:	07db      	lsls	r3, r3, #31
 800aac0:	d53a      	bpl.n	800ab38 <_printf_float+0x43c>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4642      	mov	r2, r8
 800aac6:	4631      	mov	r1, r6
 800aac8:	4628      	mov	r0, r5
 800aaca:	47b8      	blx	r7
 800aacc:	3001      	adds	r0, #1
 800aace:	f43f ae74 	beq.w	800a7ba <_printf_float+0xbe>
 800aad2:	ee18 3a10 	vmov	r3, s16
 800aad6:	4652      	mov	r2, sl
 800aad8:	4631      	mov	r1, r6
 800aada:	4628      	mov	r0, r5
 800aadc:	47b8      	blx	r7
 800aade:	3001      	adds	r0, #1
 800aae0:	f43f ae6b 	beq.w	800a7ba <_printf_float+0xbe>
 800aae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aae8:	2200      	movs	r2, #0
 800aaea:	2300      	movs	r3, #0
 800aaec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800aaf0:	f7f6 f812 	bl	8000b18 <__aeabi_dcmpeq>
 800aaf4:	b9d8      	cbnz	r0, 800ab2e <_printf_float+0x432>
 800aaf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aafa:	f108 0201 	add.w	r2, r8, #1
 800aafe:	4631      	mov	r1, r6
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b8      	blx	r7
 800ab04:	3001      	adds	r0, #1
 800ab06:	d10e      	bne.n	800ab26 <_printf_float+0x42a>
 800ab08:	e657      	b.n	800a7ba <_printf_float+0xbe>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	4652      	mov	r2, sl
 800ab0e:	4631      	mov	r1, r6
 800ab10:	4628      	mov	r0, r5
 800ab12:	47b8      	blx	r7
 800ab14:	3001      	adds	r0, #1
 800ab16:	f43f ae50 	beq.w	800a7ba <_printf_float+0xbe>
 800ab1a:	f108 0801 	add.w	r8, r8, #1
 800ab1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab20:	3b01      	subs	r3, #1
 800ab22:	4543      	cmp	r3, r8
 800ab24:	dcf1      	bgt.n	800ab0a <_printf_float+0x40e>
 800ab26:	464b      	mov	r3, r9
 800ab28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab2c:	e6da      	b.n	800a8e4 <_printf_float+0x1e8>
 800ab2e:	f04f 0800 	mov.w	r8, #0
 800ab32:	f104 0a1a 	add.w	sl, r4, #26
 800ab36:	e7f2      	b.n	800ab1e <_printf_float+0x422>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	4642      	mov	r2, r8
 800ab3c:	e7df      	b.n	800aafe <_printf_float+0x402>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	464a      	mov	r2, r9
 800ab42:	4631      	mov	r1, r6
 800ab44:	4628      	mov	r0, r5
 800ab46:	47b8      	blx	r7
 800ab48:	3001      	adds	r0, #1
 800ab4a:	f43f ae36 	beq.w	800a7ba <_printf_float+0xbe>
 800ab4e:	f108 0801 	add.w	r8, r8, #1
 800ab52:	68e3      	ldr	r3, [r4, #12]
 800ab54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab56:	1a5b      	subs	r3, r3, r1
 800ab58:	4543      	cmp	r3, r8
 800ab5a:	dcf0      	bgt.n	800ab3e <_printf_float+0x442>
 800ab5c:	e6f8      	b.n	800a950 <_printf_float+0x254>
 800ab5e:	f04f 0800 	mov.w	r8, #0
 800ab62:	f104 0919 	add.w	r9, r4, #25
 800ab66:	e7f4      	b.n	800ab52 <_printf_float+0x456>

0800ab68 <_printf_common>:
 800ab68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	4616      	mov	r6, r2
 800ab6e:	4699      	mov	r9, r3
 800ab70:	688a      	ldr	r2, [r1, #8]
 800ab72:	690b      	ldr	r3, [r1, #16]
 800ab74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	bfb8      	it	lt
 800ab7c:	4613      	movlt	r3, r2
 800ab7e:	6033      	str	r3, [r6, #0]
 800ab80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab84:	4607      	mov	r7, r0
 800ab86:	460c      	mov	r4, r1
 800ab88:	b10a      	cbz	r2, 800ab8e <_printf_common+0x26>
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	6033      	str	r3, [r6, #0]
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	0699      	lsls	r1, r3, #26
 800ab92:	bf42      	ittt	mi
 800ab94:	6833      	ldrmi	r3, [r6, #0]
 800ab96:	3302      	addmi	r3, #2
 800ab98:	6033      	strmi	r3, [r6, #0]
 800ab9a:	6825      	ldr	r5, [r4, #0]
 800ab9c:	f015 0506 	ands.w	r5, r5, #6
 800aba0:	d106      	bne.n	800abb0 <_printf_common+0x48>
 800aba2:	f104 0a19 	add.w	sl, r4, #25
 800aba6:	68e3      	ldr	r3, [r4, #12]
 800aba8:	6832      	ldr	r2, [r6, #0]
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	42ab      	cmp	r3, r5
 800abae:	dc26      	bgt.n	800abfe <_printf_common+0x96>
 800abb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abb4:	1e13      	subs	r3, r2, #0
 800abb6:	6822      	ldr	r2, [r4, #0]
 800abb8:	bf18      	it	ne
 800abba:	2301      	movne	r3, #1
 800abbc:	0692      	lsls	r2, r2, #26
 800abbe:	d42b      	bmi.n	800ac18 <_printf_common+0xb0>
 800abc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abc4:	4649      	mov	r1, r9
 800abc6:	4638      	mov	r0, r7
 800abc8:	47c0      	blx	r8
 800abca:	3001      	adds	r0, #1
 800abcc:	d01e      	beq.n	800ac0c <_printf_common+0xa4>
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	6922      	ldr	r2, [r4, #16]
 800abd2:	f003 0306 	and.w	r3, r3, #6
 800abd6:	2b04      	cmp	r3, #4
 800abd8:	bf02      	ittt	eq
 800abda:	68e5      	ldreq	r5, [r4, #12]
 800abdc:	6833      	ldreq	r3, [r6, #0]
 800abde:	1aed      	subeq	r5, r5, r3
 800abe0:	68a3      	ldr	r3, [r4, #8]
 800abe2:	bf0c      	ite	eq
 800abe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abe8:	2500      	movne	r5, #0
 800abea:	4293      	cmp	r3, r2
 800abec:	bfc4      	itt	gt
 800abee:	1a9b      	subgt	r3, r3, r2
 800abf0:	18ed      	addgt	r5, r5, r3
 800abf2:	2600      	movs	r6, #0
 800abf4:	341a      	adds	r4, #26
 800abf6:	42b5      	cmp	r5, r6
 800abf8:	d11a      	bne.n	800ac30 <_printf_common+0xc8>
 800abfa:	2000      	movs	r0, #0
 800abfc:	e008      	b.n	800ac10 <_printf_common+0xa8>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4652      	mov	r2, sl
 800ac02:	4649      	mov	r1, r9
 800ac04:	4638      	mov	r0, r7
 800ac06:	47c0      	blx	r8
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d103      	bne.n	800ac14 <_printf_common+0xac>
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac14:	3501      	adds	r5, #1
 800ac16:	e7c6      	b.n	800aba6 <_printf_common+0x3e>
 800ac18:	18e1      	adds	r1, r4, r3
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	2030      	movs	r0, #48	; 0x30
 800ac1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac22:	4422      	add	r2, r4
 800ac24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	e7c7      	b.n	800abc0 <_printf_common+0x58>
 800ac30:	2301      	movs	r3, #1
 800ac32:	4622      	mov	r2, r4
 800ac34:	4649      	mov	r1, r9
 800ac36:	4638      	mov	r0, r7
 800ac38:	47c0      	blx	r8
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	d0e6      	beq.n	800ac0c <_printf_common+0xa4>
 800ac3e:	3601      	adds	r6, #1
 800ac40:	e7d9      	b.n	800abf6 <_printf_common+0x8e>
	...

0800ac44 <_printf_i>:
 800ac44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	7e0f      	ldrb	r7, [r1, #24]
 800ac4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac4c:	2f78      	cmp	r7, #120	; 0x78
 800ac4e:	4691      	mov	r9, r2
 800ac50:	4680      	mov	r8, r0
 800ac52:	460c      	mov	r4, r1
 800ac54:	469a      	mov	sl, r3
 800ac56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac5a:	d807      	bhi.n	800ac6c <_printf_i+0x28>
 800ac5c:	2f62      	cmp	r7, #98	; 0x62
 800ac5e:	d80a      	bhi.n	800ac76 <_printf_i+0x32>
 800ac60:	2f00      	cmp	r7, #0
 800ac62:	f000 80d4 	beq.w	800ae0e <_printf_i+0x1ca>
 800ac66:	2f58      	cmp	r7, #88	; 0x58
 800ac68:	f000 80c0 	beq.w	800adec <_printf_i+0x1a8>
 800ac6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac74:	e03a      	b.n	800acec <_printf_i+0xa8>
 800ac76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac7a:	2b15      	cmp	r3, #21
 800ac7c:	d8f6      	bhi.n	800ac6c <_printf_i+0x28>
 800ac7e:	a101      	add	r1, pc, #4	; (adr r1, 800ac84 <_printf_i+0x40>)
 800ac80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac84:	0800acdd 	.word	0x0800acdd
 800ac88:	0800acf1 	.word	0x0800acf1
 800ac8c:	0800ac6d 	.word	0x0800ac6d
 800ac90:	0800ac6d 	.word	0x0800ac6d
 800ac94:	0800ac6d 	.word	0x0800ac6d
 800ac98:	0800ac6d 	.word	0x0800ac6d
 800ac9c:	0800acf1 	.word	0x0800acf1
 800aca0:	0800ac6d 	.word	0x0800ac6d
 800aca4:	0800ac6d 	.word	0x0800ac6d
 800aca8:	0800ac6d 	.word	0x0800ac6d
 800acac:	0800ac6d 	.word	0x0800ac6d
 800acb0:	0800adf5 	.word	0x0800adf5
 800acb4:	0800ad1d 	.word	0x0800ad1d
 800acb8:	0800adaf 	.word	0x0800adaf
 800acbc:	0800ac6d 	.word	0x0800ac6d
 800acc0:	0800ac6d 	.word	0x0800ac6d
 800acc4:	0800ae17 	.word	0x0800ae17
 800acc8:	0800ac6d 	.word	0x0800ac6d
 800accc:	0800ad1d 	.word	0x0800ad1d
 800acd0:	0800ac6d 	.word	0x0800ac6d
 800acd4:	0800ac6d 	.word	0x0800ac6d
 800acd8:	0800adb7 	.word	0x0800adb7
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	1d1a      	adds	r2, r3, #4
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	602a      	str	r2, [r5, #0]
 800ace4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ace8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acec:	2301      	movs	r3, #1
 800acee:	e09f      	b.n	800ae30 <_printf_i+0x1ec>
 800acf0:	6820      	ldr	r0, [r4, #0]
 800acf2:	682b      	ldr	r3, [r5, #0]
 800acf4:	0607      	lsls	r7, r0, #24
 800acf6:	f103 0104 	add.w	r1, r3, #4
 800acfa:	6029      	str	r1, [r5, #0]
 800acfc:	d501      	bpl.n	800ad02 <_printf_i+0xbe>
 800acfe:	681e      	ldr	r6, [r3, #0]
 800ad00:	e003      	b.n	800ad0a <_printf_i+0xc6>
 800ad02:	0646      	lsls	r6, r0, #25
 800ad04:	d5fb      	bpl.n	800acfe <_printf_i+0xba>
 800ad06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ad0a:	2e00      	cmp	r6, #0
 800ad0c:	da03      	bge.n	800ad16 <_printf_i+0xd2>
 800ad0e:	232d      	movs	r3, #45	; 0x2d
 800ad10:	4276      	negs	r6, r6
 800ad12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad16:	485a      	ldr	r0, [pc, #360]	; (800ae80 <_printf_i+0x23c>)
 800ad18:	230a      	movs	r3, #10
 800ad1a:	e012      	b.n	800ad42 <_printf_i+0xfe>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	6820      	ldr	r0, [r4, #0]
 800ad20:	1d19      	adds	r1, r3, #4
 800ad22:	6029      	str	r1, [r5, #0]
 800ad24:	0605      	lsls	r5, r0, #24
 800ad26:	d501      	bpl.n	800ad2c <_printf_i+0xe8>
 800ad28:	681e      	ldr	r6, [r3, #0]
 800ad2a:	e002      	b.n	800ad32 <_printf_i+0xee>
 800ad2c:	0641      	lsls	r1, r0, #25
 800ad2e:	d5fb      	bpl.n	800ad28 <_printf_i+0xe4>
 800ad30:	881e      	ldrh	r6, [r3, #0]
 800ad32:	4853      	ldr	r0, [pc, #332]	; (800ae80 <_printf_i+0x23c>)
 800ad34:	2f6f      	cmp	r7, #111	; 0x6f
 800ad36:	bf0c      	ite	eq
 800ad38:	2308      	moveq	r3, #8
 800ad3a:	230a      	movne	r3, #10
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad42:	6865      	ldr	r5, [r4, #4]
 800ad44:	60a5      	str	r5, [r4, #8]
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	bfa2      	ittt	ge
 800ad4a:	6821      	ldrge	r1, [r4, #0]
 800ad4c:	f021 0104 	bicge.w	r1, r1, #4
 800ad50:	6021      	strge	r1, [r4, #0]
 800ad52:	b90e      	cbnz	r6, 800ad58 <_printf_i+0x114>
 800ad54:	2d00      	cmp	r5, #0
 800ad56:	d04b      	beq.n	800adf0 <_printf_i+0x1ac>
 800ad58:	4615      	mov	r5, r2
 800ad5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ad62:	5dc7      	ldrb	r7, [r0, r7]
 800ad64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad68:	4637      	mov	r7, r6
 800ad6a:	42bb      	cmp	r3, r7
 800ad6c:	460e      	mov	r6, r1
 800ad6e:	d9f4      	bls.n	800ad5a <_printf_i+0x116>
 800ad70:	2b08      	cmp	r3, #8
 800ad72:	d10b      	bne.n	800ad8c <_printf_i+0x148>
 800ad74:	6823      	ldr	r3, [r4, #0]
 800ad76:	07de      	lsls	r6, r3, #31
 800ad78:	d508      	bpl.n	800ad8c <_printf_i+0x148>
 800ad7a:	6923      	ldr	r3, [r4, #16]
 800ad7c:	6861      	ldr	r1, [r4, #4]
 800ad7e:	4299      	cmp	r1, r3
 800ad80:	bfde      	ittt	le
 800ad82:	2330      	movle	r3, #48	; 0x30
 800ad84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad8c:	1b52      	subs	r2, r2, r5
 800ad8e:	6122      	str	r2, [r4, #16]
 800ad90:	f8cd a000 	str.w	sl, [sp]
 800ad94:	464b      	mov	r3, r9
 800ad96:	aa03      	add	r2, sp, #12
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	f7ff fee4 	bl	800ab68 <_printf_common>
 800ada0:	3001      	adds	r0, #1
 800ada2:	d14a      	bne.n	800ae3a <_printf_i+0x1f6>
 800ada4:	f04f 30ff 	mov.w	r0, #4294967295
 800ada8:	b004      	add	sp, #16
 800adaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	f043 0320 	orr.w	r3, r3, #32
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	4833      	ldr	r0, [pc, #204]	; (800ae84 <_printf_i+0x240>)
 800adb8:	2778      	movs	r7, #120	; 0x78
 800adba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	6829      	ldr	r1, [r5, #0]
 800adc2:	061f      	lsls	r7, r3, #24
 800adc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800adc8:	d402      	bmi.n	800add0 <_printf_i+0x18c>
 800adca:	065f      	lsls	r7, r3, #25
 800adcc:	bf48      	it	mi
 800adce:	b2b6      	uxthmi	r6, r6
 800add0:	07df      	lsls	r7, r3, #31
 800add2:	bf48      	it	mi
 800add4:	f043 0320 	orrmi.w	r3, r3, #32
 800add8:	6029      	str	r1, [r5, #0]
 800adda:	bf48      	it	mi
 800addc:	6023      	strmi	r3, [r4, #0]
 800adde:	b91e      	cbnz	r6, 800ade8 <_printf_i+0x1a4>
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	f023 0320 	bic.w	r3, r3, #32
 800ade6:	6023      	str	r3, [r4, #0]
 800ade8:	2310      	movs	r3, #16
 800adea:	e7a7      	b.n	800ad3c <_printf_i+0xf8>
 800adec:	4824      	ldr	r0, [pc, #144]	; (800ae80 <_printf_i+0x23c>)
 800adee:	e7e4      	b.n	800adba <_printf_i+0x176>
 800adf0:	4615      	mov	r5, r2
 800adf2:	e7bd      	b.n	800ad70 <_printf_i+0x12c>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	6826      	ldr	r6, [r4, #0]
 800adf8:	6961      	ldr	r1, [r4, #20]
 800adfa:	1d18      	adds	r0, r3, #4
 800adfc:	6028      	str	r0, [r5, #0]
 800adfe:	0635      	lsls	r5, r6, #24
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	d501      	bpl.n	800ae08 <_printf_i+0x1c4>
 800ae04:	6019      	str	r1, [r3, #0]
 800ae06:	e002      	b.n	800ae0e <_printf_i+0x1ca>
 800ae08:	0670      	lsls	r0, r6, #25
 800ae0a:	d5fb      	bpl.n	800ae04 <_printf_i+0x1c0>
 800ae0c:	8019      	strh	r1, [r3, #0]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	6123      	str	r3, [r4, #16]
 800ae12:	4615      	mov	r5, r2
 800ae14:	e7bc      	b.n	800ad90 <_printf_i+0x14c>
 800ae16:	682b      	ldr	r3, [r5, #0]
 800ae18:	1d1a      	adds	r2, r3, #4
 800ae1a:	602a      	str	r2, [r5, #0]
 800ae1c:	681d      	ldr	r5, [r3, #0]
 800ae1e:	6862      	ldr	r2, [r4, #4]
 800ae20:	2100      	movs	r1, #0
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7f5 f9fc 	bl	8000220 <memchr>
 800ae28:	b108      	cbz	r0, 800ae2e <_printf_i+0x1ea>
 800ae2a:	1b40      	subs	r0, r0, r5
 800ae2c:	6060      	str	r0, [r4, #4]
 800ae2e:	6863      	ldr	r3, [r4, #4]
 800ae30:	6123      	str	r3, [r4, #16]
 800ae32:	2300      	movs	r3, #0
 800ae34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae38:	e7aa      	b.n	800ad90 <_printf_i+0x14c>
 800ae3a:	6923      	ldr	r3, [r4, #16]
 800ae3c:	462a      	mov	r2, r5
 800ae3e:	4649      	mov	r1, r9
 800ae40:	4640      	mov	r0, r8
 800ae42:	47d0      	blx	sl
 800ae44:	3001      	adds	r0, #1
 800ae46:	d0ad      	beq.n	800ada4 <_printf_i+0x160>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	079b      	lsls	r3, r3, #30
 800ae4c:	d413      	bmi.n	800ae76 <_printf_i+0x232>
 800ae4e:	68e0      	ldr	r0, [r4, #12]
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	4298      	cmp	r0, r3
 800ae54:	bfb8      	it	lt
 800ae56:	4618      	movlt	r0, r3
 800ae58:	e7a6      	b.n	800ada8 <_printf_i+0x164>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	4632      	mov	r2, r6
 800ae5e:	4649      	mov	r1, r9
 800ae60:	4640      	mov	r0, r8
 800ae62:	47d0      	blx	sl
 800ae64:	3001      	adds	r0, #1
 800ae66:	d09d      	beq.n	800ada4 <_printf_i+0x160>
 800ae68:	3501      	adds	r5, #1
 800ae6a:	68e3      	ldr	r3, [r4, #12]
 800ae6c:	9903      	ldr	r1, [sp, #12]
 800ae6e:	1a5b      	subs	r3, r3, r1
 800ae70:	42ab      	cmp	r3, r5
 800ae72:	dcf2      	bgt.n	800ae5a <_printf_i+0x216>
 800ae74:	e7eb      	b.n	800ae4e <_printf_i+0x20a>
 800ae76:	2500      	movs	r5, #0
 800ae78:	f104 0619 	add.w	r6, r4, #25
 800ae7c:	e7f5      	b.n	800ae6a <_printf_i+0x226>
 800ae7e:	bf00      	nop
 800ae80:	0800e4c6 	.word	0x0800e4c6
 800ae84:	0800e4d7 	.word	0x0800e4d7

0800ae88 <std>:
 800ae88:	2300      	movs	r3, #0
 800ae8a:	b510      	push	{r4, lr}
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae96:	6083      	str	r3, [r0, #8]
 800ae98:	8181      	strh	r1, [r0, #12]
 800ae9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae9c:	81c2      	strh	r2, [r0, #14]
 800ae9e:	6183      	str	r3, [r0, #24]
 800aea0:	4619      	mov	r1, r3
 800aea2:	2208      	movs	r2, #8
 800aea4:	305c      	adds	r0, #92	; 0x5c
 800aea6:	f000 f93d 	bl	800b124 <memset>
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <std+0x58>)
 800aeac:	6263      	str	r3, [r4, #36]	; 0x24
 800aeae:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <std+0x5c>)
 800aeb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeb2:	4b0d      	ldr	r3, [pc, #52]	; (800aee8 <std+0x60>)
 800aeb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aeb6:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <std+0x64>)
 800aeb8:	6323      	str	r3, [r4, #48]	; 0x30
 800aeba:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <std+0x68>)
 800aebc:	6224      	str	r4, [r4, #32]
 800aebe:	429c      	cmp	r4, r3
 800aec0:	d006      	beq.n	800aed0 <std+0x48>
 800aec2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aec6:	4294      	cmp	r4, r2
 800aec8:	d002      	beq.n	800aed0 <std+0x48>
 800aeca:	33d0      	adds	r3, #208	; 0xd0
 800aecc:	429c      	cmp	r4, r3
 800aece:	d105      	bne.n	800aedc <std+0x54>
 800aed0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed8:	f000 b9a0 	b.w	800b21c <__retarget_lock_init_recursive>
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	bf00      	nop
 800aee0:	0800b00d 	.word	0x0800b00d
 800aee4:	0800b02f 	.word	0x0800b02f
 800aee8:	0800b067 	.word	0x0800b067
 800aeec:	0800b08b 	.word	0x0800b08b
 800aef0:	20001d7c 	.word	0x20001d7c

0800aef4 <stdio_exit_handler>:
 800aef4:	4a02      	ldr	r2, [pc, #8]	; (800af00 <stdio_exit_handler+0xc>)
 800aef6:	4903      	ldr	r1, [pc, #12]	; (800af04 <stdio_exit_handler+0x10>)
 800aef8:	4803      	ldr	r0, [pc, #12]	; (800af08 <stdio_exit_handler+0x14>)
 800aefa:	f000 b869 	b.w	800afd0 <_fwalk_sglue>
 800aefe:	bf00      	nop
 800af00:	2000058c 	.word	0x2000058c
 800af04:	0800cbe9 	.word	0x0800cbe9
 800af08:	20000598 	.word	0x20000598

0800af0c <cleanup_stdio>:
 800af0c:	6841      	ldr	r1, [r0, #4]
 800af0e:	4b0c      	ldr	r3, [pc, #48]	; (800af40 <cleanup_stdio+0x34>)
 800af10:	4299      	cmp	r1, r3
 800af12:	b510      	push	{r4, lr}
 800af14:	4604      	mov	r4, r0
 800af16:	d001      	beq.n	800af1c <cleanup_stdio+0x10>
 800af18:	f001 fe66 	bl	800cbe8 <_fflush_r>
 800af1c:	68a1      	ldr	r1, [r4, #8]
 800af1e:	4b09      	ldr	r3, [pc, #36]	; (800af44 <cleanup_stdio+0x38>)
 800af20:	4299      	cmp	r1, r3
 800af22:	d002      	beq.n	800af2a <cleanup_stdio+0x1e>
 800af24:	4620      	mov	r0, r4
 800af26:	f001 fe5f 	bl	800cbe8 <_fflush_r>
 800af2a:	68e1      	ldr	r1, [r4, #12]
 800af2c:	4b06      	ldr	r3, [pc, #24]	; (800af48 <cleanup_stdio+0x3c>)
 800af2e:	4299      	cmp	r1, r3
 800af30:	d004      	beq.n	800af3c <cleanup_stdio+0x30>
 800af32:	4620      	mov	r0, r4
 800af34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af38:	f001 be56 	b.w	800cbe8 <_fflush_r>
 800af3c:	bd10      	pop	{r4, pc}
 800af3e:	bf00      	nop
 800af40:	20001d7c 	.word	0x20001d7c
 800af44:	20001de4 	.word	0x20001de4
 800af48:	20001e4c 	.word	0x20001e4c

0800af4c <global_stdio_init.part.0>:
 800af4c:	b510      	push	{r4, lr}
 800af4e:	4b0b      	ldr	r3, [pc, #44]	; (800af7c <global_stdio_init.part.0+0x30>)
 800af50:	4c0b      	ldr	r4, [pc, #44]	; (800af80 <global_stdio_init.part.0+0x34>)
 800af52:	4a0c      	ldr	r2, [pc, #48]	; (800af84 <global_stdio_init.part.0+0x38>)
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	4620      	mov	r0, r4
 800af58:	2200      	movs	r2, #0
 800af5a:	2104      	movs	r1, #4
 800af5c:	f7ff ff94 	bl	800ae88 <std>
 800af60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800af64:	2201      	movs	r2, #1
 800af66:	2109      	movs	r1, #9
 800af68:	f7ff ff8e 	bl	800ae88 <std>
 800af6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800af70:	2202      	movs	r2, #2
 800af72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af76:	2112      	movs	r1, #18
 800af78:	f7ff bf86 	b.w	800ae88 <std>
 800af7c:	20001eb4 	.word	0x20001eb4
 800af80:	20001d7c 	.word	0x20001d7c
 800af84:	0800aef5 	.word	0x0800aef5

0800af88 <__sfp_lock_acquire>:
 800af88:	4801      	ldr	r0, [pc, #4]	; (800af90 <__sfp_lock_acquire+0x8>)
 800af8a:	f000 b948 	b.w	800b21e <__retarget_lock_acquire_recursive>
 800af8e:	bf00      	nop
 800af90:	20001ebd 	.word	0x20001ebd

0800af94 <__sfp_lock_release>:
 800af94:	4801      	ldr	r0, [pc, #4]	; (800af9c <__sfp_lock_release+0x8>)
 800af96:	f000 b943 	b.w	800b220 <__retarget_lock_release_recursive>
 800af9a:	bf00      	nop
 800af9c:	20001ebd 	.word	0x20001ebd

0800afa0 <__sinit>:
 800afa0:	b510      	push	{r4, lr}
 800afa2:	4604      	mov	r4, r0
 800afa4:	f7ff fff0 	bl	800af88 <__sfp_lock_acquire>
 800afa8:	6a23      	ldr	r3, [r4, #32]
 800afaa:	b11b      	cbz	r3, 800afb4 <__sinit+0x14>
 800afac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb0:	f7ff bff0 	b.w	800af94 <__sfp_lock_release>
 800afb4:	4b04      	ldr	r3, [pc, #16]	; (800afc8 <__sinit+0x28>)
 800afb6:	6223      	str	r3, [r4, #32]
 800afb8:	4b04      	ldr	r3, [pc, #16]	; (800afcc <__sinit+0x2c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1f5      	bne.n	800afac <__sinit+0xc>
 800afc0:	f7ff ffc4 	bl	800af4c <global_stdio_init.part.0>
 800afc4:	e7f2      	b.n	800afac <__sinit+0xc>
 800afc6:	bf00      	nop
 800afc8:	0800af0d 	.word	0x0800af0d
 800afcc:	20001eb4 	.word	0x20001eb4

0800afd0 <_fwalk_sglue>:
 800afd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afd4:	4607      	mov	r7, r0
 800afd6:	4688      	mov	r8, r1
 800afd8:	4614      	mov	r4, r2
 800afda:	2600      	movs	r6, #0
 800afdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afe0:	f1b9 0901 	subs.w	r9, r9, #1
 800afe4:	d505      	bpl.n	800aff2 <_fwalk_sglue+0x22>
 800afe6:	6824      	ldr	r4, [r4, #0]
 800afe8:	2c00      	cmp	r4, #0
 800afea:	d1f7      	bne.n	800afdc <_fwalk_sglue+0xc>
 800afec:	4630      	mov	r0, r6
 800afee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aff2:	89ab      	ldrh	r3, [r5, #12]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d907      	bls.n	800b008 <_fwalk_sglue+0x38>
 800aff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800affc:	3301      	adds	r3, #1
 800affe:	d003      	beq.n	800b008 <_fwalk_sglue+0x38>
 800b000:	4629      	mov	r1, r5
 800b002:	4638      	mov	r0, r7
 800b004:	47c0      	blx	r8
 800b006:	4306      	orrs	r6, r0
 800b008:	3568      	adds	r5, #104	; 0x68
 800b00a:	e7e9      	b.n	800afe0 <_fwalk_sglue+0x10>

0800b00c <__sread>:
 800b00c:	b510      	push	{r4, lr}
 800b00e:	460c      	mov	r4, r1
 800b010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b014:	f000 f8b4 	bl	800b180 <_read_r>
 800b018:	2800      	cmp	r0, #0
 800b01a:	bfab      	itete	ge
 800b01c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b01e:	89a3      	ldrhlt	r3, [r4, #12]
 800b020:	181b      	addge	r3, r3, r0
 800b022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b026:	bfac      	ite	ge
 800b028:	6563      	strge	r3, [r4, #84]	; 0x54
 800b02a:	81a3      	strhlt	r3, [r4, #12]
 800b02c:	bd10      	pop	{r4, pc}

0800b02e <__swrite>:
 800b02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b032:	461f      	mov	r7, r3
 800b034:	898b      	ldrh	r3, [r1, #12]
 800b036:	05db      	lsls	r3, r3, #23
 800b038:	4605      	mov	r5, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	4616      	mov	r6, r2
 800b03e:	d505      	bpl.n	800b04c <__swrite+0x1e>
 800b040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b044:	2302      	movs	r3, #2
 800b046:	2200      	movs	r2, #0
 800b048:	f000 f888 	bl	800b15c <_lseek_r>
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	4632      	mov	r2, r6
 800b05a:	463b      	mov	r3, r7
 800b05c:	4628      	mov	r0, r5
 800b05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b062:	f000 b89f 	b.w	800b1a4 <_write_r>

0800b066 <__sseek>:
 800b066:	b510      	push	{r4, lr}
 800b068:	460c      	mov	r4, r1
 800b06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06e:	f000 f875 	bl	800b15c <_lseek_r>
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	bf15      	itete	ne
 800b078:	6560      	strne	r0, [r4, #84]	; 0x54
 800b07a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b07e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b082:	81a3      	strheq	r3, [r4, #12]
 800b084:	bf18      	it	ne
 800b086:	81a3      	strhne	r3, [r4, #12]
 800b088:	bd10      	pop	{r4, pc}

0800b08a <__sclose>:
 800b08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08e:	f000 b855 	b.w	800b13c <_close_r>

0800b092 <_vsniprintf_r>:
 800b092:	b530      	push	{r4, r5, lr}
 800b094:	4614      	mov	r4, r2
 800b096:	2c00      	cmp	r4, #0
 800b098:	b09b      	sub	sp, #108	; 0x6c
 800b09a:	4605      	mov	r5, r0
 800b09c:	461a      	mov	r2, r3
 800b09e:	da05      	bge.n	800b0ac <_vsniprintf_r+0x1a>
 800b0a0:	238b      	movs	r3, #139	; 0x8b
 800b0a2:	6003      	str	r3, [r0, #0]
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	b01b      	add	sp, #108	; 0x6c
 800b0aa:	bd30      	pop	{r4, r5, pc}
 800b0ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b0b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b0b4:	bf14      	ite	ne
 800b0b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0ba:	4623      	moveq	r3, r4
 800b0bc:	9302      	str	r3, [sp, #8]
 800b0be:	9305      	str	r3, [sp, #20]
 800b0c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0c4:	9100      	str	r1, [sp, #0]
 800b0c6:	9104      	str	r1, [sp, #16]
 800b0c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b0cc:	4669      	mov	r1, sp
 800b0ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b0d0:	f001 fc06 	bl	800c8e0 <_svfiprintf_r>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	bfbc      	itt	lt
 800b0d8:	238b      	movlt	r3, #139	; 0x8b
 800b0da:	602b      	strlt	r3, [r5, #0]
 800b0dc:	2c00      	cmp	r4, #0
 800b0de:	d0e3      	beq.n	800b0a8 <_vsniprintf_r+0x16>
 800b0e0:	9b00      	ldr	r3, [sp, #0]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
 800b0e6:	e7df      	b.n	800b0a8 <_vsniprintf_r+0x16>

0800b0e8 <vsniprintf>:
 800b0e8:	b507      	push	{r0, r1, r2, lr}
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	460a      	mov	r2, r1
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	4803      	ldr	r0, [pc, #12]	; (800b100 <vsniprintf+0x18>)
 800b0f4:	6800      	ldr	r0, [r0, #0]
 800b0f6:	f7ff ffcc 	bl	800b092 <_vsniprintf_r>
 800b0fa:	b003      	add	sp, #12
 800b0fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b100:	200005e4 	.word	0x200005e4

0800b104 <memcmp>:
 800b104:	b510      	push	{r4, lr}
 800b106:	3901      	subs	r1, #1
 800b108:	4402      	add	r2, r0
 800b10a:	4290      	cmp	r0, r2
 800b10c:	d101      	bne.n	800b112 <memcmp+0xe>
 800b10e:	2000      	movs	r0, #0
 800b110:	e005      	b.n	800b11e <memcmp+0x1a>
 800b112:	7803      	ldrb	r3, [r0, #0]
 800b114:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b118:	42a3      	cmp	r3, r4
 800b11a:	d001      	beq.n	800b120 <memcmp+0x1c>
 800b11c:	1b18      	subs	r0, r3, r4
 800b11e:	bd10      	pop	{r4, pc}
 800b120:	3001      	adds	r0, #1
 800b122:	e7f2      	b.n	800b10a <memcmp+0x6>

0800b124 <memset>:
 800b124:	4402      	add	r2, r0
 800b126:	4603      	mov	r3, r0
 800b128:	4293      	cmp	r3, r2
 800b12a:	d100      	bne.n	800b12e <memset+0xa>
 800b12c:	4770      	bx	lr
 800b12e:	f803 1b01 	strb.w	r1, [r3], #1
 800b132:	e7f9      	b.n	800b128 <memset+0x4>

0800b134 <_localeconv_r>:
 800b134:	4800      	ldr	r0, [pc, #0]	; (800b138 <_localeconv_r+0x4>)
 800b136:	4770      	bx	lr
 800b138:	200006d8 	.word	0x200006d8

0800b13c <_close_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4d06      	ldr	r5, [pc, #24]	; (800b158 <_close_r+0x1c>)
 800b140:	2300      	movs	r3, #0
 800b142:	4604      	mov	r4, r0
 800b144:	4608      	mov	r0, r1
 800b146:	602b      	str	r3, [r5, #0]
 800b148:	f7f9 feca 	bl	8004ee0 <_close>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d102      	bne.n	800b156 <_close_r+0x1a>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	b103      	cbz	r3, 800b156 <_close_r+0x1a>
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	20001eb8 	.word	0x20001eb8

0800b15c <_lseek_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d07      	ldr	r5, [pc, #28]	; (800b17c <_lseek_r+0x20>)
 800b160:	4604      	mov	r4, r0
 800b162:	4608      	mov	r0, r1
 800b164:	4611      	mov	r1, r2
 800b166:	2200      	movs	r2, #0
 800b168:	602a      	str	r2, [r5, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	f7f9 fec2 	bl	8004ef4 <_lseek>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d102      	bne.n	800b17a <_lseek_r+0x1e>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	b103      	cbz	r3, 800b17a <_lseek_r+0x1e>
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	20001eb8 	.word	0x20001eb8

0800b180 <_read_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d07      	ldr	r5, [pc, #28]	; (800b1a0 <_read_r+0x20>)
 800b184:	4604      	mov	r4, r0
 800b186:	4608      	mov	r0, r1
 800b188:	4611      	mov	r1, r2
 800b18a:	2200      	movs	r2, #0
 800b18c:	602a      	str	r2, [r5, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	f7f9 fe8c 	bl	8004eac <_read>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_read_r+0x1e>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_read_r+0x1e>
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	20001eb8 	.word	0x20001eb8

0800b1a4 <_write_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4d07      	ldr	r5, [pc, #28]	; (800b1c4 <_write_r+0x20>)
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	4608      	mov	r0, r1
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	602a      	str	r2, [r5, #0]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	f7f9 fe87 	bl	8004ec6 <_write>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	d102      	bne.n	800b1c2 <_write_r+0x1e>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	b103      	cbz	r3, 800b1c2 <_write_r+0x1e>
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
 800b1c4:	20001eb8 	.word	0x20001eb8

0800b1c8 <__errno>:
 800b1c8:	4b01      	ldr	r3, [pc, #4]	; (800b1d0 <__errno+0x8>)
 800b1ca:	6818      	ldr	r0, [r3, #0]
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	200005e4 	.word	0x200005e4

0800b1d4 <__libc_init_array>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	4d0d      	ldr	r5, [pc, #52]	; (800b20c <__libc_init_array+0x38>)
 800b1d8:	4c0d      	ldr	r4, [pc, #52]	; (800b210 <__libc_init_array+0x3c>)
 800b1da:	1b64      	subs	r4, r4, r5
 800b1dc:	10a4      	asrs	r4, r4, #2
 800b1de:	2600      	movs	r6, #0
 800b1e0:	42a6      	cmp	r6, r4
 800b1e2:	d109      	bne.n	800b1f8 <__libc_init_array+0x24>
 800b1e4:	4d0b      	ldr	r5, [pc, #44]	; (800b214 <__libc_init_array+0x40>)
 800b1e6:	4c0c      	ldr	r4, [pc, #48]	; (800b218 <__libc_init_array+0x44>)
 800b1e8:	f003 f854 	bl	800e294 <_init>
 800b1ec:	1b64      	subs	r4, r4, r5
 800b1ee:	10a4      	asrs	r4, r4, #2
 800b1f0:	2600      	movs	r6, #0
 800b1f2:	42a6      	cmp	r6, r4
 800b1f4:	d105      	bne.n	800b202 <__libc_init_array+0x2e>
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1fc:	4798      	blx	r3
 800b1fe:	3601      	adds	r6, #1
 800b200:	e7ee      	b.n	800b1e0 <__libc_init_array+0xc>
 800b202:	f855 3b04 	ldr.w	r3, [r5], #4
 800b206:	4798      	blx	r3
 800b208:	3601      	adds	r6, #1
 800b20a:	e7f2      	b.n	800b1f2 <__libc_init_array+0x1e>
 800b20c:	0800ec10 	.word	0x0800ec10
 800b210:	0800ec10 	.word	0x0800ec10
 800b214:	0800ec10 	.word	0x0800ec10
 800b218:	0800ec14 	.word	0x0800ec14

0800b21c <__retarget_lock_init_recursive>:
 800b21c:	4770      	bx	lr

0800b21e <__retarget_lock_acquire_recursive>:
 800b21e:	4770      	bx	lr

0800b220 <__retarget_lock_release_recursive>:
 800b220:	4770      	bx	lr

0800b222 <memcpy>:
 800b222:	440a      	add	r2, r1
 800b224:	4291      	cmp	r1, r2
 800b226:	f100 33ff 	add.w	r3, r0, #4294967295
 800b22a:	d100      	bne.n	800b22e <memcpy+0xc>
 800b22c:	4770      	bx	lr
 800b22e:	b510      	push	{r4, lr}
 800b230:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b234:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b238:	4291      	cmp	r1, r2
 800b23a:	d1f9      	bne.n	800b230 <memcpy+0xe>
 800b23c:	bd10      	pop	{r4, pc}

0800b23e <quorem>:
 800b23e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b242:	6903      	ldr	r3, [r0, #16]
 800b244:	690c      	ldr	r4, [r1, #16]
 800b246:	42a3      	cmp	r3, r4
 800b248:	4607      	mov	r7, r0
 800b24a:	db7e      	blt.n	800b34a <quorem+0x10c>
 800b24c:	3c01      	subs	r4, #1
 800b24e:	f101 0814 	add.w	r8, r1, #20
 800b252:	f100 0514 	add.w	r5, r0, #20
 800b256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b25a:	9301      	str	r3, [sp, #4]
 800b25c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b264:	3301      	adds	r3, #1
 800b266:	429a      	cmp	r2, r3
 800b268:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b26c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b270:	fbb2 f6f3 	udiv	r6, r2, r3
 800b274:	d331      	bcc.n	800b2da <quorem+0x9c>
 800b276:	f04f 0e00 	mov.w	lr, #0
 800b27a:	4640      	mov	r0, r8
 800b27c:	46ac      	mov	ip, r5
 800b27e:	46f2      	mov	sl, lr
 800b280:	f850 2b04 	ldr.w	r2, [r0], #4
 800b284:	b293      	uxth	r3, r2
 800b286:	fb06 e303 	mla	r3, r6, r3, lr
 800b28a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b28e:	0c1a      	lsrs	r2, r3, #16
 800b290:	b29b      	uxth	r3, r3
 800b292:	ebaa 0303 	sub.w	r3, sl, r3
 800b296:	f8dc a000 	ldr.w	sl, [ip]
 800b29a:	fa13 f38a 	uxtah	r3, r3, sl
 800b29e:	fb06 220e 	mla	r2, r6, lr, r2
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	9b00      	ldr	r3, [sp, #0]
 800b2a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b2aa:	b292      	uxth	r2, r2
 800b2ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b2b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2b4:	f8bd 3000 	ldrh.w	r3, [sp]
 800b2b8:	4581      	cmp	r9, r0
 800b2ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2be:	f84c 3b04 	str.w	r3, [ip], #4
 800b2c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b2c6:	d2db      	bcs.n	800b280 <quorem+0x42>
 800b2c8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b2cc:	b92b      	cbnz	r3, 800b2da <quorem+0x9c>
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	3b04      	subs	r3, #4
 800b2d2:	429d      	cmp	r5, r3
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	d32c      	bcc.n	800b332 <quorem+0xf4>
 800b2d8:	613c      	str	r4, [r7, #16]
 800b2da:	4638      	mov	r0, r7
 800b2dc:	f001 f9a6 	bl	800c62c <__mcmp>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	db22      	blt.n	800b32a <quorem+0xec>
 800b2e4:	3601      	adds	r6, #1
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2ee:	f8d1 c000 	ldr.w	ip, [r1]
 800b2f2:	b293      	uxth	r3, r2
 800b2f4:	1ac3      	subs	r3, r0, r3
 800b2f6:	0c12      	lsrs	r2, r2, #16
 800b2f8:	fa13 f38c 	uxtah	r3, r3, ip
 800b2fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b304:	b29b      	uxth	r3, r3
 800b306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b30a:	45c1      	cmp	r9, r8
 800b30c:	f841 3b04 	str.w	r3, [r1], #4
 800b310:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b314:	d2e9      	bcs.n	800b2ea <quorem+0xac>
 800b316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b31a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b31e:	b922      	cbnz	r2, 800b32a <quorem+0xec>
 800b320:	3b04      	subs	r3, #4
 800b322:	429d      	cmp	r5, r3
 800b324:	461a      	mov	r2, r3
 800b326:	d30a      	bcc.n	800b33e <quorem+0x100>
 800b328:	613c      	str	r4, [r7, #16]
 800b32a:	4630      	mov	r0, r6
 800b32c:	b003      	add	sp, #12
 800b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b332:	6812      	ldr	r2, [r2, #0]
 800b334:	3b04      	subs	r3, #4
 800b336:	2a00      	cmp	r2, #0
 800b338:	d1ce      	bne.n	800b2d8 <quorem+0x9a>
 800b33a:	3c01      	subs	r4, #1
 800b33c:	e7c9      	b.n	800b2d2 <quorem+0x94>
 800b33e:	6812      	ldr	r2, [r2, #0]
 800b340:	3b04      	subs	r3, #4
 800b342:	2a00      	cmp	r2, #0
 800b344:	d1f0      	bne.n	800b328 <quorem+0xea>
 800b346:	3c01      	subs	r4, #1
 800b348:	e7eb      	b.n	800b322 <quorem+0xe4>
 800b34a:	2000      	movs	r0, #0
 800b34c:	e7ee      	b.n	800b32c <quorem+0xee>
	...

0800b350 <_dtoa_r>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	ed2d 8b04 	vpush	{d8-d9}
 800b358:	69c5      	ldr	r5, [r0, #28]
 800b35a:	b093      	sub	sp, #76	; 0x4c
 800b35c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b360:	ec57 6b10 	vmov	r6, r7, d0
 800b364:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b368:	9107      	str	r1, [sp, #28]
 800b36a:	4604      	mov	r4, r0
 800b36c:	920a      	str	r2, [sp, #40]	; 0x28
 800b36e:	930d      	str	r3, [sp, #52]	; 0x34
 800b370:	b975      	cbnz	r5, 800b390 <_dtoa_r+0x40>
 800b372:	2010      	movs	r0, #16
 800b374:	f000 fe2a 	bl	800bfcc <malloc>
 800b378:	4602      	mov	r2, r0
 800b37a:	61e0      	str	r0, [r4, #28]
 800b37c:	b920      	cbnz	r0, 800b388 <_dtoa_r+0x38>
 800b37e:	4bae      	ldr	r3, [pc, #696]	; (800b638 <_dtoa_r+0x2e8>)
 800b380:	21ef      	movs	r1, #239	; 0xef
 800b382:	48ae      	ldr	r0, [pc, #696]	; (800b63c <_dtoa_r+0x2ec>)
 800b384:	f001 fc82 	bl	800cc8c <__assert_func>
 800b388:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b38c:	6005      	str	r5, [r0, #0]
 800b38e:	60c5      	str	r5, [r0, #12]
 800b390:	69e3      	ldr	r3, [r4, #28]
 800b392:	6819      	ldr	r1, [r3, #0]
 800b394:	b151      	cbz	r1, 800b3ac <_dtoa_r+0x5c>
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	604a      	str	r2, [r1, #4]
 800b39a:	2301      	movs	r3, #1
 800b39c:	4093      	lsls	r3, r2
 800b39e:	608b      	str	r3, [r1, #8]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 ff07 	bl	800c1b4 <_Bfree>
 800b3a6:	69e3      	ldr	r3, [r4, #28]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	1e3b      	subs	r3, r7, #0
 800b3ae:	bfbb      	ittet	lt
 800b3b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b3b4:	9303      	strlt	r3, [sp, #12]
 800b3b6:	2300      	movge	r3, #0
 800b3b8:	2201      	movlt	r2, #1
 800b3ba:	bfac      	ite	ge
 800b3bc:	f8c8 3000 	strge.w	r3, [r8]
 800b3c0:	f8c8 2000 	strlt.w	r2, [r8]
 800b3c4:	4b9e      	ldr	r3, [pc, #632]	; (800b640 <_dtoa_r+0x2f0>)
 800b3c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b3ca:	ea33 0308 	bics.w	r3, r3, r8
 800b3ce:	d11b      	bne.n	800b408 <_dtoa_r+0xb8>
 800b3d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b3dc:	4333      	orrs	r3, r6
 800b3de:	f000 8593 	beq.w	800bf08 <_dtoa_r+0xbb8>
 800b3e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3e4:	b963      	cbnz	r3, 800b400 <_dtoa_r+0xb0>
 800b3e6:	4b97      	ldr	r3, [pc, #604]	; (800b644 <_dtoa_r+0x2f4>)
 800b3e8:	e027      	b.n	800b43a <_dtoa_r+0xea>
 800b3ea:	4b97      	ldr	r3, [pc, #604]	; (800b648 <_dtoa_r+0x2f8>)
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	9800      	ldr	r0, [sp, #0]
 800b3f6:	b013      	add	sp, #76	; 0x4c
 800b3f8:	ecbd 8b04 	vpop	{d8-d9}
 800b3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b400:	4b90      	ldr	r3, [pc, #576]	; (800b644 <_dtoa_r+0x2f4>)
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	3303      	adds	r3, #3
 800b406:	e7f3      	b.n	800b3f0 <_dtoa_r+0xa0>
 800b408:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b40c:	2200      	movs	r2, #0
 800b40e:	ec51 0b17 	vmov	r0, r1, d7
 800b412:	eeb0 8a47 	vmov.f32	s16, s14
 800b416:	eef0 8a67 	vmov.f32	s17, s15
 800b41a:	2300      	movs	r3, #0
 800b41c:	f7f5 fb7c 	bl	8000b18 <__aeabi_dcmpeq>
 800b420:	4681      	mov	r9, r0
 800b422:	b160      	cbz	r0, 800b43e <_dtoa_r+0xee>
 800b424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b426:	2301      	movs	r3, #1
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 8568 	beq.w	800bf02 <_dtoa_r+0xbb2>
 800b432:	4b86      	ldr	r3, [pc, #536]	; (800b64c <_dtoa_r+0x2fc>)
 800b434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b436:	6013      	str	r3, [r2, #0]
 800b438:	3b01      	subs	r3, #1
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	e7da      	b.n	800b3f4 <_dtoa_r+0xa4>
 800b43e:	aa10      	add	r2, sp, #64	; 0x40
 800b440:	a911      	add	r1, sp, #68	; 0x44
 800b442:	4620      	mov	r0, r4
 800b444:	eeb0 0a48 	vmov.f32	s0, s16
 800b448:	eef0 0a68 	vmov.f32	s1, s17
 800b44c:	f001 f994 	bl	800c778 <__d2b>
 800b450:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b454:	4682      	mov	sl, r0
 800b456:	2d00      	cmp	r5, #0
 800b458:	d07f      	beq.n	800b55a <_dtoa_r+0x20a>
 800b45a:	ee18 3a90 	vmov	r3, s17
 800b45e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b462:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b466:	ec51 0b18 	vmov	r0, r1, d8
 800b46a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b46e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b472:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b476:	4619      	mov	r1, r3
 800b478:	2200      	movs	r2, #0
 800b47a:	4b75      	ldr	r3, [pc, #468]	; (800b650 <_dtoa_r+0x300>)
 800b47c:	f7f4 ff2c 	bl	80002d8 <__aeabi_dsub>
 800b480:	a367      	add	r3, pc, #412	; (adr r3, 800b620 <_dtoa_r+0x2d0>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f7f5 f8df 	bl	8000648 <__aeabi_dmul>
 800b48a:	a367      	add	r3, pc, #412	; (adr r3, 800b628 <_dtoa_r+0x2d8>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	f7f4 ff24 	bl	80002dc <__adddf3>
 800b494:	4606      	mov	r6, r0
 800b496:	4628      	mov	r0, r5
 800b498:	460f      	mov	r7, r1
 800b49a:	f7f5 f86b 	bl	8000574 <__aeabi_i2d>
 800b49e:	a364      	add	r3, pc, #400	; (adr r3, 800b630 <_dtoa_r+0x2e0>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f5 f8d0 	bl	8000648 <__aeabi_dmul>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	f7f4 ff14 	bl	80002dc <__adddf3>
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	460f      	mov	r7, r1
 800b4b8:	f7f5 fb76 	bl	8000ba8 <__aeabi_d2iz>
 800b4bc:	2200      	movs	r2, #0
 800b4be:	4683      	mov	fp, r0
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	f7f5 fb31 	bl	8000b2c <__aeabi_dcmplt>
 800b4ca:	b148      	cbz	r0, 800b4e0 <_dtoa_r+0x190>
 800b4cc:	4658      	mov	r0, fp
 800b4ce:	f7f5 f851 	bl	8000574 <__aeabi_i2d>
 800b4d2:	4632      	mov	r2, r6
 800b4d4:	463b      	mov	r3, r7
 800b4d6:	f7f5 fb1f 	bl	8000b18 <__aeabi_dcmpeq>
 800b4da:	b908      	cbnz	r0, 800b4e0 <_dtoa_r+0x190>
 800b4dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4e0:	f1bb 0f16 	cmp.w	fp, #22
 800b4e4:	d857      	bhi.n	800b596 <_dtoa_r+0x246>
 800b4e6:	4b5b      	ldr	r3, [pc, #364]	; (800b654 <_dtoa_r+0x304>)
 800b4e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	ec51 0b18 	vmov	r0, r1, d8
 800b4f4:	f7f5 fb1a 	bl	8000b2c <__aeabi_dcmplt>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d04e      	beq.n	800b59a <_dtoa_r+0x24a>
 800b4fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b500:	2300      	movs	r3, #0
 800b502:	930c      	str	r3, [sp, #48]	; 0x30
 800b504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b506:	1b5b      	subs	r3, r3, r5
 800b508:	1e5a      	subs	r2, r3, #1
 800b50a:	bf45      	ittet	mi
 800b50c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b510:	9305      	strmi	r3, [sp, #20]
 800b512:	2300      	movpl	r3, #0
 800b514:	2300      	movmi	r3, #0
 800b516:	9206      	str	r2, [sp, #24]
 800b518:	bf54      	ite	pl
 800b51a:	9305      	strpl	r3, [sp, #20]
 800b51c:	9306      	strmi	r3, [sp, #24]
 800b51e:	f1bb 0f00 	cmp.w	fp, #0
 800b522:	db3c      	blt.n	800b59e <_dtoa_r+0x24e>
 800b524:	9b06      	ldr	r3, [sp, #24]
 800b526:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b52a:	445b      	add	r3, fp
 800b52c:	9306      	str	r3, [sp, #24]
 800b52e:	2300      	movs	r3, #0
 800b530:	9308      	str	r3, [sp, #32]
 800b532:	9b07      	ldr	r3, [sp, #28]
 800b534:	2b09      	cmp	r3, #9
 800b536:	d868      	bhi.n	800b60a <_dtoa_r+0x2ba>
 800b538:	2b05      	cmp	r3, #5
 800b53a:	bfc4      	itt	gt
 800b53c:	3b04      	subgt	r3, #4
 800b53e:	9307      	strgt	r3, [sp, #28]
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	f1a3 0302 	sub.w	r3, r3, #2
 800b546:	bfcc      	ite	gt
 800b548:	2500      	movgt	r5, #0
 800b54a:	2501      	movle	r5, #1
 800b54c:	2b03      	cmp	r3, #3
 800b54e:	f200 8085 	bhi.w	800b65c <_dtoa_r+0x30c>
 800b552:	e8df f003 	tbb	[pc, r3]
 800b556:	3b2e      	.short	0x3b2e
 800b558:	5839      	.short	0x5839
 800b55a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b55e:	441d      	add	r5, r3
 800b560:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b564:	2b20      	cmp	r3, #32
 800b566:	bfc1      	itttt	gt
 800b568:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b56c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b570:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b574:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b578:	bfd6      	itet	le
 800b57a:	f1c3 0320 	rsble	r3, r3, #32
 800b57e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b582:	fa06 f003 	lslle.w	r0, r6, r3
 800b586:	f7f4 ffe5 	bl	8000554 <__aeabi_ui2d>
 800b58a:	2201      	movs	r2, #1
 800b58c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b590:	3d01      	subs	r5, #1
 800b592:	920e      	str	r2, [sp, #56]	; 0x38
 800b594:	e76f      	b.n	800b476 <_dtoa_r+0x126>
 800b596:	2301      	movs	r3, #1
 800b598:	e7b3      	b.n	800b502 <_dtoa_r+0x1b2>
 800b59a:	900c      	str	r0, [sp, #48]	; 0x30
 800b59c:	e7b2      	b.n	800b504 <_dtoa_r+0x1b4>
 800b59e:	9b05      	ldr	r3, [sp, #20]
 800b5a0:	eba3 030b 	sub.w	r3, r3, fp
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	f1cb 0300 	rsb	r3, fp, #0
 800b5aa:	9308      	str	r3, [sp, #32]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5b0:	e7bf      	b.n	800b532 <_dtoa_r+0x1e2>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	dc52      	bgt.n	800b662 <_dtoa_r+0x312>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	9304      	str	r3, [sp, #16]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	920a      	str	r2, [sp, #40]	; 0x28
 800b5c6:	e00b      	b.n	800b5e0 <_dtoa_r+0x290>
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e7f3      	b.n	800b5b4 <_dtoa_r+0x264>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d2:	445b      	add	r3, fp
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	9304      	str	r3, [sp, #16]
 800b5dc:	bfb8      	it	lt
 800b5de:	2301      	movlt	r3, #1
 800b5e0:	69e0      	ldr	r0, [r4, #28]
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	2204      	movs	r2, #4
 800b5e6:	f102 0614 	add.w	r6, r2, #20
 800b5ea:	429e      	cmp	r6, r3
 800b5ec:	d93d      	bls.n	800b66a <_dtoa_r+0x31a>
 800b5ee:	6041      	str	r1, [r0, #4]
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 fd9f 	bl	800c134 <_Balloc>
 800b5f6:	9000      	str	r0, [sp, #0]
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d139      	bne.n	800b670 <_dtoa_r+0x320>
 800b5fc:	4b16      	ldr	r3, [pc, #88]	; (800b658 <_dtoa_r+0x308>)
 800b5fe:	4602      	mov	r2, r0
 800b600:	f240 11af 	movw	r1, #431	; 0x1af
 800b604:	e6bd      	b.n	800b382 <_dtoa_r+0x32>
 800b606:	2301      	movs	r3, #1
 800b608:	e7e1      	b.n	800b5ce <_dtoa_r+0x27e>
 800b60a:	2501      	movs	r5, #1
 800b60c:	2300      	movs	r3, #0
 800b60e:	9307      	str	r3, [sp, #28]
 800b610:	9509      	str	r5, [sp, #36]	; 0x24
 800b612:	f04f 33ff 	mov.w	r3, #4294967295
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	2200      	movs	r2, #0
 800b61c:	2312      	movs	r3, #18
 800b61e:	e7d1      	b.n	800b5c4 <_dtoa_r+0x274>
 800b620:	636f4361 	.word	0x636f4361
 800b624:	3fd287a7 	.word	0x3fd287a7
 800b628:	8b60c8b3 	.word	0x8b60c8b3
 800b62c:	3fc68a28 	.word	0x3fc68a28
 800b630:	509f79fb 	.word	0x509f79fb
 800b634:	3fd34413 	.word	0x3fd34413
 800b638:	0800e4f5 	.word	0x0800e4f5
 800b63c:	0800e50c 	.word	0x0800e50c
 800b640:	7ff00000 	.word	0x7ff00000
 800b644:	0800e4f1 	.word	0x0800e4f1
 800b648:	0800e4e8 	.word	0x0800e4e8
 800b64c:	0800e4c5 	.word	0x0800e4c5
 800b650:	3ff80000 	.word	0x3ff80000
 800b654:	0800e5f8 	.word	0x0800e5f8
 800b658:	0800e564 	.word	0x0800e564
 800b65c:	2301      	movs	r3, #1
 800b65e:	9309      	str	r3, [sp, #36]	; 0x24
 800b660:	e7d7      	b.n	800b612 <_dtoa_r+0x2c2>
 800b662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	9304      	str	r3, [sp, #16]
 800b668:	e7ba      	b.n	800b5e0 <_dtoa_r+0x290>
 800b66a:	3101      	adds	r1, #1
 800b66c:	0052      	lsls	r2, r2, #1
 800b66e:	e7ba      	b.n	800b5e6 <_dtoa_r+0x296>
 800b670:	69e3      	ldr	r3, [r4, #28]
 800b672:	9a00      	ldr	r2, [sp, #0]
 800b674:	601a      	str	r2, [r3, #0]
 800b676:	9b04      	ldr	r3, [sp, #16]
 800b678:	2b0e      	cmp	r3, #14
 800b67a:	f200 80a8 	bhi.w	800b7ce <_dtoa_r+0x47e>
 800b67e:	2d00      	cmp	r5, #0
 800b680:	f000 80a5 	beq.w	800b7ce <_dtoa_r+0x47e>
 800b684:	f1bb 0f00 	cmp.w	fp, #0
 800b688:	dd38      	ble.n	800b6fc <_dtoa_r+0x3ac>
 800b68a:	4bc0      	ldr	r3, [pc, #768]	; (800b98c <_dtoa_r+0x63c>)
 800b68c:	f00b 020f 	and.w	r2, fp, #15
 800b690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b694:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b698:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b69c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b6a0:	d019      	beq.n	800b6d6 <_dtoa_r+0x386>
 800b6a2:	4bbb      	ldr	r3, [pc, #748]	; (800b990 <_dtoa_r+0x640>)
 800b6a4:	ec51 0b18 	vmov	r0, r1, d8
 800b6a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6ac:	f7f5 f8f6 	bl	800089c <__aeabi_ddiv>
 800b6b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6b4:	f008 080f 	and.w	r8, r8, #15
 800b6b8:	2503      	movs	r5, #3
 800b6ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b990 <_dtoa_r+0x640>
 800b6be:	f1b8 0f00 	cmp.w	r8, #0
 800b6c2:	d10a      	bne.n	800b6da <_dtoa_r+0x38a>
 800b6c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c8:	4632      	mov	r2, r6
 800b6ca:	463b      	mov	r3, r7
 800b6cc:	f7f5 f8e6 	bl	800089c <__aeabi_ddiv>
 800b6d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6d4:	e02b      	b.n	800b72e <_dtoa_r+0x3de>
 800b6d6:	2502      	movs	r5, #2
 800b6d8:	e7ef      	b.n	800b6ba <_dtoa_r+0x36a>
 800b6da:	f018 0f01 	tst.w	r8, #1
 800b6de:	d008      	beq.n	800b6f2 <_dtoa_r+0x3a2>
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b6e8:	f7f4 ffae 	bl	8000648 <__aeabi_dmul>
 800b6ec:	3501      	adds	r5, #1
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b6f6:	f109 0908 	add.w	r9, r9, #8
 800b6fa:	e7e0      	b.n	800b6be <_dtoa_r+0x36e>
 800b6fc:	f000 809f 	beq.w	800b83e <_dtoa_r+0x4ee>
 800b700:	f1cb 0600 	rsb	r6, fp, #0
 800b704:	4ba1      	ldr	r3, [pc, #644]	; (800b98c <_dtoa_r+0x63c>)
 800b706:	4fa2      	ldr	r7, [pc, #648]	; (800b990 <_dtoa_r+0x640>)
 800b708:	f006 020f 	and.w	r2, r6, #15
 800b70c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	ec51 0b18 	vmov	r0, r1, d8
 800b718:	f7f4 ff96 	bl	8000648 <__aeabi_dmul>
 800b71c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b720:	1136      	asrs	r6, r6, #4
 800b722:	2300      	movs	r3, #0
 800b724:	2502      	movs	r5, #2
 800b726:	2e00      	cmp	r6, #0
 800b728:	d17e      	bne.n	800b828 <_dtoa_r+0x4d8>
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1d0      	bne.n	800b6d0 <_dtoa_r+0x380>
 800b72e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b730:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	f000 8084 	beq.w	800b842 <_dtoa_r+0x4f2>
 800b73a:	4b96      	ldr	r3, [pc, #600]	; (800b994 <_dtoa_r+0x644>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	4640      	mov	r0, r8
 800b740:	4649      	mov	r1, r9
 800b742:	f7f5 f9f3 	bl	8000b2c <__aeabi_dcmplt>
 800b746:	2800      	cmp	r0, #0
 800b748:	d07b      	beq.n	800b842 <_dtoa_r+0x4f2>
 800b74a:	9b04      	ldr	r3, [sp, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d078      	beq.n	800b842 <_dtoa_r+0x4f2>
 800b750:	9b01      	ldr	r3, [sp, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	dd39      	ble.n	800b7ca <_dtoa_r+0x47a>
 800b756:	4b90      	ldr	r3, [pc, #576]	; (800b998 <_dtoa_r+0x648>)
 800b758:	2200      	movs	r2, #0
 800b75a:	4640      	mov	r0, r8
 800b75c:	4649      	mov	r1, r9
 800b75e:	f7f4 ff73 	bl	8000648 <__aeabi_dmul>
 800b762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b766:	9e01      	ldr	r6, [sp, #4]
 800b768:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b76c:	3501      	adds	r5, #1
 800b76e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b772:	4628      	mov	r0, r5
 800b774:	f7f4 fefe 	bl	8000574 <__aeabi_i2d>
 800b778:	4642      	mov	r2, r8
 800b77a:	464b      	mov	r3, r9
 800b77c:	f7f4 ff64 	bl	8000648 <__aeabi_dmul>
 800b780:	4b86      	ldr	r3, [pc, #536]	; (800b99c <_dtoa_r+0x64c>)
 800b782:	2200      	movs	r2, #0
 800b784:	f7f4 fdaa 	bl	80002dc <__adddf3>
 800b788:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b78c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b790:	9303      	str	r3, [sp, #12]
 800b792:	2e00      	cmp	r6, #0
 800b794:	d158      	bne.n	800b848 <_dtoa_r+0x4f8>
 800b796:	4b82      	ldr	r3, [pc, #520]	; (800b9a0 <_dtoa_r+0x650>)
 800b798:	2200      	movs	r2, #0
 800b79a:	4640      	mov	r0, r8
 800b79c:	4649      	mov	r1, r9
 800b79e:	f7f4 fd9b 	bl	80002d8 <__aeabi_dsub>
 800b7a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7a6:	4680      	mov	r8, r0
 800b7a8:	4689      	mov	r9, r1
 800b7aa:	f7f5 f9dd 	bl	8000b68 <__aeabi_dcmpgt>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f040 8296 	bne.w	800bce0 <_dtoa_r+0x990>
 800b7b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b7b8:	4640      	mov	r0, r8
 800b7ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7be:	4649      	mov	r1, r9
 800b7c0:	f7f5 f9b4 	bl	8000b2c <__aeabi_dcmplt>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	f040 8289 	bne.w	800bcdc <_dtoa_r+0x98c>
 800b7ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b7ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f2c0 814e 	blt.w	800ba72 <_dtoa_r+0x722>
 800b7d6:	f1bb 0f0e 	cmp.w	fp, #14
 800b7da:	f300 814a 	bgt.w	800ba72 <_dtoa_r+0x722>
 800b7de:	4b6b      	ldr	r3, [pc, #428]	; (800b98c <_dtoa_r+0x63c>)
 800b7e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b7e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f280 80dc 	bge.w	800b9a8 <_dtoa_r+0x658>
 800b7f0:	9b04      	ldr	r3, [sp, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f300 80d8 	bgt.w	800b9a8 <_dtoa_r+0x658>
 800b7f8:	f040 826f 	bne.w	800bcda <_dtoa_r+0x98a>
 800b7fc:	4b68      	ldr	r3, [pc, #416]	; (800b9a0 <_dtoa_r+0x650>)
 800b7fe:	2200      	movs	r2, #0
 800b800:	4640      	mov	r0, r8
 800b802:	4649      	mov	r1, r9
 800b804:	f7f4 ff20 	bl	8000648 <__aeabi_dmul>
 800b808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b80c:	f7f5 f9a2 	bl	8000b54 <__aeabi_dcmpge>
 800b810:	9e04      	ldr	r6, [sp, #16]
 800b812:	4637      	mov	r7, r6
 800b814:	2800      	cmp	r0, #0
 800b816:	f040 8245 	bne.w	800bca4 <_dtoa_r+0x954>
 800b81a:	9d00      	ldr	r5, [sp, #0]
 800b81c:	2331      	movs	r3, #49	; 0x31
 800b81e:	f805 3b01 	strb.w	r3, [r5], #1
 800b822:	f10b 0b01 	add.w	fp, fp, #1
 800b826:	e241      	b.n	800bcac <_dtoa_r+0x95c>
 800b828:	07f2      	lsls	r2, r6, #31
 800b82a:	d505      	bpl.n	800b838 <_dtoa_r+0x4e8>
 800b82c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b830:	f7f4 ff0a 	bl	8000648 <__aeabi_dmul>
 800b834:	3501      	adds	r5, #1
 800b836:	2301      	movs	r3, #1
 800b838:	1076      	asrs	r6, r6, #1
 800b83a:	3708      	adds	r7, #8
 800b83c:	e773      	b.n	800b726 <_dtoa_r+0x3d6>
 800b83e:	2502      	movs	r5, #2
 800b840:	e775      	b.n	800b72e <_dtoa_r+0x3de>
 800b842:	9e04      	ldr	r6, [sp, #16]
 800b844:	465f      	mov	r7, fp
 800b846:	e792      	b.n	800b76e <_dtoa_r+0x41e>
 800b848:	9900      	ldr	r1, [sp, #0]
 800b84a:	4b50      	ldr	r3, [pc, #320]	; (800b98c <_dtoa_r+0x63c>)
 800b84c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b850:	4431      	add	r1, r6
 800b852:	9102      	str	r1, [sp, #8]
 800b854:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b856:	eeb0 9a47 	vmov.f32	s18, s14
 800b85a:	eef0 9a67 	vmov.f32	s19, s15
 800b85e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b862:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b866:	2900      	cmp	r1, #0
 800b868:	d044      	beq.n	800b8f4 <_dtoa_r+0x5a4>
 800b86a:	494e      	ldr	r1, [pc, #312]	; (800b9a4 <_dtoa_r+0x654>)
 800b86c:	2000      	movs	r0, #0
 800b86e:	f7f5 f815 	bl	800089c <__aeabi_ddiv>
 800b872:	ec53 2b19 	vmov	r2, r3, d9
 800b876:	f7f4 fd2f 	bl	80002d8 <__aeabi_dsub>
 800b87a:	9d00      	ldr	r5, [sp, #0]
 800b87c:	ec41 0b19 	vmov	d9, r0, r1
 800b880:	4649      	mov	r1, r9
 800b882:	4640      	mov	r0, r8
 800b884:	f7f5 f990 	bl	8000ba8 <__aeabi_d2iz>
 800b888:	4606      	mov	r6, r0
 800b88a:	f7f4 fe73 	bl	8000574 <__aeabi_i2d>
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	f7f4 fd1f 	bl	80002d8 <__aeabi_dsub>
 800b89a:	3630      	adds	r6, #48	; 0x30
 800b89c:	f805 6b01 	strb.w	r6, [r5], #1
 800b8a0:	ec53 2b19 	vmov	r2, r3, d9
 800b8a4:	4680      	mov	r8, r0
 800b8a6:	4689      	mov	r9, r1
 800b8a8:	f7f5 f940 	bl	8000b2c <__aeabi_dcmplt>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d164      	bne.n	800b97a <_dtoa_r+0x62a>
 800b8b0:	4642      	mov	r2, r8
 800b8b2:	464b      	mov	r3, r9
 800b8b4:	4937      	ldr	r1, [pc, #220]	; (800b994 <_dtoa_r+0x644>)
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	f7f4 fd0e 	bl	80002d8 <__aeabi_dsub>
 800b8bc:	ec53 2b19 	vmov	r2, r3, d9
 800b8c0:	f7f5 f934 	bl	8000b2c <__aeabi_dcmplt>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	f040 80b6 	bne.w	800ba36 <_dtoa_r+0x6e6>
 800b8ca:	9b02      	ldr	r3, [sp, #8]
 800b8cc:	429d      	cmp	r5, r3
 800b8ce:	f43f af7c 	beq.w	800b7ca <_dtoa_r+0x47a>
 800b8d2:	4b31      	ldr	r3, [pc, #196]	; (800b998 <_dtoa_r+0x648>)
 800b8d4:	ec51 0b19 	vmov	r0, r1, d9
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f7f4 feb5 	bl	8000648 <__aeabi_dmul>
 800b8de:	4b2e      	ldr	r3, [pc, #184]	; (800b998 <_dtoa_r+0x648>)
 800b8e0:	ec41 0b19 	vmov	d9, r0, r1
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4640      	mov	r0, r8
 800b8e8:	4649      	mov	r1, r9
 800b8ea:	f7f4 fead 	bl	8000648 <__aeabi_dmul>
 800b8ee:	4680      	mov	r8, r0
 800b8f0:	4689      	mov	r9, r1
 800b8f2:	e7c5      	b.n	800b880 <_dtoa_r+0x530>
 800b8f4:	ec51 0b17 	vmov	r0, r1, d7
 800b8f8:	f7f4 fea6 	bl	8000648 <__aeabi_dmul>
 800b8fc:	9b02      	ldr	r3, [sp, #8]
 800b8fe:	9d00      	ldr	r5, [sp, #0]
 800b900:	930f      	str	r3, [sp, #60]	; 0x3c
 800b902:	ec41 0b19 	vmov	d9, r0, r1
 800b906:	4649      	mov	r1, r9
 800b908:	4640      	mov	r0, r8
 800b90a:	f7f5 f94d 	bl	8000ba8 <__aeabi_d2iz>
 800b90e:	4606      	mov	r6, r0
 800b910:	f7f4 fe30 	bl	8000574 <__aeabi_i2d>
 800b914:	3630      	adds	r6, #48	; 0x30
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4640      	mov	r0, r8
 800b91c:	4649      	mov	r1, r9
 800b91e:	f7f4 fcdb 	bl	80002d8 <__aeabi_dsub>
 800b922:	f805 6b01 	strb.w	r6, [r5], #1
 800b926:	9b02      	ldr	r3, [sp, #8]
 800b928:	429d      	cmp	r5, r3
 800b92a:	4680      	mov	r8, r0
 800b92c:	4689      	mov	r9, r1
 800b92e:	f04f 0200 	mov.w	r2, #0
 800b932:	d124      	bne.n	800b97e <_dtoa_r+0x62e>
 800b934:	4b1b      	ldr	r3, [pc, #108]	; (800b9a4 <_dtoa_r+0x654>)
 800b936:	ec51 0b19 	vmov	r0, r1, d9
 800b93a:	f7f4 fccf 	bl	80002dc <__adddf3>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4640      	mov	r0, r8
 800b944:	4649      	mov	r1, r9
 800b946:	f7f5 f90f 	bl	8000b68 <__aeabi_dcmpgt>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d173      	bne.n	800ba36 <_dtoa_r+0x6e6>
 800b94e:	ec53 2b19 	vmov	r2, r3, d9
 800b952:	4914      	ldr	r1, [pc, #80]	; (800b9a4 <_dtoa_r+0x654>)
 800b954:	2000      	movs	r0, #0
 800b956:	f7f4 fcbf 	bl	80002d8 <__aeabi_dsub>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f5 f8e3 	bl	8000b2c <__aeabi_dcmplt>
 800b966:	2800      	cmp	r0, #0
 800b968:	f43f af2f 	beq.w	800b7ca <_dtoa_r+0x47a>
 800b96c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b96e:	1e6b      	subs	r3, r5, #1
 800b970:	930f      	str	r3, [sp, #60]	; 0x3c
 800b972:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b976:	2b30      	cmp	r3, #48	; 0x30
 800b978:	d0f8      	beq.n	800b96c <_dtoa_r+0x61c>
 800b97a:	46bb      	mov	fp, r7
 800b97c:	e04a      	b.n	800ba14 <_dtoa_r+0x6c4>
 800b97e:	4b06      	ldr	r3, [pc, #24]	; (800b998 <_dtoa_r+0x648>)
 800b980:	f7f4 fe62 	bl	8000648 <__aeabi_dmul>
 800b984:	4680      	mov	r8, r0
 800b986:	4689      	mov	r9, r1
 800b988:	e7bd      	b.n	800b906 <_dtoa_r+0x5b6>
 800b98a:	bf00      	nop
 800b98c:	0800e5f8 	.word	0x0800e5f8
 800b990:	0800e5d0 	.word	0x0800e5d0
 800b994:	3ff00000 	.word	0x3ff00000
 800b998:	40240000 	.word	0x40240000
 800b99c:	401c0000 	.word	0x401c0000
 800b9a0:	40140000 	.word	0x40140000
 800b9a4:	3fe00000 	.word	0x3fe00000
 800b9a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9ac:	9d00      	ldr	r5, [sp, #0]
 800b9ae:	4642      	mov	r2, r8
 800b9b0:	464b      	mov	r3, r9
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	f7f4 ff71 	bl	800089c <__aeabi_ddiv>
 800b9ba:	f7f5 f8f5 	bl	8000ba8 <__aeabi_d2iz>
 800b9be:	9001      	str	r0, [sp, #4]
 800b9c0:	f7f4 fdd8 	bl	8000574 <__aeabi_i2d>
 800b9c4:	4642      	mov	r2, r8
 800b9c6:	464b      	mov	r3, r9
 800b9c8:	f7f4 fe3e 	bl	8000648 <__aeabi_dmul>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f4 fc80 	bl	80002d8 <__aeabi_dsub>
 800b9d8:	9e01      	ldr	r6, [sp, #4]
 800b9da:	9f04      	ldr	r7, [sp, #16]
 800b9dc:	3630      	adds	r6, #48	; 0x30
 800b9de:	f805 6b01 	strb.w	r6, [r5], #1
 800b9e2:	9e00      	ldr	r6, [sp, #0]
 800b9e4:	1bae      	subs	r6, r5, r6
 800b9e6:	42b7      	cmp	r7, r6
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	d134      	bne.n	800ba58 <_dtoa_r+0x708>
 800b9ee:	f7f4 fc75 	bl	80002dc <__adddf3>
 800b9f2:	4642      	mov	r2, r8
 800b9f4:	464b      	mov	r3, r9
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	460f      	mov	r7, r1
 800b9fa:	f7f5 f8b5 	bl	8000b68 <__aeabi_dcmpgt>
 800b9fe:	b9c8      	cbnz	r0, 800ba34 <_dtoa_r+0x6e4>
 800ba00:	4642      	mov	r2, r8
 800ba02:	464b      	mov	r3, r9
 800ba04:	4630      	mov	r0, r6
 800ba06:	4639      	mov	r1, r7
 800ba08:	f7f5 f886 	bl	8000b18 <__aeabi_dcmpeq>
 800ba0c:	b110      	cbz	r0, 800ba14 <_dtoa_r+0x6c4>
 800ba0e:	9b01      	ldr	r3, [sp, #4]
 800ba10:	07db      	lsls	r3, r3, #31
 800ba12:	d40f      	bmi.n	800ba34 <_dtoa_r+0x6e4>
 800ba14:	4651      	mov	r1, sl
 800ba16:	4620      	mov	r0, r4
 800ba18:	f000 fbcc 	bl	800c1b4 <_Bfree>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba20:	702b      	strb	r3, [r5, #0]
 800ba22:	f10b 0301 	add.w	r3, fp, #1
 800ba26:	6013      	str	r3, [r2, #0]
 800ba28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f43f ace2 	beq.w	800b3f4 <_dtoa_r+0xa4>
 800ba30:	601d      	str	r5, [r3, #0]
 800ba32:	e4df      	b.n	800b3f4 <_dtoa_r+0xa4>
 800ba34:	465f      	mov	r7, fp
 800ba36:	462b      	mov	r3, r5
 800ba38:	461d      	mov	r5, r3
 800ba3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba3e:	2a39      	cmp	r2, #57	; 0x39
 800ba40:	d106      	bne.n	800ba50 <_dtoa_r+0x700>
 800ba42:	9a00      	ldr	r2, [sp, #0]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d1f7      	bne.n	800ba38 <_dtoa_r+0x6e8>
 800ba48:	9900      	ldr	r1, [sp, #0]
 800ba4a:	2230      	movs	r2, #48	; 0x30
 800ba4c:	3701      	adds	r7, #1
 800ba4e:	700a      	strb	r2, [r1, #0]
 800ba50:	781a      	ldrb	r2, [r3, #0]
 800ba52:	3201      	adds	r2, #1
 800ba54:	701a      	strb	r2, [r3, #0]
 800ba56:	e790      	b.n	800b97a <_dtoa_r+0x62a>
 800ba58:	4ba3      	ldr	r3, [pc, #652]	; (800bce8 <_dtoa_r+0x998>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f7f4 fdf4 	bl	8000648 <__aeabi_dmul>
 800ba60:	2200      	movs	r2, #0
 800ba62:	2300      	movs	r3, #0
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	f7f5 f856 	bl	8000b18 <__aeabi_dcmpeq>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d09e      	beq.n	800b9ae <_dtoa_r+0x65e>
 800ba70:	e7d0      	b.n	800ba14 <_dtoa_r+0x6c4>
 800ba72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba74:	2a00      	cmp	r2, #0
 800ba76:	f000 80ca 	beq.w	800bc0e <_dtoa_r+0x8be>
 800ba7a:	9a07      	ldr	r2, [sp, #28]
 800ba7c:	2a01      	cmp	r2, #1
 800ba7e:	f300 80ad 	bgt.w	800bbdc <_dtoa_r+0x88c>
 800ba82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba84:	2a00      	cmp	r2, #0
 800ba86:	f000 80a5 	beq.w	800bbd4 <_dtoa_r+0x884>
 800ba8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba8e:	9e08      	ldr	r6, [sp, #32]
 800ba90:	9d05      	ldr	r5, [sp, #20]
 800ba92:	9a05      	ldr	r2, [sp, #20]
 800ba94:	441a      	add	r2, r3
 800ba96:	9205      	str	r2, [sp, #20]
 800ba98:	9a06      	ldr	r2, [sp, #24]
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	441a      	add	r2, r3
 800ba9e:	4620      	mov	r0, r4
 800baa0:	9206      	str	r2, [sp, #24]
 800baa2:	f000 fc3d 	bl	800c320 <__i2b>
 800baa6:	4607      	mov	r7, r0
 800baa8:	b165      	cbz	r5, 800bac4 <_dtoa_r+0x774>
 800baaa:	9b06      	ldr	r3, [sp, #24]
 800baac:	2b00      	cmp	r3, #0
 800baae:	dd09      	ble.n	800bac4 <_dtoa_r+0x774>
 800bab0:	42ab      	cmp	r3, r5
 800bab2:	9a05      	ldr	r2, [sp, #20]
 800bab4:	bfa8      	it	ge
 800bab6:	462b      	movge	r3, r5
 800bab8:	1ad2      	subs	r2, r2, r3
 800baba:	9205      	str	r2, [sp, #20]
 800babc:	9a06      	ldr	r2, [sp, #24]
 800babe:	1aed      	subs	r5, r5, r3
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	9306      	str	r3, [sp, #24]
 800bac4:	9b08      	ldr	r3, [sp, #32]
 800bac6:	b1f3      	cbz	r3, 800bb06 <_dtoa_r+0x7b6>
 800bac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f000 80a3 	beq.w	800bc16 <_dtoa_r+0x8c6>
 800bad0:	2e00      	cmp	r6, #0
 800bad2:	dd10      	ble.n	800baf6 <_dtoa_r+0x7a6>
 800bad4:	4639      	mov	r1, r7
 800bad6:	4632      	mov	r2, r6
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 fce1 	bl	800c4a0 <__pow5mult>
 800bade:	4652      	mov	r2, sl
 800bae0:	4601      	mov	r1, r0
 800bae2:	4607      	mov	r7, r0
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 fc31 	bl	800c34c <__multiply>
 800baea:	4651      	mov	r1, sl
 800baec:	4680      	mov	r8, r0
 800baee:	4620      	mov	r0, r4
 800baf0:	f000 fb60 	bl	800c1b4 <_Bfree>
 800baf4:	46c2      	mov	sl, r8
 800baf6:	9b08      	ldr	r3, [sp, #32]
 800baf8:	1b9a      	subs	r2, r3, r6
 800bafa:	d004      	beq.n	800bb06 <_dtoa_r+0x7b6>
 800bafc:	4651      	mov	r1, sl
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 fcce 	bl	800c4a0 <__pow5mult>
 800bb04:	4682      	mov	sl, r0
 800bb06:	2101      	movs	r1, #1
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f000 fc09 	bl	800c320 <__i2b>
 800bb0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	4606      	mov	r6, r0
 800bb14:	f340 8081 	ble.w	800bc1a <_dtoa_r+0x8ca>
 800bb18:	461a      	mov	r2, r3
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f000 fcbf 	bl	800c4a0 <__pow5mult>
 800bb22:	9b07      	ldr	r3, [sp, #28]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	4606      	mov	r6, r0
 800bb28:	dd7a      	ble.n	800bc20 <_dtoa_r+0x8d0>
 800bb2a:	f04f 0800 	mov.w	r8, #0
 800bb2e:	6933      	ldr	r3, [r6, #16]
 800bb30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bb34:	6918      	ldr	r0, [r3, #16]
 800bb36:	f000 fba5 	bl	800c284 <__hi0bits>
 800bb3a:	f1c0 0020 	rsb	r0, r0, #32
 800bb3e:	9b06      	ldr	r3, [sp, #24]
 800bb40:	4418      	add	r0, r3
 800bb42:	f010 001f 	ands.w	r0, r0, #31
 800bb46:	f000 8094 	beq.w	800bc72 <_dtoa_r+0x922>
 800bb4a:	f1c0 0320 	rsb	r3, r0, #32
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	f340 8085 	ble.w	800bc5e <_dtoa_r+0x90e>
 800bb54:	9b05      	ldr	r3, [sp, #20]
 800bb56:	f1c0 001c 	rsb	r0, r0, #28
 800bb5a:	4403      	add	r3, r0
 800bb5c:	9305      	str	r3, [sp, #20]
 800bb5e:	9b06      	ldr	r3, [sp, #24]
 800bb60:	4403      	add	r3, r0
 800bb62:	4405      	add	r5, r0
 800bb64:	9306      	str	r3, [sp, #24]
 800bb66:	9b05      	ldr	r3, [sp, #20]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dd05      	ble.n	800bb78 <_dtoa_r+0x828>
 800bb6c:	4651      	mov	r1, sl
 800bb6e:	461a      	mov	r2, r3
 800bb70:	4620      	mov	r0, r4
 800bb72:	f000 fcef 	bl	800c554 <__lshift>
 800bb76:	4682      	mov	sl, r0
 800bb78:	9b06      	ldr	r3, [sp, #24]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	dd05      	ble.n	800bb8a <_dtoa_r+0x83a>
 800bb7e:	4631      	mov	r1, r6
 800bb80:	461a      	mov	r2, r3
 800bb82:	4620      	mov	r0, r4
 800bb84:	f000 fce6 	bl	800c554 <__lshift>
 800bb88:	4606      	mov	r6, r0
 800bb8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d072      	beq.n	800bc76 <_dtoa_r+0x926>
 800bb90:	4631      	mov	r1, r6
 800bb92:	4650      	mov	r0, sl
 800bb94:	f000 fd4a 	bl	800c62c <__mcmp>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	da6c      	bge.n	800bc76 <_dtoa_r+0x926>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4651      	mov	r1, sl
 800bba0:	220a      	movs	r2, #10
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 fb28 	bl	800c1f8 <__multadd>
 800bba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbae:	4682      	mov	sl, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 81b0 	beq.w	800bf16 <_dtoa_r+0xbc6>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	4639      	mov	r1, r7
 800bbba:	220a      	movs	r2, #10
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 fb1b 	bl	800c1f8 <__multadd>
 800bbc2:	9b01      	ldr	r3, [sp, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	4607      	mov	r7, r0
 800bbc8:	f300 8096 	bgt.w	800bcf8 <_dtoa_r+0x9a8>
 800bbcc:	9b07      	ldr	r3, [sp, #28]
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	dc59      	bgt.n	800bc86 <_dtoa_r+0x936>
 800bbd2:	e091      	b.n	800bcf8 <_dtoa_r+0x9a8>
 800bbd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bbda:	e758      	b.n	800ba8e <_dtoa_r+0x73e>
 800bbdc:	9b04      	ldr	r3, [sp, #16]
 800bbde:	1e5e      	subs	r6, r3, #1
 800bbe0:	9b08      	ldr	r3, [sp, #32]
 800bbe2:	42b3      	cmp	r3, r6
 800bbe4:	bfbf      	itttt	lt
 800bbe6:	9b08      	ldrlt	r3, [sp, #32]
 800bbe8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bbea:	9608      	strlt	r6, [sp, #32]
 800bbec:	1af3      	sublt	r3, r6, r3
 800bbee:	bfb4      	ite	lt
 800bbf0:	18d2      	addlt	r2, r2, r3
 800bbf2:	1b9e      	subge	r6, r3, r6
 800bbf4:	9b04      	ldr	r3, [sp, #16]
 800bbf6:	bfbc      	itt	lt
 800bbf8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bbfa:	2600      	movlt	r6, #0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	bfb7      	itett	lt
 800bc00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bc04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bc08:	1a9d      	sublt	r5, r3, r2
 800bc0a:	2300      	movlt	r3, #0
 800bc0c:	e741      	b.n	800ba92 <_dtoa_r+0x742>
 800bc0e:	9e08      	ldr	r6, [sp, #32]
 800bc10:	9d05      	ldr	r5, [sp, #20]
 800bc12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc14:	e748      	b.n	800baa8 <_dtoa_r+0x758>
 800bc16:	9a08      	ldr	r2, [sp, #32]
 800bc18:	e770      	b.n	800bafc <_dtoa_r+0x7ac>
 800bc1a:	9b07      	ldr	r3, [sp, #28]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	dc19      	bgt.n	800bc54 <_dtoa_r+0x904>
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	b9bb      	cbnz	r3, 800bc54 <_dtoa_r+0x904>
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc2a:	b99b      	cbnz	r3, 800bc54 <_dtoa_r+0x904>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc32:	0d1b      	lsrs	r3, r3, #20
 800bc34:	051b      	lsls	r3, r3, #20
 800bc36:	b183      	cbz	r3, 800bc5a <_dtoa_r+0x90a>
 800bc38:	9b05      	ldr	r3, [sp, #20]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	9b06      	ldr	r3, [sp, #24]
 800bc40:	3301      	adds	r3, #1
 800bc42:	9306      	str	r3, [sp, #24]
 800bc44:	f04f 0801 	mov.w	r8, #1
 800bc48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f47f af6f 	bne.w	800bb2e <_dtoa_r+0x7de>
 800bc50:	2001      	movs	r0, #1
 800bc52:	e774      	b.n	800bb3e <_dtoa_r+0x7ee>
 800bc54:	f04f 0800 	mov.w	r8, #0
 800bc58:	e7f6      	b.n	800bc48 <_dtoa_r+0x8f8>
 800bc5a:	4698      	mov	r8, r3
 800bc5c:	e7f4      	b.n	800bc48 <_dtoa_r+0x8f8>
 800bc5e:	d082      	beq.n	800bb66 <_dtoa_r+0x816>
 800bc60:	9a05      	ldr	r2, [sp, #20]
 800bc62:	331c      	adds	r3, #28
 800bc64:	441a      	add	r2, r3
 800bc66:	9205      	str	r2, [sp, #20]
 800bc68:	9a06      	ldr	r2, [sp, #24]
 800bc6a:	441a      	add	r2, r3
 800bc6c:	441d      	add	r5, r3
 800bc6e:	9206      	str	r2, [sp, #24]
 800bc70:	e779      	b.n	800bb66 <_dtoa_r+0x816>
 800bc72:	4603      	mov	r3, r0
 800bc74:	e7f4      	b.n	800bc60 <_dtoa_r+0x910>
 800bc76:	9b04      	ldr	r3, [sp, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	dc37      	bgt.n	800bcec <_dtoa_r+0x99c>
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	dd34      	ble.n	800bcec <_dtoa_r+0x99c>
 800bc82:	9b04      	ldr	r3, [sp, #16]
 800bc84:	9301      	str	r3, [sp, #4]
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	b963      	cbnz	r3, 800bca4 <_dtoa_r+0x954>
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	2205      	movs	r2, #5
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 fab2 	bl	800c1f8 <__multadd>
 800bc94:	4601      	mov	r1, r0
 800bc96:	4606      	mov	r6, r0
 800bc98:	4650      	mov	r0, sl
 800bc9a:	f000 fcc7 	bl	800c62c <__mcmp>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f73f adbb 	bgt.w	800b81a <_dtoa_r+0x4ca>
 800bca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca6:	9d00      	ldr	r5, [sp, #0]
 800bca8:	ea6f 0b03 	mvn.w	fp, r3
 800bcac:	f04f 0800 	mov.w	r8, #0
 800bcb0:	4631      	mov	r1, r6
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 fa7e 	bl	800c1b4 <_Bfree>
 800bcb8:	2f00      	cmp	r7, #0
 800bcba:	f43f aeab 	beq.w	800ba14 <_dtoa_r+0x6c4>
 800bcbe:	f1b8 0f00 	cmp.w	r8, #0
 800bcc2:	d005      	beq.n	800bcd0 <_dtoa_r+0x980>
 800bcc4:	45b8      	cmp	r8, r7
 800bcc6:	d003      	beq.n	800bcd0 <_dtoa_r+0x980>
 800bcc8:	4641      	mov	r1, r8
 800bcca:	4620      	mov	r0, r4
 800bccc:	f000 fa72 	bl	800c1b4 <_Bfree>
 800bcd0:	4639      	mov	r1, r7
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f000 fa6e 	bl	800c1b4 <_Bfree>
 800bcd8:	e69c      	b.n	800ba14 <_dtoa_r+0x6c4>
 800bcda:	2600      	movs	r6, #0
 800bcdc:	4637      	mov	r7, r6
 800bcde:	e7e1      	b.n	800bca4 <_dtoa_r+0x954>
 800bce0:	46bb      	mov	fp, r7
 800bce2:	4637      	mov	r7, r6
 800bce4:	e599      	b.n	800b81a <_dtoa_r+0x4ca>
 800bce6:	bf00      	nop
 800bce8:	40240000 	.word	0x40240000
 800bcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f000 80c8 	beq.w	800be84 <_dtoa_r+0xb34>
 800bcf4:	9b04      	ldr	r3, [sp, #16]
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	2d00      	cmp	r5, #0
 800bcfa:	dd05      	ble.n	800bd08 <_dtoa_r+0x9b8>
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 fc27 	bl	800c554 <__lshift>
 800bd06:	4607      	mov	r7, r0
 800bd08:	f1b8 0f00 	cmp.w	r8, #0
 800bd0c:	d05b      	beq.n	800bdc6 <_dtoa_r+0xa76>
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	4620      	mov	r0, r4
 800bd12:	f000 fa0f 	bl	800c134 <_Balloc>
 800bd16:	4605      	mov	r5, r0
 800bd18:	b928      	cbnz	r0, 800bd26 <_dtoa_r+0x9d6>
 800bd1a:	4b83      	ldr	r3, [pc, #524]	; (800bf28 <_dtoa_r+0xbd8>)
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bd22:	f7ff bb2e 	b.w	800b382 <_dtoa_r+0x32>
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	3202      	adds	r2, #2
 800bd2a:	0092      	lsls	r2, r2, #2
 800bd2c:	f107 010c 	add.w	r1, r7, #12
 800bd30:	300c      	adds	r0, #12
 800bd32:	f7ff fa76 	bl	800b222 <memcpy>
 800bd36:	2201      	movs	r2, #1
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 fc0a 	bl	800c554 <__lshift>
 800bd40:	9b00      	ldr	r3, [sp, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	9308      	str	r3, [sp, #32]
 800bd4e:	9b02      	ldr	r3, [sp, #8]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	46b8      	mov	r8, r7
 800bd56:	9306      	str	r3, [sp, #24]
 800bd58:	4607      	mov	r7, r0
 800bd5a:	9b04      	ldr	r3, [sp, #16]
 800bd5c:	4631      	mov	r1, r6
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	4650      	mov	r0, sl
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	f7ff fa6b 	bl	800b23e <quorem>
 800bd68:	4641      	mov	r1, r8
 800bd6a:	9002      	str	r0, [sp, #8]
 800bd6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bd70:	4650      	mov	r0, sl
 800bd72:	f000 fc5b 	bl	800c62c <__mcmp>
 800bd76:	463a      	mov	r2, r7
 800bd78:	9005      	str	r0, [sp, #20]
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 fc71 	bl	800c664 <__mdiff>
 800bd82:	68c2      	ldr	r2, [r0, #12]
 800bd84:	4605      	mov	r5, r0
 800bd86:	bb02      	cbnz	r2, 800bdca <_dtoa_r+0xa7a>
 800bd88:	4601      	mov	r1, r0
 800bd8a:	4650      	mov	r0, sl
 800bd8c:	f000 fc4e 	bl	800c62c <__mcmp>
 800bd90:	4602      	mov	r2, r0
 800bd92:	4629      	mov	r1, r5
 800bd94:	4620      	mov	r0, r4
 800bd96:	9209      	str	r2, [sp, #36]	; 0x24
 800bd98:	f000 fa0c 	bl	800c1b4 <_Bfree>
 800bd9c:	9b07      	ldr	r3, [sp, #28]
 800bd9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda0:	9d04      	ldr	r5, [sp, #16]
 800bda2:	ea43 0102 	orr.w	r1, r3, r2
 800bda6:	9b06      	ldr	r3, [sp, #24]
 800bda8:	4319      	orrs	r1, r3
 800bdaa:	d110      	bne.n	800bdce <_dtoa_r+0xa7e>
 800bdac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bdb0:	d029      	beq.n	800be06 <_dtoa_r+0xab6>
 800bdb2:	9b05      	ldr	r3, [sp, #20]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	dd02      	ble.n	800bdbe <_dtoa_r+0xa6e>
 800bdb8:	9b02      	ldr	r3, [sp, #8]
 800bdba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bdbe:	9b01      	ldr	r3, [sp, #4]
 800bdc0:	f883 9000 	strb.w	r9, [r3]
 800bdc4:	e774      	b.n	800bcb0 <_dtoa_r+0x960>
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	e7ba      	b.n	800bd40 <_dtoa_r+0x9f0>
 800bdca:	2201      	movs	r2, #1
 800bdcc:	e7e1      	b.n	800bd92 <_dtoa_r+0xa42>
 800bdce:	9b05      	ldr	r3, [sp, #20]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	db04      	blt.n	800bdde <_dtoa_r+0xa8e>
 800bdd4:	9907      	ldr	r1, [sp, #28]
 800bdd6:	430b      	orrs	r3, r1
 800bdd8:	9906      	ldr	r1, [sp, #24]
 800bdda:	430b      	orrs	r3, r1
 800bddc:	d120      	bne.n	800be20 <_dtoa_r+0xad0>
 800bdde:	2a00      	cmp	r2, #0
 800bde0:	dded      	ble.n	800bdbe <_dtoa_r+0xa6e>
 800bde2:	4651      	mov	r1, sl
 800bde4:	2201      	movs	r2, #1
 800bde6:	4620      	mov	r0, r4
 800bde8:	f000 fbb4 	bl	800c554 <__lshift>
 800bdec:	4631      	mov	r1, r6
 800bdee:	4682      	mov	sl, r0
 800bdf0:	f000 fc1c 	bl	800c62c <__mcmp>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	dc03      	bgt.n	800be00 <_dtoa_r+0xab0>
 800bdf8:	d1e1      	bne.n	800bdbe <_dtoa_r+0xa6e>
 800bdfa:	f019 0f01 	tst.w	r9, #1
 800bdfe:	d0de      	beq.n	800bdbe <_dtoa_r+0xa6e>
 800be00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be04:	d1d8      	bne.n	800bdb8 <_dtoa_r+0xa68>
 800be06:	9a01      	ldr	r2, [sp, #4]
 800be08:	2339      	movs	r3, #57	; 0x39
 800be0a:	7013      	strb	r3, [r2, #0]
 800be0c:	462b      	mov	r3, r5
 800be0e:	461d      	mov	r5, r3
 800be10:	3b01      	subs	r3, #1
 800be12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be16:	2a39      	cmp	r2, #57	; 0x39
 800be18:	d06c      	beq.n	800bef4 <_dtoa_r+0xba4>
 800be1a:	3201      	adds	r2, #1
 800be1c:	701a      	strb	r2, [r3, #0]
 800be1e:	e747      	b.n	800bcb0 <_dtoa_r+0x960>
 800be20:	2a00      	cmp	r2, #0
 800be22:	dd07      	ble.n	800be34 <_dtoa_r+0xae4>
 800be24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be28:	d0ed      	beq.n	800be06 <_dtoa_r+0xab6>
 800be2a:	9a01      	ldr	r2, [sp, #4]
 800be2c:	f109 0301 	add.w	r3, r9, #1
 800be30:	7013      	strb	r3, [r2, #0]
 800be32:	e73d      	b.n	800bcb0 <_dtoa_r+0x960>
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	9a08      	ldr	r2, [sp, #32]
 800be38:	f803 9c01 	strb.w	r9, [r3, #-1]
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d043      	beq.n	800bec8 <_dtoa_r+0xb78>
 800be40:	4651      	mov	r1, sl
 800be42:	2300      	movs	r3, #0
 800be44:	220a      	movs	r2, #10
 800be46:	4620      	mov	r0, r4
 800be48:	f000 f9d6 	bl	800c1f8 <__multadd>
 800be4c:	45b8      	cmp	r8, r7
 800be4e:	4682      	mov	sl, r0
 800be50:	f04f 0300 	mov.w	r3, #0
 800be54:	f04f 020a 	mov.w	r2, #10
 800be58:	4641      	mov	r1, r8
 800be5a:	4620      	mov	r0, r4
 800be5c:	d107      	bne.n	800be6e <_dtoa_r+0xb1e>
 800be5e:	f000 f9cb 	bl	800c1f8 <__multadd>
 800be62:	4680      	mov	r8, r0
 800be64:	4607      	mov	r7, r0
 800be66:	9b04      	ldr	r3, [sp, #16]
 800be68:	3301      	adds	r3, #1
 800be6a:	9304      	str	r3, [sp, #16]
 800be6c:	e775      	b.n	800bd5a <_dtoa_r+0xa0a>
 800be6e:	f000 f9c3 	bl	800c1f8 <__multadd>
 800be72:	4639      	mov	r1, r7
 800be74:	4680      	mov	r8, r0
 800be76:	2300      	movs	r3, #0
 800be78:	220a      	movs	r2, #10
 800be7a:	4620      	mov	r0, r4
 800be7c:	f000 f9bc 	bl	800c1f8 <__multadd>
 800be80:	4607      	mov	r7, r0
 800be82:	e7f0      	b.n	800be66 <_dtoa_r+0xb16>
 800be84:	9b04      	ldr	r3, [sp, #16]
 800be86:	9301      	str	r3, [sp, #4]
 800be88:	9d00      	ldr	r5, [sp, #0]
 800be8a:	4631      	mov	r1, r6
 800be8c:	4650      	mov	r0, sl
 800be8e:	f7ff f9d6 	bl	800b23e <quorem>
 800be92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800be96:	9b00      	ldr	r3, [sp, #0]
 800be98:	f805 9b01 	strb.w	r9, [r5], #1
 800be9c:	1aea      	subs	r2, r5, r3
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	4293      	cmp	r3, r2
 800bea2:	dd07      	ble.n	800beb4 <_dtoa_r+0xb64>
 800bea4:	4651      	mov	r1, sl
 800bea6:	2300      	movs	r3, #0
 800bea8:	220a      	movs	r2, #10
 800beaa:	4620      	mov	r0, r4
 800beac:	f000 f9a4 	bl	800c1f8 <__multadd>
 800beb0:	4682      	mov	sl, r0
 800beb2:	e7ea      	b.n	800be8a <_dtoa_r+0xb3a>
 800beb4:	9b01      	ldr	r3, [sp, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	bfc8      	it	gt
 800beba:	461d      	movgt	r5, r3
 800bebc:	9b00      	ldr	r3, [sp, #0]
 800bebe:	bfd8      	it	le
 800bec0:	2501      	movle	r5, #1
 800bec2:	441d      	add	r5, r3
 800bec4:	f04f 0800 	mov.w	r8, #0
 800bec8:	4651      	mov	r1, sl
 800beca:	2201      	movs	r2, #1
 800becc:	4620      	mov	r0, r4
 800bece:	f000 fb41 	bl	800c554 <__lshift>
 800bed2:	4631      	mov	r1, r6
 800bed4:	4682      	mov	sl, r0
 800bed6:	f000 fba9 	bl	800c62c <__mcmp>
 800beda:	2800      	cmp	r0, #0
 800bedc:	dc96      	bgt.n	800be0c <_dtoa_r+0xabc>
 800bede:	d102      	bne.n	800bee6 <_dtoa_r+0xb96>
 800bee0:	f019 0f01 	tst.w	r9, #1
 800bee4:	d192      	bne.n	800be0c <_dtoa_r+0xabc>
 800bee6:	462b      	mov	r3, r5
 800bee8:	461d      	mov	r5, r3
 800beea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beee:	2a30      	cmp	r2, #48	; 0x30
 800bef0:	d0fa      	beq.n	800bee8 <_dtoa_r+0xb98>
 800bef2:	e6dd      	b.n	800bcb0 <_dtoa_r+0x960>
 800bef4:	9a00      	ldr	r2, [sp, #0]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d189      	bne.n	800be0e <_dtoa_r+0xabe>
 800befa:	f10b 0b01 	add.w	fp, fp, #1
 800befe:	2331      	movs	r3, #49	; 0x31
 800bf00:	e796      	b.n	800be30 <_dtoa_r+0xae0>
 800bf02:	4b0a      	ldr	r3, [pc, #40]	; (800bf2c <_dtoa_r+0xbdc>)
 800bf04:	f7ff ba99 	b.w	800b43a <_dtoa_r+0xea>
 800bf08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f47f aa6d 	bne.w	800b3ea <_dtoa_r+0x9a>
 800bf10:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <_dtoa_r+0xbe0>)
 800bf12:	f7ff ba92 	b.w	800b43a <_dtoa_r+0xea>
 800bf16:	9b01      	ldr	r3, [sp, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	dcb5      	bgt.n	800be88 <_dtoa_r+0xb38>
 800bf1c:	9b07      	ldr	r3, [sp, #28]
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	f73f aeb1 	bgt.w	800bc86 <_dtoa_r+0x936>
 800bf24:	e7b0      	b.n	800be88 <_dtoa_r+0xb38>
 800bf26:	bf00      	nop
 800bf28:	0800e564 	.word	0x0800e564
 800bf2c:	0800e4c4 	.word	0x0800e4c4
 800bf30:	0800e4e8 	.word	0x0800e4e8

0800bf34 <_free_r>:
 800bf34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf36:	2900      	cmp	r1, #0
 800bf38:	d044      	beq.n	800bfc4 <_free_r+0x90>
 800bf3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf3e:	9001      	str	r0, [sp, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f1a1 0404 	sub.w	r4, r1, #4
 800bf46:	bfb8      	it	lt
 800bf48:	18e4      	addlt	r4, r4, r3
 800bf4a:	f000 f8e7 	bl	800c11c <__malloc_lock>
 800bf4e:	4a1e      	ldr	r2, [pc, #120]	; (800bfc8 <_free_r+0x94>)
 800bf50:	9801      	ldr	r0, [sp, #4]
 800bf52:	6813      	ldr	r3, [r2, #0]
 800bf54:	b933      	cbnz	r3, 800bf64 <_free_r+0x30>
 800bf56:	6063      	str	r3, [r4, #4]
 800bf58:	6014      	str	r4, [r2, #0]
 800bf5a:	b003      	add	sp, #12
 800bf5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf60:	f000 b8e2 	b.w	800c128 <__malloc_unlock>
 800bf64:	42a3      	cmp	r3, r4
 800bf66:	d908      	bls.n	800bf7a <_free_r+0x46>
 800bf68:	6825      	ldr	r5, [r4, #0]
 800bf6a:	1961      	adds	r1, r4, r5
 800bf6c:	428b      	cmp	r3, r1
 800bf6e:	bf01      	itttt	eq
 800bf70:	6819      	ldreq	r1, [r3, #0]
 800bf72:	685b      	ldreq	r3, [r3, #4]
 800bf74:	1949      	addeq	r1, r1, r5
 800bf76:	6021      	streq	r1, [r4, #0]
 800bf78:	e7ed      	b.n	800bf56 <_free_r+0x22>
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	b10b      	cbz	r3, 800bf84 <_free_r+0x50>
 800bf80:	42a3      	cmp	r3, r4
 800bf82:	d9fa      	bls.n	800bf7a <_free_r+0x46>
 800bf84:	6811      	ldr	r1, [r2, #0]
 800bf86:	1855      	adds	r5, r2, r1
 800bf88:	42a5      	cmp	r5, r4
 800bf8a:	d10b      	bne.n	800bfa4 <_free_r+0x70>
 800bf8c:	6824      	ldr	r4, [r4, #0]
 800bf8e:	4421      	add	r1, r4
 800bf90:	1854      	adds	r4, r2, r1
 800bf92:	42a3      	cmp	r3, r4
 800bf94:	6011      	str	r1, [r2, #0]
 800bf96:	d1e0      	bne.n	800bf5a <_free_r+0x26>
 800bf98:	681c      	ldr	r4, [r3, #0]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	6053      	str	r3, [r2, #4]
 800bf9e:	440c      	add	r4, r1
 800bfa0:	6014      	str	r4, [r2, #0]
 800bfa2:	e7da      	b.n	800bf5a <_free_r+0x26>
 800bfa4:	d902      	bls.n	800bfac <_free_r+0x78>
 800bfa6:	230c      	movs	r3, #12
 800bfa8:	6003      	str	r3, [r0, #0]
 800bfaa:	e7d6      	b.n	800bf5a <_free_r+0x26>
 800bfac:	6825      	ldr	r5, [r4, #0]
 800bfae:	1961      	adds	r1, r4, r5
 800bfb0:	428b      	cmp	r3, r1
 800bfb2:	bf04      	itt	eq
 800bfb4:	6819      	ldreq	r1, [r3, #0]
 800bfb6:	685b      	ldreq	r3, [r3, #4]
 800bfb8:	6063      	str	r3, [r4, #4]
 800bfba:	bf04      	itt	eq
 800bfbc:	1949      	addeq	r1, r1, r5
 800bfbe:	6021      	streq	r1, [r4, #0]
 800bfc0:	6054      	str	r4, [r2, #4]
 800bfc2:	e7ca      	b.n	800bf5a <_free_r+0x26>
 800bfc4:	b003      	add	sp, #12
 800bfc6:	bd30      	pop	{r4, r5, pc}
 800bfc8:	20001ec0 	.word	0x20001ec0

0800bfcc <malloc>:
 800bfcc:	4b02      	ldr	r3, [pc, #8]	; (800bfd8 <malloc+0xc>)
 800bfce:	4601      	mov	r1, r0
 800bfd0:	6818      	ldr	r0, [r3, #0]
 800bfd2:	f000 b823 	b.w	800c01c <_malloc_r>
 800bfd6:	bf00      	nop
 800bfd8:	200005e4 	.word	0x200005e4

0800bfdc <sbrk_aligned>:
 800bfdc:	b570      	push	{r4, r5, r6, lr}
 800bfde:	4e0e      	ldr	r6, [pc, #56]	; (800c018 <sbrk_aligned+0x3c>)
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	6831      	ldr	r1, [r6, #0]
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	b911      	cbnz	r1, 800bfee <sbrk_aligned+0x12>
 800bfe8:	f000 fe40 	bl	800cc6c <_sbrk_r>
 800bfec:	6030      	str	r0, [r6, #0]
 800bfee:	4621      	mov	r1, r4
 800bff0:	4628      	mov	r0, r5
 800bff2:	f000 fe3b 	bl	800cc6c <_sbrk_r>
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	d00a      	beq.n	800c010 <sbrk_aligned+0x34>
 800bffa:	1cc4      	adds	r4, r0, #3
 800bffc:	f024 0403 	bic.w	r4, r4, #3
 800c000:	42a0      	cmp	r0, r4
 800c002:	d007      	beq.n	800c014 <sbrk_aligned+0x38>
 800c004:	1a21      	subs	r1, r4, r0
 800c006:	4628      	mov	r0, r5
 800c008:	f000 fe30 	bl	800cc6c <_sbrk_r>
 800c00c:	3001      	adds	r0, #1
 800c00e:	d101      	bne.n	800c014 <sbrk_aligned+0x38>
 800c010:	f04f 34ff 	mov.w	r4, #4294967295
 800c014:	4620      	mov	r0, r4
 800c016:	bd70      	pop	{r4, r5, r6, pc}
 800c018:	20001ec4 	.word	0x20001ec4

0800c01c <_malloc_r>:
 800c01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c020:	1ccd      	adds	r5, r1, #3
 800c022:	f025 0503 	bic.w	r5, r5, #3
 800c026:	3508      	adds	r5, #8
 800c028:	2d0c      	cmp	r5, #12
 800c02a:	bf38      	it	cc
 800c02c:	250c      	movcc	r5, #12
 800c02e:	2d00      	cmp	r5, #0
 800c030:	4607      	mov	r7, r0
 800c032:	db01      	blt.n	800c038 <_malloc_r+0x1c>
 800c034:	42a9      	cmp	r1, r5
 800c036:	d905      	bls.n	800c044 <_malloc_r+0x28>
 800c038:	230c      	movs	r3, #12
 800c03a:	603b      	str	r3, [r7, #0]
 800c03c:	2600      	movs	r6, #0
 800c03e:	4630      	mov	r0, r6
 800c040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c044:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c118 <_malloc_r+0xfc>
 800c048:	f000 f868 	bl	800c11c <__malloc_lock>
 800c04c:	f8d8 3000 	ldr.w	r3, [r8]
 800c050:	461c      	mov	r4, r3
 800c052:	bb5c      	cbnz	r4, 800c0ac <_malloc_r+0x90>
 800c054:	4629      	mov	r1, r5
 800c056:	4638      	mov	r0, r7
 800c058:	f7ff ffc0 	bl	800bfdc <sbrk_aligned>
 800c05c:	1c43      	adds	r3, r0, #1
 800c05e:	4604      	mov	r4, r0
 800c060:	d155      	bne.n	800c10e <_malloc_r+0xf2>
 800c062:	f8d8 4000 	ldr.w	r4, [r8]
 800c066:	4626      	mov	r6, r4
 800c068:	2e00      	cmp	r6, #0
 800c06a:	d145      	bne.n	800c0f8 <_malloc_r+0xdc>
 800c06c:	2c00      	cmp	r4, #0
 800c06e:	d048      	beq.n	800c102 <_malloc_r+0xe6>
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	4631      	mov	r1, r6
 800c074:	4638      	mov	r0, r7
 800c076:	eb04 0903 	add.w	r9, r4, r3
 800c07a:	f000 fdf7 	bl	800cc6c <_sbrk_r>
 800c07e:	4581      	cmp	r9, r0
 800c080:	d13f      	bne.n	800c102 <_malloc_r+0xe6>
 800c082:	6821      	ldr	r1, [r4, #0]
 800c084:	1a6d      	subs	r5, r5, r1
 800c086:	4629      	mov	r1, r5
 800c088:	4638      	mov	r0, r7
 800c08a:	f7ff ffa7 	bl	800bfdc <sbrk_aligned>
 800c08e:	3001      	adds	r0, #1
 800c090:	d037      	beq.n	800c102 <_malloc_r+0xe6>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	442b      	add	r3, r5
 800c096:	6023      	str	r3, [r4, #0]
 800c098:	f8d8 3000 	ldr.w	r3, [r8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d038      	beq.n	800c112 <_malloc_r+0xf6>
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	42a2      	cmp	r2, r4
 800c0a4:	d12b      	bne.n	800c0fe <_malloc_r+0xe2>
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	605a      	str	r2, [r3, #4]
 800c0aa:	e00f      	b.n	800c0cc <_malloc_r+0xb0>
 800c0ac:	6822      	ldr	r2, [r4, #0]
 800c0ae:	1b52      	subs	r2, r2, r5
 800c0b0:	d41f      	bmi.n	800c0f2 <_malloc_r+0xd6>
 800c0b2:	2a0b      	cmp	r2, #11
 800c0b4:	d917      	bls.n	800c0e6 <_malloc_r+0xca>
 800c0b6:	1961      	adds	r1, r4, r5
 800c0b8:	42a3      	cmp	r3, r4
 800c0ba:	6025      	str	r5, [r4, #0]
 800c0bc:	bf18      	it	ne
 800c0be:	6059      	strne	r1, [r3, #4]
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	bf08      	it	eq
 800c0c4:	f8c8 1000 	streq.w	r1, [r8]
 800c0c8:	5162      	str	r2, [r4, r5]
 800c0ca:	604b      	str	r3, [r1, #4]
 800c0cc:	4638      	mov	r0, r7
 800c0ce:	f104 060b 	add.w	r6, r4, #11
 800c0d2:	f000 f829 	bl	800c128 <__malloc_unlock>
 800c0d6:	f026 0607 	bic.w	r6, r6, #7
 800c0da:	1d23      	adds	r3, r4, #4
 800c0dc:	1af2      	subs	r2, r6, r3
 800c0de:	d0ae      	beq.n	800c03e <_malloc_r+0x22>
 800c0e0:	1b9b      	subs	r3, r3, r6
 800c0e2:	50a3      	str	r3, [r4, r2]
 800c0e4:	e7ab      	b.n	800c03e <_malloc_r+0x22>
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	6862      	ldr	r2, [r4, #4]
 800c0ea:	d1dd      	bne.n	800c0a8 <_malloc_r+0x8c>
 800c0ec:	f8c8 2000 	str.w	r2, [r8]
 800c0f0:	e7ec      	b.n	800c0cc <_malloc_r+0xb0>
 800c0f2:	4623      	mov	r3, r4
 800c0f4:	6864      	ldr	r4, [r4, #4]
 800c0f6:	e7ac      	b.n	800c052 <_malloc_r+0x36>
 800c0f8:	4634      	mov	r4, r6
 800c0fa:	6876      	ldr	r6, [r6, #4]
 800c0fc:	e7b4      	b.n	800c068 <_malloc_r+0x4c>
 800c0fe:	4613      	mov	r3, r2
 800c100:	e7cc      	b.n	800c09c <_malloc_r+0x80>
 800c102:	230c      	movs	r3, #12
 800c104:	603b      	str	r3, [r7, #0]
 800c106:	4638      	mov	r0, r7
 800c108:	f000 f80e 	bl	800c128 <__malloc_unlock>
 800c10c:	e797      	b.n	800c03e <_malloc_r+0x22>
 800c10e:	6025      	str	r5, [r4, #0]
 800c110:	e7dc      	b.n	800c0cc <_malloc_r+0xb0>
 800c112:	605b      	str	r3, [r3, #4]
 800c114:	deff      	udf	#255	; 0xff
 800c116:	bf00      	nop
 800c118:	20001ec0 	.word	0x20001ec0

0800c11c <__malloc_lock>:
 800c11c:	4801      	ldr	r0, [pc, #4]	; (800c124 <__malloc_lock+0x8>)
 800c11e:	f7ff b87e 	b.w	800b21e <__retarget_lock_acquire_recursive>
 800c122:	bf00      	nop
 800c124:	20001ebc 	.word	0x20001ebc

0800c128 <__malloc_unlock>:
 800c128:	4801      	ldr	r0, [pc, #4]	; (800c130 <__malloc_unlock+0x8>)
 800c12a:	f7ff b879 	b.w	800b220 <__retarget_lock_release_recursive>
 800c12e:	bf00      	nop
 800c130:	20001ebc 	.word	0x20001ebc

0800c134 <_Balloc>:
 800c134:	b570      	push	{r4, r5, r6, lr}
 800c136:	69c6      	ldr	r6, [r0, #28]
 800c138:	4604      	mov	r4, r0
 800c13a:	460d      	mov	r5, r1
 800c13c:	b976      	cbnz	r6, 800c15c <_Balloc+0x28>
 800c13e:	2010      	movs	r0, #16
 800c140:	f7ff ff44 	bl	800bfcc <malloc>
 800c144:	4602      	mov	r2, r0
 800c146:	61e0      	str	r0, [r4, #28]
 800c148:	b920      	cbnz	r0, 800c154 <_Balloc+0x20>
 800c14a:	4b18      	ldr	r3, [pc, #96]	; (800c1ac <_Balloc+0x78>)
 800c14c:	4818      	ldr	r0, [pc, #96]	; (800c1b0 <_Balloc+0x7c>)
 800c14e:	216b      	movs	r1, #107	; 0x6b
 800c150:	f000 fd9c 	bl	800cc8c <__assert_func>
 800c154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c158:	6006      	str	r6, [r0, #0]
 800c15a:	60c6      	str	r6, [r0, #12]
 800c15c:	69e6      	ldr	r6, [r4, #28]
 800c15e:	68f3      	ldr	r3, [r6, #12]
 800c160:	b183      	cbz	r3, 800c184 <_Balloc+0x50>
 800c162:	69e3      	ldr	r3, [r4, #28]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c16a:	b9b8      	cbnz	r0, 800c19c <_Balloc+0x68>
 800c16c:	2101      	movs	r1, #1
 800c16e:	fa01 f605 	lsl.w	r6, r1, r5
 800c172:	1d72      	adds	r2, r6, #5
 800c174:	0092      	lsls	r2, r2, #2
 800c176:	4620      	mov	r0, r4
 800c178:	f000 fda6 	bl	800ccc8 <_calloc_r>
 800c17c:	b160      	cbz	r0, 800c198 <_Balloc+0x64>
 800c17e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c182:	e00e      	b.n	800c1a2 <_Balloc+0x6e>
 800c184:	2221      	movs	r2, #33	; 0x21
 800c186:	2104      	movs	r1, #4
 800c188:	4620      	mov	r0, r4
 800c18a:	f000 fd9d 	bl	800ccc8 <_calloc_r>
 800c18e:	69e3      	ldr	r3, [r4, #28]
 800c190:	60f0      	str	r0, [r6, #12]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1e4      	bne.n	800c162 <_Balloc+0x2e>
 800c198:	2000      	movs	r0, #0
 800c19a:	bd70      	pop	{r4, r5, r6, pc}
 800c19c:	6802      	ldr	r2, [r0, #0]
 800c19e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1a8:	e7f7      	b.n	800c19a <_Balloc+0x66>
 800c1aa:	bf00      	nop
 800c1ac:	0800e4f5 	.word	0x0800e4f5
 800c1b0:	0800e575 	.word	0x0800e575

0800c1b4 <_Bfree>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	69c6      	ldr	r6, [r0, #28]
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	b976      	cbnz	r6, 800c1dc <_Bfree+0x28>
 800c1be:	2010      	movs	r0, #16
 800c1c0:	f7ff ff04 	bl	800bfcc <malloc>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	61e8      	str	r0, [r5, #28]
 800c1c8:	b920      	cbnz	r0, 800c1d4 <_Bfree+0x20>
 800c1ca:	4b09      	ldr	r3, [pc, #36]	; (800c1f0 <_Bfree+0x3c>)
 800c1cc:	4809      	ldr	r0, [pc, #36]	; (800c1f4 <_Bfree+0x40>)
 800c1ce:	218f      	movs	r1, #143	; 0x8f
 800c1d0:	f000 fd5c 	bl	800cc8c <__assert_func>
 800c1d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1d8:	6006      	str	r6, [r0, #0]
 800c1da:	60c6      	str	r6, [r0, #12]
 800c1dc:	b13c      	cbz	r4, 800c1ee <_Bfree+0x3a>
 800c1de:	69eb      	ldr	r3, [r5, #28]
 800c1e0:	6862      	ldr	r2, [r4, #4]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1e8:	6021      	str	r1, [r4, #0]
 800c1ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1ee:	bd70      	pop	{r4, r5, r6, pc}
 800c1f0:	0800e4f5 	.word	0x0800e4f5
 800c1f4:	0800e575 	.word	0x0800e575

0800c1f8 <__multadd>:
 800c1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fc:	690d      	ldr	r5, [r1, #16]
 800c1fe:	4607      	mov	r7, r0
 800c200:	460c      	mov	r4, r1
 800c202:	461e      	mov	r6, r3
 800c204:	f101 0c14 	add.w	ip, r1, #20
 800c208:	2000      	movs	r0, #0
 800c20a:	f8dc 3000 	ldr.w	r3, [ip]
 800c20e:	b299      	uxth	r1, r3
 800c210:	fb02 6101 	mla	r1, r2, r1, r6
 800c214:	0c1e      	lsrs	r6, r3, #16
 800c216:	0c0b      	lsrs	r3, r1, #16
 800c218:	fb02 3306 	mla	r3, r2, r6, r3
 800c21c:	b289      	uxth	r1, r1
 800c21e:	3001      	adds	r0, #1
 800c220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c224:	4285      	cmp	r5, r0
 800c226:	f84c 1b04 	str.w	r1, [ip], #4
 800c22a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c22e:	dcec      	bgt.n	800c20a <__multadd+0x12>
 800c230:	b30e      	cbz	r6, 800c276 <__multadd+0x7e>
 800c232:	68a3      	ldr	r3, [r4, #8]
 800c234:	42ab      	cmp	r3, r5
 800c236:	dc19      	bgt.n	800c26c <__multadd+0x74>
 800c238:	6861      	ldr	r1, [r4, #4]
 800c23a:	4638      	mov	r0, r7
 800c23c:	3101      	adds	r1, #1
 800c23e:	f7ff ff79 	bl	800c134 <_Balloc>
 800c242:	4680      	mov	r8, r0
 800c244:	b928      	cbnz	r0, 800c252 <__multadd+0x5a>
 800c246:	4602      	mov	r2, r0
 800c248:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <__multadd+0x84>)
 800c24a:	480d      	ldr	r0, [pc, #52]	; (800c280 <__multadd+0x88>)
 800c24c:	21ba      	movs	r1, #186	; 0xba
 800c24e:	f000 fd1d 	bl	800cc8c <__assert_func>
 800c252:	6922      	ldr	r2, [r4, #16]
 800c254:	3202      	adds	r2, #2
 800c256:	f104 010c 	add.w	r1, r4, #12
 800c25a:	0092      	lsls	r2, r2, #2
 800c25c:	300c      	adds	r0, #12
 800c25e:	f7fe ffe0 	bl	800b222 <memcpy>
 800c262:	4621      	mov	r1, r4
 800c264:	4638      	mov	r0, r7
 800c266:	f7ff ffa5 	bl	800c1b4 <_Bfree>
 800c26a:	4644      	mov	r4, r8
 800c26c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c270:	3501      	adds	r5, #1
 800c272:	615e      	str	r6, [r3, #20]
 800c274:	6125      	str	r5, [r4, #16]
 800c276:	4620      	mov	r0, r4
 800c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27c:	0800e564 	.word	0x0800e564
 800c280:	0800e575 	.word	0x0800e575

0800c284 <__hi0bits>:
 800c284:	0c03      	lsrs	r3, r0, #16
 800c286:	041b      	lsls	r3, r3, #16
 800c288:	b9d3      	cbnz	r3, 800c2c0 <__hi0bits+0x3c>
 800c28a:	0400      	lsls	r0, r0, #16
 800c28c:	2310      	movs	r3, #16
 800c28e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c292:	bf04      	itt	eq
 800c294:	0200      	lsleq	r0, r0, #8
 800c296:	3308      	addeq	r3, #8
 800c298:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c29c:	bf04      	itt	eq
 800c29e:	0100      	lsleq	r0, r0, #4
 800c2a0:	3304      	addeq	r3, #4
 800c2a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c2a6:	bf04      	itt	eq
 800c2a8:	0080      	lsleq	r0, r0, #2
 800c2aa:	3302      	addeq	r3, #2
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	db05      	blt.n	800c2bc <__hi0bits+0x38>
 800c2b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c2b4:	f103 0301 	add.w	r3, r3, #1
 800c2b8:	bf08      	it	eq
 800c2ba:	2320      	moveq	r3, #32
 800c2bc:	4618      	mov	r0, r3
 800c2be:	4770      	bx	lr
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e7e4      	b.n	800c28e <__hi0bits+0xa>

0800c2c4 <__lo0bits>:
 800c2c4:	6803      	ldr	r3, [r0, #0]
 800c2c6:	f013 0207 	ands.w	r2, r3, #7
 800c2ca:	d00c      	beq.n	800c2e6 <__lo0bits+0x22>
 800c2cc:	07d9      	lsls	r1, r3, #31
 800c2ce:	d422      	bmi.n	800c316 <__lo0bits+0x52>
 800c2d0:	079a      	lsls	r2, r3, #30
 800c2d2:	bf49      	itett	mi
 800c2d4:	085b      	lsrmi	r3, r3, #1
 800c2d6:	089b      	lsrpl	r3, r3, #2
 800c2d8:	6003      	strmi	r3, [r0, #0]
 800c2da:	2201      	movmi	r2, #1
 800c2dc:	bf5c      	itt	pl
 800c2de:	6003      	strpl	r3, [r0, #0]
 800c2e0:	2202      	movpl	r2, #2
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	4770      	bx	lr
 800c2e6:	b299      	uxth	r1, r3
 800c2e8:	b909      	cbnz	r1, 800c2ee <__lo0bits+0x2a>
 800c2ea:	0c1b      	lsrs	r3, r3, #16
 800c2ec:	2210      	movs	r2, #16
 800c2ee:	b2d9      	uxtb	r1, r3
 800c2f0:	b909      	cbnz	r1, 800c2f6 <__lo0bits+0x32>
 800c2f2:	3208      	adds	r2, #8
 800c2f4:	0a1b      	lsrs	r3, r3, #8
 800c2f6:	0719      	lsls	r1, r3, #28
 800c2f8:	bf04      	itt	eq
 800c2fa:	091b      	lsreq	r3, r3, #4
 800c2fc:	3204      	addeq	r2, #4
 800c2fe:	0799      	lsls	r1, r3, #30
 800c300:	bf04      	itt	eq
 800c302:	089b      	lsreq	r3, r3, #2
 800c304:	3202      	addeq	r2, #2
 800c306:	07d9      	lsls	r1, r3, #31
 800c308:	d403      	bmi.n	800c312 <__lo0bits+0x4e>
 800c30a:	085b      	lsrs	r3, r3, #1
 800c30c:	f102 0201 	add.w	r2, r2, #1
 800c310:	d003      	beq.n	800c31a <__lo0bits+0x56>
 800c312:	6003      	str	r3, [r0, #0]
 800c314:	e7e5      	b.n	800c2e2 <__lo0bits+0x1e>
 800c316:	2200      	movs	r2, #0
 800c318:	e7e3      	b.n	800c2e2 <__lo0bits+0x1e>
 800c31a:	2220      	movs	r2, #32
 800c31c:	e7e1      	b.n	800c2e2 <__lo0bits+0x1e>
	...

0800c320 <__i2b>:
 800c320:	b510      	push	{r4, lr}
 800c322:	460c      	mov	r4, r1
 800c324:	2101      	movs	r1, #1
 800c326:	f7ff ff05 	bl	800c134 <_Balloc>
 800c32a:	4602      	mov	r2, r0
 800c32c:	b928      	cbnz	r0, 800c33a <__i2b+0x1a>
 800c32e:	4b05      	ldr	r3, [pc, #20]	; (800c344 <__i2b+0x24>)
 800c330:	4805      	ldr	r0, [pc, #20]	; (800c348 <__i2b+0x28>)
 800c332:	f240 1145 	movw	r1, #325	; 0x145
 800c336:	f000 fca9 	bl	800cc8c <__assert_func>
 800c33a:	2301      	movs	r3, #1
 800c33c:	6144      	str	r4, [r0, #20]
 800c33e:	6103      	str	r3, [r0, #16]
 800c340:	bd10      	pop	{r4, pc}
 800c342:	bf00      	nop
 800c344:	0800e564 	.word	0x0800e564
 800c348:	0800e575 	.word	0x0800e575

0800c34c <__multiply>:
 800c34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c350:	4691      	mov	r9, r2
 800c352:	690a      	ldr	r2, [r1, #16]
 800c354:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c358:	429a      	cmp	r2, r3
 800c35a:	bfb8      	it	lt
 800c35c:	460b      	movlt	r3, r1
 800c35e:	460c      	mov	r4, r1
 800c360:	bfbc      	itt	lt
 800c362:	464c      	movlt	r4, r9
 800c364:	4699      	movlt	r9, r3
 800c366:	6927      	ldr	r7, [r4, #16]
 800c368:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c36c:	68a3      	ldr	r3, [r4, #8]
 800c36e:	6861      	ldr	r1, [r4, #4]
 800c370:	eb07 060a 	add.w	r6, r7, sl
 800c374:	42b3      	cmp	r3, r6
 800c376:	b085      	sub	sp, #20
 800c378:	bfb8      	it	lt
 800c37a:	3101      	addlt	r1, #1
 800c37c:	f7ff feda 	bl	800c134 <_Balloc>
 800c380:	b930      	cbnz	r0, 800c390 <__multiply+0x44>
 800c382:	4602      	mov	r2, r0
 800c384:	4b44      	ldr	r3, [pc, #272]	; (800c498 <__multiply+0x14c>)
 800c386:	4845      	ldr	r0, [pc, #276]	; (800c49c <__multiply+0x150>)
 800c388:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c38c:	f000 fc7e 	bl	800cc8c <__assert_func>
 800c390:	f100 0514 	add.w	r5, r0, #20
 800c394:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c398:	462b      	mov	r3, r5
 800c39a:	2200      	movs	r2, #0
 800c39c:	4543      	cmp	r3, r8
 800c39e:	d321      	bcc.n	800c3e4 <__multiply+0x98>
 800c3a0:	f104 0314 	add.w	r3, r4, #20
 800c3a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c3a8:	f109 0314 	add.w	r3, r9, #20
 800c3ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c3b0:	9202      	str	r2, [sp, #8]
 800c3b2:	1b3a      	subs	r2, r7, r4
 800c3b4:	3a15      	subs	r2, #21
 800c3b6:	f022 0203 	bic.w	r2, r2, #3
 800c3ba:	3204      	adds	r2, #4
 800c3bc:	f104 0115 	add.w	r1, r4, #21
 800c3c0:	428f      	cmp	r7, r1
 800c3c2:	bf38      	it	cc
 800c3c4:	2204      	movcc	r2, #4
 800c3c6:	9201      	str	r2, [sp, #4]
 800c3c8:	9a02      	ldr	r2, [sp, #8]
 800c3ca:	9303      	str	r3, [sp, #12]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d80c      	bhi.n	800c3ea <__multiply+0x9e>
 800c3d0:	2e00      	cmp	r6, #0
 800c3d2:	dd03      	ble.n	800c3dc <__multiply+0x90>
 800c3d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d05b      	beq.n	800c494 <__multiply+0x148>
 800c3dc:	6106      	str	r6, [r0, #16]
 800c3de:	b005      	add	sp, #20
 800c3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e4:	f843 2b04 	str.w	r2, [r3], #4
 800c3e8:	e7d8      	b.n	800c39c <__multiply+0x50>
 800c3ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3ee:	f1ba 0f00 	cmp.w	sl, #0
 800c3f2:	d024      	beq.n	800c43e <__multiply+0xf2>
 800c3f4:	f104 0e14 	add.w	lr, r4, #20
 800c3f8:	46a9      	mov	r9, r5
 800c3fa:	f04f 0c00 	mov.w	ip, #0
 800c3fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c402:	f8d9 1000 	ldr.w	r1, [r9]
 800c406:	fa1f fb82 	uxth.w	fp, r2
 800c40a:	b289      	uxth	r1, r1
 800c40c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c410:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c414:	f8d9 2000 	ldr.w	r2, [r9]
 800c418:	4461      	add	r1, ip
 800c41a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c41e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c422:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c426:	b289      	uxth	r1, r1
 800c428:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c42c:	4577      	cmp	r7, lr
 800c42e:	f849 1b04 	str.w	r1, [r9], #4
 800c432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c436:	d8e2      	bhi.n	800c3fe <__multiply+0xb2>
 800c438:	9a01      	ldr	r2, [sp, #4]
 800c43a:	f845 c002 	str.w	ip, [r5, r2]
 800c43e:	9a03      	ldr	r2, [sp, #12]
 800c440:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c444:	3304      	adds	r3, #4
 800c446:	f1b9 0f00 	cmp.w	r9, #0
 800c44a:	d021      	beq.n	800c490 <__multiply+0x144>
 800c44c:	6829      	ldr	r1, [r5, #0]
 800c44e:	f104 0c14 	add.w	ip, r4, #20
 800c452:	46ae      	mov	lr, r5
 800c454:	f04f 0a00 	mov.w	sl, #0
 800c458:	f8bc b000 	ldrh.w	fp, [ip]
 800c45c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c460:	fb09 220b 	mla	r2, r9, fp, r2
 800c464:	4452      	add	r2, sl
 800c466:	b289      	uxth	r1, r1
 800c468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c46c:	f84e 1b04 	str.w	r1, [lr], #4
 800c470:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c474:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c478:	f8be 1000 	ldrh.w	r1, [lr]
 800c47c:	fb09 110a 	mla	r1, r9, sl, r1
 800c480:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c484:	4567      	cmp	r7, ip
 800c486:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c48a:	d8e5      	bhi.n	800c458 <__multiply+0x10c>
 800c48c:	9a01      	ldr	r2, [sp, #4]
 800c48e:	50a9      	str	r1, [r5, r2]
 800c490:	3504      	adds	r5, #4
 800c492:	e799      	b.n	800c3c8 <__multiply+0x7c>
 800c494:	3e01      	subs	r6, #1
 800c496:	e79b      	b.n	800c3d0 <__multiply+0x84>
 800c498:	0800e564 	.word	0x0800e564
 800c49c:	0800e575 	.word	0x0800e575

0800c4a0 <__pow5mult>:
 800c4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4a4:	4615      	mov	r5, r2
 800c4a6:	f012 0203 	ands.w	r2, r2, #3
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	460f      	mov	r7, r1
 800c4ae:	d007      	beq.n	800c4c0 <__pow5mult+0x20>
 800c4b0:	4c25      	ldr	r4, [pc, #148]	; (800c548 <__pow5mult+0xa8>)
 800c4b2:	3a01      	subs	r2, #1
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4ba:	f7ff fe9d 	bl	800c1f8 <__multadd>
 800c4be:	4607      	mov	r7, r0
 800c4c0:	10ad      	asrs	r5, r5, #2
 800c4c2:	d03d      	beq.n	800c540 <__pow5mult+0xa0>
 800c4c4:	69f4      	ldr	r4, [r6, #28]
 800c4c6:	b97c      	cbnz	r4, 800c4e8 <__pow5mult+0x48>
 800c4c8:	2010      	movs	r0, #16
 800c4ca:	f7ff fd7f 	bl	800bfcc <malloc>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	61f0      	str	r0, [r6, #28]
 800c4d2:	b928      	cbnz	r0, 800c4e0 <__pow5mult+0x40>
 800c4d4:	4b1d      	ldr	r3, [pc, #116]	; (800c54c <__pow5mult+0xac>)
 800c4d6:	481e      	ldr	r0, [pc, #120]	; (800c550 <__pow5mult+0xb0>)
 800c4d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c4dc:	f000 fbd6 	bl	800cc8c <__assert_func>
 800c4e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4e4:	6004      	str	r4, [r0, #0]
 800c4e6:	60c4      	str	r4, [r0, #12]
 800c4e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c4ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4f0:	b94c      	cbnz	r4, 800c506 <__pow5mult+0x66>
 800c4f2:	f240 2171 	movw	r1, #625	; 0x271
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f7ff ff12 	bl	800c320 <__i2b>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c502:	4604      	mov	r4, r0
 800c504:	6003      	str	r3, [r0, #0]
 800c506:	f04f 0900 	mov.w	r9, #0
 800c50a:	07eb      	lsls	r3, r5, #31
 800c50c:	d50a      	bpl.n	800c524 <__pow5mult+0x84>
 800c50e:	4639      	mov	r1, r7
 800c510:	4622      	mov	r2, r4
 800c512:	4630      	mov	r0, r6
 800c514:	f7ff ff1a 	bl	800c34c <__multiply>
 800c518:	4639      	mov	r1, r7
 800c51a:	4680      	mov	r8, r0
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7ff fe49 	bl	800c1b4 <_Bfree>
 800c522:	4647      	mov	r7, r8
 800c524:	106d      	asrs	r5, r5, #1
 800c526:	d00b      	beq.n	800c540 <__pow5mult+0xa0>
 800c528:	6820      	ldr	r0, [r4, #0]
 800c52a:	b938      	cbnz	r0, 800c53c <__pow5mult+0x9c>
 800c52c:	4622      	mov	r2, r4
 800c52e:	4621      	mov	r1, r4
 800c530:	4630      	mov	r0, r6
 800c532:	f7ff ff0b 	bl	800c34c <__multiply>
 800c536:	6020      	str	r0, [r4, #0]
 800c538:	f8c0 9000 	str.w	r9, [r0]
 800c53c:	4604      	mov	r4, r0
 800c53e:	e7e4      	b.n	800c50a <__pow5mult+0x6a>
 800c540:	4638      	mov	r0, r7
 800c542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c546:	bf00      	nop
 800c548:	0800e6c0 	.word	0x0800e6c0
 800c54c:	0800e4f5 	.word	0x0800e4f5
 800c550:	0800e575 	.word	0x0800e575

0800c554 <__lshift>:
 800c554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c558:	460c      	mov	r4, r1
 800c55a:	6849      	ldr	r1, [r1, #4]
 800c55c:	6923      	ldr	r3, [r4, #16]
 800c55e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c562:	68a3      	ldr	r3, [r4, #8]
 800c564:	4607      	mov	r7, r0
 800c566:	4691      	mov	r9, r2
 800c568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c56c:	f108 0601 	add.w	r6, r8, #1
 800c570:	42b3      	cmp	r3, r6
 800c572:	db0b      	blt.n	800c58c <__lshift+0x38>
 800c574:	4638      	mov	r0, r7
 800c576:	f7ff fddd 	bl	800c134 <_Balloc>
 800c57a:	4605      	mov	r5, r0
 800c57c:	b948      	cbnz	r0, 800c592 <__lshift+0x3e>
 800c57e:	4602      	mov	r2, r0
 800c580:	4b28      	ldr	r3, [pc, #160]	; (800c624 <__lshift+0xd0>)
 800c582:	4829      	ldr	r0, [pc, #164]	; (800c628 <__lshift+0xd4>)
 800c584:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c588:	f000 fb80 	bl	800cc8c <__assert_func>
 800c58c:	3101      	adds	r1, #1
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	e7ee      	b.n	800c570 <__lshift+0x1c>
 800c592:	2300      	movs	r3, #0
 800c594:	f100 0114 	add.w	r1, r0, #20
 800c598:	f100 0210 	add.w	r2, r0, #16
 800c59c:	4618      	mov	r0, r3
 800c59e:	4553      	cmp	r3, sl
 800c5a0:	db33      	blt.n	800c60a <__lshift+0xb6>
 800c5a2:	6920      	ldr	r0, [r4, #16]
 800c5a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5a8:	f104 0314 	add.w	r3, r4, #20
 800c5ac:	f019 091f 	ands.w	r9, r9, #31
 800c5b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5b8:	d02b      	beq.n	800c612 <__lshift+0xbe>
 800c5ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c5be:	468a      	mov	sl, r1
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	6818      	ldr	r0, [r3, #0]
 800c5c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c5c8:	4310      	orrs	r0, r2
 800c5ca:	f84a 0b04 	str.w	r0, [sl], #4
 800c5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d2:	459c      	cmp	ip, r3
 800c5d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5d8:	d8f3      	bhi.n	800c5c2 <__lshift+0x6e>
 800c5da:	ebac 0304 	sub.w	r3, ip, r4
 800c5de:	3b15      	subs	r3, #21
 800c5e0:	f023 0303 	bic.w	r3, r3, #3
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	f104 0015 	add.w	r0, r4, #21
 800c5ea:	4584      	cmp	ip, r0
 800c5ec:	bf38      	it	cc
 800c5ee:	2304      	movcc	r3, #4
 800c5f0:	50ca      	str	r2, [r1, r3]
 800c5f2:	b10a      	cbz	r2, 800c5f8 <__lshift+0xa4>
 800c5f4:	f108 0602 	add.w	r6, r8, #2
 800c5f8:	3e01      	subs	r6, #1
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	612e      	str	r6, [r5, #16]
 800c5fe:	4621      	mov	r1, r4
 800c600:	f7ff fdd8 	bl	800c1b4 <_Bfree>
 800c604:	4628      	mov	r0, r5
 800c606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c60a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c60e:	3301      	adds	r3, #1
 800c610:	e7c5      	b.n	800c59e <__lshift+0x4a>
 800c612:	3904      	subs	r1, #4
 800c614:	f853 2b04 	ldr.w	r2, [r3], #4
 800c618:	f841 2f04 	str.w	r2, [r1, #4]!
 800c61c:	459c      	cmp	ip, r3
 800c61e:	d8f9      	bhi.n	800c614 <__lshift+0xc0>
 800c620:	e7ea      	b.n	800c5f8 <__lshift+0xa4>
 800c622:	bf00      	nop
 800c624:	0800e564 	.word	0x0800e564
 800c628:	0800e575 	.word	0x0800e575

0800c62c <__mcmp>:
 800c62c:	b530      	push	{r4, r5, lr}
 800c62e:	6902      	ldr	r2, [r0, #16]
 800c630:	690c      	ldr	r4, [r1, #16]
 800c632:	1b12      	subs	r2, r2, r4
 800c634:	d10e      	bne.n	800c654 <__mcmp+0x28>
 800c636:	f100 0314 	add.w	r3, r0, #20
 800c63a:	3114      	adds	r1, #20
 800c63c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c640:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c644:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c648:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c64c:	42a5      	cmp	r5, r4
 800c64e:	d003      	beq.n	800c658 <__mcmp+0x2c>
 800c650:	d305      	bcc.n	800c65e <__mcmp+0x32>
 800c652:	2201      	movs	r2, #1
 800c654:	4610      	mov	r0, r2
 800c656:	bd30      	pop	{r4, r5, pc}
 800c658:	4283      	cmp	r3, r0
 800c65a:	d3f3      	bcc.n	800c644 <__mcmp+0x18>
 800c65c:	e7fa      	b.n	800c654 <__mcmp+0x28>
 800c65e:	f04f 32ff 	mov.w	r2, #4294967295
 800c662:	e7f7      	b.n	800c654 <__mcmp+0x28>

0800c664 <__mdiff>:
 800c664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c668:	460c      	mov	r4, r1
 800c66a:	4606      	mov	r6, r0
 800c66c:	4611      	mov	r1, r2
 800c66e:	4620      	mov	r0, r4
 800c670:	4690      	mov	r8, r2
 800c672:	f7ff ffdb 	bl	800c62c <__mcmp>
 800c676:	1e05      	subs	r5, r0, #0
 800c678:	d110      	bne.n	800c69c <__mdiff+0x38>
 800c67a:	4629      	mov	r1, r5
 800c67c:	4630      	mov	r0, r6
 800c67e:	f7ff fd59 	bl	800c134 <_Balloc>
 800c682:	b930      	cbnz	r0, 800c692 <__mdiff+0x2e>
 800c684:	4b3a      	ldr	r3, [pc, #232]	; (800c770 <__mdiff+0x10c>)
 800c686:	4602      	mov	r2, r0
 800c688:	f240 2137 	movw	r1, #567	; 0x237
 800c68c:	4839      	ldr	r0, [pc, #228]	; (800c774 <__mdiff+0x110>)
 800c68e:	f000 fafd 	bl	800cc8c <__assert_func>
 800c692:	2301      	movs	r3, #1
 800c694:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69c:	bfa4      	itt	ge
 800c69e:	4643      	movge	r3, r8
 800c6a0:	46a0      	movge	r8, r4
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c6a8:	bfa6      	itte	ge
 800c6aa:	461c      	movge	r4, r3
 800c6ac:	2500      	movge	r5, #0
 800c6ae:	2501      	movlt	r5, #1
 800c6b0:	f7ff fd40 	bl	800c134 <_Balloc>
 800c6b4:	b920      	cbnz	r0, 800c6c0 <__mdiff+0x5c>
 800c6b6:	4b2e      	ldr	r3, [pc, #184]	; (800c770 <__mdiff+0x10c>)
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	f240 2145 	movw	r1, #581	; 0x245
 800c6be:	e7e5      	b.n	800c68c <__mdiff+0x28>
 800c6c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c6c4:	6926      	ldr	r6, [r4, #16]
 800c6c6:	60c5      	str	r5, [r0, #12]
 800c6c8:	f104 0914 	add.w	r9, r4, #20
 800c6cc:	f108 0514 	add.w	r5, r8, #20
 800c6d0:	f100 0e14 	add.w	lr, r0, #20
 800c6d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c6d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6dc:	f108 0210 	add.w	r2, r8, #16
 800c6e0:	46f2      	mov	sl, lr
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6ec:	fa11 f88b 	uxtah	r8, r1, fp
 800c6f0:	b299      	uxth	r1, r3
 800c6f2:	0c1b      	lsrs	r3, r3, #16
 800c6f4:	eba8 0801 	sub.w	r8, r8, r1
 800c6f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c700:	fa1f f888 	uxth.w	r8, r8
 800c704:	1419      	asrs	r1, r3, #16
 800c706:	454e      	cmp	r6, r9
 800c708:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c70c:	f84a 3b04 	str.w	r3, [sl], #4
 800c710:	d8e8      	bhi.n	800c6e4 <__mdiff+0x80>
 800c712:	1b33      	subs	r3, r6, r4
 800c714:	3b15      	subs	r3, #21
 800c716:	f023 0303 	bic.w	r3, r3, #3
 800c71a:	3304      	adds	r3, #4
 800c71c:	3415      	adds	r4, #21
 800c71e:	42a6      	cmp	r6, r4
 800c720:	bf38      	it	cc
 800c722:	2304      	movcc	r3, #4
 800c724:	441d      	add	r5, r3
 800c726:	4473      	add	r3, lr
 800c728:	469e      	mov	lr, r3
 800c72a:	462e      	mov	r6, r5
 800c72c:	4566      	cmp	r6, ip
 800c72e:	d30e      	bcc.n	800c74e <__mdiff+0xea>
 800c730:	f10c 0203 	add.w	r2, ip, #3
 800c734:	1b52      	subs	r2, r2, r5
 800c736:	f022 0203 	bic.w	r2, r2, #3
 800c73a:	3d03      	subs	r5, #3
 800c73c:	45ac      	cmp	ip, r5
 800c73e:	bf38      	it	cc
 800c740:	2200      	movcc	r2, #0
 800c742:	4413      	add	r3, r2
 800c744:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c748:	b17a      	cbz	r2, 800c76a <__mdiff+0x106>
 800c74a:	6107      	str	r7, [r0, #16]
 800c74c:	e7a4      	b.n	800c698 <__mdiff+0x34>
 800c74e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c752:	fa11 f288 	uxtah	r2, r1, r8
 800c756:	1414      	asrs	r4, r2, #16
 800c758:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c75c:	b292      	uxth	r2, r2
 800c75e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c762:	f84e 2b04 	str.w	r2, [lr], #4
 800c766:	1421      	asrs	r1, r4, #16
 800c768:	e7e0      	b.n	800c72c <__mdiff+0xc8>
 800c76a:	3f01      	subs	r7, #1
 800c76c:	e7ea      	b.n	800c744 <__mdiff+0xe0>
 800c76e:	bf00      	nop
 800c770:	0800e564 	.word	0x0800e564
 800c774:	0800e575 	.word	0x0800e575

0800c778 <__d2b>:
 800c778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c77c:	460f      	mov	r7, r1
 800c77e:	2101      	movs	r1, #1
 800c780:	ec59 8b10 	vmov	r8, r9, d0
 800c784:	4616      	mov	r6, r2
 800c786:	f7ff fcd5 	bl	800c134 <_Balloc>
 800c78a:	4604      	mov	r4, r0
 800c78c:	b930      	cbnz	r0, 800c79c <__d2b+0x24>
 800c78e:	4602      	mov	r2, r0
 800c790:	4b24      	ldr	r3, [pc, #144]	; (800c824 <__d2b+0xac>)
 800c792:	4825      	ldr	r0, [pc, #148]	; (800c828 <__d2b+0xb0>)
 800c794:	f240 310f 	movw	r1, #783	; 0x30f
 800c798:	f000 fa78 	bl	800cc8c <__assert_func>
 800c79c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c7a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7a4:	bb2d      	cbnz	r5, 800c7f2 <__d2b+0x7a>
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	f1b8 0300 	subs.w	r3, r8, #0
 800c7ac:	d026      	beq.n	800c7fc <__d2b+0x84>
 800c7ae:	4668      	mov	r0, sp
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	f7ff fd87 	bl	800c2c4 <__lo0bits>
 800c7b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c7ba:	b1e8      	cbz	r0, 800c7f8 <__d2b+0x80>
 800c7bc:	f1c0 0320 	rsb	r3, r0, #32
 800c7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c4:	430b      	orrs	r3, r1
 800c7c6:	40c2      	lsrs	r2, r0
 800c7c8:	6163      	str	r3, [r4, #20]
 800c7ca:	9201      	str	r2, [sp, #4]
 800c7cc:	9b01      	ldr	r3, [sp, #4]
 800c7ce:	61a3      	str	r3, [r4, #24]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	bf14      	ite	ne
 800c7d4:	2202      	movne	r2, #2
 800c7d6:	2201      	moveq	r2, #1
 800c7d8:	6122      	str	r2, [r4, #16]
 800c7da:	b1bd      	cbz	r5, 800c80c <__d2b+0x94>
 800c7dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c7e0:	4405      	add	r5, r0
 800c7e2:	603d      	str	r5, [r7, #0]
 800c7e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c7e8:	6030      	str	r0, [r6, #0]
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	b003      	add	sp, #12
 800c7ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7f6:	e7d6      	b.n	800c7a6 <__d2b+0x2e>
 800c7f8:	6161      	str	r1, [r4, #20]
 800c7fa:	e7e7      	b.n	800c7cc <__d2b+0x54>
 800c7fc:	a801      	add	r0, sp, #4
 800c7fe:	f7ff fd61 	bl	800c2c4 <__lo0bits>
 800c802:	9b01      	ldr	r3, [sp, #4]
 800c804:	6163      	str	r3, [r4, #20]
 800c806:	3020      	adds	r0, #32
 800c808:	2201      	movs	r2, #1
 800c80a:	e7e5      	b.n	800c7d8 <__d2b+0x60>
 800c80c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c814:	6038      	str	r0, [r7, #0]
 800c816:	6918      	ldr	r0, [r3, #16]
 800c818:	f7ff fd34 	bl	800c284 <__hi0bits>
 800c81c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c820:	e7e2      	b.n	800c7e8 <__d2b+0x70>
 800c822:	bf00      	nop
 800c824:	0800e564 	.word	0x0800e564
 800c828:	0800e575 	.word	0x0800e575

0800c82c <__ssputs_r>:
 800c82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c830:	688e      	ldr	r6, [r1, #8]
 800c832:	461f      	mov	r7, r3
 800c834:	42be      	cmp	r6, r7
 800c836:	680b      	ldr	r3, [r1, #0]
 800c838:	4682      	mov	sl, r0
 800c83a:	460c      	mov	r4, r1
 800c83c:	4690      	mov	r8, r2
 800c83e:	d82c      	bhi.n	800c89a <__ssputs_r+0x6e>
 800c840:	898a      	ldrh	r2, [r1, #12]
 800c842:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c846:	d026      	beq.n	800c896 <__ssputs_r+0x6a>
 800c848:	6965      	ldr	r5, [r4, #20]
 800c84a:	6909      	ldr	r1, [r1, #16]
 800c84c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c850:	eba3 0901 	sub.w	r9, r3, r1
 800c854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c858:	1c7b      	adds	r3, r7, #1
 800c85a:	444b      	add	r3, r9
 800c85c:	106d      	asrs	r5, r5, #1
 800c85e:	429d      	cmp	r5, r3
 800c860:	bf38      	it	cc
 800c862:	461d      	movcc	r5, r3
 800c864:	0553      	lsls	r3, r2, #21
 800c866:	d527      	bpl.n	800c8b8 <__ssputs_r+0x8c>
 800c868:	4629      	mov	r1, r5
 800c86a:	f7ff fbd7 	bl	800c01c <_malloc_r>
 800c86e:	4606      	mov	r6, r0
 800c870:	b360      	cbz	r0, 800c8cc <__ssputs_r+0xa0>
 800c872:	6921      	ldr	r1, [r4, #16]
 800c874:	464a      	mov	r2, r9
 800c876:	f7fe fcd4 	bl	800b222 <memcpy>
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c884:	81a3      	strh	r3, [r4, #12]
 800c886:	6126      	str	r6, [r4, #16]
 800c888:	6165      	str	r5, [r4, #20]
 800c88a:	444e      	add	r6, r9
 800c88c:	eba5 0509 	sub.w	r5, r5, r9
 800c890:	6026      	str	r6, [r4, #0]
 800c892:	60a5      	str	r5, [r4, #8]
 800c894:	463e      	mov	r6, r7
 800c896:	42be      	cmp	r6, r7
 800c898:	d900      	bls.n	800c89c <__ssputs_r+0x70>
 800c89a:	463e      	mov	r6, r7
 800c89c:	6820      	ldr	r0, [r4, #0]
 800c89e:	4632      	mov	r2, r6
 800c8a0:	4641      	mov	r1, r8
 800c8a2:	f000 f9c9 	bl	800cc38 <memmove>
 800c8a6:	68a3      	ldr	r3, [r4, #8]
 800c8a8:	1b9b      	subs	r3, r3, r6
 800c8aa:	60a3      	str	r3, [r4, #8]
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	4433      	add	r3, r6
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b8:	462a      	mov	r2, r5
 800c8ba:	f000 fa2d 	bl	800cd18 <_realloc_r>
 800c8be:	4606      	mov	r6, r0
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d1e0      	bne.n	800c886 <__ssputs_r+0x5a>
 800c8c4:	6921      	ldr	r1, [r4, #16]
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	f7ff fb34 	bl	800bf34 <_free_r>
 800c8cc:	230c      	movs	r3, #12
 800c8ce:	f8ca 3000 	str.w	r3, [sl]
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d8:	81a3      	strh	r3, [r4, #12]
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295
 800c8de:	e7e9      	b.n	800c8b4 <__ssputs_r+0x88>

0800c8e0 <_svfiprintf_r>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	4698      	mov	r8, r3
 800c8e6:	898b      	ldrh	r3, [r1, #12]
 800c8e8:	061b      	lsls	r3, r3, #24
 800c8ea:	b09d      	sub	sp, #116	; 0x74
 800c8ec:	4607      	mov	r7, r0
 800c8ee:	460d      	mov	r5, r1
 800c8f0:	4614      	mov	r4, r2
 800c8f2:	d50e      	bpl.n	800c912 <_svfiprintf_r+0x32>
 800c8f4:	690b      	ldr	r3, [r1, #16]
 800c8f6:	b963      	cbnz	r3, 800c912 <_svfiprintf_r+0x32>
 800c8f8:	2140      	movs	r1, #64	; 0x40
 800c8fa:	f7ff fb8f 	bl	800c01c <_malloc_r>
 800c8fe:	6028      	str	r0, [r5, #0]
 800c900:	6128      	str	r0, [r5, #16]
 800c902:	b920      	cbnz	r0, 800c90e <_svfiprintf_r+0x2e>
 800c904:	230c      	movs	r3, #12
 800c906:	603b      	str	r3, [r7, #0]
 800c908:	f04f 30ff 	mov.w	r0, #4294967295
 800c90c:	e0d0      	b.n	800cab0 <_svfiprintf_r+0x1d0>
 800c90e:	2340      	movs	r3, #64	; 0x40
 800c910:	616b      	str	r3, [r5, #20]
 800c912:	2300      	movs	r3, #0
 800c914:	9309      	str	r3, [sp, #36]	; 0x24
 800c916:	2320      	movs	r3, #32
 800c918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c91c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c920:	2330      	movs	r3, #48	; 0x30
 800c922:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cac8 <_svfiprintf_r+0x1e8>
 800c926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c92a:	f04f 0901 	mov.w	r9, #1
 800c92e:	4623      	mov	r3, r4
 800c930:	469a      	mov	sl, r3
 800c932:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c936:	b10a      	cbz	r2, 800c93c <_svfiprintf_r+0x5c>
 800c938:	2a25      	cmp	r2, #37	; 0x25
 800c93a:	d1f9      	bne.n	800c930 <_svfiprintf_r+0x50>
 800c93c:	ebba 0b04 	subs.w	fp, sl, r4
 800c940:	d00b      	beq.n	800c95a <_svfiprintf_r+0x7a>
 800c942:	465b      	mov	r3, fp
 800c944:	4622      	mov	r2, r4
 800c946:	4629      	mov	r1, r5
 800c948:	4638      	mov	r0, r7
 800c94a:	f7ff ff6f 	bl	800c82c <__ssputs_r>
 800c94e:	3001      	adds	r0, #1
 800c950:	f000 80a9 	beq.w	800caa6 <_svfiprintf_r+0x1c6>
 800c954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c956:	445a      	add	r2, fp
 800c958:	9209      	str	r2, [sp, #36]	; 0x24
 800c95a:	f89a 3000 	ldrb.w	r3, [sl]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 80a1 	beq.w	800caa6 <_svfiprintf_r+0x1c6>
 800c964:	2300      	movs	r3, #0
 800c966:	f04f 32ff 	mov.w	r2, #4294967295
 800c96a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c96e:	f10a 0a01 	add.w	sl, sl, #1
 800c972:	9304      	str	r3, [sp, #16]
 800c974:	9307      	str	r3, [sp, #28]
 800c976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c97a:	931a      	str	r3, [sp, #104]	; 0x68
 800c97c:	4654      	mov	r4, sl
 800c97e:	2205      	movs	r2, #5
 800c980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c984:	4850      	ldr	r0, [pc, #320]	; (800cac8 <_svfiprintf_r+0x1e8>)
 800c986:	f7f3 fc4b 	bl	8000220 <memchr>
 800c98a:	9a04      	ldr	r2, [sp, #16]
 800c98c:	b9d8      	cbnz	r0, 800c9c6 <_svfiprintf_r+0xe6>
 800c98e:	06d0      	lsls	r0, r2, #27
 800c990:	bf44      	itt	mi
 800c992:	2320      	movmi	r3, #32
 800c994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c998:	0711      	lsls	r1, r2, #28
 800c99a:	bf44      	itt	mi
 800c99c:	232b      	movmi	r3, #43	; 0x2b
 800c99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9a8:	d015      	beq.n	800c9d6 <_svfiprintf_r+0xf6>
 800c9aa:	9a07      	ldr	r2, [sp, #28]
 800c9ac:	4654      	mov	r4, sl
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	f04f 0c0a 	mov.w	ip, #10
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9ba:	3b30      	subs	r3, #48	; 0x30
 800c9bc:	2b09      	cmp	r3, #9
 800c9be:	d94d      	bls.n	800ca5c <_svfiprintf_r+0x17c>
 800c9c0:	b1b0      	cbz	r0, 800c9f0 <_svfiprintf_r+0x110>
 800c9c2:	9207      	str	r2, [sp, #28]
 800c9c4:	e014      	b.n	800c9f0 <_svfiprintf_r+0x110>
 800c9c6:	eba0 0308 	sub.w	r3, r0, r8
 800c9ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	9304      	str	r3, [sp, #16]
 800c9d2:	46a2      	mov	sl, r4
 800c9d4:	e7d2      	b.n	800c97c <_svfiprintf_r+0x9c>
 800c9d6:	9b03      	ldr	r3, [sp, #12]
 800c9d8:	1d19      	adds	r1, r3, #4
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	9103      	str	r1, [sp, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	bfbb      	ittet	lt
 800c9e2:	425b      	neglt	r3, r3
 800c9e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c9e8:	9307      	strge	r3, [sp, #28]
 800c9ea:	9307      	strlt	r3, [sp, #28]
 800c9ec:	bfb8      	it	lt
 800c9ee:	9204      	strlt	r2, [sp, #16]
 800c9f0:	7823      	ldrb	r3, [r4, #0]
 800c9f2:	2b2e      	cmp	r3, #46	; 0x2e
 800c9f4:	d10c      	bne.n	800ca10 <_svfiprintf_r+0x130>
 800c9f6:	7863      	ldrb	r3, [r4, #1]
 800c9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c9fa:	d134      	bne.n	800ca66 <_svfiprintf_r+0x186>
 800c9fc:	9b03      	ldr	r3, [sp, #12]
 800c9fe:	1d1a      	adds	r2, r3, #4
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	9203      	str	r2, [sp, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	bfb8      	it	lt
 800ca08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca0c:	3402      	adds	r4, #2
 800ca0e:	9305      	str	r3, [sp, #20]
 800ca10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cad8 <_svfiprintf_r+0x1f8>
 800ca14:	7821      	ldrb	r1, [r4, #0]
 800ca16:	2203      	movs	r2, #3
 800ca18:	4650      	mov	r0, sl
 800ca1a:	f7f3 fc01 	bl	8000220 <memchr>
 800ca1e:	b138      	cbz	r0, 800ca30 <_svfiprintf_r+0x150>
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	eba0 000a 	sub.w	r0, r0, sl
 800ca26:	2240      	movs	r2, #64	; 0x40
 800ca28:	4082      	lsls	r2, r0
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	3401      	adds	r4, #1
 800ca2e:	9304      	str	r3, [sp, #16]
 800ca30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca34:	4825      	ldr	r0, [pc, #148]	; (800cacc <_svfiprintf_r+0x1ec>)
 800ca36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca3a:	2206      	movs	r2, #6
 800ca3c:	f7f3 fbf0 	bl	8000220 <memchr>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d038      	beq.n	800cab6 <_svfiprintf_r+0x1d6>
 800ca44:	4b22      	ldr	r3, [pc, #136]	; (800cad0 <_svfiprintf_r+0x1f0>)
 800ca46:	bb1b      	cbnz	r3, 800ca90 <_svfiprintf_r+0x1b0>
 800ca48:	9b03      	ldr	r3, [sp, #12]
 800ca4a:	3307      	adds	r3, #7
 800ca4c:	f023 0307 	bic.w	r3, r3, #7
 800ca50:	3308      	adds	r3, #8
 800ca52:	9303      	str	r3, [sp, #12]
 800ca54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca56:	4433      	add	r3, r6
 800ca58:	9309      	str	r3, [sp, #36]	; 0x24
 800ca5a:	e768      	b.n	800c92e <_svfiprintf_r+0x4e>
 800ca5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca60:	460c      	mov	r4, r1
 800ca62:	2001      	movs	r0, #1
 800ca64:	e7a6      	b.n	800c9b4 <_svfiprintf_r+0xd4>
 800ca66:	2300      	movs	r3, #0
 800ca68:	3401      	adds	r4, #1
 800ca6a:	9305      	str	r3, [sp, #20]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	f04f 0c0a 	mov.w	ip, #10
 800ca72:	4620      	mov	r0, r4
 800ca74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca78:	3a30      	subs	r2, #48	; 0x30
 800ca7a:	2a09      	cmp	r2, #9
 800ca7c:	d903      	bls.n	800ca86 <_svfiprintf_r+0x1a6>
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d0c6      	beq.n	800ca10 <_svfiprintf_r+0x130>
 800ca82:	9105      	str	r1, [sp, #20]
 800ca84:	e7c4      	b.n	800ca10 <_svfiprintf_r+0x130>
 800ca86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e7f0      	b.n	800ca72 <_svfiprintf_r+0x192>
 800ca90:	ab03      	add	r3, sp, #12
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	462a      	mov	r2, r5
 800ca96:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <_svfiprintf_r+0x1f4>)
 800ca98:	a904      	add	r1, sp, #16
 800ca9a:	4638      	mov	r0, r7
 800ca9c:	f7fd fe2e 	bl	800a6fc <_printf_float>
 800caa0:	1c42      	adds	r2, r0, #1
 800caa2:	4606      	mov	r6, r0
 800caa4:	d1d6      	bne.n	800ca54 <_svfiprintf_r+0x174>
 800caa6:	89ab      	ldrh	r3, [r5, #12]
 800caa8:	065b      	lsls	r3, r3, #25
 800caaa:	f53f af2d 	bmi.w	800c908 <_svfiprintf_r+0x28>
 800caae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cab0:	b01d      	add	sp, #116	; 0x74
 800cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab6:	ab03      	add	r3, sp, #12
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	462a      	mov	r2, r5
 800cabc:	4b05      	ldr	r3, [pc, #20]	; (800cad4 <_svfiprintf_r+0x1f4>)
 800cabe:	a904      	add	r1, sp, #16
 800cac0:	4638      	mov	r0, r7
 800cac2:	f7fe f8bf 	bl	800ac44 <_printf_i>
 800cac6:	e7eb      	b.n	800caa0 <_svfiprintf_r+0x1c0>
 800cac8:	0800e6cc 	.word	0x0800e6cc
 800cacc:	0800e6d6 	.word	0x0800e6d6
 800cad0:	0800a6fd 	.word	0x0800a6fd
 800cad4:	0800c82d 	.word	0x0800c82d
 800cad8:	0800e6d2 	.word	0x0800e6d2

0800cadc <__sflush_r>:
 800cadc:	898a      	ldrh	r2, [r1, #12]
 800cade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae2:	4605      	mov	r5, r0
 800cae4:	0710      	lsls	r0, r2, #28
 800cae6:	460c      	mov	r4, r1
 800cae8:	d458      	bmi.n	800cb9c <__sflush_r+0xc0>
 800caea:	684b      	ldr	r3, [r1, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	dc05      	bgt.n	800cafc <__sflush_r+0x20>
 800caf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	dc02      	bgt.n	800cafc <__sflush_r+0x20>
 800caf6:	2000      	movs	r0, #0
 800caf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cafc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cafe:	2e00      	cmp	r6, #0
 800cb00:	d0f9      	beq.n	800caf6 <__sflush_r+0x1a>
 800cb02:	2300      	movs	r3, #0
 800cb04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb08:	682f      	ldr	r7, [r5, #0]
 800cb0a:	6a21      	ldr	r1, [r4, #32]
 800cb0c:	602b      	str	r3, [r5, #0]
 800cb0e:	d032      	beq.n	800cb76 <__sflush_r+0x9a>
 800cb10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	075a      	lsls	r2, r3, #29
 800cb16:	d505      	bpl.n	800cb24 <__sflush_r+0x48>
 800cb18:	6863      	ldr	r3, [r4, #4]
 800cb1a:	1ac0      	subs	r0, r0, r3
 800cb1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb1e:	b10b      	cbz	r3, 800cb24 <__sflush_r+0x48>
 800cb20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb22:	1ac0      	subs	r0, r0, r3
 800cb24:	2300      	movs	r3, #0
 800cb26:	4602      	mov	r2, r0
 800cb28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb2a:	6a21      	ldr	r1, [r4, #32]
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	47b0      	blx	r6
 800cb30:	1c43      	adds	r3, r0, #1
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	d106      	bne.n	800cb44 <__sflush_r+0x68>
 800cb36:	6829      	ldr	r1, [r5, #0]
 800cb38:	291d      	cmp	r1, #29
 800cb3a:	d82b      	bhi.n	800cb94 <__sflush_r+0xb8>
 800cb3c:	4a29      	ldr	r2, [pc, #164]	; (800cbe4 <__sflush_r+0x108>)
 800cb3e:	410a      	asrs	r2, r1
 800cb40:	07d6      	lsls	r6, r2, #31
 800cb42:	d427      	bmi.n	800cb94 <__sflush_r+0xb8>
 800cb44:	2200      	movs	r2, #0
 800cb46:	6062      	str	r2, [r4, #4]
 800cb48:	04d9      	lsls	r1, r3, #19
 800cb4a:	6922      	ldr	r2, [r4, #16]
 800cb4c:	6022      	str	r2, [r4, #0]
 800cb4e:	d504      	bpl.n	800cb5a <__sflush_r+0x7e>
 800cb50:	1c42      	adds	r2, r0, #1
 800cb52:	d101      	bne.n	800cb58 <__sflush_r+0x7c>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	b903      	cbnz	r3, 800cb5a <__sflush_r+0x7e>
 800cb58:	6560      	str	r0, [r4, #84]	; 0x54
 800cb5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb5c:	602f      	str	r7, [r5, #0]
 800cb5e:	2900      	cmp	r1, #0
 800cb60:	d0c9      	beq.n	800caf6 <__sflush_r+0x1a>
 800cb62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb66:	4299      	cmp	r1, r3
 800cb68:	d002      	beq.n	800cb70 <__sflush_r+0x94>
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f7ff f9e2 	bl	800bf34 <_free_r>
 800cb70:	2000      	movs	r0, #0
 800cb72:	6360      	str	r0, [r4, #52]	; 0x34
 800cb74:	e7c0      	b.n	800caf8 <__sflush_r+0x1c>
 800cb76:	2301      	movs	r3, #1
 800cb78:	4628      	mov	r0, r5
 800cb7a:	47b0      	blx	r6
 800cb7c:	1c41      	adds	r1, r0, #1
 800cb7e:	d1c8      	bne.n	800cb12 <__sflush_r+0x36>
 800cb80:	682b      	ldr	r3, [r5, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0c5      	beq.n	800cb12 <__sflush_r+0x36>
 800cb86:	2b1d      	cmp	r3, #29
 800cb88:	d001      	beq.n	800cb8e <__sflush_r+0xb2>
 800cb8a:	2b16      	cmp	r3, #22
 800cb8c:	d101      	bne.n	800cb92 <__sflush_r+0xb6>
 800cb8e:	602f      	str	r7, [r5, #0]
 800cb90:	e7b1      	b.n	800caf6 <__sflush_r+0x1a>
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb98:	81a3      	strh	r3, [r4, #12]
 800cb9a:	e7ad      	b.n	800caf8 <__sflush_r+0x1c>
 800cb9c:	690f      	ldr	r7, [r1, #16]
 800cb9e:	2f00      	cmp	r7, #0
 800cba0:	d0a9      	beq.n	800caf6 <__sflush_r+0x1a>
 800cba2:	0793      	lsls	r3, r2, #30
 800cba4:	680e      	ldr	r6, [r1, #0]
 800cba6:	bf08      	it	eq
 800cba8:	694b      	ldreq	r3, [r1, #20]
 800cbaa:	600f      	str	r7, [r1, #0]
 800cbac:	bf18      	it	ne
 800cbae:	2300      	movne	r3, #0
 800cbb0:	eba6 0807 	sub.w	r8, r6, r7
 800cbb4:	608b      	str	r3, [r1, #8]
 800cbb6:	f1b8 0f00 	cmp.w	r8, #0
 800cbba:	dd9c      	ble.n	800caf6 <__sflush_r+0x1a>
 800cbbc:	6a21      	ldr	r1, [r4, #32]
 800cbbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbc0:	4643      	mov	r3, r8
 800cbc2:	463a      	mov	r2, r7
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	47b0      	blx	r6
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	dc06      	bgt.n	800cbda <__sflush_r+0xfe>
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd2:	81a3      	strh	r3, [r4, #12]
 800cbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd8:	e78e      	b.n	800caf8 <__sflush_r+0x1c>
 800cbda:	4407      	add	r7, r0
 800cbdc:	eba8 0800 	sub.w	r8, r8, r0
 800cbe0:	e7e9      	b.n	800cbb6 <__sflush_r+0xda>
 800cbe2:	bf00      	nop
 800cbe4:	dfbffffe 	.word	0xdfbffffe

0800cbe8 <_fflush_r>:
 800cbe8:	b538      	push	{r3, r4, r5, lr}
 800cbea:	690b      	ldr	r3, [r1, #16]
 800cbec:	4605      	mov	r5, r0
 800cbee:	460c      	mov	r4, r1
 800cbf0:	b913      	cbnz	r3, 800cbf8 <_fflush_r+0x10>
 800cbf2:	2500      	movs	r5, #0
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	bd38      	pop	{r3, r4, r5, pc}
 800cbf8:	b118      	cbz	r0, 800cc02 <_fflush_r+0x1a>
 800cbfa:	6a03      	ldr	r3, [r0, #32]
 800cbfc:	b90b      	cbnz	r3, 800cc02 <_fflush_r+0x1a>
 800cbfe:	f7fe f9cf 	bl	800afa0 <__sinit>
 800cc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d0f3      	beq.n	800cbf2 <_fflush_r+0xa>
 800cc0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc0c:	07d0      	lsls	r0, r2, #31
 800cc0e:	d404      	bmi.n	800cc1a <_fflush_r+0x32>
 800cc10:	0599      	lsls	r1, r3, #22
 800cc12:	d402      	bmi.n	800cc1a <_fflush_r+0x32>
 800cc14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc16:	f7fe fb02 	bl	800b21e <__retarget_lock_acquire_recursive>
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	f7ff ff5d 	bl	800cadc <__sflush_r>
 800cc22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc24:	07da      	lsls	r2, r3, #31
 800cc26:	4605      	mov	r5, r0
 800cc28:	d4e4      	bmi.n	800cbf4 <_fflush_r+0xc>
 800cc2a:	89a3      	ldrh	r3, [r4, #12]
 800cc2c:	059b      	lsls	r3, r3, #22
 800cc2e:	d4e1      	bmi.n	800cbf4 <_fflush_r+0xc>
 800cc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc32:	f7fe faf5 	bl	800b220 <__retarget_lock_release_recursive>
 800cc36:	e7dd      	b.n	800cbf4 <_fflush_r+0xc>

0800cc38 <memmove>:
 800cc38:	4288      	cmp	r0, r1
 800cc3a:	b510      	push	{r4, lr}
 800cc3c:	eb01 0402 	add.w	r4, r1, r2
 800cc40:	d902      	bls.n	800cc48 <memmove+0x10>
 800cc42:	4284      	cmp	r4, r0
 800cc44:	4623      	mov	r3, r4
 800cc46:	d807      	bhi.n	800cc58 <memmove+0x20>
 800cc48:	1e43      	subs	r3, r0, #1
 800cc4a:	42a1      	cmp	r1, r4
 800cc4c:	d008      	beq.n	800cc60 <memmove+0x28>
 800cc4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc56:	e7f8      	b.n	800cc4a <memmove+0x12>
 800cc58:	4402      	add	r2, r0
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	428a      	cmp	r2, r1
 800cc5e:	d100      	bne.n	800cc62 <memmove+0x2a>
 800cc60:	bd10      	pop	{r4, pc}
 800cc62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc6a:	e7f7      	b.n	800cc5c <memmove+0x24>

0800cc6c <_sbrk_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4d06      	ldr	r5, [pc, #24]	; (800cc88 <_sbrk_r+0x1c>)
 800cc70:	2300      	movs	r3, #0
 800cc72:	4604      	mov	r4, r0
 800cc74:	4608      	mov	r0, r1
 800cc76:	602b      	str	r3, [r5, #0]
 800cc78:	f7f8 f93e 	bl	8004ef8 <_sbrk>
 800cc7c:	1c43      	adds	r3, r0, #1
 800cc7e:	d102      	bne.n	800cc86 <_sbrk_r+0x1a>
 800cc80:	682b      	ldr	r3, [r5, #0]
 800cc82:	b103      	cbz	r3, 800cc86 <_sbrk_r+0x1a>
 800cc84:	6023      	str	r3, [r4, #0]
 800cc86:	bd38      	pop	{r3, r4, r5, pc}
 800cc88:	20001eb8 	.word	0x20001eb8

0800cc8c <__assert_func>:
 800cc8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc8e:	4614      	mov	r4, r2
 800cc90:	461a      	mov	r2, r3
 800cc92:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <__assert_func+0x2c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4605      	mov	r5, r0
 800cc98:	68d8      	ldr	r0, [r3, #12]
 800cc9a:	b14c      	cbz	r4, 800ccb0 <__assert_func+0x24>
 800cc9c:	4b07      	ldr	r3, [pc, #28]	; (800ccbc <__assert_func+0x30>)
 800cc9e:	9100      	str	r1, [sp, #0]
 800cca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cca4:	4906      	ldr	r1, [pc, #24]	; (800ccc0 <__assert_func+0x34>)
 800cca6:	462b      	mov	r3, r5
 800cca8:	f000 f872 	bl	800cd90 <fiprintf>
 800ccac:	f000 f882 	bl	800cdb4 <abort>
 800ccb0:	4b04      	ldr	r3, [pc, #16]	; (800ccc4 <__assert_func+0x38>)
 800ccb2:	461c      	mov	r4, r3
 800ccb4:	e7f3      	b.n	800cc9e <__assert_func+0x12>
 800ccb6:	bf00      	nop
 800ccb8:	200005e4 	.word	0x200005e4
 800ccbc:	0800e6e7 	.word	0x0800e6e7
 800ccc0:	0800e6f4 	.word	0x0800e6f4
 800ccc4:	0800e722 	.word	0x0800e722

0800ccc8 <_calloc_r>:
 800ccc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccca:	fba1 2402 	umull	r2, r4, r1, r2
 800ccce:	b94c      	cbnz	r4, 800cce4 <_calloc_r+0x1c>
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	9201      	str	r2, [sp, #4]
 800ccd4:	f7ff f9a2 	bl	800c01c <_malloc_r>
 800ccd8:	9a01      	ldr	r2, [sp, #4]
 800ccda:	4605      	mov	r5, r0
 800ccdc:	b930      	cbnz	r0, 800ccec <_calloc_r+0x24>
 800ccde:	4628      	mov	r0, r5
 800cce0:	b003      	add	sp, #12
 800cce2:	bd30      	pop	{r4, r5, pc}
 800cce4:	220c      	movs	r2, #12
 800cce6:	6002      	str	r2, [r0, #0]
 800cce8:	2500      	movs	r5, #0
 800ccea:	e7f8      	b.n	800ccde <_calloc_r+0x16>
 800ccec:	4621      	mov	r1, r4
 800ccee:	f7fe fa19 	bl	800b124 <memset>
 800ccf2:	e7f4      	b.n	800ccde <_calloc_r+0x16>

0800ccf4 <__ascii_mbtowc>:
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	b901      	cbnz	r1, 800ccfa <__ascii_mbtowc+0x6>
 800ccf8:	a901      	add	r1, sp, #4
 800ccfa:	b142      	cbz	r2, 800cd0e <__ascii_mbtowc+0x1a>
 800ccfc:	b14b      	cbz	r3, 800cd12 <__ascii_mbtowc+0x1e>
 800ccfe:	7813      	ldrb	r3, [r2, #0]
 800cd00:	600b      	str	r3, [r1, #0]
 800cd02:	7812      	ldrb	r2, [r2, #0]
 800cd04:	1e10      	subs	r0, r2, #0
 800cd06:	bf18      	it	ne
 800cd08:	2001      	movne	r0, #1
 800cd0a:	b002      	add	sp, #8
 800cd0c:	4770      	bx	lr
 800cd0e:	4610      	mov	r0, r2
 800cd10:	e7fb      	b.n	800cd0a <__ascii_mbtowc+0x16>
 800cd12:	f06f 0001 	mvn.w	r0, #1
 800cd16:	e7f8      	b.n	800cd0a <__ascii_mbtowc+0x16>

0800cd18 <_realloc_r>:
 800cd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	4614      	mov	r4, r2
 800cd20:	460e      	mov	r6, r1
 800cd22:	b921      	cbnz	r1, 800cd2e <_realloc_r+0x16>
 800cd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd28:	4611      	mov	r1, r2
 800cd2a:	f7ff b977 	b.w	800c01c <_malloc_r>
 800cd2e:	b92a      	cbnz	r2, 800cd3c <_realloc_r+0x24>
 800cd30:	f7ff f900 	bl	800bf34 <_free_r>
 800cd34:	4625      	mov	r5, r4
 800cd36:	4628      	mov	r0, r5
 800cd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd3c:	f000 f841 	bl	800cdc2 <_malloc_usable_size_r>
 800cd40:	4284      	cmp	r4, r0
 800cd42:	4607      	mov	r7, r0
 800cd44:	d802      	bhi.n	800cd4c <_realloc_r+0x34>
 800cd46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd4a:	d812      	bhi.n	800cd72 <_realloc_r+0x5a>
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	4640      	mov	r0, r8
 800cd50:	f7ff f964 	bl	800c01c <_malloc_r>
 800cd54:	4605      	mov	r5, r0
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d0ed      	beq.n	800cd36 <_realloc_r+0x1e>
 800cd5a:	42bc      	cmp	r4, r7
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	4631      	mov	r1, r6
 800cd60:	bf28      	it	cs
 800cd62:	463a      	movcs	r2, r7
 800cd64:	f7fe fa5d 	bl	800b222 <memcpy>
 800cd68:	4631      	mov	r1, r6
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	f7ff f8e2 	bl	800bf34 <_free_r>
 800cd70:	e7e1      	b.n	800cd36 <_realloc_r+0x1e>
 800cd72:	4635      	mov	r5, r6
 800cd74:	e7df      	b.n	800cd36 <_realloc_r+0x1e>

0800cd76 <__ascii_wctomb>:
 800cd76:	b149      	cbz	r1, 800cd8c <__ascii_wctomb+0x16>
 800cd78:	2aff      	cmp	r2, #255	; 0xff
 800cd7a:	bf85      	ittet	hi
 800cd7c:	238a      	movhi	r3, #138	; 0x8a
 800cd7e:	6003      	strhi	r3, [r0, #0]
 800cd80:	700a      	strbls	r2, [r1, #0]
 800cd82:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd86:	bf98      	it	ls
 800cd88:	2001      	movls	r0, #1
 800cd8a:	4770      	bx	lr
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4770      	bx	lr

0800cd90 <fiprintf>:
 800cd90:	b40e      	push	{r1, r2, r3}
 800cd92:	b503      	push	{r0, r1, lr}
 800cd94:	4601      	mov	r1, r0
 800cd96:	ab03      	add	r3, sp, #12
 800cd98:	4805      	ldr	r0, [pc, #20]	; (800cdb0 <fiprintf+0x20>)
 800cd9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd9e:	6800      	ldr	r0, [r0, #0]
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	f000 f83f 	bl	800ce24 <_vfiprintf_r>
 800cda6:	b002      	add	sp, #8
 800cda8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdac:	b003      	add	sp, #12
 800cdae:	4770      	bx	lr
 800cdb0:	200005e4 	.word	0x200005e4

0800cdb4 <abort>:
 800cdb4:	b508      	push	{r3, lr}
 800cdb6:	2006      	movs	r0, #6
 800cdb8:	f000 fa0c 	bl	800d1d4 <raise>
 800cdbc:	2001      	movs	r0, #1
 800cdbe:	f7f8 f86f 	bl	8004ea0 <_exit>

0800cdc2 <_malloc_usable_size_r>:
 800cdc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc6:	1f18      	subs	r0, r3, #4
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	bfbc      	itt	lt
 800cdcc:	580b      	ldrlt	r3, [r1, r0]
 800cdce:	18c0      	addlt	r0, r0, r3
 800cdd0:	4770      	bx	lr

0800cdd2 <__sfputc_r>:
 800cdd2:	6893      	ldr	r3, [r2, #8]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	b410      	push	{r4}
 800cdda:	6093      	str	r3, [r2, #8]
 800cddc:	da08      	bge.n	800cdf0 <__sfputc_r+0x1e>
 800cdde:	6994      	ldr	r4, [r2, #24]
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	db01      	blt.n	800cde8 <__sfputc_r+0x16>
 800cde4:	290a      	cmp	r1, #10
 800cde6:	d103      	bne.n	800cdf0 <__sfputc_r+0x1e>
 800cde8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdec:	f000 b934 	b.w	800d058 <__swbuf_r>
 800cdf0:	6813      	ldr	r3, [r2, #0]
 800cdf2:	1c58      	adds	r0, r3, #1
 800cdf4:	6010      	str	r0, [r2, #0]
 800cdf6:	7019      	strb	r1, [r3, #0]
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <__sfputs_r>:
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	4606      	mov	r6, r0
 800ce04:	460f      	mov	r7, r1
 800ce06:	4614      	mov	r4, r2
 800ce08:	18d5      	adds	r5, r2, r3
 800ce0a:	42ac      	cmp	r4, r5
 800ce0c:	d101      	bne.n	800ce12 <__sfputs_r+0x12>
 800ce0e:	2000      	movs	r0, #0
 800ce10:	e007      	b.n	800ce22 <__sfputs_r+0x22>
 800ce12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce16:	463a      	mov	r2, r7
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7ff ffda 	bl	800cdd2 <__sfputc_r>
 800ce1e:	1c43      	adds	r3, r0, #1
 800ce20:	d1f3      	bne.n	800ce0a <__sfputs_r+0xa>
 800ce22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce24 <_vfiprintf_r>:
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	460d      	mov	r5, r1
 800ce2a:	b09d      	sub	sp, #116	; 0x74
 800ce2c:	4614      	mov	r4, r2
 800ce2e:	4698      	mov	r8, r3
 800ce30:	4606      	mov	r6, r0
 800ce32:	b118      	cbz	r0, 800ce3c <_vfiprintf_r+0x18>
 800ce34:	6a03      	ldr	r3, [r0, #32]
 800ce36:	b90b      	cbnz	r3, 800ce3c <_vfiprintf_r+0x18>
 800ce38:	f7fe f8b2 	bl	800afa0 <__sinit>
 800ce3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce3e:	07d9      	lsls	r1, r3, #31
 800ce40:	d405      	bmi.n	800ce4e <_vfiprintf_r+0x2a>
 800ce42:	89ab      	ldrh	r3, [r5, #12]
 800ce44:	059a      	lsls	r2, r3, #22
 800ce46:	d402      	bmi.n	800ce4e <_vfiprintf_r+0x2a>
 800ce48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce4a:	f7fe f9e8 	bl	800b21e <__retarget_lock_acquire_recursive>
 800ce4e:	89ab      	ldrh	r3, [r5, #12]
 800ce50:	071b      	lsls	r3, r3, #28
 800ce52:	d501      	bpl.n	800ce58 <_vfiprintf_r+0x34>
 800ce54:	692b      	ldr	r3, [r5, #16]
 800ce56:	b99b      	cbnz	r3, 800ce80 <_vfiprintf_r+0x5c>
 800ce58:	4629      	mov	r1, r5
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f000 f93a 	bl	800d0d4 <__swsetup_r>
 800ce60:	b170      	cbz	r0, 800ce80 <_vfiprintf_r+0x5c>
 800ce62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce64:	07dc      	lsls	r4, r3, #31
 800ce66:	d504      	bpl.n	800ce72 <_vfiprintf_r+0x4e>
 800ce68:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6c:	b01d      	add	sp, #116	; 0x74
 800ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce72:	89ab      	ldrh	r3, [r5, #12]
 800ce74:	0598      	lsls	r0, r3, #22
 800ce76:	d4f7      	bmi.n	800ce68 <_vfiprintf_r+0x44>
 800ce78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce7a:	f7fe f9d1 	bl	800b220 <__retarget_lock_release_recursive>
 800ce7e:	e7f3      	b.n	800ce68 <_vfiprintf_r+0x44>
 800ce80:	2300      	movs	r3, #0
 800ce82:	9309      	str	r3, [sp, #36]	; 0x24
 800ce84:	2320      	movs	r3, #32
 800ce86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce8e:	2330      	movs	r3, #48	; 0x30
 800ce90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d044 <_vfiprintf_r+0x220>
 800ce94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce98:	f04f 0901 	mov.w	r9, #1
 800ce9c:	4623      	mov	r3, r4
 800ce9e:	469a      	mov	sl, r3
 800cea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cea4:	b10a      	cbz	r2, 800ceaa <_vfiprintf_r+0x86>
 800cea6:	2a25      	cmp	r2, #37	; 0x25
 800cea8:	d1f9      	bne.n	800ce9e <_vfiprintf_r+0x7a>
 800ceaa:	ebba 0b04 	subs.w	fp, sl, r4
 800ceae:	d00b      	beq.n	800cec8 <_vfiprintf_r+0xa4>
 800ceb0:	465b      	mov	r3, fp
 800ceb2:	4622      	mov	r2, r4
 800ceb4:	4629      	mov	r1, r5
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	f7ff ffa2 	bl	800ce00 <__sfputs_r>
 800cebc:	3001      	adds	r0, #1
 800cebe:	f000 80a9 	beq.w	800d014 <_vfiprintf_r+0x1f0>
 800cec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cec4:	445a      	add	r2, fp
 800cec6:	9209      	str	r2, [sp, #36]	; 0x24
 800cec8:	f89a 3000 	ldrb.w	r3, [sl]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f000 80a1 	beq.w	800d014 <_vfiprintf_r+0x1f0>
 800ced2:	2300      	movs	r3, #0
 800ced4:	f04f 32ff 	mov.w	r2, #4294967295
 800ced8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cedc:	f10a 0a01 	add.w	sl, sl, #1
 800cee0:	9304      	str	r3, [sp, #16]
 800cee2:	9307      	str	r3, [sp, #28]
 800cee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cee8:	931a      	str	r3, [sp, #104]	; 0x68
 800ceea:	4654      	mov	r4, sl
 800ceec:	2205      	movs	r2, #5
 800ceee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cef2:	4854      	ldr	r0, [pc, #336]	; (800d044 <_vfiprintf_r+0x220>)
 800cef4:	f7f3 f994 	bl	8000220 <memchr>
 800cef8:	9a04      	ldr	r2, [sp, #16]
 800cefa:	b9d8      	cbnz	r0, 800cf34 <_vfiprintf_r+0x110>
 800cefc:	06d1      	lsls	r1, r2, #27
 800cefe:	bf44      	itt	mi
 800cf00:	2320      	movmi	r3, #32
 800cf02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf06:	0713      	lsls	r3, r2, #28
 800cf08:	bf44      	itt	mi
 800cf0a:	232b      	movmi	r3, #43	; 0x2b
 800cf0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf10:	f89a 3000 	ldrb.w	r3, [sl]
 800cf14:	2b2a      	cmp	r3, #42	; 0x2a
 800cf16:	d015      	beq.n	800cf44 <_vfiprintf_r+0x120>
 800cf18:	9a07      	ldr	r2, [sp, #28]
 800cf1a:	4654      	mov	r4, sl
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	f04f 0c0a 	mov.w	ip, #10
 800cf22:	4621      	mov	r1, r4
 800cf24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf28:	3b30      	subs	r3, #48	; 0x30
 800cf2a:	2b09      	cmp	r3, #9
 800cf2c:	d94d      	bls.n	800cfca <_vfiprintf_r+0x1a6>
 800cf2e:	b1b0      	cbz	r0, 800cf5e <_vfiprintf_r+0x13a>
 800cf30:	9207      	str	r2, [sp, #28]
 800cf32:	e014      	b.n	800cf5e <_vfiprintf_r+0x13a>
 800cf34:	eba0 0308 	sub.w	r3, r0, r8
 800cf38:	fa09 f303 	lsl.w	r3, r9, r3
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	9304      	str	r3, [sp, #16]
 800cf40:	46a2      	mov	sl, r4
 800cf42:	e7d2      	b.n	800ceea <_vfiprintf_r+0xc6>
 800cf44:	9b03      	ldr	r3, [sp, #12]
 800cf46:	1d19      	adds	r1, r3, #4
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	9103      	str	r1, [sp, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	bfbb      	ittet	lt
 800cf50:	425b      	neglt	r3, r3
 800cf52:	f042 0202 	orrlt.w	r2, r2, #2
 800cf56:	9307      	strge	r3, [sp, #28]
 800cf58:	9307      	strlt	r3, [sp, #28]
 800cf5a:	bfb8      	it	lt
 800cf5c:	9204      	strlt	r2, [sp, #16]
 800cf5e:	7823      	ldrb	r3, [r4, #0]
 800cf60:	2b2e      	cmp	r3, #46	; 0x2e
 800cf62:	d10c      	bne.n	800cf7e <_vfiprintf_r+0x15a>
 800cf64:	7863      	ldrb	r3, [r4, #1]
 800cf66:	2b2a      	cmp	r3, #42	; 0x2a
 800cf68:	d134      	bne.n	800cfd4 <_vfiprintf_r+0x1b0>
 800cf6a:	9b03      	ldr	r3, [sp, #12]
 800cf6c:	1d1a      	adds	r2, r3, #4
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	9203      	str	r2, [sp, #12]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bfb8      	it	lt
 800cf76:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf7a:	3402      	adds	r4, #2
 800cf7c:	9305      	str	r3, [sp, #20]
 800cf7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d054 <_vfiprintf_r+0x230>
 800cf82:	7821      	ldrb	r1, [r4, #0]
 800cf84:	2203      	movs	r2, #3
 800cf86:	4650      	mov	r0, sl
 800cf88:	f7f3 f94a 	bl	8000220 <memchr>
 800cf8c:	b138      	cbz	r0, 800cf9e <_vfiprintf_r+0x17a>
 800cf8e:	9b04      	ldr	r3, [sp, #16]
 800cf90:	eba0 000a 	sub.w	r0, r0, sl
 800cf94:	2240      	movs	r2, #64	; 0x40
 800cf96:	4082      	lsls	r2, r0
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	3401      	adds	r4, #1
 800cf9c:	9304      	str	r3, [sp, #16]
 800cf9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa2:	4829      	ldr	r0, [pc, #164]	; (800d048 <_vfiprintf_r+0x224>)
 800cfa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfa8:	2206      	movs	r2, #6
 800cfaa:	f7f3 f939 	bl	8000220 <memchr>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d03f      	beq.n	800d032 <_vfiprintf_r+0x20e>
 800cfb2:	4b26      	ldr	r3, [pc, #152]	; (800d04c <_vfiprintf_r+0x228>)
 800cfb4:	bb1b      	cbnz	r3, 800cffe <_vfiprintf_r+0x1da>
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	3307      	adds	r3, #7
 800cfba:	f023 0307 	bic.w	r3, r3, #7
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	9303      	str	r3, [sp, #12]
 800cfc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfc4:	443b      	add	r3, r7
 800cfc6:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc8:	e768      	b.n	800ce9c <_vfiprintf_r+0x78>
 800cfca:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfce:	460c      	mov	r4, r1
 800cfd0:	2001      	movs	r0, #1
 800cfd2:	e7a6      	b.n	800cf22 <_vfiprintf_r+0xfe>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	3401      	adds	r4, #1
 800cfd8:	9305      	str	r3, [sp, #20]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	f04f 0c0a 	mov.w	ip, #10
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfe6:	3a30      	subs	r2, #48	; 0x30
 800cfe8:	2a09      	cmp	r2, #9
 800cfea:	d903      	bls.n	800cff4 <_vfiprintf_r+0x1d0>
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d0c6      	beq.n	800cf7e <_vfiprintf_r+0x15a>
 800cff0:	9105      	str	r1, [sp, #20]
 800cff2:	e7c4      	b.n	800cf7e <_vfiprintf_r+0x15a>
 800cff4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cff8:	4604      	mov	r4, r0
 800cffa:	2301      	movs	r3, #1
 800cffc:	e7f0      	b.n	800cfe0 <_vfiprintf_r+0x1bc>
 800cffe:	ab03      	add	r3, sp, #12
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	462a      	mov	r2, r5
 800d004:	4b12      	ldr	r3, [pc, #72]	; (800d050 <_vfiprintf_r+0x22c>)
 800d006:	a904      	add	r1, sp, #16
 800d008:	4630      	mov	r0, r6
 800d00a:	f7fd fb77 	bl	800a6fc <_printf_float>
 800d00e:	4607      	mov	r7, r0
 800d010:	1c78      	adds	r0, r7, #1
 800d012:	d1d6      	bne.n	800cfc2 <_vfiprintf_r+0x19e>
 800d014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d016:	07d9      	lsls	r1, r3, #31
 800d018:	d405      	bmi.n	800d026 <_vfiprintf_r+0x202>
 800d01a:	89ab      	ldrh	r3, [r5, #12]
 800d01c:	059a      	lsls	r2, r3, #22
 800d01e:	d402      	bmi.n	800d026 <_vfiprintf_r+0x202>
 800d020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d022:	f7fe f8fd 	bl	800b220 <__retarget_lock_release_recursive>
 800d026:	89ab      	ldrh	r3, [r5, #12]
 800d028:	065b      	lsls	r3, r3, #25
 800d02a:	f53f af1d 	bmi.w	800ce68 <_vfiprintf_r+0x44>
 800d02e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d030:	e71c      	b.n	800ce6c <_vfiprintf_r+0x48>
 800d032:	ab03      	add	r3, sp, #12
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	462a      	mov	r2, r5
 800d038:	4b05      	ldr	r3, [pc, #20]	; (800d050 <_vfiprintf_r+0x22c>)
 800d03a:	a904      	add	r1, sp, #16
 800d03c:	4630      	mov	r0, r6
 800d03e:	f7fd fe01 	bl	800ac44 <_printf_i>
 800d042:	e7e4      	b.n	800d00e <_vfiprintf_r+0x1ea>
 800d044:	0800e6cc 	.word	0x0800e6cc
 800d048:	0800e6d6 	.word	0x0800e6d6
 800d04c:	0800a6fd 	.word	0x0800a6fd
 800d050:	0800ce01 	.word	0x0800ce01
 800d054:	0800e6d2 	.word	0x0800e6d2

0800d058 <__swbuf_r>:
 800d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05a:	460e      	mov	r6, r1
 800d05c:	4614      	mov	r4, r2
 800d05e:	4605      	mov	r5, r0
 800d060:	b118      	cbz	r0, 800d06a <__swbuf_r+0x12>
 800d062:	6a03      	ldr	r3, [r0, #32]
 800d064:	b90b      	cbnz	r3, 800d06a <__swbuf_r+0x12>
 800d066:	f7fd ff9b 	bl	800afa0 <__sinit>
 800d06a:	69a3      	ldr	r3, [r4, #24]
 800d06c:	60a3      	str	r3, [r4, #8]
 800d06e:	89a3      	ldrh	r3, [r4, #12]
 800d070:	071a      	lsls	r2, r3, #28
 800d072:	d525      	bpl.n	800d0c0 <__swbuf_r+0x68>
 800d074:	6923      	ldr	r3, [r4, #16]
 800d076:	b31b      	cbz	r3, 800d0c0 <__swbuf_r+0x68>
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	6922      	ldr	r2, [r4, #16]
 800d07c:	1a98      	subs	r0, r3, r2
 800d07e:	6963      	ldr	r3, [r4, #20]
 800d080:	b2f6      	uxtb	r6, r6
 800d082:	4283      	cmp	r3, r0
 800d084:	4637      	mov	r7, r6
 800d086:	dc04      	bgt.n	800d092 <__swbuf_r+0x3a>
 800d088:	4621      	mov	r1, r4
 800d08a:	4628      	mov	r0, r5
 800d08c:	f7ff fdac 	bl	800cbe8 <_fflush_r>
 800d090:	b9e0      	cbnz	r0, 800d0cc <__swbuf_r+0x74>
 800d092:	68a3      	ldr	r3, [r4, #8]
 800d094:	3b01      	subs	r3, #1
 800d096:	60a3      	str	r3, [r4, #8]
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	6022      	str	r2, [r4, #0]
 800d09e:	701e      	strb	r6, [r3, #0]
 800d0a0:	6962      	ldr	r2, [r4, #20]
 800d0a2:	1c43      	adds	r3, r0, #1
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d004      	beq.n	800d0b2 <__swbuf_r+0x5a>
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	07db      	lsls	r3, r3, #31
 800d0ac:	d506      	bpl.n	800d0bc <__swbuf_r+0x64>
 800d0ae:	2e0a      	cmp	r6, #10
 800d0b0:	d104      	bne.n	800d0bc <__swbuf_r+0x64>
 800d0b2:	4621      	mov	r1, r4
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	f7ff fd97 	bl	800cbe8 <_fflush_r>
 800d0ba:	b938      	cbnz	r0, 800d0cc <__swbuf_r+0x74>
 800d0bc:	4638      	mov	r0, r7
 800d0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f000 f806 	bl	800d0d4 <__swsetup_r>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d0d5      	beq.n	800d078 <__swbuf_r+0x20>
 800d0cc:	f04f 37ff 	mov.w	r7, #4294967295
 800d0d0:	e7f4      	b.n	800d0bc <__swbuf_r+0x64>
	...

0800d0d4 <__swsetup_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4b2a      	ldr	r3, [pc, #168]	; (800d180 <__swsetup_r+0xac>)
 800d0d8:	4605      	mov	r5, r0
 800d0da:	6818      	ldr	r0, [r3, #0]
 800d0dc:	460c      	mov	r4, r1
 800d0de:	b118      	cbz	r0, 800d0e8 <__swsetup_r+0x14>
 800d0e0:	6a03      	ldr	r3, [r0, #32]
 800d0e2:	b90b      	cbnz	r3, 800d0e8 <__swsetup_r+0x14>
 800d0e4:	f7fd ff5c 	bl	800afa0 <__sinit>
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0ee:	0718      	lsls	r0, r3, #28
 800d0f0:	d422      	bmi.n	800d138 <__swsetup_r+0x64>
 800d0f2:	06d9      	lsls	r1, r3, #27
 800d0f4:	d407      	bmi.n	800d106 <__swsetup_r+0x32>
 800d0f6:	2309      	movs	r3, #9
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	f04f 30ff 	mov.w	r0, #4294967295
 800d104:	e034      	b.n	800d170 <__swsetup_r+0x9c>
 800d106:	0758      	lsls	r0, r3, #29
 800d108:	d512      	bpl.n	800d130 <__swsetup_r+0x5c>
 800d10a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d10c:	b141      	cbz	r1, 800d120 <__swsetup_r+0x4c>
 800d10e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d112:	4299      	cmp	r1, r3
 800d114:	d002      	beq.n	800d11c <__swsetup_r+0x48>
 800d116:	4628      	mov	r0, r5
 800d118:	f7fe ff0c 	bl	800bf34 <_free_r>
 800d11c:	2300      	movs	r3, #0
 800d11e:	6363      	str	r3, [r4, #52]	; 0x34
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	2300      	movs	r3, #0
 800d12a:	6063      	str	r3, [r4, #4]
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	6023      	str	r3, [r4, #0]
 800d130:	89a3      	ldrh	r3, [r4, #12]
 800d132:	f043 0308 	orr.w	r3, r3, #8
 800d136:	81a3      	strh	r3, [r4, #12]
 800d138:	6923      	ldr	r3, [r4, #16]
 800d13a:	b94b      	cbnz	r3, 800d150 <__swsetup_r+0x7c>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d146:	d003      	beq.n	800d150 <__swsetup_r+0x7c>
 800d148:	4621      	mov	r1, r4
 800d14a:	4628      	mov	r0, r5
 800d14c:	f000 f884 	bl	800d258 <__smakebuf_r>
 800d150:	89a0      	ldrh	r0, [r4, #12]
 800d152:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d156:	f010 0301 	ands.w	r3, r0, #1
 800d15a:	d00a      	beq.n	800d172 <__swsetup_r+0x9e>
 800d15c:	2300      	movs	r3, #0
 800d15e:	60a3      	str	r3, [r4, #8]
 800d160:	6963      	ldr	r3, [r4, #20]
 800d162:	425b      	negs	r3, r3
 800d164:	61a3      	str	r3, [r4, #24]
 800d166:	6923      	ldr	r3, [r4, #16]
 800d168:	b943      	cbnz	r3, 800d17c <__swsetup_r+0xa8>
 800d16a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d16e:	d1c4      	bne.n	800d0fa <__swsetup_r+0x26>
 800d170:	bd38      	pop	{r3, r4, r5, pc}
 800d172:	0781      	lsls	r1, r0, #30
 800d174:	bf58      	it	pl
 800d176:	6963      	ldrpl	r3, [r4, #20]
 800d178:	60a3      	str	r3, [r4, #8]
 800d17a:	e7f4      	b.n	800d166 <__swsetup_r+0x92>
 800d17c:	2000      	movs	r0, #0
 800d17e:	e7f7      	b.n	800d170 <__swsetup_r+0x9c>
 800d180:	200005e4 	.word	0x200005e4

0800d184 <_raise_r>:
 800d184:	291f      	cmp	r1, #31
 800d186:	b538      	push	{r3, r4, r5, lr}
 800d188:	4604      	mov	r4, r0
 800d18a:	460d      	mov	r5, r1
 800d18c:	d904      	bls.n	800d198 <_raise_r+0x14>
 800d18e:	2316      	movs	r3, #22
 800d190:	6003      	str	r3, [r0, #0]
 800d192:	f04f 30ff 	mov.w	r0, #4294967295
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d19a:	b112      	cbz	r2, 800d1a2 <_raise_r+0x1e>
 800d19c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1a0:	b94b      	cbnz	r3, 800d1b6 <_raise_r+0x32>
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 f830 	bl	800d208 <_getpid_r>
 800d1a8:	462a      	mov	r2, r5
 800d1aa:	4601      	mov	r1, r0
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b2:	f000 b817 	b.w	800d1e4 <_kill_r>
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d00a      	beq.n	800d1d0 <_raise_r+0x4c>
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	d103      	bne.n	800d1c6 <_raise_r+0x42>
 800d1be:	2316      	movs	r3, #22
 800d1c0:	6003      	str	r3, [r0, #0]
 800d1c2:	2001      	movs	r0, #1
 800d1c4:	e7e7      	b.n	800d196 <_raise_r+0x12>
 800d1c6:	2400      	movs	r4, #0
 800d1c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	4798      	blx	r3
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	e7e0      	b.n	800d196 <_raise_r+0x12>

0800d1d4 <raise>:
 800d1d4:	4b02      	ldr	r3, [pc, #8]	; (800d1e0 <raise+0xc>)
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	6818      	ldr	r0, [r3, #0]
 800d1da:	f7ff bfd3 	b.w	800d184 <_raise_r>
 800d1de:	bf00      	nop
 800d1e0:	200005e4 	.word	0x200005e4

0800d1e4 <_kill_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4d07      	ldr	r5, [pc, #28]	; (800d204 <_kill_r+0x20>)
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	f7f7 fe4d 	bl	8004e90 <_kill>
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	d102      	bne.n	800d200 <_kill_r+0x1c>
 800d1fa:	682b      	ldr	r3, [r5, #0]
 800d1fc:	b103      	cbz	r3, 800d200 <_kill_r+0x1c>
 800d1fe:	6023      	str	r3, [r4, #0]
 800d200:	bd38      	pop	{r3, r4, r5, pc}
 800d202:	bf00      	nop
 800d204:	20001eb8 	.word	0x20001eb8

0800d208 <_getpid_r>:
 800d208:	f7f7 be40 	b.w	8004e8c <_getpid>

0800d20c <__swhatbuf_r>:
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	460c      	mov	r4, r1
 800d210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d214:	2900      	cmp	r1, #0
 800d216:	b096      	sub	sp, #88	; 0x58
 800d218:	4615      	mov	r5, r2
 800d21a:	461e      	mov	r6, r3
 800d21c:	da0d      	bge.n	800d23a <__swhatbuf_r+0x2e>
 800d21e:	89a3      	ldrh	r3, [r4, #12]
 800d220:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d224:	f04f 0100 	mov.w	r1, #0
 800d228:	bf0c      	ite	eq
 800d22a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d22e:	2340      	movne	r3, #64	; 0x40
 800d230:	2000      	movs	r0, #0
 800d232:	6031      	str	r1, [r6, #0]
 800d234:	602b      	str	r3, [r5, #0]
 800d236:	b016      	add	sp, #88	; 0x58
 800d238:	bd70      	pop	{r4, r5, r6, pc}
 800d23a:	466a      	mov	r2, sp
 800d23c:	f000 f848 	bl	800d2d0 <_fstat_r>
 800d240:	2800      	cmp	r0, #0
 800d242:	dbec      	blt.n	800d21e <__swhatbuf_r+0x12>
 800d244:	9901      	ldr	r1, [sp, #4]
 800d246:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d24a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d24e:	4259      	negs	r1, r3
 800d250:	4159      	adcs	r1, r3
 800d252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d256:	e7eb      	b.n	800d230 <__swhatbuf_r+0x24>

0800d258 <__smakebuf_r>:
 800d258:	898b      	ldrh	r3, [r1, #12]
 800d25a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d25c:	079d      	lsls	r5, r3, #30
 800d25e:	4606      	mov	r6, r0
 800d260:	460c      	mov	r4, r1
 800d262:	d507      	bpl.n	800d274 <__smakebuf_r+0x1c>
 800d264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d268:	6023      	str	r3, [r4, #0]
 800d26a:	6123      	str	r3, [r4, #16]
 800d26c:	2301      	movs	r3, #1
 800d26e:	6163      	str	r3, [r4, #20]
 800d270:	b002      	add	sp, #8
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	ab01      	add	r3, sp, #4
 800d276:	466a      	mov	r2, sp
 800d278:	f7ff ffc8 	bl	800d20c <__swhatbuf_r>
 800d27c:	9900      	ldr	r1, [sp, #0]
 800d27e:	4605      	mov	r5, r0
 800d280:	4630      	mov	r0, r6
 800d282:	f7fe fecb 	bl	800c01c <_malloc_r>
 800d286:	b948      	cbnz	r0, 800d29c <__smakebuf_r+0x44>
 800d288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d28c:	059a      	lsls	r2, r3, #22
 800d28e:	d4ef      	bmi.n	800d270 <__smakebuf_r+0x18>
 800d290:	f023 0303 	bic.w	r3, r3, #3
 800d294:	f043 0302 	orr.w	r3, r3, #2
 800d298:	81a3      	strh	r3, [r4, #12]
 800d29a:	e7e3      	b.n	800d264 <__smakebuf_r+0xc>
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	6020      	str	r0, [r4, #0]
 800d2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a4:	81a3      	strh	r3, [r4, #12]
 800d2a6:	9b00      	ldr	r3, [sp, #0]
 800d2a8:	6163      	str	r3, [r4, #20]
 800d2aa:	9b01      	ldr	r3, [sp, #4]
 800d2ac:	6120      	str	r0, [r4, #16]
 800d2ae:	b15b      	cbz	r3, 800d2c8 <__smakebuf_r+0x70>
 800d2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2b4:	4630      	mov	r0, r6
 800d2b6:	f000 f81d 	bl	800d2f4 <_isatty_r>
 800d2ba:	b128      	cbz	r0, 800d2c8 <__smakebuf_r+0x70>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	f023 0303 	bic.w	r3, r3, #3
 800d2c2:	f043 0301 	orr.w	r3, r3, #1
 800d2c6:	81a3      	strh	r3, [r4, #12]
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	431d      	orrs	r5, r3
 800d2cc:	81a5      	strh	r5, [r4, #12]
 800d2ce:	e7cf      	b.n	800d270 <__smakebuf_r+0x18>

0800d2d0 <_fstat_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	4d07      	ldr	r5, [pc, #28]	; (800d2f0 <_fstat_r+0x20>)
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	4608      	mov	r0, r1
 800d2da:	4611      	mov	r1, r2
 800d2dc:	602b      	str	r3, [r5, #0]
 800d2de:	f7f7 fe02 	bl	8004ee6 <_fstat>
 800d2e2:	1c43      	adds	r3, r0, #1
 800d2e4:	d102      	bne.n	800d2ec <_fstat_r+0x1c>
 800d2e6:	682b      	ldr	r3, [r5, #0]
 800d2e8:	b103      	cbz	r3, 800d2ec <_fstat_r+0x1c>
 800d2ea:	6023      	str	r3, [r4, #0]
 800d2ec:	bd38      	pop	{r3, r4, r5, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20001eb8 	.word	0x20001eb8

0800d2f4 <_isatty_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4d06      	ldr	r5, [pc, #24]	; (800d310 <_isatty_r+0x1c>)
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	602b      	str	r3, [r5, #0]
 800d300:	f7f7 fdf6 	bl	8004ef0 <_isatty>
 800d304:	1c43      	adds	r3, r0, #1
 800d306:	d102      	bne.n	800d30e <_isatty_r+0x1a>
 800d308:	682b      	ldr	r3, [r5, #0]
 800d30a:	b103      	cbz	r3, 800d30e <_isatty_r+0x1a>
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	bd38      	pop	{r3, r4, r5, pc}
 800d310:	20001eb8 	.word	0x20001eb8

0800d314 <fmod>:
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d316:	ed2d 8b02 	vpush	{d8}
 800d31a:	ec57 6b10 	vmov	r6, r7, d0
 800d31e:	ec55 4b11 	vmov	r4, r5, d1
 800d322:	f000 f9b5 	bl	800d690 <__ieee754_fmod>
 800d326:	4622      	mov	r2, r4
 800d328:	462b      	mov	r3, r5
 800d32a:	4630      	mov	r0, r6
 800d32c:	4639      	mov	r1, r7
 800d32e:	eeb0 8a40 	vmov.f32	s16, s0
 800d332:	eef0 8a60 	vmov.f32	s17, s1
 800d336:	f7f3 fc21 	bl	8000b7c <__aeabi_dcmpun>
 800d33a:	b990      	cbnz	r0, 800d362 <fmod+0x4e>
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	4620      	mov	r0, r4
 800d342:	4629      	mov	r1, r5
 800d344:	f7f3 fbe8 	bl	8000b18 <__aeabi_dcmpeq>
 800d348:	b158      	cbz	r0, 800d362 <fmod+0x4e>
 800d34a:	f7fd ff3d 	bl	800b1c8 <__errno>
 800d34e:	2321      	movs	r3, #33	; 0x21
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	2200      	movs	r2, #0
 800d354:	2300      	movs	r3, #0
 800d356:	4610      	mov	r0, r2
 800d358:	4619      	mov	r1, r3
 800d35a:	f7f3 fa9f 	bl	800089c <__aeabi_ddiv>
 800d35e:	ec41 0b18 	vmov	d8, r0, r1
 800d362:	eeb0 0a48 	vmov.f32	s0, s16
 800d366:	eef0 0a68 	vmov.f32	s1, s17
 800d36a:	ecbd 8b02 	vpop	{d8}
 800d36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d370 <sqrt>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	ed2d 8b02 	vpush	{d8}
 800d376:	ec55 4b10 	vmov	r4, r5, d0
 800d37a:	f000 f8af 	bl	800d4dc <__ieee754_sqrt>
 800d37e:	4622      	mov	r2, r4
 800d380:	462b      	mov	r3, r5
 800d382:	4620      	mov	r0, r4
 800d384:	4629      	mov	r1, r5
 800d386:	eeb0 8a40 	vmov.f32	s16, s0
 800d38a:	eef0 8a60 	vmov.f32	s17, s1
 800d38e:	f7f3 fbf5 	bl	8000b7c <__aeabi_dcmpun>
 800d392:	b990      	cbnz	r0, 800d3ba <sqrt+0x4a>
 800d394:	2200      	movs	r2, #0
 800d396:	2300      	movs	r3, #0
 800d398:	4620      	mov	r0, r4
 800d39a:	4629      	mov	r1, r5
 800d39c:	f7f3 fbc6 	bl	8000b2c <__aeabi_dcmplt>
 800d3a0:	b158      	cbz	r0, 800d3ba <sqrt+0x4a>
 800d3a2:	f7fd ff11 	bl	800b1c8 <__errno>
 800d3a6:	2321      	movs	r3, #33	; 0x21
 800d3a8:	6003      	str	r3, [r0, #0]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	4610      	mov	r0, r2
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	f7f3 fa73 	bl	800089c <__aeabi_ddiv>
 800d3b6:	ec41 0b18 	vmov	d8, r0, r1
 800d3ba:	eeb0 0a48 	vmov.f32	s0, s16
 800d3be:	eef0 0a68 	vmov.f32	s1, s17
 800d3c2:	ecbd 8b02 	vpop	{d8}
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}

0800d3c8 <cosf>:
 800d3c8:	ee10 3a10 	vmov	r3, s0
 800d3cc:	b507      	push	{r0, r1, r2, lr}
 800d3ce:	4a1e      	ldr	r2, [pc, #120]	; (800d448 <cosf+0x80>)
 800d3d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	dc06      	bgt.n	800d3e6 <cosf+0x1e>
 800d3d8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800d44c <cosf+0x84>
 800d3dc:	b003      	add	sp, #12
 800d3de:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3e2:	f000 ba63 	b.w	800d8ac <__kernel_cosf>
 800d3e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d3ea:	db04      	blt.n	800d3f6 <cosf+0x2e>
 800d3ec:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d3f0:	b003      	add	sp, #12
 800d3f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3f6:	4668      	mov	r0, sp
 800d3f8:	f000 fafe 	bl	800d9f8 <__ieee754_rem_pio2f>
 800d3fc:	f000 0003 	and.w	r0, r0, #3
 800d400:	2801      	cmp	r0, #1
 800d402:	d009      	beq.n	800d418 <cosf+0x50>
 800d404:	2802      	cmp	r0, #2
 800d406:	d010      	beq.n	800d42a <cosf+0x62>
 800d408:	b9b0      	cbnz	r0, 800d438 <cosf+0x70>
 800d40a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d40e:	ed9d 0a00 	vldr	s0, [sp]
 800d412:	f000 fa4b 	bl	800d8ac <__kernel_cosf>
 800d416:	e7eb      	b.n	800d3f0 <cosf+0x28>
 800d418:	eddd 0a01 	vldr	s1, [sp, #4]
 800d41c:	ed9d 0a00 	vldr	s0, [sp]
 800d420:	f000 faa2 	bl	800d968 <__kernel_sinf>
 800d424:	eeb1 0a40 	vneg.f32	s0, s0
 800d428:	e7e2      	b.n	800d3f0 <cosf+0x28>
 800d42a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d42e:	ed9d 0a00 	vldr	s0, [sp]
 800d432:	f000 fa3b 	bl	800d8ac <__kernel_cosf>
 800d436:	e7f5      	b.n	800d424 <cosf+0x5c>
 800d438:	eddd 0a01 	vldr	s1, [sp, #4]
 800d43c:	ed9d 0a00 	vldr	s0, [sp]
 800d440:	2001      	movs	r0, #1
 800d442:	f000 fa91 	bl	800d968 <__kernel_sinf>
 800d446:	e7d3      	b.n	800d3f0 <cosf+0x28>
 800d448:	3f490fd8 	.word	0x3f490fd8
 800d44c:	00000000 	.word	0x00000000

0800d450 <sinf>:
 800d450:	ee10 3a10 	vmov	r3, s0
 800d454:	b507      	push	{r0, r1, r2, lr}
 800d456:	4a1f      	ldr	r2, [pc, #124]	; (800d4d4 <sinf+0x84>)
 800d458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d45c:	4293      	cmp	r3, r2
 800d45e:	dc07      	bgt.n	800d470 <sinf+0x20>
 800d460:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800d4d8 <sinf+0x88>
 800d464:	2000      	movs	r0, #0
 800d466:	b003      	add	sp, #12
 800d468:	f85d eb04 	ldr.w	lr, [sp], #4
 800d46c:	f000 ba7c 	b.w	800d968 <__kernel_sinf>
 800d470:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d474:	db04      	blt.n	800d480 <sinf+0x30>
 800d476:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d47a:	b003      	add	sp, #12
 800d47c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d480:	4668      	mov	r0, sp
 800d482:	f000 fab9 	bl	800d9f8 <__ieee754_rem_pio2f>
 800d486:	f000 0003 	and.w	r0, r0, #3
 800d48a:	2801      	cmp	r0, #1
 800d48c:	d00a      	beq.n	800d4a4 <sinf+0x54>
 800d48e:	2802      	cmp	r0, #2
 800d490:	d00f      	beq.n	800d4b2 <sinf+0x62>
 800d492:	b9c0      	cbnz	r0, 800d4c6 <sinf+0x76>
 800d494:	eddd 0a01 	vldr	s1, [sp, #4]
 800d498:	ed9d 0a00 	vldr	s0, [sp]
 800d49c:	2001      	movs	r0, #1
 800d49e:	f000 fa63 	bl	800d968 <__kernel_sinf>
 800d4a2:	e7ea      	b.n	800d47a <sinf+0x2a>
 800d4a4:	eddd 0a01 	vldr	s1, [sp, #4]
 800d4a8:	ed9d 0a00 	vldr	s0, [sp]
 800d4ac:	f000 f9fe 	bl	800d8ac <__kernel_cosf>
 800d4b0:	e7e3      	b.n	800d47a <sinf+0x2a>
 800d4b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d4b6:	ed9d 0a00 	vldr	s0, [sp]
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	f000 fa54 	bl	800d968 <__kernel_sinf>
 800d4c0:	eeb1 0a40 	vneg.f32	s0, s0
 800d4c4:	e7d9      	b.n	800d47a <sinf+0x2a>
 800d4c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d4ca:	ed9d 0a00 	vldr	s0, [sp]
 800d4ce:	f000 f9ed 	bl	800d8ac <__kernel_cosf>
 800d4d2:	e7f5      	b.n	800d4c0 <sinf+0x70>
 800d4d4:	3f490fd8 	.word	0x3f490fd8
 800d4d8:	00000000 	.word	0x00000000

0800d4dc <__ieee754_sqrt>:
 800d4dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e0:	ec55 4b10 	vmov	r4, r5, d0
 800d4e4:	4e67      	ldr	r6, [pc, #412]	; (800d684 <__ieee754_sqrt+0x1a8>)
 800d4e6:	43ae      	bics	r6, r5
 800d4e8:	ee10 0a10 	vmov	r0, s0
 800d4ec:	ee10 2a10 	vmov	r2, s0
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	462b      	mov	r3, r5
 800d4f4:	d10d      	bne.n	800d512 <__ieee754_sqrt+0x36>
 800d4f6:	f7f3 f8a7 	bl	8000648 <__aeabi_dmul>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	4620      	mov	r0, r4
 800d500:	4629      	mov	r1, r5
 800d502:	f7f2 feeb 	bl	80002dc <__adddf3>
 800d506:	4604      	mov	r4, r0
 800d508:	460d      	mov	r5, r1
 800d50a:	ec45 4b10 	vmov	d0, r4, r5
 800d50e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d512:	2d00      	cmp	r5, #0
 800d514:	dc0b      	bgt.n	800d52e <__ieee754_sqrt+0x52>
 800d516:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d51a:	4326      	orrs	r6, r4
 800d51c:	d0f5      	beq.n	800d50a <__ieee754_sqrt+0x2e>
 800d51e:	b135      	cbz	r5, 800d52e <__ieee754_sqrt+0x52>
 800d520:	f7f2 feda 	bl	80002d8 <__aeabi_dsub>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	f7f3 f9b8 	bl	800089c <__aeabi_ddiv>
 800d52c:	e7eb      	b.n	800d506 <__ieee754_sqrt+0x2a>
 800d52e:	1509      	asrs	r1, r1, #20
 800d530:	f000 808d 	beq.w	800d64e <__ieee754_sqrt+0x172>
 800d534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d538:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d53c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d540:	07c9      	lsls	r1, r1, #31
 800d542:	bf5c      	itt	pl
 800d544:	005b      	lslpl	r3, r3, #1
 800d546:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d54a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d54e:	bf58      	it	pl
 800d550:	0052      	lslpl	r2, r2, #1
 800d552:	2500      	movs	r5, #0
 800d554:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d558:	1076      	asrs	r6, r6, #1
 800d55a:	0052      	lsls	r2, r2, #1
 800d55c:	f04f 0e16 	mov.w	lr, #22
 800d560:	46ac      	mov	ip, r5
 800d562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d566:	eb0c 0001 	add.w	r0, ip, r1
 800d56a:	4298      	cmp	r0, r3
 800d56c:	bfde      	ittt	le
 800d56e:	1a1b      	suble	r3, r3, r0
 800d570:	eb00 0c01 	addle.w	ip, r0, r1
 800d574:	186d      	addle	r5, r5, r1
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	f1be 0e01 	subs.w	lr, lr, #1
 800d57c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d580:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d584:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d588:	d1ed      	bne.n	800d566 <__ieee754_sqrt+0x8a>
 800d58a:	4674      	mov	r4, lr
 800d58c:	2720      	movs	r7, #32
 800d58e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d592:	4563      	cmp	r3, ip
 800d594:	eb01 000e 	add.w	r0, r1, lr
 800d598:	dc02      	bgt.n	800d5a0 <__ieee754_sqrt+0xc4>
 800d59a:	d113      	bne.n	800d5c4 <__ieee754_sqrt+0xe8>
 800d59c:	4290      	cmp	r0, r2
 800d59e:	d811      	bhi.n	800d5c4 <__ieee754_sqrt+0xe8>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	eb00 0e01 	add.w	lr, r0, r1
 800d5a6:	da57      	bge.n	800d658 <__ieee754_sqrt+0x17c>
 800d5a8:	f1be 0f00 	cmp.w	lr, #0
 800d5ac:	db54      	blt.n	800d658 <__ieee754_sqrt+0x17c>
 800d5ae:	f10c 0801 	add.w	r8, ip, #1
 800d5b2:	eba3 030c 	sub.w	r3, r3, ip
 800d5b6:	4290      	cmp	r0, r2
 800d5b8:	bf88      	it	hi
 800d5ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d5be:	1a12      	subs	r2, r2, r0
 800d5c0:	440c      	add	r4, r1
 800d5c2:	46c4      	mov	ip, r8
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	3f01      	subs	r7, #1
 800d5c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d5cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d5d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d5d4:	d1dd      	bne.n	800d592 <__ieee754_sqrt+0xb6>
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	d01b      	beq.n	800d612 <__ieee754_sqrt+0x136>
 800d5da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d688 <__ieee754_sqrt+0x1ac>
 800d5de:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d68c <__ieee754_sqrt+0x1b0>
 800d5e2:	e9da 0100 	ldrd	r0, r1, [sl]
 800d5e6:	e9db 2300 	ldrd	r2, r3, [fp]
 800d5ea:	f7f2 fe75 	bl	80002d8 <__aeabi_dsub>
 800d5ee:	e9da 8900 	ldrd	r8, r9, [sl]
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4640      	mov	r0, r8
 800d5f8:	4649      	mov	r1, r9
 800d5fa:	f7f3 faa1 	bl	8000b40 <__aeabi_dcmple>
 800d5fe:	b140      	cbz	r0, 800d612 <__ieee754_sqrt+0x136>
 800d600:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d604:	e9da 0100 	ldrd	r0, r1, [sl]
 800d608:	e9db 2300 	ldrd	r2, r3, [fp]
 800d60c:	d126      	bne.n	800d65c <__ieee754_sqrt+0x180>
 800d60e:	3501      	adds	r5, #1
 800d610:	463c      	mov	r4, r7
 800d612:	106a      	asrs	r2, r5, #1
 800d614:	0863      	lsrs	r3, r4, #1
 800d616:	07e9      	lsls	r1, r5, #31
 800d618:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d61c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d620:	bf48      	it	mi
 800d622:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d626:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d62a:	461c      	mov	r4, r3
 800d62c:	e76d      	b.n	800d50a <__ieee754_sqrt+0x2e>
 800d62e:	0ad3      	lsrs	r3, r2, #11
 800d630:	3815      	subs	r0, #21
 800d632:	0552      	lsls	r2, r2, #21
 800d634:	2b00      	cmp	r3, #0
 800d636:	d0fa      	beq.n	800d62e <__ieee754_sqrt+0x152>
 800d638:	02dc      	lsls	r4, r3, #11
 800d63a:	d50a      	bpl.n	800d652 <__ieee754_sqrt+0x176>
 800d63c:	f1c1 0420 	rsb	r4, r1, #32
 800d640:	fa22 f404 	lsr.w	r4, r2, r4
 800d644:	1e4d      	subs	r5, r1, #1
 800d646:	408a      	lsls	r2, r1
 800d648:	4323      	orrs	r3, r4
 800d64a:	1b41      	subs	r1, r0, r5
 800d64c:	e772      	b.n	800d534 <__ieee754_sqrt+0x58>
 800d64e:	4608      	mov	r0, r1
 800d650:	e7f0      	b.n	800d634 <__ieee754_sqrt+0x158>
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	3101      	adds	r1, #1
 800d656:	e7ef      	b.n	800d638 <__ieee754_sqrt+0x15c>
 800d658:	46e0      	mov	r8, ip
 800d65a:	e7aa      	b.n	800d5b2 <__ieee754_sqrt+0xd6>
 800d65c:	f7f2 fe3e 	bl	80002dc <__adddf3>
 800d660:	e9da 8900 	ldrd	r8, r9, [sl]
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	4640      	mov	r0, r8
 800d66a:	4649      	mov	r1, r9
 800d66c:	f7f3 fa5e 	bl	8000b2c <__aeabi_dcmplt>
 800d670:	b120      	cbz	r0, 800d67c <__ieee754_sqrt+0x1a0>
 800d672:	1ca0      	adds	r0, r4, #2
 800d674:	bf08      	it	eq
 800d676:	3501      	addeq	r5, #1
 800d678:	3402      	adds	r4, #2
 800d67a:	e7ca      	b.n	800d612 <__ieee754_sqrt+0x136>
 800d67c:	3401      	adds	r4, #1
 800d67e:	f024 0401 	bic.w	r4, r4, #1
 800d682:	e7c6      	b.n	800d612 <__ieee754_sqrt+0x136>
 800d684:	7ff00000 	.word	0x7ff00000
 800d688:	20000758 	.word	0x20000758
 800d68c:	20000760 	.word	0x20000760

0800d690 <__ieee754_fmod>:
 800d690:	ec53 2b11 	vmov	r2, r3, d1
 800d694:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800d698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d69c:	ea5c 0402 	orrs.w	r4, ip, r2
 800d6a0:	ec51 0b10 	vmov	r0, r1, d0
 800d6a4:	ee11 7a10 	vmov	r7, s2
 800d6a8:	ee11 ea10 	vmov	lr, s2
 800d6ac:	461e      	mov	r6, r3
 800d6ae:	d00c      	beq.n	800d6ca <__ieee754_fmod+0x3a>
 800d6b0:	4c78      	ldr	r4, [pc, #480]	; (800d894 <__ieee754_fmod+0x204>)
 800d6b2:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d6b6:	45a0      	cmp	r8, r4
 800d6b8:	4689      	mov	r9, r1
 800d6ba:	dc06      	bgt.n	800d6ca <__ieee754_fmod+0x3a>
 800d6bc:	4254      	negs	r4, r2
 800d6be:	4d76      	ldr	r5, [pc, #472]	; (800d898 <__ieee754_fmod+0x208>)
 800d6c0:	4314      	orrs	r4, r2
 800d6c2:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800d6c6:	42ac      	cmp	r4, r5
 800d6c8:	d909      	bls.n	800d6de <__ieee754_fmod+0x4e>
 800d6ca:	f7f2 ffbd 	bl	8000648 <__aeabi_dmul>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	f7f3 f8e3 	bl	800089c <__aeabi_ddiv>
 800d6d6:	ec41 0b10 	vmov	d0, r0, r1
 800d6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6de:	45e0      	cmp	r8, ip
 800d6e0:	ee10 aa10 	vmov	sl, s0
 800d6e4:	ee10 4a10 	vmov	r4, s0
 800d6e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d6ec:	dc09      	bgt.n	800d702 <__ieee754_fmod+0x72>
 800d6ee:	dbf2      	blt.n	800d6d6 <__ieee754_fmod+0x46>
 800d6f0:	4290      	cmp	r0, r2
 800d6f2:	d3f0      	bcc.n	800d6d6 <__ieee754_fmod+0x46>
 800d6f4:	d105      	bne.n	800d702 <__ieee754_fmod+0x72>
 800d6f6:	4b69      	ldr	r3, [pc, #420]	; (800d89c <__ieee754_fmod+0x20c>)
 800d6f8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800d6fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d700:	e7e9      	b.n	800d6d6 <__ieee754_fmod+0x46>
 800d702:	4a65      	ldr	r2, [pc, #404]	; (800d898 <__ieee754_fmod+0x208>)
 800d704:	ea19 0f02 	tst.w	r9, r2
 800d708:	d148      	bne.n	800d79c <__ieee754_fmod+0x10c>
 800d70a:	f1b8 0f00 	cmp.w	r8, #0
 800d70e:	d13d      	bne.n	800d78c <__ieee754_fmod+0xfc>
 800d710:	4963      	ldr	r1, [pc, #396]	; (800d8a0 <__ieee754_fmod+0x210>)
 800d712:	4653      	mov	r3, sl
 800d714:	2b00      	cmp	r3, #0
 800d716:	dc36      	bgt.n	800d786 <__ieee754_fmod+0xf6>
 800d718:	4216      	tst	r6, r2
 800d71a:	d14f      	bne.n	800d7bc <__ieee754_fmod+0x12c>
 800d71c:	f1bc 0f00 	cmp.w	ip, #0
 800d720:	d144      	bne.n	800d7ac <__ieee754_fmod+0x11c>
 800d722:	4a5f      	ldr	r2, [pc, #380]	; (800d8a0 <__ieee754_fmod+0x210>)
 800d724:	463b      	mov	r3, r7
 800d726:	2b00      	cmp	r3, #0
 800d728:	dc3d      	bgt.n	800d7a6 <__ieee754_fmod+0x116>
 800d72a:	485e      	ldr	r0, [pc, #376]	; (800d8a4 <__ieee754_fmod+0x214>)
 800d72c:	4281      	cmp	r1, r0
 800d72e:	db4a      	blt.n	800d7c6 <__ieee754_fmod+0x136>
 800d730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d738:	485a      	ldr	r0, [pc, #360]	; (800d8a4 <__ieee754_fmod+0x214>)
 800d73a:	4282      	cmp	r2, r0
 800d73c:	db57      	blt.n	800d7ee <__ieee754_fmod+0x15e>
 800d73e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d742:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d746:	1a89      	subs	r1, r1, r2
 800d748:	1b98      	subs	r0, r3, r6
 800d74a:	eba4 070e 	sub.w	r7, r4, lr
 800d74e:	2900      	cmp	r1, #0
 800d750:	d162      	bne.n	800d818 <__ieee754_fmod+0x188>
 800d752:	4574      	cmp	r4, lr
 800d754:	bf38      	it	cc
 800d756:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800d75a:	2800      	cmp	r0, #0
 800d75c:	bfa4      	itt	ge
 800d75e:	463c      	movge	r4, r7
 800d760:	4603      	movge	r3, r0
 800d762:	ea53 0104 	orrs.w	r1, r3, r4
 800d766:	d0c6      	beq.n	800d6f6 <__ieee754_fmod+0x66>
 800d768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d76c:	db69      	blt.n	800d842 <__ieee754_fmod+0x1b2>
 800d76e:	494d      	ldr	r1, [pc, #308]	; (800d8a4 <__ieee754_fmod+0x214>)
 800d770:	428a      	cmp	r2, r1
 800d772:	db6c      	blt.n	800d84e <__ieee754_fmod+0x1be>
 800d774:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d778:	432b      	orrs	r3, r5
 800d77a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800d77e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d782:	4620      	mov	r0, r4
 800d784:	e7a7      	b.n	800d6d6 <__ieee754_fmod+0x46>
 800d786:	3901      	subs	r1, #1
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	e7c3      	b.n	800d714 <__ieee754_fmod+0x84>
 800d78c:	4945      	ldr	r1, [pc, #276]	; (800d8a4 <__ieee754_fmod+0x214>)
 800d78e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d792:	2b00      	cmp	r3, #0
 800d794:	ddc0      	ble.n	800d718 <__ieee754_fmod+0x88>
 800d796:	3901      	subs	r1, #1
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	e7fa      	b.n	800d792 <__ieee754_fmod+0x102>
 800d79c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800d7a0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d7a4:	e7b8      	b.n	800d718 <__ieee754_fmod+0x88>
 800d7a6:	3a01      	subs	r2, #1
 800d7a8:	005b      	lsls	r3, r3, #1
 800d7aa:	e7bc      	b.n	800d726 <__ieee754_fmod+0x96>
 800d7ac:	4a3d      	ldr	r2, [pc, #244]	; (800d8a4 <__ieee754_fmod+0x214>)
 800d7ae:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	ddb9      	ble.n	800d72a <__ieee754_fmod+0x9a>
 800d7b6:	3a01      	subs	r2, #1
 800d7b8:	005b      	lsls	r3, r3, #1
 800d7ba:	e7fa      	b.n	800d7b2 <__ieee754_fmod+0x122>
 800d7bc:	ea4f 522c 	mov.w	r2, ip, asr #20
 800d7c0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d7c4:	e7b1      	b.n	800d72a <__ieee754_fmod+0x9a>
 800d7c6:	1a40      	subs	r0, r0, r1
 800d7c8:	281f      	cmp	r0, #31
 800d7ca:	dc0a      	bgt.n	800d7e2 <__ieee754_fmod+0x152>
 800d7cc:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800d7d0:	fa08 f800 	lsl.w	r8, r8, r0
 800d7d4:	fa2a f303 	lsr.w	r3, sl, r3
 800d7d8:	ea43 0308 	orr.w	r3, r3, r8
 800d7dc:	fa0a f400 	lsl.w	r4, sl, r0
 800d7e0:	e7aa      	b.n	800d738 <__ieee754_fmod+0xa8>
 800d7e2:	4b31      	ldr	r3, [pc, #196]	; (800d8a8 <__ieee754_fmod+0x218>)
 800d7e4:	1a5b      	subs	r3, r3, r1
 800d7e6:	fa0a f303 	lsl.w	r3, sl, r3
 800d7ea:	2400      	movs	r4, #0
 800d7ec:	e7a4      	b.n	800d738 <__ieee754_fmod+0xa8>
 800d7ee:	1a80      	subs	r0, r0, r2
 800d7f0:	281f      	cmp	r0, #31
 800d7f2:	dc0a      	bgt.n	800d80a <__ieee754_fmod+0x17a>
 800d7f4:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800d7f8:	fa0c fc00 	lsl.w	ip, ip, r0
 800d7fc:	fa27 f606 	lsr.w	r6, r7, r6
 800d800:	ea46 060c 	orr.w	r6, r6, ip
 800d804:	fa07 fe00 	lsl.w	lr, r7, r0
 800d808:	e79d      	b.n	800d746 <__ieee754_fmod+0xb6>
 800d80a:	4e27      	ldr	r6, [pc, #156]	; (800d8a8 <__ieee754_fmod+0x218>)
 800d80c:	1ab6      	subs	r6, r6, r2
 800d80e:	fa07 f606 	lsl.w	r6, r7, r6
 800d812:	f04f 0e00 	mov.w	lr, #0
 800d816:	e796      	b.n	800d746 <__ieee754_fmod+0xb6>
 800d818:	4574      	cmp	r4, lr
 800d81a:	bf38      	it	cc
 800d81c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800d820:	2800      	cmp	r0, #0
 800d822:	da05      	bge.n	800d830 <__ieee754_fmod+0x1a0>
 800d824:	0fe0      	lsrs	r0, r4, #31
 800d826:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d82a:	0064      	lsls	r4, r4, #1
 800d82c:	3901      	subs	r1, #1
 800d82e:	e78b      	b.n	800d748 <__ieee754_fmod+0xb8>
 800d830:	ea50 0307 	orrs.w	r3, r0, r7
 800d834:	f43f af5f 	beq.w	800d6f6 <__ieee754_fmod+0x66>
 800d838:	0ffb      	lsrs	r3, r7, #31
 800d83a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d83e:	007c      	lsls	r4, r7, #1
 800d840:	e7f4      	b.n	800d82c <__ieee754_fmod+0x19c>
 800d842:	0fe1      	lsrs	r1, r4, #31
 800d844:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d848:	0064      	lsls	r4, r4, #1
 800d84a:	3a01      	subs	r2, #1
 800d84c:	e78c      	b.n	800d768 <__ieee754_fmod+0xd8>
 800d84e:	1a89      	subs	r1, r1, r2
 800d850:	2914      	cmp	r1, #20
 800d852:	dc0a      	bgt.n	800d86a <__ieee754_fmod+0x1da>
 800d854:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d858:	fa03 f202 	lsl.w	r2, r3, r2
 800d85c:	40cc      	lsrs	r4, r1
 800d85e:	4322      	orrs	r2, r4
 800d860:	410b      	asrs	r3, r1
 800d862:	ea43 0105 	orr.w	r1, r3, r5
 800d866:	4610      	mov	r0, r2
 800d868:	e735      	b.n	800d6d6 <__ieee754_fmod+0x46>
 800d86a:	291f      	cmp	r1, #31
 800d86c:	dc07      	bgt.n	800d87e <__ieee754_fmod+0x1ee>
 800d86e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d872:	40cc      	lsrs	r4, r1
 800d874:	fa03 f202 	lsl.w	r2, r3, r2
 800d878:	4322      	orrs	r2, r4
 800d87a:	462b      	mov	r3, r5
 800d87c:	e7f1      	b.n	800d862 <__ieee754_fmod+0x1d2>
 800d87e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d882:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d886:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d88a:	32e2      	adds	r2, #226	; 0xe2
 800d88c:	fa43 f202 	asr.w	r2, r3, r2
 800d890:	e7f3      	b.n	800d87a <__ieee754_fmod+0x1ea>
 800d892:	bf00      	nop
 800d894:	7fefffff 	.word	0x7fefffff
 800d898:	7ff00000 	.word	0x7ff00000
 800d89c:	0800e828 	.word	0x0800e828
 800d8a0:	fffffbed 	.word	0xfffffbed
 800d8a4:	fffffc02 	.word	0xfffffc02
 800d8a8:	fffffbe2 	.word	0xfffffbe2

0800d8ac <__kernel_cosf>:
 800d8ac:	ee10 3a10 	vmov	r3, s0
 800d8b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d8b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8bc:	da05      	bge.n	800d8ca <__kernel_cosf+0x1e>
 800d8be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d8c2:	ee17 2a90 	vmov	r2, s15
 800d8c6:	2a00      	cmp	r2, #0
 800d8c8:	d03b      	beq.n	800d942 <__kernel_cosf+0x96>
 800d8ca:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d8ce:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d948 <__kernel_cosf+0x9c>
 800d8d2:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800d94c <__kernel_cosf+0xa0>
 800d8d6:	4a1e      	ldr	r2, [pc, #120]	; (800d950 <__kernel_cosf+0xa4>)
 800d8d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800d954 <__kernel_cosf+0xa8>
 800d8e2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d8e6:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800d958 <__kernel_cosf+0xac>
 800d8ea:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d8ee:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800d95c <__kernel_cosf+0xb0>
 800d8f2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d8f6:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800d960 <__kernel_cosf+0xb4>
 800d8fa:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d8fe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800d902:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d906:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d90a:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d912:	dc04      	bgt.n	800d91e <__kernel_cosf+0x72>
 800d914:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d918:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800d91c:	4770      	bx	lr
 800d91e:	4a11      	ldr	r2, [pc, #68]	; (800d964 <__kernel_cosf+0xb8>)
 800d920:	4293      	cmp	r3, r2
 800d922:	bfda      	itte	le
 800d924:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d928:	ee07 3a10 	vmovle	s14, r3
 800d92c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800d930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d934:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800d938:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d93c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d940:	4770      	bx	lr
 800d942:	eeb0 0a66 	vmov.f32	s0, s13
 800d946:	4770      	bx	lr
 800d948:	ad47d74e 	.word	0xad47d74e
 800d94c:	310f74f6 	.word	0x310f74f6
 800d950:	3e999999 	.word	0x3e999999
 800d954:	b493f27c 	.word	0xb493f27c
 800d958:	37d00d01 	.word	0x37d00d01
 800d95c:	bab60b61 	.word	0xbab60b61
 800d960:	3d2aaaab 	.word	0x3d2aaaab
 800d964:	3f480000 	.word	0x3f480000

0800d968 <__kernel_sinf>:
 800d968:	ee10 3a10 	vmov	r3, s0
 800d96c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d970:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d974:	da04      	bge.n	800d980 <__kernel_sinf+0x18>
 800d976:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d97a:	ee17 3a90 	vmov	r3, s15
 800d97e:	b35b      	cbz	r3, 800d9d8 <__kernel_sinf+0x70>
 800d980:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d984:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d9dc <__kernel_sinf+0x74>
 800d988:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d9e0 <__kernel_sinf+0x78>
 800d98c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d990:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d9e4 <__kernel_sinf+0x7c>
 800d994:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d998:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800d9e8 <__kernel_sinf+0x80>
 800d99c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d9a0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d9ec <__kernel_sinf+0x84>
 800d9a4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d9a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d9ac:	b930      	cbnz	r0, 800d9bc <__kernel_sinf+0x54>
 800d9ae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800d9f0 <__kernel_sinf+0x88>
 800d9b2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d9b6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d9ba:	4770      	bx	lr
 800d9bc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d9c0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d9c4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d9c8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d9cc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d9f4 <__kernel_sinf+0x8c>
 800d9d0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d9d4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	2f2ec9d3 	.word	0x2f2ec9d3
 800d9e0:	b2d72f34 	.word	0xb2d72f34
 800d9e4:	3638ef1b 	.word	0x3638ef1b
 800d9e8:	b9500d01 	.word	0xb9500d01
 800d9ec:	3c088889 	.word	0x3c088889
 800d9f0:	be2aaaab 	.word	0xbe2aaaab
 800d9f4:	3e2aaaab 	.word	0x3e2aaaab

0800d9f8 <__ieee754_rem_pio2f>:
 800d9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9fa:	ee10 6a10 	vmov	r6, s0
 800d9fe:	4b86      	ldr	r3, [pc, #536]	; (800dc18 <__ieee754_rem_pio2f+0x220>)
 800da00:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800da04:	429d      	cmp	r5, r3
 800da06:	b087      	sub	sp, #28
 800da08:	4604      	mov	r4, r0
 800da0a:	dc05      	bgt.n	800da18 <__ieee754_rem_pio2f+0x20>
 800da0c:	2300      	movs	r3, #0
 800da0e:	ed80 0a00 	vstr	s0, [r0]
 800da12:	6043      	str	r3, [r0, #4]
 800da14:	2000      	movs	r0, #0
 800da16:	e020      	b.n	800da5a <__ieee754_rem_pio2f+0x62>
 800da18:	4b80      	ldr	r3, [pc, #512]	; (800dc1c <__ieee754_rem_pio2f+0x224>)
 800da1a:	429d      	cmp	r5, r3
 800da1c:	dc38      	bgt.n	800da90 <__ieee754_rem_pio2f+0x98>
 800da1e:	2e00      	cmp	r6, #0
 800da20:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800dc20 <__ieee754_rem_pio2f+0x228>
 800da24:	4b7f      	ldr	r3, [pc, #508]	; (800dc24 <__ieee754_rem_pio2f+0x22c>)
 800da26:	f025 050f 	bic.w	r5, r5, #15
 800da2a:	dd18      	ble.n	800da5e <__ieee754_rem_pio2f+0x66>
 800da2c:	429d      	cmp	r5, r3
 800da2e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800da32:	bf09      	itett	eq
 800da34:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800dc28 <__ieee754_rem_pio2f+0x230>
 800da38:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800dc2c <__ieee754_rem_pio2f+0x234>
 800da3c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800da40:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800dc30 <__ieee754_rem_pio2f+0x238>
 800da44:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800da48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da4c:	edc0 6a00 	vstr	s13, [r0]
 800da50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da54:	edc0 7a01 	vstr	s15, [r0, #4]
 800da58:	2001      	movs	r0, #1
 800da5a:	b007      	add	sp, #28
 800da5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da5e:	429d      	cmp	r5, r3
 800da60:	ee70 7a07 	vadd.f32	s15, s0, s14
 800da64:	bf09      	itett	eq
 800da66:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800dc28 <__ieee754_rem_pio2f+0x230>
 800da6a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800dc2c <__ieee754_rem_pio2f+0x234>
 800da6e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800da72:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800dc30 <__ieee754_rem_pio2f+0x238>
 800da76:	ee77 6a87 	vadd.f32	s13, s15, s14
 800da7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da7e:	edc0 6a00 	vstr	s13, [r0]
 800da82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da86:	edc0 7a01 	vstr	s15, [r0, #4]
 800da8a:	f04f 30ff 	mov.w	r0, #4294967295
 800da8e:	e7e4      	b.n	800da5a <__ieee754_rem_pio2f+0x62>
 800da90:	4b68      	ldr	r3, [pc, #416]	; (800dc34 <__ieee754_rem_pio2f+0x23c>)
 800da92:	429d      	cmp	r5, r3
 800da94:	dc71      	bgt.n	800db7a <__ieee754_rem_pio2f+0x182>
 800da96:	f000 f8db 	bl	800dc50 <fabsf>
 800da9a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800dc38 <__ieee754_rem_pio2f+0x240>
 800da9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800daa2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800daa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800daaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800daae:	ee17 0a90 	vmov	r0, s15
 800dab2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800dc20 <__ieee754_rem_pio2f+0x228>
 800dab6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800daba:	281f      	cmp	r0, #31
 800dabc:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800dc2c <__ieee754_rem_pio2f+0x234>
 800dac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dac4:	eeb1 6a47 	vneg.f32	s12, s14
 800dac8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dacc:	ee16 2a90 	vmov	r2, s13
 800dad0:	dc1c      	bgt.n	800db0c <__ieee754_rem_pio2f+0x114>
 800dad2:	495a      	ldr	r1, [pc, #360]	; (800dc3c <__ieee754_rem_pio2f+0x244>)
 800dad4:	1e47      	subs	r7, r0, #1
 800dad6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800dada:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800dade:	428b      	cmp	r3, r1
 800dae0:	d014      	beq.n	800db0c <__ieee754_rem_pio2f+0x114>
 800dae2:	6022      	str	r2, [r4, #0]
 800dae4:	ed94 7a00 	vldr	s14, [r4]
 800dae8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800daec:	2e00      	cmp	r6, #0
 800daee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800daf2:	ed84 0a01 	vstr	s0, [r4, #4]
 800daf6:	dab0      	bge.n	800da5a <__ieee754_rem_pio2f+0x62>
 800daf8:	eeb1 7a47 	vneg.f32	s14, s14
 800dafc:	eeb1 0a40 	vneg.f32	s0, s0
 800db00:	ed84 7a00 	vstr	s14, [r4]
 800db04:	ed84 0a01 	vstr	s0, [r4, #4]
 800db08:	4240      	negs	r0, r0
 800db0a:	e7a6      	b.n	800da5a <__ieee754_rem_pio2f+0x62>
 800db0c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800db10:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800db14:	2908      	cmp	r1, #8
 800db16:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800db1a:	dde2      	ble.n	800dae2 <__ieee754_rem_pio2f+0xea>
 800db1c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800dc28 <__ieee754_rem_pio2f+0x230>
 800db20:	eef0 6a40 	vmov.f32	s13, s0
 800db24:	eee6 6a25 	vfma.f32	s13, s12, s11
 800db28:	ee70 7a66 	vsub.f32	s15, s0, s13
 800db2c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800db30:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800dc30 <__ieee754_rem_pio2f+0x238>
 800db34:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800db38:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800db3c:	ee15 2a90 	vmov	r2, s11
 800db40:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800db44:	1a5b      	subs	r3, r3, r1
 800db46:	2b19      	cmp	r3, #25
 800db48:	dc04      	bgt.n	800db54 <__ieee754_rem_pio2f+0x15c>
 800db4a:	edc4 5a00 	vstr	s11, [r4]
 800db4e:	eeb0 0a66 	vmov.f32	s0, s13
 800db52:	e7c7      	b.n	800dae4 <__ieee754_rem_pio2f+0xec>
 800db54:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800dc40 <__ieee754_rem_pio2f+0x248>
 800db58:	eeb0 0a66 	vmov.f32	s0, s13
 800db5c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800db60:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800db64:	eddf 6a37 	vldr	s13, [pc, #220]	; 800dc44 <__ieee754_rem_pio2f+0x24c>
 800db68:	eee6 7a25 	vfma.f32	s15, s12, s11
 800db6c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800db70:	ee30 7a67 	vsub.f32	s14, s0, s15
 800db74:	ed84 7a00 	vstr	s14, [r4]
 800db78:	e7b4      	b.n	800dae4 <__ieee754_rem_pio2f+0xec>
 800db7a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800db7e:	db06      	blt.n	800db8e <__ieee754_rem_pio2f+0x196>
 800db80:	ee70 7a40 	vsub.f32	s15, s0, s0
 800db84:	edc0 7a01 	vstr	s15, [r0, #4]
 800db88:	edc0 7a00 	vstr	s15, [r0]
 800db8c:	e742      	b.n	800da14 <__ieee754_rem_pio2f+0x1c>
 800db8e:	15ea      	asrs	r2, r5, #23
 800db90:	3a86      	subs	r2, #134	; 0x86
 800db92:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800db96:	ee07 3a90 	vmov	s15, r3
 800db9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800db9e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800dc48 <__ieee754_rem_pio2f+0x250>
 800dba2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dba6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbaa:	ed8d 7a03 	vstr	s14, [sp, #12]
 800dbae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbb2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dbb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dbba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbbe:	ed8d 7a04 	vstr	s14, [sp, #16]
 800dbc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbce:	edcd 7a05 	vstr	s15, [sp, #20]
 800dbd2:	d11e      	bne.n	800dc12 <__ieee754_rem_pio2f+0x21a>
 800dbd4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbdc:	bf14      	ite	ne
 800dbde:	2302      	movne	r3, #2
 800dbe0:	2301      	moveq	r3, #1
 800dbe2:	491a      	ldr	r1, [pc, #104]	; (800dc4c <__ieee754_rem_pio2f+0x254>)
 800dbe4:	9101      	str	r1, [sp, #4]
 800dbe6:	2102      	movs	r1, #2
 800dbe8:	9100      	str	r1, [sp, #0]
 800dbea:	a803      	add	r0, sp, #12
 800dbec:	4621      	mov	r1, r4
 800dbee:	f000 f837 	bl	800dc60 <__kernel_rem_pio2f>
 800dbf2:	2e00      	cmp	r6, #0
 800dbf4:	f6bf af31 	bge.w	800da5a <__ieee754_rem_pio2f+0x62>
 800dbf8:	edd4 7a00 	vldr	s15, [r4]
 800dbfc:	eef1 7a67 	vneg.f32	s15, s15
 800dc00:	edc4 7a00 	vstr	s15, [r4]
 800dc04:	edd4 7a01 	vldr	s15, [r4, #4]
 800dc08:	eef1 7a67 	vneg.f32	s15, s15
 800dc0c:	edc4 7a01 	vstr	s15, [r4, #4]
 800dc10:	e77a      	b.n	800db08 <__ieee754_rem_pio2f+0x110>
 800dc12:	2303      	movs	r3, #3
 800dc14:	e7e5      	b.n	800dbe2 <__ieee754_rem_pio2f+0x1ea>
 800dc16:	bf00      	nop
 800dc18:	3f490fd8 	.word	0x3f490fd8
 800dc1c:	4016cbe3 	.word	0x4016cbe3
 800dc20:	3fc90f80 	.word	0x3fc90f80
 800dc24:	3fc90fd0 	.word	0x3fc90fd0
 800dc28:	37354400 	.word	0x37354400
 800dc2c:	37354443 	.word	0x37354443
 800dc30:	2e85a308 	.word	0x2e85a308
 800dc34:	43490f80 	.word	0x43490f80
 800dc38:	3f22f984 	.word	0x3f22f984
 800dc3c:	0800e838 	.word	0x0800e838
 800dc40:	2e85a300 	.word	0x2e85a300
 800dc44:	248d3132 	.word	0x248d3132
 800dc48:	43800000 	.word	0x43800000
 800dc4c:	0800e8b8 	.word	0x0800e8b8

0800dc50 <fabsf>:
 800dc50:	ee10 3a10 	vmov	r3, s0
 800dc54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc58:	ee00 3a10 	vmov	s0, r3
 800dc5c:	4770      	bx	lr
	...

0800dc60 <__kernel_rem_pio2f>:
 800dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc64:	ed2d 8b04 	vpush	{d8-d9}
 800dc68:	b0d9      	sub	sp, #356	; 0x164
 800dc6a:	4688      	mov	r8, r1
 800dc6c:	9002      	str	r0, [sp, #8]
 800dc6e:	49b8      	ldr	r1, [pc, #736]	; (800df50 <__kernel_rem_pio2f+0x2f0>)
 800dc70:	9866      	ldr	r0, [sp, #408]	; 0x198
 800dc72:	9301      	str	r3, [sp, #4]
 800dc74:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800dc78:	9901      	ldr	r1, [sp, #4]
 800dc7a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800dc7c:	f101 3bff 	add.w	fp, r1, #4294967295
 800dc80:	1d11      	adds	r1, r2, #4
 800dc82:	db25      	blt.n	800dcd0 <__kernel_rem_pio2f+0x70>
 800dc84:	1ed0      	subs	r0, r2, #3
 800dc86:	bf48      	it	mi
 800dc88:	1d10      	addmi	r0, r2, #4
 800dc8a:	10c0      	asrs	r0, r0, #3
 800dc8c:	1c45      	adds	r5, r0, #1
 800dc8e:	00e9      	lsls	r1, r5, #3
 800dc90:	eba0 070b 	sub.w	r7, r0, fp
 800dc94:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800df60 <__kernel_rem_pio2f+0x300>
 800dc98:	9103      	str	r1, [sp, #12]
 800dc9a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800dc9e:	eb0a 0c0b 	add.w	ip, sl, fp
 800dca2:	ae1c      	add	r6, sp, #112	; 0x70
 800dca4:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800dca8:	2400      	movs	r4, #0
 800dcaa:	4564      	cmp	r4, ip
 800dcac:	dd12      	ble.n	800dcd4 <__kernel_rem_pio2f+0x74>
 800dcae:	9901      	ldr	r1, [sp, #4]
 800dcb0:	ac1c      	add	r4, sp, #112	; 0x70
 800dcb2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800dcb6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800dcba:	f04f 0c00 	mov.w	ip, #0
 800dcbe:	45d4      	cmp	ip, sl
 800dcc0:	dc27      	bgt.n	800dd12 <__kernel_rem_pio2f+0xb2>
 800dcc2:	f8dd e008 	ldr.w	lr, [sp, #8]
 800dcc6:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800df60 <__kernel_rem_pio2f+0x300>
 800dcca:	4627      	mov	r7, r4
 800dccc:	2600      	movs	r6, #0
 800dcce:	e016      	b.n	800dcfe <__kernel_rem_pio2f+0x9e>
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	e7db      	b.n	800dc8c <__kernel_rem_pio2f+0x2c>
 800dcd4:	42e7      	cmn	r7, r4
 800dcd6:	bf5d      	ittte	pl
 800dcd8:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800dcdc:	ee07 1a90 	vmovpl	s15, r1
 800dce0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dce4:	eef0 7a47 	vmovmi.f32	s15, s14
 800dce8:	ece6 7a01 	vstmia	r6!, {s15}
 800dcec:	3401      	adds	r4, #1
 800dcee:	e7dc      	b.n	800dcaa <__kernel_rem_pio2f+0x4a>
 800dcf0:	ecfe 6a01 	vldmia	lr!, {s13}
 800dcf4:	ed97 7a00 	vldr	s14, [r7]
 800dcf8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dcfc:	3601      	adds	r6, #1
 800dcfe:	455e      	cmp	r6, fp
 800dd00:	f1a7 0704 	sub.w	r7, r7, #4
 800dd04:	ddf4      	ble.n	800dcf0 <__kernel_rem_pio2f+0x90>
 800dd06:	ece9 7a01 	vstmia	r9!, {s15}
 800dd0a:	f10c 0c01 	add.w	ip, ip, #1
 800dd0e:	3404      	adds	r4, #4
 800dd10:	e7d5      	b.n	800dcbe <__kernel_rem_pio2f+0x5e>
 800dd12:	a908      	add	r1, sp, #32
 800dd14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd18:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800dd1c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800df5c <__kernel_rem_pio2f+0x2fc>
 800dd20:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800df58 <__kernel_rem_pio2f+0x2f8>
 800dd24:	9105      	str	r1, [sp, #20]
 800dd26:	9304      	str	r3, [sp, #16]
 800dd28:	4656      	mov	r6, sl
 800dd2a:	00b3      	lsls	r3, r6, #2
 800dd2c:	9306      	str	r3, [sp, #24]
 800dd2e:	ab58      	add	r3, sp, #352	; 0x160
 800dd30:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800dd34:	ac08      	add	r4, sp, #32
 800dd36:	ab44      	add	r3, sp, #272	; 0x110
 800dd38:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800dd3c:	46a4      	mov	ip, r4
 800dd3e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800dd42:	4637      	mov	r7, r6
 800dd44:	2f00      	cmp	r7, #0
 800dd46:	f1a0 0004 	sub.w	r0, r0, #4
 800dd4a:	dc4a      	bgt.n	800dde2 <__kernel_rem_pio2f+0x182>
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	9207      	str	r2, [sp, #28]
 800dd50:	f000 f9f8 	bl	800e144 <scalbnf>
 800dd54:	eeb0 8a40 	vmov.f32	s16, s0
 800dd58:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800dd5c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800dd60:	f000 fa56 	bl	800e210 <floorf>
 800dd64:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800dd68:	eea0 8a67 	vfms.f32	s16, s0, s15
 800dd6c:	2d00      	cmp	r5, #0
 800dd6e:	9a07      	ldr	r2, [sp, #28]
 800dd70:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800dd74:	ee17 9a90 	vmov	r9, s15
 800dd78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd7c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800dd80:	dd41      	ble.n	800de06 <__kernel_rem_pio2f+0x1a6>
 800dd82:	f106 3cff 	add.w	ip, r6, #4294967295
 800dd86:	ab08      	add	r3, sp, #32
 800dd88:	f1c5 0e08 	rsb	lr, r5, #8
 800dd8c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800dd90:	fa47 f00e 	asr.w	r0, r7, lr
 800dd94:	4481      	add	r9, r0
 800dd96:	fa00 f00e 	lsl.w	r0, r0, lr
 800dd9a:	1a3f      	subs	r7, r7, r0
 800dd9c:	f1c5 0007 	rsb	r0, r5, #7
 800dda0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800dda4:	4107      	asrs	r7, r0
 800dda6:	2f00      	cmp	r7, #0
 800dda8:	dd3c      	ble.n	800de24 <__kernel_rem_pio2f+0x1c4>
 800ddaa:	f04f 0e00 	mov.w	lr, #0
 800ddae:	f109 0901 	add.w	r9, r9, #1
 800ddb2:	4671      	mov	r1, lr
 800ddb4:	4576      	cmp	r6, lr
 800ddb6:	dc67      	bgt.n	800de88 <__kernel_rem_pio2f+0x228>
 800ddb8:	2d00      	cmp	r5, #0
 800ddba:	dd03      	ble.n	800ddc4 <__kernel_rem_pio2f+0x164>
 800ddbc:	2d01      	cmp	r5, #1
 800ddbe:	d074      	beq.n	800deaa <__kernel_rem_pio2f+0x24a>
 800ddc0:	2d02      	cmp	r5, #2
 800ddc2:	d07b      	beq.n	800debc <__kernel_rem_pio2f+0x25c>
 800ddc4:	2f02      	cmp	r7, #2
 800ddc6:	d12d      	bne.n	800de24 <__kernel_rem_pio2f+0x1c4>
 800ddc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ddcc:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ddd0:	b341      	cbz	r1, 800de24 <__kernel_rem_pio2f+0x1c4>
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	9207      	str	r2, [sp, #28]
 800ddd6:	f000 f9b5 	bl	800e144 <scalbnf>
 800ddda:	9a07      	ldr	r2, [sp, #28]
 800dddc:	ee38 8a40 	vsub.f32	s16, s16, s0
 800dde0:	e020      	b.n	800de24 <__kernel_rem_pio2f+0x1c4>
 800dde2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800dde6:	3f01      	subs	r7, #1
 800dde8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddf0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ddf4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ddf8:	ecac 0a01 	vstmia	ip!, {s0}
 800ddfc:	ed90 0a00 	vldr	s0, [r0]
 800de00:	ee37 0a80 	vadd.f32	s0, s15, s0
 800de04:	e79e      	b.n	800dd44 <__kernel_rem_pio2f+0xe4>
 800de06:	d105      	bne.n	800de14 <__kernel_rem_pio2f+0x1b4>
 800de08:	1e70      	subs	r0, r6, #1
 800de0a:	ab08      	add	r3, sp, #32
 800de0c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800de10:	11ff      	asrs	r7, r7, #7
 800de12:	e7c8      	b.n	800dda6 <__kernel_rem_pio2f+0x146>
 800de14:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800de18:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800de1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de20:	da30      	bge.n	800de84 <__kernel_rem_pio2f+0x224>
 800de22:	2700      	movs	r7, #0
 800de24:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de2c:	f040 809a 	bne.w	800df64 <__kernel_rem_pio2f+0x304>
 800de30:	1e74      	subs	r4, r6, #1
 800de32:	46a4      	mov	ip, r4
 800de34:	2100      	movs	r1, #0
 800de36:	45d4      	cmp	ip, sl
 800de38:	da47      	bge.n	800deca <__kernel_rem_pio2f+0x26a>
 800de3a:	2900      	cmp	r1, #0
 800de3c:	d063      	beq.n	800df06 <__kernel_rem_pio2f+0x2a6>
 800de3e:	ab08      	add	r3, sp, #32
 800de40:	3d08      	subs	r5, #8
 800de42:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d07f      	beq.n	800df4a <__kernel_rem_pio2f+0x2ea>
 800de4a:	4628      	mov	r0, r5
 800de4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800de50:	f000 f978 	bl	800e144 <scalbnf>
 800de54:	1c63      	adds	r3, r4, #1
 800de56:	aa44      	add	r2, sp, #272	; 0x110
 800de58:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800df5c <__kernel_rem_pio2f+0x2fc>
 800de5c:	0099      	lsls	r1, r3, #2
 800de5e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800de62:	4623      	mov	r3, r4
 800de64:	2b00      	cmp	r3, #0
 800de66:	f280 80ad 	bge.w	800dfc4 <__kernel_rem_pio2f+0x364>
 800de6a:	4623      	mov	r3, r4
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f2c0 80cb 	blt.w	800e008 <__kernel_rem_pio2f+0x3a8>
 800de72:	aa44      	add	r2, sp, #272	; 0x110
 800de74:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800de78:	4e36      	ldr	r6, [pc, #216]	; (800df54 <__kernel_rem_pio2f+0x2f4>)
 800de7a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800df60 <__kernel_rem_pio2f+0x300>
 800de7e:	2000      	movs	r0, #0
 800de80:	1ae2      	subs	r2, r4, r3
 800de82:	e0b6      	b.n	800dff2 <__kernel_rem_pio2f+0x392>
 800de84:	2702      	movs	r7, #2
 800de86:	e790      	b.n	800ddaa <__kernel_rem_pio2f+0x14a>
 800de88:	6820      	ldr	r0, [r4, #0]
 800de8a:	b949      	cbnz	r1, 800dea0 <__kernel_rem_pio2f+0x240>
 800de8c:	b118      	cbz	r0, 800de96 <__kernel_rem_pio2f+0x236>
 800de8e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800de92:	6020      	str	r0, [r4, #0]
 800de94:	2001      	movs	r0, #1
 800de96:	f10e 0e01 	add.w	lr, lr, #1
 800de9a:	3404      	adds	r4, #4
 800de9c:	4601      	mov	r1, r0
 800de9e:	e789      	b.n	800ddb4 <__kernel_rem_pio2f+0x154>
 800dea0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800dea4:	6020      	str	r0, [r4, #0]
 800dea6:	4608      	mov	r0, r1
 800dea8:	e7f5      	b.n	800de96 <__kernel_rem_pio2f+0x236>
 800deaa:	1e74      	subs	r4, r6, #1
 800deac:	ab08      	add	r3, sp, #32
 800deae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800deb2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800deb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800deba:	e783      	b.n	800ddc4 <__kernel_rem_pio2f+0x164>
 800debc:	1e74      	subs	r4, r6, #1
 800debe:	ab08      	add	r3, sp, #32
 800dec0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800dec4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800dec8:	e7f5      	b.n	800deb6 <__kernel_rem_pio2f+0x256>
 800deca:	ab08      	add	r3, sp, #32
 800decc:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800ded0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ded4:	4301      	orrs	r1, r0
 800ded6:	e7ae      	b.n	800de36 <__kernel_rem_pio2f+0x1d6>
 800ded8:	3001      	adds	r0, #1
 800deda:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800dede:	2f00      	cmp	r7, #0
 800dee0:	d0fa      	beq.n	800ded8 <__kernel_rem_pio2f+0x278>
 800dee2:	9b06      	ldr	r3, [sp, #24]
 800dee4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800dee8:	eb0d 0403 	add.w	r4, sp, r3
 800deec:	9b01      	ldr	r3, [sp, #4]
 800deee:	18f7      	adds	r7, r6, r3
 800def0:	ab1c      	add	r3, sp, #112	; 0x70
 800def2:	f106 0c01 	add.w	ip, r6, #1
 800def6:	3c4c      	subs	r4, #76	; 0x4c
 800def8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800defc:	4430      	add	r0, r6
 800defe:	4560      	cmp	r0, ip
 800df00:	da04      	bge.n	800df0c <__kernel_rem_pio2f+0x2ac>
 800df02:	4606      	mov	r6, r0
 800df04:	e711      	b.n	800dd2a <__kernel_rem_pio2f+0xca>
 800df06:	9c05      	ldr	r4, [sp, #20]
 800df08:	2001      	movs	r0, #1
 800df0a:	e7e6      	b.n	800deda <__kernel_rem_pio2f+0x27a>
 800df0c:	9b04      	ldr	r3, [sp, #16]
 800df0e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800df12:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800df16:	9306      	str	r3, [sp, #24]
 800df18:	ee07 3a90 	vmov	s15, r3
 800df1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df20:	2600      	movs	r6, #0
 800df22:	ece7 7a01 	vstmia	r7!, {s15}
 800df26:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800df60 <__kernel_rem_pio2f+0x300>
 800df2a:	46b9      	mov	r9, r7
 800df2c:	455e      	cmp	r6, fp
 800df2e:	dd04      	ble.n	800df3a <__kernel_rem_pio2f+0x2da>
 800df30:	ece4 7a01 	vstmia	r4!, {s15}
 800df34:	f10c 0c01 	add.w	ip, ip, #1
 800df38:	e7e1      	b.n	800defe <__kernel_rem_pio2f+0x29e>
 800df3a:	ecfe 6a01 	vldmia	lr!, {s13}
 800df3e:	ed39 7a01 	vldmdb	r9!, {s14}
 800df42:	3601      	adds	r6, #1
 800df44:	eee6 7a87 	vfma.f32	s15, s13, s14
 800df48:	e7f0      	b.n	800df2c <__kernel_rem_pio2f+0x2cc>
 800df4a:	3c01      	subs	r4, #1
 800df4c:	e777      	b.n	800de3e <__kernel_rem_pio2f+0x1de>
 800df4e:	bf00      	nop
 800df50:	0800ebfc 	.word	0x0800ebfc
 800df54:	0800ebd0 	.word	0x0800ebd0
 800df58:	43800000 	.word	0x43800000
 800df5c:	3b800000 	.word	0x3b800000
 800df60:	00000000 	.word	0x00000000
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	eeb0 0a48 	vmov.f32	s0, s16
 800df6a:	1a98      	subs	r0, r3, r2
 800df6c:	f000 f8ea 	bl	800e144 <scalbnf>
 800df70:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800df58 <__kernel_rem_pio2f+0x2f8>
 800df74:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800df78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7c:	db19      	blt.n	800dfb2 <__kernel_rem_pio2f+0x352>
 800df7e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800df5c <__kernel_rem_pio2f+0x2fc>
 800df82:	ee60 7a27 	vmul.f32	s15, s0, s15
 800df86:	aa08      	add	r2, sp, #32
 800df88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df8c:	1c74      	adds	r4, r6, #1
 800df8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df92:	3508      	adds	r5, #8
 800df94:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800df98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df9c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dfa0:	ee10 3a10 	vmov	r3, s0
 800dfa4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800dfa8:	ee17 3a90 	vmov	r3, s15
 800dfac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dfb0:	e74b      	b.n	800de4a <__kernel_rem_pio2f+0x1ea>
 800dfb2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dfb6:	aa08      	add	r2, sp, #32
 800dfb8:	ee10 3a10 	vmov	r3, s0
 800dfbc:	4634      	mov	r4, r6
 800dfbe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800dfc2:	e742      	b.n	800de4a <__kernel_rem_pio2f+0x1ea>
 800dfc4:	a808      	add	r0, sp, #32
 800dfc6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800dfca:	9001      	str	r0, [sp, #4]
 800dfcc:	ee07 0a90 	vmov	s15, r0
 800dfd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dfda:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dfde:	ed62 7a01 	vstmdb	r2!, {s15}
 800dfe2:	e73f      	b.n	800de64 <__kernel_rem_pio2f+0x204>
 800dfe4:	ecf6 6a01 	vldmia	r6!, {s13}
 800dfe8:	ecb5 7a01 	vldmia	r5!, {s14}
 800dfec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dff0:	3001      	adds	r0, #1
 800dff2:	4550      	cmp	r0, sl
 800dff4:	dc01      	bgt.n	800dffa <__kernel_rem_pio2f+0x39a>
 800dff6:	4290      	cmp	r0, r2
 800dff8:	ddf4      	ble.n	800dfe4 <__kernel_rem_pio2f+0x384>
 800dffa:	a858      	add	r0, sp, #352	; 0x160
 800dffc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e000:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800e004:	3b01      	subs	r3, #1
 800e006:	e731      	b.n	800de6c <__kernel_rem_pio2f+0x20c>
 800e008:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	dc09      	bgt.n	800e022 <__kernel_rem_pio2f+0x3c2>
 800e00e:	2b00      	cmp	r3, #0
 800e010:	dc2b      	bgt.n	800e06a <__kernel_rem_pio2f+0x40a>
 800e012:	d044      	beq.n	800e09e <__kernel_rem_pio2f+0x43e>
 800e014:	f009 0007 	and.w	r0, r9, #7
 800e018:	b059      	add	sp, #356	; 0x164
 800e01a:	ecbd 8b04 	vpop	{d8-d9}
 800e01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e022:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e024:	2b03      	cmp	r3, #3
 800e026:	d1f5      	bne.n	800e014 <__kernel_rem_pio2f+0x3b4>
 800e028:	aa30      	add	r2, sp, #192	; 0xc0
 800e02a:	1f0b      	subs	r3, r1, #4
 800e02c:	4413      	add	r3, r2
 800e02e:	461a      	mov	r2, r3
 800e030:	4620      	mov	r0, r4
 800e032:	2800      	cmp	r0, #0
 800e034:	f1a2 0204 	sub.w	r2, r2, #4
 800e038:	dc52      	bgt.n	800e0e0 <__kernel_rem_pio2f+0x480>
 800e03a:	4622      	mov	r2, r4
 800e03c:	2a01      	cmp	r2, #1
 800e03e:	f1a3 0304 	sub.w	r3, r3, #4
 800e042:	dc5d      	bgt.n	800e100 <__kernel_rem_pio2f+0x4a0>
 800e044:	ab30      	add	r3, sp, #192	; 0xc0
 800e046:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800df60 <__kernel_rem_pio2f+0x300>
 800e04a:	440b      	add	r3, r1
 800e04c:	2c01      	cmp	r4, #1
 800e04e:	dc67      	bgt.n	800e120 <__kernel_rem_pio2f+0x4c0>
 800e050:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e054:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800e058:	2f00      	cmp	r7, #0
 800e05a:	d167      	bne.n	800e12c <__kernel_rem_pio2f+0x4cc>
 800e05c:	edc8 6a00 	vstr	s13, [r8]
 800e060:	ed88 7a01 	vstr	s14, [r8, #4]
 800e064:	edc8 7a02 	vstr	s15, [r8, #8]
 800e068:	e7d4      	b.n	800e014 <__kernel_rem_pio2f+0x3b4>
 800e06a:	ab30      	add	r3, sp, #192	; 0xc0
 800e06c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800df60 <__kernel_rem_pio2f+0x300>
 800e070:	440b      	add	r3, r1
 800e072:	4622      	mov	r2, r4
 800e074:	2a00      	cmp	r2, #0
 800e076:	da24      	bge.n	800e0c2 <__kernel_rem_pio2f+0x462>
 800e078:	b34f      	cbz	r7, 800e0ce <__kernel_rem_pio2f+0x46e>
 800e07a:	eef1 7a47 	vneg.f32	s15, s14
 800e07e:	edc8 7a00 	vstr	s15, [r8]
 800e082:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800e086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e08a:	aa31      	add	r2, sp, #196	; 0xc4
 800e08c:	2301      	movs	r3, #1
 800e08e:	429c      	cmp	r4, r3
 800e090:	da20      	bge.n	800e0d4 <__kernel_rem_pio2f+0x474>
 800e092:	b10f      	cbz	r7, 800e098 <__kernel_rem_pio2f+0x438>
 800e094:	eef1 7a67 	vneg.f32	s15, s15
 800e098:	edc8 7a01 	vstr	s15, [r8, #4]
 800e09c:	e7ba      	b.n	800e014 <__kernel_rem_pio2f+0x3b4>
 800e09e:	ab30      	add	r3, sp, #192	; 0xc0
 800e0a0:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800df60 <__kernel_rem_pio2f+0x300>
 800e0a4:	440b      	add	r3, r1
 800e0a6:	2c00      	cmp	r4, #0
 800e0a8:	da05      	bge.n	800e0b6 <__kernel_rem_pio2f+0x456>
 800e0aa:	b10f      	cbz	r7, 800e0b0 <__kernel_rem_pio2f+0x450>
 800e0ac:	eef1 7a67 	vneg.f32	s15, s15
 800e0b0:	edc8 7a00 	vstr	s15, [r8]
 800e0b4:	e7ae      	b.n	800e014 <__kernel_rem_pio2f+0x3b4>
 800e0b6:	ed33 7a01 	vldmdb	r3!, {s14}
 800e0ba:	3c01      	subs	r4, #1
 800e0bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0c0:	e7f1      	b.n	800e0a6 <__kernel_rem_pio2f+0x446>
 800e0c2:	ed73 7a01 	vldmdb	r3!, {s15}
 800e0c6:	3a01      	subs	r2, #1
 800e0c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0cc:	e7d2      	b.n	800e074 <__kernel_rem_pio2f+0x414>
 800e0ce:	eef0 7a47 	vmov.f32	s15, s14
 800e0d2:	e7d4      	b.n	800e07e <__kernel_rem_pio2f+0x41e>
 800e0d4:	ecb2 7a01 	vldmia	r2!, {s14}
 800e0d8:	3301      	adds	r3, #1
 800e0da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0de:	e7d6      	b.n	800e08e <__kernel_rem_pio2f+0x42e>
 800e0e0:	edd2 7a00 	vldr	s15, [r2]
 800e0e4:	edd2 6a01 	vldr	s13, [r2, #4]
 800e0e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e0ec:	3801      	subs	r0, #1
 800e0ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0f2:	ed82 7a00 	vstr	s14, [r2]
 800e0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0fa:	edc2 7a01 	vstr	s15, [r2, #4]
 800e0fe:	e798      	b.n	800e032 <__kernel_rem_pio2f+0x3d2>
 800e100:	edd3 7a00 	vldr	s15, [r3]
 800e104:	edd3 6a01 	vldr	s13, [r3, #4]
 800e108:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e10c:	3a01      	subs	r2, #1
 800e10e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e112:	ed83 7a00 	vstr	s14, [r3]
 800e116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e11a:	edc3 7a01 	vstr	s15, [r3, #4]
 800e11e:	e78d      	b.n	800e03c <__kernel_rem_pio2f+0x3dc>
 800e120:	ed33 7a01 	vldmdb	r3!, {s14}
 800e124:	3c01      	subs	r4, #1
 800e126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e12a:	e78f      	b.n	800e04c <__kernel_rem_pio2f+0x3ec>
 800e12c:	eef1 6a66 	vneg.f32	s13, s13
 800e130:	eeb1 7a47 	vneg.f32	s14, s14
 800e134:	edc8 6a00 	vstr	s13, [r8]
 800e138:	ed88 7a01 	vstr	s14, [r8, #4]
 800e13c:	eef1 7a67 	vneg.f32	s15, s15
 800e140:	e790      	b.n	800e064 <__kernel_rem_pio2f+0x404>
 800e142:	bf00      	nop

0800e144 <scalbnf>:
 800e144:	ee10 3a10 	vmov	r3, s0
 800e148:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e14c:	d02b      	beq.n	800e1a6 <scalbnf+0x62>
 800e14e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e152:	d302      	bcc.n	800e15a <scalbnf+0x16>
 800e154:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e158:	4770      	bx	lr
 800e15a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e15e:	d123      	bne.n	800e1a8 <scalbnf+0x64>
 800e160:	4b24      	ldr	r3, [pc, #144]	; (800e1f4 <scalbnf+0xb0>)
 800e162:	eddf 7a25 	vldr	s15, [pc, #148]	; 800e1f8 <scalbnf+0xb4>
 800e166:	4298      	cmp	r0, r3
 800e168:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e16c:	db17      	blt.n	800e19e <scalbnf+0x5a>
 800e16e:	ee10 3a10 	vmov	r3, s0
 800e172:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e176:	3a19      	subs	r2, #25
 800e178:	f24c 3150 	movw	r1, #50000	; 0xc350
 800e17c:	4288      	cmp	r0, r1
 800e17e:	dd15      	ble.n	800e1ac <scalbnf+0x68>
 800e180:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e1fc <scalbnf+0xb8>
 800e184:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800e200 <scalbnf+0xbc>
 800e188:	ee10 3a10 	vmov	r3, s0
 800e18c:	eeb0 7a67 	vmov.f32	s14, s15
 800e190:	2b00      	cmp	r3, #0
 800e192:	bfb8      	it	lt
 800e194:	eef0 7a66 	vmovlt.f32	s15, s13
 800e198:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e19c:	4770      	bx	lr
 800e19e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800e204 <scalbnf+0xc0>
 800e1a2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e1a6:	4770      	bx	lr
 800e1a8:	0dd2      	lsrs	r2, r2, #23
 800e1aa:	e7e5      	b.n	800e178 <scalbnf+0x34>
 800e1ac:	4410      	add	r0, r2
 800e1ae:	28fe      	cmp	r0, #254	; 0xfe
 800e1b0:	dce6      	bgt.n	800e180 <scalbnf+0x3c>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	dd06      	ble.n	800e1c4 <scalbnf+0x80>
 800e1b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e1ba:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e1be:	ee00 3a10 	vmov	s0, r3
 800e1c2:	4770      	bx	lr
 800e1c4:	f110 0f16 	cmn.w	r0, #22
 800e1c8:	da09      	bge.n	800e1de <scalbnf+0x9a>
 800e1ca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800e204 <scalbnf+0xc0>
 800e1ce:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800e208 <scalbnf+0xc4>
 800e1d2:	ee10 3a10 	vmov	r3, s0
 800e1d6:	eeb0 7a67 	vmov.f32	s14, s15
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	e7d9      	b.n	800e192 <scalbnf+0x4e>
 800e1de:	3019      	adds	r0, #25
 800e1e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e1e4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e1e8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800e20c <scalbnf+0xc8>
 800e1ec:	ee07 3a90 	vmov	s15, r3
 800e1f0:	e7d7      	b.n	800e1a2 <scalbnf+0x5e>
 800e1f2:	bf00      	nop
 800e1f4:	ffff3cb0 	.word	0xffff3cb0
 800e1f8:	4c000000 	.word	0x4c000000
 800e1fc:	7149f2ca 	.word	0x7149f2ca
 800e200:	f149f2ca 	.word	0xf149f2ca
 800e204:	0da24260 	.word	0x0da24260
 800e208:	8da24260 	.word	0x8da24260
 800e20c:	33000000 	.word	0x33000000

0800e210 <floorf>:
 800e210:	ee10 3a10 	vmov	r3, s0
 800e214:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e218:	3a7f      	subs	r2, #127	; 0x7f
 800e21a:	2a16      	cmp	r2, #22
 800e21c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e220:	dc2a      	bgt.n	800e278 <floorf+0x68>
 800e222:	2a00      	cmp	r2, #0
 800e224:	da11      	bge.n	800e24a <floorf+0x3a>
 800e226:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e288 <floorf+0x78>
 800e22a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e22e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e236:	dd05      	ble.n	800e244 <floorf+0x34>
 800e238:	2b00      	cmp	r3, #0
 800e23a:	da23      	bge.n	800e284 <floorf+0x74>
 800e23c:	4a13      	ldr	r2, [pc, #76]	; (800e28c <floorf+0x7c>)
 800e23e:	2900      	cmp	r1, #0
 800e240:	bf18      	it	ne
 800e242:	4613      	movne	r3, r2
 800e244:	ee00 3a10 	vmov	s0, r3
 800e248:	4770      	bx	lr
 800e24a:	4911      	ldr	r1, [pc, #68]	; (800e290 <floorf+0x80>)
 800e24c:	4111      	asrs	r1, r2
 800e24e:	420b      	tst	r3, r1
 800e250:	d0fa      	beq.n	800e248 <floorf+0x38>
 800e252:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e288 <floorf+0x78>
 800e256:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e25a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e262:	ddef      	ble.n	800e244 <floorf+0x34>
 800e264:	2b00      	cmp	r3, #0
 800e266:	bfbe      	ittt	lt
 800e268:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e26c:	fa40 f202 	asrlt.w	r2, r0, r2
 800e270:	189b      	addlt	r3, r3, r2
 800e272:	ea23 0301 	bic.w	r3, r3, r1
 800e276:	e7e5      	b.n	800e244 <floorf+0x34>
 800e278:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e27c:	d3e4      	bcc.n	800e248 <floorf+0x38>
 800e27e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e282:	4770      	bx	lr
 800e284:	2300      	movs	r3, #0
 800e286:	e7dd      	b.n	800e244 <floorf+0x34>
 800e288:	7149f2ca 	.word	0x7149f2ca
 800e28c:	bf800000 	.word	0xbf800000
 800e290:	007fffff 	.word	0x007fffff

0800e294 <_init>:
 800e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e296:	bf00      	nop
 800e298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e29a:	bc08      	pop	{r3}
 800e29c:	469e      	mov	lr, r3
 800e29e:	4770      	bx	lr

0800e2a0 <_fini>:
 800e2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a2:	bf00      	nop
 800e2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2a6:	bc08      	pop	{r3}
 800e2a8:	469e      	mov	lr, r3
 800e2aa:	4770      	bx	lr
